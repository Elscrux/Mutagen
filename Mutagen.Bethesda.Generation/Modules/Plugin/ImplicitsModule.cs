using Loqui.Generation;
using Noggog;
using Noggog.IO;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;

namespace Mutagen.Bethesda.Generation.Modules.Plugin;

public class ImplicitsModule : GenerationModule
{
    public override async Task FinalizeGeneration(ProtocolGeneration proto)
    {
        if (proto.Protocol.Namespace.Equals("Bethesda")) return;

        var objData = proto.ObjectGenerationsByName.Values.FirstOrDefault()?.GetObjectData();
        if (objData == null) return;

        var relString = objData.HasMultipleReleases ? "release.ToGameRelease()" : $"{nameof(GameRelease)}.{proto.Protocol.Namespace}";

        StructuredStringBuilder sb = new StructuredStringBuilder();
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine($"using Mutagen.Bethesda.Plugins;");
        sb.AppendLine($"using Mutagen.Bethesda.Plugins.Implicit;");
        sb.AppendLine($"using Mutagen.Bethesda.{proto.Protocol.Namespace};");
        sb.AppendLine();
        using (var n = sb.Namespace("Mutagen.Bethesda", fileScoped: false))
        {
            using (var c = sb.Class("ImplicitsMixIn"))
            {
                c.Static = true;
            }
            using (sb.CurlyBrace())
            {
                using (var args = sb.Function(
                           $"public static IReadOnlyCollection<ModKey> {proto.Protocol.Namespace}"))
                {
                    args.Add($"this ImplicitBaseMasters _");
                    if (objData.HasMultipleReleases)
                    {
                        args.Add($"{objData.GameCategory}Release release");
                    }
                }
                using (sb.CurlyBrace())
                {
                    sb.AppendLine($"return Implicits.Get({relString}).BaseMasters;");
                }
                sb.AppendLine();

                using (var args = sb.Function(
                           $"public static IReadOnlyCollection<ModKey> {proto.Protocol.Namespace}"))
                {
                    args.Add($"this ImplicitListings _");
                    if (objData.HasMultipleReleases)
                    {
                        args.Add($"{objData.GameCategory}Release release");
                    }
                }
                using (sb.CurlyBrace())
                {
                    sb.AppendLine($"return Implicits.Get({relString}).Listings;");
                }
                sb.AppendLine();

                using (var args = sb.Function(
                           $"public static IReadOnlyCollection<FormKey> {proto.Protocol.Namespace}"))
                {
                    args.Add($"this ImplicitRecordFormKeys _");
                    if (objData.HasMultipleReleases)
                    {
                        args.Add($"{objData.GameCategory}Release release");
                    }
                }
                using (sb.CurlyBrace())
                {
                    sb.AppendLine($"return Implicits.Get({relString}).RecordFormKeys;");
                }
            }
        }

        var path = Path.Combine(proto.DefFileLocation.FullName, $"../ImplicitsMixIn{Loqui.Generation.Constants.AutogeneratedMarkerString}.cs");
        ExportStringToFile exportStringToFile = new(IFileSystemExt.DefaultFilesystem);
        exportStringToFile.ExportToFile(path, sb.GetString());
        proto.GeneratedFiles.Add(path, ProjItemType.Compile);
    }
}