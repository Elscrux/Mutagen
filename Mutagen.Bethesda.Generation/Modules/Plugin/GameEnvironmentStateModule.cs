using Loqui.Generation;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Environments;
using Noggog;
using Noggog.IO;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using ObjectType = Mutagen.Bethesda.Plugins.Meta.ObjectType;

namespace Mutagen.Bethesda.Generation.Modules.Plugin;

public class GameEnvironmentStateModule : GenerationModule
{
    public override async Task FinalizeGeneration(ProtocolGeneration proto)
    {
        await base.FinalizeGeneration(proto);

        if (proto.Protocol.Namespace.Equals("All")
            || proto.Protocol.Namespace.Equals("Bethesda")) return;
            
        StructuredStringBuilder sb = new StructuredStringBuilder();
        
        var modObj = proto.ObjectGenerationsByName.Values.FirstOrDefault(x => x.GetObjectType() == ObjectType.Mod);
        if (modObj == null) return;

        sb.AppendLine($"using Mutagen.Bethesda.{proto.Protocol.Namespace};");
        sb.AppendLine($"using Mutagen.Bethesda.Environments;");
        sb.AppendLine($"using Mutagen.Bethesda.Plugins.Cache;");
        sb.AppendLine();

        using (sb.Namespace("Mutagen.Bethesda", fileScoped: false))
        {
            using (var c = sb.Class("GameEnvironmentMixIn"))
            {
                c.Static = true;
            }
            using (sb.CurlyBrace())
            {
                var hasMultipleReleases = modObj.GetObjectData().HasMultipleReleases;
                var retType = $"IGameEnvironment<I{modObj.Name}, I{modObj.Name}Getter>";
                using (var args = sb.Function(
                           $"public static {retType} {modObj.ProtoGen.Protocol.Namespace}"))
                {
                    args.Add($"this {nameof(GameEnvironment)} env");
                    if (hasMultipleReleases)
                    {
                        args.Add($"{modObj.GetObjectData().GameCategory}Release gameRelease");
                    }
                    args.Add($"{nameof(LinkCachePreferences)}? linkCachePrefs = null");
                }
                using (sb.CurlyBrace())
                {
                    sb.AppendLine($"return env.Construct<I{modObj.Name}, I{modObj.Name}Getter>({(hasMultipleReleases ? "gameRelease.ToGameRelease()" : $"GameRelease.{modObj.ProtoGen.Protocol.Namespace}")}, linkCachePrefs);");
                }
                sb.AppendLine();
            }
        }

        var path = Path.Combine(proto.DefFileLocation.FullName, $"../GameEnvironmentMixIn{Loqui.Generation.Constants.AutogeneratedMarkerString}.cs");
        ExportStringToFile exportStringToFile = new(IFileSystemExt.DefaultFilesystem);
        exportStringToFile.ExportToFile(path, sb.GetString());
        proto.GeneratedFiles.Add(path, ProjItemType.Compile);
    }
}