/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.RecordTypeMapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    /// <summary>
    /// Implemented by: [StoryManagerBranchNode, StoryManagerQuestNode, StoryManagerEventNode]
    /// </summary>
    public abstract partial class AStoryManagerNode :
        SkyrimMajorRecord,
        IAStoryManagerNodeInternal,
        IEquatable<IAStoryManagerNodeGetter>,
        ILoquiObjectSetter<AStoryManagerNode>
    {
        #region Ctor
        protected AStoryManagerNode()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Parent
        private readonly IFormLinkNullable<IAStoryManagerNodeGetter> _Parent = new FormLinkNullable<IAStoryManagerNodeGetter>();
        public IFormLinkNullable<IAStoryManagerNodeGetter> Parent
        {
            get => _Parent;
            set => _Parent.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IAStoryManagerNodeGetter> IAStoryManagerNodeGetter.Parent => this.Parent;
        #endregion
        #region PreviousSibling
        private readonly IFormLinkNullable<IAStoryManagerNodeGetter> _PreviousSibling = new FormLinkNullable<IAStoryManagerNodeGetter>();
        public IFormLinkNullable<IAStoryManagerNodeGetter> PreviousSibling
        {
            get => _PreviousSibling;
            set => _PreviousSibling.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IAStoryManagerNodeGetter> IAStoryManagerNodeGetter.PreviousSibling => this.PreviousSibling;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            init => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IAStoryManagerNodeGetter.Conditions => _Conditions;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            AStoryManagerNodeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Parent = initialValue;
                this.PreviousSibling = initialValue;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Parent,
                TItem PreviousSibling,
                TItem Conditions)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Parent = Parent;
                this.PreviousSibling = PreviousSibling;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Parent;
            public TItem PreviousSibling;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Parent, rhs.Parent)) return false;
                if (!object.Equals(this.PreviousSibling, rhs.PreviousSibling)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Parent);
                hash.Add(this.PreviousSibling);
                hash.Add(this.Conditions);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Parent)) return false;
                if (!eval(this.PreviousSibling)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Parent)) return true;
                if (eval(this.PreviousSibling)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AStoryManagerNode.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Parent = eval(this.Parent);
                obj.PreviousSibling = eval(this.PreviousSibling);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(AStoryManagerNode.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, AStoryManagerNode.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(AStoryManagerNode.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Parent ?? true)
                    {
                        fg.AppendItem(Parent, "Parent");
                    }
                    if (printMask?.PreviousSibling ?? true)
                    {
                        fg.AppendItem(PreviousSibling, "PreviousSibling");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Parent;
            public Exception? PreviousSibling;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                AStoryManagerNode_FieldIndex enu = (AStoryManagerNode_FieldIndex)index;
                switch (enu)
                {
                    case AStoryManagerNode_FieldIndex.Parent:
                        return Parent;
                    case AStoryManagerNode_FieldIndex.PreviousSibling:
                        return PreviousSibling;
                    case AStoryManagerNode_FieldIndex.Conditions:
                        return Conditions;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                AStoryManagerNode_FieldIndex enu = (AStoryManagerNode_FieldIndex)index;
                switch (enu)
                {
                    case AStoryManagerNode_FieldIndex.Parent:
                        this.Parent = ex;
                        break;
                    case AStoryManagerNode_FieldIndex.PreviousSibling:
                        this.PreviousSibling = ex;
                        break;
                    case AStoryManagerNode_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                AStoryManagerNode_FieldIndex enu = (AStoryManagerNode_FieldIndex)index;
                switch (enu)
                {
                    case AStoryManagerNode_FieldIndex.Parent:
                        this.Parent = (Exception?)obj;
                        break;
                    case AStoryManagerNode_FieldIndex.PreviousSibling:
                        this.PreviousSibling = (Exception?)obj;
                        break;
                    case AStoryManagerNode_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Parent != null) return true;
                if (PreviousSibling != null) return true;
                if (Conditions != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Parent, "Parent");
                fg.AppendItem(PreviousSibling, "PreviousSibling");
                if (Conditions is {} ConditionsItem)
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Parent = this.Parent.Combine(rhs.Parent);
                ret.PreviousSibling = this.PreviousSibling.Combine(rhs.PreviousSibling);
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Parent;
            public bool PreviousSibling;
            public Condition.TranslationMask? Conditions;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Parent = defaultOn;
                this.PreviousSibling = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Parent, null));
                ret.Add((PreviousSibling, null));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => AStoryManagerNodeCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => AStoryManagerNodeSetterCommon.Instance.RemapLinks(this, mapping);
        public AStoryManagerNode(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private AStoryManagerNode(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal AStoryManagerNode(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public AStoryManagerNode(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public AStoryManagerNode(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<AStoryManagerNode>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IAStoryManagerNodeGetter rhs) return false;
            return ((AStoryManagerNodeCommon)((IAStoryManagerNodeGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IAStoryManagerNodeGetter? obj)
        {
            return ((AStoryManagerNodeCommon)((IAStoryManagerNodeGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((AStoryManagerNodeCommon)((IAStoryManagerNodeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AStoryManagerNodeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((AStoryManagerNodeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((AStoryManagerNodeSetterCommon)((IAStoryManagerNodeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new AStoryManagerNode GetNew()
        {
            throw new ArgumentException("New called on an abstract class.");
        }

    }
    #endregion

    #region Interface
    /// <summary>
    /// Implemented by: [StoryManagerBranchNode, StoryManagerQuestNode, StoryManagerEventNode]
    /// </summary>
    public partial interface IAStoryManagerNode :
        IAStoryManagerNodeGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IAStoryManagerNodeInternal>,
        ISkyrimMajorRecordInternal
    {
        new IFormLinkNullable<IAStoryManagerNodeGetter> Parent { get; set; }
        new IFormLinkNullable<IAStoryManagerNodeGetter> PreviousSibling { get; set; }
        new ExtendedList<Condition> Conditions { get; }
    }

    public partial interface IAStoryManagerNodeInternal :
        ISkyrimMajorRecordInternal,
        IAStoryManagerNode,
        IAStoryManagerNodeGetter
    {
    }

    /// <summary>
    /// Implemented by: [StoryManagerBranchNode, StoryManagerQuestNode, StoryManagerEventNode]
    /// </summary>
    public partial interface IAStoryManagerNodeGetter :
        ISkyrimMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IAStoryManagerNodeGetter>
    {
        static new ILoquiRegistration StaticRegistration => AStoryManagerNode_Registration.Instance;
        IFormLinkNullableGetter<IAStoryManagerNodeGetter> Parent { get; }
        IFormLinkNullableGetter<IAStoryManagerNodeGetter> PreviousSibling { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class AStoryManagerNodeMixIn
    {
        public static void Clear(this IAStoryManagerNodeInternal item)
        {
            ((AStoryManagerNodeSetterCommon)((IAStoryManagerNodeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AStoryManagerNode.Mask<bool> GetEqualsMask(
            this IAStoryManagerNodeGetter item,
            IAStoryManagerNodeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AStoryManagerNodeCommon)((IAStoryManagerNodeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IAStoryManagerNodeGetter item,
            string? name = null,
            AStoryManagerNode.Mask<bool>? printMask = null)
        {
            return ((AStoryManagerNodeCommon)((IAStoryManagerNodeGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IAStoryManagerNodeGetter item,
            FileGeneration fg,
            string? name = null,
            AStoryManagerNode.Mask<bool>? printMask = null)
        {
            ((AStoryManagerNodeCommon)((IAStoryManagerNodeGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IAStoryManagerNodeGetter item,
            IAStoryManagerNodeGetter rhs,
            AStoryManagerNode.TranslationMask? equalsMask = null)
        {
            return ((AStoryManagerNodeCommon)((IAStoryManagerNodeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IAStoryManagerNodeInternal lhs,
            IAStoryManagerNodeGetter rhs,
            out AStoryManagerNode.ErrorMask errorMask,
            AStoryManagerNode.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AStoryManagerNodeSetterTranslationCommon)((IAStoryManagerNodeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = AStoryManagerNode.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAStoryManagerNodeInternal lhs,
            IAStoryManagerNodeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AStoryManagerNodeSetterTranslationCommon)((IAStoryManagerNodeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static AStoryManagerNode DeepCopy(
            this IAStoryManagerNodeGetter item,
            AStoryManagerNode.TranslationMask? copyMask = null)
        {
            return ((AStoryManagerNodeSetterTranslationCommon)((IAStoryManagerNodeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AStoryManagerNode DeepCopy(
            this IAStoryManagerNodeGetter item,
            out AStoryManagerNode.ErrorMask errorMask,
            AStoryManagerNode.TranslationMask? copyMask = null)
        {
            return ((AStoryManagerNodeSetterTranslationCommon)((IAStoryManagerNodeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AStoryManagerNode DeepCopy(
            this IAStoryManagerNodeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AStoryManagerNodeSetterTranslationCommon)((IAStoryManagerNodeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static AStoryManagerNode Duplicate(
            this IAStoryManagerNodeGetter item,
            FormKey formKey,
            AStoryManagerNode.TranslationMask? copyMask = null)
        {
            return ((AStoryManagerNodeCommon)((IAStoryManagerNodeGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IAStoryManagerNodeInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((AStoryManagerNodeSetterCommon)((IAStoryManagerNodeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum AStoryManagerNode_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Parent = 6,
        PreviousSibling = 7,
        Conditions = 8,
    }
    #endregion

    #region Registration
    public partial class AStoryManagerNode_Registration : ILoquiRegistration
    {
        public static readonly AStoryManagerNode_Registration Instance = new AStoryManagerNode_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 454,
            version: 0);

        public const string GUID = "584bb4cb-8773-49ba-b205-eb549dc029b0";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(AStoryManagerNode.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AStoryManagerNode.ErrorMask);

        public static readonly Type ClassType = typeof(AStoryManagerNode);

        public static readonly Type GetterType = typeof(IAStoryManagerNodeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAStoryManagerNode);

        public static readonly Type? InternalSetterType = typeof(IAStoryManagerNodeInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.AStoryManagerNode";

        public const string Name = "AStoryManagerNode";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static TriggeringRecordCollection TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<TriggeringRecordCollection> _TriggeringRecordTypes = new Lazy<TriggeringRecordCollection>(() =>
        {
            return new TriggeringRecordCollection(
                RecordTypes.PNAM,
                RecordTypes.SNAM,
                RecordTypes.CTDA,
                RecordTypes.CITC,
                RecordTypes.SMBN,
                RecordTypes.SMQN,
                RecordTypes.SMEN);
        });
        public static readonly Type BinaryWriteTranslation = typeof(AStoryManagerNodeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class AStoryManagerNodeSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly AStoryManagerNodeSetterCommon Instance = new AStoryManagerNodeSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IAStoryManagerNodeInternal item)
        {
            ClearPartial();
            item.Parent.Clear();
            item.PreviousSibling.Clear();
            item.Conditions.Clear();
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IAStoryManagerNodeInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IAStoryManagerNodeInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IAStoryManagerNode obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Parent.Relink(mapping);
            obj.PreviousSibling.Relink(mapping);
            obj.Conditions.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAStoryManagerNodeInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (AStoryManagerNode)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (AStoryManagerNode)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    public partial class AStoryManagerNodeCommon : SkyrimMajorRecordCommon
    {
        public new static readonly AStoryManagerNodeCommon Instance = new AStoryManagerNodeCommon();

        public AStoryManagerNode.Mask<bool> GetEqualsMask(
            IAStoryManagerNodeGetter item,
            IAStoryManagerNodeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AStoryManagerNode.Mask<bool>(false);
            ((AStoryManagerNodeCommon)((IAStoryManagerNodeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAStoryManagerNodeGetter item,
            IAStoryManagerNodeGetter rhs,
            AStoryManagerNode.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Parent = item.Parent.Equals(rhs.Parent);
            ret.PreviousSibling = item.PreviousSibling.Equals(rhs.PreviousSibling);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IAStoryManagerNodeGetter item,
            string? name = null,
            AStoryManagerNode.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IAStoryManagerNodeGetter item,
            FileGeneration fg,
            string? name = null,
            AStoryManagerNode.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"AStoryManagerNode =>");
            }
            else
            {
                fg.AppendLine($"{name} (AStoryManagerNode) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IAStoryManagerNodeGetter item,
            FileGeneration fg,
            AStoryManagerNode.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Parent ?? true)
            {
                fg.AppendItem(item.Parent.FormKeyNullable, "Parent");
            }
            if (printMask?.PreviousSibling ?? true)
            {
                fg.AppendItem(item.PreviousSibling.FormKeyNullable, "PreviousSibling");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Conditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public static AStoryManagerNode_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AStoryManagerNode_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (AStoryManagerNode_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (AStoryManagerNode_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (AStoryManagerNode_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (AStoryManagerNode_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (AStoryManagerNode_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new AStoryManagerNode_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AStoryManagerNode_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (AStoryManagerNode_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (AStoryManagerNode_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (AStoryManagerNode_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAStoryManagerNodeGetter? lhs,
            IAStoryManagerNodeGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)AStoryManagerNode_FieldIndex.Parent) ?? true))
            {
                if (!lhs.Parent.Equals(rhs.Parent)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)AStoryManagerNode_FieldIndex.PreviousSibling) ?? true))
            {
                if (!lhs.PreviousSibling.Equals(rhs.PreviousSibling)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)AStoryManagerNode_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqualNullable(rhs.Conditions)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IAStoryManagerNodeGetter?)lhs,
                rhs: rhs as IAStoryManagerNodeGetter,
                crystal: crystal);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IAStoryManagerNodeGetter?)lhs,
                rhs: rhs as IAStoryManagerNodeGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(IAStoryManagerNodeGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Parent);
            hash.Add(item.PreviousSibling);
            hash.Add(item.Conditions);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IAStoryManagerNodeGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IAStoryManagerNodeGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return AStoryManagerNode.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IAStoryManagerNodeGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Parent.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Parent);
            }
            if (obj.PreviousSibling.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.PreviousSibling);
            }
            foreach (var item in obj.Conditions.WhereCastable<IConditionGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public virtual AStoryManagerNode Duplicate(
            IAStoryManagerNodeGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            throw new NotImplementedException();
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAStoryManagerNodeGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAStoryManagerNodeGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class AStoryManagerNodeSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly AStoryManagerNodeSetterTranslationCommon Instance = new AStoryManagerNodeSetterTranslationCommon();

        #region DeepCopyIn
        public virtual void DeepCopyIn(
            IAStoryManagerNodeInternal item,
            IAStoryManagerNodeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public virtual void DeepCopyIn(
            IAStoryManagerNode item,
            IAStoryManagerNodeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)AStoryManagerNode_FieldIndex.Parent) ?? true))
            {
                item.Parent.SetTo(rhs.Parent.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)AStoryManagerNode_FieldIndex.PreviousSibling) ?? true))
            {
                item.PreviousSibling.SetTo(rhs.PreviousSibling.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)AStoryManagerNode_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)AStoryManagerNode_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAStoryManagerNodeInternal)item,
                rhs: (IAStoryManagerNodeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAStoryManagerNode)item,
                rhs: (IAStoryManagerNodeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAStoryManagerNodeInternal)item,
                rhs: (IAStoryManagerNodeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAStoryManagerNode)item,
                rhs: (IAStoryManagerNodeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public AStoryManagerNode DeepCopy(
            IAStoryManagerNodeGetter item,
            AStoryManagerNode.TranslationMask? copyMask = null)
        {
            AStoryManagerNode ret = (AStoryManagerNode)((AStoryManagerNodeCommon)((IAStoryManagerNodeGetter)item).CommonInstance()!).GetNew();
            ((AStoryManagerNodeSetterTranslationCommon)((IAStoryManagerNodeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public AStoryManagerNode DeepCopy(
            IAStoryManagerNodeGetter item,
            out AStoryManagerNode.ErrorMask errorMask,
            AStoryManagerNode.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AStoryManagerNode ret = (AStoryManagerNode)((AStoryManagerNodeCommon)((IAStoryManagerNodeGetter)item).CommonInstance()!).GetNew();
            ((AStoryManagerNodeSetterTranslationCommon)((IAStoryManagerNodeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = AStoryManagerNode.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public AStoryManagerNode DeepCopy(
            IAStoryManagerNodeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AStoryManagerNode ret = (AStoryManagerNode)((AStoryManagerNodeCommon)((IAStoryManagerNodeGetter)item).CommonInstance()!).GetNew();
            ((AStoryManagerNodeSetterTranslationCommon)((IAStoryManagerNodeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class AStoryManagerNode
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AStoryManagerNode_Registration.Instance;
        public new static AStoryManagerNode_Registration StaticRegistration => AStoryManagerNode_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AStoryManagerNodeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return AStoryManagerNodeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AStoryManagerNodeSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class AStoryManagerNodeBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static AStoryManagerNodeBinaryWriteTranslation Instance = new AStoryManagerNodeBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IAStoryManagerNodeGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Parent,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PreviousSibling,
                header: translationParams.ConvertToCustom(RecordTypes.SNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Conditions,
                counterType: RecordTypes.CITC,
                counterLength: 4,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams? conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public virtual void Write(
            MutagenWriter writer,
            IAStoryManagerNodeGetter item,
            TypedWriteParams? translationParams = null)
        {
            try
            {
                SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                writer.MetaData.FormVersion = item.FormVersion;
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    translationParams: translationParams);
                writer.MetaData.FormVersion = null;
            }
            catch (Exception ex)
            {
                throw RecordException.Enrich(ex, item);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IAStoryManagerNodeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IAStoryManagerNodeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IAStoryManagerNodeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class AStoryManagerNodeBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static AStoryManagerNodeBinaryCreateTranslation Instance = new AStoryManagerNodeBinaryCreateTranslation();

        public override RecordType RecordType => throw new ArgumentException();
        public static ParseResult FillBinaryRecordTypes(
            IAStoryManagerNodeInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Parent.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)AStoryManagerNode_FieldIndex.Parent;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PreviousSibling.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)AStoryManagerNode_FieldIndex.PreviousSibling;
                }
                case RecordTypeInts.CTDA:
                case RecordTypeInts.CITC:
                {
                    item.Conditions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.CITC,
                            triggeringRecord: Condition_Registration.TriggeringRecordTypes,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary));
                    return (int)AStoryManagerNode_FieldIndex.Conditions;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class AStoryManagerNodeBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public abstract partial class AStoryManagerNodeBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IAStoryManagerNodeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AStoryManagerNode_Registration.Instance;
        public new static AStoryManagerNode_Registration StaticRegistration => AStoryManagerNode_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AStoryManagerNodeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AStoryManagerNodeSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => AStoryManagerNodeCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AStoryManagerNodeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((AStoryManagerNodeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Parent
        private int? _ParentLocation;
        public IFormLinkNullableGetter<IAStoryManagerNodeGetter> Parent => _ParentLocation.HasValue ? new FormLinkNullable<IAStoryManagerNodeGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ParentLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IAStoryManagerNodeGetter>.Null;
        #endregion
        #region PreviousSibling
        private int? _PreviousSiblingLocation;
        public IFormLinkNullableGetter<IAStoryManagerNodeGetter> PreviousSibling => _PreviousSiblingLocation.HasValue ? new FormLinkNullable<IAStoryManagerNodeGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _PreviousSiblingLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IAStoryManagerNodeGetter>.Null;
        #endregion
        #region Conditions
        partial void ConditionsCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected AStoryManagerNodeBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }


        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.PNAM:
                {
                    _ParentLocation = (stream.Position - offset);
                    return (int)AStoryManagerNode_FieldIndex.Parent;
                }
                case RecordTypeInts.SNAM:
                {
                    _PreviousSiblingLocation = (stream.Position - offset);
                    return (int)AStoryManagerNode_FieldIndex.PreviousSibling;
                }
                case RecordTypeInts.CTDA:
                case RecordTypeInts.CITC:
                {
                    ConditionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)AStoryManagerNode_FieldIndex.Conditions;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            AStoryManagerNodeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<AStoryManagerNode>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IAStoryManagerNodeGetter rhs) return false;
            return ((AStoryManagerNodeCommon)((IAStoryManagerNodeGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IAStoryManagerNodeGetter? obj)
        {
            return ((AStoryManagerNodeCommon)((IAStoryManagerNodeGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((AStoryManagerNodeCommon)((IAStoryManagerNodeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

