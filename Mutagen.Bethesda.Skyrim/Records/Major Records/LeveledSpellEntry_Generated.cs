/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class LeveledSpellEntry :
        IEquatable<ILeveledSpellEntryGetter>,
        ILeveledSpellEntry,
        ILoquiObjectSetter<LeveledSpellEntry>
    {
        #region Ctor
        public LeveledSpellEntry()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private LeveledSpellEntryData? _Data;
        public LeveledSpellEntryData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILeveledSpellEntryDataGetter? ILeveledSpellEntryGetter.Data => this.Data;
        #endregion
        #region ExtraData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtraData? _ExtraData;
        public ExtraData? ExtraData
        {
            get => _ExtraData;
            set => _ExtraData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IExtraDataGetter? ILeveledSpellEntryGetter.ExtraData => this.ExtraData;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            LeveledSpellEntryMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ILeveledSpellEntryGetter rhs) return false;
            return ((LeveledSpellEntryCommon)((ILeveledSpellEntryGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ILeveledSpellEntryGetter? obj)
        {
            return ((LeveledSpellEntryCommon)((ILeveledSpellEntryGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((LeveledSpellEntryCommon)((ILeveledSpellEntryGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Data = new MaskItem<TItem, LeveledSpellEntryData.Mask<TItem>?>(initialValue, new LeveledSpellEntryData.Mask<TItem>(initialValue));
                this.ExtraData = new MaskItem<TItem, ExtraData.Mask<TItem>?>(initialValue, new ExtraData.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Data,
                TItem ExtraData)
            {
                this.Data = new MaskItem<TItem, LeveledSpellEntryData.Mask<TItem>?>(Data, new LeveledSpellEntryData.Mask<TItem>(Data));
                this.ExtraData = new MaskItem<TItem, ExtraData.Mask<TItem>?>(ExtraData, new ExtraData.Mask<TItem>(ExtraData));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, LeveledSpellEntryData.Mask<TItem>?>? Data { get; set; }
            public MaskItem<TItem, ExtraData.Mask<TItem>?>? ExtraData { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.ExtraData, rhs.ExtraData)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Data);
                hash.Add(this.ExtraData);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                if (ExtraData != null)
                {
                    if (!eval(this.ExtraData.Overall)) return false;
                    if (this.ExtraData.Specific != null && !this.ExtraData.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                if (ExtraData != null)
                {
                    if (eval(this.ExtraData.Overall)) return true;
                    if (this.ExtraData.Specific != null && this.ExtraData.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new LeveledSpellEntry.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Data = this.Data == null ? null : new MaskItem<R, LeveledSpellEntryData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
                obj.ExtraData = this.ExtraData == null ? null : new MaskItem<R, ExtraData.Mask<R>?>(eval(this.ExtraData.Overall), this.ExtraData.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(LeveledSpellEntry.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, LeveledSpellEntry.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(LeveledSpellEntry.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.Print(sb);
                    }
                    if (printMask?.ExtraData?.Overall ?? true)
                    {
                        ExtraData?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, LeveledSpellEntryData.ErrorMask?>? Data;
            public MaskItem<Exception?, ExtraData.ErrorMask?>? ExtraData;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                LeveledSpellEntry_FieldIndex enu = (LeveledSpellEntry_FieldIndex)index;
                switch (enu)
                {
                    case LeveledSpellEntry_FieldIndex.Data:
                        return Data;
                    case LeveledSpellEntry_FieldIndex.ExtraData:
                        return ExtraData;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                LeveledSpellEntry_FieldIndex enu = (LeveledSpellEntry_FieldIndex)index;
                switch (enu)
                {
                    case LeveledSpellEntry_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, LeveledSpellEntryData.ErrorMask?>(ex, null);
                        break;
                    case LeveledSpellEntry_FieldIndex.ExtraData:
                        this.ExtraData = new MaskItem<Exception?, ExtraData.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                LeveledSpellEntry_FieldIndex enu = (LeveledSpellEntry_FieldIndex)index;
                switch (enu)
                {
                    case LeveledSpellEntry_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, LeveledSpellEntryData.ErrorMask?>?)obj;
                        break;
                    case LeveledSpellEntry_FieldIndex.ExtraData:
                        this.ExtraData = (MaskItem<Exception?, ExtraData.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Data != null) return true;
                if (ExtraData != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                Data?.Print(sb);
                ExtraData?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                ret.ExtraData = this.ExtraData.Combine(rhs.ExtraData, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public LeveledSpellEntryData.TranslationMask? Data;
            public ExtraData.TranslationMask? ExtraData;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Data != null ? Data.OnOverall : DefaultOn, Data?.GetCrystal()));
                ret.Add((ExtraData != null ? ExtraData.OnOverall : DefaultOn, ExtraData?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => LeveledSpellEntryCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LeveledSpellEntrySetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LeveledSpellEntryBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LeveledSpellEntryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static LeveledSpellEntry CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new LeveledSpellEntry();
            ((LeveledSpellEntrySetterCommon)((ILeveledSpellEntryGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out LeveledSpellEntry item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((LeveledSpellEntrySetterCommon)((ILeveledSpellEntryGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static LeveledSpellEntry GetNew()
        {
            return new LeveledSpellEntry();
        }

    }
    #endregion

    #region Interface
    public partial interface ILeveledSpellEntry :
        IFormLinkContainer,
        ILeveledSpellEntryGetter,
        ILoquiObjectSetter<ILeveledSpellEntry>
    {
        new LeveledSpellEntryData? Data { get; set; }
        new ExtraData? ExtraData { get; set; }
    }

    public partial interface ILeveledSpellEntryGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ILeveledSpellEntryGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => LeveledSpellEntry_Registration.Instance;
        ILeveledSpellEntryDataGetter? Data { get; }
        IExtraDataGetter? ExtraData { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class LeveledSpellEntryMixIn
    {
        public static void Clear(this ILeveledSpellEntry item)
        {
            ((LeveledSpellEntrySetterCommon)((ILeveledSpellEntryGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static LeveledSpellEntry.Mask<bool> GetEqualsMask(
            this ILeveledSpellEntryGetter item,
            ILeveledSpellEntryGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LeveledSpellEntryCommon)((ILeveledSpellEntryGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ILeveledSpellEntryGetter item,
            string? name = null,
            LeveledSpellEntry.Mask<bool>? printMask = null)
        {
            return ((LeveledSpellEntryCommon)((ILeveledSpellEntryGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ILeveledSpellEntryGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            LeveledSpellEntry.Mask<bool>? printMask = null)
        {
            ((LeveledSpellEntryCommon)((ILeveledSpellEntryGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ILeveledSpellEntryGetter item,
            ILeveledSpellEntryGetter rhs,
            LeveledSpellEntry.TranslationMask? equalsMask = null)
        {
            return ((LeveledSpellEntryCommon)((ILeveledSpellEntryGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ILeveledSpellEntry lhs,
            ILeveledSpellEntryGetter rhs)
        {
            ((LeveledSpellEntrySetterTranslationCommon)((ILeveledSpellEntryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ILeveledSpellEntry lhs,
            ILeveledSpellEntryGetter rhs,
            LeveledSpellEntry.TranslationMask? copyMask = null)
        {
            ((LeveledSpellEntrySetterTranslationCommon)((ILeveledSpellEntryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ILeveledSpellEntry lhs,
            ILeveledSpellEntryGetter rhs,
            out LeveledSpellEntry.ErrorMask errorMask,
            LeveledSpellEntry.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LeveledSpellEntrySetterTranslationCommon)((ILeveledSpellEntryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = LeveledSpellEntry.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILeveledSpellEntry lhs,
            ILeveledSpellEntryGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LeveledSpellEntrySetterTranslationCommon)((ILeveledSpellEntryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static LeveledSpellEntry DeepCopy(
            this ILeveledSpellEntryGetter item,
            LeveledSpellEntry.TranslationMask? copyMask = null)
        {
            return ((LeveledSpellEntrySetterTranslationCommon)((ILeveledSpellEntryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LeveledSpellEntry DeepCopy(
            this ILeveledSpellEntryGetter item,
            out LeveledSpellEntry.ErrorMask errorMask,
            LeveledSpellEntry.TranslationMask? copyMask = null)
        {
            return ((LeveledSpellEntrySetterTranslationCommon)((ILeveledSpellEntryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LeveledSpellEntry DeepCopy(
            this ILeveledSpellEntryGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LeveledSpellEntrySetterTranslationCommon)((ILeveledSpellEntryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ILeveledSpellEntry item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((LeveledSpellEntrySetterCommon)((ILeveledSpellEntryGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum LeveledSpellEntry_FieldIndex
    {
        Data = 0,
        ExtraData = 1,
    }
    #endregion

    #region Registration
    internal partial class LeveledSpellEntry_Registration : ILoquiRegistration
    {
        public static readonly LeveledSpellEntry_Registration Instance = new LeveledSpellEntry_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(LeveledSpellEntry.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LeveledSpellEntry.ErrorMask);

        public static readonly Type ClassType = typeof(LeveledSpellEntry);

        public static readonly Type GetterType = typeof(ILeveledSpellEntryGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILeveledSpellEntry);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.LeveledSpellEntry";

        public const string Name = "LeveledSpellEntry";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(
                RecordTypes.LVLO,
                RecordTypes.COED);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(LeveledSpellEntryBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class LeveledSpellEntrySetterCommon
    {
        public static readonly LeveledSpellEntrySetterCommon Instance = new LeveledSpellEntrySetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILeveledSpellEntry item)
        {
            ClearPartial();
            item.Data = null;
            item.ExtraData = null;
        }
        
        #region Mutagen
        public void RemapLinks(ILeveledSpellEntry obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Data?.RemapLinks(mapping);
            obj.ExtraData?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILeveledSpellEntry item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: LeveledSpellEntryBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class LeveledSpellEntryCommon
    {
        public static readonly LeveledSpellEntryCommon Instance = new LeveledSpellEntryCommon();

        public LeveledSpellEntry.Mask<bool> GetEqualsMask(
            ILeveledSpellEntryGetter item,
            ILeveledSpellEntryGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LeveledSpellEntry.Mask<bool>(false);
            ((LeveledSpellEntryCommon)((ILeveledSpellEntryGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILeveledSpellEntryGetter item,
            ILeveledSpellEntryGetter rhs,
            LeveledSpellEntry.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ExtraData = EqualsMaskHelper.EqualsHelper(
                item.ExtraData,
                rhs.ExtraData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string Print(
            ILeveledSpellEntryGetter item,
            string? name = null,
            LeveledSpellEntry.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ILeveledSpellEntryGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            LeveledSpellEntry.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"LeveledSpellEntry =>");
            }
            else
            {
                sb.AppendLine($"{name} (LeveledSpellEntry) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ILeveledSpellEntryGetter item,
            StructuredStringBuilder sb,
            LeveledSpellEntry.Mask<bool>? printMask = null)
        {
            if ((printMask?.Data?.Overall ?? true)
                && item.Data is {} DataItem)
            {
                DataItem?.Print(sb, "Data");
            }
            if ((printMask?.ExtraData?.Overall ?? true)
                && item.ExtraData is {} ExtraDataItem)
            {
                ExtraDataItem?.Print(sb, "ExtraData");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILeveledSpellEntryGetter? lhs,
            ILeveledSpellEntryGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)LeveledSpellEntry_FieldIndex.Data) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Data, rhs.Data, out var lhsData, out var rhsData, out var isDataEqual))
                {
                    if (!((LeveledSpellEntryDataCommon)((ILeveledSpellEntryDataGetter)lhsData).CommonInstance()!).Equals(lhsData, rhsData, equalsMask?.GetSubCrystal((int)LeveledSpellEntry_FieldIndex.Data))) return false;
                }
                else if (!isDataEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LeveledSpellEntry_FieldIndex.ExtraData) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ExtraData, rhs.ExtraData, out var lhsExtraData, out var rhsExtraData, out var isExtraDataEqual))
                {
                    if (!((ExtraDataCommon)((IExtraDataGetter)lhsExtraData).CommonInstance()!).Equals(lhsExtraData, rhsExtraData, equalsMask?.GetSubCrystal((int)LeveledSpellEntry_FieldIndex.ExtraData))) return false;
                }
                else if (!isExtraDataEqual) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ILeveledSpellEntryGetter item)
        {
            var hash = new HashCode();
            if (item.Data is {} Dataitem)
            {
                hash.Add(Dataitem);
            }
            if (item.ExtraData is {} ExtraDataitem)
            {
                hash.Add(ExtraDataitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return LeveledSpellEntry.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ILeveledSpellEntryGetter obj)
        {
            if (obj.Data is {} DataItems)
            {
                foreach (var item in DataItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.ExtraData is IFormLinkContainerGetter ExtraDatalinkCont)
            {
                foreach (var item in ExtraDatalinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class LeveledSpellEntrySetterTranslationCommon
    {
        public static readonly LeveledSpellEntrySetterTranslationCommon Instance = new LeveledSpellEntrySetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ILeveledSpellEntry item,
            ILeveledSpellEntryGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)LeveledSpellEntry_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)LeveledSpellEntry_FieldIndex.Data);
                try
                {
                    if(rhs.Data is {} rhsData)
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)LeveledSpellEntry_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LeveledSpellEntry_FieldIndex.ExtraData) ?? true))
            {
                errorMask?.PushIndex((int)LeveledSpellEntry_FieldIndex.ExtraData);
                try
                {
                    if(rhs.ExtraData is {} rhsExtraData)
                    {
                        item.ExtraData = rhsExtraData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)LeveledSpellEntry_FieldIndex.ExtraData));
                    }
                    else
                    {
                        item.ExtraData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public LeveledSpellEntry DeepCopy(
            ILeveledSpellEntryGetter item,
            LeveledSpellEntry.TranslationMask? copyMask = null)
        {
            LeveledSpellEntry ret = (LeveledSpellEntry)((LeveledSpellEntryCommon)((ILeveledSpellEntryGetter)item).CommonInstance()!).GetNew();
            ((LeveledSpellEntrySetterTranslationCommon)((ILeveledSpellEntryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public LeveledSpellEntry DeepCopy(
            ILeveledSpellEntryGetter item,
            out LeveledSpellEntry.ErrorMask errorMask,
            LeveledSpellEntry.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LeveledSpellEntry ret = (LeveledSpellEntry)((LeveledSpellEntryCommon)((ILeveledSpellEntryGetter)item).CommonInstance()!).GetNew();
            ((LeveledSpellEntrySetterTranslationCommon)((ILeveledSpellEntryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = LeveledSpellEntry.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public LeveledSpellEntry DeepCopy(
            ILeveledSpellEntryGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            LeveledSpellEntry ret = (LeveledSpellEntry)((LeveledSpellEntryCommon)((ILeveledSpellEntryGetter)item).CommonInstance()!).GetNew();
            ((LeveledSpellEntrySetterTranslationCommon)((ILeveledSpellEntryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class LeveledSpellEntry
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LeveledSpellEntry_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => LeveledSpellEntry_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LeveledSpellEntryCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return LeveledSpellEntrySetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LeveledSpellEntrySetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILeveledSpellEntryGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ILeveledSpellEntryGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ILeveledSpellEntryGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class LeveledSpellEntryBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly LeveledSpellEntryBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ILeveledSpellEntryGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            if (item.Data is {} DataItem)
            {
                ((LeveledSpellEntryDataBinaryWriteTranslation)((IBinaryItem)DataItem).BinaryWriteTranslator).Write(
                    item: DataItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.ExtraData is {} ExtraDataItem)
            {
                ((ExtraDataBinaryWriteTranslation)((IBinaryItem)ExtraDataItem).BinaryWriteTranslator).Write(
                    item: ExtraDataItem,
                    writer: writer,
                    translationParams: translationParams);
            }
        }

        public void Write(
            MutagenWriter writer,
            ILeveledSpellEntryGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ILeveledSpellEntryGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class LeveledSpellEntryBinaryCreateTranslation
    {
        public static readonly LeveledSpellEntryBinaryCreateTranslation Instance = new LeveledSpellEntryBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            ILeveledSpellEntry item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.LVLO:
                {
                    if (lastParsed.ShortCircuit((int)LeveledSpellEntry_FieldIndex.Data, translationParams)) return ParseResult.Stop;
                    item.Data = Mutagen.Bethesda.Skyrim.LeveledSpellEntryData.CreateFromBinary(frame: frame);
                    return (int)LeveledSpellEntry_FieldIndex.Data;
                }
                case RecordTypeInts.COED:
                {
                    if (lastParsed.ShortCircuit((int)LeveledSpellEntry_FieldIndex.ExtraData, translationParams)) return ParseResult.Stop;
                    item.ExtraData = Mutagen.Bethesda.Skyrim.ExtraData.CreateFromBinary(frame: frame);
                    return (int)LeveledSpellEntry_FieldIndex.ExtraData;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class LeveledSpellEntryBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ILeveledSpellEntryGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LeveledSpellEntryBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class LeveledSpellEntryBinaryOverlay :
        PluginBinaryOverlay,
        ILeveledSpellEntryGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LeveledSpellEntry_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => LeveledSpellEntry_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LeveledSpellEntryCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LeveledSpellEntrySetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILeveledSpellEntryGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ILeveledSpellEntryGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ILeveledSpellEntryGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => LeveledSpellEntryCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LeveledSpellEntryBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LeveledSpellEntryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Data
        private RangeInt32? _DataLocation;
        public ILeveledSpellEntryDataGetter? Data => _DataLocation.HasValue ? LeveledSpellEntryDataBinaryOverlay.LeveledSpellEntryDataFactory(_recordData.Slice(_DataLocation!.Value.Min), _package) : default;
        #endregion
        #region ExtraData
        private RangeInt32? _ExtraDataLocation;
        public IExtraDataGetter? ExtraData => _ExtraDataLocation.HasValue ? ExtraDataBinaryOverlay.ExtraDataFactory(_recordData.Slice(_ExtraDataLocation!.Value.Min), _package) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected LeveledSpellEntryBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ILeveledSpellEntryGetter LeveledSpellEntryFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new LeveledSpellEntryBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ILeveledSpellEntryGetter LeveledSpellEntryFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return LeveledSpellEntryFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.LVLO:
                {
                    if (lastParsed.ShortCircuit((int)LeveledSpellEntry_FieldIndex.Data, translationParams)) return ParseResult.Stop;
                    _DataLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)LeveledSpellEntry_FieldIndex.Data;
                }
                case RecordTypeInts.COED:
                {
                    if (lastParsed.ShortCircuit((int)LeveledSpellEntry_FieldIndex.ExtraData, translationParams)) return ParseResult.Stop;
                    _ExtraDataLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)LeveledSpellEntry_FieldIndex.ExtraData;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            LeveledSpellEntryMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ILeveledSpellEntryGetter rhs) return false;
            return ((LeveledSpellEntryCommon)((ILeveledSpellEntryGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ILeveledSpellEntryGetter? obj)
        {
            return ((LeveledSpellEntryCommon)((ILeveledSpellEntryGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((LeveledSpellEntryCommon)((ILeveledSpellEntryGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

