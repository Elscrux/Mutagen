/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.RecordTypeMapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Climate :
        SkyrimMajorRecord,
        IClimateInternal,
        IEquatable<IClimateGetter>,
        ILoquiObjectSetter<Climate>
    {
        #region Ctor
        protected Climate()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region WeatherTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<WeatherType>? _WeatherTypes;
        public ExtendedList<WeatherType>? WeatherTypes
        {
            get => this._WeatherTypes;
            set => this._WeatherTypes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IWeatherTypeGetter>? IClimateGetter.WeatherTypes => _WeatherTypes;
        #endregion

        #endregion
        #region SunTexture
        public String? SunTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IClimateGetter.SunTexture => this.SunTexture;
        #endregion
        #region SunGlareTexture
        public String? SunGlareTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IClimateGetter.SunGlareTexture => this.SunGlareTexture;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IClimateGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region SunriseBeginRaw
        public Byte SunriseBeginRaw { get; set; } = default;
        #endregion
        #region SunriseEndRaw
        public Byte SunriseEndRaw { get; set; } = default;
        #endregion
        #region SunsetBeginRaw
        public Byte SunsetBeginRaw { get; set; } = default;
        #endregion
        #region SunsetEndRaw
        public Byte SunsetEndRaw { get; set; } = default;
        #endregion
        #region Volatility
        public Byte Volatility { get; set; } = default;
        #endregion
        #region Moons
        public Climate.Moon Moons { get; set; } = default;
        #endregion
        #region PhaseLength
        public Byte PhaseLength { get; set; } = default;
        public static RangeUInt8 PhaseLength_Range = new RangeUInt8(0, 64);
        #endregion
        #region TNAMDataTypeState
        public Climate.TNAMDataType TNAMDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ClimateMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.WeatherTypes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WeatherType.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, WeatherType.Mask<TItem>?>>());
                this.SunTexture = initialValue;
                this.SunGlareTexture = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.SunriseBeginRaw = initialValue;
                this.SunriseEndRaw = initialValue;
                this.SunsetBeginRaw = initialValue;
                this.SunsetEndRaw = initialValue;
                this.Volatility = initialValue;
                this.Moons = initialValue;
                this.PhaseLength = initialValue;
                this.TNAMDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem WeatherTypes,
                TItem SunTexture,
                TItem SunGlareTexture,
                TItem Model,
                TItem SunriseBeginRaw,
                TItem SunriseEndRaw,
                TItem SunsetBeginRaw,
                TItem SunsetEndRaw,
                TItem Volatility,
                TItem Moons,
                TItem PhaseLength,
                TItem TNAMDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.WeatherTypes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WeatherType.Mask<TItem>?>>?>(WeatherTypes, Enumerable.Empty<MaskItemIndexed<TItem, WeatherType.Mask<TItem>?>>());
                this.SunTexture = SunTexture;
                this.SunGlareTexture = SunGlareTexture;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.SunriseBeginRaw = SunriseBeginRaw;
                this.SunriseEndRaw = SunriseEndRaw;
                this.SunsetBeginRaw = SunsetBeginRaw;
                this.SunsetEndRaw = SunsetEndRaw;
                this.Volatility = Volatility;
                this.Moons = Moons;
                this.PhaseLength = PhaseLength;
                this.TNAMDataTypeState = TNAMDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WeatherType.Mask<TItem>?>>?>? WeatherTypes;
            public TItem SunTexture;
            public TItem SunGlareTexture;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem SunriseBeginRaw;
            public TItem SunriseEndRaw;
            public TItem SunsetBeginRaw;
            public TItem SunsetEndRaw;
            public TItem Volatility;
            public TItem Moons;
            public TItem PhaseLength;
            public TItem TNAMDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.WeatherTypes, rhs.WeatherTypes)) return false;
                if (!object.Equals(this.SunTexture, rhs.SunTexture)) return false;
                if (!object.Equals(this.SunGlareTexture, rhs.SunGlareTexture)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.SunriseBeginRaw, rhs.SunriseBeginRaw)) return false;
                if (!object.Equals(this.SunriseEndRaw, rhs.SunriseEndRaw)) return false;
                if (!object.Equals(this.SunsetBeginRaw, rhs.SunsetBeginRaw)) return false;
                if (!object.Equals(this.SunsetEndRaw, rhs.SunsetEndRaw)) return false;
                if (!object.Equals(this.Volatility, rhs.Volatility)) return false;
                if (!object.Equals(this.Moons, rhs.Moons)) return false;
                if (!object.Equals(this.PhaseLength, rhs.PhaseLength)) return false;
                if (!object.Equals(this.TNAMDataTypeState, rhs.TNAMDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.WeatherTypes);
                hash.Add(this.SunTexture);
                hash.Add(this.SunGlareTexture);
                hash.Add(this.Model);
                hash.Add(this.SunriseBeginRaw);
                hash.Add(this.SunriseEndRaw);
                hash.Add(this.SunsetBeginRaw);
                hash.Add(this.SunsetEndRaw);
                hash.Add(this.Volatility);
                hash.Add(this.Moons);
                hash.Add(this.PhaseLength);
                hash.Add(this.TNAMDataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.WeatherTypes != null)
                {
                    if (!eval(this.WeatherTypes.Overall)) return false;
                    if (this.WeatherTypes.Specific != null)
                    {
                        foreach (var item in this.WeatherTypes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.SunTexture)) return false;
                if (!eval(this.SunGlareTexture)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.SunriseBeginRaw)) return false;
                if (!eval(this.SunriseEndRaw)) return false;
                if (!eval(this.SunsetBeginRaw)) return false;
                if (!eval(this.SunsetEndRaw)) return false;
                if (!eval(this.Volatility)) return false;
                if (!eval(this.Moons)) return false;
                if (!eval(this.PhaseLength)) return false;
                if (!eval(this.TNAMDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.WeatherTypes != null)
                {
                    if (eval(this.WeatherTypes.Overall)) return true;
                    if (this.WeatherTypes.Specific != null)
                    {
                        foreach (var item in this.WeatherTypes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.SunTexture)) return true;
                if (eval(this.SunGlareTexture)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.SunriseBeginRaw)) return true;
                if (eval(this.SunriseEndRaw)) return true;
                if (eval(this.SunsetBeginRaw)) return true;
                if (eval(this.SunsetEndRaw)) return true;
                if (eval(this.Volatility)) return true;
                if (eval(this.Moons)) return true;
                if (eval(this.PhaseLength)) return true;
                if (eval(this.TNAMDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Climate.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (WeatherTypes != null)
                {
                    obj.WeatherTypes = new MaskItem<R, IEnumerable<MaskItemIndexed<R, WeatherType.Mask<R>?>>?>(eval(this.WeatherTypes.Overall), Enumerable.Empty<MaskItemIndexed<R, WeatherType.Mask<R>?>>());
                    if (WeatherTypes.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, WeatherType.Mask<R>?>>();
                        obj.WeatherTypes.Specific = l;
                        foreach (var item in WeatherTypes.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, WeatherType.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, WeatherType.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.SunTexture = eval(this.SunTexture);
                obj.SunGlareTexture = eval(this.SunGlareTexture);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.SunriseBeginRaw = eval(this.SunriseBeginRaw);
                obj.SunriseEndRaw = eval(this.SunriseEndRaw);
                obj.SunsetBeginRaw = eval(this.SunsetBeginRaw);
                obj.SunsetEndRaw = eval(this.SunsetEndRaw);
                obj.Volatility = eval(this.Volatility);
                obj.Moons = eval(this.Moons);
                obj.PhaseLength = eval(this.PhaseLength);
                obj.TNAMDataTypeState = eval(this.TNAMDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Climate.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Climate.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Climate.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if ((printMask?.WeatherTypes?.Overall ?? true)
                        && WeatherTypes is {} WeatherTypesItem)
                    {
                        fg.AppendLine("WeatherTypes =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(WeatherTypesItem.Overall);
                            if (WeatherTypesItem.Specific != null)
                            {
                                foreach (var subItem in WeatherTypesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.SunTexture ?? true)
                    {
                        fg.AppendItem(SunTexture, "SunTexture");
                    }
                    if (printMask?.SunGlareTexture ?? true)
                    {
                        fg.AppendItem(SunGlareTexture, "SunGlareTexture");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.SunriseBeginRaw ?? true)
                    {
                        fg.AppendItem(SunriseBeginRaw, "SunriseBeginRaw");
                    }
                    if (printMask?.SunriseEndRaw ?? true)
                    {
                        fg.AppendItem(SunriseEndRaw, "SunriseEndRaw");
                    }
                    if (printMask?.SunsetBeginRaw ?? true)
                    {
                        fg.AppendItem(SunsetBeginRaw, "SunsetBeginRaw");
                    }
                    if (printMask?.SunsetEndRaw ?? true)
                    {
                        fg.AppendItem(SunsetEndRaw, "SunsetEndRaw");
                    }
                    if (printMask?.Volatility ?? true)
                    {
                        fg.AppendItem(Volatility, "Volatility");
                    }
                    if (printMask?.Moons ?? true)
                    {
                        fg.AppendItem(Moons, "Moons");
                    }
                    if (printMask?.PhaseLength ?? true)
                    {
                        fg.AppendItem(PhaseLength, "PhaseLength");
                    }
                    if (printMask?.TNAMDataTypeState ?? true)
                    {
                        fg.AppendItem(TNAMDataTypeState, "TNAMDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherType.ErrorMask?>>?>? WeatherTypes;
            public Exception? SunTexture;
            public Exception? SunGlareTexture;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? SunriseBeginRaw;
            public Exception? SunriseEndRaw;
            public Exception? SunsetBeginRaw;
            public Exception? SunsetEndRaw;
            public Exception? Volatility;
            public Exception? Moons;
            public Exception? PhaseLength;
            public Exception? TNAMDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Climate_FieldIndex enu = (Climate_FieldIndex)index;
                switch (enu)
                {
                    case Climate_FieldIndex.WeatherTypes:
                        return WeatherTypes;
                    case Climate_FieldIndex.SunTexture:
                        return SunTexture;
                    case Climate_FieldIndex.SunGlareTexture:
                        return SunGlareTexture;
                    case Climate_FieldIndex.Model:
                        return Model;
                    case Climate_FieldIndex.SunriseBeginRaw:
                        return SunriseBeginRaw;
                    case Climate_FieldIndex.SunriseEndRaw:
                        return SunriseEndRaw;
                    case Climate_FieldIndex.SunsetBeginRaw:
                        return SunsetBeginRaw;
                    case Climate_FieldIndex.SunsetEndRaw:
                        return SunsetEndRaw;
                    case Climate_FieldIndex.Volatility:
                        return Volatility;
                    case Climate_FieldIndex.Moons:
                        return Moons;
                    case Climate_FieldIndex.PhaseLength:
                        return PhaseLength;
                    case Climate_FieldIndex.TNAMDataTypeState:
                        return TNAMDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Climate_FieldIndex enu = (Climate_FieldIndex)index;
                switch (enu)
                {
                    case Climate_FieldIndex.WeatherTypes:
                        this.WeatherTypes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherType.ErrorMask?>>?>(ex, null);
                        break;
                    case Climate_FieldIndex.SunTexture:
                        this.SunTexture = ex;
                        break;
                    case Climate_FieldIndex.SunGlareTexture:
                        this.SunGlareTexture = ex;
                        break;
                    case Climate_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Climate_FieldIndex.SunriseBeginRaw:
                        this.SunriseBeginRaw = ex;
                        break;
                    case Climate_FieldIndex.SunriseEndRaw:
                        this.SunriseEndRaw = ex;
                        break;
                    case Climate_FieldIndex.SunsetBeginRaw:
                        this.SunsetBeginRaw = ex;
                        break;
                    case Climate_FieldIndex.SunsetEndRaw:
                        this.SunsetEndRaw = ex;
                        break;
                    case Climate_FieldIndex.Volatility:
                        this.Volatility = ex;
                        break;
                    case Climate_FieldIndex.Moons:
                        this.Moons = ex;
                        break;
                    case Climate_FieldIndex.PhaseLength:
                        this.PhaseLength = ex;
                        break;
                    case Climate_FieldIndex.TNAMDataTypeState:
                        this.TNAMDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Climate_FieldIndex enu = (Climate_FieldIndex)index;
                switch (enu)
                {
                    case Climate_FieldIndex.WeatherTypes:
                        this.WeatherTypes = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherType.ErrorMask?>>?>)obj;
                        break;
                    case Climate_FieldIndex.SunTexture:
                        this.SunTexture = (Exception?)obj;
                        break;
                    case Climate_FieldIndex.SunGlareTexture:
                        this.SunGlareTexture = (Exception?)obj;
                        break;
                    case Climate_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Climate_FieldIndex.SunriseBeginRaw:
                        this.SunriseBeginRaw = (Exception?)obj;
                        break;
                    case Climate_FieldIndex.SunriseEndRaw:
                        this.SunriseEndRaw = (Exception?)obj;
                        break;
                    case Climate_FieldIndex.SunsetBeginRaw:
                        this.SunsetBeginRaw = (Exception?)obj;
                        break;
                    case Climate_FieldIndex.SunsetEndRaw:
                        this.SunsetEndRaw = (Exception?)obj;
                        break;
                    case Climate_FieldIndex.Volatility:
                        this.Volatility = (Exception?)obj;
                        break;
                    case Climate_FieldIndex.Moons:
                        this.Moons = (Exception?)obj;
                        break;
                    case Climate_FieldIndex.PhaseLength:
                        this.PhaseLength = (Exception?)obj;
                        break;
                    case Climate_FieldIndex.TNAMDataTypeState:
                        this.TNAMDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (WeatherTypes != null) return true;
                if (SunTexture != null) return true;
                if (SunGlareTexture != null) return true;
                if (Model != null) return true;
                if (SunriseBeginRaw != null) return true;
                if (SunriseEndRaw != null) return true;
                if (SunsetBeginRaw != null) return true;
                if (SunsetEndRaw != null) return true;
                if (Volatility != null) return true;
                if (Moons != null) return true;
                if (PhaseLength != null) return true;
                if (TNAMDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                if (WeatherTypes is {} WeatherTypesItem)
                {
                    fg.AppendLine("WeatherTypes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(WeatherTypesItem.Overall);
                        if (WeatherTypesItem.Specific != null)
                        {
                            foreach (var subItem in WeatherTypesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(SunTexture, "SunTexture");
                fg.AppendItem(SunGlareTexture, "SunGlareTexture");
                Model?.ToString(fg);
                fg.AppendItem(SunriseBeginRaw, "SunriseBeginRaw");
                fg.AppendItem(SunriseEndRaw, "SunriseEndRaw");
                fg.AppendItem(SunsetBeginRaw, "SunsetBeginRaw");
                fg.AppendItem(SunsetEndRaw, "SunsetEndRaw");
                fg.AppendItem(Volatility, "Volatility");
                fg.AppendItem(Moons, "Moons");
                fg.AppendItem(PhaseLength, "PhaseLength");
                fg.AppendItem(TNAMDataTypeState, "TNAMDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.WeatherTypes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherType.ErrorMask?>>?>(ExceptionExt.Combine(this.WeatherTypes?.Overall, rhs.WeatherTypes?.Overall), ExceptionExt.Combine(this.WeatherTypes?.Specific, rhs.WeatherTypes?.Specific));
                ret.SunTexture = this.SunTexture.Combine(rhs.SunTexture);
                ret.SunGlareTexture = this.SunGlareTexture.Combine(rhs.SunGlareTexture);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.SunriseBeginRaw = this.SunriseBeginRaw.Combine(rhs.SunriseBeginRaw);
                ret.SunriseEndRaw = this.SunriseEndRaw.Combine(rhs.SunriseEndRaw);
                ret.SunsetBeginRaw = this.SunsetBeginRaw.Combine(rhs.SunsetBeginRaw);
                ret.SunsetEndRaw = this.SunsetEndRaw.Combine(rhs.SunsetEndRaw);
                ret.Volatility = this.Volatility.Combine(rhs.Volatility);
                ret.Moons = this.Moons.Combine(rhs.Moons);
                ret.PhaseLength = this.PhaseLength.Combine(rhs.PhaseLength);
                ret.TNAMDataTypeState = this.TNAMDataTypeState.Combine(rhs.TNAMDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public WeatherType.TranslationMask? WeatherTypes;
            public bool SunTexture;
            public bool SunGlareTexture;
            public Model.TranslationMask? Model;
            public bool SunriseBeginRaw;
            public bool SunriseEndRaw;
            public bool SunsetBeginRaw;
            public bool SunsetEndRaw;
            public bool Volatility;
            public bool Moons;
            public bool PhaseLength;
            public bool TNAMDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.SunTexture = defaultOn;
                this.SunGlareTexture = defaultOn;
                this.SunriseBeginRaw = defaultOn;
                this.SunriseEndRaw = defaultOn;
                this.SunsetBeginRaw = defaultOn;
                this.SunsetEndRaw = defaultOn;
                this.Volatility = defaultOn;
                this.Moons = defaultOn;
                this.PhaseLength = defaultOn;
                this.TNAMDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((WeatherTypes == null ? DefaultOn : !WeatherTypes.GetCrystal().CopyNothing, WeatherTypes?.GetCrystal()));
                ret.Add((SunTexture, null));
                ret.Add((SunGlareTexture, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((SunriseBeginRaw, null));
                ret.Add((SunriseEndRaw, null));
                ret.Add((SunsetBeginRaw, null));
                ret.Add((SunsetEndRaw, null));
                ret.Add((Volatility, null));
                ret.Add((Moons, null));
                ret.Add((PhaseLength, null));
                ret.Add((TNAMDataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Climate_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => ClimateCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ClimateSetterCommon.Instance.RemapLinks(this, mapping);
        public Climate(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private Climate(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal Climate(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Climate(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public Climate(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Climate>.ToString(this);
        }

        protected override Type LinkType => typeof(IClimate);

        [Flags]
        public enum TNAMDataType
        {
        }
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IClimateGetter rhs) return false;
            return ((ClimateCommon)((IClimateGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IClimateGetter? obj)
        {
            return ((ClimateCommon)((IClimateGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ClimateCommon)((IClimateGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ClimateBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ClimateBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Climate CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new Climate();
            ((ClimateSetterCommon)((IClimateGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Climate item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ClimateSetterCommon)((IClimateGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Climate GetNew()
        {
            return new Climate();
        }

    }
    #endregion

    #region Interface
    public partial interface IClimate :
        IClimateGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IClimateInternal>,
        IModeled,
        ISkyrimMajorRecordInternal
    {
        new ExtendedList<WeatherType>? WeatherTypes { get; set; }
        new String? SunTexture { get; set; }
        new String? SunGlareTexture { get; set; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        new Byte SunriseBeginRaw { get; set; }
        new Byte SunriseEndRaw { get; set; }
        new Byte SunsetBeginRaw { get; set; }
        new Byte SunsetEndRaw { get; set; }
        new Byte Volatility { get; set; }
        new Climate.Moon Moons { get; set; }
        new Byte PhaseLength { get; set; }
        new Climate.TNAMDataType TNAMDataTypeState { get; set; }
    }

    public partial interface IClimateInternal :
        ISkyrimMajorRecordInternal,
        IClimate,
        IClimateGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.CLMT)]
    public partial interface IClimateGetter :
        ISkyrimMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IClimateGetter>,
        IMapsToGetter<IClimateGetter>,
        IModeledGetter
    {
        static new ILoquiRegistration StaticRegistration => Climate_Registration.Instance;
        IReadOnlyList<IWeatherTypeGetter>? WeatherTypes { get; }
        String? SunTexture { get; }
        String? SunGlareTexture { get; }
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        Byte SunriseBeginRaw { get; }
        Byte SunriseEndRaw { get; }
        Byte SunsetBeginRaw { get; }
        Byte SunsetEndRaw { get; }
        Byte Volatility { get; }
        Climate.Moon Moons { get; }
        Byte PhaseLength { get; }
        Climate.TNAMDataType TNAMDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ClimateMixIn
    {
        public static void Clear(this IClimateInternal item)
        {
            ((ClimateSetterCommon)((IClimateGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Climate.Mask<bool> GetEqualsMask(
            this IClimateGetter item,
            IClimateGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ClimateCommon)((IClimateGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IClimateGetter item,
            string? name = null,
            Climate.Mask<bool>? printMask = null)
        {
            return ((ClimateCommon)((IClimateGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IClimateGetter item,
            FileGeneration fg,
            string? name = null,
            Climate.Mask<bool>? printMask = null)
        {
            ((ClimateCommon)((IClimateGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IClimateGetter item,
            IClimateGetter rhs,
            Climate.TranslationMask? equalsMask = null)
        {
            return ((ClimateCommon)((IClimateGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IClimateInternal lhs,
            IClimateGetter rhs,
            out Climate.ErrorMask errorMask,
            Climate.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ClimateSetterTranslationCommon)((IClimateGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Climate.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IClimateInternal lhs,
            IClimateGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ClimateSetterTranslationCommon)((IClimateGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Climate DeepCopy(
            this IClimateGetter item,
            Climate.TranslationMask? copyMask = null)
        {
            return ((ClimateSetterTranslationCommon)((IClimateGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Climate DeepCopy(
            this IClimateGetter item,
            out Climate.ErrorMask errorMask,
            Climate.TranslationMask? copyMask = null)
        {
            return ((ClimateSetterTranslationCommon)((IClimateGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Climate DeepCopy(
            this IClimateGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ClimateSetterTranslationCommon)((IClimateGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Climate Duplicate(
            this IClimateGetter item,
            FormKey formKey,
            Climate.TranslationMask? copyMask = null)
        {
            return ((ClimateCommon)((IClimateGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IClimateInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((ClimateSetterCommon)((IClimateGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum Climate_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        WeatherTypes = 6,
        SunTexture = 7,
        SunGlareTexture = 8,
        Model = 9,
        SunriseBeginRaw = 10,
        SunriseEndRaw = 11,
        SunsetBeginRaw = 12,
        SunsetEndRaw = 13,
        Volatility = 14,
        Moons = 15,
        PhaseLength = 16,
        TNAMDataTypeState = 17,
    }
    #endregion

    #region Registration
    public partial class Climate_Registration : ILoquiRegistration
    {
        public static readonly Climate_Registration Instance = new Climate_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 256,
            version: 0);

        public const string GUID = "5e6ece21-de78-4014-a7f0-4ea69c8655c9";

        public const ushort AdditionalFieldCount = 12;

        public const ushort FieldCount = 18;

        public static readonly Type MaskType = typeof(Climate.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Climate.ErrorMask);

        public static readonly Type ClassType = typeof(Climate);

        public static readonly Type GetterType = typeof(IClimateGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IClimate);

        public static readonly Type? InternalSetterType = typeof(IClimateInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Climate";

        public const string Name = "Climate";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.CLMT;
        public static readonly Type BinaryWriteTranslation = typeof(ClimateBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ClimateSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly ClimateSetterCommon Instance = new ClimateSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IClimateInternal item)
        {
            ClearPartial();
            item.WeatherTypes = null;
            item.SunTexture = default;
            item.SunGlareTexture = default;
            item.Model = null;
            item.SunriseBeginRaw = default;
            item.SunriseEndRaw = default;
            item.SunsetBeginRaw = default;
            item.SunsetEndRaw = default;
            item.Volatility = default;
            item.Moons = default;
            item.PhaseLength = default;
            item.TNAMDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IClimateInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IClimateInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IClimate obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.WeatherTypes?.RemapLinks(mapping);
            obj.Model?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IClimateInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.MajorRecordParse<IClimateInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ClimateBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ClimateBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (Climate)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (Climate)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    public partial class ClimateCommon : SkyrimMajorRecordCommon
    {
        public new static readonly ClimateCommon Instance = new ClimateCommon();

        public Climate.Mask<bool> GetEqualsMask(
            IClimateGetter item,
            IClimateGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Climate.Mask<bool>(false);
            ((ClimateCommon)((IClimateGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IClimateGetter item,
            IClimateGetter rhs,
            Climate.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.WeatherTypes = item.WeatherTypes.CollectionEqualsHelper(
                rhs.WeatherTypes,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.SunTexture = string.Equals(item.SunTexture, rhs.SunTexture);
            ret.SunGlareTexture = string.Equals(item.SunGlareTexture, rhs.SunGlareTexture);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.SunriseBeginRaw = item.SunriseBeginRaw == rhs.SunriseBeginRaw;
            ret.SunriseEndRaw = item.SunriseEndRaw == rhs.SunriseEndRaw;
            ret.SunsetBeginRaw = item.SunsetBeginRaw == rhs.SunsetBeginRaw;
            ret.SunsetEndRaw = item.SunsetEndRaw == rhs.SunsetEndRaw;
            ret.Volatility = item.Volatility == rhs.Volatility;
            ret.Moons = item.Moons == rhs.Moons;
            ret.PhaseLength = item.PhaseLength == rhs.PhaseLength;
            ret.TNAMDataTypeState = item.TNAMDataTypeState == rhs.TNAMDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IClimateGetter item,
            string? name = null,
            Climate.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IClimateGetter item,
            FileGeneration fg,
            string? name = null,
            Climate.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Climate =>");
            }
            else
            {
                fg.AppendLine($"{name} (Climate) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IClimateGetter item,
            FileGeneration fg,
            Climate.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.WeatherTypes?.Overall ?? true)
                && item.WeatherTypes is {} WeatherTypesItem)
            {
                fg.AppendLine("WeatherTypes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in WeatherTypesItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.SunTexture ?? true)
                && item.SunTexture is {} SunTextureItem)
            {
                fg.AppendItem(SunTextureItem, "SunTexture");
            }
            if ((printMask?.SunGlareTexture ?? true)
                && item.SunGlareTexture is {} SunGlareTextureItem)
            {
                fg.AppendItem(SunGlareTextureItem, "SunGlareTexture");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.ToString(fg, "Model");
            }
            if (printMask?.SunriseBeginRaw ?? true)
            {
                fg.AppendItem(item.SunriseBeginRaw, "SunriseBeginRaw");
            }
            if (printMask?.SunriseEndRaw ?? true)
            {
                fg.AppendItem(item.SunriseEndRaw, "SunriseEndRaw");
            }
            if (printMask?.SunsetBeginRaw ?? true)
            {
                fg.AppendItem(item.SunsetBeginRaw, "SunsetBeginRaw");
            }
            if (printMask?.SunsetEndRaw ?? true)
            {
                fg.AppendItem(item.SunsetEndRaw, "SunsetEndRaw");
            }
            if (printMask?.Volatility ?? true)
            {
                fg.AppendItem(item.Volatility, "Volatility");
            }
            if (printMask?.Moons ?? true)
            {
                fg.AppendItem(item.Moons, "Moons");
            }
            if (printMask?.PhaseLength ?? true)
            {
                fg.AppendItem(item.PhaseLength, "PhaseLength");
            }
            if (printMask?.TNAMDataTypeState ?? true)
            {
                fg.AppendItem(item.TNAMDataTypeState, "TNAMDataTypeState");
            }
        }
        
        public static Climate_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Climate_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Climate_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (Climate_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Climate_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Climate_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Climate_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Climate_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Climate_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Climate_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Climate_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Climate_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IClimateGetter? lhs,
            IClimateGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)Climate_FieldIndex.WeatherTypes) ?? true))
            {
                if (!lhs.WeatherTypes.SequenceEqualNullable(rhs.WeatherTypes)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Climate_FieldIndex.SunTexture) ?? true))
            {
                if (!string.Equals(lhs.SunTexture, rhs.SunTexture)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Climate_FieldIndex.SunGlareTexture) ?? true))
            {
                if (!string.Equals(lhs.SunGlareTexture, rhs.SunGlareTexture)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Climate_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, crystal?.GetSubCrystal((int)Climate_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Climate_FieldIndex.SunriseBeginRaw) ?? true))
            {
                if (lhs.SunriseBeginRaw != rhs.SunriseBeginRaw) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Climate_FieldIndex.SunriseEndRaw) ?? true))
            {
                if (lhs.SunriseEndRaw != rhs.SunriseEndRaw) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Climate_FieldIndex.SunsetBeginRaw) ?? true))
            {
                if (lhs.SunsetBeginRaw != rhs.SunsetBeginRaw) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Climate_FieldIndex.SunsetEndRaw) ?? true))
            {
                if (lhs.SunsetEndRaw != rhs.SunsetEndRaw) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Climate_FieldIndex.Volatility) ?? true))
            {
                if (lhs.Volatility != rhs.Volatility) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Climate_FieldIndex.Moons) ?? true))
            {
                if (lhs.Moons != rhs.Moons) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Climate_FieldIndex.PhaseLength) ?? true))
            {
                if (lhs.PhaseLength != rhs.PhaseLength) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Climate_FieldIndex.TNAMDataTypeState) ?? true))
            {
                if (lhs.TNAMDataTypeState != rhs.TNAMDataTypeState) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IClimateGetter?)lhs,
                rhs: rhs as IClimateGetter,
                crystal: crystal);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IClimateGetter?)lhs,
                rhs: rhs as IClimateGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(IClimateGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.WeatherTypes);
            if (item.SunTexture is {} SunTextureitem)
            {
                hash.Add(SunTextureitem);
            }
            if (item.SunGlareTexture is {} SunGlareTextureitem)
            {
                hash.Add(SunGlareTextureitem);
            }
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.SunriseBeginRaw);
            hash.Add(item.SunriseEndRaw);
            hash.Add(item.SunsetBeginRaw);
            hash.Add(item.SunsetEndRaw);
            hash.Add(item.Volatility);
            hash.Add(item.Moons);
            hash.Add(item.PhaseLength);
            hash.Add(item.TNAMDataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IClimateGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IClimateGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Climate.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IClimateGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.WeatherTypes is {} WeatherTypesItem)
            {
                foreach (var item in WeatherTypesItem.SelectMany(f => f.ContainedFormLinks))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Climate Duplicate(
            IClimateGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Climate(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IClimateGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IClimateGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class ClimateSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly ClimateSetterTranslationCommon Instance = new ClimateSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IClimateInternal item,
            IClimateGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IClimate item,
            IClimateGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.WeatherTypes) ?? true))
            {
                errorMask?.PushIndex((int)Climate_FieldIndex.WeatherTypes);
                try
                {
                    if ((rhs.WeatherTypes != null))
                    {
                        item.WeatherTypes = 
                            rhs.WeatherTypes
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<WeatherType>();
                    }
                    else
                    {
                        item.WeatherTypes = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.SunTexture) ?? true))
            {
                item.SunTexture = rhs.SunTexture;
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.SunGlareTexture) ?? true))
            {
                item.SunGlareTexture = rhs.SunGlareTexture;
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Climate_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Climate_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.SunriseBeginRaw) ?? true))
            {
                item.SunriseBeginRaw = rhs.SunriseBeginRaw;
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.SunriseEndRaw) ?? true))
            {
                item.SunriseEndRaw = rhs.SunriseEndRaw;
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.SunsetBeginRaw) ?? true))
            {
                item.SunsetBeginRaw = rhs.SunsetBeginRaw;
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.SunsetEndRaw) ?? true))
            {
                item.SunsetEndRaw = rhs.SunsetEndRaw;
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.Volatility) ?? true))
            {
                item.Volatility = rhs.Volatility;
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.Moons) ?? true))
            {
                item.Moons = rhs.Moons;
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.PhaseLength) ?? true))
            {
                item.PhaseLength = rhs.PhaseLength;
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.TNAMDataTypeState) ?? true))
            {
                item.TNAMDataTypeState = rhs.TNAMDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IClimateInternal)item,
                rhs: (IClimateGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IClimate)item,
                rhs: (IClimateGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IClimateInternal)item,
                rhs: (IClimateGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IClimate)item,
                rhs: (IClimateGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Climate DeepCopy(
            IClimateGetter item,
            Climate.TranslationMask? copyMask = null)
        {
            Climate ret = (Climate)((ClimateCommon)((IClimateGetter)item).CommonInstance()!).GetNew();
            ((ClimateSetterTranslationCommon)((IClimateGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Climate DeepCopy(
            IClimateGetter item,
            out Climate.ErrorMask errorMask,
            Climate.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Climate ret = (Climate)((ClimateCommon)((IClimateGetter)item).CommonInstance()!).GetNew();
            ((ClimateSetterTranslationCommon)((IClimateGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Climate.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Climate DeepCopy(
            IClimateGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Climate ret = (Climate)((ClimateCommon)((IClimateGetter)item).CommonInstance()!).GetNew();
            ((ClimateSetterTranslationCommon)((IClimateGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Climate
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Climate_Registration.Instance;
        public new static Climate_Registration StaticRegistration => Climate_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ClimateCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ClimateSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ClimateSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ClimateBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ClimateBinaryWriteTranslation Instance = new ClimateBinaryWriteTranslation();

        public static void WriteEmbedded(
            IClimateGetter item,
            MutagenWriter writer)
        {
            SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IClimateGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IWeatherTypeGetter>.Instance.Write(
                writer: writer,
                items: item.WeatherTypes,
                recordType: translationParams.ConvertToCustom(RecordTypes.WLST),
                transl: (MutagenWriter subWriter, IWeatherTypeGetter subItem, TypedWriteParams? conv) =>
                {
                    var Item = subItem;
                    ((WeatherTypeBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SunTexture,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SunGlareTexture,
                header: translationParams.ConvertToCustom(RecordTypes.GNAM),
                binaryType: StringBinaryType.NullTerminate);
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.TNAM)))
            {
                writer.Write(item.SunriseBeginRaw);
                writer.Write(item.SunriseEndRaw);
                writer.Write(item.SunsetBeginRaw);
                writer.Write(item.SunsetEndRaw);
                writer.Write(item.Volatility);
                ClimateBinaryWriteTranslation.WriteBinaryMoonAndPhaseLength(
                    writer: writer,
                    item: item);
            }
        }

        public static partial void WriteBinaryMoonAndPhaseLengthCustom(
            MutagenWriter writer,
            IClimateGetter item);

        public static void WriteBinaryMoonAndPhaseLength(
            MutagenWriter writer,
            IClimateGetter item)
        {
            WriteBinaryMoonAndPhaseLengthCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IClimateGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Record(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.CLMT)))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        translationParams: translationParams);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Enrich(ex, item);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IClimateGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IClimateGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IClimateGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class ClimateBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static ClimateBinaryCreateTranslation Instance = new ClimateBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.CLMT;
        public static void FillBinaryStructs(
            IClimateInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IClimateInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.WLST:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WeatherTypes = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<WeatherType>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: WeatherType.TryCreateFromBinary)
                        .CastExtendedList<WeatherType>();
                    return (int)Climate_FieldIndex.WeatherTypes;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SunTexture = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Climate_FieldIndex.SunTexture;
                }
                case RecordTypeInts.GNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SunGlareTexture = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Climate_FieldIndex.SunGlareTexture;
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Skyrim.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams);
                    return (int)Climate_FieldIndex.Model;
                }
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.SunriseBeginRaw = dataFrame.ReadUInt8();
                    item.SunriseEndRaw = dataFrame.ReadUInt8();
                    item.SunsetBeginRaw = dataFrame.ReadUInt8();
                    item.SunsetEndRaw = dataFrame.ReadUInt8();
                    item.Volatility = dataFrame.ReadUInt8();
                    ClimateBinaryCreateTranslation.FillBinaryMoonAndPhaseLengthCustom(
                        frame: dataFrame,
                        item: item);
                    return (int)Climate_FieldIndex.PhaseLength;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        public static partial void FillBinaryMoonAndPhaseLengthCustom(
            MutagenFrame frame,
            IClimateInternal item);

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class ClimateBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ClimateBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IClimateGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Climate_Registration.Instance;
        public new static Climate_Registration StaticRegistration => Climate_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ClimateCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ClimateSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => ClimateCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ClimateBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ClimateBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IClimate);


        public IReadOnlyList<IWeatherTypeGetter>? WeatherTypes { get; private set; }
        #region SunTexture
        private int? _SunTextureLocation;
        public String? SunTexture => _SunTextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _SunTextureLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region SunGlareTexture
        private int? _SunGlareTextureLocation;
        public String? SunGlareTexture => _SunGlareTextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _SunGlareTextureLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        public IModelGetter? Model { get; private set; }
        private int? _TNAMLocation;
        public Climate.TNAMDataType TNAMDataTypeState { get; private set; }
        #region SunriseBeginRaw
        private int _SunriseBeginRawLocation => _TNAMLocation!.Value;
        private bool _SunriseBeginRaw_IsSet => _TNAMLocation.HasValue;
        public Byte SunriseBeginRaw => _SunriseBeginRaw_IsSet ? _data.Span[_SunriseBeginRawLocation] : default;
        #endregion
        #region SunriseEndRaw
        private int _SunriseEndRawLocation => _TNAMLocation!.Value + 0x1;
        private bool _SunriseEndRaw_IsSet => _TNAMLocation.HasValue;
        public Byte SunriseEndRaw => _SunriseEndRaw_IsSet ? _data.Span[_SunriseEndRawLocation] : default;
        #endregion
        #region SunsetBeginRaw
        private int _SunsetBeginRawLocation => _TNAMLocation!.Value + 0x2;
        private bool _SunsetBeginRaw_IsSet => _TNAMLocation.HasValue;
        public Byte SunsetBeginRaw => _SunsetBeginRaw_IsSet ? _data.Span[_SunsetBeginRawLocation] : default;
        #endregion
        #region SunsetEndRaw
        private int _SunsetEndRawLocation => _TNAMLocation!.Value + 0x3;
        private bool _SunsetEndRaw_IsSet => _TNAMLocation.HasValue;
        public Byte SunsetEndRaw => _SunsetEndRaw_IsSet ? _data.Span[_SunsetEndRawLocation] : default;
        #endregion
        #region Volatility
        private int _VolatilityLocation => _TNAMLocation!.Value + 0x4;
        private bool _Volatility_IsSet => _TNAMLocation.HasValue;
        public Byte Volatility => _Volatility_IsSet ? _data.Span[_VolatilityLocation] : default;
        #endregion
        #region MoonAndPhaseLength
        partial void MoonAndPhaseLengthCustomParse(
            OverlayStream stream,
            int offset);
        protected int MoonAndPhaseLengthEndingPos;
        #endregion
        protected int MoonsEndingPos;
        protected int PhaseLengthEndingPos;
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ClimateBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ClimateBinaryOverlay ClimateFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            stream = PluginUtilityTranslation.DecompressStream(stream);
            var ret = new ClimateBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ClimateBinaryOverlay ClimateFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return ClimateFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.WLST:
                {
                    var subMeta = stream.ReadSubrecord();
                    var subLen = subMeta.ContentLength;
                    this.WeatherTypes = BinaryOverlayList.FactoryByStartIndex<WeatherTypeBinaryOverlay>(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 12,
                        getter: (s, p) => WeatherTypeBinaryOverlay.WeatherTypeFactory(s, p));
                    stream.Position += subLen;
                    return (int)Climate_FieldIndex.WeatherTypes;
                }
                case RecordTypeInts.FNAM:
                {
                    _SunTextureLocation = (stream.Position - offset);
                    return (int)Climate_FieldIndex.SunTexture;
                }
                case RecordTypeInts.GNAM:
                {
                    _SunGlareTextureLocation = (stream.Position - offset);
                    return (int)Climate_FieldIndex.SunGlareTexture;
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        parseParams: parseParams);
                    return (int)Climate_FieldIndex.Model;
                }
                case RecordTypeInts.TNAM:
                {
                    _TNAMLocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)Climate_FieldIndex.PhaseLength;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ClimateMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Climate>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IClimateGetter rhs) return false;
            return ((ClimateCommon)((IClimateGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IClimateGetter? obj)
        {
            return ((ClimateCommon)((IClimateGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ClimateCommon)((IClimateGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

