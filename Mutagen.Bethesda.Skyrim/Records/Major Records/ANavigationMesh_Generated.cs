/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.RecordTypeMapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    /// <summary>
    /// Implemented by: [WorldspaceNavigationMesh, CellNavigationMesh]
    /// </summary>
    public abstract partial class ANavigationMesh :
        SkyrimMajorRecord,
        IANavigationMeshInternal,
        IEquatable<IANavigationMeshGetter>,
        ILoquiObjectSetter<ANavigationMesh>
    {
        #region Ctor
        protected ANavigationMesh()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ONAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _ONAM;
        public MemorySlice<Byte>? ONAM
        {
            get => this._ONAM;
            set => this._ONAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IANavigationMeshGetter.ONAM => this.ONAM;
        #endregion
        #region PNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _PNAM;
        public MemorySlice<Byte>? PNAM
        {
            get => this._PNAM;
            set => this._PNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IANavigationMeshGetter.PNAM => this.PNAM;
        #endregion
        #region NNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _NNAM;
        public MemorySlice<Byte>? NNAM
        {
            get => this._NNAM;
            set => this._NNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IANavigationMeshGetter.NNAM => this.NNAM;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ANavigationMeshMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ONAM = initialValue;
                this.PNAM = initialValue;
                this.NNAM = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem ONAM,
                TItem PNAM,
                TItem NNAM)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.ONAM = ONAM;
                this.PNAM = PNAM;
                this.NNAM = NNAM;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem ONAM;
            public TItem PNAM;
            public TItem NNAM;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ONAM, rhs.ONAM)) return false;
                if (!object.Equals(this.PNAM, rhs.PNAM)) return false;
                if (!object.Equals(this.NNAM, rhs.NNAM)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ONAM);
                hash.Add(this.PNAM);
                hash.Add(this.NNAM);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.ONAM)) return false;
                if (!eval(this.PNAM)) return false;
                if (!eval(this.NNAM)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.ONAM)) return true;
                if (eval(this.PNAM)) return true;
                if (eval(this.NNAM)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ANavigationMesh.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ONAM = eval(this.ONAM);
                obj.PNAM = eval(this.PNAM);
                obj.NNAM = eval(this.NNAM);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ANavigationMesh.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ANavigationMesh.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ANavigationMesh.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ONAM ?? true)
                    {
                        fg.AppendItem(ONAM, "ONAM");
                    }
                    if (printMask?.PNAM ?? true)
                    {
                        fg.AppendItem(PNAM, "PNAM");
                    }
                    if (printMask?.NNAM ?? true)
                    {
                        fg.AppendItem(NNAM, "NNAM");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? ONAM;
            public Exception? PNAM;
            public Exception? NNAM;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ANavigationMesh_FieldIndex enu = (ANavigationMesh_FieldIndex)index;
                switch (enu)
                {
                    case ANavigationMesh_FieldIndex.ONAM:
                        return ONAM;
                    case ANavigationMesh_FieldIndex.PNAM:
                        return PNAM;
                    case ANavigationMesh_FieldIndex.NNAM:
                        return NNAM;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ANavigationMesh_FieldIndex enu = (ANavigationMesh_FieldIndex)index;
                switch (enu)
                {
                    case ANavigationMesh_FieldIndex.ONAM:
                        this.ONAM = ex;
                        break;
                    case ANavigationMesh_FieldIndex.PNAM:
                        this.PNAM = ex;
                        break;
                    case ANavigationMesh_FieldIndex.NNAM:
                        this.NNAM = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ANavigationMesh_FieldIndex enu = (ANavigationMesh_FieldIndex)index;
                switch (enu)
                {
                    case ANavigationMesh_FieldIndex.ONAM:
                        this.ONAM = (Exception?)obj;
                        break;
                    case ANavigationMesh_FieldIndex.PNAM:
                        this.PNAM = (Exception?)obj;
                        break;
                    case ANavigationMesh_FieldIndex.NNAM:
                        this.NNAM = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ONAM != null) return true;
                if (PNAM != null) return true;
                if (NNAM != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(ONAM, "ONAM");
                fg.AppendItem(PNAM, "PNAM");
                fg.AppendItem(NNAM, "NNAM");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ONAM = this.ONAM.Combine(rhs.ONAM);
                ret.PNAM = this.PNAM.Combine(rhs.PNAM);
                ret.NNAM = this.NNAM.Combine(rhs.NNAM);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool ONAM;
            public bool PNAM;
            public bool NNAM;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.ONAM = defaultOn;
                this.PNAM = defaultOn;
                this.NNAM = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ONAM, null));
                ret.Add((PNAM, null));
                ret.Add((NNAM, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = ANavigationMesh_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => ANavigationMeshCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ANavigationMeshSetterCommon.Instance.RemapLinks(this, mapping);
        public ANavigationMesh(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private ANavigationMesh(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal ANavigationMesh(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public ANavigationMesh(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public ANavigationMesh(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<ANavigationMesh>.ToString(this);
        }

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IANavigationMeshGetter rhs) return false;
            return ((ANavigationMeshCommon)((IANavigationMeshGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IANavigationMeshGetter? obj)
        {
            return ((ANavigationMeshCommon)((IANavigationMeshGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ANavigationMeshCommon)((IANavigationMeshGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ANavigationMeshBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ANavigationMeshBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ANavigationMeshSetterCommon)((IANavigationMeshGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ANavigationMesh GetNew()
        {
            throw new ArgumentException("New called on an abstract class.");
        }

    }
    #endregion

    #region Interface
    /// <summary>
    /// Implemented by: [WorldspaceNavigationMesh, CellNavigationMesh]
    /// </summary>
    public partial interface IANavigationMesh :
        IANavigationMeshGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IANavigationMeshInternal>,
        ISkyrimMajorRecordInternal
    {
        new MemorySlice<Byte>? ONAM { get; set; }
        new MemorySlice<Byte>? PNAM { get; set; }
        new MemorySlice<Byte>? NNAM { get; set; }
        #region Mutagen
        new ANavigationMesh.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IANavigationMeshInternal :
        ISkyrimMajorRecordInternal,
        IANavigationMesh,
        IANavigationMeshGetter
    {
    }

    /// <summary>
    /// Implemented by: [WorldspaceNavigationMesh, CellNavigationMesh]
    /// </summary>
    public partial interface IANavigationMeshGetter :
        ISkyrimMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IANavigationMeshGetter>
    {
        static new ILoquiRegistration StaticRegistration => ANavigationMesh_Registration.Instance;
        ReadOnlyMemorySlice<Byte>? ONAM { get; }
        ReadOnlyMemorySlice<Byte>? PNAM { get; }
        ReadOnlyMemorySlice<Byte>? NNAM { get; }

        #region Mutagen
        ANavigationMesh.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class ANavigationMeshMixIn
    {
        public static void Clear(this IANavigationMeshInternal item)
        {
            ((ANavigationMeshSetterCommon)((IANavigationMeshGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ANavigationMesh.Mask<bool> GetEqualsMask(
            this IANavigationMeshGetter item,
            IANavigationMeshGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ANavigationMeshCommon)((IANavigationMeshGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IANavigationMeshGetter item,
            string? name = null,
            ANavigationMesh.Mask<bool>? printMask = null)
        {
            return ((ANavigationMeshCommon)((IANavigationMeshGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IANavigationMeshGetter item,
            FileGeneration fg,
            string? name = null,
            ANavigationMesh.Mask<bool>? printMask = null)
        {
            ((ANavigationMeshCommon)((IANavigationMeshGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IANavigationMeshGetter item,
            IANavigationMeshGetter rhs,
            ANavigationMesh.TranslationMask? equalsMask = null)
        {
            return ((ANavigationMeshCommon)((IANavigationMeshGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IANavigationMeshInternal lhs,
            IANavigationMeshGetter rhs,
            out ANavigationMesh.ErrorMask errorMask,
            ANavigationMesh.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ANavigationMeshSetterTranslationCommon)((IANavigationMeshGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ANavigationMesh.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IANavigationMeshInternal lhs,
            IANavigationMeshGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ANavigationMeshSetterTranslationCommon)((IANavigationMeshGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ANavigationMesh DeepCopy(
            this IANavigationMeshGetter item,
            ANavigationMesh.TranslationMask? copyMask = null)
        {
            return ((ANavigationMeshSetterTranslationCommon)((IANavigationMeshGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ANavigationMesh DeepCopy(
            this IANavigationMeshGetter item,
            out ANavigationMesh.ErrorMask errorMask,
            ANavigationMesh.TranslationMask? copyMask = null)
        {
            return ((ANavigationMeshSetterTranslationCommon)((IANavigationMeshGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ANavigationMesh DeepCopy(
            this IANavigationMeshGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ANavigationMeshSetterTranslationCommon)((IANavigationMeshGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static ANavigationMesh Duplicate(
            this IANavigationMeshGetter item,
            FormKey formKey,
            ANavigationMesh.TranslationMask? copyMask = null)
        {
            return ((ANavigationMeshCommon)((IANavigationMeshGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IANavigationMeshInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((ANavigationMeshSetterCommon)((IANavigationMeshGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum ANavigationMesh_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        ONAM = 6,
        PNAM = 7,
        NNAM = 8,
    }
    #endregion

    #region Registration
    public partial class ANavigationMesh_Registration : ILoquiRegistration
    {
        public static readonly ANavigationMesh_Registration Instance = new ANavigationMesh_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 272,
            version: 0);

        public const string GUID = "225085bf-6162-4178-8f6a-de8d829916c2";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(ANavigationMesh.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ANavigationMesh.ErrorMask);

        public static readonly Type ClassType = typeof(ANavigationMesh);

        public static readonly Type GetterType = typeof(IANavigationMeshGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IANavigationMesh);

        public static readonly Type? InternalSetterType = typeof(IANavigationMeshInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.ANavigationMesh";

        public const string Name = "ANavigationMesh";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.NAVM;
        public static readonly Type BinaryWriteTranslation = typeof(ANavigationMeshBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ANavigationMeshSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly ANavigationMeshSetterCommon Instance = new ANavigationMeshSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IANavigationMeshInternal item)
        {
            ClearPartial();
            item.ONAM = default;
            item.PNAM = default;
            item.NNAM = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IANavigationMeshInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IANavigationMeshInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IANavigationMesh obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IANavigationMeshInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (ANavigationMesh)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (ANavigationMesh)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    public partial class ANavigationMeshCommon : SkyrimMajorRecordCommon
    {
        public new static readonly ANavigationMeshCommon Instance = new ANavigationMeshCommon();

        public ANavigationMesh.Mask<bool> GetEqualsMask(
            IANavigationMeshGetter item,
            IANavigationMeshGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ANavigationMesh.Mask<bool>(false);
            ((ANavigationMeshCommon)((IANavigationMeshGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IANavigationMeshGetter item,
            IANavigationMeshGetter rhs,
            ANavigationMesh.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ONAM = MemorySliceExt.Equal(item.ONAM, rhs.ONAM);
            ret.PNAM = MemorySliceExt.Equal(item.PNAM, rhs.PNAM);
            ret.NNAM = MemorySliceExt.Equal(item.NNAM, rhs.NNAM);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IANavigationMeshGetter item,
            string? name = null,
            ANavigationMesh.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IANavigationMeshGetter item,
            FileGeneration fg,
            string? name = null,
            ANavigationMesh.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ANavigationMesh =>");
            }
            else
            {
                fg.AppendLine($"{name} (ANavigationMesh) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IANavigationMeshGetter item,
            FileGeneration fg,
            ANavigationMesh.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.ONAM ?? true)
                && item.ONAM is {} ONAMItem)
            {
                fg.AppendLine($"ONAM => {SpanExt.ToHexString(ONAMItem)}");
            }
            if ((printMask?.PNAM ?? true)
                && item.PNAM is {} PNAMItem)
            {
                fg.AppendLine($"PNAM => {SpanExt.ToHexString(PNAMItem)}");
            }
            if ((printMask?.NNAM ?? true)
                && item.NNAM is {} NNAMItem)
            {
                fg.AppendLine($"NNAM => {SpanExt.ToHexString(NNAMItem)}");
            }
        }
        
        public static ANavigationMesh_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ANavigationMesh_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (ANavigationMesh_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (ANavigationMesh_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (ANavigationMesh_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (ANavigationMesh_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (ANavigationMesh_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new ANavigationMesh_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ANavigationMesh_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (ANavigationMesh_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (ANavigationMesh_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (ANavigationMesh_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IANavigationMeshGetter? lhs,
            IANavigationMeshGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)ANavigationMesh_FieldIndex.ONAM) ?? true))
            {
                if (!MemorySliceExt.Equal(lhs.ONAM, rhs.ONAM)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)ANavigationMesh_FieldIndex.PNAM) ?? true))
            {
                if (!MemorySliceExt.Equal(lhs.PNAM, rhs.PNAM)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)ANavigationMesh_FieldIndex.NNAM) ?? true))
            {
                if (!MemorySliceExt.Equal(lhs.NNAM, rhs.NNAM)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IANavigationMeshGetter?)lhs,
                rhs: rhs as IANavigationMeshGetter,
                crystal: crystal);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IANavigationMeshGetter?)lhs,
                rhs: rhs as IANavigationMeshGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(IANavigationMeshGetter item)
        {
            var hash = new HashCode();
            if (item.ONAM is {} ONAMItem)
            {
                hash.Add(ONAMItem);
            }
            if (item.PNAM is {} PNAMItem)
            {
                hash.Add(PNAMItem);
            }
            if (item.NNAM is {} NNAMItem)
            {
                hash.Add(NNAMItem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IANavigationMeshGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IANavigationMeshGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ANavigationMesh.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IANavigationMeshGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public virtual ANavigationMesh Duplicate(
            IANavigationMeshGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            throw new NotImplementedException();
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IANavigationMeshGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IANavigationMeshGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class ANavigationMeshSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly ANavigationMeshSetterTranslationCommon Instance = new ANavigationMeshSetterTranslationCommon();

        #region DeepCopyIn
        public virtual void DeepCopyIn(
            IANavigationMeshInternal item,
            IANavigationMeshGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public virtual void DeepCopyIn(
            IANavigationMesh item,
            IANavigationMeshGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)ANavigationMesh_FieldIndex.ONAM) ?? true))
            {
                if(rhs.ONAM is {} ONAMrhs)
                {
                    item.ONAM = ONAMrhs.ToArray();
                }
                else
                {
                    item.ONAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ANavigationMesh_FieldIndex.PNAM) ?? true))
            {
                if(rhs.PNAM is {} PNAMrhs)
                {
                    item.PNAM = PNAMrhs.ToArray();
                }
                else
                {
                    item.PNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ANavigationMesh_FieldIndex.NNAM) ?? true))
            {
                if(rhs.NNAM is {} NNAMrhs)
                {
                    item.NNAM = NNAMrhs.ToArray();
                }
                else
                {
                    item.NNAM = default;
                }
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IANavigationMeshInternal)item,
                rhs: (IANavigationMeshGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IANavigationMesh)item,
                rhs: (IANavigationMeshGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IANavigationMeshInternal)item,
                rhs: (IANavigationMeshGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IANavigationMesh)item,
                rhs: (IANavigationMeshGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public ANavigationMesh DeepCopy(
            IANavigationMeshGetter item,
            ANavigationMesh.TranslationMask? copyMask = null)
        {
            ANavigationMesh ret = (ANavigationMesh)((ANavigationMeshCommon)((IANavigationMeshGetter)item).CommonInstance()!).GetNew();
            ((ANavigationMeshSetterTranslationCommon)((IANavigationMeshGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ANavigationMesh DeepCopy(
            IANavigationMeshGetter item,
            out ANavigationMesh.ErrorMask errorMask,
            ANavigationMesh.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ANavigationMesh ret = (ANavigationMesh)((ANavigationMeshCommon)((IANavigationMeshGetter)item).CommonInstance()!).GetNew();
            ((ANavigationMeshSetterTranslationCommon)((IANavigationMeshGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ANavigationMesh.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ANavigationMesh DeepCopy(
            IANavigationMeshGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ANavigationMesh ret = (ANavigationMesh)((ANavigationMeshCommon)((IANavigationMeshGetter)item).CommonInstance()!).GetNew();
            ((ANavigationMeshSetterTranslationCommon)((IANavigationMeshGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class ANavigationMesh
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ANavigationMesh_Registration.Instance;
        public new static ANavigationMesh_Registration StaticRegistration => ANavigationMesh_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ANavigationMeshCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ANavigationMeshSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ANavigationMeshSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ANavigationMeshBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ANavigationMeshBinaryWriteTranslation Instance = new ANavigationMeshBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IANavigationMeshGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            ANavigationMeshBinaryWriteTranslation.WriteBinaryLengthLogic(
                writer: writer,
                item: item);
            ANavigationMeshBinaryWriteTranslation.WriteBinaryDataLogic(
                writer: writer,
                item: item);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ONAM,
                header: translationParams.ConvertToCustom(RecordTypes.ONAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.PNAM,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.NNAM,
                header: translationParams.ConvertToCustom(RecordTypes.NNAM));
        }

        public static partial void WriteBinaryLengthLogicCustom(
            MutagenWriter writer,
            IANavigationMeshGetter item);

        public static void WriteBinaryLengthLogic(
            MutagenWriter writer,
            IANavigationMeshGetter item)
        {
            WriteBinaryLengthLogicCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryDataLogicCustom(
            MutagenWriter writer,
            IANavigationMeshGetter item);

        public static void WriteBinaryDataLogic(
            MutagenWriter writer,
            IANavigationMeshGetter item)
        {
            WriteBinaryDataLogicCustom(
                writer: writer,
                item: item);
        }

        public virtual void Write(
            MutagenWriter writer,
            IANavigationMeshGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Record(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.NAVM)))
            {
                try
                {
                    SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        translationParams: translationParams);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Enrich(ex, item);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IANavigationMeshGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IANavigationMeshGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IANavigationMeshGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class ANavigationMeshBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static ANavigationMeshBinaryCreateTranslation Instance = new ANavigationMeshBinaryCreateTranslation();

        public override RecordType RecordType => throw new ArgumentException();
        public static ParseResult FillBinaryRecordTypes(
            IANavigationMeshInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.XXXX:
                {
                    return ANavigationMeshBinaryCreateTranslation.FillBinaryLengthLogicCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                }
                case RecordTypeInts.NVNM:
                {
                    return ANavigationMeshBinaryCreateTranslation.FillBinaryDataLogicCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                }
                case RecordTypeInts.ONAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ONAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)ANavigationMesh_FieldIndex.ONAM;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)ANavigationMesh_FieldIndex.PNAM;
                }
                case RecordTypeInts.NNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)ANavigationMesh_FieldIndex.NNAM;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        public static partial ParseResult FillBinaryLengthLogicCustom(
            MutagenFrame frame,
            IANavigationMeshInternal item);

        public static partial ParseResult FillBinaryDataLogicCustom(
            MutagenFrame frame,
            IANavigationMeshInternal item);

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class ANavigationMeshBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public abstract partial class ANavigationMeshBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IANavigationMeshGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ANavigationMesh_Registration.Instance;
        public new static ANavigationMesh_Registration StaticRegistration => ANavigationMesh_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ANavigationMeshCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ANavigationMeshSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => ANavigationMeshCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ANavigationMeshBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ANavigationMeshBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        public ANavigationMesh.MajorFlag MajorFlags => (ANavigationMesh.MajorFlag)this.MajorRecordFlagsRaw;

        #region LengthLogic
        public partial ParseResult LengthLogicCustomParse(
            OverlayStream stream,
            int offset);
        #endregion
        #region DataLogic
        public partial ParseResult DataLogicCustomParse(
            OverlayStream stream,
            int offset);
        #endregion
        #region ONAM
        private int? _ONAMLocation;
        public ReadOnlyMemorySlice<Byte>? ONAM => _ONAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _ONAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region PNAM
        private int? _PNAMLocation;
        public ReadOnlyMemorySlice<Byte>? PNAM => _PNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _PNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region NNAM
        private int? _NNAMLocation;
        public ReadOnlyMemorySlice<Byte>? NNAM => _NNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _NNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ANavigationMeshBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }


        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.XXXX:
                {
                    return LengthLogicCustomParse(
                        stream,
                        offset);
                }
                case RecordTypeInts.NVNM:
                {
                    return DataLogicCustomParse(
                        stream,
                        offset);
                }
                case RecordTypeInts.ONAM:
                {
                    _ONAMLocation = (stream.Position - offset);
                    return (int)ANavigationMesh_FieldIndex.ONAM;
                }
                case RecordTypeInts.PNAM:
                {
                    _PNAMLocation = (stream.Position - offset);
                    return (int)ANavigationMesh_FieldIndex.PNAM;
                }
                case RecordTypeInts.NNAM:
                {
                    _NNAMLocation = (stream.Position - offset);
                    return (int)ANavigationMesh_FieldIndex.NNAM;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ANavigationMeshMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<ANavigationMesh>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IANavigationMeshGetter rhs) return false;
            return ((ANavigationMeshCommon)((IANavigationMeshGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IANavigationMeshGetter? obj)
        {
            return ((ANavigationMeshCommon)((IANavigationMeshGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ANavigationMeshCommon)((IANavigationMeshGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

