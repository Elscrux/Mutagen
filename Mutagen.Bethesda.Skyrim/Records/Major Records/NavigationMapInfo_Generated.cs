/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class NavigationMapInfo :
        IEquatable<INavigationMapInfoGetter>,
        ILoquiObjectSetter<NavigationMapInfo>,
        INavigationMapInfo
    {
        #region Ctor
        public NavigationMapInfo()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region NavigationMesh
        private readonly IFormLink<INavigationMeshGetter> _NavigationMesh = new FormLink<INavigationMeshGetter>();
        public IFormLink<INavigationMeshGetter> NavigationMesh
        {
            get => _NavigationMesh;
            set => _NavigationMesh.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<INavigationMeshGetter> INavigationMapInfoGetter.NavigationMesh => this.NavigationMesh;
        #endregion
        #region Unknown
        public Int32 Unknown { get; set; } = default(Int32);
        #endregion
        #region Point
        public P3Float Point { get; set; } = default(P3Float);
        #endregion
        #region PreferredMergesFlag
        public UInt32 PreferredMergesFlag { get; set; } = default(UInt32);
        #endregion
        #region MergedTo
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<INavigationMeshGetter>> _MergedTo = new ExtendedList<IFormLinkGetter<INavigationMeshGetter>>();
        public ExtendedList<IFormLinkGetter<INavigationMeshGetter>> MergedTo
        {
            get => this._MergedTo;
            init => this._MergedTo = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<INavigationMeshGetter>> INavigationMapInfoGetter.MergedTo => _MergedTo;
        #endregion

        #endregion
        #region PreferredMerges
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<INavigationMeshGetter>> _PreferredMerges = new ExtendedList<IFormLinkGetter<INavigationMeshGetter>>();
        public ExtendedList<IFormLinkGetter<INavigationMeshGetter>> PreferredMerges
        {
            get => this._PreferredMerges;
            init => this._PreferredMerges = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<INavigationMeshGetter>> INavigationMapInfoGetter.PreferredMerges => _PreferredMerges;
        #endregion

        #endregion
        #region LinkedDoors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LinkedDoor> _LinkedDoors = new ExtendedList<LinkedDoor>();
        public ExtendedList<LinkedDoor> LinkedDoors
        {
            get => this._LinkedDoors;
            init => this._LinkedDoors = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILinkedDoorGetter> INavigationMapInfoGetter.LinkedDoors => _LinkedDoors;
        #endregion

        #endregion
        #region Island
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IslandData? _Island;
        public IslandData? Island
        {
            get => _Island;
            set => _Island = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IIslandDataGetter? INavigationMapInfoGetter.Island => this.Island;
        #endregion
        #region Unknown2
        public Int32 Unknown2 { get; set; } = default(Int32);
        #endregion
        #region Parent
        public ANavigationMapInfoParent Parent { get; set; } = default!;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IANavigationMapInfoParentGetter INavigationMapInfoGetter.Parent => Parent;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NavigationMapInfoMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INavigationMapInfoGetter rhs) return false;
            return ((NavigationMapInfoCommon)((INavigationMapInfoGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INavigationMapInfoGetter? obj)
        {
            return ((NavigationMapInfoCommon)((INavigationMapInfoGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NavigationMapInfoCommon)((INavigationMapInfoGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.NavigationMesh = initialValue;
                this.Unknown = initialValue;
                this.Point = initialValue;
                this.PreferredMergesFlag = initialValue;
                this.MergedTo = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.PreferredMerges = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.LinkedDoors = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedDoor.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LinkedDoor.Mask<TItem>?>>());
                this.Island = new MaskItem<TItem, IslandData.Mask<TItem>?>(initialValue, new IslandData.Mask<TItem>(initialValue));
                this.Unknown2 = initialValue;
                this.Parent = new MaskItem<TItem, ANavigationMapInfoParent.Mask<TItem>?>(initialValue, new ANavigationMapInfoParent.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem NavigationMesh,
                TItem Unknown,
                TItem Point,
                TItem PreferredMergesFlag,
                TItem MergedTo,
                TItem PreferredMerges,
                TItem LinkedDoors,
                TItem Island,
                TItem Unknown2,
                TItem Parent)
            {
                this.NavigationMesh = NavigationMesh;
                this.Unknown = Unknown;
                this.Point = Point;
                this.PreferredMergesFlag = PreferredMergesFlag;
                this.MergedTo = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(MergedTo, Enumerable.Empty<(int Index, TItem Value)>());
                this.PreferredMerges = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(PreferredMerges, Enumerable.Empty<(int Index, TItem Value)>());
                this.LinkedDoors = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedDoor.Mask<TItem>?>>?>(LinkedDoors, Enumerable.Empty<MaskItemIndexed<TItem, LinkedDoor.Mask<TItem>?>>());
                this.Island = new MaskItem<TItem, IslandData.Mask<TItem>?>(Island, new IslandData.Mask<TItem>(Island));
                this.Unknown2 = Unknown2;
                this.Parent = new MaskItem<TItem, ANavigationMapInfoParent.Mask<TItem>?>(Parent, new ANavigationMapInfoParent.Mask<TItem>(Parent));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem NavigationMesh;
            public TItem Unknown;
            public TItem Point;
            public TItem PreferredMergesFlag;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? MergedTo;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? PreferredMerges;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedDoor.Mask<TItem>?>>?>? LinkedDoors;
            public MaskItem<TItem, IslandData.Mask<TItem>?>? Island { get; set; }
            public TItem Unknown2;
            public MaskItem<TItem, ANavigationMapInfoParent.Mask<TItem>?>? Parent { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.NavigationMesh, rhs.NavigationMesh)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Point, rhs.Point)) return false;
                if (!object.Equals(this.PreferredMergesFlag, rhs.PreferredMergesFlag)) return false;
                if (!object.Equals(this.MergedTo, rhs.MergedTo)) return false;
                if (!object.Equals(this.PreferredMerges, rhs.PreferredMerges)) return false;
                if (!object.Equals(this.LinkedDoors, rhs.LinkedDoors)) return false;
                if (!object.Equals(this.Island, rhs.Island)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.Parent, rhs.Parent)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.NavigationMesh);
                hash.Add(this.Unknown);
                hash.Add(this.Point);
                hash.Add(this.PreferredMergesFlag);
                hash.Add(this.MergedTo);
                hash.Add(this.PreferredMerges);
                hash.Add(this.LinkedDoors);
                hash.Add(this.Island);
                hash.Add(this.Unknown2);
                hash.Add(this.Parent);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.NavigationMesh)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.Point)) return false;
                if (!eval(this.PreferredMergesFlag)) return false;
                if (this.MergedTo != null)
                {
                    if (!eval(this.MergedTo.Overall)) return false;
                    if (this.MergedTo.Specific != null)
                    {
                        foreach (var item in this.MergedTo.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.PreferredMerges != null)
                {
                    if (!eval(this.PreferredMerges.Overall)) return false;
                    if (this.PreferredMerges.Specific != null)
                    {
                        foreach (var item in this.PreferredMerges.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.LinkedDoors != null)
                {
                    if (!eval(this.LinkedDoors.Overall)) return false;
                    if (this.LinkedDoors.Specific != null)
                    {
                        foreach (var item in this.LinkedDoors.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Island != null)
                {
                    if (!eval(this.Island.Overall)) return false;
                    if (this.Island.Specific != null && !this.Island.Specific.All(eval)) return false;
                }
                if (!eval(this.Unknown2)) return false;
                if (Parent != null)
                {
                    if (!eval(this.Parent.Overall)) return false;
                    if (this.Parent.Specific != null && !this.Parent.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.NavigationMesh)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.Point)) return true;
                if (eval(this.PreferredMergesFlag)) return true;
                if (this.MergedTo != null)
                {
                    if (eval(this.MergedTo.Overall)) return true;
                    if (this.MergedTo.Specific != null)
                    {
                        foreach (var item in this.MergedTo.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.PreferredMerges != null)
                {
                    if (eval(this.PreferredMerges.Overall)) return true;
                    if (this.PreferredMerges.Specific != null)
                    {
                        foreach (var item in this.PreferredMerges.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.LinkedDoors != null)
                {
                    if (eval(this.LinkedDoors.Overall)) return true;
                    if (this.LinkedDoors.Specific != null)
                    {
                        foreach (var item in this.LinkedDoors.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Island != null)
                {
                    if (eval(this.Island.Overall)) return true;
                    if (this.Island.Specific != null && this.Island.Specific.Any(eval)) return true;
                }
                if (eval(this.Unknown2)) return true;
                if (Parent != null)
                {
                    if (eval(this.Parent.Overall)) return true;
                    if (this.Parent.Specific != null && this.Parent.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new NavigationMapInfo.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.NavigationMesh = eval(this.NavigationMesh);
                obj.Unknown = eval(this.Unknown);
                obj.Point = eval(this.Point);
                obj.PreferredMergesFlag = eval(this.PreferredMergesFlag);
                if (MergedTo != null)
                {
                    obj.MergedTo = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.MergedTo.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (MergedTo.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.MergedTo.Specific = l;
                        foreach (var item in MergedTo.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (PreferredMerges != null)
                {
                    obj.PreferredMerges = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.PreferredMerges.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (PreferredMerges.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.PreferredMerges.Specific = l;
                        foreach (var item in PreferredMerges.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (LinkedDoors != null)
                {
                    obj.LinkedDoors = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LinkedDoor.Mask<R>?>>?>(eval(this.LinkedDoors.Overall), Enumerable.Empty<MaskItemIndexed<R, LinkedDoor.Mask<R>?>>());
                    if (LinkedDoors.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LinkedDoor.Mask<R>?>>();
                        obj.LinkedDoors.Specific = l;
                        foreach (var item in LinkedDoors.Specific)
                        {
                            MaskItemIndexed<R, LinkedDoor.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LinkedDoor.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Island = this.Island == null ? null : new MaskItem<R, IslandData.Mask<R>?>(eval(this.Island.Overall), this.Island.Specific?.Translate(eval));
                obj.Unknown2 = eval(this.Unknown2);
                obj.Parent = this.Parent == null ? null : new MaskItem<R, ANavigationMapInfoParent.Mask<R>?>(eval(this.Parent.Overall), this.Parent.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(NavigationMapInfo.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, NavigationMapInfo.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(NavigationMapInfo.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.NavigationMesh ?? true)
                    {
                        sb.AppendItem(NavigationMesh, "NavigationMesh");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.Point ?? true)
                    {
                        sb.AppendItem(Point, "Point");
                    }
                    if (printMask?.PreferredMergesFlag ?? true)
                    {
                        sb.AppendItem(PreferredMergesFlag, "PreferredMergesFlag");
                    }
                    if ((printMask?.MergedTo?.Overall ?? true)
                        && MergedTo is {} MergedToItem)
                    {
                        sb.AppendLine("MergedTo =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MergedToItem.Overall);
                            if (MergedToItem.Specific != null)
                            {
                                foreach (var subItem in MergedToItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.PreferredMerges?.Overall ?? true)
                        && PreferredMerges is {} PreferredMergesItem)
                    {
                        sb.AppendLine("PreferredMerges =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PreferredMergesItem.Overall);
                            if (PreferredMergesItem.Specific != null)
                            {
                                foreach (var subItem in PreferredMergesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.LinkedDoors?.Overall ?? true)
                        && LinkedDoors is {} LinkedDoorsItem)
                    {
                        sb.AppendLine("LinkedDoors =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(LinkedDoorsItem.Overall);
                            if (LinkedDoorsItem.Specific != null)
                            {
                                foreach (var subItem in LinkedDoorsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Island?.Overall ?? true)
                    {
                        Island?.Print(sb);
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        sb.AppendItem(Unknown2, "Unknown2");
                    }
                    if (printMask?.Parent?.Overall ?? true)
                    {
                        Parent?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? NavigationMesh;
            public Exception? Unknown;
            public Exception? Point;
            public Exception? PreferredMergesFlag;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? MergedTo;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? PreferredMerges;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedDoor.ErrorMask?>>?>? LinkedDoors;
            public MaskItem<Exception?, IslandData.ErrorMask?>? Island;
            public Exception? Unknown2;
            public MaskItem<Exception?, ANavigationMapInfoParent.ErrorMask?>? Parent;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                NavigationMapInfo_FieldIndex enu = (NavigationMapInfo_FieldIndex)index;
                switch (enu)
                {
                    case NavigationMapInfo_FieldIndex.NavigationMesh:
                        return NavigationMesh;
                    case NavigationMapInfo_FieldIndex.Unknown:
                        return Unknown;
                    case NavigationMapInfo_FieldIndex.Point:
                        return Point;
                    case NavigationMapInfo_FieldIndex.PreferredMergesFlag:
                        return PreferredMergesFlag;
                    case NavigationMapInfo_FieldIndex.MergedTo:
                        return MergedTo;
                    case NavigationMapInfo_FieldIndex.PreferredMerges:
                        return PreferredMerges;
                    case NavigationMapInfo_FieldIndex.LinkedDoors:
                        return LinkedDoors;
                    case NavigationMapInfo_FieldIndex.Island:
                        return Island;
                    case NavigationMapInfo_FieldIndex.Unknown2:
                        return Unknown2;
                    case NavigationMapInfo_FieldIndex.Parent:
                        return Parent;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                NavigationMapInfo_FieldIndex enu = (NavigationMapInfo_FieldIndex)index;
                switch (enu)
                {
                    case NavigationMapInfo_FieldIndex.NavigationMesh:
                        this.NavigationMesh = ex;
                        break;
                    case NavigationMapInfo_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case NavigationMapInfo_FieldIndex.Point:
                        this.Point = ex;
                        break;
                    case NavigationMapInfo_FieldIndex.PreferredMergesFlag:
                        this.PreferredMergesFlag = ex;
                        break;
                    case NavigationMapInfo_FieldIndex.MergedTo:
                        this.MergedTo = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case NavigationMapInfo_FieldIndex.PreferredMerges:
                        this.PreferredMerges = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case NavigationMapInfo_FieldIndex.LinkedDoors:
                        this.LinkedDoors = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedDoor.ErrorMask?>>?>(ex, null);
                        break;
                    case NavigationMapInfo_FieldIndex.Island:
                        this.Island = new MaskItem<Exception?, IslandData.ErrorMask?>(ex, null);
                        break;
                    case NavigationMapInfo_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    case NavigationMapInfo_FieldIndex.Parent:
                        this.Parent = new MaskItem<Exception?, ANavigationMapInfoParent.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                NavigationMapInfo_FieldIndex enu = (NavigationMapInfo_FieldIndex)index;
                switch (enu)
                {
                    case NavigationMapInfo_FieldIndex.NavigationMesh:
                        this.NavigationMesh = (Exception?)obj;
                        break;
                    case NavigationMapInfo_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case NavigationMapInfo_FieldIndex.Point:
                        this.Point = (Exception?)obj;
                        break;
                    case NavigationMapInfo_FieldIndex.PreferredMergesFlag:
                        this.PreferredMergesFlag = (Exception?)obj;
                        break;
                    case NavigationMapInfo_FieldIndex.MergedTo:
                        this.MergedTo = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case NavigationMapInfo_FieldIndex.PreferredMerges:
                        this.PreferredMerges = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case NavigationMapInfo_FieldIndex.LinkedDoors:
                        this.LinkedDoors = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedDoor.ErrorMask?>>?>)obj;
                        break;
                    case NavigationMapInfo_FieldIndex.Island:
                        this.Island = (MaskItem<Exception?, IslandData.ErrorMask?>?)obj;
                        break;
                    case NavigationMapInfo_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    case NavigationMapInfo_FieldIndex.Parent:
                        this.Parent = (MaskItem<Exception?, ANavigationMapInfoParent.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (NavigationMesh != null) return true;
                if (Unknown != null) return true;
                if (Point != null) return true;
                if (PreferredMergesFlag != null) return true;
                if (MergedTo != null) return true;
                if (PreferredMerges != null) return true;
                if (LinkedDoors != null) return true;
                if (Island != null) return true;
                if (Unknown2 != null) return true;
                if (Parent != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(NavigationMesh, "NavigationMesh");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                {
                    sb.AppendItem(Point, "Point");
                }
                {
                    sb.AppendItem(PreferredMergesFlag, "PreferredMergesFlag");
                }
                if (MergedTo is {} MergedToItem)
                {
                    sb.AppendLine("MergedTo =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MergedToItem.Overall);
                        if (MergedToItem.Specific != null)
                        {
                            foreach (var subItem in MergedToItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (PreferredMerges is {} PreferredMergesItem)
                {
                    sb.AppendLine("PreferredMerges =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PreferredMergesItem.Overall);
                        if (PreferredMergesItem.Specific != null)
                        {
                            foreach (var subItem in PreferredMergesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (LinkedDoors is {} LinkedDoorsItem)
                {
                    sb.AppendLine("LinkedDoors =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(LinkedDoorsItem.Overall);
                        if (LinkedDoorsItem.Specific != null)
                        {
                            foreach (var subItem in LinkedDoorsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                Island?.Print(sb);
                {
                    sb.AppendItem(Unknown2, "Unknown2");
                }
                Parent?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.NavigationMesh = this.NavigationMesh.Combine(rhs.NavigationMesh);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Point = this.Point.Combine(rhs.Point);
                ret.PreferredMergesFlag = this.PreferredMergesFlag.Combine(rhs.PreferredMergesFlag);
                ret.MergedTo = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.MergedTo?.Overall, rhs.MergedTo?.Overall), Noggog.ExceptionExt.Combine(this.MergedTo?.Specific, rhs.MergedTo?.Specific));
                ret.PreferredMerges = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.PreferredMerges?.Overall, rhs.PreferredMerges?.Overall), Noggog.ExceptionExt.Combine(this.PreferredMerges?.Specific, rhs.PreferredMerges?.Specific));
                ret.LinkedDoors = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedDoor.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.LinkedDoors?.Overall, rhs.LinkedDoors?.Overall), Noggog.ExceptionExt.Combine(this.LinkedDoors?.Specific, rhs.LinkedDoors?.Specific));
                ret.Island = this.Island.Combine(rhs.Island, (l, r) => l.Combine(r));
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                ret.Parent = this.Parent.Combine(rhs.Parent, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool NavigationMesh;
            public bool Unknown;
            public bool Point;
            public bool PreferredMergesFlag;
            public bool MergedTo;
            public bool PreferredMerges;
            public LinkedDoor.TranslationMask? LinkedDoors;
            public IslandData.TranslationMask? Island;
            public bool Unknown2;
            public ANavigationMapInfoParent.TranslationMask? Parent;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.NavigationMesh = defaultOn;
                this.Unknown = defaultOn;
                this.Point = defaultOn;
                this.PreferredMergesFlag = defaultOn;
                this.MergedTo = defaultOn;
                this.PreferredMerges = defaultOn;
                this.Unknown2 = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((NavigationMesh, null));
                ret.Add((Unknown, null));
                ret.Add((Point, null));
                ret.Add((PreferredMergesFlag, null));
                ret.Add((MergedTo, null));
                ret.Add((PreferredMerges, null));
                ret.Add((LinkedDoors == null ? DefaultOn : !LinkedDoors.GetCrystal().CopyNothing, LinkedDoors?.GetCrystal()));
                ret.Add((Island != null ? Island.OnOverall : DefaultOn, Island?.GetCrystal()));
                ret.Add((Unknown2, null));
                ret.Add((Parent != null ? Parent.OnOverall : DefaultOn, Parent?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => NavigationMapInfoCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => NavigationMapInfoSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NavigationMapInfoBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NavigationMapInfoBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static NavigationMapInfo CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new NavigationMapInfo();
            ((NavigationMapInfoSetterCommon)((INavigationMapInfoGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out NavigationMapInfo item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((NavigationMapInfoSetterCommon)((INavigationMapInfoGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static NavigationMapInfo GetNew()
        {
            return new NavigationMapInfo();
        }

    }
    #endregion

    #region Interface
    public partial interface INavigationMapInfo :
        IFormLinkContainer,
        ILoquiObjectSetter<INavigationMapInfo>,
        INavigationMapInfoGetter
    {
        new IFormLink<INavigationMeshGetter> NavigationMesh { get; set; }
        new Int32 Unknown { get; set; }
        new P3Float Point { get; set; }
        new UInt32 PreferredMergesFlag { get; set; }
        new ExtendedList<IFormLinkGetter<INavigationMeshGetter>> MergedTo { get; }
        new ExtendedList<IFormLinkGetter<INavigationMeshGetter>> PreferredMerges { get; }
        new ExtendedList<LinkedDoor> LinkedDoors { get; }
        new IslandData? Island { get; set; }
        new Int32 Unknown2 { get; set; }
        new ANavigationMapInfoParent Parent { get; set; }
    }

    public partial interface INavigationMapInfoGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<INavigationMapInfoGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => NavigationMapInfo_Registration.Instance;
        IFormLinkGetter<INavigationMeshGetter> NavigationMesh { get; }
        Int32 Unknown { get; }
        P3Float Point { get; }
        UInt32 PreferredMergesFlag { get; }
        IReadOnlyList<IFormLinkGetter<INavigationMeshGetter>> MergedTo { get; }
        IReadOnlyList<IFormLinkGetter<INavigationMeshGetter>> PreferredMerges { get; }
        IReadOnlyList<ILinkedDoorGetter> LinkedDoors { get; }
        IIslandDataGetter? Island { get; }
        Int32 Unknown2 { get; }
        IANavigationMapInfoParentGetter Parent { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class NavigationMapInfoMixIn
    {
        public static void Clear(this INavigationMapInfo item)
        {
            ((NavigationMapInfoSetterCommon)((INavigationMapInfoGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static NavigationMapInfo.Mask<bool> GetEqualsMask(
            this INavigationMapInfoGetter item,
            INavigationMapInfoGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NavigationMapInfoCommon)((INavigationMapInfoGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this INavigationMapInfoGetter item,
            string? name = null,
            NavigationMapInfo.Mask<bool>? printMask = null)
        {
            return ((NavigationMapInfoCommon)((INavigationMapInfoGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this INavigationMapInfoGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NavigationMapInfo.Mask<bool>? printMask = null)
        {
            ((NavigationMapInfoCommon)((INavigationMapInfoGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INavigationMapInfoGetter item,
            INavigationMapInfoGetter rhs,
            NavigationMapInfo.TranslationMask? equalsMask = null)
        {
            return ((NavigationMapInfoCommon)((INavigationMapInfoGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this INavigationMapInfo lhs,
            INavigationMapInfoGetter rhs)
        {
            ((NavigationMapInfoSetterTranslationCommon)((INavigationMapInfoGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INavigationMapInfo lhs,
            INavigationMapInfoGetter rhs,
            NavigationMapInfo.TranslationMask? copyMask = null)
        {
            ((NavigationMapInfoSetterTranslationCommon)((INavigationMapInfoGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INavigationMapInfo lhs,
            INavigationMapInfoGetter rhs,
            out NavigationMapInfo.ErrorMask errorMask,
            NavigationMapInfo.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NavigationMapInfoSetterTranslationCommon)((INavigationMapInfoGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = NavigationMapInfo.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INavigationMapInfo lhs,
            INavigationMapInfoGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NavigationMapInfoSetterTranslationCommon)((INavigationMapInfoGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static NavigationMapInfo DeepCopy(
            this INavigationMapInfoGetter item,
            NavigationMapInfo.TranslationMask? copyMask = null)
        {
            return ((NavigationMapInfoSetterTranslationCommon)((INavigationMapInfoGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NavigationMapInfo DeepCopy(
            this INavigationMapInfoGetter item,
            out NavigationMapInfo.ErrorMask errorMask,
            NavigationMapInfo.TranslationMask? copyMask = null)
        {
            return ((NavigationMapInfoSetterTranslationCommon)((INavigationMapInfoGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NavigationMapInfo DeepCopy(
            this INavigationMapInfoGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NavigationMapInfoSetterTranslationCommon)((INavigationMapInfoGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this INavigationMapInfo item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((NavigationMapInfoSetterCommon)((INavigationMapInfoGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum NavigationMapInfo_FieldIndex
    {
        NavigationMesh = 0,
        Unknown = 1,
        Point = 2,
        PreferredMergesFlag = 3,
        MergedTo = 4,
        PreferredMerges = 5,
        LinkedDoors = 6,
        Island = 7,
        Unknown2 = 8,
        Parent = 9,
    }
    #endregion

    #region Registration
    internal partial class NavigationMapInfo_Registration : ILoquiRegistration
    {
        public static readonly NavigationMapInfo_Registration Instance = new NavigationMapInfo_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 10;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(NavigationMapInfo.Mask<>);

        public static readonly Type ErrorMaskType = typeof(NavigationMapInfo.ErrorMask);

        public static readonly Type ClassType = typeof(NavigationMapInfo);

        public static readonly Type GetterType = typeof(INavigationMapInfoGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INavigationMapInfo);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.NavigationMapInfo";

        public const string Name = "NavigationMapInfo";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.NVMI;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.NVMI);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(NavigationMapInfoBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class NavigationMapInfoSetterCommon
    {
        public static readonly NavigationMapInfoSetterCommon Instance = new NavigationMapInfoSetterCommon();

        partial void ClearPartial();
        
        public void Clear(INavigationMapInfo item)
        {
            ClearPartial();
            item.NavigationMesh.Clear();
            item.Unknown = default(Int32);
            item.Point = default(P3Float);
            item.PreferredMergesFlag = default(UInt32);
            item.MergedTo.Clear();
            item.PreferredMerges.Clear();
            item.LinkedDoors.Clear();
            item.Island = null;
            item.Unknown2 = default(Int32);
            item.Parent.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(INavigationMapInfo obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.NavigationMesh.Relink(mapping);
            obj.MergedTo.RemapLinks(mapping);
            obj.PreferredMerges.RemapLinks(mapping);
            obj.LinkedDoors.RemapLinks(mapping);
            obj.Parent.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INavigationMapInfo item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.NVMI),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: NavigationMapInfoBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class NavigationMapInfoCommon
    {
        public static readonly NavigationMapInfoCommon Instance = new NavigationMapInfoCommon();

        public NavigationMapInfo.Mask<bool> GetEqualsMask(
            INavigationMapInfoGetter item,
            INavigationMapInfoGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NavigationMapInfo.Mask<bool>(false);
            ((NavigationMapInfoCommon)((INavigationMapInfoGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INavigationMapInfoGetter item,
            INavigationMapInfoGetter rhs,
            NavigationMapInfo.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.NavigationMesh = item.NavigationMesh.Equals(rhs.NavigationMesh);
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.Point = item.Point.Equals(rhs.Point);
            ret.PreferredMergesFlag = item.PreferredMergesFlag == rhs.PreferredMergesFlag;
            ret.MergedTo = item.MergedTo.CollectionEqualsHelper(
                rhs.MergedTo,
                (l, r) => object.Equals(l, r),
                include);
            ret.PreferredMerges = item.PreferredMerges.CollectionEqualsHelper(
                rhs.PreferredMerges,
                (l, r) => object.Equals(l, r),
                include);
            ret.LinkedDoors = item.LinkedDoors.CollectionEqualsHelper(
                rhs.LinkedDoors,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Island = EqualsMaskHelper.EqualsHelper(
                item.Island,
                rhs.Island,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Unknown2 = item.Unknown2 == rhs.Unknown2;
            ret.Parent = MaskItemExt.Factory(item.Parent.GetEqualsMask(rhs.Parent, include), include);
        }
        
        public string Print(
            INavigationMapInfoGetter item,
            string? name = null,
            NavigationMapInfo.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            INavigationMapInfoGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NavigationMapInfo.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"NavigationMapInfo =>");
            }
            else
            {
                sb.AppendLine($"{name} (NavigationMapInfo) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            INavigationMapInfoGetter item,
            StructuredStringBuilder sb,
            NavigationMapInfo.Mask<bool>? printMask = null)
        {
            if (printMask?.NavigationMesh ?? true)
            {
                sb.AppendItem(item.NavigationMesh.FormKey, "NavigationMesh");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.Point ?? true)
            {
                sb.AppendItem(item.Point, "Point");
            }
            if (printMask?.PreferredMergesFlag ?? true)
            {
                sb.AppendItem(item.PreferredMergesFlag, "PreferredMergesFlag");
            }
            if (printMask?.MergedTo?.Overall ?? true)
            {
                sb.AppendLine("MergedTo =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.MergedTo)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.PreferredMerges?.Overall ?? true)
            {
                sb.AppendLine("PreferredMerges =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.PreferredMerges)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.LinkedDoors?.Overall ?? true)
            {
                sb.AppendLine("LinkedDoors =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.LinkedDoors)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Island?.Overall ?? true)
                && item.Island is {} IslandItem)
            {
                IslandItem?.Print(sb, "Island");
            }
            if (printMask?.Unknown2 ?? true)
            {
                sb.AppendItem(item.Unknown2, "Unknown2");
            }
            if (printMask?.Parent?.Overall ?? true)
            {
                item.Parent?.Print(sb, "Parent");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INavigationMapInfoGetter? lhs,
            INavigationMapInfoGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)NavigationMapInfo_FieldIndex.NavigationMesh) ?? true))
            {
                if (!lhs.NavigationMesh.Equals(rhs.NavigationMesh)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NavigationMapInfo_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NavigationMapInfo_FieldIndex.Point) ?? true))
            {
                if (!lhs.Point.Equals(rhs.Point)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NavigationMapInfo_FieldIndex.PreferredMergesFlag) ?? true))
            {
                if (lhs.PreferredMergesFlag != rhs.PreferredMergesFlag) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NavigationMapInfo_FieldIndex.MergedTo) ?? true))
            {
                if (!lhs.MergedTo.SequenceEqualNullable(rhs.MergedTo)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NavigationMapInfo_FieldIndex.PreferredMerges) ?? true))
            {
                if (!lhs.PreferredMerges.SequenceEqualNullable(rhs.PreferredMerges)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NavigationMapInfo_FieldIndex.LinkedDoors) ?? true))
            {
                if (!lhs.LinkedDoors.SequenceEqual(rhs.LinkedDoors, (l, r) => ((LinkedDoorCommon)((ILinkedDoorGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)NavigationMapInfo_FieldIndex.LinkedDoors)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NavigationMapInfo_FieldIndex.Island) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Island, rhs.Island, out var lhsIsland, out var rhsIsland, out var isIslandEqual))
                {
                    if (!((IslandDataCommon)((IIslandDataGetter)lhsIsland).CommonInstance()!).Equals(lhsIsland, rhsIsland, equalsMask?.GetSubCrystal((int)NavigationMapInfo_FieldIndex.Island))) return false;
                }
                else if (!isIslandEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NavigationMapInfo_FieldIndex.Unknown2) ?? true))
            {
                if (lhs.Unknown2 != rhs.Unknown2) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NavigationMapInfo_FieldIndex.Parent) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Parent, rhs.Parent, out var lhsParent, out var rhsParent, out var isParentEqual))
                {
                    if (!((ANavigationMapInfoParentCommon)((IANavigationMapInfoParentGetter)lhsParent).CommonInstance()!).Equals(lhsParent, rhsParent, equalsMask?.GetSubCrystal((int)NavigationMapInfo_FieldIndex.Parent))) return false;
                }
                else if (!isParentEqual) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(INavigationMapInfoGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.NavigationMesh);
            hash.Add(item.Unknown);
            hash.Add(item.Point);
            hash.Add(item.PreferredMergesFlag);
            hash.Add(item.MergedTo);
            hash.Add(item.PreferredMerges);
            hash.Add(item.LinkedDoors);
            if (item.Island is {} Islanditem)
            {
                hash.Add(Islanditem);
            }
            hash.Add(item.Unknown2);
            hash.Add(item.Parent);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return NavigationMapInfo.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(INavigationMapInfoGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.NavigationMesh);
            foreach (var item in obj.MergedTo)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.PreferredMerges)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.LinkedDoors.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Parent is IFormLinkContainerGetter ParentlinkCont)
            {
                foreach (var item in ParentlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class NavigationMapInfoSetterTranslationCommon
    {
        public static readonly NavigationMapInfoSetterTranslationCommon Instance = new NavigationMapInfoSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            INavigationMapInfo item,
            INavigationMapInfoGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)NavigationMapInfo_FieldIndex.NavigationMesh) ?? true))
            {
                item.NavigationMesh.SetTo(rhs.NavigationMesh.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)NavigationMapInfo_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)NavigationMapInfo_FieldIndex.Point) ?? true))
            {
                item.Point = rhs.Point;
            }
            if ((copyMask?.GetShouldTranslate((int)NavigationMapInfo_FieldIndex.PreferredMergesFlag) ?? true))
            {
                item.PreferredMergesFlag = rhs.PreferredMergesFlag;
            }
            if ((copyMask?.GetShouldTranslate((int)NavigationMapInfo_FieldIndex.MergedTo) ?? true))
            {
                errorMask?.PushIndex((int)NavigationMapInfo_FieldIndex.MergedTo);
                try
                {
                    item.MergedTo.SetTo(
                        rhs.MergedTo
                            .Select(b => (IFormLinkGetter<INavigationMeshGetter>)new FormLink<INavigationMeshGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NavigationMapInfo_FieldIndex.PreferredMerges) ?? true))
            {
                errorMask?.PushIndex((int)NavigationMapInfo_FieldIndex.PreferredMerges);
                try
                {
                    item.PreferredMerges.SetTo(
                        rhs.PreferredMerges
                            .Select(b => (IFormLinkGetter<INavigationMeshGetter>)new FormLink<INavigationMeshGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NavigationMapInfo_FieldIndex.LinkedDoors) ?? true))
            {
                errorMask?.PushIndex((int)NavigationMapInfo_FieldIndex.LinkedDoors);
                try
                {
                    item.LinkedDoors.SetTo(
                        rhs.LinkedDoors
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NavigationMapInfo_FieldIndex.Island) ?? true))
            {
                errorMask?.PushIndex((int)NavigationMapInfo_FieldIndex.Island);
                try
                {
                    if(rhs.Island is {} rhsIsland)
                    {
                        item.Island = rhsIsland.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)NavigationMapInfo_FieldIndex.Island));
                    }
                    else
                    {
                        item.Island = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NavigationMapInfo_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
            if ((copyMask?.GetShouldTranslate((int)NavigationMapInfo_FieldIndex.Parent) ?? true))
            {
                errorMask?.PushIndex((int)NavigationMapInfo_FieldIndex.Parent);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)NavigationMapInfo_FieldIndex.Parent) ?? true))
                    {
                        item.Parent = rhs.Parent.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)NavigationMapInfo_FieldIndex.Parent),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public NavigationMapInfo DeepCopy(
            INavigationMapInfoGetter item,
            NavigationMapInfo.TranslationMask? copyMask = null)
        {
            NavigationMapInfo ret = (NavigationMapInfo)((NavigationMapInfoCommon)((INavigationMapInfoGetter)item).CommonInstance()!).GetNew();
            ((NavigationMapInfoSetterTranslationCommon)((INavigationMapInfoGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public NavigationMapInfo DeepCopy(
            INavigationMapInfoGetter item,
            out NavigationMapInfo.ErrorMask errorMask,
            NavigationMapInfo.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            NavigationMapInfo ret = (NavigationMapInfo)((NavigationMapInfoCommon)((INavigationMapInfoGetter)item).CommonInstance()!).GetNew();
            ((NavigationMapInfoSetterTranslationCommon)((INavigationMapInfoGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = NavigationMapInfo.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public NavigationMapInfo DeepCopy(
            INavigationMapInfoGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            NavigationMapInfo ret = (NavigationMapInfo)((NavigationMapInfoCommon)((INavigationMapInfoGetter)item).CommonInstance()!).GetNew();
            ((NavigationMapInfoSetterTranslationCommon)((INavigationMapInfoGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class NavigationMapInfo
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NavigationMapInfo_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => NavigationMapInfo_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NavigationMapInfoCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return NavigationMapInfoSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NavigationMapInfoSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INavigationMapInfoGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object INavigationMapInfoGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object INavigationMapInfoGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class NavigationMapInfoBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly NavigationMapInfoBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            INavigationMapInfoGetter item,
            MutagenWriter writer)
        {
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.NavigationMesh);
            writer.Write(item.Unknown);
            P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Point);
            writer.Write(item.PreferredMergesFlag);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<INavigationMeshGetter>>.Instance.Write(
                writer: writer,
                items: item.MergedTo,
                countLengthLength: 4,
                transl: (MutagenWriter subWriter, IFormLinkGetter<INavigationMeshGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<INavigationMeshGetter>>.Instance.Write(
                writer: writer,
                items: item.PreferredMerges,
                countLengthLength: 4,
                transl: (MutagenWriter subWriter, IFormLinkGetter<INavigationMeshGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILinkedDoorGetter>.Instance.Write(
                writer: writer,
                items: item.LinkedDoors,
                countLengthLength: 4,
                transl: (MutagenWriter subWriter, ILinkedDoorGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LinkedDoorBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            NavigationMapInfoBinaryWriteTranslation.WriteBinaryIsland(
                writer: writer,
                item: item);
            writer.Write(item.Unknown2);
            NavigationMapInfoBinaryWriteTranslation.WriteBinaryParentParseLogic(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryIslandCustom(
            MutagenWriter writer,
            INavigationMapInfoGetter item);

        public static void WriteBinaryIsland(
            MutagenWriter writer,
            INavigationMapInfoGetter item)
        {
            WriteBinaryIslandCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryParentParseLogicCustom(
            MutagenWriter writer,
            INavigationMapInfoGetter item);

        public static void WriteBinaryParentParseLogic(
            MutagenWriter writer,
            INavigationMapInfoGetter item)
        {
            WriteBinaryParentParseLogicCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            INavigationMapInfoGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.NVMI),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (INavigationMapInfoGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class NavigationMapInfoBinaryCreateTranslation
    {
        public static readonly NavigationMapInfoBinaryCreateTranslation Instance = new NavigationMapInfoBinaryCreateTranslation();

        public static void FillBinaryStructs(
            INavigationMapInfo item,
            MutagenFrame frame)
        {
            item.NavigationMesh.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.Unknown = frame.ReadInt32();
            item.Point = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.PreferredMergesFlag = frame.ReadUInt32();
            item.MergedTo.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<INavigationMeshGetter>>.Instance.Parse(
                    amount: frame.ReadInt32(),
                    reader: frame,
                    transl: FormLinkBinaryTranslation.Instance.Parse));
            item.PreferredMerges.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<INavigationMeshGetter>>.Instance.Parse(
                    amount: frame.ReadInt32(),
                    reader: frame,
                    transl: FormLinkBinaryTranslation.Instance.Parse));
            item.LinkedDoors.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LinkedDoor>.Instance.Parse(
                    amount: frame.ReadInt32(),
                    reader: frame,
                    transl: LinkedDoor.TryCreateFromBinary));
            if (frame.Complete) return;
            NavigationMapInfoBinaryCreateTranslation.FillBinaryIslandCustom(
                frame: frame,
                item: item);
            item.Unknown2 = frame.ReadInt32();
            NavigationMapInfoBinaryCreateTranslation.FillBinaryParentParseLogicCustom(
                frame: frame,
                item: item);
        }

        public static partial void FillBinaryIslandCustom(
            MutagenFrame frame,
            INavigationMapInfo item);

        public static partial void FillBinaryParentParseLogicCustom(
            MutagenFrame frame,
            INavigationMapInfo item);

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class NavigationMapInfoBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this INavigationMapInfoGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NavigationMapInfoBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class NavigationMapInfoBinaryOverlay :
        PluginBinaryOverlay,
        INavigationMapInfoGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NavigationMapInfo_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => NavigationMapInfo_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NavigationMapInfoCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NavigationMapInfoSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INavigationMapInfoGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? INavigationMapInfoGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object INavigationMapInfoGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => NavigationMapInfoCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NavigationMapInfoBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NavigationMapInfoBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public IFormLinkGetter<INavigationMeshGetter> NavigationMesh => FormLinkBinaryTranslation.Instance.OverlayFactory<INavigationMeshGetter>(_package, _structData.Span.Slice(0x0, 0x4));
        public Int32 Unknown => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0x4, 0x4));
        public P3Float Point => P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_structData.Slice(0x8, 0xC));
        public UInt32 PreferredMergesFlag => BinaryPrimitives.ReadUInt32LittleEndian(_structData.Slice(0x14, 0x4));
        #region MergedTo
        public IReadOnlyList<IFormLinkGetter<INavigationMeshGetter>> MergedTo => BinaryOverlayList.FactoryByCountLength<IFormLinkGetter<INavigationMeshGetter>>(_structData.Slice(0x18), _package, 4, countLength: 4, (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<INavigationMeshGetter>(p, s));
        protected int MergedToEndingPos;
        #endregion
        #region PreferredMerges
        public IReadOnlyList<IFormLinkGetter<INavigationMeshGetter>> PreferredMerges => BinaryOverlayList.FactoryByCountLength<IFormLinkGetter<INavigationMeshGetter>>(_structData.Slice(MergedToEndingPos), _package, 4, countLength: 4, (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<INavigationMeshGetter>(p, s));
        protected int PreferredMergesEndingPos;
        #endregion
        #region LinkedDoors
        public IReadOnlyList<ILinkedDoorGetter> LinkedDoors => BinaryOverlayList.FactoryByCountLength<ILinkedDoorGetter>(_structData.Slice(PreferredMergesEndingPos), _package, 8, countLength: 4, (s, p) => LinkedDoorBinaryOverlay.LinkedDoorFactory(s, p));
        protected int LinkedDoorsEndingPos;
        #endregion
        #region Island
        public partial IIslandDataGetter? GetIslandCustom(int location);
        public IIslandDataGetter? Island => GetIslandCustom(location: LinkedDoorsEndingPos);
        protected int IslandEndingPos;
        partial void CustomIslandEndPos();
        #endregion
        public Int32 Unknown2 => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(IslandEndingPos, 0x4));
        #region ParentParseLogic
        partial void ParentParseLogicCustomParse(
            OverlayStream stream,
            int offset);
        protected int ParentParseLogicEndingPos;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NavigationMapInfoBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static void NavigationMapInfoParseEndingPositions(
            NavigationMapInfoBinaryOverlay ret,
            BinaryOverlayFactoryPackage package)
        {
            ret.MergedToEndingPos = 0x18 + BinaryPrimitives.ReadInt32LittleEndian(ret._structData.Slice(0x18)) * 4 + 4;
            ret.PreferredMergesEndingPos = ret.MergedToEndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._structData.Slice(ret.MergedToEndingPos)) * 4 + 4;
            ret.LinkedDoorsEndingPos = ret.PreferredMergesEndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._structData.Slice(ret.PreferredMergesEndingPos)) * 8 + 4;
            ret.CustomIslandEndPos();
        }

        public static INavigationMapInfoGetter NavigationMapInfoFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new NavigationMapInfoBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            NavigationMapInfoParseEndingPositions(ret, package);
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static INavigationMapInfoGetter NavigationMapInfoFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return NavigationMapInfoFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NavigationMapInfoMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INavigationMapInfoGetter rhs) return false;
            return ((NavigationMapInfoCommon)((INavigationMapInfoGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INavigationMapInfoGetter? obj)
        {
            return ((NavigationMapInfoCommon)((INavigationMapInfoGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NavigationMapInfoCommon)((INavigationMapInfoGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

