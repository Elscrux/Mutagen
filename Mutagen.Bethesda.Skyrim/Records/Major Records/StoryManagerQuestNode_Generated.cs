/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.RecordTypeMapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class StoryManagerQuestNode :
        AStoryManagerNode,
        IEquatable<IStoryManagerQuestNodeGetter>,
        ILoquiObjectSetter<StoryManagerQuestNode>,
        IStoryManagerQuestNodeInternal
    {
        #region Ctor
        protected StoryManagerQuestNode()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Flags
        public StoryManagerQuestNode.QuestFlag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        StoryManagerQuestNode.QuestFlag? IStoryManagerQuestNodeGetter.Flags => this.Flags;
        #endregion
        #region MaxConcurrentQuests
        public UInt32? MaxConcurrentQuests { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IStoryManagerQuestNodeGetter.MaxConcurrentQuests => this.MaxConcurrentQuests;
        #endregion
        #region MaxNumQuestsToRun
        public UInt32? MaxNumQuestsToRun { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IStoryManagerQuestNodeGetter.MaxNumQuestsToRun => this.MaxNumQuestsToRun;
        #endregion
        #region Quests
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<StoryManagerQuest> _Quests = new ExtendedList<StoryManagerQuest>();
        public ExtendedList<StoryManagerQuest> Quests
        {
            get => this._Quests;
            init => this._Quests = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IStoryManagerQuestGetter> IStoryManagerQuestNodeGetter.Quests => _Quests;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            StoryManagerQuestNodeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AStoryManagerNode.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Flags = initialValue;
                this.MaxConcurrentQuests = initialValue;
                this.MaxNumQuestsToRun = initialValue;
                this.Quests = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, StoryManagerQuest.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, StoryManagerQuest.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Parent,
                TItem PreviousSibling,
                TItem Conditions,
                TItem Flags,
                TItem MaxConcurrentQuests,
                TItem MaxNumQuestsToRun,
                TItem Quests)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                Parent: Parent,
                PreviousSibling: PreviousSibling,
                Conditions: Conditions)
            {
                this.Flags = Flags;
                this.MaxConcurrentQuests = MaxConcurrentQuests;
                this.MaxNumQuestsToRun = MaxNumQuestsToRun;
                this.Quests = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, StoryManagerQuest.Mask<TItem>?>>?>(Quests, Enumerable.Empty<MaskItemIndexed<TItem, StoryManagerQuest.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Flags;
            public TItem MaxConcurrentQuests;
            public TItem MaxNumQuestsToRun;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, StoryManagerQuest.Mask<TItem>?>>?>? Quests;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.MaxConcurrentQuests, rhs.MaxConcurrentQuests)) return false;
                if (!object.Equals(this.MaxNumQuestsToRun, rhs.MaxNumQuestsToRun)) return false;
                if (!object.Equals(this.Quests, rhs.Quests)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Flags);
                hash.Add(this.MaxConcurrentQuests);
                hash.Add(this.MaxNumQuestsToRun);
                hash.Add(this.Quests);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.MaxConcurrentQuests)) return false;
                if (!eval(this.MaxNumQuestsToRun)) return false;
                if (this.Quests != null)
                {
                    if (!eval(this.Quests.Overall)) return false;
                    if (this.Quests.Specific != null)
                    {
                        foreach (var item in this.Quests.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.MaxConcurrentQuests)) return true;
                if (eval(this.MaxNumQuestsToRun)) return true;
                if (this.Quests != null)
                {
                    if (eval(this.Quests.Overall)) return true;
                    if (this.Quests.Specific != null)
                    {
                        foreach (var item in this.Quests.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new StoryManagerQuestNode.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Flags = eval(this.Flags);
                obj.MaxConcurrentQuests = eval(this.MaxConcurrentQuests);
                obj.MaxNumQuestsToRun = eval(this.MaxNumQuestsToRun);
                if (Quests != null)
                {
                    obj.Quests = new MaskItem<R, IEnumerable<MaskItemIndexed<R, StoryManagerQuest.Mask<R>?>>?>(eval(this.Quests.Overall), Enumerable.Empty<MaskItemIndexed<R, StoryManagerQuest.Mask<R>?>>());
                    if (Quests.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, StoryManagerQuest.Mask<R>?>>();
                        obj.Quests.Specific = l;
                        foreach (var item in Quests.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, StoryManagerQuest.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, StoryManagerQuest.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(StoryManagerQuestNode.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, StoryManagerQuestNode.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(StoryManagerQuestNode.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.MaxConcurrentQuests ?? true)
                    {
                        fg.AppendItem(MaxConcurrentQuests, "MaxConcurrentQuests");
                    }
                    if (printMask?.MaxNumQuestsToRun ?? true)
                    {
                        fg.AppendItem(MaxNumQuestsToRun, "MaxNumQuestsToRun");
                    }
                    if ((printMask?.Quests?.Overall ?? true)
                        && Quests is {} QuestsItem)
                    {
                        fg.AppendLine("Quests =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(QuestsItem.Overall);
                            if (QuestsItem.Specific != null)
                            {
                                foreach (var subItem in QuestsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            AStoryManagerNode.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Flags;
            public Exception? MaxConcurrentQuests;
            public Exception? MaxNumQuestsToRun;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, StoryManagerQuest.ErrorMask?>>?>? Quests;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                StoryManagerQuestNode_FieldIndex enu = (StoryManagerQuestNode_FieldIndex)index;
                switch (enu)
                {
                    case StoryManagerQuestNode_FieldIndex.Flags:
                        return Flags;
                    case StoryManagerQuestNode_FieldIndex.MaxConcurrentQuests:
                        return MaxConcurrentQuests;
                    case StoryManagerQuestNode_FieldIndex.MaxNumQuestsToRun:
                        return MaxNumQuestsToRun;
                    case StoryManagerQuestNode_FieldIndex.Quests:
                        return Quests;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                StoryManagerQuestNode_FieldIndex enu = (StoryManagerQuestNode_FieldIndex)index;
                switch (enu)
                {
                    case StoryManagerQuestNode_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case StoryManagerQuestNode_FieldIndex.MaxConcurrentQuests:
                        this.MaxConcurrentQuests = ex;
                        break;
                    case StoryManagerQuestNode_FieldIndex.MaxNumQuestsToRun:
                        this.MaxNumQuestsToRun = ex;
                        break;
                    case StoryManagerQuestNode_FieldIndex.Quests:
                        this.Quests = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, StoryManagerQuest.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                StoryManagerQuestNode_FieldIndex enu = (StoryManagerQuestNode_FieldIndex)index;
                switch (enu)
                {
                    case StoryManagerQuestNode_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case StoryManagerQuestNode_FieldIndex.MaxConcurrentQuests:
                        this.MaxConcurrentQuests = (Exception?)obj;
                        break;
                    case StoryManagerQuestNode_FieldIndex.MaxNumQuestsToRun:
                        this.MaxNumQuestsToRun = (Exception?)obj;
                        break;
                    case StoryManagerQuestNode_FieldIndex.Quests:
                        this.Quests = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, StoryManagerQuest.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Flags != null) return true;
                if (MaxConcurrentQuests != null) return true;
                if (MaxNumQuestsToRun != null) return true;
                if (Quests != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(MaxConcurrentQuests, "MaxConcurrentQuests");
                fg.AppendItem(MaxNumQuestsToRun, "MaxNumQuestsToRun");
                if (Quests is {} QuestsItem)
                {
                    fg.AppendLine("Quests =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(QuestsItem.Overall);
                        if (QuestsItem.Specific != null)
                        {
                            foreach (var subItem in QuestsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.MaxConcurrentQuests = this.MaxConcurrentQuests.Combine(rhs.MaxConcurrentQuests);
                ret.MaxNumQuestsToRun = this.MaxNumQuestsToRun.Combine(rhs.MaxNumQuestsToRun);
                ret.Quests = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, StoryManagerQuest.ErrorMask?>>?>(ExceptionExt.Combine(this.Quests?.Overall, rhs.Quests?.Overall), ExceptionExt.Combine(this.Quests?.Specific, rhs.Quests?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AStoryManagerNode.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Flags;
            public bool MaxConcurrentQuests;
            public bool MaxNumQuestsToRun;
            public StoryManagerQuest.TranslationMask? Quests;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Flags = defaultOn;
                this.MaxConcurrentQuests = defaultOn;
                this.MaxNumQuestsToRun = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Flags, null));
                ret.Add((MaxConcurrentQuests, null));
                ret.Add((MaxNumQuestsToRun, null));
                ret.Add((Quests == null ? DefaultOn : !Quests.GetCrystal().CopyNothing, Quests?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = StoryManagerQuestNode_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => StoryManagerQuestNodeCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => StoryManagerQuestNodeSetterCommon.Instance.RemapLinks(this, mapping);
        public StoryManagerQuestNode(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private StoryManagerQuestNode(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal StoryManagerQuestNode(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public StoryManagerQuestNode(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public StoryManagerQuestNode(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<StoryManagerQuestNode>.ToString(this);
        }

        protected override Type LinkType => typeof(IStoryManagerQuestNode);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IStoryManagerQuestNodeGetter rhs) return false;
            return ((StoryManagerQuestNodeCommon)((IStoryManagerQuestNodeGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IStoryManagerQuestNodeGetter? obj)
        {
            return ((StoryManagerQuestNodeCommon)((IStoryManagerQuestNodeGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((StoryManagerQuestNodeCommon)((IStoryManagerQuestNodeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => StoryManagerQuestNodeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((StoryManagerQuestNodeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static StoryManagerQuestNode CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new StoryManagerQuestNode();
            ((StoryManagerQuestNodeSetterCommon)((IStoryManagerQuestNodeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out StoryManagerQuestNode item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((StoryManagerQuestNodeSetterCommon)((IStoryManagerQuestNodeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new StoryManagerQuestNode GetNew()
        {
            return new StoryManagerQuestNode();
        }

    }
    #endregion

    #region Interface
    public partial interface IStoryManagerQuestNode :
        IAStoryManagerNodeInternal,
        IFormLinkContainer,
        ILoquiObjectSetter<IStoryManagerQuestNodeInternal>,
        IStoryManagerQuestNodeGetter
    {
        new StoryManagerQuestNode.QuestFlag? Flags { get; set; }
        new UInt32? MaxConcurrentQuests { get; set; }
        new UInt32? MaxNumQuestsToRun { get; set; }
        new ExtendedList<StoryManagerQuest> Quests { get; }
    }

    public partial interface IStoryManagerQuestNodeInternal :
        IAStoryManagerNodeInternal,
        IStoryManagerQuestNode,
        IStoryManagerQuestNodeGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.SMQN)]
    public partial interface IStoryManagerQuestNodeGetter :
        IAStoryManagerNodeGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IStoryManagerQuestNodeGetter>,
        IMapsToGetter<IStoryManagerQuestNodeGetter>
    {
        static new ILoquiRegistration StaticRegistration => StoryManagerQuestNode_Registration.Instance;
        StoryManagerQuestNode.QuestFlag? Flags { get; }
        UInt32? MaxConcurrentQuests { get; }
        UInt32? MaxNumQuestsToRun { get; }
        IReadOnlyList<IStoryManagerQuestGetter> Quests { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class StoryManagerQuestNodeMixIn
    {
        public static void Clear(this IStoryManagerQuestNodeInternal item)
        {
            ((StoryManagerQuestNodeSetterCommon)((IStoryManagerQuestNodeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static StoryManagerQuestNode.Mask<bool> GetEqualsMask(
            this IStoryManagerQuestNodeGetter item,
            IStoryManagerQuestNodeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((StoryManagerQuestNodeCommon)((IStoryManagerQuestNodeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IStoryManagerQuestNodeGetter item,
            string? name = null,
            StoryManagerQuestNode.Mask<bool>? printMask = null)
        {
            return ((StoryManagerQuestNodeCommon)((IStoryManagerQuestNodeGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IStoryManagerQuestNodeGetter item,
            FileGeneration fg,
            string? name = null,
            StoryManagerQuestNode.Mask<bool>? printMask = null)
        {
            ((StoryManagerQuestNodeCommon)((IStoryManagerQuestNodeGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IStoryManagerQuestNodeGetter item,
            IStoryManagerQuestNodeGetter rhs,
            StoryManagerQuestNode.TranslationMask? equalsMask = null)
        {
            return ((StoryManagerQuestNodeCommon)((IStoryManagerQuestNodeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IStoryManagerQuestNodeInternal lhs,
            IStoryManagerQuestNodeGetter rhs,
            out StoryManagerQuestNode.ErrorMask errorMask,
            StoryManagerQuestNode.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((StoryManagerQuestNodeSetterTranslationCommon)((IStoryManagerQuestNodeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = StoryManagerQuestNode.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IStoryManagerQuestNodeInternal lhs,
            IStoryManagerQuestNodeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((StoryManagerQuestNodeSetterTranslationCommon)((IStoryManagerQuestNodeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static StoryManagerQuestNode DeepCopy(
            this IStoryManagerQuestNodeGetter item,
            StoryManagerQuestNode.TranslationMask? copyMask = null)
        {
            return ((StoryManagerQuestNodeSetterTranslationCommon)((IStoryManagerQuestNodeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static StoryManagerQuestNode DeepCopy(
            this IStoryManagerQuestNodeGetter item,
            out StoryManagerQuestNode.ErrorMask errorMask,
            StoryManagerQuestNode.TranslationMask? copyMask = null)
        {
            return ((StoryManagerQuestNodeSetterTranslationCommon)((IStoryManagerQuestNodeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static StoryManagerQuestNode DeepCopy(
            this IStoryManagerQuestNodeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((StoryManagerQuestNodeSetterTranslationCommon)((IStoryManagerQuestNodeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static StoryManagerQuestNode Duplicate(
            this IStoryManagerQuestNodeGetter item,
            FormKey formKey,
            StoryManagerQuestNode.TranslationMask? copyMask = null)
        {
            return ((StoryManagerQuestNodeCommon)((IStoryManagerQuestNodeGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IStoryManagerQuestNodeInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((StoryManagerQuestNodeSetterCommon)((IStoryManagerQuestNodeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum StoryManagerQuestNode_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Parent = 6,
        PreviousSibling = 7,
        Conditions = 8,
        Flags = 9,
        MaxConcurrentQuests = 10,
        MaxNumQuestsToRun = 11,
        Quests = 12,
    }
    #endregion

    #region Registration
    public partial class StoryManagerQuestNode_Registration : ILoquiRegistration
    {
        public static readonly StoryManagerQuestNode_Registration Instance = new StoryManagerQuestNode_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 455,
            version: 0);

        public const string GUID = "2f1031e5-dcff-4f22-aad3-7472e3300692";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 13;

        public static readonly Type MaskType = typeof(StoryManagerQuestNode.Mask<>);

        public static readonly Type ErrorMaskType = typeof(StoryManagerQuestNode.ErrorMask);

        public static readonly Type ClassType = typeof(StoryManagerQuestNode);

        public static readonly Type GetterType = typeof(IStoryManagerQuestNodeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IStoryManagerQuestNode);

        public static readonly Type? InternalSetterType = typeof(IStoryManagerQuestNodeInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.StoryManagerQuestNode";

        public const string Name = "StoryManagerQuestNode";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.SMQN;
        public static readonly Type BinaryWriteTranslation = typeof(StoryManagerQuestNodeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class StoryManagerQuestNodeSetterCommon : AStoryManagerNodeSetterCommon
    {
        public new static readonly StoryManagerQuestNodeSetterCommon Instance = new StoryManagerQuestNodeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IStoryManagerQuestNodeInternal item)
        {
            ClearPartial();
            item.Flags = default;
            item.MaxConcurrentQuests = default;
            item.MaxNumQuestsToRun = default;
            item.Quests.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IAStoryManagerNodeInternal item)
        {
            Clear(item: (IStoryManagerQuestNodeInternal)item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IStoryManagerQuestNodeInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IStoryManagerQuestNodeInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IStoryManagerQuestNode obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Quests.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IStoryManagerQuestNodeInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.MajorRecordParse<IStoryManagerQuestNodeInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: StoryManagerQuestNodeBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: StoryManagerQuestNodeBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAStoryManagerNodeInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (StoryManagerQuestNode)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (StoryManagerQuestNode)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (StoryManagerQuestNode)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    public partial class StoryManagerQuestNodeCommon : AStoryManagerNodeCommon
    {
        public new static readonly StoryManagerQuestNodeCommon Instance = new StoryManagerQuestNodeCommon();

        public StoryManagerQuestNode.Mask<bool> GetEqualsMask(
            IStoryManagerQuestNodeGetter item,
            IStoryManagerQuestNodeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new StoryManagerQuestNode.Mask<bool>(false);
            ((StoryManagerQuestNodeCommon)((IStoryManagerQuestNodeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IStoryManagerQuestNodeGetter item,
            IStoryManagerQuestNodeGetter rhs,
            StoryManagerQuestNode.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Flags = item.Flags == rhs.Flags;
            ret.MaxConcurrentQuests = item.MaxConcurrentQuests == rhs.MaxConcurrentQuests;
            ret.MaxNumQuestsToRun = item.MaxNumQuestsToRun == rhs.MaxNumQuestsToRun;
            ret.Quests = item.Quests.CollectionEqualsHelper(
                rhs.Quests,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IStoryManagerQuestNodeGetter item,
            string? name = null,
            StoryManagerQuestNode.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IStoryManagerQuestNodeGetter item,
            FileGeneration fg,
            string? name = null,
            StoryManagerQuestNode.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"StoryManagerQuestNode =>");
            }
            else
            {
                fg.AppendLine($"{name} (StoryManagerQuestNode) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IStoryManagerQuestNodeGetter item,
            FileGeneration fg,
            StoryManagerQuestNode.Mask<bool>? printMask = null)
        {
            AStoryManagerNodeCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Flags ?? true)
                && item.Flags is {} FlagsItem)
            {
                fg.AppendItem(FlagsItem, "Flags");
            }
            if ((printMask?.MaxConcurrentQuests ?? true)
                && item.MaxConcurrentQuests is {} MaxConcurrentQuestsItem)
            {
                fg.AppendItem(MaxConcurrentQuestsItem, "MaxConcurrentQuests");
            }
            if ((printMask?.MaxNumQuestsToRun ?? true)
                && item.MaxNumQuestsToRun is {} MaxNumQuestsToRunItem)
            {
                fg.AppendItem(MaxNumQuestsToRunItem, "MaxNumQuestsToRun");
            }
            if (printMask?.Quests?.Overall ?? true)
            {
                fg.AppendLine("Quests =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Quests)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public static StoryManagerQuestNode_FieldIndex ConvertFieldIndex(AStoryManagerNode_FieldIndex index)
        {
            switch (index)
            {
                case AStoryManagerNode_FieldIndex.MajorRecordFlagsRaw:
                    return (StoryManagerQuestNode_FieldIndex)((int)index);
                case AStoryManagerNode_FieldIndex.FormKey:
                    return (StoryManagerQuestNode_FieldIndex)((int)index);
                case AStoryManagerNode_FieldIndex.VersionControl:
                    return (StoryManagerQuestNode_FieldIndex)((int)index);
                case AStoryManagerNode_FieldIndex.EditorID:
                    return (StoryManagerQuestNode_FieldIndex)((int)index);
                case AStoryManagerNode_FieldIndex.FormVersion:
                    return (StoryManagerQuestNode_FieldIndex)((int)index);
                case AStoryManagerNode_FieldIndex.Version2:
                    return (StoryManagerQuestNode_FieldIndex)((int)index);
                case AStoryManagerNode_FieldIndex.Parent:
                    return (StoryManagerQuestNode_FieldIndex)((int)index);
                case AStoryManagerNode_FieldIndex.PreviousSibling:
                    return (StoryManagerQuestNode_FieldIndex)((int)index);
                case AStoryManagerNode_FieldIndex.Conditions:
                    return (StoryManagerQuestNode_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new StoryManagerQuestNode_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (StoryManagerQuestNode_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (StoryManagerQuestNode_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (StoryManagerQuestNode_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (StoryManagerQuestNode_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (StoryManagerQuestNode_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (StoryManagerQuestNode_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new StoryManagerQuestNode_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (StoryManagerQuestNode_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (StoryManagerQuestNode_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (StoryManagerQuestNode_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (StoryManagerQuestNode_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IStoryManagerQuestNodeGetter? lhs,
            IStoryManagerQuestNodeGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAStoryManagerNodeGetter)lhs, (IAStoryManagerNodeGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)StoryManagerQuestNode_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((crystal?.GetShouldTranslate((int)StoryManagerQuestNode_FieldIndex.MaxConcurrentQuests) ?? true))
            {
                if (lhs.MaxConcurrentQuests != rhs.MaxConcurrentQuests) return false;
            }
            if ((crystal?.GetShouldTranslate((int)StoryManagerQuestNode_FieldIndex.MaxNumQuestsToRun) ?? true))
            {
                if (lhs.MaxNumQuestsToRun != rhs.MaxNumQuestsToRun) return false;
            }
            if ((crystal?.GetShouldTranslate((int)StoryManagerQuestNode_FieldIndex.Quests) ?? true))
            {
                if (!lhs.Quests.SequenceEqualNullable(rhs.Quests)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAStoryManagerNodeGetter? lhs,
            IAStoryManagerNodeGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IStoryManagerQuestNodeGetter?)lhs,
                rhs: rhs as IStoryManagerQuestNodeGetter,
                crystal: crystal);
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IStoryManagerQuestNodeGetter?)lhs,
                rhs: rhs as IStoryManagerQuestNodeGetter,
                crystal: crystal);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IStoryManagerQuestNodeGetter?)lhs,
                rhs: rhs as IStoryManagerQuestNodeGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(IStoryManagerQuestNodeGetter item)
        {
            var hash = new HashCode();
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            if (item.MaxConcurrentQuests is {} MaxConcurrentQuestsitem)
            {
                hash.Add(MaxConcurrentQuestsitem);
            }
            if (item.MaxNumQuestsToRun is {} MaxNumQuestsToRunitem)
            {
                hash.Add(MaxNumQuestsToRunitem);
            }
            hash.Add(item.Quests);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAStoryManagerNodeGetter item)
        {
            return GetHashCode(item: (IStoryManagerQuestNodeGetter)item);
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IStoryManagerQuestNodeGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IStoryManagerQuestNodeGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return StoryManagerQuestNode.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IStoryManagerQuestNodeGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Quests.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public StoryManagerQuestNode Duplicate(
            IStoryManagerQuestNodeGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new StoryManagerQuestNode(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override AStoryManagerNode Duplicate(
            IAStoryManagerNodeGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IStoryManagerQuestNodeGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IStoryManagerQuestNodeGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IStoryManagerQuestNodeGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class StoryManagerQuestNodeSetterTranslationCommon : AStoryManagerNodeSetterTranslationCommon
    {
        public new static readonly StoryManagerQuestNodeSetterTranslationCommon Instance = new StoryManagerQuestNodeSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IStoryManagerQuestNodeInternal item,
            IStoryManagerQuestNodeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IStoryManagerQuestNode item,
            IStoryManagerQuestNodeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAStoryManagerNode)item,
                (IAStoryManagerNodeGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)StoryManagerQuestNode_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)StoryManagerQuestNode_FieldIndex.MaxConcurrentQuests) ?? true))
            {
                item.MaxConcurrentQuests = rhs.MaxConcurrentQuests;
            }
            if ((copyMask?.GetShouldTranslate((int)StoryManagerQuestNode_FieldIndex.MaxNumQuestsToRun) ?? true))
            {
                item.MaxNumQuestsToRun = rhs.MaxNumQuestsToRun;
            }
            if ((copyMask?.GetShouldTranslate((int)StoryManagerQuestNode_FieldIndex.Quests) ?? true))
            {
                errorMask?.PushIndex((int)StoryManagerQuestNode_FieldIndex.Quests);
                try
                {
                    item.Quests.SetTo(
                        rhs.Quests
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IAStoryManagerNodeInternal item,
            IAStoryManagerNodeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IStoryManagerQuestNodeInternal)item,
                rhs: (IStoryManagerQuestNodeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IAStoryManagerNode item,
            IAStoryManagerNodeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IStoryManagerQuestNode)item,
                rhs: (IStoryManagerQuestNodeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IStoryManagerQuestNodeInternal)item,
                rhs: (IStoryManagerQuestNodeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IStoryManagerQuestNode)item,
                rhs: (IStoryManagerQuestNodeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IStoryManagerQuestNodeInternal)item,
                rhs: (IStoryManagerQuestNodeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IStoryManagerQuestNode)item,
                rhs: (IStoryManagerQuestNodeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public StoryManagerQuestNode DeepCopy(
            IStoryManagerQuestNodeGetter item,
            StoryManagerQuestNode.TranslationMask? copyMask = null)
        {
            StoryManagerQuestNode ret = (StoryManagerQuestNode)((StoryManagerQuestNodeCommon)((IStoryManagerQuestNodeGetter)item).CommonInstance()!).GetNew();
            ((StoryManagerQuestNodeSetterTranslationCommon)((IStoryManagerQuestNodeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public StoryManagerQuestNode DeepCopy(
            IStoryManagerQuestNodeGetter item,
            out StoryManagerQuestNode.ErrorMask errorMask,
            StoryManagerQuestNode.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            StoryManagerQuestNode ret = (StoryManagerQuestNode)((StoryManagerQuestNodeCommon)((IStoryManagerQuestNodeGetter)item).CommonInstance()!).GetNew();
            ((StoryManagerQuestNodeSetterTranslationCommon)((IStoryManagerQuestNodeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = StoryManagerQuestNode.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public StoryManagerQuestNode DeepCopy(
            IStoryManagerQuestNodeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            StoryManagerQuestNode ret = (StoryManagerQuestNode)((StoryManagerQuestNodeCommon)((IStoryManagerQuestNodeGetter)item).CommonInstance()!).GetNew();
            ((StoryManagerQuestNodeSetterTranslationCommon)((IStoryManagerQuestNodeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class StoryManagerQuestNode
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => StoryManagerQuestNode_Registration.Instance;
        public new static StoryManagerQuestNode_Registration StaticRegistration => StoryManagerQuestNode_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => StoryManagerQuestNodeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return StoryManagerQuestNodeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => StoryManagerQuestNodeSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class StoryManagerQuestNodeBinaryWriteTranslation :
        AStoryManagerNodeBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static StoryManagerQuestNodeBinaryWriteTranslation Instance = new StoryManagerQuestNodeBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IStoryManagerQuestNodeGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            AStoryManagerNodeBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            EnumBinaryTranslation<StoryManagerQuestNode.QuestFlag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM));
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.MaxConcurrentQuests,
                header: translationParams.ConvertToCustom(RecordTypes.XNAM));
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.MaxNumQuestsToRun,
                header: translationParams.ConvertToCustom(RecordTypes.MNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IStoryManagerQuestGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Quests,
                counterType: RecordTypes.QNAM,
                counterLength: 4,
                transl: (MutagenWriter subWriter, IStoryManagerQuestGetter subItem, TypedWriteParams? conv) =>
                {
                    var Item = subItem;
                    ((StoryManagerQuestBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IStoryManagerQuestNodeGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Record(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.SMQN)))
            {
                try
                {
                    SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        translationParams: translationParams);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Enrich(ex, item);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IStoryManagerQuestNodeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IAStoryManagerNodeGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IStoryManagerQuestNodeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IStoryManagerQuestNodeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IStoryManagerQuestNodeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class StoryManagerQuestNodeBinaryCreateTranslation : AStoryManagerNodeBinaryCreateTranslation
    {
        public new readonly static StoryManagerQuestNodeBinaryCreateTranslation Instance = new StoryManagerQuestNodeBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.SMQN;
        public static void FillBinaryStructs(
            IStoryManagerQuestNodeInternal item,
            MutagenFrame frame)
        {
            AStoryManagerNodeBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IStoryManagerQuestNodeInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<StoryManagerQuestNode.QuestFlag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)StoryManagerQuestNode_FieldIndex.Flags;
                }
                case RecordTypeInts.XNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MaxConcurrentQuests = frame.ReadUInt32();
                    return (int)StoryManagerQuestNode_FieldIndex.MaxConcurrentQuests;
                }
                case RecordTypeInts.MNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MaxNumQuestsToRun = frame.ReadUInt32();
                    return (int)StoryManagerQuestNode_FieldIndex.MaxNumQuestsToRun;
                }
                case RecordTypeInts.NNAM:
                case RecordTypeInts.FNAM:
                case RecordTypeInts.RNAM:
                case RecordTypeInts.QNAM:
                {
                    item.Quests.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<StoryManagerQuest>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.QNAM,
                            triggeringRecord: StoryManagerQuest_Registration.TriggeringRecordTypes,
                            translationParams: translationParams,
                            transl: StoryManagerQuest.TryCreateFromBinary));
                    return (int)StoryManagerQuestNode_FieldIndex.Quests;
                }
                default:
                    return AStoryManagerNodeBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class StoryManagerQuestNodeBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class StoryManagerQuestNodeBinaryOverlay :
        AStoryManagerNodeBinaryOverlay,
        IStoryManagerQuestNodeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => StoryManagerQuestNode_Registration.Instance;
        public new static StoryManagerQuestNode_Registration StaticRegistration => StoryManagerQuestNode_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => StoryManagerQuestNodeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => StoryManagerQuestNodeSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => StoryManagerQuestNodeCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => StoryManagerQuestNodeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((StoryManagerQuestNodeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IStoryManagerQuestNode);


        #region Flags
        private int? _FlagsLocation;
        public StoryManagerQuestNode.QuestFlag? Flags => _FlagsLocation.HasValue ? (StoryManagerQuestNode.QuestFlag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(StoryManagerQuestNode.QuestFlag?);
        #endregion
        #region MaxConcurrentQuests
        private int? _MaxConcurrentQuestsLocation;
        public UInt32? MaxConcurrentQuests => _MaxConcurrentQuestsLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _MaxConcurrentQuestsLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region MaxNumQuestsToRun
        private int? _MaxNumQuestsToRunLocation;
        public UInt32? MaxNumQuestsToRun => _MaxNumQuestsToRunLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _MaxNumQuestsToRunLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        public IReadOnlyList<IStoryManagerQuestGetter> Quests { get; private set; } = ListExt.Empty<StoryManagerQuestBinaryOverlay>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected StoryManagerQuestNodeBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static StoryManagerQuestNodeBinaryOverlay StoryManagerQuestNodeFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            stream = PluginUtilityTranslation.DecompressStream(stream);
            var ret = new StoryManagerQuestNodeBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static StoryManagerQuestNodeBinaryOverlay StoryManagerQuestNodeFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return StoryManagerQuestNodeFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DNAM:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)StoryManagerQuestNode_FieldIndex.Flags;
                }
                case RecordTypeInts.XNAM:
                {
                    _MaxConcurrentQuestsLocation = (stream.Position - offset);
                    return (int)StoryManagerQuestNode_FieldIndex.MaxConcurrentQuests;
                }
                case RecordTypeInts.MNAM:
                {
                    _MaxNumQuestsToRunLocation = (stream.Position - offset);
                    return (int)StoryManagerQuestNode_FieldIndex.MaxNumQuestsToRun;
                }
                case RecordTypeInts.NNAM:
                case RecordTypeInts.FNAM:
                case RecordTypeInts.RNAM:
                case RecordTypeInts.QNAM:
                {
                    this.Quests = BinaryOverlayList.FactoryByCountPerItem<StoryManagerQuestBinaryOverlay>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        subrecordType: StoryManagerQuest_Registration.TriggeringRecordTypes,
                        countType: RecordTypes.QNAM,
                        parseParams: parseParams,
                        getter: (s, p, recConv) => StoryManagerQuestBinaryOverlay.StoryManagerQuestFactory(new OverlayStream(s, p), p, recConv),
                        skipHeader: false);
                    return (int)StoryManagerQuestNode_FieldIndex.Quests;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            StoryManagerQuestNodeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<StoryManagerQuestNode>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IStoryManagerQuestNodeGetter rhs) return false;
            return ((StoryManagerQuestNodeCommon)((IStoryManagerQuestNodeGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IStoryManagerQuestNodeGetter? obj)
        {
            return ((StoryManagerQuestNodeCommon)((IStoryManagerQuestNodeGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((StoryManagerQuestNodeCommon)((IStoryManagerQuestNodeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

