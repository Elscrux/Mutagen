/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class CriticalData :
        ICriticalData,
        IEquatable<ICriticalDataGetter>,
        ILoquiObjectSetter<CriticalData>
    {
        #region Ctor
        public CriticalData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Versioning
        public CriticalData.VersioningBreaks Versioning { get; set; } = default(CriticalData.VersioningBreaks);
        #endregion
        #region Damage
        public UInt16 Damage { get; set; } = default(UInt16);
        #endregion
        #region Unused
        public Int16 Unused { get; set; } = default(Int16);
        #endregion
        #region PercentMult
        public Single PercentMult { get; set; } = default(Single);
        #endregion
        #region Flags
        public CriticalData.Flag Flags { get; set; } = default(CriticalData.Flag);
        #endregion
        #region Unused2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unused2 = new byte[3];
        public MemorySlice<Byte> Unused2
        {
            get => _Unused2;
            set => this._Unused2 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> ICriticalDataGetter.Unused2 => this.Unused2;
        #endregion
        #region Unused3
        public Int32 Unused3 { get; set; } = default(Int32);
        #endregion
        #region Effect
        private readonly IFormLink<ISpellGetter> _Effect = new FormLink<ISpellGetter>();
        public IFormLink<ISpellGetter> Effect
        {
            get => _Effect;
            set => _Effect.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ISpellGetter> ICriticalDataGetter.Effect => this.Effect;
        #endregion
        #region Unused4
        public Int32 Unused4 { get; set; } = default(Int32);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CriticalDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICriticalDataGetter rhs) return false;
            return ((CriticalDataCommon)((ICriticalDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICriticalDataGetter? obj)
        {
            return ((CriticalDataCommon)((ICriticalDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CriticalDataCommon)((ICriticalDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Versioning = initialValue;
                this.Damage = initialValue;
                this.Unused = initialValue;
                this.PercentMult = initialValue;
                this.Flags = initialValue;
                this.Unused2 = initialValue;
                this.Unused3 = initialValue;
                this.Effect = initialValue;
                this.Unused4 = initialValue;
            }

            public Mask(
                TItem Versioning,
                TItem Damage,
                TItem Unused,
                TItem PercentMult,
                TItem Flags,
                TItem Unused2,
                TItem Unused3,
                TItem Effect,
                TItem Unused4)
            {
                this.Versioning = Versioning;
                this.Damage = Damage;
                this.Unused = Unused;
                this.PercentMult = PercentMult;
                this.Flags = Flags;
                this.Unused2 = Unused2;
                this.Unused3 = Unused3;
                this.Effect = Effect;
                this.Unused4 = Unused4;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Versioning;
            public TItem Damage;
            public TItem Unused;
            public TItem PercentMult;
            public TItem Flags;
            public TItem Unused2;
            public TItem Unused3;
            public TItem Effect;
            public TItem Unused4;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Versioning, rhs.Versioning)) return false;
                if (!object.Equals(this.Damage, rhs.Damage)) return false;
                if (!object.Equals(this.Unused, rhs.Unused)) return false;
                if (!object.Equals(this.PercentMult, rhs.PercentMult)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Unused2, rhs.Unused2)) return false;
                if (!object.Equals(this.Unused3, rhs.Unused3)) return false;
                if (!object.Equals(this.Effect, rhs.Effect)) return false;
                if (!object.Equals(this.Unused4, rhs.Unused4)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Versioning);
                hash.Add(this.Damage);
                hash.Add(this.Unused);
                hash.Add(this.PercentMult);
                hash.Add(this.Flags);
                hash.Add(this.Unused2);
                hash.Add(this.Unused3);
                hash.Add(this.Effect);
                hash.Add(this.Unused4);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Versioning)) return false;
                if (!eval(this.Damage)) return false;
                if (!eval(this.Unused)) return false;
                if (!eval(this.PercentMult)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Unused2)) return false;
                if (!eval(this.Unused3)) return false;
                if (!eval(this.Effect)) return false;
                if (!eval(this.Unused4)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Versioning)) return true;
                if (eval(this.Damage)) return true;
                if (eval(this.Unused)) return true;
                if (eval(this.PercentMult)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Unused2)) return true;
                if (eval(this.Unused3)) return true;
                if (eval(this.Effect)) return true;
                if (eval(this.Unused4)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CriticalData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Versioning = eval(this.Versioning);
                obj.Damage = eval(this.Damage);
                obj.Unused = eval(this.Unused);
                obj.PercentMult = eval(this.PercentMult);
                obj.Flags = eval(this.Flags);
                obj.Unused2 = eval(this.Unused2);
                obj.Unused3 = eval(this.Unused3);
                obj.Effect = eval(this.Effect);
                obj.Unused4 = eval(this.Unused4);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(CriticalData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, CriticalData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(CriticalData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Versioning ?? true)
                    {
                        sb.AppendItem(Versioning, "Versioning");
                    }
                    if (printMask?.Damage ?? true)
                    {
                        sb.AppendItem(Damage, "Damage");
                    }
                    if (printMask?.Unused ?? true)
                    {
                        sb.AppendItem(Unused, "Unused");
                    }
                    if (printMask?.PercentMult ?? true)
                    {
                        sb.AppendItem(PercentMult, "PercentMult");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Unused2 ?? true)
                    {
                        sb.AppendItem(Unused2, "Unused2");
                    }
                    if (printMask?.Unused3 ?? true)
                    {
                        sb.AppendItem(Unused3, "Unused3");
                    }
                    if (printMask?.Effect ?? true)
                    {
                        sb.AppendItem(Effect, "Effect");
                    }
                    if (printMask?.Unused4 ?? true)
                    {
                        sb.AppendItem(Unused4, "Unused4");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Versioning;
            public Exception? Damage;
            public Exception? Unused;
            public Exception? PercentMult;
            public Exception? Flags;
            public Exception? Unused2;
            public Exception? Unused3;
            public Exception? Effect;
            public Exception? Unused4;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                CriticalData_FieldIndex enu = (CriticalData_FieldIndex)index;
                switch (enu)
                {
                    case CriticalData_FieldIndex.Versioning:
                        return Versioning;
                    case CriticalData_FieldIndex.Damage:
                        return Damage;
                    case CriticalData_FieldIndex.Unused:
                        return Unused;
                    case CriticalData_FieldIndex.PercentMult:
                        return PercentMult;
                    case CriticalData_FieldIndex.Flags:
                        return Flags;
                    case CriticalData_FieldIndex.Unused2:
                        return Unused2;
                    case CriticalData_FieldIndex.Unused3:
                        return Unused3;
                    case CriticalData_FieldIndex.Effect:
                        return Effect;
                    case CriticalData_FieldIndex.Unused4:
                        return Unused4;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                CriticalData_FieldIndex enu = (CriticalData_FieldIndex)index;
                switch (enu)
                {
                    case CriticalData_FieldIndex.Versioning:
                        this.Versioning = ex;
                        break;
                    case CriticalData_FieldIndex.Damage:
                        this.Damage = ex;
                        break;
                    case CriticalData_FieldIndex.Unused:
                        this.Unused = ex;
                        break;
                    case CriticalData_FieldIndex.PercentMult:
                        this.PercentMult = ex;
                        break;
                    case CriticalData_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case CriticalData_FieldIndex.Unused2:
                        this.Unused2 = ex;
                        break;
                    case CriticalData_FieldIndex.Unused3:
                        this.Unused3 = ex;
                        break;
                    case CriticalData_FieldIndex.Effect:
                        this.Effect = ex;
                        break;
                    case CriticalData_FieldIndex.Unused4:
                        this.Unused4 = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                CriticalData_FieldIndex enu = (CriticalData_FieldIndex)index;
                switch (enu)
                {
                    case CriticalData_FieldIndex.Versioning:
                        this.Versioning = (Exception?)obj;
                        break;
                    case CriticalData_FieldIndex.Damage:
                        this.Damage = (Exception?)obj;
                        break;
                    case CriticalData_FieldIndex.Unused:
                        this.Unused = (Exception?)obj;
                        break;
                    case CriticalData_FieldIndex.PercentMult:
                        this.PercentMult = (Exception?)obj;
                        break;
                    case CriticalData_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case CriticalData_FieldIndex.Unused2:
                        this.Unused2 = (Exception?)obj;
                        break;
                    case CriticalData_FieldIndex.Unused3:
                        this.Unused3 = (Exception?)obj;
                        break;
                    case CriticalData_FieldIndex.Effect:
                        this.Effect = (Exception?)obj;
                        break;
                    case CriticalData_FieldIndex.Unused4:
                        this.Unused4 = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Versioning != null) return true;
                if (Damage != null) return true;
                if (Unused != null) return true;
                if (PercentMult != null) return true;
                if (Flags != null) return true;
                if (Unused2 != null) return true;
                if (Unused3 != null) return true;
                if (Effect != null) return true;
                if (Unused4 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Versioning, "Versioning");
                }
                {
                    sb.AppendItem(Damage, "Damage");
                }
                {
                    sb.AppendItem(Unused, "Unused");
                }
                {
                    sb.AppendItem(PercentMult, "PercentMult");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(Unused2, "Unused2");
                }
                {
                    sb.AppendItem(Unused3, "Unused3");
                }
                {
                    sb.AppendItem(Effect, "Effect");
                }
                {
                    sb.AppendItem(Unused4, "Unused4");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Versioning = this.Versioning.Combine(rhs.Versioning);
                ret.Damage = this.Damage.Combine(rhs.Damage);
                ret.Unused = this.Unused.Combine(rhs.Unused);
                ret.PercentMult = this.PercentMult.Combine(rhs.PercentMult);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Unused2 = this.Unused2.Combine(rhs.Unused2);
                ret.Unused3 = this.Unused3.Combine(rhs.Unused3);
                ret.Effect = this.Effect.Combine(rhs.Effect);
                ret.Unused4 = this.Unused4.Combine(rhs.Unused4);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Versioning;
            public bool Damage;
            public bool Unused;
            public bool PercentMult;
            public bool Flags;
            public bool Unused2;
            public bool Unused3;
            public bool Effect;
            public bool Unused4;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Versioning = defaultOn;
                this.Damage = defaultOn;
                this.Unused = defaultOn;
                this.PercentMult = defaultOn;
                this.Flags = defaultOn;
                this.Unused2 = defaultOn;
                this.Unused3 = defaultOn;
                this.Effect = defaultOn;
                this.Unused4 = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Versioning, null));
                ret.Add((Damage, null));
                ret.Add((Unused, null));
                ret.Add((PercentMult, null));
                ret.Add((Flags, null));
                ret.Add((Unused2, null));
                ret.Add((Unused3, null));
                ret.Add((Effect, null));
                ret.Add((Unused4, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        [Flags]
        public enum VersioningBreaks
        {
            Break0 = 1
        }
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => CriticalDataCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CriticalDataSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CriticalDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CriticalDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static CriticalData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new CriticalData();
            ((CriticalDataSetterCommon)((ICriticalDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CriticalData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((CriticalDataSetterCommon)((ICriticalDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static CriticalData GetNew()
        {
            return new CriticalData();
        }

    }
    #endregion

    #region Interface
    public partial interface ICriticalData :
        ICriticalDataGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<ICriticalData>
    {
        new CriticalData.VersioningBreaks Versioning { get; set; }
        new UInt16 Damage { get; set; }
        new Int16 Unused { get; set; }
        new Single PercentMult { get; set; }
        new CriticalData.Flag Flags { get; set; }
        new MemorySlice<Byte> Unused2 { get; set; }
        new Int32 Unused3 { get; set; }
        new IFormLink<ISpellGetter> Effect { get; set; }
        new Int32 Unused4 { get; set; }
    }

    public partial interface ICriticalDataGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ICriticalDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => CriticalData_Registration.Instance;
        CriticalData.VersioningBreaks Versioning { get; }
        UInt16 Damage { get; }
        Int16 Unused { get; }
        Single PercentMult { get; }
        CriticalData.Flag Flags { get; }
        ReadOnlyMemorySlice<Byte> Unused2 { get; }
        Int32 Unused3 { get; }
        IFormLinkGetter<ISpellGetter> Effect { get; }
        Int32 Unused4 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CriticalDataMixIn
    {
        public static void Clear(this ICriticalData item)
        {
            ((CriticalDataSetterCommon)((ICriticalDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CriticalData.Mask<bool> GetEqualsMask(
            this ICriticalDataGetter item,
            ICriticalDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CriticalDataCommon)((ICriticalDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ICriticalDataGetter item,
            string? name = null,
            CriticalData.Mask<bool>? printMask = null)
        {
            return ((CriticalDataCommon)((ICriticalDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ICriticalDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            CriticalData.Mask<bool>? printMask = null)
        {
            ((CriticalDataCommon)((ICriticalDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICriticalDataGetter item,
            ICriticalDataGetter rhs,
            CriticalData.TranslationMask? equalsMask = null)
        {
            return ((CriticalDataCommon)((ICriticalDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ICriticalData lhs,
            ICriticalDataGetter rhs)
        {
            ((CriticalDataSetterTranslationCommon)((ICriticalDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICriticalData lhs,
            ICriticalDataGetter rhs,
            CriticalData.TranslationMask? copyMask = null)
        {
            ((CriticalDataSetterTranslationCommon)((ICriticalDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICriticalData lhs,
            ICriticalDataGetter rhs,
            out CriticalData.ErrorMask errorMask,
            CriticalData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CriticalDataSetterTranslationCommon)((ICriticalDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = CriticalData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICriticalData lhs,
            ICriticalDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CriticalDataSetterTranslationCommon)((ICriticalDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static CriticalData DeepCopy(
            this ICriticalDataGetter item,
            CriticalData.TranslationMask? copyMask = null)
        {
            return ((CriticalDataSetterTranslationCommon)((ICriticalDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CriticalData DeepCopy(
            this ICriticalDataGetter item,
            out CriticalData.ErrorMask errorMask,
            CriticalData.TranslationMask? copyMask = null)
        {
            return ((CriticalDataSetterTranslationCommon)((ICriticalDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CriticalData DeepCopy(
            this ICriticalDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CriticalDataSetterTranslationCommon)((ICriticalDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICriticalData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((CriticalDataSetterCommon)((ICriticalDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum CriticalData_FieldIndex
    {
        Versioning = 0,
        Damage = 1,
        Unused = 2,
        PercentMult = 3,
        Flags = 4,
        Unused2 = 5,
        Unused3 = 6,
        Effect = 7,
        Unused4 = 8,
    }
    #endregion

    #region Registration
    internal partial class CriticalData_Registration : ILoquiRegistration
    {
        public static readonly CriticalData_Registration Instance = new CriticalData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(CriticalData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CriticalData.ErrorMask);

        public static readonly Type ClassType = typeof(CriticalData);

        public static readonly Type GetterType = typeof(ICriticalDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICriticalData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.CriticalData";

        public const string Name = "CriticalData";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.CRDT;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.CRDT);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(CriticalDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class CriticalDataSetterCommon
    {
        public static readonly CriticalDataSetterCommon Instance = new CriticalDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICriticalData item)
        {
            ClearPartial();
            item.Versioning = default(CriticalData.VersioningBreaks);
            item.Damage = default(UInt16);
            item.Unused = default(Int16);
            item.PercentMult = default(Single);
            item.Flags = default(CriticalData.Flag);
            item.Unused2 = new byte[3];
            item.Unused3 = default(Int32);
            item.Effect.Clear();
            item.Unused4 = default(Int32);
        }
        
        #region Mutagen
        public void RemapLinks(ICriticalData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Effect.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICriticalData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.CRDT),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: CriticalDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class CriticalDataCommon
    {
        public static readonly CriticalDataCommon Instance = new CriticalDataCommon();

        public CriticalData.Mask<bool> GetEqualsMask(
            ICriticalDataGetter item,
            ICriticalDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CriticalData.Mask<bool>(false);
            ((CriticalDataCommon)((ICriticalDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICriticalDataGetter item,
            ICriticalDataGetter rhs,
            CriticalData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Versioning = item.Versioning == rhs.Versioning;
            ret.Damage = item.Damage == rhs.Damage;
            ret.Unused = item.Unused == rhs.Unused;
            ret.PercentMult = item.PercentMult.EqualsWithin(rhs.PercentMult);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Unused2 = MemoryExtensions.SequenceEqual(item.Unused2.Span, rhs.Unused2.Span);
            ret.Unused3 = item.Unused3 == rhs.Unused3;
            ret.Effect = item.Effect.Equals(rhs.Effect);
            ret.Unused4 = item.Unused4 == rhs.Unused4;
        }
        
        public string Print(
            ICriticalDataGetter item,
            string? name = null,
            CriticalData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ICriticalDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            CriticalData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"CriticalData =>");
            }
            else
            {
                sb.AppendLine($"{name} (CriticalData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ICriticalDataGetter item,
            StructuredStringBuilder sb,
            CriticalData.Mask<bool>? printMask = null)
        {
            if (printMask?.Versioning ?? true)
            {
                sb.AppendItem(item.Versioning, "Versioning");
            }
            if (printMask?.Damage ?? true)
            {
                sb.AppendItem(item.Damage, "Damage");
            }
            if (printMask?.Unused ?? true)
            {
                sb.AppendItem(item.Unused, "Unused");
            }
            if (printMask?.PercentMult ?? true)
            {
                sb.AppendItem(item.PercentMult, "PercentMult");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Unused2 ?? true)
            {
                sb.AppendLine($"Unused2 => {SpanExt.ToHexString(item.Unused2)}");
            }
            if (printMask?.Unused3 ?? true)
            {
                sb.AppendItem(item.Unused3, "Unused3");
            }
            if (printMask?.Effect ?? true)
            {
                sb.AppendItem(item.Effect.FormKey, "Effect");
            }
            if (printMask?.Unused4 ?? true)
            {
                sb.AppendItem(item.Unused4, "Unused4");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICriticalDataGetter? lhs,
            ICriticalDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)CriticalData_FieldIndex.Versioning) ?? true))
            {
                if (lhs.Versioning != rhs.Versioning) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CriticalData_FieldIndex.Damage) ?? true))
            {
                if (lhs.Damage != rhs.Damage) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CriticalData_FieldIndex.Unused) ?? true))
            {
                if (lhs.Unused != rhs.Unused) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CriticalData_FieldIndex.PercentMult) ?? true))
            {
                if (!lhs.PercentMult.EqualsWithin(rhs.PercentMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CriticalData_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CriticalData_FieldIndex.Unused2) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.Unused2.Span, rhs.Unused2.Span)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CriticalData_FieldIndex.Unused3) ?? true))
            {
                if (lhs.Unused3 != rhs.Unused3) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CriticalData_FieldIndex.Effect) ?? true))
            {
                if (!lhs.Effect.Equals(rhs.Effect)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CriticalData_FieldIndex.Unused4) ?? true))
            {
                if (lhs.Unused4 != rhs.Unused4) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ICriticalDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Versioning);
            hash.Add(item.Damage);
            hash.Add(item.Unused);
            hash.Add(item.PercentMult);
            hash.Add(item.Flags);
            hash.Add(item.Unused2);
            hash.Add(item.Unused3);
            hash.Add(item.Effect);
            hash.Add(item.Unused4);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return CriticalData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ICriticalDataGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.Effect);
            yield break;
        }
        
        #endregion
        
    }
    internal partial class CriticalDataSetterTranslationCommon
    {
        public static readonly CriticalDataSetterTranslationCommon Instance = new CriticalDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICriticalData item,
            ICriticalDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)CriticalData_FieldIndex.Versioning) ?? true))
            {
                item.Versioning = rhs.Versioning;
            }
            if ((copyMask?.GetShouldTranslate((int)CriticalData_FieldIndex.Damage) ?? true))
            {
                item.Damage = rhs.Damage;
            }
            if ((copyMask?.GetShouldTranslate((int)CriticalData_FieldIndex.Unused) ?? true))
            {
                item.Unused = rhs.Unused;
            }
            if ((copyMask?.GetShouldTranslate((int)CriticalData_FieldIndex.PercentMult) ?? true))
            {
                item.PercentMult = rhs.PercentMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CriticalData_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)CriticalData_FieldIndex.Unused2) ?? true))
            {
                item.Unused2 = rhs.Unused2.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)CriticalData_FieldIndex.Unused3) ?? true))
            {
                item.Unused3 = rhs.Unused3;
            }
            if (rhs.Versioning.HasFlag(CriticalData.VersioningBreaks.Break0)) return;
            if ((copyMask?.GetShouldTranslate((int)CriticalData_FieldIndex.Effect) ?? true))
            {
                item.Effect.SetTo(rhs.Effect.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)CriticalData_FieldIndex.Unused4) ?? true))
            {
                item.Unused4 = rhs.Unused4;
            }
        }
        
        #endregion
        
        public CriticalData DeepCopy(
            ICriticalDataGetter item,
            CriticalData.TranslationMask? copyMask = null)
        {
            CriticalData ret = (CriticalData)((CriticalDataCommon)((ICriticalDataGetter)item).CommonInstance()!).GetNew();
            ((CriticalDataSetterTranslationCommon)((ICriticalDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public CriticalData DeepCopy(
            ICriticalDataGetter item,
            out CriticalData.ErrorMask errorMask,
            CriticalData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CriticalData ret = (CriticalData)((CriticalDataCommon)((ICriticalDataGetter)item).CommonInstance()!).GetNew();
            ((CriticalDataSetterTranslationCommon)((ICriticalDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = CriticalData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public CriticalData DeepCopy(
            ICriticalDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CriticalData ret = (CriticalData)((CriticalDataCommon)((ICriticalDataGetter)item).CommonInstance()!).GetNew();
            ((CriticalDataSetterTranslationCommon)((ICriticalDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class CriticalData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CriticalData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => CriticalData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CriticalDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return CriticalDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CriticalDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICriticalDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ICriticalDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ICriticalDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class CriticalDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly CriticalDataBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ICriticalDataGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Damage);
            writer.Write(item.Unused);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.PercentMult);
            EnumBinaryTranslation<CriticalData.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Flags,
                length: 1);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unused2);
            if (writer.MetaData.FormVersion!.Value >= 44)
            {
                writer.Write(item.Unused3);
            }
            if (!item.Versioning.HasFlag(CriticalData.VersioningBreaks.Break0))
            {
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Effect);
                if (writer.MetaData.FormVersion!.Value >= 44)
                {
                    writer.Write(item.Unused4);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            ICriticalDataGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.CRDT),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ICriticalDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class CriticalDataBinaryCreateTranslation
    {
        public static readonly CriticalDataBinaryCreateTranslation Instance = new CriticalDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ICriticalData item,
            MutagenFrame frame)
        {
            item.Damage = frame.ReadUInt16();
            item.Unused = frame.ReadInt16();
            item.PercentMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Flags = EnumBinaryTranslation<CriticalData.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 1);
            item.Unused2 = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(3));
            if (frame.MetaData.FormVersion!.Value >= 44)
            {
                item.Unused3 = frame.ReadInt32();
            }
            if (frame.Complete)
            {
                item.Versioning |= CriticalData.VersioningBreaks.Break0;
                return;
            }
            item.Effect.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            if (frame.MetaData.FormVersion!.Value >= 44)
            {
                item.Unused4 = frame.ReadInt32();
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class CriticalDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ICriticalDataGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CriticalDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class CriticalDataBinaryOverlay :
        PluginBinaryOverlay,
        ICriticalDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CriticalData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => CriticalData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CriticalDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CriticalDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICriticalDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ICriticalDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ICriticalDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => CriticalDataCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CriticalDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CriticalDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public CriticalData.VersioningBreaks Versioning { get; private set; }
        public UInt16 Damage => BinaryPrimitives.ReadUInt16LittleEndian(_structData.Slice(0x0, 0x2));
        public Int16 Unused => BinaryPrimitives.ReadInt16LittleEndian(_structData.Slice(0x2, 0x2));
        public Single PercentMult => _structData.Slice(0x4, 0x4).Float();
        public CriticalData.Flag Flags => (CriticalData.Flag)_structData.Span.Slice(0x8, 0x1)[0];
        public ReadOnlyMemorySlice<Byte> Unused2 => _structData.Span.Slice(0x9, 0x3).ToArray();
        #region Unused3
        public Int32 Unused3 => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0xC, 0x4));
        int Unused3VersioningOffset => _package.FormVersion!.FormVersion!.Value < 44 ? -4 : 0;
        #endregion
        public IFormLinkGetter<ISpellGetter> Effect => _structData.Length <= Unused3VersioningOffset + 0x10 ? FormLink<ISpellGetter>.Null : new FormLink<ISpellGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_structData.Span.Slice(Unused3VersioningOffset + 0x10, 0x4))));
        #region Unused4
        public Int32 Unused4 => _structData.Length <= Unused3VersioningOffset + 0x14 ? default : BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(Unused3VersioningOffset + 0x14, 0x4));
        int Unused4VersioningOffset => Unused3VersioningOffset + (_package.FormVersion!.FormVersion!.Value < 44 ? -4 : 0);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CriticalDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ICriticalDataGetter CriticalDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x18,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new CriticalDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            if (ret._structData.Length <= ret.Unused3VersioningOffset + 0x10)
            {
                ret.Versioning |= CriticalData.VersioningBreaks.Break0;
            }
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ICriticalDataGetter CriticalDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return CriticalDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CriticalDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICriticalDataGetter rhs) return false;
            return ((CriticalDataCommon)((ICriticalDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICriticalDataGetter? obj)
        {
            return ((CriticalDataCommon)((ICriticalDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CriticalDataCommon)((ICriticalDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

