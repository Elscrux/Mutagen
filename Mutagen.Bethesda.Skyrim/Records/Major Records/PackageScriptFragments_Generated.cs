/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class PackageScriptFragments :
        IEquatable<IPackageScriptFragmentsGetter>,
        ILoquiObjectSetter<PackageScriptFragments>,
        IPackageScriptFragments
    {
        #region Ctor
        public PackageScriptFragments()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ExtraBindDataVersion
        public static readonly Byte ExtraBindDataVersionDefault = 2;
        public Byte ExtraBindDataVersion { get; set; } = ExtraBindDataVersionDefault;
        #endregion
        #region FileName
        public String FileName { get; set; } = string.Empty;
        #endregion
        #region OnBegin
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ScriptFragment? _OnBegin;
        public ScriptFragment? OnBegin
        {
            get => _OnBegin;
            set => _OnBegin = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IScriptFragmentGetter? IPackageScriptFragmentsGetter.OnBegin => this.OnBegin;
        #endregion
        #region OnEnd
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ScriptFragment? _OnEnd;
        public ScriptFragment? OnEnd
        {
            get => _OnEnd;
            set => _OnEnd = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IScriptFragmentGetter? IPackageScriptFragmentsGetter.OnEnd => this.OnEnd;
        #endregion
        #region OnChange
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ScriptFragment? _OnChange;
        public ScriptFragment? OnChange
        {
            get => _OnChange;
            set => _OnChange = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IScriptFragmentGetter? IPackageScriptFragmentsGetter.OnChange => this.OnChange;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PackageScriptFragmentsMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPackageScriptFragmentsGetter rhs) return false;
            return ((PackageScriptFragmentsCommon)((IPackageScriptFragmentsGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPackageScriptFragmentsGetter? obj)
        {
            return ((PackageScriptFragmentsCommon)((IPackageScriptFragmentsGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PackageScriptFragmentsCommon)((IPackageScriptFragmentsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.ExtraBindDataVersion = initialValue;
                this.FileName = initialValue;
                this.OnBegin = new MaskItem<TItem, ScriptFragment.Mask<TItem>?>(initialValue, new ScriptFragment.Mask<TItem>(initialValue));
                this.OnEnd = new MaskItem<TItem, ScriptFragment.Mask<TItem>?>(initialValue, new ScriptFragment.Mask<TItem>(initialValue));
                this.OnChange = new MaskItem<TItem, ScriptFragment.Mask<TItem>?>(initialValue, new ScriptFragment.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem ExtraBindDataVersion,
                TItem FileName,
                TItem OnBegin,
                TItem OnEnd,
                TItem OnChange)
            {
                this.ExtraBindDataVersion = ExtraBindDataVersion;
                this.FileName = FileName;
                this.OnBegin = new MaskItem<TItem, ScriptFragment.Mask<TItem>?>(OnBegin, new ScriptFragment.Mask<TItem>(OnBegin));
                this.OnEnd = new MaskItem<TItem, ScriptFragment.Mask<TItem>?>(OnEnd, new ScriptFragment.Mask<TItem>(OnEnd));
                this.OnChange = new MaskItem<TItem, ScriptFragment.Mask<TItem>?>(OnChange, new ScriptFragment.Mask<TItem>(OnChange));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem ExtraBindDataVersion;
            public TItem FileName;
            public MaskItem<TItem, ScriptFragment.Mask<TItem>?>? OnBegin { get; set; }
            public MaskItem<TItem, ScriptFragment.Mask<TItem>?>? OnEnd { get; set; }
            public MaskItem<TItem, ScriptFragment.Mask<TItem>?>? OnChange { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.ExtraBindDataVersion, rhs.ExtraBindDataVersion)) return false;
                if (!object.Equals(this.FileName, rhs.FileName)) return false;
                if (!object.Equals(this.OnBegin, rhs.OnBegin)) return false;
                if (!object.Equals(this.OnEnd, rhs.OnEnd)) return false;
                if (!object.Equals(this.OnChange, rhs.OnChange)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ExtraBindDataVersion);
                hash.Add(this.FileName);
                hash.Add(this.OnBegin);
                hash.Add(this.OnEnd);
                hash.Add(this.OnChange);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.ExtraBindDataVersion)) return false;
                if (!eval(this.FileName)) return false;
                if (OnBegin != null)
                {
                    if (!eval(this.OnBegin.Overall)) return false;
                    if (this.OnBegin.Specific != null && !this.OnBegin.Specific.All(eval)) return false;
                }
                if (OnEnd != null)
                {
                    if (!eval(this.OnEnd.Overall)) return false;
                    if (this.OnEnd.Specific != null && !this.OnEnd.Specific.All(eval)) return false;
                }
                if (OnChange != null)
                {
                    if (!eval(this.OnChange.Overall)) return false;
                    if (this.OnChange.Specific != null && !this.OnChange.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.ExtraBindDataVersion)) return true;
                if (eval(this.FileName)) return true;
                if (OnBegin != null)
                {
                    if (eval(this.OnBegin.Overall)) return true;
                    if (this.OnBegin.Specific != null && this.OnBegin.Specific.Any(eval)) return true;
                }
                if (OnEnd != null)
                {
                    if (eval(this.OnEnd.Overall)) return true;
                    if (this.OnEnd.Specific != null && this.OnEnd.Specific.Any(eval)) return true;
                }
                if (OnChange != null)
                {
                    if (eval(this.OnChange.Overall)) return true;
                    if (this.OnChange.Specific != null && this.OnChange.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PackageScriptFragments.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.ExtraBindDataVersion = eval(this.ExtraBindDataVersion);
                obj.FileName = eval(this.FileName);
                obj.OnBegin = this.OnBegin == null ? null : new MaskItem<R, ScriptFragment.Mask<R>?>(eval(this.OnBegin.Overall), this.OnBegin.Specific?.Translate(eval));
                obj.OnEnd = this.OnEnd == null ? null : new MaskItem<R, ScriptFragment.Mask<R>?>(eval(this.OnEnd.Overall), this.OnEnd.Specific?.Translate(eval));
                obj.OnChange = this.OnChange == null ? null : new MaskItem<R, ScriptFragment.Mask<R>?>(eval(this.OnChange.Overall), this.OnChange.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(PackageScriptFragments.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, PackageScriptFragments.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(PackageScriptFragments.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ExtraBindDataVersion ?? true)
                    {
                        sb.AppendItem(ExtraBindDataVersion, "ExtraBindDataVersion");
                    }
                    if (printMask?.FileName ?? true)
                    {
                        sb.AppendItem(FileName, "FileName");
                    }
                    if (printMask?.OnBegin?.Overall ?? true)
                    {
                        OnBegin?.Print(sb);
                    }
                    if (printMask?.OnEnd?.Overall ?? true)
                    {
                        OnEnd?.Print(sb);
                    }
                    if (printMask?.OnChange?.Overall ?? true)
                    {
                        OnChange?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? ExtraBindDataVersion;
            public Exception? FileName;
            public MaskItem<Exception?, ScriptFragment.ErrorMask?>? OnBegin;
            public MaskItem<Exception?, ScriptFragment.ErrorMask?>? OnEnd;
            public MaskItem<Exception?, ScriptFragment.ErrorMask?>? OnChange;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                PackageScriptFragments_FieldIndex enu = (PackageScriptFragments_FieldIndex)index;
                switch (enu)
                {
                    case PackageScriptFragments_FieldIndex.ExtraBindDataVersion:
                        return ExtraBindDataVersion;
                    case PackageScriptFragments_FieldIndex.FileName:
                        return FileName;
                    case PackageScriptFragments_FieldIndex.OnBegin:
                        return OnBegin;
                    case PackageScriptFragments_FieldIndex.OnEnd:
                        return OnEnd;
                    case PackageScriptFragments_FieldIndex.OnChange:
                        return OnChange;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                PackageScriptFragments_FieldIndex enu = (PackageScriptFragments_FieldIndex)index;
                switch (enu)
                {
                    case PackageScriptFragments_FieldIndex.ExtraBindDataVersion:
                        this.ExtraBindDataVersion = ex;
                        break;
                    case PackageScriptFragments_FieldIndex.FileName:
                        this.FileName = ex;
                        break;
                    case PackageScriptFragments_FieldIndex.OnBegin:
                        this.OnBegin = new MaskItem<Exception?, ScriptFragment.ErrorMask?>(ex, null);
                        break;
                    case PackageScriptFragments_FieldIndex.OnEnd:
                        this.OnEnd = new MaskItem<Exception?, ScriptFragment.ErrorMask?>(ex, null);
                        break;
                    case PackageScriptFragments_FieldIndex.OnChange:
                        this.OnChange = new MaskItem<Exception?, ScriptFragment.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                PackageScriptFragments_FieldIndex enu = (PackageScriptFragments_FieldIndex)index;
                switch (enu)
                {
                    case PackageScriptFragments_FieldIndex.ExtraBindDataVersion:
                        this.ExtraBindDataVersion = (Exception?)obj;
                        break;
                    case PackageScriptFragments_FieldIndex.FileName:
                        this.FileName = (Exception?)obj;
                        break;
                    case PackageScriptFragments_FieldIndex.OnBegin:
                        this.OnBegin = (MaskItem<Exception?, ScriptFragment.ErrorMask?>?)obj;
                        break;
                    case PackageScriptFragments_FieldIndex.OnEnd:
                        this.OnEnd = (MaskItem<Exception?, ScriptFragment.ErrorMask?>?)obj;
                        break;
                    case PackageScriptFragments_FieldIndex.OnChange:
                        this.OnChange = (MaskItem<Exception?, ScriptFragment.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (ExtraBindDataVersion != null) return true;
                if (FileName != null) return true;
                if (OnBegin != null) return true;
                if (OnEnd != null) return true;
                if (OnChange != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(ExtraBindDataVersion, "ExtraBindDataVersion");
                }
                {
                    sb.AppendItem(FileName, "FileName");
                }
                OnBegin?.Print(sb);
                OnEnd?.Print(sb);
                OnChange?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ExtraBindDataVersion = this.ExtraBindDataVersion.Combine(rhs.ExtraBindDataVersion);
                ret.FileName = this.FileName.Combine(rhs.FileName);
                ret.OnBegin = this.OnBegin.Combine(rhs.OnBegin, (l, r) => l.Combine(r));
                ret.OnEnd = this.OnEnd.Combine(rhs.OnEnd, (l, r) => l.Combine(r));
                ret.OnChange = this.OnChange.Combine(rhs.OnChange, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool ExtraBindDataVersion;
            public bool FileName;
            public ScriptFragment.TranslationMask? OnBegin;
            public ScriptFragment.TranslationMask? OnEnd;
            public ScriptFragment.TranslationMask? OnChange;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.ExtraBindDataVersion = defaultOn;
                this.FileName = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((ExtraBindDataVersion, null));
                ret.Add((FileName, null));
                ret.Add((OnBegin != null ? OnBegin.OnOverall : DefaultOn, OnBegin?.GetCrystal()));
                ret.Add((OnEnd != null ? OnEnd.OnOverall : DefaultOn, OnEnd?.GetCrystal()));
                ret.Add((OnChange != null ? OnChange.OnOverall : DefaultOn, OnChange?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PackageScriptFragmentsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PackageScriptFragmentsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static PackageScriptFragments CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new PackageScriptFragments();
            ((PackageScriptFragmentsSetterCommon)((IPackageScriptFragmentsGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PackageScriptFragments item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((PackageScriptFragmentsSetterCommon)((IPackageScriptFragmentsGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static PackageScriptFragments GetNew()
        {
            return new PackageScriptFragments();
        }

    }
    #endregion

    #region Interface
    public partial interface IPackageScriptFragments :
        ILoquiObjectSetter<IPackageScriptFragments>,
        IPackageScriptFragmentsGetter
    {
        new Byte ExtraBindDataVersion { get; set; }
        new String FileName { get; set; }
        new ScriptFragment? OnBegin { get; set; }
        new ScriptFragment? OnEnd { get; set; }
        new ScriptFragment? OnChange { get; set; }
    }

    public partial interface IPackageScriptFragmentsGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IPackageScriptFragmentsGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => PackageScriptFragments_Registration.Instance;
        Byte ExtraBindDataVersion { get; }
        String FileName { get; }
        IScriptFragmentGetter? OnBegin { get; }
        IScriptFragmentGetter? OnEnd { get; }
        IScriptFragmentGetter? OnChange { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PackageScriptFragmentsMixIn
    {
        public static void Clear(this IPackageScriptFragments item)
        {
            ((PackageScriptFragmentsSetterCommon)((IPackageScriptFragmentsGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PackageScriptFragments.Mask<bool> GetEqualsMask(
            this IPackageScriptFragmentsGetter item,
            IPackageScriptFragmentsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PackageScriptFragmentsCommon)((IPackageScriptFragmentsGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IPackageScriptFragmentsGetter item,
            string? name = null,
            PackageScriptFragments.Mask<bool>? printMask = null)
        {
            return ((PackageScriptFragmentsCommon)((IPackageScriptFragmentsGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IPackageScriptFragmentsGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PackageScriptFragments.Mask<bool>? printMask = null)
        {
            ((PackageScriptFragmentsCommon)((IPackageScriptFragmentsGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPackageScriptFragmentsGetter item,
            IPackageScriptFragmentsGetter rhs,
            PackageScriptFragments.TranslationMask? equalsMask = null)
        {
            return ((PackageScriptFragmentsCommon)((IPackageScriptFragmentsGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPackageScriptFragments lhs,
            IPackageScriptFragmentsGetter rhs)
        {
            ((PackageScriptFragmentsSetterTranslationCommon)((IPackageScriptFragmentsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPackageScriptFragments lhs,
            IPackageScriptFragmentsGetter rhs,
            PackageScriptFragments.TranslationMask? copyMask = null)
        {
            ((PackageScriptFragmentsSetterTranslationCommon)((IPackageScriptFragmentsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPackageScriptFragments lhs,
            IPackageScriptFragmentsGetter rhs,
            out PackageScriptFragments.ErrorMask errorMask,
            PackageScriptFragments.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PackageScriptFragmentsSetterTranslationCommon)((IPackageScriptFragmentsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PackageScriptFragments.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPackageScriptFragments lhs,
            IPackageScriptFragmentsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PackageScriptFragmentsSetterTranslationCommon)((IPackageScriptFragmentsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PackageScriptFragments DeepCopy(
            this IPackageScriptFragmentsGetter item,
            PackageScriptFragments.TranslationMask? copyMask = null)
        {
            return ((PackageScriptFragmentsSetterTranslationCommon)((IPackageScriptFragmentsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PackageScriptFragments DeepCopy(
            this IPackageScriptFragmentsGetter item,
            out PackageScriptFragments.ErrorMask errorMask,
            PackageScriptFragments.TranslationMask? copyMask = null)
        {
            return ((PackageScriptFragmentsSetterTranslationCommon)((IPackageScriptFragmentsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PackageScriptFragments DeepCopy(
            this IPackageScriptFragmentsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PackageScriptFragmentsSetterTranslationCommon)((IPackageScriptFragmentsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPackageScriptFragments item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((PackageScriptFragmentsSetterCommon)((IPackageScriptFragmentsGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum PackageScriptFragments_FieldIndex
    {
        ExtraBindDataVersion = 0,
        FileName = 1,
        OnBegin = 2,
        OnEnd = 3,
        OnChange = 4,
    }
    #endregion

    #region Registration
    internal partial class PackageScriptFragments_Registration : ILoquiRegistration
    {
        public static readonly PackageScriptFragments_Registration Instance = new PackageScriptFragments_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(PackageScriptFragments.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PackageScriptFragments.ErrorMask);

        public static readonly Type ClassType = typeof(PackageScriptFragments);

        public static readonly Type GetterType = typeof(IPackageScriptFragmentsGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPackageScriptFragments);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.PackageScriptFragments";

        public const string Name = "PackageScriptFragments";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(PackageScriptFragmentsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class PackageScriptFragmentsSetterCommon
    {
        public static readonly PackageScriptFragmentsSetterCommon Instance = new PackageScriptFragmentsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPackageScriptFragments item)
        {
            ClearPartial();
            item.ExtraBindDataVersion = PackageScriptFragments.ExtraBindDataVersionDefault;
            item.FileName = string.Empty;
            item.OnBegin = null;
            item.OnEnd = null;
            item.OnChange = null;
        }
        
        #region Mutagen
        public void RemapLinks(IPackageScriptFragments obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPackageScriptFragments item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: PackageScriptFragmentsBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class PackageScriptFragmentsCommon
    {
        public static readonly PackageScriptFragmentsCommon Instance = new PackageScriptFragmentsCommon();

        public PackageScriptFragments.Mask<bool> GetEqualsMask(
            IPackageScriptFragmentsGetter item,
            IPackageScriptFragmentsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PackageScriptFragments.Mask<bool>(false);
            ((PackageScriptFragmentsCommon)((IPackageScriptFragmentsGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPackageScriptFragmentsGetter item,
            IPackageScriptFragmentsGetter rhs,
            PackageScriptFragments.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ExtraBindDataVersion = item.ExtraBindDataVersion == rhs.ExtraBindDataVersion;
            ret.FileName = string.Equals(item.FileName, rhs.FileName);
            ret.OnBegin = EqualsMaskHelper.EqualsHelper(
                item.OnBegin,
                rhs.OnBegin,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.OnEnd = EqualsMaskHelper.EqualsHelper(
                item.OnEnd,
                rhs.OnEnd,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.OnChange = EqualsMaskHelper.EqualsHelper(
                item.OnChange,
                rhs.OnChange,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string Print(
            IPackageScriptFragmentsGetter item,
            string? name = null,
            PackageScriptFragments.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IPackageScriptFragmentsGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PackageScriptFragments.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"PackageScriptFragments =>");
            }
            else
            {
                sb.AppendLine($"{name} (PackageScriptFragments) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IPackageScriptFragmentsGetter item,
            StructuredStringBuilder sb,
            PackageScriptFragments.Mask<bool>? printMask = null)
        {
            if (printMask?.ExtraBindDataVersion ?? true)
            {
                sb.AppendItem(item.ExtraBindDataVersion, "ExtraBindDataVersion");
            }
            if (printMask?.FileName ?? true)
            {
                sb.AppendItem(item.FileName, "FileName");
            }
            if ((printMask?.OnBegin?.Overall ?? true)
                && item.OnBegin is {} OnBeginItem)
            {
                OnBeginItem?.Print(sb, "OnBegin");
            }
            if ((printMask?.OnEnd?.Overall ?? true)
                && item.OnEnd is {} OnEndItem)
            {
                OnEndItem?.Print(sb, "OnEnd");
            }
            if ((printMask?.OnChange?.Overall ?? true)
                && item.OnChange is {} OnChangeItem)
            {
                OnChangeItem?.Print(sb, "OnChange");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPackageScriptFragmentsGetter? lhs,
            IPackageScriptFragmentsGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)PackageScriptFragments_FieldIndex.ExtraBindDataVersion) ?? true))
            {
                if (lhs.ExtraBindDataVersion != rhs.ExtraBindDataVersion) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PackageScriptFragments_FieldIndex.FileName) ?? true))
            {
                if (!string.Equals(lhs.FileName, rhs.FileName)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PackageScriptFragments_FieldIndex.OnBegin) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.OnBegin, rhs.OnBegin, out var lhsOnBegin, out var rhsOnBegin, out var isOnBeginEqual))
                {
                    if (!((ScriptFragmentCommon)((IScriptFragmentGetter)lhsOnBegin).CommonInstance()!).Equals(lhsOnBegin, rhsOnBegin, equalsMask?.GetSubCrystal((int)PackageScriptFragments_FieldIndex.OnBegin))) return false;
                }
                else if (!isOnBeginEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PackageScriptFragments_FieldIndex.OnEnd) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.OnEnd, rhs.OnEnd, out var lhsOnEnd, out var rhsOnEnd, out var isOnEndEqual))
                {
                    if (!((ScriptFragmentCommon)((IScriptFragmentGetter)lhsOnEnd).CommonInstance()!).Equals(lhsOnEnd, rhsOnEnd, equalsMask?.GetSubCrystal((int)PackageScriptFragments_FieldIndex.OnEnd))) return false;
                }
                else if (!isOnEndEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PackageScriptFragments_FieldIndex.OnChange) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.OnChange, rhs.OnChange, out var lhsOnChange, out var rhsOnChange, out var isOnChangeEqual))
                {
                    if (!((ScriptFragmentCommon)((IScriptFragmentGetter)lhsOnChange).CommonInstance()!).Equals(lhsOnChange, rhsOnChange, equalsMask?.GetSubCrystal((int)PackageScriptFragments_FieldIndex.OnChange))) return false;
                }
                else if (!isOnChangeEqual) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IPackageScriptFragmentsGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ExtraBindDataVersion);
            hash.Add(item.FileName);
            if (item.OnBegin is {} OnBeginitem)
            {
                hash.Add(OnBeginitem);
            }
            if (item.OnEnd is {} OnEnditem)
            {
                hash.Add(OnEnditem);
            }
            if (item.OnChange is {} OnChangeitem)
            {
                hash.Add(OnChangeitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return PackageScriptFragments.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IPackageScriptFragmentsGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class PackageScriptFragmentsSetterTranslationCommon
    {
        public static readonly PackageScriptFragmentsSetterTranslationCommon Instance = new PackageScriptFragmentsSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPackageScriptFragments item,
            IPackageScriptFragmentsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)PackageScriptFragments_FieldIndex.ExtraBindDataVersion) ?? true))
            {
                item.ExtraBindDataVersion = rhs.ExtraBindDataVersion;
            }
            if ((copyMask?.GetShouldTranslate((int)PackageScriptFragments_FieldIndex.FileName) ?? true))
            {
                item.FileName = rhs.FileName;
            }
            if ((copyMask?.GetShouldTranslate((int)PackageScriptFragments_FieldIndex.OnBegin) ?? true))
            {
                errorMask?.PushIndex((int)PackageScriptFragments_FieldIndex.OnBegin);
                try
                {
                    if(rhs.OnBegin is {} rhsOnBegin)
                    {
                        item.OnBegin = rhsOnBegin.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PackageScriptFragments_FieldIndex.OnBegin));
                    }
                    else
                    {
                        item.OnBegin = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PackageScriptFragments_FieldIndex.OnEnd) ?? true))
            {
                errorMask?.PushIndex((int)PackageScriptFragments_FieldIndex.OnEnd);
                try
                {
                    if(rhs.OnEnd is {} rhsOnEnd)
                    {
                        item.OnEnd = rhsOnEnd.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PackageScriptFragments_FieldIndex.OnEnd));
                    }
                    else
                    {
                        item.OnEnd = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PackageScriptFragments_FieldIndex.OnChange) ?? true))
            {
                errorMask?.PushIndex((int)PackageScriptFragments_FieldIndex.OnChange);
                try
                {
                    if(rhs.OnChange is {} rhsOnChange)
                    {
                        item.OnChange = rhsOnChange.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PackageScriptFragments_FieldIndex.OnChange));
                    }
                    else
                    {
                        item.OnChange = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public PackageScriptFragments DeepCopy(
            IPackageScriptFragmentsGetter item,
            PackageScriptFragments.TranslationMask? copyMask = null)
        {
            PackageScriptFragments ret = (PackageScriptFragments)((PackageScriptFragmentsCommon)((IPackageScriptFragmentsGetter)item).CommonInstance()!).GetNew();
            ((PackageScriptFragmentsSetterTranslationCommon)((IPackageScriptFragmentsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PackageScriptFragments DeepCopy(
            IPackageScriptFragmentsGetter item,
            out PackageScriptFragments.ErrorMask errorMask,
            PackageScriptFragments.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PackageScriptFragments ret = (PackageScriptFragments)((PackageScriptFragmentsCommon)((IPackageScriptFragmentsGetter)item).CommonInstance()!).GetNew();
            ((PackageScriptFragmentsSetterTranslationCommon)((IPackageScriptFragmentsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PackageScriptFragments.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PackageScriptFragments DeepCopy(
            IPackageScriptFragmentsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PackageScriptFragments ret = (PackageScriptFragments)((PackageScriptFragmentsCommon)((IPackageScriptFragmentsGetter)item).CommonInstance()!).GetNew();
            ((PackageScriptFragmentsSetterTranslationCommon)((IPackageScriptFragmentsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class PackageScriptFragments
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PackageScriptFragments_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => PackageScriptFragments_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PackageScriptFragmentsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return PackageScriptFragmentsSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PackageScriptFragmentsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPackageScriptFragmentsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IPackageScriptFragmentsGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IPackageScriptFragmentsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class PackageScriptFragmentsBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly PackageScriptFragmentsBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IPackageScriptFragmentsGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.ExtraBindDataVersion);
            PackageScriptFragmentsBinaryWriteTranslation.WriteBinaryFlagsParse(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryFlagsParseCustom(
            MutagenWriter writer,
            IPackageScriptFragmentsGetter item);

        public static void WriteBinaryFlagsParse(
            MutagenWriter writer,
            IPackageScriptFragmentsGetter item)
        {
            WriteBinaryFlagsParseCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IPackageScriptFragmentsGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IPackageScriptFragmentsGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class PackageScriptFragmentsBinaryCreateTranslation
    {
        public static readonly PackageScriptFragmentsBinaryCreateTranslation Instance = new PackageScriptFragmentsBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IPackageScriptFragments item,
            MutagenFrame frame)
        {
            item.ExtraBindDataVersion = frame.ReadUInt8();
            PackageScriptFragmentsBinaryCreateTranslation.FillBinaryFlagsParseCustom(
                frame: frame,
                item: item);
        }

        public static partial void FillBinaryFlagsParseCustom(
            MutagenFrame frame,
            IPackageScriptFragments item);

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class PackageScriptFragmentsBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IPackageScriptFragmentsGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PackageScriptFragmentsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class PackageScriptFragmentsBinaryOverlay :
        PluginBinaryOverlay,
        IPackageScriptFragmentsGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PackageScriptFragments_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => PackageScriptFragments_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PackageScriptFragmentsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PackageScriptFragmentsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPackageScriptFragmentsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IPackageScriptFragmentsGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IPackageScriptFragmentsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PackageScriptFragmentsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PackageScriptFragmentsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Byte ExtraBindDataVersion => _structData.Span[0x0];
        #region FlagsParse
        partial void FlagsParseCustomParse(
            OverlayStream stream,
            int offset);
        protected int FlagsParseEndingPos;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PackageScriptFragmentsBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IPackageScriptFragmentsGetter PackageScriptFragmentsFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new PackageScriptFragmentsBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x1;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IPackageScriptFragmentsGetter PackageScriptFragmentsFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return PackageScriptFragmentsFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PackageScriptFragmentsMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPackageScriptFragmentsGetter rhs) return false;
            return ((PackageScriptFragmentsCommon)((IPackageScriptFragmentsGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPackageScriptFragmentsGetter? obj)
        {
            return ((PackageScriptFragmentsCommon)((IPackageScriptFragmentsGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PackageScriptFragmentsCommon)((IPackageScriptFragmentsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

