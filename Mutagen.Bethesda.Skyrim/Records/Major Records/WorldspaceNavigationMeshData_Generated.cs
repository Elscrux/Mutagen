/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class WorldspaceNavigationMeshData :
        ANavigationMeshData,
        IEquatable<IWorldspaceNavigationMeshDataGetter>,
        ILoquiObjectSetter<WorldspaceNavigationMeshData>,
        IWorldspaceNavigationMeshData
    {
        #region Ctor
        public WorldspaceNavigationMeshData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Parent
        private readonly IFormLink<IWorldspaceGetter> _Parent = new FormLink<IWorldspaceGetter>();
        public IFormLink<IWorldspaceGetter> Parent
        {
            get => _Parent;
            set => _Parent.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IWorldspaceGetter> IWorldspaceNavigationMeshDataGetter.Parent => this.Parent;
        #endregion
        #region Coordinates
        public P2Int16 Coordinates { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WorldspaceNavigationMeshDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IWorldspaceNavigationMeshDataGetter rhs) return false;
            return ((WorldspaceNavigationMeshDataCommon)((IWorldspaceNavigationMeshDataGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IWorldspaceNavigationMeshDataGetter? obj)
        {
            return ((WorldspaceNavigationMeshDataCommon)((IWorldspaceNavigationMeshDataGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((WorldspaceNavigationMeshDataCommon)((IWorldspaceNavigationMeshDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            ANavigationMeshData.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Parent = initialValue;
                this.Coordinates = initialValue;
            }

            public Mask(
                TItem NavmeshVersion,
                TItem Magic,
                TItem Vertices,
                TItem Triangles,
                TItem EdgeLinks,
                TItem DoorTriangles,
                TItem NavmeshGridDivisor,
                TItem MaxDistanceX,
                TItem MaxDistanceY,
                TItem Min,
                TItem Max,
                TItem NavmeshGrid,
                TItem Parent,
                TItem Coordinates)
            : base(
                NavmeshVersion: NavmeshVersion,
                Magic: Magic,
                Vertices: Vertices,
                Triangles: Triangles,
                EdgeLinks: EdgeLinks,
                DoorTriangles: DoorTriangles,
                NavmeshGridDivisor: NavmeshGridDivisor,
                MaxDistanceX: MaxDistanceX,
                MaxDistanceY: MaxDistanceY,
                Min: Min,
                Max: Max,
                NavmeshGrid: NavmeshGrid)
            {
                this.Parent = Parent;
                this.Coordinates = Coordinates;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Parent;
            public TItem Coordinates;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Parent, rhs.Parent)) return false;
                if (!object.Equals(this.Coordinates, rhs.Coordinates)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Parent);
                hash.Add(this.Coordinates);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Parent)) return false;
                if (!eval(this.Coordinates)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Parent)) return true;
                if (eval(this.Coordinates)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new WorldspaceNavigationMeshData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Parent = eval(this.Parent);
                obj.Coordinates = eval(this.Coordinates);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(WorldspaceNavigationMeshData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, WorldspaceNavigationMeshData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(WorldspaceNavigationMeshData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Parent ?? true)
                    {
                        fg.AppendItem(Parent, "Parent");
                    }
                    if (printMask?.Coordinates ?? true)
                    {
                        fg.AppendItem(Coordinates, "Coordinates");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            ANavigationMeshData.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Parent;
            public Exception? Coordinates;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                WorldspaceNavigationMeshData_FieldIndex enu = (WorldspaceNavigationMeshData_FieldIndex)index;
                switch (enu)
                {
                    case WorldspaceNavigationMeshData_FieldIndex.Parent:
                        return Parent;
                    case WorldspaceNavigationMeshData_FieldIndex.Coordinates:
                        return Coordinates;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                WorldspaceNavigationMeshData_FieldIndex enu = (WorldspaceNavigationMeshData_FieldIndex)index;
                switch (enu)
                {
                    case WorldspaceNavigationMeshData_FieldIndex.Parent:
                        this.Parent = ex;
                        break;
                    case WorldspaceNavigationMeshData_FieldIndex.Coordinates:
                        this.Coordinates = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                WorldspaceNavigationMeshData_FieldIndex enu = (WorldspaceNavigationMeshData_FieldIndex)index;
                switch (enu)
                {
                    case WorldspaceNavigationMeshData_FieldIndex.Parent:
                        this.Parent = (Exception?)obj;
                        break;
                    case WorldspaceNavigationMeshData_FieldIndex.Coordinates:
                        this.Coordinates = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Parent != null) return true;
                if (Coordinates != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Parent, "Parent");
                fg.AppendItem(Coordinates, "Coordinates");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Parent = this.Parent.Combine(rhs.Parent);
                ret.Coordinates = this.Coordinates.Combine(rhs.Coordinates);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ANavigationMeshData.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Parent;
            public bool Coordinates;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Parent = defaultOn;
                this.Coordinates = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Parent, null));
                ret.Add((Coordinates, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => WorldspaceNavigationMeshDataCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WorldspaceNavigationMeshDataSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WorldspaceNavigationMeshDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((WorldspaceNavigationMeshDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static WorldspaceNavigationMeshData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new WorldspaceNavigationMeshData();
            ((WorldspaceNavigationMeshDataSetterCommon)((IWorldspaceNavigationMeshDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out WorldspaceNavigationMeshData item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((WorldspaceNavigationMeshDataSetterCommon)((IWorldspaceNavigationMeshDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new WorldspaceNavigationMeshData GetNew()
        {
            return new WorldspaceNavigationMeshData();
        }

    }
    #endregion

    #region Interface
    public partial interface IWorldspaceNavigationMeshData :
        IANavigationMeshData,
        IFormLinkContainer,
        ILoquiObjectSetter<IWorldspaceNavigationMeshData>,
        IWorldspaceNavigationMeshDataGetter
    {
        new IFormLink<IWorldspaceGetter> Parent { get; set; }
        new P2Int16 Coordinates { get; set; }
    }

    public partial interface IWorldspaceNavigationMeshDataGetter :
        IANavigationMeshDataGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IWorldspaceNavigationMeshDataGetter>
    {
        static new ILoquiRegistration StaticRegistration => WorldspaceNavigationMeshData_Registration.Instance;
        IFormLinkGetter<IWorldspaceGetter> Parent { get; }
        P2Int16 Coordinates { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class WorldspaceNavigationMeshDataMixIn
    {
        public static void Clear(this IWorldspaceNavigationMeshData item)
        {
            ((WorldspaceNavigationMeshDataSetterCommon)((IWorldspaceNavigationMeshDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static WorldspaceNavigationMeshData.Mask<bool> GetEqualsMask(
            this IWorldspaceNavigationMeshDataGetter item,
            IWorldspaceNavigationMeshDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WorldspaceNavigationMeshDataCommon)((IWorldspaceNavigationMeshDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IWorldspaceNavigationMeshDataGetter item,
            string? name = null,
            WorldspaceNavigationMeshData.Mask<bool>? printMask = null)
        {
            return ((WorldspaceNavigationMeshDataCommon)((IWorldspaceNavigationMeshDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IWorldspaceNavigationMeshDataGetter item,
            FileGeneration fg,
            string? name = null,
            WorldspaceNavigationMeshData.Mask<bool>? printMask = null)
        {
            ((WorldspaceNavigationMeshDataCommon)((IWorldspaceNavigationMeshDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IWorldspaceNavigationMeshDataGetter item,
            IWorldspaceNavigationMeshDataGetter rhs,
            WorldspaceNavigationMeshData.TranslationMask? equalsMask = null)
        {
            return ((WorldspaceNavigationMeshDataCommon)((IWorldspaceNavigationMeshDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IWorldspaceNavigationMeshData lhs,
            IWorldspaceNavigationMeshDataGetter rhs,
            out WorldspaceNavigationMeshData.ErrorMask errorMask,
            WorldspaceNavigationMeshData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((WorldspaceNavigationMeshDataSetterTranslationCommon)((IWorldspaceNavigationMeshDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = WorldspaceNavigationMeshData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IWorldspaceNavigationMeshData lhs,
            IWorldspaceNavigationMeshDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((WorldspaceNavigationMeshDataSetterTranslationCommon)((IWorldspaceNavigationMeshDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static WorldspaceNavigationMeshData DeepCopy(
            this IWorldspaceNavigationMeshDataGetter item,
            WorldspaceNavigationMeshData.TranslationMask? copyMask = null)
        {
            return ((WorldspaceNavigationMeshDataSetterTranslationCommon)((IWorldspaceNavigationMeshDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static WorldspaceNavigationMeshData DeepCopy(
            this IWorldspaceNavigationMeshDataGetter item,
            out WorldspaceNavigationMeshData.ErrorMask errorMask,
            WorldspaceNavigationMeshData.TranslationMask? copyMask = null)
        {
            return ((WorldspaceNavigationMeshDataSetterTranslationCommon)((IWorldspaceNavigationMeshDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static WorldspaceNavigationMeshData DeepCopy(
            this IWorldspaceNavigationMeshDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((WorldspaceNavigationMeshDataSetterTranslationCommon)((IWorldspaceNavigationMeshDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IWorldspaceNavigationMeshData item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((WorldspaceNavigationMeshDataSetterCommon)((IWorldspaceNavigationMeshDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum WorldspaceNavigationMeshData_FieldIndex
    {
        NavmeshVersion = 0,
        Magic = 1,
        Vertices = 2,
        Triangles = 3,
        EdgeLinks = 4,
        DoorTriangles = 5,
        NavmeshGridDivisor = 6,
        MaxDistanceX = 7,
        MaxDistanceY = 8,
        Min = 9,
        Max = 10,
        NavmeshGrid = 11,
        Parent = 12,
        Coordinates = 13,
    }
    #endregion

    #region Registration
    public partial class WorldspaceNavigationMeshData_Registration : ILoquiRegistration
    {
        public static readonly WorldspaceNavigationMeshData_Registration Instance = new WorldspaceNavigationMeshData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 325,
            version: 0);

        public const string GUID = "f11242bf-a5b1-431f-9a8a-49a5283a4c0a";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(WorldspaceNavigationMeshData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(WorldspaceNavigationMeshData.ErrorMask);

        public static readonly Type ClassType = typeof(WorldspaceNavigationMeshData);

        public static readonly Type GetterType = typeof(IWorldspaceNavigationMeshDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWorldspaceNavigationMeshData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.WorldspaceNavigationMeshData";

        public const string Name = "WorldspaceNavigationMeshData";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(WorldspaceNavigationMeshDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class WorldspaceNavigationMeshDataSetterCommon : ANavigationMeshDataSetterCommon
    {
        public new static readonly WorldspaceNavigationMeshDataSetterCommon Instance = new WorldspaceNavigationMeshDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IWorldspaceNavigationMeshData item)
        {
            ClearPartial();
            item.Parent.Clear();
            item.Coordinates = default;
            base.Clear(item);
        }
        
        public override void Clear(IANavigationMeshData item)
        {
            Clear(item: (IWorldspaceNavigationMeshData)item);
        }
        
        #region Mutagen
        public void RemapLinks(IWorldspaceNavigationMeshData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Parent.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IWorldspaceNavigationMeshData item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: WorldspaceNavigationMeshDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        public override void CopyInFromBinary(
            IANavigationMeshData item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (WorldspaceNavigationMeshData)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    public partial class WorldspaceNavigationMeshDataCommon : ANavigationMeshDataCommon
    {
        public new static readonly WorldspaceNavigationMeshDataCommon Instance = new WorldspaceNavigationMeshDataCommon();

        public WorldspaceNavigationMeshData.Mask<bool> GetEqualsMask(
            IWorldspaceNavigationMeshDataGetter item,
            IWorldspaceNavigationMeshDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new WorldspaceNavigationMeshData.Mask<bool>(false);
            ((WorldspaceNavigationMeshDataCommon)((IWorldspaceNavigationMeshDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWorldspaceNavigationMeshDataGetter item,
            IWorldspaceNavigationMeshDataGetter rhs,
            WorldspaceNavigationMeshData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Parent = item.Parent.Equals(rhs.Parent);
            ret.Coordinates = item.Coordinates.Equals(rhs.Coordinates);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IWorldspaceNavigationMeshDataGetter item,
            string? name = null,
            WorldspaceNavigationMeshData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IWorldspaceNavigationMeshDataGetter item,
            FileGeneration fg,
            string? name = null,
            WorldspaceNavigationMeshData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"WorldspaceNavigationMeshData =>");
            }
            else
            {
                fg.AppendLine($"{name} (WorldspaceNavigationMeshData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IWorldspaceNavigationMeshDataGetter item,
            FileGeneration fg,
            WorldspaceNavigationMeshData.Mask<bool>? printMask = null)
        {
            ANavigationMeshDataCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Parent ?? true)
            {
                fg.AppendItem(item.Parent.FormKey, "Parent");
            }
            if (printMask?.Coordinates ?? true)
            {
                fg.AppendItem(item.Coordinates, "Coordinates");
            }
        }
        
        public static WorldspaceNavigationMeshData_FieldIndex ConvertFieldIndex(ANavigationMeshData_FieldIndex index)
        {
            switch (index)
            {
                case ANavigationMeshData_FieldIndex.NavmeshVersion:
                    return (WorldspaceNavigationMeshData_FieldIndex)((int)index);
                case ANavigationMeshData_FieldIndex.Magic:
                    return (WorldspaceNavigationMeshData_FieldIndex)((int)index);
                case ANavigationMeshData_FieldIndex.Vertices:
                    return (WorldspaceNavigationMeshData_FieldIndex)((int)index);
                case ANavigationMeshData_FieldIndex.Triangles:
                    return (WorldspaceNavigationMeshData_FieldIndex)((int)index);
                case ANavigationMeshData_FieldIndex.EdgeLinks:
                    return (WorldspaceNavigationMeshData_FieldIndex)((int)index);
                case ANavigationMeshData_FieldIndex.DoorTriangles:
                    return (WorldspaceNavigationMeshData_FieldIndex)((int)index);
                case ANavigationMeshData_FieldIndex.NavmeshGridDivisor:
                    return (WorldspaceNavigationMeshData_FieldIndex)((int)index);
                case ANavigationMeshData_FieldIndex.MaxDistanceX:
                    return (WorldspaceNavigationMeshData_FieldIndex)((int)index);
                case ANavigationMeshData_FieldIndex.MaxDistanceY:
                    return (WorldspaceNavigationMeshData_FieldIndex)((int)index);
                case ANavigationMeshData_FieldIndex.Min:
                    return (WorldspaceNavigationMeshData_FieldIndex)((int)index);
                case ANavigationMeshData_FieldIndex.Max:
                    return (WorldspaceNavigationMeshData_FieldIndex)((int)index);
                case ANavigationMeshData_FieldIndex.NavmeshGrid:
                    return (WorldspaceNavigationMeshData_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWorldspaceNavigationMeshDataGetter? lhs,
            IWorldspaceNavigationMeshDataGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IANavigationMeshDataGetter)lhs, (IANavigationMeshDataGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)WorldspaceNavigationMeshData_FieldIndex.Parent) ?? true))
            {
                if (!lhs.Parent.Equals(rhs.Parent)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WorldspaceNavigationMeshData_FieldIndex.Coordinates) ?? true))
            {
                if (!lhs.Coordinates.Equals(rhs.Coordinates)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IANavigationMeshDataGetter? lhs,
            IANavigationMeshDataGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IWorldspaceNavigationMeshDataGetter?)lhs,
                rhs: rhs as IWorldspaceNavigationMeshDataGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(IWorldspaceNavigationMeshDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Parent);
            hash.Add(item.Coordinates);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IANavigationMeshDataGetter item)
        {
            return GetHashCode(item: (IWorldspaceNavigationMeshDataGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return WorldspaceNavigationMeshData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IWorldspaceNavigationMeshDataGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            yield return FormLinkInformation.Factory(obj.Parent);
            yield break;
        }
        
        #endregion
        
    }
    public partial class WorldspaceNavigationMeshDataSetterTranslationCommon : ANavigationMeshDataSetterTranslationCommon
    {
        public new static readonly WorldspaceNavigationMeshDataSetterTranslationCommon Instance = new WorldspaceNavigationMeshDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IWorldspaceNavigationMeshData item,
            IWorldspaceNavigationMeshDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IANavigationMeshData)item,
                (IANavigationMeshDataGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)WorldspaceNavigationMeshData_FieldIndex.Parent) ?? true))
            {
                item.Parent.SetTo(rhs.Parent.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)WorldspaceNavigationMeshData_FieldIndex.Coordinates) ?? true))
            {
                item.Coordinates = rhs.Coordinates;
            }
        }
        
        
        public override void DeepCopyIn(
            IANavigationMeshData item,
            IANavigationMeshDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWorldspaceNavigationMeshData)item,
                rhs: (IWorldspaceNavigationMeshDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public WorldspaceNavigationMeshData DeepCopy(
            IWorldspaceNavigationMeshDataGetter item,
            WorldspaceNavigationMeshData.TranslationMask? copyMask = null)
        {
            WorldspaceNavigationMeshData ret = (WorldspaceNavigationMeshData)((WorldspaceNavigationMeshDataCommon)((IWorldspaceNavigationMeshDataGetter)item).CommonInstance()!).GetNew();
            ((WorldspaceNavigationMeshDataSetterTranslationCommon)((IWorldspaceNavigationMeshDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public WorldspaceNavigationMeshData DeepCopy(
            IWorldspaceNavigationMeshDataGetter item,
            out WorldspaceNavigationMeshData.ErrorMask errorMask,
            WorldspaceNavigationMeshData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            WorldspaceNavigationMeshData ret = (WorldspaceNavigationMeshData)((WorldspaceNavigationMeshDataCommon)((IWorldspaceNavigationMeshDataGetter)item).CommonInstance()!).GetNew();
            ((WorldspaceNavigationMeshDataSetterTranslationCommon)((IWorldspaceNavigationMeshDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = WorldspaceNavigationMeshData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public WorldspaceNavigationMeshData DeepCopy(
            IWorldspaceNavigationMeshDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            WorldspaceNavigationMeshData ret = (WorldspaceNavigationMeshData)((WorldspaceNavigationMeshDataCommon)((IWorldspaceNavigationMeshDataGetter)item).CommonInstance()!).GetNew();
            ((WorldspaceNavigationMeshDataSetterTranslationCommon)((IWorldspaceNavigationMeshDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class WorldspaceNavigationMeshData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WorldspaceNavigationMeshData_Registration.Instance;
        public new static WorldspaceNavigationMeshData_Registration StaticRegistration => WorldspaceNavigationMeshData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WorldspaceNavigationMeshDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return WorldspaceNavigationMeshDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WorldspaceNavigationMeshDataSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class WorldspaceNavigationMeshDataBinaryWriteTranslation :
        ANavigationMeshDataBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static WorldspaceNavigationMeshDataBinaryWriteTranslation Instance = new WorldspaceNavigationMeshDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            IWorldspaceNavigationMeshDataGetter item,
            MutagenWriter writer)
        {
            ANavigationMeshDataBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            IWorldspaceNavigationMeshDataGetter item,
            TypedWriteParams? translationParams = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IWorldspaceNavigationMeshDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IANavigationMeshDataGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IWorldspaceNavigationMeshDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class WorldspaceNavigationMeshDataBinaryCreateTranslation : ANavigationMeshDataBinaryCreateTranslation
    {
        public new readonly static WorldspaceNavigationMeshDataBinaryCreateTranslation Instance = new WorldspaceNavigationMeshDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IWorldspaceNavigationMeshData item,
            MutagenFrame frame)
        {
            ANavigationMeshDataBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class WorldspaceNavigationMeshDataBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class WorldspaceNavigationMeshDataBinaryOverlay :
        ANavigationMeshDataBinaryOverlay,
        IWorldspaceNavigationMeshDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WorldspaceNavigationMeshData_Registration.Instance;
        public new static WorldspaceNavigationMeshData_Registration StaticRegistration => WorldspaceNavigationMeshData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WorldspaceNavigationMeshDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WorldspaceNavigationMeshDataSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => WorldspaceNavigationMeshDataCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WorldspaceNavigationMeshDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((WorldspaceNavigationMeshDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected WorldspaceNavigationMeshDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static WorldspaceNavigationMeshDataBinaryOverlay WorldspaceNavigationMeshDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new WorldspaceNavigationMeshDataBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            stream.Position += ret.DoorTrianglesEndingPos;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static WorldspaceNavigationMeshDataBinaryOverlay WorldspaceNavigationMeshDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return WorldspaceNavigationMeshDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WorldspaceNavigationMeshDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IWorldspaceNavigationMeshDataGetter rhs) return false;
            return ((WorldspaceNavigationMeshDataCommon)((IWorldspaceNavigationMeshDataGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IWorldspaceNavigationMeshDataGetter? obj)
        {
            return ((WorldspaceNavigationMeshDataCommon)((IWorldspaceNavigationMeshDataGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((WorldspaceNavigationMeshDataCommon)((IWorldspaceNavigationMeshDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

