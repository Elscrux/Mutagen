/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class AlphaLayer :
        BaseLayer,
        IAlphaLayer,
        IEquatable<IAlphaLayerGetter>,
        ILoquiObjectSetter<AlphaLayer>
    {
        #region Ctor
        public AlphaLayer()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region AlphaLayerData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _AlphaLayerData;
        public MemorySlice<Byte>? AlphaLayerData
        {
            get => this._AlphaLayerData;
            set => this._AlphaLayerData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IAlphaLayerGetter.AlphaLayerData => this.AlphaLayerData;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            AlphaLayerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IAlphaLayerGetter rhs) return false;
            return ((AlphaLayerCommon)((IAlphaLayerGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IAlphaLayerGetter? obj)
        {
            return ((AlphaLayerCommon)((IAlphaLayerGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((AlphaLayerCommon)((IAlphaLayerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            BaseLayer.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.AlphaLayerData = initialValue;
            }

            public Mask(
                TItem Header,
                TItem AlphaLayerData)
            : base(Header: Header)
            {
                this.AlphaLayerData = AlphaLayerData;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem AlphaLayerData;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.AlphaLayerData, rhs.AlphaLayerData)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.AlphaLayerData);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.AlphaLayerData)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.AlphaLayerData)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AlphaLayer.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.AlphaLayerData = eval(this.AlphaLayerData);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(AlphaLayer.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, AlphaLayer.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(AlphaLayer.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.AlphaLayerData ?? true)
                    {
                        fg.AppendItem(AlphaLayerData, "AlphaLayerData");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            BaseLayer.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? AlphaLayerData;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                AlphaLayer_FieldIndex enu = (AlphaLayer_FieldIndex)index;
                switch (enu)
                {
                    case AlphaLayer_FieldIndex.AlphaLayerData:
                        return AlphaLayerData;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                AlphaLayer_FieldIndex enu = (AlphaLayer_FieldIndex)index;
                switch (enu)
                {
                    case AlphaLayer_FieldIndex.AlphaLayerData:
                        this.AlphaLayerData = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                AlphaLayer_FieldIndex enu = (AlphaLayer_FieldIndex)index;
                switch (enu)
                {
                    case AlphaLayer_FieldIndex.AlphaLayerData:
                        this.AlphaLayerData = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (AlphaLayerData != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(AlphaLayerData, "AlphaLayerData");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.AlphaLayerData = this.AlphaLayerData.Combine(rhs.AlphaLayerData);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            BaseLayer.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool AlphaLayerData;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.AlphaLayerData = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((AlphaLayerData, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = AlphaLayer_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => AlphaLayerCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => AlphaLayerSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AlphaLayerBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((AlphaLayerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static AlphaLayer CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new AlphaLayer();
            ((AlphaLayerSetterCommon)((IAlphaLayerGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out AlphaLayer item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((AlphaLayerSetterCommon)((IAlphaLayerGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new AlphaLayer GetNew()
        {
            return new AlphaLayer();
        }

    }
    #endregion

    #region Interface
    public partial interface IAlphaLayer :
        IAlphaLayerGetter,
        IBaseLayer,
        ILoquiObjectSetter<IAlphaLayer>
    {
        new MemorySlice<Byte>? AlphaLayerData { get; set; }
    }

    public partial interface IAlphaLayerGetter :
        IBaseLayerGetter,
        IBinaryItem,
        ILoquiObject<IAlphaLayerGetter>
    {
        static new ILoquiRegistration StaticRegistration => AlphaLayer_Registration.Instance;
        ReadOnlyMemorySlice<Byte>? AlphaLayerData { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class AlphaLayerMixIn
    {
        public static void Clear(this IAlphaLayer item)
        {
            ((AlphaLayerSetterCommon)((IAlphaLayerGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AlphaLayer.Mask<bool> GetEqualsMask(
            this IAlphaLayerGetter item,
            IAlphaLayerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AlphaLayerCommon)((IAlphaLayerGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IAlphaLayerGetter item,
            string? name = null,
            AlphaLayer.Mask<bool>? printMask = null)
        {
            return ((AlphaLayerCommon)((IAlphaLayerGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IAlphaLayerGetter item,
            FileGeneration fg,
            string? name = null,
            AlphaLayer.Mask<bool>? printMask = null)
        {
            ((AlphaLayerCommon)((IAlphaLayerGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IAlphaLayerGetter item,
            IAlphaLayerGetter rhs,
            AlphaLayer.TranslationMask? equalsMask = null)
        {
            return ((AlphaLayerCommon)((IAlphaLayerGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IAlphaLayer lhs,
            IAlphaLayerGetter rhs,
            out AlphaLayer.ErrorMask errorMask,
            AlphaLayer.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AlphaLayerSetterTranslationCommon)((IAlphaLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = AlphaLayer.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAlphaLayer lhs,
            IAlphaLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AlphaLayerSetterTranslationCommon)((IAlphaLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static AlphaLayer DeepCopy(
            this IAlphaLayerGetter item,
            AlphaLayer.TranslationMask? copyMask = null)
        {
            return ((AlphaLayerSetterTranslationCommon)((IAlphaLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AlphaLayer DeepCopy(
            this IAlphaLayerGetter item,
            out AlphaLayer.ErrorMask errorMask,
            AlphaLayer.TranslationMask? copyMask = null)
        {
            return ((AlphaLayerSetterTranslationCommon)((IAlphaLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AlphaLayer DeepCopy(
            this IAlphaLayerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AlphaLayerSetterTranslationCommon)((IAlphaLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IAlphaLayer item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((AlphaLayerSetterCommon)((IAlphaLayerGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum AlphaLayer_FieldIndex
    {
        Header = 0,
        AlphaLayerData = 1,
    }
    #endregion

    #region Registration
    public partial class AlphaLayer_Registration : ILoquiRegistration
    {
        public static readonly AlphaLayer_Registration Instance = new AlphaLayer_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 347,
            version: 0);

        public const string GUID = "5a9a0528-b3b8-4e01-85cb-f0f41578f8cb";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(AlphaLayer.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AlphaLayer.ErrorMask);

        public static readonly Type ClassType = typeof(AlphaLayer);

        public static readonly Type GetterType = typeof(IAlphaLayerGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAlphaLayer);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.AlphaLayer";

        public const string Name = "AlphaLayer";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ATXT;
        public static RecordTypeConverter BaseConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("BTXT"),
                new RecordType("ATXT")));
        public static readonly Type BinaryWriteTranslation = typeof(AlphaLayerBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class AlphaLayerSetterCommon : BaseLayerSetterCommon
    {
        public new static readonly AlphaLayerSetterCommon Instance = new AlphaLayerSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IAlphaLayer item)
        {
            ClearPartial();
            item.AlphaLayerData = default;
            base.Clear(item);
        }
        
        public override void Clear(IBaseLayer item)
        {
            Clear(item: (IAlphaLayer)item);
        }
        
        #region Mutagen
        public void RemapLinks(IAlphaLayer obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAlphaLayer item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: AlphaLayerBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: AlphaLayerBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IBaseLayer item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (AlphaLayer)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    public partial class AlphaLayerCommon : BaseLayerCommon
    {
        public new static readonly AlphaLayerCommon Instance = new AlphaLayerCommon();

        public AlphaLayer.Mask<bool> GetEqualsMask(
            IAlphaLayerGetter item,
            IAlphaLayerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AlphaLayer.Mask<bool>(false);
            ((AlphaLayerCommon)((IAlphaLayerGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAlphaLayerGetter item,
            IAlphaLayerGetter rhs,
            AlphaLayer.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.AlphaLayerData = MemorySliceExt.Equal(item.AlphaLayerData, rhs.AlphaLayerData);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IAlphaLayerGetter item,
            string? name = null,
            AlphaLayer.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IAlphaLayerGetter item,
            FileGeneration fg,
            string? name = null,
            AlphaLayer.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"AlphaLayer =>");
            }
            else
            {
                fg.AppendLine($"{name} (AlphaLayer) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IAlphaLayerGetter item,
            FileGeneration fg,
            AlphaLayer.Mask<bool>? printMask = null)
        {
            BaseLayerCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.AlphaLayerData ?? true)
                && item.AlphaLayerData is {} AlphaLayerDataItem)
            {
                fg.AppendLine($"AlphaLayerData => {SpanExt.ToHexString(AlphaLayerDataItem)}");
            }
        }
        
        public static AlphaLayer_FieldIndex ConvertFieldIndex(BaseLayer_FieldIndex index)
        {
            switch (index)
            {
                case BaseLayer_FieldIndex.Header:
                    return (AlphaLayer_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAlphaLayerGetter? lhs,
            IAlphaLayerGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IBaseLayerGetter)lhs, (IBaseLayerGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)AlphaLayer_FieldIndex.AlphaLayerData) ?? true))
            {
                if (!MemorySliceExt.Equal(lhs.AlphaLayerData, rhs.AlphaLayerData)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IBaseLayerGetter? lhs,
            IBaseLayerGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IAlphaLayerGetter?)lhs,
                rhs: rhs as IAlphaLayerGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(IAlphaLayerGetter item)
        {
            var hash = new HashCode();
            if (item.AlphaLayerData is {} AlphaLayerDataItem)
            {
                hash.Add(AlphaLayerDataItem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IBaseLayerGetter item)
        {
            return GetHashCode(item: (IAlphaLayerGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return AlphaLayer.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IAlphaLayerGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class AlphaLayerSetterTranslationCommon : BaseLayerSetterTranslationCommon
    {
        public new static readonly AlphaLayerSetterTranslationCommon Instance = new AlphaLayerSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IAlphaLayer item,
            IAlphaLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IBaseLayer)item,
                (IBaseLayerGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)AlphaLayer_FieldIndex.AlphaLayerData) ?? true))
            {
                if(rhs.AlphaLayerData is {} AlphaLayerDatarhs)
                {
                    item.AlphaLayerData = AlphaLayerDatarhs.ToArray();
                }
                else
                {
                    item.AlphaLayerData = default;
                }
            }
        }
        
        
        public override void DeepCopyIn(
            IBaseLayer item,
            IBaseLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAlphaLayer)item,
                rhs: (IAlphaLayerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public AlphaLayer DeepCopy(
            IAlphaLayerGetter item,
            AlphaLayer.TranslationMask? copyMask = null)
        {
            AlphaLayer ret = (AlphaLayer)((AlphaLayerCommon)((IAlphaLayerGetter)item).CommonInstance()!).GetNew();
            ((AlphaLayerSetterTranslationCommon)((IAlphaLayerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public AlphaLayer DeepCopy(
            IAlphaLayerGetter item,
            out AlphaLayer.ErrorMask errorMask,
            AlphaLayer.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AlphaLayer ret = (AlphaLayer)((AlphaLayerCommon)((IAlphaLayerGetter)item).CommonInstance()!).GetNew();
            ((AlphaLayerSetterTranslationCommon)((IAlphaLayerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = AlphaLayer.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public AlphaLayer DeepCopy(
            IAlphaLayerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AlphaLayer ret = (AlphaLayer)((AlphaLayerCommon)((IAlphaLayerGetter)item).CommonInstance()!).GetNew();
            ((AlphaLayerSetterTranslationCommon)((IAlphaLayerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class AlphaLayer
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AlphaLayer_Registration.Instance;
        public new static AlphaLayer_Registration StaticRegistration => AlphaLayer_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AlphaLayerCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return AlphaLayerSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AlphaLayerSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class AlphaLayerBinaryWriteTranslation :
        BaseLayerBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static AlphaLayerBinaryWriteTranslation Instance = new AlphaLayerBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IAlphaLayerGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            BaseLayerBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams.Combine(AlphaLayer_Registration.BaseConverter));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AlphaLayerData,
                header: translationParams.ConvertToCustom(RecordTypes.VTXT));
        }

        public void Write(
            MutagenWriter writer,
            IAlphaLayerGetter item,
            TypedWriteParams? translationParams = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IAlphaLayerGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IBaseLayerGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IAlphaLayerGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class AlphaLayerBinaryCreateTranslation : BaseLayerBinaryCreateTranslation
    {
        public new readonly static AlphaLayerBinaryCreateTranslation Instance = new AlphaLayerBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IAlphaLayer item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VTXT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AlphaLayerData = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)AlphaLayer_FieldIndex.AlphaLayerData;
                }
                default:
                    return BaseLayerBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.With(AlphaLayer_Registration.BaseConverter));
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class AlphaLayerBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class AlphaLayerBinaryOverlay :
        BaseLayerBinaryOverlay,
        IAlphaLayerGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AlphaLayer_Registration.Instance;
        public new static AlphaLayer_Registration StaticRegistration => AlphaLayer_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AlphaLayerCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AlphaLayerSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AlphaLayerBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((AlphaLayerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region AlphaLayerData
        private int? _AlphaLayerDataLocation;
        public ReadOnlyMemorySlice<Byte>? AlphaLayerData => _AlphaLayerDataLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _AlphaLayerDataLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected AlphaLayerBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static AlphaLayerBinaryOverlay AlphaLayerFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new AlphaLayerBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static AlphaLayerBinaryOverlay AlphaLayerFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return AlphaLayerFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VTXT:
                {
                    _AlphaLayerDataLocation = (stream.Position - offset);
                    return (int)AlphaLayer_FieldIndex.AlphaLayerData;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        parseParams: AlphaLayer_Registration.BaseConverter);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            AlphaLayerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IAlphaLayerGetter rhs) return false;
            return ((AlphaLayerCommon)((IAlphaLayerGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IAlphaLayerGetter? obj)
        {
            return ((AlphaLayerCommon)((IAlphaLayerGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((AlphaLayerCommon)((IAlphaLayerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

