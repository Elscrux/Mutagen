/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class CreateReferenceToObject :
        ICreateReferenceToObject,
        IEquatable<ICreateReferenceToObjectGetter>,
        ILoquiObjectSetter<CreateReferenceToObject>
    {
        #region Ctor
        public CreateReferenceToObject()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Object
        private readonly IFormLink<ISkyrimMajorRecordGetter> _Object = new FormLink<ISkyrimMajorRecordGetter>();
        public IFormLink<ISkyrimMajorRecordGetter> Object
        {
            get => _Object;
            set => _Object.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ISkyrimMajorRecordGetter> ICreateReferenceToObjectGetter.Object => this.Object;
        #endregion
        #region AliasIndex
        public Int16 AliasIndex { get; set; } = default;
        #endregion
        #region Create
        public CreateReferenceToObject.CreateEnum Create { get; set; } = default;
        #endregion
        #region Level
        public Level Level { get; set; } = default;
        #endregion
        #region ALCADataTypeState
        public CreateReferenceToObject.ALCADataType ALCADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CreateReferenceToObjectMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICreateReferenceToObjectGetter rhs) return false;
            return ((CreateReferenceToObjectCommon)((ICreateReferenceToObjectGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(ICreateReferenceToObjectGetter? obj)
        {
            return ((CreateReferenceToObjectCommon)((ICreateReferenceToObjectGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((CreateReferenceToObjectCommon)((ICreateReferenceToObjectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Object = initialValue;
                this.AliasIndex = initialValue;
                this.Create = initialValue;
                this.Level = initialValue;
                this.ALCADataTypeState = initialValue;
            }

            public Mask(
                TItem Object,
                TItem AliasIndex,
                TItem Create,
                TItem Level,
                TItem ALCADataTypeState)
            {
                this.Object = Object;
                this.AliasIndex = AliasIndex;
                this.Create = Create;
                this.Level = Level;
                this.ALCADataTypeState = ALCADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Object;
            public TItem AliasIndex;
            public TItem Create;
            public TItem Level;
            public TItem ALCADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Object, rhs.Object)) return false;
                if (!object.Equals(this.AliasIndex, rhs.AliasIndex)) return false;
                if (!object.Equals(this.Create, rhs.Create)) return false;
                if (!object.Equals(this.Level, rhs.Level)) return false;
                if (!object.Equals(this.ALCADataTypeState, rhs.ALCADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Object);
                hash.Add(this.AliasIndex);
                hash.Add(this.Create);
                hash.Add(this.Level);
                hash.Add(this.ALCADataTypeState);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Object)) return false;
                if (!eval(this.AliasIndex)) return false;
                if (!eval(this.Create)) return false;
                if (!eval(this.Level)) return false;
                if (!eval(this.ALCADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Object)) return true;
                if (eval(this.AliasIndex)) return true;
                if (eval(this.Create)) return true;
                if (eval(this.Level)) return true;
                if (eval(this.ALCADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CreateReferenceToObject.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Object = eval(this.Object);
                obj.AliasIndex = eval(this.AliasIndex);
                obj.Create = eval(this.Create);
                obj.Level = eval(this.Level);
                obj.ALCADataTypeState = eval(this.ALCADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(CreateReferenceToObject.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, CreateReferenceToObject.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(CreateReferenceToObject.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Object ?? true)
                    {
                        fg.AppendItem(Object, "Object");
                    }
                    if (printMask?.AliasIndex ?? true)
                    {
                        fg.AppendItem(AliasIndex, "AliasIndex");
                    }
                    if (printMask?.Create ?? true)
                    {
                        fg.AppendItem(Create, "Create");
                    }
                    if (printMask?.Level ?? true)
                    {
                        fg.AppendItem(Level, "Level");
                    }
                    if (printMask?.ALCADataTypeState ?? true)
                    {
                        fg.AppendItem(ALCADataTypeState, "ALCADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Object;
            public Exception? AliasIndex;
            public Exception? Create;
            public Exception? Level;
            public Exception? ALCADataTypeState;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                CreateReferenceToObject_FieldIndex enu = (CreateReferenceToObject_FieldIndex)index;
                switch (enu)
                {
                    case CreateReferenceToObject_FieldIndex.Object:
                        return Object;
                    case CreateReferenceToObject_FieldIndex.AliasIndex:
                        return AliasIndex;
                    case CreateReferenceToObject_FieldIndex.Create:
                        return Create;
                    case CreateReferenceToObject_FieldIndex.Level:
                        return Level;
                    case CreateReferenceToObject_FieldIndex.ALCADataTypeState:
                        return ALCADataTypeState;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                CreateReferenceToObject_FieldIndex enu = (CreateReferenceToObject_FieldIndex)index;
                switch (enu)
                {
                    case CreateReferenceToObject_FieldIndex.Object:
                        this.Object = ex;
                        break;
                    case CreateReferenceToObject_FieldIndex.AliasIndex:
                        this.AliasIndex = ex;
                        break;
                    case CreateReferenceToObject_FieldIndex.Create:
                        this.Create = ex;
                        break;
                    case CreateReferenceToObject_FieldIndex.Level:
                        this.Level = ex;
                        break;
                    case CreateReferenceToObject_FieldIndex.ALCADataTypeState:
                        this.ALCADataTypeState = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                CreateReferenceToObject_FieldIndex enu = (CreateReferenceToObject_FieldIndex)index;
                switch (enu)
                {
                    case CreateReferenceToObject_FieldIndex.Object:
                        this.Object = (Exception?)obj;
                        break;
                    case CreateReferenceToObject_FieldIndex.AliasIndex:
                        this.AliasIndex = (Exception?)obj;
                        break;
                    case CreateReferenceToObject_FieldIndex.Create:
                        this.Create = (Exception?)obj;
                        break;
                    case CreateReferenceToObject_FieldIndex.Level:
                        this.Level = (Exception?)obj;
                        break;
                    case CreateReferenceToObject_FieldIndex.ALCADataTypeState:
                        this.ALCADataTypeState = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Object != null) return true;
                if (AliasIndex != null) return true;
                if (Create != null) return true;
                if (Level != null) return true;
                if (ALCADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Object, "Object");
                fg.AppendItem(AliasIndex, "AliasIndex");
                fg.AppendItem(Create, "Create");
                fg.AppendItem(Level, "Level");
                fg.AppendItem(ALCADataTypeState, "ALCADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Object = this.Object.Combine(rhs.Object);
                ret.AliasIndex = this.AliasIndex.Combine(rhs.AliasIndex);
                ret.Create = this.Create.Combine(rhs.Create);
                ret.Level = this.Level.Combine(rhs.Level);
                ret.ALCADataTypeState = this.ALCADataTypeState.Combine(rhs.ALCADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Object;
            public bool AliasIndex;
            public bool Create;
            public bool Level;
            public bool ALCADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Object = defaultOn;
                this.AliasIndex = defaultOn;
                this.Create = defaultOn;
                this.Level = defaultOn;
                this.ALCADataTypeState = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Object, null));
                ret.Add((AliasIndex, null));
                ret.Add((Create, null));
                ret.Add((Level, null));
                ret.Add((ALCADataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = CreateReferenceToObject_Registration.TriggeringRecordType;
        public IEnumerable<IFormLinkGetter> ContainedFormLinks => CreateReferenceToObjectCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CreateReferenceToObjectSetterCommon.Instance.RemapLinks(this, mapping);
        [Flags]
        public enum ALCADataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CreateReferenceToObjectBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((CreateReferenceToObjectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static CreateReferenceToObject CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new CreateReferenceToObject();
            ((CreateReferenceToObjectSetterCommon)((ICreateReferenceToObjectGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CreateReferenceToObject item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((CreateReferenceToObjectSetterCommon)((ICreateReferenceToObjectGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static CreateReferenceToObject GetNew()
        {
            return new CreateReferenceToObject();
        }

    }
    #endregion

    #region Interface
    public partial interface ICreateReferenceToObject :
        ICreateReferenceToObjectGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<ICreateReferenceToObject>
    {
        new IFormLink<ISkyrimMajorRecordGetter> Object { get; set; }
        new Int16 AliasIndex { get; set; }
        new CreateReferenceToObject.CreateEnum Create { get; set; }
        new Level Level { get; set; }
        new CreateReferenceToObject.ALCADataType ALCADataTypeState { get; set; }
    }

    public partial interface ICreateReferenceToObjectGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ICreateReferenceToObjectGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => CreateReferenceToObject_Registration.Instance;
        IFormLinkGetter<ISkyrimMajorRecordGetter> Object { get; }
        Int16 AliasIndex { get; }
        CreateReferenceToObject.CreateEnum Create { get; }
        Level Level { get; }
        CreateReferenceToObject.ALCADataType ALCADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CreateReferenceToObjectMixIn
    {
        public static void Clear(this ICreateReferenceToObject item)
        {
            ((CreateReferenceToObjectSetterCommon)((ICreateReferenceToObjectGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CreateReferenceToObject.Mask<bool> GetEqualsMask(
            this ICreateReferenceToObjectGetter item,
            ICreateReferenceToObjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CreateReferenceToObjectCommon)((ICreateReferenceToObjectGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICreateReferenceToObjectGetter item,
            string? name = null,
            CreateReferenceToObject.Mask<bool>? printMask = null)
        {
            return ((CreateReferenceToObjectCommon)((ICreateReferenceToObjectGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICreateReferenceToObjectGetter item,
            FileGeneration fg,
            string? name = null,
            CreateReferenceToObject.Mask<bool>? printMask = null)
        {
            ((CreateReferenceToObjectCommon)((ICreateReferenceToObjectGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICreateReferenceToObjectGetter item,
            ICreateReferenceToObjectGetter rhs,
            CreateReferenceToObject.TranslationMask? equalsMask = null)
        {
            return ((CreateReferenceToObjectCommon)((ICreateReferenceToObjectGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ICreateReferenceToObject lhs,
            ICreateReferenceToObjectGetter rhs)
        {
            ((CreateReferenceToObjectSetterTranslationCommon)((ICreateReferenceToObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICreateReferenceToObject lhs,
            ICreateReferenceToObjectGetter rhs,
            CreateReferenceToObject.TranslationMask? copyMask = null)
        {
            ((CreateReferenceToObjectSetterTranslationCommon)((ICreateReferenceToObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICreateReferenceToObject lhs,
            ICreateReferenceToObjectGetter rhs,
            out CreateReferenceToObject.ErrorMask errorMask,
            CreateReferenceToObject.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CreateReferenceToObjectSetterTranslationCommon)((ICreateReferenceToObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = CreateReferenceToObject.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICreateReferenceToObject lhs,
            ICreateReferenceToObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CreateReferenceToObjectSetterTranslationCommon)((ICreateReferenceToObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static CreateReferenceToObject DeepCopy(
            this ICreateReferenceToObjectGetter item,
            CreateReferenceToObject.TranslationMask? copyMask = null)
        {
            return ((CreateReferenceToObjectSetterTranslationCommon)((ICreateReferenceToObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CreateReferenceToObject DeepCopy(
            this ICreateReferenceToObjectGetter item,
            out CreateReferenceToObject.ErrorMask errorMask,
            CreateReferenceToObject.TranslationMask? copyMask = null)
        {
            return ((CreateReferenceToObjectSetterTranslationCommon)((ICreateReferenceToObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CreateReferenceToObject DeepCopy(
            this ICreateReferenceToObjectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CreateReferenceToObjectSetterTranslationCommon)((ICreateReferenceToObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICreateReferenceToObject item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((CreateReferenceToObjectSetterCommon)((ICreateReferenceToObjectGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum CreateReferenceToObject_FieldIndex
    {
        Object = 0,
        AliasIndex = 1,
        Create = 2,
        Level = 3,
        ALCADataTypeState = 4,
    }
    #endregion

    #region Registration
    public partial class CreateReferenceToObject_Registration : ILoquiRegistration
    {
        public static readonly CreateReferenceToObject_Registration Instance = new CreateReferenceToObject_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 370,
            version: 0);

        public const string GUID = "e41a23e7-3945-4c1a-b550-a51f7d5de2ba";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(CreateReferenceToObject.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CreateReferenceToObject.ErrorMask);

        public static readonly Type ClassType = typeof(CreateReferenceToObject);

        public static readonly Type GetterType = typeof(ICreateReferenceToObjectGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICreateReferenceToObject);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.CreateReferenceToObject";

        public const string Name = "CreateReferenceToObject";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ALCO;
        public static readonly Type BinaryWriteTranslation = typeof(CreateReferenceToObjectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class CreateReferenceToObjectSetterCommon
    {
        public static readonly CreateReferenceToObjectSetterCommon Instance = new CreateReferenceToObjectSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICreateReferenceToObject item)
        {
            ClearPartial();
            item.Object.Clear();
            item.AliasIndex = default;
            item.Create = default;
            item.Level = default;
            item.ALCADataTypeState = default;
        }
        
        #region Mutagen
        public void RemapLinks(ICreateReferenceToObject obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Object.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICreateReferenceToObject item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: CreateReferenceToObjectBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: CreateReferenceToObjectBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class CreateReferenceToObjectCommon
    {
        public static readonly CreateReferenceToObjectCommon Instance = new CreateReferenceToObjectCommon();

        public CreateReferenceToObject.Mask<bool> GetEqualsMask(
            ICreateReferenceToObjectGetter item,
            ICreateReferenceToObjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CreateReferenceToObject.Mask<bool>(false);
            ((CreateReferenceToObjectCommon)((ICreateReferenceToObjectGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICreateReferenceToObjectGetter item,
            ICreateReferenceToObjectGetter rhs,
            CreateReferenceToObject.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Object = item.Object.Equals(rhs.Object);
            ret.AliasIndex = item.AliasIndex == rhs.AliasIndex;
            ret.Create = item.Create == rhs.Create;
            ret.Level = item.Level == rhs.Level;
            ret.ALCADataTypeState = item.ALCADataTypeState == rhs.ALCADataTypeState;
        }
        
        public string ToString(
            ICreateReferenceToObjectGetter item,
            string? name = null,
            CreateReferenceToObject.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ICreateReferenceToObjectGetter item,
            FileGeneration fg,
            string? name = null,
            CreateReferenceToObject.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"CreateReferenceToObject =>");
            }
            else
            {
                fg.AppendLine($"{name} (CreateReferenceToObject) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ICreateReferenceToObjectGetter item,
            FileGeneration fg,
            CreateReferenceToObject.Mask<bool>? printMask = null)
        {
            if (printMask?.Object ?? true)
            {
                fg.AppendItem(item.Object.FormKey, "Object");
            }
            if (printMask?.AliasIndex ?? true)
            {
                fg.AppendItem(item.AliasIndex, "AliasIndex");
            }
            if (printMask?.Create ?? true)
            {
                fg.AppendItem(item.Create, "Create");
            }
            if (printMask?.Level ?? true)
            {
                fg.AppendItem(item.Level, "Level");
            }
            if (printMask?.ALCADataTypeState ?? true)
            {
                fg.AppendItem(item.ALCADataTypeState, "ALCADataTypeState");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICreateReferenceToObjectGetter? lhs,
            ICreateReferenceToObjectGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)CreateReferenceToObject_FieldIndex.Object) ?? true))
            {
                if (!lhs.Object.Equals(rhs.Object)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CreateReferenceToObject_FieldIndex.AliasIndex) ?? true))
            {
                if (lhs.AliasIndex != rhs.AliasIndex) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CreateReferenceToObject_FieldIndex.Create) ?? true))
            {
                if (lhs.Create != rhs.Create) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CreateReferenceToObject_FieldIndex.Level) ?? true))
            {
                if (lhs.Level != rhs.Level) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CreateReferenceToObject_FieldIndex.ALCADataTypeState) ?? true))
            {
                if (lhs.ALCADataTypeState != rhs.ALCADataTypeState) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ICreateReferenceToObjectGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Object);
            hash.Add(item.AliasIndex);
            hash.Add(item.Create);
            hash.Add(item.Level);
            hash.Add(item.ALCADataTypeState);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return CreateReferenceToObject.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(ICreateReferenceToObjectGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.Object);
            yield break;
        }
        
        #endregion
        
    }
    public partial class CreateReferenceToObjectSetterTranslationCommon
    {
        public static readonly CreateReferenceToObjectSetterTranslationCommon Instance = new CreateReferenceToObjectSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICreateReferenceToObject item,
            ICreateReferenceToObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)CreateReferenceToObject_FieldIndex.Object) ?? true))
            {
                item.Object.SetTo(rhs.Object.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)CreateReferenceToObject_FieldIndex.AliasIndex) ?? true))
            {
                item.AliasIndex = rhs.AliasIndex;
            }
            if ((copyMask?.GetShouldTranslate((int)CreateReferenceToObject_FieldIndex.Create) ?? true))
            {
                item.Create = rhs.Create;
            }
            if ((copyMask?.GetShouldTranslate((int)CreateReferenceToObject_FieldIndex.Level) ?? true))
            {
                item.Level = rhs.Level;
            }
            if ((copyMask?.GetShouldTranslate((int)CreateReferenceToObject_FieldIndex.ALCADataTypeState) ?? true))
            {
                item.ALCADataTypeState = rhs.ALCADataTypeState;
            }
        }
        
        #endregion
        
        public CreateReferenceToObject DeepCopy(
            ICreateReferenceToObjectGetter item,
            CreateReferenceToObject.TranslationMask? copyMask = null)
        {
            CreateReferenceToObject ret = (CreateReferenceToObject)((CreateReferenceToObjectCommon)((ICreateReferenceToObjectGetter)item).CommonInstance()!).GetNew();
            ((CreateReferenceToObjectSetterTranslationCommon)((ICreateReferenceToObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public CreateReferenceToObject DeepCopy(
            ICreateReferenceToObjectGetter item,
            out CreateReferenceToObject.ErrorMask errorMask,
            CreateReferenceToObject.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CreateReferenceToObject ret = (CreateReferenceToObject)((CreateReferenceToObjectCommon)((ICreateReferenceToObjectGetter)item).CommonInstance()!).GetNew();
            ((CreateReferenceToObjectSetterTranslationCommon)((ICreateReferenceToObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = CreateReferenceToObject.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public CreateReferenceToObject DeepCopy(
            ICreateReferenceToObjectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CreateReferenceToObject ret = (CreateReferenceToObject)((CreateReferenceToObjectCommon)((ICreateReferenceToObjectGetter)item).CommonInstance()!).GetNew();
            ((CreateReferenceToObjectSetterTranslationCommon)((ICreateReferenceToObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class CreateReferenceToObject
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CreateReferenceToObject_Registration.Instance;
        public static CreateReferenceToObject_Registration StaticRegistration => CreateReferenceToObject_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CreateReferenceToObjectCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return CreateReferenceToObjectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CreateReferenceToObjectSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICreateReferenceToObjectGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ICreateReferenceToObjectGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ICreateReferenceToObjectGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class CreateReferenceToObjectBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static CreateReferenceToObjectBinaryWriteTranslation Instance = new CreateReferenceToObjectBinaryWriteTranslation();

        public static void WriteEmbedded(
            ICreateReferenceToObjectGetter item,
            MutagenWriter writer)
        {
        }

        public static void WriteRecordTypes(
            ICreateReferenceToObjectGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Object,
                header: translationParams.ConvertToCustom(RecordTypes.ALCO));
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.ALCA)))
            {
                writer.Write(item.AliasIndex);
                EnumBinaryTranslation<CreateReferenceToObject.CreateEnum, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Create,
                    length: 2);
            }
            EnumBinaryTranslation<Level, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Level,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.ALCL));
        }

        public void Write(
            MutagenWriter writer,
            ICreateReferenceToObjectGetter item,
            TypedWriteParams? translationParams = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (ICreateReferenceToObjectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class CreateReferenceToObjectBinaryCreateTranslation
    {
        public readonly static CreateReferenceToObjectBinaryCreateTranslation Instance = new CreateReferenceToObjectBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ICreateReferenceToObject item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            ICreateReferenceToObject item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.ALCO:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)CreateReferenceToObject_FieldIndex.Object) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Object.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)CreateReferenceToObject_FieldIndex.Object;
                }
                case RecordTypeInts.ALCA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.AliasIndex = dataFrame.ReadInt16();
                    item.Create = EnumBinaryTranslation<CreateReferenceToObject.CreateEnum, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 2);
                    return (int)CreateReferenceToObject_FieldIndex.Create;
                }
                case RecordTypeInts.ALCL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Level = EnumBinaryTranslation<Level, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)CreateReferenceToObject_FieldIndex.Level;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class CreateReferenceToObjectBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ICreateReferenceToObjectGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((CreateReferenceToObjectBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class CreateReferenceToObjectBinaryOverlay :
        PluginBinaryOverlay,
        ICreateReferenceToObjectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CreateReferenceToObject_Registration.Instance;
        public static CreateReferenceToObject_Registration StaticRegistration => CreateReferenceToObject_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CreateReferenceToObjectCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CreateReferenceToObjectSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICreateReferenceToObjectGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ICreateReferenceToObjectGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ICreateReferenceToObjectGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public IEnumerable<IFormLinkGetter> ContainedFormLinks => CreateReferenceToObjectCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CreateReferenceToObjectBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((CreateReferenceToObjectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Object
        private int? _ObjectLocation;
        public IFormLinkGetter<ISkyrimMajorRecordGetter> Object => _ObjectLocation.HasValue ? new FormLink<ISkyrimMajorRecordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ObjectLocation.Value, _package.MetaData.Constants)))) : FormLink<ISkyrimMajorRecordGetter>.Null;
        #endregion
        private int? _ALCALocation;
        public CreateReferenceToObject.ALCADataType ALCADataTypeState { get; private set; }
        #region AliasIndex
        private int _AliasIndexLocation => _ALCALocation!.Value;
        private bool _AliasIndex_IsSet => _ALCALocation.HasValue;
        public Int16 AliasIndex => _AliasIndex_IsSet ? BinaryPrimitives.ReadInt16LittleEndian(_data.Slice(_AliasIndexLocation, 2)) : default;
        #endregion
        #region Create
        private int _CreateLocation => _ALCALocation!.Value + 0x2;
        private bool _Create_IsSet => _ALCALocation.HasValue;
        public CreateReferenceToObject.CreateEnum Create => _Create_IsSet ? (CreateReferenceToObject.CreateEnum)BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_CreateLocation, 0x2)) : default;
        #endregion
        #region Level
        private int? _LevelLocation;
        public Level Level => _LevelLocation.HasValue ? (Level)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _LevelLocation!.Value, _package.MetaData.Constants)) : default(Level);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CreateReferenceToObjectBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static CreateReferenceToObjectBinaryOverlay CreateReferenceToObjectFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new CreateReferenceToObjectBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static CreateReferenceToObjectBinaryOverlay CreateReferenceToObjectFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return CreateReferenceToObjectFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.ALCO:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)CreateReferenceToObject_FieldIndex.Object) return ParseResult.Stop;
                    _ObjectLocation = (stream.Position - offset);
                    return (int)CreateReferenceToObject_FieldIndex.Object;
                }
                case RecordTypeInts.ALCA:
                {
                    _ALCALocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)CreateReferenceToObject_FieldIndex.Create;
                }
                case RecordTypeInts.ALCL:
                {
                    _LevelLocation = (stream.Position - offset);
                    return (int)CreateReferenceToObject_FieldIndex.Level;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CreateReferenceToObjectMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICreateReferenceToObjectGetter rhs) return false;
            return ((CreateReferenceToObjectCommon)((ICreateReferenceToObjectGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(ICreateReferenceToObjectGetter? obj)
        {
            return ((CreateReferenceToObjectCommon)((ICreateReferenceToObjectGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((CreateReferenceToObjectCommon)((ICreateReferenceToObjectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

