/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class PreferredPathing :
        IEquatable<IPreferredPathingGetter>,
        ILoquiObjectSetter<PreferredPathing>,
        IPreferredPathing
    {
        #region Ctor
        public PreferredPathing()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region NavmeshSets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<NavmeshSet> _NavmeshSets = new ExtendedList<NavmeshSet>();
        public ExtendedList<NavmeshSet> NavmeshSets
        {
            get => this._NavmeshSets;
            init => this._NavmeshSets = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<INavmeshSetGetter> IPreferredPathingGetter.NavmeshSets => _NavmeshSets;
        #endregion

        #endregion
        #region NavmeshTree
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<NavmeshNode> _NavmeshTree = new ExtendedList<NavmeshNode>();
        public ExtendedList<NavmeshNode> NavmeshTree
        {
            get => this._NavmeshTree;
            init => this._NavmeshTree = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<INavmeshNodeGetter> IPreferredPathingGetter.NavmeshTree => _NavmeshTree;
        #endregion

        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PreferredPathingMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPreferredPathingGetter rhs) return false;
            return ((PreferredPathingCommon)((IPreferredPathingGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPreferredPathingGetter? obj)
        {
            return ((PreferredPathingCommon)((IPreferredPathingGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PreferredPathingCommon)((IPreferredPathingGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.NavmeshSets = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavmeshSet.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, NavmeshSet.Mask<TItem>?>>());
                this.NavmeshTree = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavmeshNode.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, NavmeshNode.Mask<TItem>?>>());
            }

            public Mask(
                TItem NavmeshSets,
                TItem NavmeshTree)
            {
                this.NavmeshSets = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavmeshSet.Mask<TItem>?>>?>(NavmeshSets, Enumerable.Empty<MaskItemIndexed<TItem, NavmeshSet.Mask<TItem>?>>());
                this.NavmeshTree = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavmeshNode.Mask<TItem>?>>?>(NavmeshTree, Enumerable.Empty<MaskItemIndexed<TItem, NavmeshNode.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavmeshSet.Mask<TItem>?>>?>? NavmeshSets;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavmeshNode.Mask<TItem>?>>?>? NavmeshTree;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.NavmeshSets, rhs.NavmeshSets)) return false;
                if (!object.Equals(this.NavmeshTree, rhs.NavmeshTree)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.NavmeshSets);
                hash.Add(this.NavmeshTree);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (this.NavmeshSets != null)
                {
                    if (!eval(this.NavmeshSets.Overall)) return false;
                    if (this.NavmeshSets.Specific != null)
                    {
                        foreach (var item in this.NavmeshSets.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.NavmeshTree != null)
                {
                    if (!eval(this.NavmeshTree.Overall)) return false;
                    if (this.NavmeshTree.Specific != null)
                    {
                        foreach (var item in this.NavmeshTree.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (this.NavmeshSets != null)
                {
                    if (eval(this.NavmeshSets.Overall)) return true;
                    if (this.NavmeshSets.Specific != null)
                    {
                        foreach (var item in this.NavmeshSets.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.NavmeshTree != null)
                {
                    if (eval(this.NavmeshTree.Overall)) return true;
                    if (this.NavmeshTree.Specific != null)
                    {
                        foreach (var item in this.NavmeshTree.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PreferredPathing.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                if (NavmeshSets != null)
                {
                    obj.NavmeshSets = new MaskItem<R, IEnumerable<MaskItemIndexed<R, NavmeshSet.Mask<R>?>>?>(eval(this.NavmeshSets.Overall), Enumerable.Empty<MaskItemIndexed<R, NavmeshSet.Mask<R>?>>());
                    if (NavmeshSets.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, NavmeshSet.Mask<R>?>>();
                        obj.NavmeshSets.Specific = l;
                        foreach (var item in NavmeshSets.Specific)
                        {
                            MaskItemIndexed<R, NavmeshSet.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, NavmeshSet.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (NavmeshTree != null)
                {
                    obj.NavmeshTree = new MaskItem<R, IEnumerable<MaskItemIndexed<R, NavmeshNode.Mask<R>?>>?>(eval(this.NavmeshTree.Overall), Enumerable.Empty<MaskItemIndexed<R, NavmeshNode.Mask<R>?>>());
                    if (NavmeshTree.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, NavmeshNode.Mask<R>?>>();
                        obj.NavmeshTree.Specific = l;
                        foreach (var item in NavmeshTree.Specific)
                        {
                            MaskItemIndexed<R, NavmeshNode.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, NavmeshNode.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(PreferredPathing.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, PreferredPathing.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(PreferredPathing.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.NavmeshSets?.Overall ?? true)
                        && NavmeshSets is {} NavmeshSetsItem)
                    {
                        sb.AppendLine("NavmeshSets =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(NavmeshSetsItem.Overall);
                            if (NavmeshSetsItem.Specific != null)
                            {
                                foreach (var subItem in NavmeshSetsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.NavmeshTree?.Overall ?? true)
                        && NavmeshTree is {} NavmeshTreeItem)
                    {
                        sb.AppendLine("NavmeshTree =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(NavmeshTreeItem.Overall);
                            if (NavmeshTreeItem.Specific != null)
                            {
                                foreach (var subItem in NavmeshTreeItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshSet.ErrorMask?>>?>? NavmeshSets;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshNode.ErrorMask?>>?>? NavmeshTree;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                PreferredPathing_FieldIndex enu = (PreferredPathing_FieldIndex)index;
                switch (enu)
                {
                    case PreferredPathing_FieldIndex.NavmeshSets:
                        return NavmeshSets;
                    case PreferredPathing_FieldIndex.NavmeshTree:
                        return NavmeshTree;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                PreferredPathing_FieldIndex enu = (PreferredPathing_FieldIndex)index;
                switch (enu)
                {
                    case PreferredPathing_FieldIndex.NavmeshSets:
                        this.NavmeshSets = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshSet.ErrorMask?>>?>(ex, null);
                        break;
                    case PreferredPathing_FieldIndex.NavmeshTree:
                        this.NavmeshTree = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshNode.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                PreferredPathing_FieldIndex enu = (PreferredPathing_FieldIndex)index;
                switch (enu)
                {
                    case PreferredPathing_FieldIndex.NavmeshSets:
                        this.NavmeshSets = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshSet.ErrorMask?>>?>)obj;
                        break;
                    case PreferredPathing_FieldIndex.NavmeshTree:
                        this.NavmeshTree = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshNode.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (NavmeshSets != null) return true;
                if (NavmeshTree != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                if (NavmeshSets is {} NavmeshSetsItem)
                {
                    sb.AppendLine("NavmeshSets =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(NavmeshSetsItem.Overall);
                        if (NavmeshSetsItem.Specific != null)
                        {
                            foreach (var subItem in NavmeshSetsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (NavmeshTree is {} NavmeshTreeItem)
                {
                    sb.AppendLine("NavmeshTree =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(NavmeshTreeItem.Overall);
                        if (NavmeshTreeItem.Specific != null)
                        {
                            foreach (var subItem in NavmeshTreeItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.NavmeshSets = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshSet.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.NavmeshSets?.Overall, rhs.NavmeshSets?.Overall), Noggog.ExceptionExt.Combine(this.NavmeshSets?.Specific, rhs.NavmeshSets?.Specific));
                ret.NavmeshTree = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshNode.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.NavmeshTree?.Overall, rhs.NavmeshTree?.Overall), Noggog.ExceptionExt.Combine(this.NavmeshTree?.Specific, rhs.NavmeshTree?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public NavmeshSet.TranslationMask? NavmeshSets;
            public NavmeshNode.TranslationMask? NavmeshTree;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((NavmeshSets == null ? DefaultOn : !NavmeshSets.GetCrystal().CopyNothing, NavmeshSets?.GetCrystal()));
                ret.Add((NavmeshTree == null ? DefaultOn : !NavmeshTree.GetCrystal().CopyNothing, NavmeshTree?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PreferredPathingCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PreferredPathingSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PreferredPathingBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PreferredPathingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static PreferredPathing CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new PreferredPathing();
            ((PreferredPathingSetterCommon)((IPreferredPathingGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PreferredPathing item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((PreferredPathingSetterCommon)((IPreferredPathingGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static PreferredPathing GetNew()
        {
            return new PreferredPathing();
        }

    }
    #endregion

    #region Interface
    public partial interface IPreferredPathing :
        IFormLinkContainer,
        ILoquiObjectSetter<IPreferredPathing>,
        IPreferredPathingGetter
    {
        new ExtendedList<NavmeshSet> NavmeshSets { get; }
        new ExtendedList<NavmeshNode> NavmeshTree { get; }
    }

    public partial interface IPreferredPathingGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IPreferredPathingGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => PreferredPathing_Registration.Instance;
        IReadOnlyList<INavmeshSetGetter> NavmeshSets { get; }
        IReadOnlyList<INavmeshNodeGetter> NavmeshTree { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PreferredPathingMixIn
    {
        public static void Clear(this IPreferredPathing item)
        {
            ((PreferredPathingSetterCommon)((IPreferredPathingGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PreferredPathing.Mask<bool> GetEqualsMask(
            this IPreferredPathingGetter item,
            IPreferredPathingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PreferredPathingCommon)((IPreferredPathingGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IPreferredPathingGetter item,
            string? name = null,
            PreferredPathing.Mask<bool>? printMask = null)
        {
            return ((PreferredPathingCommon)((IPreferredPathingGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IPreferredPathingGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PreferredPathing.Mask<bool>? printMask = null)
        {
            ((PreferredPathingCommon)((IPreferredPathingGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPreferredPathingGetter item,
            IPreferredPathingGetter rhs,
            PreferredPathing.TranslationMask? equalsMask = null)
        {
            return ((PreferredPathingCommon)((IPreferredPathingGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPreferredPathing lhs,
            IPreferredPathingGetter rhs)
        {
            ((PreferredPathingSetterTranslationCommon)((IPreferredPathingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPreferredPathing lhs,
            IPreferredPathingGetter rhs,
            PreferredPathing.TranslationMask? copyMask = null)
        {
            ((PreferredPathingSetterTranslationCommon)((IPreferredPathingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPreferredPathing lhs,
            IPreferredPathingGetter rhs,
            out PreferredPathing.ErrorMask errorMask,
            PreferredPathing.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PreferredPathingSetterTranslationCommon)((IPreferredPathingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PreferredPathing.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPreferredPathing lhs,
            IPreferredPathingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PreferredPathingSetterTranslationCommon)((IPreferredPathingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PreferredPathing DeepCopy(
            this IPreferredPathingGetter item,
            PreferredPathing.TranslationMask? copyMask = null)
        {
            return ((PreferredPathingSetterTranslationCommon)((IPreferredPathingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PreferredPathing DeepCopy(
            this IPreferredPathingGetter item,
            out PreferredPathing.ErrorMask errorMask,
            PreferredPathing.TranslationMask? copyMask = null)
        {
            return ((PreferredPathingSetterTranslationCommon)((IPreferredPathingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PreferredPathing DeepCopy(
            this IPreferredPathingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PreferredPathingSetterTranslationCommon)((IPreferredPathingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPreferredPathing item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((PreferredPathingSetterCommon)((IPreferredPathingGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum PreferredPathing_FieldIndex
    {
        NavmeshSets = 0,
        NavmeshTree = 1,
    }
    #endregion

    #region Registration
    internal partial class PreferredPathing_Registration : ILoquiRegistration
    {
        public static readonly PreferredPathing_Registration Instance = new PreferredPathing_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(PreferredPathing.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PreferredPathing.ErrorMask);

        public static readonly Type ClassType = typeof(PreferredPathing);

        public static readonly Type GetterType = typeof(IPreferredPathingGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPreferredPathing);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.PreferredPathing";

        public const string Name = "PreferredPathing";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.NVPP;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.NVPP);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(PreferredPathingBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class PreferredPathingSetterCommon
    {
        public static readonly PreferredPathingSetterCommon Instance = new PreferredPathingSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPreferredPathing item)
        {
            ClearPartial();
            item.NavmeshSets.Clear();
            item.NavmeshTree.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IPreferredPathing obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.NavmeshSets.RemapLinks(mapping);
            obj.NavmeshTree.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPreferredPathing item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.NVPP),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: PreferredPathingBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class PreferredPathingCommon
    {
        public static readonly PreferredPathingCommon Instance = new PreferredPathingCommon();

        public PreferredPathing.Mask<bool> GetEqualsMask(
            IPreferredPathingGetter item,
            IPreferredPathingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PreferredPathing.Mask<bool>(false);
            ((PreferredPathingCommon)((IPreferredPathingGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPreferredPathingGetter item,
            IPreferredPathingGetter rhs,
            PreferredPathing.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.NavmeshSets = item.NavmeshSets.CollectionEqualsHelper(
                rhs.NavmeshSets,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.NavmeshTree = item.NavmeshTree.CollectionEqualsHelper(
                rhs.NavmeshTree,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string Print(
            IPreferredPathingGetter item,
            string? name = null,
            PreferredPathing.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IPreferredPathingGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PreferredPathing.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"PreferredPathing =>");
            }
            else
            {
                sb.AppendLine($"{name} (PreferredPathing) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IPreferredPathingGetter item,
            StructuredStringBuilder sb,
            PreferredPathing.Mask<bool>? printMask = null)
        {
            if (printMask?.NavmeshSets?.Overall ?? true)
            {
                sb.AppendLine("NavmeshSets =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.NavmeshSets)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.NavmeshTree?.Overall ?? true)
            {
                sb.AppendLine("NavmeshTree =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.NavmeshTree)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPreferredPathingGetter? lhs,
            IPreferredPathingGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)PreferredPathing_FieldIndex.NavmeshSets) ?? true))
            {
                if (!lhs.NavmeshSets.SequenceEqual(rhs.NavmeshSets, (l, r) => ((NavmeshSetCommon)((INavmeshSetGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)PreferredPathing_FieldIndex.NavmeshSets)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PreferredPathing_FieldIndex.NavmeshTree) ?? true))
            {
                if (!lhs.NavmeshTree.SequenceEqual(rhs.NavmeshTree, (l, r) => ((NavmeshNodeCommon)((INavmeshNodeGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)PreferredPathing_FieldIndex.NavmeshTree)))) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IPreferredPathingGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.NavmeshSets);
            hash.Add(item.NavmeshTree);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return PreferredPathing.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IPreferredPathingGetter obj)
        {
            foreach (var item in obj.NavmeshSets.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.NavmeshTree.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class PreferredPathingSetterTranslationCommon
    {
        public static readonly PreferredPathingSetterTranslationCommon Instance = new PreferredPathingSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPreferredPathing item,
            IPreferredPathingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)PreferredPathing_FieldIndex.NavmeshSets) ?? true))
            {
                errorMask?.PushIndex((int)PreferredPathing_FieldIndex.NavmeshSets);
                try
                {
                    item.NavmeshSets.SetTo(
                        rhs.NavmeshSets
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PreferredPathing_FieldIndex.NavmeshTree) ?? true))
            {
                errorMask?.PushIndex((int)PreferredPathing_FieldIndex.NavmeshTree);
                try
                {
                    item.NavmeshTree.SetTo(
                        rhs.NavmeshTree
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public PreferredPathing DeepCopy(
            IPreferredPathingGetter item,
            PreferredPathing.TranslationMask? copyMask = null)
        {
            PreferredPathing ret = (PreferredPathing)((PreferredPathingCommon)((IPreferredPathingGetter)item).CommonInstance()!).GetNew();
            ((PreferredPathingSetterTranslationCommon)((IPreferredPathingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PreferredPathing DeepCopy(
            IPreferredPathingGetter item,
            out PreferredPathing.ErrorMask errorMask,
            PreferredPathing.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PreferredPathing ret = (PreferredPathing)((PreferredPathingCommon)((IPreferredPathingGetter)item).CommonInstance()!).GetNew();
            ((PreferredPathingSetterTranslationCommon)((IPreferredPathingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PreferredPathing.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PreferredPathing DeepCopy(
            IPreferredPathingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PreferredPathing ret = (PreferredPathing)((PreferredPathingCommon)((IPreferredPathingGetter)item).CommonInstance()!).GetNew();
            ((PreferredPathingSetterTranslationCommon)((IPreferredPathingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class PreferredPathing
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PreferredPathing_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => PreferredPathing_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PreferredPathingCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return PreferredPathingSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PreferredPathingSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPreferredPathingGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IPreferredPathingGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IPreferredPathingGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class PreferredPathingBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly PreferredPathingBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IPreferredPathingGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<INavmeshSetGetter>.Instance.Write(
                writer: writer,
                items: item.NavmeshSets,
                countLengthLength: 4,
                transl: (MutagenWriter subWriter, INavmeshSetGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((NavmeshSetBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<INavmeshNodeGetter>.Instance.Write(
                writer: writer,
                items: item.NavmeshTree,
                countLengthLength: 4,
                transl: (MutagenWriter subWriter, INavmeshNodeGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((NavmeshNodeBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IPreferredPathingGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.NVPP),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IPreferredPathingGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class PreferredPathingBinaryCreateTranslation
    {
        public static readonly PreferredPathingBinaryCreateTranslation Instance = new PreferredPathingBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IPreferredPathing item,
            MutagenFrame frame)
        {
            item.NavmeshSets.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<NavmeshSet>.Instance.Parse(
                    amount: frame.ReadInt32(),
                    reader: frame,
                    transl: NavmeshSet.TryCreateFromBinary));
            item.NavmeshTree.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<NavmeshNode>.Instance.Parse(
                    amount: frame.ReadInt32(),
                    reader: frame,
                    transl: NavmeshNode.TryCreateFromBinary));
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class PreferredPathingBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IPreferredPathingGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PreferredPathingBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class PreferredPathingBinaryOverlay :
        PluginBinaryOverlay,
        IPreferredPathingGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PreferredPathing_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => PreferredPathing_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PreferredPathingCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PreferredPathingSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPreferredPathingGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IPreferredPathingGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IPreferredPathingGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PreferredPathingCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PreferredPathingBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PreferredPathingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region NavmeshSets
        protected int NavmeshSetsEndingPos;
        partial void CustomNavmeshSetsEndPos();
        #endregion
        #region NavmeshTree
        public IReadOnlyList<INavmeshNodeGetter> NavmeshTree => BinaryOverlayList.FactoryByCountLength<INavmeshNodeGetter>(_structData.Slice(NavmeshSetsEndingPos), _package, 8, countLength: 4, (s, p) => NavmeshNodeBinaryOverlay.NavmeshNodeFactory(s, p));
        protected int NavmeshTreeEndingPos;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PreferredPathingBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static void PreferredPathingParseEndingPositions(
            PreferredPathingBinaryOverlay ret,
            BinaryOverlayFactoryPackage package)
        {
            ret.CustomNavmeshSetsEndPos();
            ret.NavmeshTreeEndingPos = ret.NavmeshSetsEndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._structData.Slice(ret.NavmeshSetsEndingPos)) * 8 + 4;
        }

        public static IPreferredPathingGetter PreferredPathingFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new PreferredPathingBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            PreferredPathingParseEndingPositions(ret, package);
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IPreferredPathingGetter PreferredPathingFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return PreferredPathingFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PreferredPathingMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPreferredPathingGetter rhs) return false;
            return ((PreferredPathingCommon)((IPreferredPathingGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPreferredPathingGetter? obj)
        {
            return ((PreferredPathingCommon)((IPreferredPathingGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PreferredPathingCommon)((IPreferredPathingGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

