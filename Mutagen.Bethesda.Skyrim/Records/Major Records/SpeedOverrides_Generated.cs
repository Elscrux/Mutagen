/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class SpeedOverrides :
        IEquatable<ISpeedOverridesGetter>,
        ILoquiObjectSetter<SpeedOverrides>,
        ISpeedOverrides
    {
        #region Ctor
        public SpeedOverrides()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region LeftWalk
        public Single LeftWalk { get; set; } = default(Single);
        #endregion
        #region LeftRun
        public Single LeftRun { get; set; } = default(Single);
        #endregion
        #region RightWalk
        public Single RightWalk { get; set; } = default(Single);
        #endregion
        #region RightRun
        public Single RightRun { get; set; } = default(Single);
        #endregion
        #region ForwardWalk
        public Single ForwardWalk { get; set; } = default(Single);
        #endregion
        #region ForwardRun
        public Single ForwardRun { get; set; } = default(Single);
        #endregion
        #region BackWalk
        public Single BackWalk { get; set; } = default(Single);
        #endregion
        #region BackRun
        public Single BackRun { get; set; } = default(Single);
        #endregion
        #region RotateWalk
        public Single RotateWalk { get; set; } = default(Single);
        #endregion
        #region RotateRun
        public Single RotateRun { get; set; } = default(Single);
        #endregion
        #region Unknown
        public Single Unknown { get; set; } = default(Single);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SpeedOverridesMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISpeedOverridesGetter rhs) return false;
            return ((SpeedOverridesCommon)((ISpeedOverridesGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISpeedOverridesGetter? obj)
        {
            return ((SpeedOverridesCommon)((ISpeedOverridesGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SpeedOverridesCommon)((ISpeedOverridesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.LeftWalk = initialValue;
                this.LeftRun = initialValue;
                this.RightWalk = initialValue;
                this.RightRun = initialValue;
                this.ForwardWalk = initialValue;
                this.ForwardRun = initialValue;
                this.BackWalk = initialValue;
                this.BackRun = initialValue;
                this.RotateWalk = initialValue;
                this.RotateRun = initialValue;
                this.Unknown = initialValue;
            }

            public Mask(
                TItem LeftWalk,
                TItem LeftRun,
                TItem RightWalk,
                TItem RightRun,
                TItem ForwardWalk,
                TItem ForwardRun,
                TItem BackWalk,
                TItem BackRun,
                TItem RotateWalk,
                TItem RotateRun,
                TItem Unknown)
            {
                this.LeftWalk = LeftWalk;
                this.LeftRun = LeftRun;
                this.RightWalk = RightWalk;
                this.RightRun = RightRun;
                this.ForwardWalk = ForwardWalk;
                this.ForwardRun = ForwardRun;
                this.BackWalk = BackWalk;
                this.BackRun = BackRun;
                this.RotateWalk = RotateWalk;
                this.RotateRun = RotateRun;
                this.Unknown = Unknown;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem LeftWalk;
            public TItem LeftRun;
            public TItem RightWalk;
            public TItem RightRun;
            public TItem ForwardWalk;
            public TItem ForwardRun;
            public TItem BackWalk;
            public TItem BackRun;
            public TItem RotateWalk;
            public TItem RotateRun;
            public TItem Unknown;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.LeftWalk, rhs.LeftWalk)) return false;
                if (!object.Equals(this.LeftRun, rhs.LeftRun)) return false;
                if (!object.Equals(this.RightWalk, rhs.RightWalk)) return false;
                if (!object.Equals(this.RightRun, rhs.RightRun)) return false;
                if (!object.Equals(this.ForwardWalk, rhs.ForwardWalk)) return false;
                if (!object.Equals(this.ForwardRun, rhs.ForwardRun)) return false;
                if (!object.Equals(this.BackWalk, rhs.BackWalk)) return false;
                if (!object.Equals(this.BackRun, rhs.BackRun)) return false;
                if (!object.Equals(this.RotateWalk, rhs.RotateWalk)) return false;
                if (!object.Equals(this.RotateRun, rhs.RotateRun)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.LeftWalk);
                hash.Add(this.LeftRun);
                hash.Add(this.RightWalk);
                hash.Add(this.RightRun);
                hash.Add(this.ForwardWalk);
                hash.Add(this.ForwardRun);
                hash.Add(this.BackWalk);
                hash.Add(this.BackRun);
                hash.Add(this.RotateWalk);
                hash.Add(this.RotateRun);
                hash.Add(this.Unknown);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.LeftWalk)) return false;
                if (!eval(this.LeftRun)) return false;
                if (!eval(this.RightWalk)) return false;
                if (!eval(this.RightRun)) return false;
                if (!eval(this.ForwardWalk)) return false;
                if (!eval(this.ForwardRun)) return false;
                if (!eval(this.BackWalk)) return false;
                if (!eval(this.BackRun)) return false;
                if (!eval(this.RotateWalk)) return false;
                if (!eval(this.RotateRun)) return false;
                if (!eval(this.Unknown)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.LeftWalk)) return true;
                if (eval(this.LeftRun)) return true;
                if (eval(this.RightWalk)) return true;
                if (eval(this.RightRun)) return true;
                if (eval(this.ForwardWalk)) return true;
                if (eval(this.ForwardRun)) return true;
                if (eval(this.BackWalk)) return true;
                if (eval(this.BackRun)) return true;
                if (eval(this.RotateWalk)) return true;
                if (eval(this.RotateRun)) return true;
                if (eval(this.Unknown)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SpeedOverrides.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.LeftWalk = eval(this.LeftWalk);
                obj.LeftRun = eval(this.LeftRun);
                obj.RightWalk = eval(this.RightWalk);
                obj.RightRun = eval(this.RightRun);
                obj.ForwardWalk = eval(this.ForwardWalk);
                obj.ForwardRun = eval(this.ForwardRun);
                obj.BackWalk = eval(this.BackWalk);
                obj.BackRun = eval(this.BackRun);
                obj.RotateWalk = eval(this.RotateWalk);
                obj.RotateRun = eval(this.RotateRun);
                obj.Unknown = eval(this.Unknown);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(SpeedOverrides.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, SpeedOverrides.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(SpeedOverrides.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.LeftWalk ?? true)
                    {
                        sb.AppendItem(LeftWalk, "LeftWalk");
                    }
                    if (printMask?.LeftRun ?? true)
                    {
                        sb.AppendItem(LeftRun, "LeftRun");
                    }
                    if (printMask?.RightWalk ?? true)
                    {
                        sb.AppendItem(RightWalk, "RightWalk");
                    }
                    if (printMask?.RightRun ?? true)
                    {
                        sb.AppendItem(RightRun, "RightRun");
                    }
                    if (printMask?.ForwardWalk ?? true)
                    {
                        sb.AppendItem(ForwardWalk, "ForwardWalk");
                    }
                    if (printMask?.ForwardRun ?? true)
                    {
                        sb.AppendItem(ForwardRun, "ForwardRun");
                    }
                    if (printMask?.BackWalk ?? true)
                    {
                        sb.AppendItem(BackWalk, "BackWalk");
                    }
                    if (printMask?.BackRun ?? true)
                    {
                        sb.AppendItem(BackRun, "BackRun");
                    }
                    if (printMask?.RotateWalk ?? true)
                    {
                        sb.AppendItem(RotateWalk, "RotateWalk");
                    }
                    if (printMask?.RotateRun ?? true)
                    {
                        sb.AppendItem(RotateRun, "RotateRun");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? LeftWalk;
            public Exception? LeftRun;
            public Exception? RightWalk;
            public Exception? RightRun;
            public Exception? ForwardWalk;
            public Exception? ForwardRun;
            public Exception? BackWalk;
            public Exception? BackRun;
            public Exception? RotateWalk;
            public Exception? RotateRun;
            public Exception? Unknown;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                SpeedOverrides_FieldIndex enu = (SpeedOverrides_FieldIndex)index;
                switch (enu)
                {
                    case SpeedOverrides_FieldIndex.LeftWalk:
                        return LeftWalk;
                    case SpeedOverrides_FieldIndex.LeftRun:
                        return LeftRun;
                    case SpeedOverrides_FieldIndex.RightWalk:
                        return RightWalk;
                    case SpeedOverrides_FieldIndex.RightRun:
                        return RightRun;
                    case SpeedOverrides_FieldIndex.ForwardWalk:
                        return ForwardWalk;
                    case SpeedOverrides_FieldIndex.ForwardRun:
                        return ForwardRun;
                    case SpeedOverrides_FieldIndex.BackWalk:
                        return BackWalk;
                    case SpeedOverrides_FieldIndex.BackRun:
                        return BackRun;
                    case SpeedOverrides_FieldIndex.RotateWalk:
                        return RotateWalk;
                    case SpeedOverrides_FieldIndex.RotateRun:
                        return RotateRun;
                    case SpeedOverrides_FieldIndex.Unknown:
                        return Unknown;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                SpeedOverrides_FieldIndex enu = (SpeedOverrides_FieldIndex)index;
                switch (enu)
                {
                    case SpeedOverrides_FieldIndex.LeftWalk:
                        this.LeftWalk = ex;
                        break;
                    case SpeedOverrides_FieldIndex.LeftRun:
                        this.LeftRun = ex;
                        break;
                    case SpeedOverrides_FieldIndex.RightWalk:
                        this.RightWalk = ex;
                        break;
                    case SpeedOverrides_FieldIndex.RightRun:
                        this.RightRun = ex;
                        break;
                    case SpeedOverrides_FieldIndex.ForwardWalk:
                        this.ForwardWalk = ex;
                        break;
                    case SpeedOverrides_FieldIndex.ForwardRun:
                        this.ForwardRun = ex;
                        break;
                    case SpeedOverrides_FieldIndex.BackWalk:
                        this.BackWalk = ex;
                        break;
                    case SpeedOverrides_FieldIndex.BackRun:
                        this.BackRun = ex;
                        break;
                    case SpeedOverrides_FieldIndex.RotateWalk:
                        this.RotateWalk = ex;
                        break;
                    case SpeedOverrides_FieldIndex.RotateRun:
                        this.RotateRun = ex;
                        break;
                    case SpeedOverrides_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                SpeedOverrides_FieldIndex enu = (SpeedOverrides_FieldIndex)index;
                switch (enu)
                {
                    case SpeedOverrides_FieldIndex.LeftWalk:
                        this.LeftWalk = (Exception?)obj;
                        break;
                    case SpeedOverrides_FieldIndex.LeftRun:
                        this.LeftRun = (Exception?)obj;
                        break;
                    case SpeedOverrides_FieldIndex.RightWalk:
                        this.RightWalk = (Exception?)obj;
                        break;
                    case SpeedOverrides_FieldIndex.RightRun:
                        this.RightRun = (Exception?)obj;
                        break;
                    case SpeedOverrides_FieldIndex.ForwardWalk:
                        this.ForwardWalk = (Exception?)obj;
                        break;
                    case SpeedOverrides_FieldIndex.ForwardRun:
                        this.ForwardRun = (Exception?)obj;
                        break;
                    case SpeedOverrides_FieldIndex.BackWalk:
                        this.BackWalk = (Exception?)obj;
                        break;
                    case SpeedOverrides_FieldIndex.BackRun:
                        this.BackRun = (Exception?)obj;
                        break;
                    case SpeedOverrides_FieldIndex.RotateWalk:
                        this.RotateWalk = (Exception?)obj;
                        break;
                    case SpeedOverrides_FieldIndex.RotateRun:
                        this.RotateRun = (Exception?)obj;
                        break;
                    case SpeedOverrides_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (LeftWalk != null) return true;
                if (LeftRun != null) return true;
                if (RightWalk != null) return true;
                if (RightRun != null) return true;
                if (ForwardWalk != null) return true;
                if (ForwardRun != null) return true;
                if (BackWalk != null) return true;
                if (BackRun != null) return true;
                if (RotateWalk != null) return true;
                if (RotateRun != null) return true;
                if (Unknown != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(LeftWalk, "LeftWalk");
                }
                {
                    sb.AppendItem(LeftRun, "LeftRun");
                }
                {
                    sb.AppendItem(RightWalk, "RightWalk");
                }
                {
                    sb.AppendItem(RightRun, "RightRun");
                }
                {
                    sb.AppendItem(ForwardWalk, "ForwardWalk");
                }
                {
                    sb.AppendItem(ForwardRun, "ForwardRun");
                }
                {
                    sb.AppendItem(BackWalk, "BackWalk");
                }
                {
                    sb.AppendItem(BackRun, "BackRun");
                }
                {
                    sb.AppendItem(RotateWalk, "RotateWalk");
                }
                {
                    sb.AppendItem(RotateRun, "RotateRun");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.LeftWalk = this.LeftWalk.Combine(rhs.LeftWalk);
                ret.LeftRun = this.LeftRun.Combine(rhs.LeftRun);
                ret.RightWalk = this.RightWalk.Combine(rhs.RightWalk);
                ret.RightRun = this.RightRun.Combine(rhs.RightRun);
                ret.ForwardWalk = this.ForwardWalk.Combine(rhs.ForwardWalk);
                ret.ForwardRun = this.ForwardRun.Combine(rhs.ForwardRun);
                ret.BackWalk = this.BackWalk.Combine(rhs.BackWalk);
                ret.BackRun = this.BackRun.Combine(rhs.BackRun);
                ret.RotateWalk = this.RotateWalk.Combine(rhs.RotateWalk);
                ret.RotateRun = this.RotateRun.Combine(rhs.RotateRun);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool LeftWalk;
            public bool LeftRun;
            public bool RightWalk;
            public bool RightRun;
            public bool ForwardWalk;
            public bool ForwardRun;
            public bool BackWalk;
            public bool BackRun;
            public bool RotateWalk;
            public bool RotateRun;
            public bool Unknown;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.LeftWalk = defaultOn;
                this.LeftRun = defaultOn;
                this.RightWalk = defaultOn;
                this.RightRun = defaultOn;
                this.ForwardWalk = defaultOn;
                this.ForwardRun = defaultOn;
                this.BackWalk = defaultOn;
                this.BackRun = defaultOn;
                this.RotateWalk = defaultOn;
                this.RotateRun = defaultOn;
                this.Unknown = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((LeftWalk, null));
                ret.Add((LeftRun, null));
                ret.Add((RightWalk, null));
                ret.Add((RightRun, null));
                ret.Add((ForwardWalk, null));
                ret.Add((ForwardRun, null));
                ret.Add((BackWalk, null));
                ret.Add((BackRun, null));
                ret.Add((RotateWalk, null));
                ret.Add((RotateRun, null));
                ret.Add((Unknown, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => SpeedOverridesBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SpeedOverridesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static SpeedOverrides CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new SpeedOverrides();
            ((SpeedOverridesSetterCommon)((ISpeedOverridesGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SpeedOverrides item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SpeedOverridesSetterCommon)((ISpeedOverridesGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static SpeedOverrides GetNew()
        {
            return new SpeedOverrides();
        }

    }
    #endregion

    #region Interface
    public partial interface ISpeedOverrides :
        ILoquiObjectSetter<ISpeedOverrides>,
        ISpeedOverridesGetter
    {
        new Single LeftWalk { get; set; }
        new Single LeftRun { get; set; }
        new Single RightWalk { get; set; }
        new Single RightRun { get; set; }
        new Single ForwardWalk { get; set; }
        new Single ForwardRun { get; set; }
        new Single BackWalk { get; set; }
        new Single BackRun { get; set; }
        new Single RotateWalk { get; set; }
        new Single RotateRun { get; set; }
        new Single Unknown { get; set; }
    }

    public partial interface ISpeedOverridesGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<ISpeedOverridesGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => SpeedOverrides_Registration.Instance;
        Single LeftWalk { get; }
        Single LeftRun { get; }
        Single RightWalk { get; }
        Single RightRun { get; }
        Single ForwardWalk { get; }
        Single ForwardRun { get; }
        Single BackWalk { get; }
        Single BackRun { get; }
        Single RotateWalk { get; }
        Single RotateRun { get; }
        Single Unknown { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SpeedOverridesMixIn
    {
        public static void Clear(this ISpeedOverrides item)
        {
            ((SpeedOverridesSetterCommon)((ISpeedOverridesGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SpeedOverrides.Mask<bool> GetEqualsMask(
            this ISpeedOverridesGetter item,
            ISpeedOverridesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SpeedOverridesCommon)((ISpeedOverridesGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ISpeedOverridesGetter item,
            string? name = null,
            SpeedOverrides.Mask<bool>? printMask = null)
        {
            return ((SpeedOverridesCommon)((ISpeedOverridesGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ISpeedOverridesGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SpeedOverrides.Mask<bool>? printMask = null)
        {
            ((SpeedOverridesCommon)((ISpeedOverridesGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISpeedOverridesGetter item,
            ISpeedOverridesGetter rhs,
            SpeedOverrides.TranslationMask? equalsMask = null)
        {
            return ((SpeedOverridesCommon)((ISpeedOverridesGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISpeedOverrides lhs,
            ISpeedOverridesGetter rhs)
        {
            ((SpeedOverridesSetterTranslationCommon)((ISpeedOverridesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ISpeedOverrides lhs,
            ISpeedOverridesGetter rhs,
            SpeedOverrides.TranslationMask? copyMask = null)
        {
            ((SpeedOverridesSetterTranslationCommon)((ISpeedOverridesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ISpeedOverrides lhs,
            ISpeedOverridesGetter rhs,
            out SpeedOverrides.ErrorMask errorMask,
            SpeedOverrides.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SpeedOverridesSetterTranslationCommon)((ISpeedOverridesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SpeedOverrides.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISpeedOverrides lhs,
            ISpeedOverridesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SpeedOverridesSetterTranslationCommon)((ISpeedOverridesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SpeedOverrides DeepCopy(
            this ISpeedOverridesGetter item,
            SpeedOverrides.TranslationMask? copyMask = null)
        {
            return ((SpeedOverridesSetterTranslationCommon)((ISpeedOverridesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SpeedOverrides DeepCopy(
            this ISpeedOverridesGetter item,
            out SpeedOverrides.ErrorMask errorMask,
            SpeedOverrides.TranslationMask? copyMask = null)
        {
            return ((SpeedOverridesSetterTranslationCommon)((ISpeedOverridesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SpeedOverrides DeepCopy(
            this ISpeedOverridesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SpeedOverridesSetterTranslationCommon)((ISpeedOverridesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISpeedOverrides item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((SpeedOverridesSetterCommon)((ISpeedOverridesGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum SpeedOverrides_FieldIndex
    {
        LeftWalk = 0,
        LeftRun = 1,
        RightWalk = 2,
        RightRun = 3,
        ForwardWalk = 4,
        ForwardRun = 5,
        BackWalk = 6,
        BackRun = 7,
        RotateWalk = 8,
        RotateRun = 9,
        Unknown = 10,
    }
    #endregion

    #region Registration
    internal partial class SpeedOverrides_Registration : ILoquiRegistration
    {
        public static readonly SpeedOverrides_Registration Instance = new SpeedOverrides_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 11;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(SpeedOverrides.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SpeedOverrides.ErrorMask);

        public static readonly Type ClassType = typeof(SpeedOverrides);

        public static readonly Type GetterType = typeof(ISpeedOverridesGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISpeedOverrides);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.SpeedOverrides";

        public const string Name = "SpeedOverrides";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.SPED;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.SPED);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(SpeedOverridesBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class SpeedOverridesSetterCommon
    {
        public static readonly SpeedOverridesSetterCommon Instance = new SpeedOverridesSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISpeedOverrides item)
        {
            ClearPartial();
            item.LeftWalk = default(Single);
            item.LeftRun = default(Single);
            item.RightWalk = default(Single);
            item.RightRun = default(Single);
            item.ForwardWalk = default(Single);
            item.ForwardRun = default(Single);
            item.BackWalk = default(Single);
            item.BackRun = default(Single);
            item.RotateWalk = default(Single);
            item.RotateRun = default(Single);
            item.Unknown = default(Single);
        }
        
        #region Mutagen
        public void RemapLinks(ISpeedOverrides obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISpeedOverrides item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.SPED),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: SpeedOverridesBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class SpeedOverridesCommon
    {
        public static readonly SpeedOverridesCommon Instance = new SpeedOverridesCommon();

        public SpeedOverrides.Mask<bool> GetEqualsMask(
            ISpeedOverridesGetter item,
            ISpeedOverridesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SpeedOverrides.Mask<bool>(false);
            ((SpeedOverridesCommon)((ISpeedOverridesGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISpeedOverridesGetter item,
            ISpeedOverridesGetter rhs,
            SpeedOverrides.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.LeftWalk = item.LeftWalk.EqualsWithin(rhs.LeftWalk);
            ret.LeftRun = item.LeftRun.EqualsWithin(rhs.LeftRun);
            ret.RightWalk = item.RightWalk.EqualsWithin(rhs.RightWalk);
            ret.RightRun = item.RightRun.EqualsWithin(rhs.RightRun);
            ret.ForwardWalk = item.ForwardWalk.EqualsWithin(rhs.ForwardWalk);
            ret.ForwardRun = item.ForwardRun.EqualsWithin(rhs.ForwardRun);
            ret.BackWalk = item.BackWalk.EqualsWithin(rhs.BackWalk);
            ret.BackRun = item.BackRun.EqualsWithin(rhs.BackRun);
            ret.RotateWalk = item.RotateWalk.EqualsWithin(rhs.RotateWalk);
            ret.RotateRun = item.RotateRun.EqualsWithin(rhs.RotateRun);
            ret.Unknown = item.Unknown.EqualsWithin(rhs.Unknown);
        }
        
        public string Print(
            ISpeedOverridesGetter item,
            string? name = null,
            SpeedOverrides.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISpeedOverridesGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SpeedOverrides.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"SpeedOverrides =>");
            }
            else
            {
                sb.AppendLine($"{name} (SpeedOverrides) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISpeedOverridesGetter item,
            StructuredStringBuilder sb,
            SpeedOverrides.Mask<bool>? printMask = null)
        {
            if (printMask?.LeftWalk ?? true)
            {
                sb.AppendItem(item.LeftWalk, "LeftWalk");
            }
            if (printMask?.LeftRun ?? true)
            {
                sb.AppendItem(item.LeftRun, "LeftRun");
            }
            if (printMask?.RightWalk ?? true)
            {
                sb.AppendItem(item.RightWalk, "RightWalk");
            }
            if (printMask?.RightRun ?? true)
            {
                sb.AppendItem(item.RightRun, "RightRun");
            }
            if (printMask?.ForwardWalk ?? true)
            {
                sb.AppendItem(item.ForwardWalk, "ForwardWalk");
            }
            if (printMask?.ForwardRun ?? true)
            {
                sb.AppendItem(item.ForwardRun, "ForwardRun");
            }
            if (printMask?.BackWalk ?? true)
            {
                sb.AppendItem(item.BackWalk, "BackWalk");
            }
            if (printMask?.BackRun ?? true)
            {
                sb.AppendItem(item.BackRun, "BackRun");
            }
            if (printMask?.RotateWalk ?? true)
            {
                sb.AppendItem(item.RotateWalk, "RotateWalk");
            }
            if (printMask?.RotateRun ?? true)
            {
                sb.AppendItem(item.RotateRun, "RotateRun");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISpeedOverridesGetter? lhs,
            ISpeedOverridesGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)SpeedOverrides_FieldIndex.LeftWalk) ?? true))
            {
                if (!lhs.LeftWalk.EqualsWithin(rhs.LeftWalk)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SpeedOverrides_FieldIndex.LeftRun) ?? true))
            {
                if (!lhs.LeftRun.EqualsWithin(rhs.LeftRun)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SpeedOverrides_FieldIndex.RightWalk) ?? true))
            {
                if (!lhs.RightWalk.EqualsWithin(rhs.RightWalk)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SpeedOverrides_FieldIndex.RightRun) ?? true))
            {
                if (!lhs.RightRun.EqualsWithin(rhs.RightRun)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SpeedOverrides_FieldIndex.ForwardWalk) ?? true))
            {
                if (!lhs.ForwardWalk.EqualsWithin(rhs.ForwardWalk)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SpeedOverrides_FieldIndex.ForwardRun) ?? true))
            {
                if (!lhs.ForwardRun.EqualsWithin(rhs.ForwardRun)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SpeedOverrides_FieldIndex.BackWalk) ?? true))
            {
                if (!lhs.BackWalk.EqualsWithin(rhs.BackWalk)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SpeedOverrides_FieldIndex.BackRun) ?? true))
            {
                if (!lhs.BackRun.EqualsWithin(rhs.BackRun)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SpeedOverrides_FieldIndex.RotateWalk) ?? true))
            {
                if (!lhs.RotateWalk.EqualsWithin(rhs.RotateWalk)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SpeedOverrides_FieldIndex.RotateRun) ?? true))
            {
                if (!lhs.RotateRun.EqualsWithin(rhs.RotateRun)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SpeedOverrides_FieldIndex.Unknown) ?? true))
            {
                if (!lhs.Unknown.EqualsWithin(rhs.Unknown)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ISpeedOverridesGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.LeftWalk);
            hash.Add(item.LeftRun);
            hash.Add(item.RightWalk);
            hash.Add(item.RightRun);
            hash.Add(item.ForwardWalk);
            hash.Add(item.ForwardRun);
            hash.Add(item.BackWalk);
            hash.Add(item.BackRun);
            hash.Add(item.RotateWalk);
            hash.Add(item.RotateRun);
            hash.Add(item.Unknown);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return SpeedOverrides.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISpeedOverridesGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class SpeedOverridesSetterTranslationCommon
    {
        public static readonly SpeedOverridesSetterTranslationCommon Instance = new SpeedOverridesSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISpeedOverrides item,
            ISpeedOverridesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)SpeedOverrides_FieldIndex.LeftWalk) ?? true))
            {
                item.LeftWalk = rhs.LeftWalk;
            }
            if ((copyMask?.GetShouldTranslate((int)SpeedOverrides_FieldIndex.LeftRun) ?? true))
            {
                item.LeftRun = rhs.LeftRun;
            }
            if ((copyMask?.GetShouldTranslate((int)SpeedOverrides_FieldIndex.RightWalk) ?? true))
            {
                item.RightWalk = rhs.RightWalk;
            }
            if ((copyMask?.GetShouldTranslate((int)SpeedOverrides_FieldIndex.RightRun) ?? true))
            {
                item.RightRun = rhs.RightRun;
            }
            if ((copyMask?.GetShouldTranslate((int)SpeedOverrides_FieldIndex.ForwardWalk) ?? true))
            {
                item.ForwardWalk = rhs.ForwardWalk;
            }
            if ((copyMask?.GetShouldTranslate((int)SpeedOverrides_FieldIndex.ForwardRun) ?? true))
            {
                item.ForwardRun = rhs.ForwardRun;
            }
            if ((copyMask?.GetShouldTranslate((int)SpeedOverrides_FieldIndex.BackWalk) ?? true))
            {
                item.BackWalk = rhs.BackWalk;
            }
            if ((copyMask?.GetShouldTranslate((int)SpeedOverrides_FieldIndex.BackRun) ?? true))
            {
                item.BackRun = rhs.BackRun;
            }
            if ((copyMask?.GetShouldTranslate((int)SpeedOverrides_FieldIndex.RotateWalk) ?? true))
            {
                item.RotateWalk = rhs.RotateWalk;
            }
            if ((copyMask?.GetShouldTranslate((int)SpeedOverrides_FieldIndex.RotateRun) ?? true))
            {
                item.RotateRun = rhs.RotateRun;
            }
            if ((copyMask?.GetShouldTranslate((int)SpeedOverrides_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ISpeedOverrides item,
            ISpeedOverridesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public SpeedOverrides DeepCopy(
            ISpeedOverridesGetter item,
            SpeedOverrides.TranslationMask? copyMask = null)
        {
            SpeedOverrides ret = (SpeedOverrides)((SpeedOverridesCommon)((ISpeedOverridesGetter)item).CommonInstance()!).GetNew();
            ((SpeedOverridesSetterTranslationCommon)((ISpeedOverridesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SpeedOverrides DeepCopy(
            ISpeedOverridesGetter item,
            out SpeedOverrides.ErrorMask errorMask,
            SpeedOverrides.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SpeedOverrides ret = (SpeedOverrides)((SpeedOverridesCommon)((ISpeedOverridesGetter)item).CommonInstance()!).GetNew();
            ((SpeedOverridesSetterTranslationCommon)((ISpeedOverridesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SpeedOverrides.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SpeedOverrides DeepCopy(
            ISpeedOverridesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SpeedOverrides ret = (SpeedOverrides)((SpeedOverridesCommon)((ISpeedOverridesGetter)item).CommonInstance()!).GetNew();
            ((SpeedOverridesSetterTranslationCommon)((ISpeedOverridesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class SpeedOverrides
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SpeedOverrides_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => SpeedOverrides_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SpeedOverridesCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return SpeedOverridesSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SpeedOverridesSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISpeedOverridesGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ISpeedOverridesGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ISpeedOverridesGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class SpeedOverridesBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly SpeedOverridesBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ISpeedOverridesGetter item,
            MutagenWriter writer)
        {
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.LeftWalk);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.LeftRun);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.RightWalk);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.RightRun);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ForwardWalk);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ForwardRun);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BackWalk);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BackRun);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.RotateWalk);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.RotateRun);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unknown);
        }

        public void Write(
            MutagenWriter writer,
            ISpeedOverridesGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.SPED),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ISpeedOverridesGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class SpeedOverridesBinaryCreateTranslation
    {
        public static readonly SpeedOverridesBinaryCreateTranslation Instance = new SpeedOverridesBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ISpeedOverrides item,
            MutagenFrame frame)
        {
            item.LeftWalk = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.LeftRun = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.RightWalk = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.RightRun = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ForwardWalk = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ForwardRun = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.BackWalk = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.BackRun = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.RotateWalk = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.RotateRun = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Unknown = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class SpeedOverridesBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ISpeedOverridesGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SpeedOverridesBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class SpeedOverridesBinaryOverlay :
        PluginBinaryOverlay,
        ISpeedOverridesGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SpeedOverrides_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => SpeedOverrides_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SpeedOverridesCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SpeedOverridesSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISpeedOverridesGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ISpeedOverridesGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ISpeedOverridesGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => SpeedOverridesBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SpeedOverridesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Single LeftWalk => _structData.Slice(0x0, 0x4).Float();
        public Single LeftRun => _structData.Slice(0x4, 0x4).Float();
        public Single RightWalk => _structData.Slice(0x8, 0x4).Float();
        public Single RightRun => _structData.Slice(0xC, 0x4).Float();
        public Single ForwardWalk => _structData.Slice(0x10, 0x4).Float();
        public Single ForwardRun => _structData.Slice(0x14, 0x4).Float();
        public Single BackWalk => _structData.Slice(0x18, 0x4).Float();
        public Single BackRun => _structData.Slice(0x1C, 0x4).Float();
        public Single RotateWalk => _structData.Slice(0x20, 0x4).Float();
        public Single RotateRun => _structData.Slice(0x24, 0x4).Float();
        public Single Unknown => _structData.Slice(0x28, 0x4).Float();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SpeedOverridesBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ISpeedOverridesGetter SpeedOverridesFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x2C,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new SpeedOverridesBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x2C + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ISpeedOverridesGetter SpeedOverridesFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return SpeedOverridesFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SpeedOverridesMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISpeedOverridesGetter rhs) return false;
            return ((SpeedOverridesCommon)((ISpeedOverridesGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISpeedOverridesGetter? obj)
        {
            return ((SpeedOverridesCommon)((ISpeedOverridesGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SpeedOverridesCommon)((ISpeedOverridesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

