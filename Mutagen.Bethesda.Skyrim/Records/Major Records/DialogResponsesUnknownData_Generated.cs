/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class DialogResponsesUnknownData :
        IDialogResponsesUnknownData,
        IEquatable<IDialogResponsesUnknownDataGetter>,
        ILoquiObjectSetter<DialogResponsesUnknownData>
    {
        #region Ctor
        public DialogResponsesUnknownData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region SCHR
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _SCHR;
        public MemorySlice<Byte>? SCHR
        {
            get => this._SCHR;
            set => this._SCHR = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IDialogResponsesUnknownDataGetter.SCHR => this.SCHR;
        #endregion
        #region QNAM
        private readonly IFormLinkNullable<ISkyrimMajorRecordGetter> _QNAM = new FormLinkNullable<ISkyrimMajorRecordGetter>();
        public IFormLinkNullable<ISkyrimMajorRecordGetter> QNAM
        {
            get => _QNAM;
            set => _QNAM.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISkyrimMajorRecordGetter> IDialogResponsesUnknownDataGetter.QNAM => this.QNAM;
        #endregion
        #region NEXT
        public Boolean NEXT { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DialogResponsesUnknownDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IDialogResponsesUnknownDataGetter rhs) return false;
            return ((DialogResponsesUnknownDataCommon)((IDialogResponsesUnknownDataGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IDialogResponsesUnknownDataGetter? obj)
        {
            return ((DialogResponsesUnknownDataCommon)((IDialogResponsesUnknownDataGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((DialogResponsesUnknownDataCommon)((IDialogResponsesUnknownDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.SCHR = initialValue;
                this.QNAM = initialValue;
                this.NEXT = initialValue;
            }

            public Mask(
                TItem SCHR,
                TItem QNAM,
                TItem NEXT)
            {
                this.SCHR = SCHR;
                this.QNAM = QNAM;
                this.NEXT = NEXT;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem SCHR;
            public TItem QNAM;
            public TItem NEXT;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.SCHR, rhs.SCHR)) return false;
                if (!object.Equals(this.QNAM, rhs.QNAM)) return false;
                if (!object.Equals(this.NEXT, rhs.NEXT)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.SCHR);
                hash.Add(this.QNAM);
                hash.Add(this.NEXT);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.SCHR)) return false;
                if (!eval(this.QNAM)) return false;
                if (!eval(this.NEXT)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.SCHR)) return true;
                if (eval(this.QNAM)) return true;
                if (eval(this.NEXT)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DialogResponsesUnknownData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.SCHR = eval(this.SCHR);
                obj.QNAM = eval(this.QNAM);
                obj.NEXT = eval(this.NEXT);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(DialogResponsesUnknownData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, DialogResponsesUnknownData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(DialogResponsesUnknownData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.SCHR ?? true)
                    {
                        fg.AppendItem(SCHR, "SCHR");
                    }
                    if (printMask?.QNAM ?? true)
                    {
                        fg.AppendItem(QNAM, "QNAM");
                    }
                    if (printMask?.NEXT ?? true)
                    {
                        fg.AppendItem(NEXT, "NEXT");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? SCHR;
            public Exception? QNAM;
            public Exception? NEXT;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                DialogResponsesUnknownData_FieldIndex enu = (DialogResponsesUnknownData_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponsesUnknownData_FieldIndex.SCHR:
                        return SCHR;
                    case DialogResponsesUnknownData_FieldIndex.QNAM:
                        return QNAM;
                    case DialogResponsesUnknownData_FieldIndex.NEXT:
                        return NEXT;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                DialogResponsesUnknownData_FieldIndex enu = (DialogResponsesUnknownData_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponsesUnknownData_FieldIndex.SCHR:
                        this.SCHR = ex;
                        break;
                    case DialogResponsesUnknownData_FieldIndex.QNAM:
                        this.QNAM = ex;
                        break;
                    case DialogResponsesUnknownData_FieldIndex.NEXT:
                        this.NEXT = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                DialogResponsesUnknownData_FieldIndex enu = (DialogResponsesUnknownData_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponsesUnknownData_FieldIndex.SCHR:
                        this.SCHR = (Exception?)obj;
                        break;
                    case DialogResponsesUnknownData_FieldIndex.QNAM:
                        this.QNAM = (Exception?)obj;
                        break;
                    case DialogResponsesUnknownData_FieldIndex.NEXT:
                        this.NEXT = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (SCHR != null) return true;
                if (QNAM != null) return true;
                if (NEXT != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(SCHR, "SCHR");
                fg.AppendItem(QNAM, "QNAM");
                fg.AppendItem(NEXT, "NEXT");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.SCHR = this.SCHR.Combine(rhs.SCHR);
                ret.QNAM = this.QNAM.Combine(rhs.QNAM);
                ret.NEXT = this.NEXT.Combine(rhs.NEXT);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool SCHR;
            public bool QNAM;
            public bool NEXT;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.SCHR = defaultOn;
                this.QNAM = defaultOn;
                this.NEXT = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((SCHR, null));
                ret.Add((QNAM, null));
                ret.Add((NEXT, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> ContainedFormLinks => DialogResponsesUnknownDataCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogResponsesUnknownDataSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => DialogResponsesUnknownDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((DialogResponsesUnknownDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static DialogResponsesUnknownData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new DialogResponsesUnknownData();
            ((DialogResponsesUnknownDataSetterCommon)((IDialogResponsesUnknownDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out DialogResponsesUnknownData item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((DialogResponsesUnknownDataSetterCommon)((IDialogResponsesUnknownDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static DialogResponsesUnknownData GetNew()
        {
            return new DialogResponsesUnknownData();
        }

    }
    #endregion

    #region Interface
    public partial interface IDialogResponsesUnknownData :
        IDialogResponsesUnknownDataGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IDialogResponsesUnknownData>
    {
        new MemorySlice<Byte>? SCHR { get; set; }
        new IFormLinkNullable<ISkyrimMajorRecordGetter> QNAM { get; set; }
        new Boolean NEXT { get; set; }
    }

    public partial interface IDialogResponsesUnknownDataGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IDialogResponsesUnknownDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => DialogResponsesUnknownData_Registration.Instance;
        ReadOnlyMemorySlice<Byte>? SCHR { get; }
        IFormLinkNullableGetter<ISkyrimMajorRecordGetter> QNAM { get; }
        Boolean NEXT { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class DialogResponsesUnknownDataMixIn
    {
        public static void Clear(this IDialogResponsesUnknownData item)
        {
            ((DialogResponsesUnknownDataSetterCommon)((IDialogResponsesUnknownDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DialogResponsesUnknownData.Mask<bool> GetEqualsMask(
            this IDialogResponsesUnknownDataGetter item,
            IDialogResponsesUnknownDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DialogResponsesUnknownDataCommon)((IDialogResponsesUnknownDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IDialogResponsesUnknownDataGetter item,
            string? name = null,
            DialogResponsesUnknownData.Mask<bool>? printMask = null)
        {
            return ((DialogResponsesUnknownDataCommon)((IDialogResponsesUnknownDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IDialogResponsesUnknownDataGetter item,
            FileGeneration fg,
            string? name = null,
            DialogResponsesUnknownData.Mask<bool>? printMask = null)
        {
            ((DialogResponsesUnknownDataCommon)((IDialogResponsesUnknownDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IDialogResponsesUnknownDataGetter item,
            IDialogResponsesUnknownDataGetter rhs,
            DialogResponsesUnknownData.TranslationMask? equalsMask = null)
        {
            return ((DialogResponsesUnknownDataCommon)((IDialogResponsesUnknownDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IDialogResponsesUnknownData lhs,
            IDialogResponsesUnknownDataGetter rhs)
        {
            ((DialogResponsesUnknownDataSetterTranslationCommon)((IDialogResponsesUnknownDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IDialogResponsesUnknownData lhs,
            IDialogResponsesUnknownDataGetter rhs,
            DialogResponsesUnknownData.TranslationMask? copyMask = null)
        {
            ((DialogResponsesUnknownDataSetterTranslationCommon)((IDialogResponsesUnknownDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IDialogResponsesUnknownData lhs,
            IDialogResponsesUnknownDataGetter rhs,
            out DialogResponsesUnknownData.ErrorMask errorMask,
            DialogResponsesUnknownData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DialogResponsesUnknownDataSetterTranslationCommon)((IDialogResponsesUnknownDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = DialogResponsesUnknownData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDialogResponsesUnknownData lhs,
            IDialogResponsesUnknownDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DialogResponsesUnknownDataSetterTranslationCommon)((IDialogResponsesUnknownDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static DialogResponsesUnknownData DeepCopy(
            this IDialogResponsesUnknownDataGetter item,
            DialogResponsesUnknownData.TranslationMask? copyMask = null)
        {
            return ((DialogResponsesUnknownDataSetterTranslationCommon)((IDialogResponsesUnknownDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DialogResponsesUnknownData DeepCopy(
            this IDialogResponsesUnknownDataGetter item,
            out DialogResponsesUnknownData.ErrorMask errorMask,
            DialogResponsesUnknownData.TranslationMask? copyMask = null)
        {
            return ((DialogResponsesUnknownDataSetterTranslationCommon)((IDialogResponsesUnknownDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DialogResponsesUnknownData DeepCopy(
            this IDialogResponsesUnknownDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DialogResponsesUnknownDataSetterTranslationCommon)((IDialogResponsesUnknownDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IDialogResponsesUnknownData item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((DialogResponsesUnknownDataSetterCommon)((IDialogResponsesUnknownDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum DialogResponsesUnknownData_FieldIndex
    {
        SCHR = 0,
        QNAM = 1,
        NEXT = 2,
    }
    #endregion

    #region Registration
    public partial class DialogResponsesUnknownData_Registration : ILoquiRegistration
    {
        public static readonly DialogResponsesUnknownData_Registration Instance = new DialogResponsesUnknownData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 357,
            version: 0);

        public const string GUID = "17054176-0068-49c7-be25-be4e156505d0";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(DialogResponsesUnknownData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DialogResponsesUnknownData.ErrorMask);

        public static readonly Type ClassType = typeof(DialogResponsesUnknownData);

        public static readonly Type GetterType = typeof(IDialogResponsesUnknownDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDialogResponsesUnknownData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.DialogResponsesUnknownData";

        public const string Name = "DialogResponsesUnknownData";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static TriggeringRecordCollection TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<TriggeringRecordCollection> _TriggeringRecordTypes = new Lazy<TriggeringRecordCollection>(() =>
        {
            return new TriggeringRecordCollection(
                RecordTypes.SCHR,
                RecordTypes.QNAM,
                RecordTypes.NEXT);
        });
        public static readonly Type BinaryWriteTranslation = typeof(DialogResponsesUnknownDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class DialogResponsesUnknownDataSetterCommon
    {
        public static readonly DialogResponsesUnknownDataSetterCommon Instance = new DialogResponsesUnknownDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDialogResponsesUnknownData item)
        {
            ClearPartial();
            item.SCHR = default;
            item.QNAM.Clear();
            item.NEXT = default;
        }
        
        #region Mutagen
        public void RemapLinks(IDialogResponsesUnknownData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.QNAM.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IDialogResponsesUnknownData item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: DialogResponsesUnknownDataBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: DialogResponsesUnknownDataBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class DialogResponsesUnknownDataCommon
    {
        public static readonly DialogResponsesUnknownDataCommon Instance = new DialogResponsesUnknownDataCommon();

        public DialogResponsesUnknownData.Mask<bool> GetEqualsMask(
            IDialogResponsesUnknownDataGetter item,
            IDialogResponsesUnknownDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DialogResponsesUnknownData.Mask<bool>(false);
            ((DialogResponsesUnknownDataCommon)((IDialogResponsesUnknownDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDialogResponsesUnknownDataGetter item,
            IDialogResponsesUnknownDataGetter rhs,
            DialogResponsesUnknownData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.SCHR = MemorySliceExt.Equal(item.SCHR, rhs.SCHR);
            ret.QNAM = item.QNAM.Equals(rhs.QNAM);
            ret.NEXT = item.NEXT == rhs.NEXT;
        }
        
        public string ToString(
            IDialogResponsesUnknownDataGetter item,
            string? name = null,
            DialogResponsesUnknownData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IDialogResponsesUnknownDataGetter item,
            FileGeneration fg,
            string? name = null,
            DialogResponsesUnknownData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"DialogResponsesUnknownData =>");
            }
            else
            {
                fg.AppendLine($"{name} (DialogResponsesUnknownData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IDialogResponsesUnknownDataGetter item,
            FileGeneration fg,
            DialogResponsesUnknownData.Mask<bool>? printMask = null)
        {
            if ((printMask?.SCHR ?? true)
                && item.SCHR is {} SCHRItem)
            {
                fg.AppendLine($"SCHR => {SpanExt.ToHexString(SCHRItem)}");
            }
            if (printMask?.QNAM ?? true)
            {
                fg.AppendItem(item.QNAM.FormKeyNullable, "QNAM");
            }
            if (printMask?.NEXT ?? true)
            {
                fg.AppendItem(item.NEXT, "NEXT");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDialogResponsesUnknownDataGetter? lhs,
            IDialogResponsesUnknownDataGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)DialogResponsesUnknownData_FieldIndex.SCHR) ?? true))
            {
                if (!MemorySliceExt.Equal(lhs.SCHR, rhs.SCHR)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)DialogResponsesUnknownData_FieldIndex.QNAM) ?? true))
            {
                if (!lhs.QNAM.Equals(rhs.QNAM)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)DialogResponsesUnknownData_FieldIndex.NEXT) ?? true))
            {
                if (lhs.NEXT != rhs.NEXT) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IDialogResponsesUnknownDataGetter item)
        {
            var hash = new HashCode();
            if (item.SCHR is {} SCHRItem)
            {
                hash.Add(SCHRItem);
            }
            hash.Add(item.QNAM);
            hash.Add(item.NEXT);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return DialogResponsesUnknownData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IDialogResponsesUnknownDataGetter obj)
        {
            if (obj.QNAM.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.QNAM);
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class DialogResponsesUnknownDataSetterTranslationCommon
    {
        public static readonly DialogResponsesUnknownDataSetterTranslationCommon Instance = new DialogResponsesUnknownDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IDialogResponsesUnknownData item,
            IDialogResponsesUnknownDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)DialogResponsesUnknownData_FieldIndex.SCHR) ?? true))
            {
                if(rhs.SCHR is {} SCHRrhs)
                {
                    item.SCHR = SCHRrhs.ToArray();
                }
                else
                {
                    item.SCHR = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponsesUnknownData_FieldIndex.QNAM) ?? true))
            {
                item.QNAM.SetTo(rhs.QNAM.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponsesUnknownData_FieldIndex.NEXT) ?? true))
            {
                item.NEXT = rhs.NEXT;
            }
        }
        
        #endregion
        
        public DialogResponsesUnknownData DeepCopy(
            IDialogResponsesUnknownDataGetter item,
            DialogResponsesUnknownData.TranslationMask? copyMask = null)
        {
            DialogResponsesUnknownData ret = (DialogResponsesUnknownData)((DialogResponsesUnknownDataCommon)((IDialogResponsesUnknownDataGetter)item).CommonInstance()!).GetNew();
            ((DialogResponsesUnknownDataSetterTranslationCommon)((IDialogResponsesUnknownDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public DialogResponsesUnknownData DeepCopy(
            IDialogResponsesUnknownDataGetter item,
            out DialogResponsesUnknownData.ErrorMask errorMask,
            DialogResponsesUnknownData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DialogResponsesUnknownData ret = (DialogResponsesUnknownData)((DialogResponsesUnknownDataCommon)((IDialogResponsesUnknownDataGetter)item).CommonInstance()!).GetNew();
            ((DialogResponsesUnknownDataSetterTranslationCommon)((IDialogResponsesUnknownDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = DialogResponsesUnknownData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public DialogResponsesUnknownData DeepCopy(
            IDialogResponsesUnknownDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DialogResponsesUnknownData ret = (DialogResponsesUnknownData)((DialogResponsesUnknownDataCommon)((IDialogResponsesUnknownDataGetter)item).CommonInstance()!).GetNew();
            ((DialogResponsesUnknownDataSetterTranslationCommon)((IDialogResponsesUnknownDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class DialogResponsesUnknownData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogResponsesUnknownData_Registration.Instance;
        public static DialogResponsesUnknownData_Registration StaticRegistration => DialogResponsesUnknownData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => DialogResponsesUnknownDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return DialogResponsesUnknownDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => DialogResponsesUnknownDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IDialogResponsesUnknownDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IDialogResponsesUnknownDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IDialogResponsesUnknownDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class DialogResponsesUnknownDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static DialogResponsesUnknownDataBinaryWriteTranslation Instance = new DialogResponsesUnknownDataBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IDialogResponsesUnknownDataGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SCHR,
                header: translationParams.ConvertToCustom(RecordTypes.SCHR));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.QNAM,
                header: translationParams.ConvertToCustom(RecordTypes.QNAM));
            BooleanBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteAsMarker(
                writer: writer,
                item: item.NEXT,
                header: translationParams.ConvertToCustom(RecordTypes.NEXT));
        }

        public void Write(
            MutagenWriter writer,
            IDialogResponsesUnknownDataGetter item,
            TypedWriteParams? translationParams = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IDialogResponsesUnknownDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class DialogResponsesUnknownDataBinaryCreateTranslation
    {
        public readonly static DialogResponsesUnknownDataBinaryCreateTranslation Instance = new DialogResponsesUnknownDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IDialogResponsesUnknownData item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IDialogResponsesUnknownData item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.SCHR:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)DialogResponsesUnknownData_FieldIndex.SCHR) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SCHR = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)DialogResponsesUnknownData_FieldIndex.SCHR;
                }
                case RecordTypeInts.QNAM:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)DialogResponsesUnknownData_FieldIndex.QNAM) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.QNAM.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogResponsesUnknownData_FieldIndex.QNAM;
                }
                case RecordTypeInts.NEXT:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)DialogResponsesUnknownData_FieldIndex.NEXT) return ParseResult.Stop;
                    item.NEXT = true;
                    return (int)DialogResponsesUnknownData_FieldIndex.NEXT;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class DialogResponsesUnknownDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IDialogResponsesUnknownDataGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((DialogResponsesUnknownDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class DialogResponsesUnknownDataBinaryOverlay :
        PluginBinaryOverlay,
        IDialogResponsesUnknownDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogResponsesUnknownData_Registration.Instance;
        public static DialogResponsesUnknownData_Registration StaticRegistration => DialogResponsesUnknownData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => DialogResponsesUnknownDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => DialogResponsesUnknownDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IDialogResponsesUnknownDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IDialogResponsesUnknownDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IDialogResponsesUnknownDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public IEnumerable<IFormLinkGetter> ContainedFormLinks => DialogResponsesUnknownDataCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => DialogResponsesUnknownDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((DialogResponsesUnknownDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region SCHR
        private int? _SCHRLocation;
        public ReadOnlyMemorySlice<Byte>? SCHR => _SCHRLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _SCHRLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region QNAM
        private int? _QNAMLocation;
        public IFormLinkNullableGetter<ISkyrimMajorRecordGetter> QNAM => _QNAMLocation.HasValue ? new FormLinkNullable<ISkyrimMajorRecordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _QNAMLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISkyrimMajorRecordGetter>.Null;
        #endregion
        #region NEXT
        private int? _NEXTLocation;
        public Boolean NEXT => _NEXTLocation.HasValue ? true : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected DialogResponsesUnknownDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static DialogResponsesUnknownDataBinaryOverlay DialogResponsesUnknownDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new DialogResponsesUnknownDataBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static DialogResponsesUnknownDataBinaryOverlay DialogResponsesUnknownDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return DialogResponsesUnknownDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.SCHR:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)DialogResponsesUnknownData_FieldIndex.SCHR) return ParseResult.Stop;
                    _SCHRLocation = (stream.Position - offset);
                    return (int)DialogResponsesUnknownData_FieldIndex.SCHR;
                }
                case RecordTypeInts.QNAM:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)DialogResponsesUnknownData_FieldIndex.QNAM) return ParseResult.Stop;
                    _QNAMLocation = (stream.Position - offset);
                    return (int)DialogResponsesUnknownData_FieldIndex.QNAM;
                }
                case RecordTypeInts.NEXT:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)DialogResponsesUnknownData_FieldIndex.NEXT) return ParseResult.Stop;
                    _NEXTLocation = (stream.Position - offset);
                    return (int)DialogResponsesUnknownData_FieldIndex.NEXT;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DialogResponsesUnknownDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IDialogResponsesUnknownDataGetter rhs) return false;
            return ((DialogResponsesUnknownDataCommon)((IDialogResponsesUnknownDataGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IDialogResponsesUnknownDataGetter? obj)
        {
            return ((DialogResponsesUnknownDataCommon)((IDialogResponsesUnknownDataGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((DialogResponsesUnknownDataCommon)((IDialogResponsesUnknownDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

