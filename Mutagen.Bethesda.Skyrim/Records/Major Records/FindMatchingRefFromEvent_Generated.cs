/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class FindMatchingRefFromEvent :
        IEquatable<IFindMatchingRefFromEventGetter>,
        IFindMatchingRefFromEvent,
        ILoquiObjectSetter<FindMatchingRefFromEvent>
    {
        #region Ctor
        public FindMatchingRefFromEvent()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region FromEvent
        public RecordType? FromEvent { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        RecordType? IFindMatchingRefFromEventGetter.FromEvent => this.FromEvent;
        #endregion
        #region EventData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _EventData;
        public MemorySlice<Byte>? EventData
        {
            get => this._EventData;
            set => this._EventData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IFindMatchingRefFromEventGetter.EventData => this.EventData;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FindMatchingRefFromEventMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IFindMatchingRefFromEventGetter rhs) return false;
            return ((FindMatchingRefFromEventCommon)((IFindMatchingRefFromEventGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IFindMatchingRefFromEventGetter? obj)
        {
            return ((FindMatchingRefFromEventCommon)((IFindMatchingRefFromEventGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((FindMatchingRefFromEventCommon)((IFindMatchingRefFromEventGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.FromEvent = initialValue;
                this.EventData = initialValue;
            }

            public Mask(
                TItem FromEvent,
                TItem EventData)
            {
                this.FromEvent = FromEvent;
                this.EventData = EventData;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem FromEvent;
            public TItem EventData;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.FromEvent, rhs.FromEvent)) return false;
                if (!object.Equals(this.EventData, rhs.EventData)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.FromEvent);
                hash.Add(this.EventData);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.FromEvent)) return false;
                if (!eval(this.EventData)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.FromEvent)) return true;
                if (eval(this.EventData)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new FindMatchingRefFromEvent.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.FromEvent = eval(this.FromEvent);
                obj.EventData = eval(this.EventData);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(FindMatchingRefFromEvent.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, FindMatchingRefFromEvent.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(FindMatchingRefFromEvent.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.FromEvent ?? true)
                    {
                        fg.AppendItem(FromEvent, "FromEvent");
                    }
                    if (printMask?.EventData ?? true)
                    {
                        fg.AppendItem(EventData, "EventData");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? FromEvent;
            public Exception? EventData;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                FindMatchingRefFromEvent_FieldIndex enu = (FindMatchingRefFromEvent_FieldIndex)index;
                switch (enu)
                {
                    case FindMatchingRefFromEvent_FieldIndex.FromEvent:
                        return FromEvent;
                    case FindMatchingRefFromEvent_FieldIndex.EventData:
                        return EventData;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                FindMatchingRefFromEvent_FieldIndex enu = (FindMatchingRefFromEvent_FieldIndex)index;
                switch (enu)
                {
                    case FindMatchingRefFromEvent_FieldIndex.FromEvent:
                        this.FromEvent = ex;
                        break;
                    case FindMatchingRefFromEvent_FieldIndex.EventData:
                        this.EventData = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                FindMatchingRefFromEvent_FieldIndex enu = (FindMatchingRefFromEvent_FieldIndex)index;
                switch (enu)
                {
                    case FindMatchingRefFromEvent_FieldIndex.FromEvent:
                        this.FromEvent = (Exception?)obj;
                        break;
                    case FindMatchingRefFromEvent_FieldIndex.EventData:
                        this.EventData = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (FromEvent != null) return true;
                if (EventData != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(FromEvent, "FromEvent");
                fg.AppendItem(EventData, "EventData");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.FromEvent = this.FromEvent.Combine(rhs.FromEvent);
                ret.EventData = this.EventData.Combine(rhs.EventData);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool FromEvent;
            public bool EventData;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.FromEvent = defaultOn;
                this.EventData = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((FromEvent, null));
                ret.Add((EventData, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => FindMatchingRefFromEventBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((FindMatchingRefFromEventBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static FindMatchingRefFromEvent CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new FindMatchingRefFromEvent();
            ((FindMatchingRefFromEventSetterCommon)((IFindMatchingRefFromEventGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out FindMatchingRefFromEvent item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((FindMatchingRefFromEventSetterCommon)((IFindMatchingRefFromEventGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static FindMatchingRefFromEvent GetNew()
        {
            return new FindMatchingRefFromEvent();
        }

    }
    #endregion

    #region Interface
    public partial interface IFindMatchingRefFromEvent :
        IFindMatchingRefFromEventGetter,
        ILoquiObjectSetter<IFindMatchingRefFromEvent>
    {
        new RecordType? FromEvent { get; set; }
        new MemorySlice<Byte>? EventData { get; set; }
    }

    public partial interface IFindMatchingRefFromEventGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IFindMatchingRefFromEventGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => FindMatchingRefFromEvent_Registration.Instance;
        RecordType? FromEvent { get; }
        ReadOnlyMemorySlice<Byte>? EventData { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class FindMatchingRefFromEventMixIn
    {
        public static void Clear(this IFindMatchingRefFromEvent item)
        {
            ((FindMatchingRefFromEventSetterCommon)((IFindMatchingRefFromEventGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static FindMatchingRefFromEvent.Mask<bool> GetEqualsMask(
            this IFindMatchingRefFromEventGetter item,
            IFindMatchingRefFromEventGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FindMatchingRefFromEventCommon)((IFindMatchingRefFromEventGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IFindMatchingRefFromEventGetter item,
            string? name = null,
            FindMatchingRefFromEvent.Mask<bool>? printMask = null)
        {
            return ((FindMatchingRefFromEventCommon)((IFindMatchingRefFromEventGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IFindMatchingRefFromEventGetter item,
            FileGeneration fg,
            string? name = null,
            FindMatchingRefFromEvent.Mask<bool>? printMask = null)
        {
            ((FindMatchingRefFromEventCommon)((IFindMatchingRefFromEventGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IFindMatchingRefFromEventGetter item,
            IFindMatchingRefFromEventGetter rhs,
            FindMatchingRefFromEvent.TranslationMask? equalsMask = null)
        {
            return ((FindMatchingRefFromEventCommon)((IFindMatchingRefFromEventGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IFindMatchingRefFromEvent lhs,
            IFindMatchingRefFromEventGetter rhs)
        {
            ((FindMatchingRefFromEventSetterTranslationCommon)((IFindMatchingRefFromEventGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IFindMatchingRefFromEvent lhs,
            IFindMatchingRefFromEventGetter rhs,
            FindMatchingRefFromEvent.TranslationMask? copyMask = null)
        {
            ((FindMatchingRefFromEventSetterTranslationCommon)((IFindMatchingRefFromEventGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IFindMatchingRefFromEvent lhs,
            IFindMatchingRefFromEventGetter rhs,
            out FindMatchingRefFromEvent.ErrorMask errorMask,
            FindMatchingRefFromEvent.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FindMatchingRefFromEventSetterTranslationCommon)((IFindMatchingRefFromEventGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = FindMatchingRefFromEvent.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFindMatchingRefFromEvent lhs,
            IFindMatchingRefFromEventGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FindMatchingRefFromEventSetterTranslationCommon)((IFindMatchingRefFromEventGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static FindMatchingRefFromEvent DeepCopy(
            this IFindMatchingRefFromEventGetter item,
            FindMatchingRefFromEvent.TranslationMask? copyMask = null)
        {
            return ((FindMatchingRefFromEventSetterTranslationCommon)((IFindMatchingRefFromEventGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static FindMatchingRefFromEvent DeepCopy(
            this IFindMatchingRefFromEventGetter item,
            out FindMatchingRefFromEvent.ErrorMask errorMask,
            FindMatchingRefFromEvent.TranslationMask? copyMask = null)
        {
            return ((FindMatchingRefFromEventSetterTranslationCommon)((IFindMatchingRefFromEventGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static FindMatchingRefFromEvent DeepCopy(
            this IFindMatchingRefFromEventGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FindMatchingRefFromEventSetterTranslationCommon)((IFindMatchingRefFromEventGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IFindMatchingRefFromEvent item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((FindMatchingRefFromEventSetterCommon)((IFindMatchingRefFromEventGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum FindMatchingRefFromEvent_FieldIndex
    {
        FromEvent = 0,
        EventData = 1,
    }
    #endregion

    #region Registration
    public partial class FindMatchingRefFromEvent_Registration : ILoquiRegistration
    {
        public static readonly FindMatchingRefFromEvent_Registration Instance = new FindMatchingRefFromEvent_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 372,
            version: 0);

        public const string GUID = "b0574d45-288a-48e8-97a9-556bfa90fc4a";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(FindMatchingRefFromEvent.Mask<>);

        public static readonly Type ErrorMaskType = typeof(FindMatchingRefFromEvent.ErrorMask);

        public static readonly Type ClassType = typeof(FindMatchingRefFromEvent);

        public static readonly Type GetterType = typeof(IFindMatchingRefFromEventGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFindMatchingRefFromEvent);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.FindMatchingRefFromEvent";

        public const string Name = "FindMatchingRefFromEvent";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RecordTypes.ALFE,
                        RecordTypes.ALFD
                    })
            );
        });
        public static readonly Type BinaryWriteTranslation = typeof(FindMatchingRefFromEventBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class FindMatchingRefFromEventSetterCommon
    {
        public static readonly FindMatchingRefFromEventSetterCommon Instance = new FindMatchingRefFromEventSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFindMatchingRefFromEvent item)
        {
            ClearPartial();
            item.FromEvent = default;
            item.EventData = default;
        }
        
        #region Mutagen
        public void RemapLinks(IFindMatchingRefFromEvent obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IFindMatchingRefFromEvent item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: FindMatchingRefFromEventBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: FindMatchingRefFromEventBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class FindMatchingRefFromEventCommon
    {
        public static readonly FindMatchingRefFromEventCommon Instance = new FindMatchingRefFromEventCommon();

        public FindMatchingRefFromEvent.Mask<bool> GetEqualsMask(
            IFindMatchingRefFromEventGetter item,
            IFindMatchingRefFromEventGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new FindMatchingRefFromEvent.Mask<bool>(false);
            ((FindMatchingRefFromEventCommon)((IFindMatchingRefFromEventGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFindMatchingRefFromEventGetter item,
            IFindMatchingRefFromEventGetter rhs,
            FindMatchingRefFromEvent.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.FromEvent = item.FromEvent == rhs.FromEvent;
            ret.EventData = MemorySliceExt.Equal(item.EventData, rhs.EventData);
        }
        
        public string ToString(
            IFindMatchingRefFromEventGetter item,
            string? name = null,
            FindMatchingRefFromEvent.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IFindMatchingRefFromEventGetter item,
            FileGeneration fg,
            string? name = null,
            FindMatchingRefFromEvent.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"FindMatchingRefFromEvent =>");
            }
            else
            {
                fg.AppendLine($"{name} (FindMatchingRefFromEvent) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IFindMatchingRefFromEventGetter item,
            FileGeneration fg,
            FindMatchingRefFromEvent.Mask<bool>? printMask = null)
        {
            if ((printMask?.FromEvent ?? true)
                && item.FromEvent is {} FromEventItem)
            {
                fg.AppendItem(FromEventItem, "FromEvent");
            }
            if ((printMask?.EventData ?? true)
                && item.EventData is {} EventDataItem)
            {
                fg.AppendLine($"EventData => {SpanExt.ToHexString(EventDataItem)}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFindMatchingRefFromEventGetter? lhs,
            IFindMatchingRefFromEventGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)FindMatchingRefFromEvent_FieldIndex.FromEvent) ?? true))
            {
                if (lhs.FromEvent != rhs.FromEvent) return false;
            }
            if ((crystal?.GetShouldTranslate((int)FindMatchingRefFromEvent_FieldIndex.EventData) ?? true))
            {
                if (!MemorySliceExt.Equal(lhs.EventData, rhs.EventData)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IFindMatchingRefFromEventGetter item)
        {
            var hash = new HashCode();
            if (item.FromEvent is {} FromEventitem)
            {
                hash.Add(FromEventitem);
            }
            if (item.EventData is {} EventDataItem)
            {
                hash.Add(EventDataItem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return FindMatchingRefFromEvent.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IFindMatchingRefFromEventGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class FindMatchingRefFromEventSetterTranslationCommon
    {
        public static readonly FindMatchingRefFromEventSetterTranslationCommon Instance = new FindMatchingRefFromEventSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IFindMatchingRefFromEvent item,
            IFindMatchingRefFromEventGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)FindMatchingRefFromEvent_FieldIndex.FromEvent) ?? true))
            {
                item.FromEvent = rhs.FromEvent;
            }
            if ((copyMask?.GetShouldTranslate((int)FindMatchingRefFromEvent_FieldIndex.EventData) ?? true))
            {
                if(rhs.EventData is {} EventDatarhs)
                {
                    item.EventData = EventDatarhs.ToArray();
                }
                else
                {
                    item.EventData = default;
                }
            }
        }
        
        #endregion
        
        public FindMatchingRefFromEvent DeepCopy(
            IFindMatchingRefFromEventGetter item,
            FindMatchingRefFromEvent.TranslationMask? copyMask = null)
        {
            FindMatchingRefFromEvent ret = (FindMatchingRefFromEvent)((FindMatchingRefFromEventCommon)((IFindMatchingRefFromEventGetter)item).CommonInstance()!).GetNew();
            ((FindMatchingRefFromEventSetterTranslationCommon)((IFindMatchingRefFromEventGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public FindMatchingRefFromEvent DeepCopy(
            IFindMatchingRefFromEventGetter item,
            out FindMatchingRefFromEvent.ErrorMask errorMask,
            FindMatchingRefFromEvent.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            FindMatchingRefFromEvent ret = (FindMatchingRefFromEvent)((FindMatchingRefFromEventCommon)((IFindMatchingRefFromEventGetter)item).CommonInstance()!).GetNew();
            ((FindMatchingRefFromEventSetterTranslationCommon)((IFindMatchingRefFromEventGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = FindMatchingRefFromEvent.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public FindMatchingRefFromEvent DeepCopy(
            IFindMatchingRefFromEventGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            FindMatchingRefFromEvent ret = (FindMatchingRefFromEvent)((FindMatchingRefFromEventCommon)((IFindMatchingRefFromEventGetter)item).CommonInstance()!).GetNew();
            ((FindMatchingRefFromEventSetterTranslationCommon)((IFindMatchingRefFromEventGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class FindMatchingRefFromEvent
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FindMatchingRefFromEvent_Registration.Instance;
        public static FindMatchingRefFromEvent_Registration StaticRegistration => FindMatchingRefFromEvent_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => FindMatchingRefFromEventCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return FindMatchingRefFromEventSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => FindMatchingRefFromEventSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IFindMatchingRefFromEventGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IFindMatchingRefFromEventGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IFindMatchingRefFromEventGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FindMatchingRefFromEventBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static FindMatchingRefFromEventBinaryWriteTranslation Instance = new FindMatchingRefFromEventBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IFindMatchingRefFromEventGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            RecordTypeBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FromEvent,
                header: translationParams.ConvertToCustom(RecordTypes.ALFE));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.EventData,
                header: translationParams.ConvertToCustom(RecordTypes.ALFD));
        }

        public void Write(
            MutagenWriter writer,
            IFindMatchingRefFromEventGetter item,
            TypedWriteParams? translationParams = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IFindMatchingRefFromEventGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class FindMatchingRefFromEventBinaryCreateTranslation
    {
        public readonly static FindMatchingRefFromEventBinaryCreateTranslation Instance = new FindMatchingRefFromEventBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IFindMatchingRefFromEvent item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IFindMatchingRefFromEvent item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.ALFE:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)FindMatchingRefFromEvent_FieldIndex.FromEvent) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FromEvent = RecordTypeBinaryTranslation.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)FindMatchingRefFromEvent_FieldIndex.FromEvent;
                }
                case RecordTypeInts.ALFD:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)FindMatchingRefFromEvent_FieldIndex.EventData) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EventData = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)FindMatchingRefFromEvent_FieldIndex.EventData;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class FindMatchingRefFromEventBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IFindMatchingRefFromEventGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((FindMatchingRefFromEventBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FindMatchingRefFromEventBinaryOverlay :
        PluginBinaryOverlay,
        IFindMatchingRefFromEventGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FindMatchingRefFromEvent_Registration.Instance;
        public static FindMatchingRefFromEvent_Registration StaticRegistration => FindMatchingRefFromEvent_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => FindMatchingRefFromEventCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => FindMatchingRefFromEventSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IFindMatchingRefFromEventGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IFindMatchingRefFromEventGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IFindMatchingRefFromEventGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => FindMatchingRefFromEventBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((FindMatchingRefFromEventBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region FromEvent
        private int? _FromEventLocation;
        public RecordType? FromEvent => _FromEventLocation.HasValue ? new RecordType(BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _FromEventLocation.Value, _package.MetaData.Constants))) : default(RecordType?);
        #endregion
        #region EventData
        private int? _EventDataLocation;
        public ReadOnlyMemorySlice<Byte>? EventData => _EventDataLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _EventDataLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected FindMatchingRefFromEventBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static FindMatchingRefFromEventBinaryOverlay FindMatchingRefFromEventFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new FindMatchingRefFromEventBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static FindMatchingRefFromEventBinaryOverlay FindMatchingRefFromEventFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return FindMatchingRefFromEventFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.ALFE:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)FindMatchingRefFromEvent_FieldIndex.FromEvent) return ParseResult.Stop;
                    _FromEventLocation = (stream.Position - offset);
                    return (int)FindMatchingRefFromEvent_FieldIndex.FromEvent;
                }
                case RecordTypeInts.ALFD:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)FindMatchingRefFromEvent_FieldIndex.EventData) return ParseResult.Stop;
                    _EventDataLocation = (stream.Position - offset);
                    return (int)FindMatchingRefFromEvent_FieldIndex.EventData;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FindMatchingRefFromEventMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IFindMatchingRefFromEventGetter rhs) return false;
            return ((FindMatchingRefFromEventCommon)((IFindMatchingRefFromEventGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IFindMatchingRefFromEventGetter? obj)
        {
            return ((FindMatchingRefFromEventCommon)((IFindMatchingRefFromEventGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((FindMatchingRefFromEventCommon)((IFindMatchingRefFromEventGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

