/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class SoundOutputAttenuation :
        IEquatable<ISoundOutputAttenuationGetter>,
        ILoquiObjectSetter<SoundOutputAttenuation>,
        ISoundOutputAttenuation
    {
        #region Ctor
        public SoundOutputAttenuation()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Unknown
        public Int32 Unknown { get; set; } = default(Int32);
        #endregion
        #region MinDistance
        public Single MinDistance { get; set; } = default(Single);
        #endregion
        #region MaxDistance
        public Single MaxDistance { get; set; } = default(Single);
        #endregion
        #region Curve
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Curve = new byte[5];
        public MemorySlice<Byte> Curve
        {
            get => _Curve;
            set => this._Curve = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> ISoundOutputAttenuationGetter.Curve => this.Curve;
        #endregion
        #region Unknown2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unknown2 = new byte[3];
        public MemorySlice<Byte> Unknown2
        {
            get => _Unknown2;
            set => this._Unknown2 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> ISoundOutputAttenuationGetter.Unknown2 => this.Unknown2;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SoundOutputAttenuationMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISoundOutputAttenuationGetter rhs) return false;
            return ((SoundOutputAttenuationCommon)((ISoundOutputAttenuationGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISoundOutputAttenuationGetter? obj)
        {
            return ((SoundOutputAttenuationCommon)((ISoundOutputAttenuationGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SoundOutputAttenuationCommon)((ISoundOutputAttenuationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Unknown = initialValue;
                this.MinDistance = initialValue;
                this.MaxDistance = initialValue;
                this.Curve = initialValue;
                this.Unknown2 = initialValue;
            }

            public Mask(
                TItem Unknown,
                TItem MinDistance,
                TItem MaxDistance,
                TItem Curve,
                TItem Unknown2)
            {
                this.Unknown = Unknown;
                this.MinDistance = MinDistance;
                this.MaxDistance = MaxDistance;
                this.Curve = Curve;
                this.Unknown2 = Unknown2;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Unknown;
            public TItem MinDistance;
            public TItem MaxDistance;
            public TItem Curve;
            public TItem Unknown2;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.MinDistance, rhs.MinDistance)) return false;
                if (!object.Equals(this.MaxDistance, rhs.MaxDistance)) return false;
                if (!object.Equals(this.Curve, rhs.Curve)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Unknown);
                hash.Add(this.MinDistance);
                hash.Add(this.MaxDistance);
                hash.Add(this.Curve);
                hash.Add(this.Unknown2);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Unknown)) return false;
                if (!eval(this.MinDistance)) return false;
                if (!eval(this.MaxDistance)) return false;
                if (!eval(this.Curve)) return false;
                if (!eval(this.Unknown2)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Unknown)) return true;
                if (eval(this.MinDistance)) return true;
                if (eval(this.MaxDistance)) return true;
                if (eval(this.Curve)) return true;
                if (eval(this.Unknown2)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SoundOutputAttenuation.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Unknown = eval(this.Unknown);
                obj.MinDistance = eval(this.MinDistance);
                obj.MaxDistance = eval(this.MaxDistance);
                obj.Curve = eval(this.Curve);
                obj.Unknown2 = eval(this.Unknown2);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(SoundOutputAttenuation.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, SoundOutputAttenuation.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(SoundOutputAttenuation.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.MinDistance ?? true)
                    {
                        sb.AppendItem(MinDistance, "MinDistance");
                    }
                    if (printMask?.MaxDistance ?? true)
                    {
                        sb.AppendItem(MaxDistance, "MaxDistance");
                    }
                    if (printMask?.Curve ?? true)
                    {
                        sb.AppendItem(Curve, "Curve");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        sb.AppendItem(Unknown2, "Unknown2");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Unknown;
            public Exception? MinDistance;
            public Exception? MaxDistance;
            public Exception? Curve;
            public Exception? Unknown2;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                SoundOutputAttenuation_FieldIndex enu = (SoundOutputAttenuation_FieldIndex)index;
                switch (enu)
                {
                    case SoundOutputAttenuation_FieldIndex.Unknown:
                        return Unknown;
                    case SoundOutputAttenuation_FieldIndex.MinDistance:
                        return MinDistance;
                    case SoundOutputAttenuation_FieldIndex.MaxDistance:
                        return MaxDistance;
                    case SoundOutputAttenuation_FieldIndex.Curve:
                        return Curve;
                    case SoundOutputAttenuation_FieldIndex.Unknown2:
                        return Unknown2;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                SoundOutputAttenuation_FieldIndex enu = (SoundOutputAttenuation_FieldIndex)index;
                switch (enu)
                {
                    case SoundOutputAttenuation_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case SoundOutputAttenuation_FieldIndex.MinDistance:
                        this.MinDistance = ex;
                        break;
                    case SoundOutputAttenuation_FieldIndex.MaxDistance:
                        this.MaxDistance = ex;
                        break;
                    case SoundOutputAttenuation_FieldIndex.Curve:
                        this.Curve = ex;
                        break;
                    case SoundOutputAttenuation_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                SoundOutputAttenuation_FieldIndex enu = (SoundOutputAttenuation_FieldIndex)index;
                switch (enu)
                {
                    case SoundOutputAttenuation_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case SoundOutputAttenuation_FieldIndex.MinDistance:
                        this.MinDistance = (Exception?)obj;
                        break;
                    case SoundOutputAttenuation_FieldIndex.MaxDistance:
                        this.MaxDistance = (Exception?)obj;
                        break;
                    case SoundOutputAttenuation_FieldIndex.Curve:
                        this.Curve = (Exception?)obj;
                        break;
                    case SoundOutputAttenuation_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Unknown != null) return true;
                if (MinDistance != null) return true;
                if (MaxDistance != null) return true;
                if (Curve != null) return true;
                if (Unknown2 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                {
                    sb.AppendItem(MinDistance, "MinDistance");
                }
                {
                    sb.AppendItem(MaxDistance, "MaxDistance");
                }
                {
                    sb.AppendItem(Curve, "Curve");
                }
                {
                    sb.AppendItem(Unknown2, "Unknown2");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.MinDistance = this.MinDistance.Combine(rhs.MinDistance);
                ret.MaxDistance = this.MaxDistance.Combine(rhs.MaxDistance);
                ret.Curve = this.Curve.Combine(rhs.Curve);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Unknown;
            public bool MinDistance;
            public bool MaxDistance;
            public bool Curve;
            public bool Unknown2;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Unknown = defaultOn;
                this.MinDistance = defaultOn;
                this.MaxDistance = defaultOn;
                this.Curve = defaultOn;
                this.Unknown2 = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Unknown, null));
                ret.Add((MinDistance, null));
                ret.Add((MaxDistance, null));
                ret.Add((Curve, null));
                ret.Add((Unknown2, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => SoundOutputAttenuationBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SoundOutputAttenuationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static SoundOutputAttenuation CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new SoundOutputAttenuation();
            ((SoundOutputAttenuationSetterCommon)((ISoundOutputAttenuationGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SoundOutputAttenuation item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SoundOutputAttenuationSetterCommon)((ISoundOutputAttenuationGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static SoundOutputAttenuation GetNew()
        {
            return new SoundOutputAttenuation();
        }

    }
    #endregion

    #region Interface
    public partial interface ISoundOutputAttenuation :
        ILoquiObjectSetter<ISoundOutputAttenuation>,
        ISoundOutputAttenuationGetter
    {
        new Int32 Unknown { get; set; }
        new Single MinDistance { get; set; }
        new Single MaxDistance { get; set; }
        new MemorySlice<Byte> Curve { get; set; }
        new MemorySlice<Byte> Unknown2 { get; set; }
    }

    public partial interface ISoundOutputAttenuationGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<ISoundOutputAttenuationGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => SoundOutputAttenuation_Registration.Instance;
        Int32 Unknown { get; }
        Single MinDistance { get; }
        Single MaxDistance { get; }
        ReadOnlyMemorySlice<Byte> Curve { get; }
        ReadOnlyMemorySlice<Byte> Unknown2 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SoundOutputAttenuationMixIn
    {
        public static void Clear(this ISoundOutputAttenuation item)
        {
            ((SoundOutputAttenuationSetterCommon)((ISoundOutputAttenuationGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SoundOutputAttenuation.Mask<bool> GetEqualsMask(
            this ISoundOutputAttenuationGetter item,
            ISoundOutputAttenuationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SoundOutputAttenuationCommon)((ISoundOutputAttenuationGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ISoundOutputAttenuationGetter item,
            string? name = null,
            SoundOutputAttenuation.Mask<bool>? printMask = null)
        {
            return ((SoundOutputAttenuationCommon)((ISoundOutputAttenuationGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ISoundOutputAttenuationGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SoundOutputAttenuation.Mask<bool>? printMask = null)
        {
            ((SoundOutputAttenuationCommon)((ISoundOutputAttenuationGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISoundOutputAttenuationGetter item,
            ISoundOutputAttenuationGetter rhs,
            SoundOutputAttenuation.TranslationMask? equalsMask = null)
        {
            return ((SoundOutputAttenuationCommon)((ISoundOutputAttenuationGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISoundOutputAttenuation lhs,
            ISoundOutputAttenuationGetter rhs)
        {
            ((SoundOutputAttenuationSetterTranslationCommon)((ISoundOutputAttenuationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ISoundOutputAttenuation lhs,
            ISoundOutputAttenuationGetter rhs,
            SoundOutputAttenuation.TranslationMask? copyMask = null)
        {
            ((SoundOutputAttenuationSetterTranslationCommon)((ISoundOutputAttenuationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ISoundOutputAttenuation lhs,
            ISoundOutputAttenuationGetter rhs,
            out SoundOutputAttenuation.ErrorMask errorMask,
            SoundOutputAttenuation.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SoundOutputAttenuationSetterTranslationCommon)((ISoundOutputAttenuationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SoundOutputAttenuation.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISoundOutputAttenuation lhs,
            ISoundOutputAttenuationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SoundOutputAttenuationSetterTranslationCommon)((ISoundOutputAttenuationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SoundOutputAttenuation DeepCopy(
            this ISoundOutputAttenuationGetter item,
            SoundOutputAttenuation.TranslationMask? copyMask = null)
        {
            return ((SoundOutputAttenuationSetterTranslationCommon)((ISoundOutputAttenuationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SoundOutputAttenuation DeepCopy(
            this ISoundOutputAttenuationGetter item,
            out SoundOutputAttenuation.ErrorMask errorMask,
            SoundOutputAttenuation.TranslationMask? copyMask = null)
        {
            return ((SoundOutputAttenuationSetterTranslationCommon)((ISoundOutputAttenuationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SoundOutputAttenuation DeepCopy(
            this ISoundOutputAttenuationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SoundOutputAttenuationSetterTranslationCommon)((ISoundOutputAttenuationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISoundOutputAttenuation item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((SoundOutputAttenuationSetterCommon)((ISoundOutputAttenuationGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum SoundOutputAttenuation_FieldIndex
    {
        Unknown = 0,
        MinDistance = 1,
        MaxDistance = 2,
        Curve = 3,
        Unknown2 = 4,
    }
    #endregion

    #region Registration
    internal partial class SoundOutputAttenuation_Registration : ILoquiRegistration
    {
        public static readonly SoundOutputAttenuation_Registration Instance = new SoundOutputAttenuation_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(SoundOutputAttenuation.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SoundOutputAttenuation.ErrorMask);

        public static readonly Type ClassType = typeof(SoundOutputAttenuation);

        public static readonly Type GetterType = typeof(ISoundOutputAttenuationGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISoundOutputAttenuation);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.SoundOutputAttenuation";

        public const string Name = "SoundOutputAttenuation";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ANAM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.ANAM);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(SoundOutputAttenuationBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class SoundOutputAttenuationSetterCommon
    {
        public static readonly SoundOutputAttenuationSetterCommon Instance = new SoundOutputAttenuationSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISoundOutputAttenuation item)
        {
            ClearPartial();
            item.Unknown = default(Int32);
            item.MinDistance = default(Single);
            item.MaxDistance = default(Single);
            item.Curve = new byte[5];
            item.Unknown2 = new byte[3];
        }
        
        #region Mutagen
        public void RemapLinks(ISoundOutputAttenuation obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISoundOutputAttenuation item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.ANAM),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: SoundOutputAttenuationBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class SoundOutputAttenuationCommon
    {
        public static readonly SoundOutputAttenuationCommon Instance = new SoundOutputAttenuationCommon();

        public SoundOutputAttenuation.Mask<bool> GetEqualsMask(
            ISoundOutputAttenuationGetter item,
            ISoundOutputAttenuationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SoundOutputAttenuation.Mask<bool>(false);
            ((SoundOutputAttenuationCommon)((ISoundOutputAttenuationGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISoundOutputAttenuationGetter item,
            ISoundOutputAttenuationGetter rhs,
            SoundOutputAttenuation.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.MinDistance = item.MinDistance.EqualsWithin(rhs.MinDistance);
            ret.MaxDistance = item.MaxDistance.EqualsWithin(rhs.MaxDistance);
            ret.Curve = MemoryExtensions.SequenceEqual(item.Curve.Span, rhs.Curve.Span);
            ret.Unknown2 = MemoryExtensions.SequenceEqual(item.Unknown2.Span, rhs.Unknown2.Span);
        }
        
        public string Print(
            ISoundOutputAttenuationGetter item,
            string? name = null,
            SoundOutputAttenuation.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISoundOutputAttenuationGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SoundOutputAttenuation.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"SoundOutputAttenuation =>");
            }
            else
            {
                sb.AppendLine($"{name} (SoundOutputAttenuation) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISoundOutputAttenuationGetter item,
            StructuredStringBuilder sb,
            SoundOutputAttenuation.Mask<bool>? printMask = null)
        {
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.MinDistance ?? true)
            {
                sb.AppendItem(item.MinDistance, "MinDistance");
            }
            if (printMask?.MaxDistance ?? true)
            {
                sb.AppendItem(item.MaxDistance, "MaxDistance");
            }
            if (printMask?.Curve ?? true)
            {
                sb.AppendLine($"Curve => {SpanExt.ToHexString(item.Curve)}");
            }
            if (printMask?.Unknown2 ?? true)
            {
                sb.AppendLine($"Unknown2 => {SpanExt.ToHexString(item.Unknown2)}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISoundOutputAttenuationGetter? lhs,
            ISoundOutputAttenuationGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)SoundOutputAttenuation_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundOutputAttenuation_FieldIndex.MinDistance) ?? true))
            {
                if (!lhs.MinDistance.EqualsWithin(rhs.MinDistance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundOutputAttenuation_FieldIndex.MaxDistance) ?? true))
            {
                if (!lhs.MaxDistance.EqualsWithin(rhs.MaxDistance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundOutputAttenuation_FieldIndex.Curve) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.Curve.Span, rhs.Curve.Span)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundOutputAttenuation_FieldIndex.Unknown2) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.Unknown2.Span, rhs.Unknown2.Span)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ISoundOutputAttenuationGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Unknown);
            hash.Add(item.MinDistance);
            hash.Add(item.MaxDistance);
            hash.Add(item.Curve);
            hash.Add(item.Unknown2);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return SoundOutputAttenuation.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISoundOutputAttenuationGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class SoundOutputAttenuationSetterTranslationCommon
    {
        public static readonly SoundOutputAttenuationSetterTranslationCommon Instance = new SoundOutputAttenuationSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISoundOutputAttenuation item,
            ISoundOutputAttenuationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)SoundOutputAttenuation_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundOutputAttenuation_FieldIndex.MinDistance) ?? true))
            {
                item.MinDistance = rhs.MinDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundOutputAttenuation_FieldIndex.MaxDistance) ?? true))
            {
                item.MaxDistance = rhs.MaxDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundOutputAttenuation_FieldIndex.Curve) ?? true))
            {
                item.Curve = rhs.Curve.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)SoundOutputAttenuation_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2.ToArray();
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ISoundOutputAttenuation item,
            ISoundOutputAttenuationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public SoundOutputAttenuation DeepCopy(
            ISoundOutputAttenuationGetter item,
            SoundOutputAttenuation.TranslationMask? copyMask = null)
        {
            SoundOutputAttenuation ret = (SoundOutputAttenuation)((SoundOutputAttenuationCommon)((ISoundOutputAttenuationGetter)item).CommonInstance()!).GetNew();
            ((SoundOutputAttenuationSetterTranslationCommon)((ISoundOutputAttenuationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SoundOutputAttenuation DeepCopy(
            ISoundOutputAttenuationGetter item,
            out SoundOutputAttenuation.ErrorMask errorMask,
            SoundOutputAttenuation.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SoundOutputAttenuation ret = (SoundOutputAttenuation)((SoundOutputAttenuationCommon)((ISoundOutputAttenuationGetter)item).CommonInstance()!).GetNew();
            ((SoundOutputAttenuationSetterTranslationCommon)((ISoundOutputAttenuationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SoundOutputAttenuation.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SoundOutputAttenuation DeepCopy(
            ISoundOutputAttenuationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SoundOutputAttenuation ret = (SoundOutputAttenuation)((SoundOutputAttenuationCommon)((ISoundOutputAttenuationGetter)item).CommonInstance()!).GetNew();
            ((SoundOutputAttenuationSetterTranslationCommon)((ISoundOutputAttenuationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class SoundOutputAttenuation
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundOutputAttenuation_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => SoundOutputAttenuation_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SoundOutputAttenuationCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return SoundOutputAttenuationSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SoundOutputAttenuationSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISoundOutputAttenuationGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ISoundOutputAttenuationGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ISoundOutputAttenuationGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class SoundOutputAttenuationBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly SoundOutputAttenuationBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ISoundOutputAttenuationGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Unknown);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.MinDistance);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.MaxDistance);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Curve);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unknown2);
        }

        public void Write(
            MutagenWriter writer,
            ISoundOutputAttenuationGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.ANAM),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ISoundOutputAttenuationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class SoundOutputAttenuationBinaryCreateTranslation
    {
        public static readonly SoundOutputAttenuationBinaryCreateTranslation Instance = new SoundOutputAttenuationBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ISoundOutputAttenuation item,
            MutagenFrame frame)
        {
            item.Unknown = frame.ReadInt32();
            item.MinDistance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.MaxDistance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Curve = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(5));
            item.Unknown2 = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(3));
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class SoundOutputAttenuationBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ISoundOutputAttenuationGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SoundOutputAttenuationBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class SoundOutputAttenuationBinaryOverlay :
        PluginBinaryOverlay,
        ISoundOutputAttenuationGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundOutputAttenuation_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => SoundOutputAttenuation_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SoundOutputAttenuationCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SoundOutputAttenuationSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISoundOutputAttenuationGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ISoundOutputAttenuationGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ISoundOutputAttenuationGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => SoundOutputAttenuationBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SoundOutputAttenuationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Int32 Unknown => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0x0, 0x4));
        public Single MinDistance => _structData.Slice(0x4, 0x4).Float();
        public Single MaxDistance => _structData.Slice(0x8, 0x4).Float();
        public ReadOnlyMemorySlice<Byte> Curve => _structData.Span.Slice(0xC, 0x5).ToArray();
        public ReadOnlyMemorySlice<Byte> Unknown2 => _structData.Span.Slice(0x11, 0x3).ToArray();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SoundOutputAttenuationBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ISoundOutputAttenuationGetter SoundOutputAttenuationFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x14,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new SoundOutputAttenuationBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x14 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ISoundOutputAttenuationGetter SoundOutputAttenuationFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return SoundOutputAttenuationFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SoundOutputAttenuationMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISoundOutputAttenuationGetter rhs) return false;
            return ((SoundOutputAttenuationCommon)((ISoundOutputAttenuationGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISoundOutputAttenuationGetter? obj)
        {
            return ((SoundOutputAttenuationCommon)((ISoundOutputAttenuationGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SoundOutputAttenuationCommon)((ISoundOutputAttenuationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

