/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class ArmorModel :
        IArmorModel,
        IEquatable<IArmorModelGetter>,
        ILoquiObjectSetter<ArmorModel>
    {
        #region Ctor
        public ArmorModel()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IArmorModelGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region Icons
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Icons? _Icons;
        /// <summary>
        /// Aspects: IHasIcons
        /// </summary>
        public Icons? Icons
        {
            get => _Icons;
            set => _Icons = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IIconsGetter? IArmorModelGetter.Icons => this.Icons;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IIconsGetter? IHasIconsGetter.Icons => this.Icons;
        #endregion
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ArmorModelMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IArmorModelGetter rhs) return false;
            return ((ArmorModelCommon)((IArmorModelGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IArmorModelGetter? obj)
        {
            return ((ArmorModelCommon)((IArmorModelGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ArmorModelCommon)((IArmorModelGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Icons = new MaskItem<TItem, Icons.Mask<TItem>?>(initialValue, new Icons.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Model,
                TItem Icons)
            {
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Icons = new MaskItem<TItem, Icons.Mask<TItem>?>(Icons, new Icons.Mask<TItem>(Icons));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, Icons.Mask<TItem>?>? Icons { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Icons, rhs.Icons)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Model);
                hash.Add(this.Icons);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (Icons != null)
                {
                    if (!eval(this.Icons.Overall)) return false;
                    if (this.Icons.Specific != null && !this.Icons.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (Icons != null)
                {
                    if (eval(this.Icons.Overall)) return true;
                    if (this.Icons.Specific != null && this.Icons.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ArmorModel.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Icons = this.Icons == null ? null : new MaskItem<R, Icons.Mask<R>?>(eval(this.Icons.Overall), this.Icons.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ArmorModel.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ArmorModel.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ArmorModel.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Icons?.Overall ?? true)
                    {
                        Icons?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, Icons.ErrorMask?>? Icons;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ArmorModel_FieldIndex enu = (ArmorModel_FieldIndex)index;
                switch (enu)
                {
                    case ArmorModel_FieldIndex.Model:
                        return Model;
                    case ArmorModel_FieldIndex.Icons:
                        return Icons;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                ArmorModel_FieldIndex enu = (ArmorModel_FieldIndex)index;
                switch (enu)
                {
                    case ArmorModel_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case ArmorModel_FieldIndex.Icons:
                        this.Icons = new MaskItem<Exception?, Icons.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                ArmorModel_FieldIndex enu = (ArmorModel_FieldIndex)index;
                switch (enu)
                {
                    case ArmorModel_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case ArmorModel_FieldIndex.Icons:
                        this.Icons = (MaskItem<Exception?, Icons.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Model != null) return true;
                if (Icons != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                Model?.ToString(fg);
                Icons?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Icons = this.Icons.Combine(rhs.Icons, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public Model.TranslationMask? Model;
            public Icons.TranslationMask? Icons;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((Icons != null ? Icons.OnOverall : DefaultOn, Icons?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> ContainedFormLinks => ArmorModelCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ArmorModelSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ArmorModelBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ArmorModelBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static ArmorModel CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new ArmorModel();
            ((ArmorModelSetterCommon)((IArmorModelGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ArmorModel item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ArmorModelSetterCommon)((IArmorModelGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ArmorModel GetNew()
        {
            return new ArmorModel();
        }

    }
    #endregion

    #region Interface
    public partial interface IArmorModel :
        IArmorModelGetter,
        IFormLinkContainer,
        IHasIcons,
        ILoquiObjectSetter<IArmorModel>,
        IModeled
    {
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        /// <summary>
        /// Aspects: IHasIcons
        /// </summary>
        new Icons? Icons { get; set; }
    }

    public partial interface IArmorModelGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        IHasIconsGetter,
        ILoquiObject<IArmorModelGetter>,
        IModeledGetter
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => ArmorModel_Registration.Instance;
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        #region Icons
        /// <summary>
        /// Aspects: IHasIconsGetter
        /// </summary>
        IIconsGetter? Icons { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class ArmorModelMixIn
    {
        public static void Clear(this IArmorModel item)
        {
            ((ArmorModelSetterCommon)((IArmorModelGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ArmorModel.Mask<bool> GetEqualsMask(
            this IArmorModelGetter item,
            IArmorModelGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ArmorModelCommon)((IArmorModelGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IArmorModelGetter item,
            string? name = null,
            ArmorModel.Mask<bool>? printMask = null)
        {
            return ((ArmorModelCommon)((IArmorModelGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IArmorModelGetter item,
            FileGeneration fg,
            string? name = null,
            ArmorModel.Mask<bool>? printMask = null)
        {
            ((ArmorModelCommon)((IArmorModelGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IArmorModelGetter item,
            IArmorModelGetter rhs,
            ArmorModel.TranslationMask? equalsMask = null)
        {
            return ((ArmorModelCommon)((IArmorModelGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IArmorModel lhs,
            IArmorModelGetter rhs)
        {
            ((ArmorModelSetterTranslationCommon)((IArmorModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IArmorModel lhs,
            IArmorModelGetter rhs,
            ArmorModel.TranslationMask? copyMask = null)
        {
            ((ArmorModelSetterTranslationCommon)((IArmorModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IArmorModel lhs,
            IArmorModelGetter rhs,
            out ArmorModel.ErrorMask errorMask,
            ArmorModel.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ArmorModelSetterTranslationCommon)((IArmorModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ArmorModel.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IArmorModel lhs,
            IArmorModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ArmorModelSetterTranslationCommon)((IArmorModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ArmorModel DeepCopy(
            this IArmorModelGetter item,
            ArmorModel.TranslationMask? copyMask = null)
        {
            return ((ArmorModelSetterTranslationCommon)((IArmorModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ArmorModel DeepCopy(
            this IArmorModelGetter item,
            out ArmorModel.ErrorMask errorMask,
            ArmorModel.TranslationMask? copyMask = null)
        {
            return ((ArmorModelSetterTranslationCommon)((IArmorModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ArmorModel DeepCopy(
            this IArmorModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ArmorModelSetterTranslationCommon)((IArmorModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IArmorModel item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((ArmorModelSetterCommon)((IArmorModelGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum ArmorModel_FieldIndex
    {
        Model = 0,
        Icons = 1,
    }
    #endregion

    #region Registration
    public partial class ArmorModel_Registration : ILoquiRegistration
    {
        public static readonly ArmorModel_Registration Instance = new ArmorModel_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 151,
            version: 0);

        public const string GUID = "39a3a83f-68bd-473a-aa14-10efdb07031b";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(ArmorModel.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ArmorModel.ErrorMask);

        public static readonly Type ClassType = typeof(ArmorModel);

        public static readonly Type GetterType = typeof(IArmorModelGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IArmorModel);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.ArmorModel";

        public const string Name = "ArmorModel";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RecordTypes.MODL,
                        RecordTypes.ICON
                    })
            );
        });
        public static readonly Type BinaryWriteTranslation = typeof(ArmorModelBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ArmorModelSetterCommon
    {
        public static readonly ArmorModelSetterCommon Instance = new ArmorModelSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IArmorModel item)
        {
            ClearPartial();
            item.Model = null;
            item.Icons = null;
        }
        
        #region Mutagen
        public void RemapLinks(IArmorModel obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Model?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IArmorModel item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ArmorModelBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ArmorModelBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class ArmorModelCommon
    {
        public static readonly ArmorModelCommon Instance = new ArmorModelCommon();

        public ArmorModel.Mask<bool> GetEqualsMask(
            IArmorModelGetter item,
            IArmorModelGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ArmorModel.Mask<bool>(false);
            ((ArmorModelCommon)((IArmorModelGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IArmorModelGetter item,
            IArmorModelGetter rhs,
            ArmorModel.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Icons = EqualsMaskHelper.EqualsHelper(
                item.Icons,
                rhs.Icons,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string ToString(
            IArmorModelGetter item,
            string? name = null,
            ArmorModel.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IArmorModelGetter item,
            FileGeneration fg,
            string? name = null,
            ArmorModel.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ArmorModel =>");
            }
            else
            {
                fg.AppendLine($"{name} (ArmorModel) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IArmorModelGetter item,
            FileGeneration fg,
            ArmorModel.Mask<bool>? printMask = null)
        {
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.ToString(fg, "Model");
            }
            if ((printMask?.Icons?.Overall ?? true)
                && item.Icons is {} IconsItem)
            {
                IconsItem?.ToString(fg, "Icons");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IArmorModelGetter? lhs,
            IArmorModelGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)ArmorModel_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, crystal?.GetSubCrystal((int)ArmorModel_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)ArmorModel_FieldIndex.Icons) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Icons, rhs.Icons, out var lhsIcons, out var rhsIcons, out var isIconsEqual))
                {
                    if (!((IconsCommon)((IIconsGetter)lhsIcons).CommonInstance()!).Equals(lhsIcons, rhsIcons, crystal?.GetSubCrystal((int)ArmorModel_FieldIndex.Icons))) return false;
                }
                else if (!isIconsEqual) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IArmorModelGetter item)
        {
            var hash = new HashCode();
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            if (item.Icons is {} Iconsitem)
            {
                hash.Add(Iconsitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ArmorModel.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IArmorModelGetter obj)
        {
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class ArmorModelSetterTranslationCommon
    {
        public static readonly ArmorModelSetterTranslationCommon Instance = new ArmorModelSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IArmorModel item,
            IArmorModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)ArmorModel_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)ArmorModel_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)ArmorModel_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ArmorModel_FieldIndex.Icons) ?? true))
            {
                errorMask?.PushIndex((int)ArmorModel_FieldIndex.Icons);
                try
                {
                    if(rhs.Icons is {} rhsIcons)
                    {
                        item.Icons = rhsIcons.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)ArmorModel_FieldIndex.Icons));
                    }
                    else
                    {
                        item.Icons = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public ArmorModel DeepCopy(
            IArmorModelGetter item,
            ArmorModel.TranslationMask? copyMask = null)
        {
            ArmorModel ret = (ArmorModel)((ArmorModelCommon)((IArmorModelGetter)item).CommonInstance()!).GetNew();
            ((ArmorModelSetterTranslationCommon)((IArmorModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ArmorModel DeepCopy(
            IArmorModelGetter item,
            out ArmorModel.ErrorMask errorMask,
            ArmorModel.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ArmorModel ret = (ArmorModel)((ArmorModelCommon)((IArmorModelGetter)item).CommonInstance()!).GetNew();
            ((ArmorModelSetterTranslationCommon)((IArmorModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ArmorModel.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ArmorModel DeepCopy(
            IArmorModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ArmorModel ret = (ArmorModel)((ArmorModelCommon)((IArmorModelGetter)item).CommonInstance()!).GetNew();
            ((ArmorModelSetterTranslationCommon)((IArmorModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class ArmorModel
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ArmorModel_Registration.Instance;
        public static ArmorModel_Registration StaticRegistration => ArmorModel_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ArmorModelCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ArmorModelSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ArmorModelSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IArmorModelGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IArmorModelGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IArmorModelGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ArmorModelBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ArmorModelBinaryWriteTranslation Instance = new ArmorModelBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IArmorModelGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.Icons is {} IconsItem)
            {
                ((IconsBinaryWriteTranslation)((IBinaryItem)IconsItem).BinaryWriteTranslator).Write(
                    item: IconsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
        }

        public void Write(
            MutagenWriter writer,
            IArmorModelGetter item,
            TypedWriteParams? translationParams = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IArmorModelGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class ArmorModelBinaryCreateTranslation
    {
        public readonly static ArmorModelBinaryCreateTranslation Instance = new ArmorModelBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IArmorModel item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IArmorModel item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.MODL:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)ArmorModel_FieldIndex.Model) return ParseResult.Stop;
                    item.Model = Mutagen.Bethesda.Skyrim.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams);
                    return (int)ArmorModel_FieldIndex.Model;
                }
                case RecordTypeInts.ICON:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)ArmorModel_FieldIndex.Icons) return ParseResult.Stop;
                    item.Icons = Mutagen.Bethesda.Skyrim.Icons.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams);
                    return (int)ArmorModel_FieldIndex.Icons;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class ArmorModelBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IArmorModelGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ArmorModelBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ArmorModelBinaryOverlay :
        PluginBinaryOverlay,
        IArmorModelGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ArmorModel_Registration.Instance;
        public static ArmorModel_Registration StaticRegistration => ArmorModel_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ArmorModelCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ArmorModelSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IArmorModelGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IArmorModelGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IArmorModelGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public IEnumerable<IFormLinkGetter> ContainedFormLinks => ArmorModelCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ArmorModelBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ArmorModelBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public IModelGetter? Model { get; private set; }
        public IIconsGetter? Icons { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ArmorModelBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ArmorModelBinaryOverlay ArmorModelFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new ArmorModelBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ArmorModelBinaryOverlay ArmorModelFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return ArmorModelFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.MODL:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)ArmorModel_FieldIndex.Model) return ParseResult.Stop;
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        parseParams: parseParams);
                    return (int)ArmorModel_FieldIndex.Model;
                }
                case RecordTypeInts.ICON:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)ArmorModel_FieldIndex.Icons) return ParseResult.Stop;
                    this.Icons = IconsBinaryOverlay.IconsFactory(
                        stream: stream,
                        package: _package,
                        parseParams: parseParams);
                    return (int)ArmorModel_FieldIndex.Icons;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ArmorModelMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IArmorModelGetter rhs) return false;
            return ((ArmorModelCommon)((IArmorModelGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IArmorModelGetter? obj)
        {
            return ((ArmorModelCommon)((IArmorModelGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ArmorModelCommon)((IArmorModelGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

