/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Pex;
using Mutagen.Bethesda.Pex.Internals;
using Noggog;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Pex
{
    #region Class
    public partial class DebugInfo :
        IDebugInfo,
        IEquatable<IDebugInfoGetter>,
        ILoquiObjectSetter<DebugInfo>
    {
        #region Ctor
        public DebugInfo()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ModificationTime
        public DateTime ModificationTime { get; set; } = default;
        #endregion
        #region Functions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<DebugFunction> _Functions = new ExtendedList<DebugFunction>();
        public ExtendedList<DebugFunction> Functions
        {
            get => this._Functions;
            init => this._Functions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IDebugFunctionGetter> IDebugInfoGetter.Functions => _Functions;
        #endregion

        #endregion
        #region PropertyGroups
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<DebugPropertyGroup> _PropertyGroups = new ExtendedList<DebugPropertyGroup>();
        public ExtendedList<DebugPropertyGroup> PropertyGroups
        {
            get => this._PropertyGroups;
            init => this._PropertyGroups = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IDebugPropertyGroupGetter> IDebugInfoGetter.PropertyGroups => _PropertyGroups;
        #endregion

        #endregion
        #region StructOrders
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<DebugStructOrder> _StructOrders = new ExtendedList<DebugStructOrder>();
        public ExtendedList<DebugStructOrder> StructOrders
        {
            get => this._StructOrders;
            init => this._StructOrders = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IDebugStructOrderGetter> IDebugInfoGetter.StructOrders => _StructOrders;
        #endregion

        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DebugInfoMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IDebugInfoGetter rhs) return false;
            return ((DebugInfoCommon)((IDebugInfoGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IDebugInfoGetter? obj)
        {
            return ((DebugInfoCommon)((IDebugInfoGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((DebugInfoCommon)((IDebugInfoGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.ModificationTime = initialValue;
                this.Functions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DebugFunction.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, DebugFunction.Mask<TItem>?>>());
                this.PropertyGroups = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DebugPropertyGroup.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, DebugPropertyGroup.Mask<TItem>?>>());
                this.StructOrders = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DebugStructOrder.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, DebugStructOrder.Mask<TItem>?>>());
            }

            public Mask(
                TItem ModificationTime,
                TItem Functions,
                TItem PropertyGroups,
                TItem StructOrders)
            {
                this.ModificationTime = ModificationTime;
                this.Functions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DebugFunction.Mask<TItem>?>>?>(Functions, Enumerable.Empty<MaskItemIndexed<TItem, DebugFunction.Mask<TItem>?>>());
                this.PropertyGroups = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DebugPropertyGroup.Mask<TItem>?>>?>(PropertyGroups, Enumerable.Empty<MaskItemIndexed<TItem, DebugPropertyGroup.Mask<TItem>?>>());
                this.StructOrders = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DebugStructOrder.Mask<TItem>?>>?>(StructOrders, Enumerable.Empty<MaskItemIndexed<TItem, DebugStructOrder.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem ModificationTime;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DebugFunction.Mask<TItem>?>>?>? Functions;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DebugPropertyGroup.Mask<TItem>?>>?>? PropertyGroups;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DebugStructOrder.Mask<TItem>?>>?>? StructOrders;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.ModificationTime, rhs.ModificationTime)) return false;
                if (!object.Equals(this.Functions, rhs.Functions)) return false;
                if (!object.Equals(this.PropertyGroups, rhs.PropertyGroups)) return false;
                if (!object.Equals(this.StructOrders, rhs.StructOrders)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ModificationTime);
                hash.Add(this.Functions);
                hash.Add(this.PropertyGroups);
                hash.Add(this.StructOrders);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.ModificationTime)) return false;
                if (this.Functions != null)
                {
                    if (!eval(this.Functions.Overall)) return false;
                    if (this.Functions.Specific != null)
                    {
                        foreach (var item in this.Functions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.PropertyGroups != null)
                {
                    if (!eval(this.PropertyGroups.Overall)) return false;
                    if (this.PropertyGroups.Specific != null)
                    {
                        foreach (var item in this.PropertyGroups.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.StructOrders != null)
                {
                    if (!eval(this.StructOrders.Overall)) return false;
                    if (this.StructOrders.Specific != null)
                    {
                        foreach (var item in this.StructOrders.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.ModificationTime)) return true;
                if (this.Functions != null)
                {
                    if (eval(this.Functions.Overall)) return true;
                    if (this.Functions.Specific != null)
                    {
                        foreach (var item in this.Functions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.PropertyGroups != null)
                {
                    if (eval(this.PropertyGroups.Overall)) return true;
                    if (this.PropertyGroups.Specific != null)
                    {
                        foreach (var item in this.PropertyGroups.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.StructOrders != null)
                {
                    if (eval(this.StructOrders.Overall)) return true;
                    if (this.StructOrders.Specific != null)
                    {
                        foreach (var item in this.StructOrders.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DebugInfo.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.ModificationTime = eval(this.ModificationTime);
                if (Functions != null)
                {
                    obj.Functions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, DebugFunction.Mask<R>?>>?>(eval(this.Functions.Overall), Enumerable.Empty<MaskItemIndexed<R, DebugFunction.Mask<R>?>>());
                    if (Functions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, DebugFunction.Mask<R>?>>();
                        obj.Functions.Specific = l;
                        foreach (var item in Functions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, DebugFunction.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, DebugFunction.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (PropertyGroups != null)
                {
                    obj.PropertyGroups = new MaskItem<R, IEnumerable<MaskItemIndexed<R, DebugPropertyGroup.Mask<R>?>>?>(eval(this.PropertyGroups.Overall), Enumerable.Empty<MaskItemIndexed<R, DebugPropertyGroup.Mask<R>?>>());
                    if (PropertyGroups.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, DebugPropertyGroup.Mask<R>?>>();
                        obj.PropertyGroups.Specific = l;
                        foreach (var item in PropertyGroups.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, DebugPropertyGroup.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, DebugPropertyGroup.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (StructOrders != null)
                {
                    obj.StructOrders = new MaskItem<R, IEnumerable<MaskItemIndexed<R, DebugStructOrder.Mask<R>?>>?>(eval(this.StructOrders.Overall), Enumerable.Empty<MaskItemIndexed<R, DebugStructOrder.Mask<R>?>>());
                    if (StructOrders.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, DebugStructOrder.Mask<R>?>>();
                        obj.StructOrders.Specific = l;
                        foreach (var item in StructOrders.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, DebugStructOrder.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, DebugStructOrder.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(DebugInfo.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, DebugInfo.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(DebugInfo.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ModificationTime ?? true)
                    {
                        fg.AppendItem(ModificationTime, "ModificationTime");
                    }
                    if ((printMask?.Functions?.Overall ?? true)
                        && Functions is {} FunctionsItem)
                    {
                        fg.AppendLine("Functions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(FunctionsItem.Overall);
                            if (FunctionsItem.Specific != null)
                            {
                                foreach (var subItem in FunctionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.PropertyGroups?.Overall ?? true)
                        && PropertyGroups is {} PropertyGroupsItem)
                    {
                        fg.AppendLine("PropertyGroups =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(PropertyGroupsItem.Overall);
                            if (PropertyGroupsItem.Specific != null)
                            {
                                foreach (var subItem in PropertyGroupsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.StructOrders?.Overall ?? true)
                        && StructOrders is {} StructOrdersItem)
                    {
                        fg.AppendLine("StructOrders =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(StructOrdersItem.Overall);
                            if (StructOrdersItem.Specific != null)
                            {
                                foreach (var subItem in StructOrdersItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? ModificationTime;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DebugFunction.ErrorMask?>>?>? Functions;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DebugPropertyGroup.ErrorMask?>>?>? PropertyGroups;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DebugStructOrder.ErrorMask?>>?>? StructOrders;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                DebugInfo_FieldIndex enu = (DebugInfo_FieldIndex)index;
                switch (enu)
                {
                    case DebugInfo_FieldIndex.ModificationTime:
                        return ModificationTime;
                    case DebugInfo_FieldIndex.Functions:
                        return Functions;
                    case DebugInfo_FieldIndex.PropertyGroups:
                        return PropertyGroups;
                    case DebugInfo_FieldIndex.StructOrders:
                        return StructOrders;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                DebugInfo_FieldIndex enu = (DebugInfo_FieldIndex)index;
                switch (enu)
                {
                    case DebugInfo_FieldIndex.ModificationTime:
                        this.ModificationTime = ex;
                        break;
                    case DebugInfo_FieldIndex.Functions:
                        this.Functions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DebugFunction.ErrorMask?>>?>(ex, null);
                        break;
                    case DebugInfo_FieldIndex.PropertyGroups:
                        this.PropertyGroups = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DebugPropertyGroup.ErrorMask?>>?>(ex, null);
                        break;
                    case DebugInfo_FieldIndex.StructOrders:
                        this.StructOrders = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DebugStructOrder.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                DebugInfo_FieldIndex enu = (DebugInfo_FieldIndex)index;
                switch (enu)
                {
                    case DebugInfo_FieldIndex.ModificationTime:
                        this.ModificationTime = (Exception?)obj;
                        break;
                    case DebugInfo_FieldIndex.Functions:
                        this.Functions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DebugFunction.ErrorMask?>>?>)obj;
                        break;
                    case DebugInfo_FieldIndex.PropertyGroups:
                        this.PropertyGroups = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DebugPropertyGroup.ErrorMask?>>?>)obj;
                        break;
                    case DebugInfo_FieldIndex.StructOrders:
                        this.StructOrders = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DebugStructOrder.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (ModificationTime != null) return true;
                if (Functions != null) return true;
                if (PropertyGroups != null) return true;
                if (StructOrders != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(ModificationTime, "ModificationTime");
                if (Functions is {} FunctionsItem)
                {
                    fg.AppendLine("Functions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(FunctionsItem.Overall);
                        if (FunctionsItem.Specific != null)
                        {
                            foreach (var subItem in FunctionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (PropertyGroups is {} PropertyGroupsItem)
                {
                    fg.AppendLine("PropertyGroups =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(PropertyGroupsItem.Overall);
                        if (PropertyGroupsItem.Specific != null)
                        {
                            foreach (var subItem in PropertyGroupsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (StructOrders is {} StructOrdersItem)
                {
                    fg.AppendLine("StructOrders =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(StructOrdersItem.Overall);
                        if (StructOrdersItem.Specific != null)
                        {
                            foreach (var subItem in StructOrdersItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ModificationTime = this.ModificationTime.Combine(rhs.ModificationTime);
                ret.Functions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DebugFunction.ErrorMask?>>?>(ExceptionExt.Combine(this.Functions?.Overall, rhs.Functions?.Overall), ExceptionExt.Combine(this.Functions?.Specific, rhs.Functions?.Specific));
                ret.PropertyGroups = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DebugPropertyGroup.ErrorMask?>>?>(ExceptionExt.Combine(this.PropertyGroups?.Overall, rhs.PropertyGroups?.Overall), ExceptionExt.Combine(this.PropertyGroups?.Specific, rhs.PropertyGroups?.Specific));
                ret.StructOrders = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DebugStructOrder.ErrorMask?>>?>(ExceptionExt.Combine(this.StructOrders?.Overall, rhs.StructOrders?.Overall), ExceptionExt.Combine(this.StructOrders?.Specific, rhs.StructOrders?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool ModificationTime;
            public DebugFunction.TranslationMask? Functions;
            public DebugPropertyGroup.TranslationMask? PropertyGroups;
            public DebugStructOrder.TranslationMask? StructOrders;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.ModificationTime = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((ModificationTime, null));
                ret.Add((Functions == null ? DefaultOn : !Functions.GetCrystal().CopyNothing, Functions?.GetCrystal()));
                ret.Add((PropertyGroups == null ? DefaultOn : !PropertyGroups.GetCrystal().CopyNothing, PropertyGroups?.GetCrystal()));
                ret.Add((StructOrders == null ? DefaultOn : !StructOrders.GetCrystal().CopyNothing, StructOrders?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((DebugInfoSetterCommon)((IDebugInfoGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static DebugInfo GetNew()
        {
            return new DebugInfo();
        }

    }
    #endregion

    #region Interface
    public partial interface IDebugInfo :
        IDebugInfoGetter,
        ILoquiObjectSetter<IDebugInfo>
    {
        new DateTime ModificationTime { get; set; }
        new ExtendedList<DebugFunction> Functions { get; }
        new ExtendedList<DebugPropertyGroup> PropertyGroups { get; }
        new ExtendedList<DebugStructOrder> StructOrders { get; }
    }

    public partial interface IDebugInfoGetter :
        ILoquiObject,
        ILoquiObject<IDebugInfoGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => DebugInfo_Registration.Instance;
        DateTime ModificationTime { get; }
        IReadOnlyList<IDebugFunctionGetter> Functions { get; }
        IReadOnlyList<IDebugPropertyGroupGetter> PropertyGroups { get; }
        IReadOnlyList<IDebugStructOrderGetter> StructOrders { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class DebugInfoMixIn
    {
        public static void Clear(this IDebugInfo item)
        {
            ((DebugInfoSetterCommon)((IDebugInfoGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DebugInfo.Mask<bool> GetEqualsMask(
            this IDebugInfoGetter item,
            IDebugInfoGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DebugInfoCommon)((IDebugInfoGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IDebugInfoGetter item,
            string? name = null,
            DebugInfo.Mask<bool>? printMask = null)
        {
            return ((DebugInfoCommon)((IDebugInfoGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IDebugInfoGetter item,
            FileGeneration fg,
            string? name = null,
            DebugInfo.Mask<bool>? printMask = null)
        {
            ((DebugInfoCommon)((IDebugInfoGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IDebugInfoGetter item,
            IDebugInfoGetter rhs,
            DebugInfo.TranslationMask? equalsMask = null)
        {
            return ((DebugInfoCommon)((IDebugInfoGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IDebugInfo lhs,
            IDebugInfoGetter rhs)
        {
            ((DebugInfoSetterTranslationCommon)((IDebugInfoGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IDebugInfo lhs,
            IDebugInfoGetter rhs,
            DebugInfo.TranslationMask? copyMask = null)
        {
            ((DebugInfoSetterTranslationCommon)((IDebugInfoGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IDebugInfo lhs,
            IDebugInfoGetter rhs,
            out DebugInfo.ErrorMask errorMask,
            DebugInfo.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DebugInfoSetterTranslationCommon)((IDebugInfoGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = DebugInfo.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDebugInfo lhs,
            IDebugInfoGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DebugInfoSetterTranslationCommon)((IDebugInfoGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static DebugInfo DeepCopy(
            this IDebugInfoGetter item,
            DebugInfo.TranslationMask? copyMask = null)
        {
            return ((DebugInfoSetterTranslationCommon)((IDebugInfoGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DebugInfo DeepCopy(
            this IDebugInfoGetter item,
            out DebugInfo.ErrorMask errorMask,
            DebugInfo.TranslationMask? copyMask = null)
        {
            return ((DebugInfoSetterTranslationCommon)((IDebugInfoGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DebugInfo DeepCopy(
            this IDebugInfoGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DebugInfoSetterTranslationCommon)((IDebugInfoGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Pex.Internals
{
    #region Field Index
    public enum DebugInfo_FieldIndex
    {
        ModificationTime = 0,
        Functions = 1,
        PropertyGroups = 2,
        StructOrders = 3,
    }
    #endregion

    #region Registration
    public partial class DebugInfo_Registration : ILoquiRegistration
    {
        public static readonly DebugInfo_Registration Instance = new DebugInfo_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Pex.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Pex.ProtocolKey,
            msgID: 1,
            version: 0);

        public const string GUID = "8adc2f6d-0800-4851-b0bf-f6d812a4d25b";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(DebugInfo.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DebugInfo.ErrorMask);

        public static readonly Type ClassType = typeof(DebugInfo);

        public static readonly Type GetterType = typeof(IDebugInfoGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDebugInfo);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Pex.DebugInfo";

        public const string Name = "DebugInfo";

        public const string Namespace = "Mutagen.Bethesda.Pex";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class DebugInfoSetterCommon
    {
        public static readonly DebugInfoSetterCommon Instance = new DebugInfoSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDebugInfo item)
        {
            ClearPartial();
            item.ModificationTime = default;
            item.Functions.Clear();
            item.PropertyGroups.Clear();
            item.StructOrders.Clear();
        }
        
    }
    public partial class DebugInfoCommon
    {
        public static readonly DebugInfoCommon Instance = new DebugInfoCommon();

        public DebugInfo.Mask<bool> GetEqualsMask(
            IDebugInfoGetter item,
            IDebugInfoGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DebugInfo.Mask<bool>(false);
            ((DebugInfoCommon)((IDebugInfoGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDebugInfoGetter item,
            IDebugInfoGetter rhs,
            DebugInfo.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ModificationTime = item.ModificationTime == rhs.ModificationTime;
            ret.Functions = item.Functions.CollectionEqualsHelper(
                rhs.Functions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.PropertyGroups = item.PropertyGroups.CollectionEqualsHelper(
                rhs.PropertyGroups,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.StructOrders = item.StructOrders.CollectionEqualsHelper(
                rhs.StructOrders,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string ToString(
            IDebugInfoGetter item,
            string? name = null,
            DebugInfo.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IDebugInfoGetter item,
            FileGeneration fg,
            string? name = null,
            DebugInfo.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"DebugInfo =>");
            }
            else
            {
                fg.AppendLine($"{name} (DebugInfo) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IDebugInfoGetter item,
            FileGeneration fg,
            DebugInfo.Mask<bool>? printMask = null)
        {
            if (printMask?.ModificationTime ?? true)
            {
                fg.AppendItem(item.ModificationTime, "ModificationTime");
            }
            if (printMask?.Functions?.Overall ?? true)
            {
                fg.AppendLine("Functions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Functions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.PropertyGroups?.Overall ?? true)
            {
                fg.AppendLine("PropertyGroups =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.PropertyGroups)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.StructOrders?.Overall ?? true)
            {
                fg.AppendLine("StructOrders =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.StructOrders)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDebugInfoGetter? lhs,
            IDebugInfoGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)DebugInfo_FieldIndex.ModificationTime) ?? true))
            {
                if (lhs.ModificationTime != rhs.ModificationTime) return false;
            }
            if ((crystal?.GetShouldTranslate((int)DebugInfo_FieldIndex.Functions) ?? true))
            {
                if (!lhs.Functions.SequenceEqualNullable(rhs.Functions)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)DebugInfo_FieldIndex.PropertyGroups) ?? true))
            {
                if (!lhs.PropertyGroups.SequenceEqualNullable(rhs.PropertyGroups)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)DebugInfo_FieldIndex.StructOrders) ?? true))
            {
                if (!lhs.StructOrders.SequenceEqualNullable(rhs.StructOrders)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IDebugInfoGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ModificationTime);
            hash.Add(item.Functions);
            hash.Add(item.PropertyGroups);
            hash.Add(item.StructOrders);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return DebugInfo.GetNew();
        }
        
    }
    public partial class DebugInfoSetterTranslationCommon
    {
        public static readonly DebugInfoSetterTranslationCommon Instance = new DebugInfoSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IDebugInfo item,
            IDebugInfoGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)DebugInfo_FieldIndex.ModificationTime) ?? true))
            {
                item.ModificationTime = rhs.ModificationTime;
            }
            if ((copyMask?.GetShouldTranslate((int)DebugInfo_FieldIndex.Functions) ?? true))
            {
                errorMask?.PushIndex((int)DebugInfo_FieldIndex.Functions);
                try
                {
                    item.Functions.SetTo(
                        rhs.Functions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DebugInfo_FieldIndex.PropertyGroups) ?? true))
            {
                errorMask?.PushIndex((int)DebugInfo_FieldIndex.PropertyGroups);
                try
                {
                    item.PropertyGroups.SetTo(
                        rhs.PropertyGroups
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DebugInfo_FieldIndex.StructOrders) ?? true))
            {
                errorMask?.PushIndex((int)DebugInfo_FieldIndex.StructOrders);
                try
                {
                    item.StructOrders.SetTo(
                        rhs.StructOrders
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public DebugInfo DeepCopy(
            IDebugInfoGetter item,
            DebugInfo.TranslationMask? copyMask = null)
        {
            DebugInfo ret = (DebugInfo)((DebugInfoCommon)((IDebugInfoGetter)item).CommonInstance()!).GetNew();
            ((DebugInfoSetterTranslationCommon)((IDebugInfoGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public DebugInfo DeepCopy(
            IDebugInfoGetter item,
            out DebugInfo.ErrorMask errorMask,
            DebugInfo.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DebugInfo ret = (DebugInfo)((DebugInfoCommon)((IDebugInfoGetter)item).CommonInstance()!).GetNew();
            ((DebugInfoSetterTranslationCommon)((IDebugInfoGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = DebugInfo.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public DebugInfo DeepCopy(
            IDebugInfoGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DebugInfo ret = (DebugInfo)((DebugInfoCommon)((IDebugInfoGetter)item).CommonInstance()!).GetNew();
            ((DebugInfoSetterTranslationCommon)((IDebugInfoGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Pex
{
    public partial class DebugInfo
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DebugInfo_Registration.Instance;
        public static DebugInfo_Registration StaticRegistration => DebugInfo_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => DebugInfoCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return DebugInfoSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => DebugInfoSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IDebugInfoGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IDebugInfoGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IDebugInfoGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

