/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Pex;
using Mutagen.Bethesda.Pex.Internals;
using Noggog;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Pex
{
    #region Class
    public partial class PexFile :
        IEquatable<IPexFileGetter>,
        ILoquiObjectSetter<PexFile>,
        IPexFile
    {
        #region Ctor
        public PexFile()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MajorVersion
        public Byte MajorVersion { get; set; } = default;
        #endregion
        #region MinorVersion
        public Byte MinorVersion { get; set; } = default;
        #endregion
        #region GameId
        public UInt16 GameId { get; set; } = default;
        #endregion
        #region CompilationTime
        public DateTime CompilationTime { get; set; } = default;
        #endregion
        #region SourceFileName
        public String SourceFileName { get; set; } = string.Empty;
        #endregion
        #region Username
        public String Username { get; set; } = string.Empty;
        #endregion
        #region MachineName
        public String MachineName { get; set; } = string.Empty;
        #endregion
        #region DebugInfo
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DebugInfo? _DebugInfo;
        public DebugInfo? DebugInfo
        {
            get => _DebugInfo;
            set => _DebugInfo = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDebugInfoGetter? IPexFileGetter.DebugInfo => this.DebugInfo;
        #endregion
        #region Objects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<PexObject> _Objects = new ExtendedList<PexObject>();
        public ExtendedList<PexObject> Objects
        {
            get => this._Objects;
            init => this._Objects = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPexObjectGetter> IPexFileGetter.Objects => _Objects;
        #endregion

        #endregion
        #region UserFlags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String[] _UserFlags = new String[32];
        public String[] UserFlags
        {
            get => this._UserFlags;
            init => this._UserFlags = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<String?> IPexFileGetter.UserFlags => _UserFlags;
        #endregion

        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PexFileMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPexFileGetter rhs) return false;
            return ((PexFileCommon)((IPexFileGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IPexFileGetter? obj)
        {
            return ((PexFileCommon)((IPexFileGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((PexFileCommon)((IPexFileGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.MajorVersion = initialValue;
                this.MinorVersion = initialValue;
                this.GameId = initialValue;
                this.CompilationTime = initialValue;
                this.SourceFileName = initialValue;
                this.Username = initialValue;
                this.MachineName = initialValue;
                this.DebugInfo = new MaskItem<TItem, DebugInfo.Mask<TItem>?>(initialValue, new DebugInfo.Mask<TItem>(initialValue));
                this.Objects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PexObject.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, PexObject.Mask<TItem>?>>());
                this.UserFlags = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
            }

            public Mask(
                TItem MajorVersion,
                TItem MinorVersion,
                TItem GameId,
                TItem CompilationTime,
                TItem SourceFileName,
                TItem Username,
                TItem MachineName,
                TItem DebugInfo,
                TItem Objects,
                TItem UserFlags)
            {
                this.MajorVersion = MajorVersion;
                this.MinorVersion = MinorVersion;
                this.GameId = GameId;
                this.CompilationTime = CompilationTime;
                this.SourceFileName = SourceFileName;
                this.Username = Username;
                this.MachineName = MachineName;
                this.DebugInfo = new MaskItem<TItem, DebugInfo.Mask<TItem>?>(DebugInfo, new DebugInfo.Mask<TItem>(DebugInfo));
                this.Objects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PexObject.Mask<TItem>?>>?>(Objects, Enumerable.Empty<MaskItemIndexed<TItem, PexObject.Mask<TItem>?>>());
                this.UserFlags = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(UserFlags, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem MajorVersion;
            public TItem MinorVersion;
            public TItem GameId;
            public TItem CompilationTime;
            public TItem SourceFileName;
            public TItem Username;
            public TItem MachineName;
            public MaskItem<TItem, DebugInfo.Mask<TItem>?>? DebugInfo { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PexObject.Mask<TItem>?>>?>? Objects;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? UserFlags;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.MajorVersion, rhs.MajorVersion)) return false;
                if (!object.Equals(this.MinorVersion, rhs.MinorVersion)) return false;
                if (!object.Equals(this.GameId, rhs.GameId)) return false;
                if (!object.Equals(this.CompilationTime, rhs.CompilationTime)) return false;
                if (!object.Equals(this.SourceFileName, rhs.SourceFileName)) return false;
                if (!object.Equals(this.Username, rhs.Username)) return false;
                if (!object.Equals(this.MachineName, rhs.MachineName)) return false;
                if (!object.Equals(this.DebugInfo, rhs.DebugInfo)) return false;
                if (!object.Equals(this.Objects, rhs.Objects)) return false;
                if (!object.Equals(this.UserFlags, rhs.UserFlags)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.MajorVersion);
                hash.Add(this.MinorVersion);
                hash.Add(this.GameId);
                hash.Add(this.CompilationTime);
                hash.Add(this.SourceFileName);
                hash.Add(this.Username);
                hash.Add(this.MachineName);
                hash.Add(this.DebugInfo);
                hash.Add(this.Objects);
                hash.Add(this.UserFlags);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.MajorVersion)) return false;
                if (!eval(this.MinorVersion)) return false;
                if (!eval(this.GameId)) return false;
                if (!eval(this.CompilationTime)) return false;
                if (!eval(this.SourceFileName)) return false;
                if (!eval(this.Username)) return false;
                if (!eval(this.MachineName)) return false;
                if (DebugInfo != null)
                {
                    if (!eval(this.DebugInfo.Overall)) return false;
                    if (this.DebugInfo.Specific != null && !this.DebugInfo.Specific.All(eval)) return false;
                }
                if (this.Objects != null)
                {
                    if (!eval(this.Objects.Overall)) return false;
                    if (this.Objects.Specific != null)
                    {
                        foreach (var item in this.Objects.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.UserFlags != null)
                {
                    if (!eval(this.UserFlags.Overall)) return false;
                    if (this.UserFlags.Specific != null)
                    {
                        foreach (var item in this.UserFlags.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.MajorVersion)) return true;
                if (eval(this.MinorVersion)) return true;
                if (eval(this.GameId)) return true;
                if (eval(this.CompilationTime)) return true;
                if (eval(this.SourceFileName)) return true;
                if (eval(this.Username)) return true;
                if (eval(this.MachineName)) return true;
                if (DebugInfo != null)
                {
                    if (eval(this.DebugInfo.Overall)) return true;
                    if (this.DebugInfo.Specific != null && this.DebugInfo.Specific.Any(eval)) return true;
                }
                if (this.Objects != null)
                {
                    if (eval(this.Objects.Overall)) return true;
                    if (this.Objects.Specific != null)
                    {
                        foreach (var item in this.Objects.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.UserFlags != null)
                {
                    if (eval(this.UserFlags.Overall)) return true;
                    if (this.UserFlags.Specific != null)
                    {
                        foreach (var item in this.UserFlags.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PexFile.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.MajorVersion = eval(this.MajorVersion);
                obj.MinorVersion = eval(this.MinorVersion);
                obj.GameId = eval(this.GameId);
                obj.CompilationTime = eval(this.CompilationTime);
                obj.SourceFileName = eval(this.SourceFileName);
                obj.Username = eval(this.Username);
                obj.MachineName = eval(this.MachineName);
                obj.DebugInfo = this.DebugInfo == null ? null : new MaskItem<R, DebugInfo.Mask<R>?>(eval(this.DebugInfo.Overall), this.DebugInfo.Specific?.Translate(eval));
                if (Objects != null)
                {
                    obj.Objects = new MaskItem<R, IEnumerable<MaskItemIndexed<R, PexObject.Mask<R>?>>?>(eval(this.Objects.Overall), Enumerable.Empty<MaskItemIndexed<R, PexObject.Mask<R>?>>());
                    if (Objects.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, PexObject.Mask<R>?>>();
                        obj.Objects.Specific = l;
                        foreach (var item in Objects.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, PexObject.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, PexObject.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (UserFlags != null)
                {
                    obj.UserFlags = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.UserFlags.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (UserFlags.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.UserFlags.Specific = l;
                        foreach (var item in UserFlags.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(PexFile.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, PexFile.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(PexFile.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.MajorVersion ?? true)
                    {
                        fg.AppendItem(MajorVersion, "MajorVersion");
                    }
                    if (printMask?.MinorVersion ?? true)
                    {
                        fg.AppendItem(MinorVersion, "MinorVersion");
                    }
                    if (printMask?.GameId ?? true)
                    {
                        fg.AppendItem(GameId, "GameId");
                    }
                    if (printMask?.CompilationTime ?? true)
                    {
                        fg.AppendItem(CompilationTime, "CompilationTime");
                    }
                    if (printMask?.SourceFileName ?? true)
                    {
                        fg.AppendItem(SourceFileName, "SourceFileName");
                    }
                    if (printMask?.Username ?? true)
                    {
                        fg.AppendItem(Username, "Username");
                    }
                    if (printMask?.MachineName ?? true)
                    {
                        fg.AppendItem(MachineName, "MachineName");
                    }
                    if (printMask?.DebugInfo?.Overall ?? true)
                    {
                        DebugInfo?.ToString(fg);
                    }
                    if ((printMask?.Objects?.Overall ?? true)
                        && Objects is {} ObjectsItem)
                    {
                        fg.AppendLine("Objects =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ObjectsItem.Overall);
                            if (ObjectsItem.Specific != null)
                            {
                                foreach (var subItem in ObjectsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.UserFlags?.Overall ?? true)
                        && UserFlags is {} UserFlagsItem)
                    {
                        fg.AppendLine("UserFlags =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(UserFlagsItem.Overall);
                            if (UserFlagsItem.Specific != null)
                            {
                                foreach (var subItem in UserFlagsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? MajorVersion;
            public Exception? MinorVersion;
            public Exception? GameId;
            public Exception? CompilationTime;
            public Exception? SourceFileName;
            public Exception? Username;
            public Exception? MachineName;
            public MaskItem<Exception?, DebugInfo.ErrorMask?>? DebugInfo;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PexObject.ErrorMask?>>?>? Objects;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? UserFlags;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                PexFile_FieldIndex enu = (PexFile_FieldIndex)index;
                switch (enu)
                {
                    case PexFile_FieldIndex.MajorVersion:
                        return MajorVersion;
                    case PexFile_FieldIndex.MinorVersion:
                        return MinorVersion;
                    case PexFile_FieldIndex.GameId:
                        return GameId;
                    case PexFile_FieldIndex.CompilationTime:
                        return CompilationTime;
                    case PexFile_FieldIndex.SourceFileName:
                        return SourceFileName;
                    case PexFile_FieldIndex.Username:
                        return Username;
                    case PexFile_FieldIndex.MachineName:
                        return MachineName;
                    case PexFile_FieldIndex.DebugInfo:
                        return DebugInfo;
                    case PexFile_FieldIndex.Objects:
                        return Objects;
                    case PexFile_FieldIndex.UserFlags:
                        return UserFlags;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                PexFile_FieldIndex enu = (PexFile_FieldIndex)index;
                switch (enu)
                {
                    case PexFile_FieldIndex.MajorVersion:
                        this.MajorVersion = ex;
                        break;
                    case PexFile_FieldIndex.MinorVersion:
                        this.MinorVersion = ex;
                        break;
                    case PexFile_FieldIndex.GameId:
                        this.GameId = ex;
                        break;
                    case PexFile_FieldIndex.CompilationTime:
                        this.CompilationTime = ex;
                        break;
                    case PexFile_FieldIndex.SourceFileName:
                        this.SourceFileName = ex;
                        break;
                    case PexFile_FieldIndex.Username:
                        this.Username = ex;
                        break;
                    case PexFile_FieldIndex.MachineName:
                        this.MachineName = ex;
                        break;
                    case PexFile_FieldIndex.DebugInfo:
                        this.DebugInfo = new MaskItem<Exception?, DebugInfo.ErrorMask?>(ex, null);
                        break;
                    case PexFile_FieldIndex.Objects:
                        this.Objects = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PexObject.ErrorMask?>>?>(ex, null);
                        break;
                    case PexFile_FieldIndex.UserFlags:
                        this.UserFlags = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                PexFile_FieldIndex enu = (PexFile_FieldIndex)index;
                switch (enu)
                {
                    case PexFile_FieldIndex.MajorVersion:
                        this.MajorVersion = (Exception?)obj;
                        break;
                    case PexFile_FieldIndex.MinorVersion:
                        this.MinorVersion = (Exception?)obj;
                        break;
                    case PexFile_FieldIndex.GameId:
                        this.GameId = (Exception?)obj;
                        break;
                    case PexFile_FieldIndex.CompilationTime:
                        this.CompilationTime = (Exception?)obj;
                        break;
                    case PexFile_FieldIndex.SourceFileName:
                        this.SourceFileName = (Exception?)obj;
                        break;
                    case PexFile_FieldIndex.Username:
                        this.Username = (Exception?)obj;
                        break;
                    case PexFile_FieldIndex.MachineName:
                        this.MachineName = (Exception?)obj;
                        break;
                    case PexFile_FieldIndex.DebugInfo:
                        this.DebugInfo = (MaskItem<Exception?, DebugInfo.ErrorMask?>?)obj;
                        break;
                    case PexFile_FieldIndex.Objects:
                        this.Objects = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PexObject.ErrorMask?>>?>)obj;
                        break;
                    case PexFile_FieldIndex.UserFlags:
                        this.UserFlags = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (MajorVersion != null) return true;
                if (MinorVersion != null) return true;
                if (GameId != null) return true;
                if (CompilationTime != null) return true;
                if (SourceFileName != null) return true;
                if (Username != null) return true;
                if (MachineName != null) return true;
                if (DebugInfo != null) return true;
                if (Objects != null) return true;
                if (UserFlags != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(MajorVersion, "MajorVersion");
                fg.AppendItem(MinorVersion, "MinorVersion");
                fg.AppendItem(GameId, "GameId");
                fg.AppendItem(CompilationTime, "CompilationTime");
                fg.AppendItem(SourceFileName, "SourceFileName");
                fg.AppendItem(Username, "Username");
                fg.AppendItem(MachineName, "MachineName");
                DebugInfo?.ToString(fg);
                if (Objects is {} ObjectsItem)
                {
                    fg.AppendLine("Objects =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ObjectsItem.Overall);
                        if (ObjectsItem.Specific != null)
                        {
                            foreach (var subItem in ObjectsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (UserFlags is {} UserFlagsItem)
                {
                    fg.AppendLine("UserFlags =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(UserFlagsItem.Overall);
                        if (UserFlagsItem.Specific != null)
                        {
                            foreach (var subItem in UserFlagsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.MajorVersion = this.MajorVersion.Combine(rhs.MajorVersion);
                ret.MinorVersion = this.MinorVersion.Combine(rhs.MinorVersion);
                ret.GameId = this.GameId.Combine(rhs.GameId);
                ret.CompilationTime = this.CompilationTime.Combine(rhs.CompilationTime);
                ret.SourceFileName = this.SourceFileName.Combine(rhs.SourceFileName);
                ret.Username = this.Username.Combine(rhs.Username);
                ret.MachineName = this.MachineName.Combine(rhs.MachineName);
                ret.DebugInfo = this.DebugInfo.Combine(rhs.DebugInfo, (l, r) => l.Combine(r));
                ret.Objects = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PexObject.ErrorMask?>>?>(ExceptionExt.Combine(this.Objects?.Overall, rhs.Objects?.Overall), ExceptionExt.Combine(this.Objects?.Specific, rhs.Objects?.Specific));
                ret.UserFlags = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.UserFlags?.Overall, rhs.UserFlags?.Overall), ExceptionExt.Combine(this.UserFlags?.Specific, rhs.UserFlags?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool MajorVersion;
            public bool MinorVersion;
            public bool GameId;
            public bool CompilationTime;
            public bool SourceFileName;
            public bool Username;
            public bool MachineName;
            public DebugInfo.TranslationMask? DebugInfo;
            public PexObject.TranslationMask? Objects;
            public bool UserFlags;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.MajorVersion = defaultOn;
                this.MinorVersion = defaultOn;
                this.GameId = defaultOn;
                this.CompilationTime = defaultOn;
                this.SourceFileName = defaultOn;
                this.Username = defaultOn;
                this.MachineName = defaultOn;
                this.UserFlags = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((MajorVersion, null));
                ret.Add((MinorVersion, null));
                ret.Add((GameId, null));
                ret.Add((CompilationTime, null));
                ret.Add((SourceFileName, null));
                ret.Add((Username, null));
                ret.Add((MachineName, null));
                ret.Add((DebugInfo != null ? DebugInfo.OnOverall : DefaultOn, DebugInfo?.GetCrystal()));
                ret.Add((Objects == null ? DefaultOn : !Objects.GetCrystal().CopyNothing, Objects?.GetCrystal()));
                ret.Add((UserFlags, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((PexFileSetterCommon)((IPexFileGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static PexFile GetNew()
        {
            return new PexFile();
        }

    }
    #endregion

    #region Interface
    public partial interface IPexFile :
        ILoquiObjectSetter<IPexFile>,
        IPexFileGetter
    {
        new Byte MajorVersion { get; set; }
        new Byte MinorVersion { get; set; }
        new UInt16 GameId { get; set; }
        new DateTime CompilationTime { get; set; }
        new String SourceFileName { get; set; }
        new String Username { get; set; }
        new String MachineName { get; set; }
        new DebugInfo? DebugInfo { get; set; }
        new ExtendedList<PexObject> Objects { get; }
        new String?[] UserFlags { get; }
    }

    public partial interface IPexFileGetter :
        ILoquiObject,
        ILoquiObject<IPexFileGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => PexFile_Registration.Instance;
        Byte MajorVersion { get; }
        Byte MinorVersion { get; }
        UInt16 GameId { get; }
        DateTime CompilationTime { get; }
        String SourceFileName { get; }
        String Username { get; }
        String MachineName { get; }
        IDebugInfoGetter? DebugInfo { get; }
        IReadOnlyList<IPexObjectGetter> Objects { get; }
        ReadOnlyMemorySlice<String?> UserFlags { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PexFileMixIn
    {
        public static void Clear(this IPexFile item)
        {
            ((PexFileSetterCommon)((IPexFileGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PexFile.Mask<bool> GetEqualsMask(
            this IPexFileGetter item,
            IPexFileGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PexFileCommon)((IPexFileGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPexFileGetter item,
            string? name = null,
            PexFile.Mask<bool>? printMask = null)
        {
            return ((PexFileCommon)((IPexFileGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPexFileGetter item,
            FileGeneration fg,
            string? name = null,
            PexFile.Mask<bool>? printMask = null)
        {
            ((PexFileCommon)((IPexFileGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPexFileGetter item,
            IPexFileGetter rhs,
            PexFile.TranslationMask? equalsMask = null)
        {
            return ((PexFileCommon)((IPexFileGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPexFile lhs,
            IPexFileGetter rhs)
        {
            ((PexFileSetterTranslationCommon)((IPexFileGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPexFile lhs,
            IPexFileGetter rhs,
            PexFile.TranslationMask? copyMask = null)
        {
            ((PexFileSetterTranslationCommon)((IPexFileGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPexFile lhs,
            IPexFileGetter rhs,
            out PexFile.ErrorMask errorMask,
            PexFile.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PexFileSetterTranslationCommon)((IPexFileGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PexFile.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPexFile lhs,
            IPexFileGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PexFileSetterTranslationCommon)((IPexFileGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PexFile DeepCopy(
            this IPexFileGetter item,
            PexFile.TranslationMask? copyMask = null)
        {
            return ((PexFileSetterTranslationCommon)((IPexFileGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PexFile DeepCopy(
            this IPexFileGetter item,
            out PexFile.ErrorMask errorMask,
            PexFile.TranslationMask? copyMask = null)
        {
            return ((PexFileSetterTranslationCommon)((IPexFileGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PexFile DeepCopy(
            this IPexFileGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PexFileSetterTranslationCommon)((IPexFileGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Pex.Internals
{
    #region Field Index
    public enum PexFile_FieldIndex
    {
        MajorVersion = 0,
        MinorVersion = 1,
        GameId = 2,
        CompilationTime = 3,
        SourceFileName = 4,
        Username = 5,
        MachineName = 6,
        DebugInfo = 7,
        Objects = 8,
        UserFlags = 9,
    }
    #endregion

    #region Registration
    public partial class PexFile_Registration : ILoquiRegistration
    {
        public static readonly PexFile_Registration Instance = new PexFile_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Pex.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Pex.ProtocolKey,
            msgID: 5,
            version: 0);

        public const string GUID = "6cbf970c-2533-422d-b90a-6b7b74817e63";

        public const ushort AdditionalFieldCount = 10;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(PexFile.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PexFile.ErrorMask);

        public static readonly Type ClassType = typeof(PexFile);

        public static readonly Type GetterType = typeof(IPexFileGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPexFile);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Pex.PexFile";

        public const string Name = "PexFile";

        public const string Namespace = "Mutagen.Bethesda.Pex";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class PexFileSetterCommon
    {
        public static readonly PexFileSetterCommon Instance = new PexFileSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPexFile item)
        {
            ClearPartial();
            item.MajorVersion = default;
            item.MinorVersion = default;
            item.GameId = default;
            item.CompilationTime = default;
            item.SourceFileName = string.Empty;
            item.Username = string.Empty;
            item.MachineName = string.Empty;
            item.DebugInfo = null;
            item.Objects.Clear();
            item.UserFlags.ResetToNull();
        }
        
    }
    public partial class PexFileCommon
    {
        public static readonly PexFileCommon Instance = new PexFileCommon();

        public PexFile.Mask<bool> GetEqualsMask(
            IPexFileGetter item,
            IPexFileGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PexFile.Mask<bool>(false);
            ((PexFileCommon)((IPexFileGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPexFileGetter item,
            IPexFileGetter rhs,
            PexFile.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.MajorVersion = item.MajorVersion == rhs.MajorVersion;
            ret.MinorVersion = item.MinorVersion == rhs.MinorVersion;
            ret.GameId = item.GameId == rhs.GameId;
            ret.CompilationTime = item.CompilationTime == rhs.CompilationTime;
            ret.SourceFileName = string.Equals(item.SourceFileName, rhs.SourceFileName);
            ret.Username = string.Equals(item.Username, rhs.Username);
            ret.MachineName = string.Equals(item.MachineName, rhs.MachineName);
            ret.DebugInfo = EqualsMaskHelper.EqualsHelper(
                item.DebugInfo,
                rhs.DebugInfo,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Objects = item.Objects.CollectionEqualsHelper(
                rhs.Objects,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.UserFlags = item.UserFlags.SpanEqualsHelper(
                rhs.UserFlags,
                (l, r) => string.Equals(l, r),
                include);
        }
        
        public string ToString(
            IPexFileGetter item,
            string? name = null,
            PexFile.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPexFileGetter item,
            FileGeneration fg,
            string? name = null,
            PexFile.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PexFile =>");
            }
            else
            {
                fg.AppendLine($"{name} (PexFile) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPexFileGetter item,
            FileGeneration fg,
            PexFile.Mask<bool>? printMask = null)
        {
            if (printMask?.MajorVersion ?? true)
            {
                fg.AppendItem(item.MajorVersion, "MajorVersion");
            }
            if (printMask?.MinorVersion ?? true)
            {
                fg.AppendItem(item.MinorVersion, "MinorVersion");
            }
            if (printMask?.GameId ?? true)
            {
                fg.AppendItem(item.GameId, "GameId");
            }
            if (printMask?.CompilationTime ?? true)
            {
                fg.AppendItem(item.CompilationTime, "CompilationTime");
            }
            if (printMask?.SourceFileName ?? true)
            {
                fg.AppendItem(item.SourceFileName, "SourceFileName");
            }
            if (printMask?.Username ?? true)
            {
                fg.AppendItem(item.Username, "Username");
            }
            if (printMask?.MachineName ?? true)
            {
                fg.AppendItem(item.MachineName, "MachineName");
            }
            if ((printMask?.DebugInfo?.Overall ?? true)
                && item.DebugInfo is {} DebugInfoItem)
            {
                DebugInfoItem?.ToString(fg, "DebugInfo");
            }
            if (printMask?.Objects?.Overall ?? true)
            {
                fg.AppendLine("Objects =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Objects)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.UserFlags?.Overall ?? true)
            {
                fg.AppendLine("UserFlags =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.UserFlags)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPexFileGetter? lhs,
            IPexFileGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)PexFile_FieldIndex.MajorVersion) ?? true))
            {
                if (lhs.MajorVersion != rhs.MajorVersion) return false;
            }
            if ((crystal?.GetShouldTranslate((int)PexFile_FieldIndex.MinorVersion) ?? true))
            {
                if (lhs.MinorVersion != rhs.MinorVersion) return false;
            }
            if ((crystal?.GetShouldTranslate((int)PexFile_FieldIndex.GameId) ?? true))
            {
                if (lhs.GameId != rhs.GameId) return false;
            }
            if ((crystal?.GetShouldTranslate((int)PexFile_FieldIndex.CompilationTime) ?? true))
            {
                if (lhs.CompilationTime != rhs.CompilationTime) return false;
            }
            if ((crystal?.GetShouldTranslate((int)PexFile_FieldIndex.SourceFileName) ?? true))
            {
                if (!string.Equals(lhs.SourceFileName, rhs.SourceFileName)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)PexFile_FieldIndex.Username) ?? true))
            {
                if (!string.Equals(lhs.Username, rhs.Username)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)PexFile_FieldIndex.MachineName) ?? true))
            {
                if (!string.Equals(lhs.MachineName, rhs.MachineName)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)PexFile_FieldIndex.DebugInfo) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DebugInfo, rhs.DebugInfo, out var lhsDebugInfo, out var rhsDebugInfo, out var isDebugInfoEqual))
                {
                    if (!((DebugInfoCommon)((IDebugInfoGetter)lhsDebugInfo).CommonInstance()!).Equals(lhsDebugInfo, rhsDebugInfo, crystal?.GetSubCrystal((int)PexFile_FieldIndex.DebugInfo))) return false;
                }
                else if (!isDebugInfoEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)PexFile_FieldIndex.Objects) ?? true))
            {
                if (!lhs.Objects.SequenceEqualNullable(rhs.Objects)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)PexFile_FieldIndex.UserFlags) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual<string>(lhs.UserFlags.Span!, rhs.UserFlags.Span!)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IPexFileGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.MajorVersion);
            hash.Add(item.MinorVersion);
            hash.Add(item.GameId);
            hash.Add(item.CompilationTime);
            hash.Add(item.SourceFileName);
            hash.Add(item.Username);
            hash.Add(item.MachineName);
            if (item.DebugInfo is {} DebugInfoitem)
            {
                hash.Add(DebugInfoitem);
            }
            hash.Add(item.Objects);
            hash.Add(item.UserFlags);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return PexFile.GetNew();
        }
        
    }
    public partial class PexFileSetterTranslationCommon
    {
        public static readonly PexFileSetterTranslationCommon Instance = new PexFileSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPexFile item,
            IPexFileGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)PexFile_FieldIndex.MajorVersion) ?? true))
            {
                item.MajorVersion = rhs.MajorVersion;
            }
            if ((copyMask?.GetShouldTranslate((int)PexFile_FieldIndex.MinorVersion) ?? true))
            {
                item.MinorVersion = rhs.MinorVersion;
            }
            if ((copyMask?.GetShouldTranslate((int)PexFile_FieldIndex.GameId) ?? true))
            {
                item.GameId = rhs.GameId;
            }
            if ((copyMask?.GetShouldTranslate((int)PexFile_FieldIndex.CompilationTime) ?? true))
            {
                item.CompilationTime = rhs.CompilationTime;
            }
            if ((copyMask?.GetShouldTranslate((int)PexFile_FieldIndex.SourceFileName) ?? true))
            {
                item.SourceFileName = rhs.SourceFileName;
            }
            if ((copyMask?.GetShouldTranslate((int)PexFile_FieldIndex.Username) ?? true))
            {
                item.Username = rhs.Username;
            }
            if ((copyMask?.GetShouldTranslate((int)PexFile_FieldIndex.MachineName) ?? true))
            {
                item.MachineName = rhs.MachineName;
            }
            if ((copyMask?.GetShouldTranslate((int)PexFile_FieldIndex.DebugInfo) ?? true))
            {
                errorMask?.PushIndex((int)PexFile_FieldIndex.DebugInfo);
                try
                {
                    if(rhs.DebugInfo is {} rhsDebugInfo)
                    {
                        item.DebugInfo = rhsDebugInfo.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PexFile_FieldIndex.DebugInfo));
                    }
                    else
                    {
                        item.DebugInfo = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PexFile_FieldIndex.Objects) ?? true))
            {
                errorMask?.PushIndex((int)PexFile_FieldIndex.Objects);
                try
                {
                    item.Objects.SetTo(
                        rhs.Objects
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PexFile_FieldIndex.UserFlags) ?? true))
            {
                item.UserFlags.SetTo(rhs.UserFlags);
            }
        }
        
        #endregion
        
        public PexFile DeepCopy(
            IPexFileGetter item,
            PexFile.TranslationMask? copyMask = null)
        {
            PexFile ret = (PexFile)((PexFileCommon)((IPexFileGetter)item).CommonInstance()!).GetNew();
            ((PexFileSetterTranslationCommon)((IPexFileGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PexFile DeepCopy(
            IPexFileGetter item,
            out PexFile.ErrorMask errorMask,
            PexFile.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PexFile ret = (PexFile)((PexFileCommon)((IPexFileGetter)item).CommonInstance()!).GetNew();
            ((PexFileSetterTranslationCommon)((IPexFileGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PexFile.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PexFile DeepCopy(
            IPexFileGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PexFile ret = (PexFile)((PexFileCommon)((IPexFileGetter)item).CommonInstance()!).GetNew();
            ((PexFileSetterTranslationCommon)((IPexFileGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Pex
{
    public partial class PexFile
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PexFile_Registration.Instance;
        public static PexFile_Registration StaticRegistration => PexFile_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PexFileCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return PexFileSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PexFileSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPexFileGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IPexFileGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IPexFileGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

