/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Pex;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using System.Diagnostics;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Pex
{
    #region Class
    public partial class PexObjectStructInfoMember :
        IEquatable<IPexObjectStructInfoMemberGetter>,
        ILoquiObjectSetter<PexObjectStructInfoMember>,
        IPexObjectStructInfoMember
    {
        #region Ctor
        public PexObjectStructInfoMember()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IPexObjectStructInfoMemberGetter.Name => this.Name;
        #endregion
        #region TypeName
        public String? TypeName { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IPexObjectStructInfoMemberGetter.TypeName => this.TypeName;
        #endregion
        #region Value
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PexObjectVariableData? _Value;
        public PexObjectVariableData? Value
        {
            get => _Value;
            set => _Value = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPexObjectVariableDataGetter? IPexObjectStructInfoMemberGetter.Value => this.Value;
        #endregion
        #region IsConst
        public Boolean IsConst { get; set; } = default(Boolean);
        #endregion
        #region DocString
        public String? DocString { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IPexObjectStructInfoMemberGetter.DocString => this.DocString;
        #endregion
        #region RawUserFlags
        public UInt32 RawUserFlags { get; set; } = default(UInt32);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PexObjectStructInfoMemberMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPexObjectStructInfoMemberGetter rhs) return false;
            return ((PexObjectStructInfoMemberCommon)((IPexObjectStructInfoMemberGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPexObjectStructInfoMemberGetter? obj)
        {
            return ((PexObjectStructInfoMemberCommon)((IPexObjectStructInfoMemberGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PexObjectStructInfoMemberCommon)((IPexObjectStructInfoMemberGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Name = initialValue;
                this.TypeName = initialValue;
                this.Value = new MaskItem<TItem, PexObjectVariableData.Mask<TItem>?>(initialValue, new PexObjectVariableData.Mask<TItem>(initialValue));
                this.IsConst = initialValue;
                this.DocString = initialValue;
                this.RawUserFlags = initialValue;
            }

            public Mask(
                TItem Name,
                TItem TypeName,
                TItem Value,
                TItem IsConst,
                TItem DocString,
                TItem RawUserFlags)
            {
                this.Name = Name;
                this.TypeName = TypeName;
                this.Value = new MaskItem<TItem, PexObjectVariableData.Mask<TItem>?>(Value, new PexObjectVariableData.Mask<TItem>(Value));
                this.IsConst = IsConst;
                this.DocString = DocString;
                this.RawUserFlags = RawUserFlags;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem TypeName;
            public MaskItem<TItem, PexObjectVariableData.Mask<TItem>?>? Value { get; set; }
            public TItem IsConst;
            public TItem DocString;
            public TItem RawUserFlags;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.TypeName, rhs.TypeName)) return false;
                if (!object.Equals(this.Value, rhs.Value)) return false;
                if (!object.Equals(this.IsConst, rhs.IsConst)) return false;
                if (!object.Equals(this.DocString, rhs.DocString)) return false;
                if (!object.Equals(this.RawUserFlags, rhs.RawUserFlags)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.TypeName);
                hash.Add(this.Value);
                hash.Add(this.IsConst);
                hash.Add(this.DocString);
                hash.Add(this.RawUserFlags);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Name)) return false;
                if (!eval(this.TypeName)) return false;
                if (Value != null)
                {
                    if (!eval(this.Value.Overall)) return false;
                    if (this.Value.Specific != null && !this.Value.Specific.All(eval)) return false;
                }
                if (!eval(this.IsConst)) return false;
                if (!eval(this.DocString)) return false;
                if (!eval(this.RawUserFlags)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Name)) return true;
                if (eval(this.TypeName)) return true;
                if (Value != null)
                {
                    if (eval(this.Value.Overall)) return true;
                    if (this.Value.Specific != null && this.Value.Specific.Any(eval)) return true;
                }
                if (eval(this.IsConst)) return true;
                if (eval(this.DocString)) return true;
                if (eval(this.RawUserFlags)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PexObjectStructInfoMember.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Name = eval(this.Name);
                obj.TypeName = eval(this.TypeName);
                obj.Value = this.Value == null ? null : new MaskItem<R, PexObjectVariableData.Mask<R>?>(eval(this.Value.Overall), this.Value.Specific?.Translate(eval));
                obj.IsConst = eval(this.IsConst);
                obj.DocString = eval(this.DocString);
                obj.RawUserFlags = eval(this.RawUserFlags);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(PexObjectStructInfoMember.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, PexObjectStructInfoMember.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(PexObjectStructInfoMember.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.TypeName ?? true)
                    {
                        sb.AppendItem(TypeName, "TypeName");
                    }
                    if (printMask?.Value?.Overall ?? true)
                    {
                        Value?.Print(sb);
                    }
                    if (printMask?.IsConst ?? true)
                    {
                        sb.AppendItem(IsConst, "IsConst");
                    }
                    if (printMask?.DocString ?? true)
                    {
                        sb.AppendItem(DocString, "DocString");
                    }
                    if (printMask?.RawUserFlags ?? true)
                    {
                        sb.AppendItem(RawUserFlags, "RawUserFlags");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Name;
            public Exception? TypeName;
            public MaskItem<Exception?, PexObjectVariableData.ErrorMask?>? Value;
            public Exception? IsConst;
            public Exception? DocString;
            public Exception? RawUserFlags;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                PexObjectStructInfoMember_FieldIndex enu = (PexObjectStructInfoMember_FieldIndex)index;
                switch (enu)
                {
                    case PexObjectStructInfoMember_FieldIndex.Name:
                        return Name;
                    case PexObjectStructInfoMember_FieldIndex.TypeName:
                        return TypeName;
                    case PexObjectStructInfoMember_FieldIndex.Value:
                        return Value;
                    case PexObjectStructInfoMember_FieldIndex.IsConst:
                        return IsConst;
                    case PexObjectStructInfoMember_FieldIndex.DocString:
                        return DocString;
                    case PexObjectStructInfoMember_FieldIndex.RawUserFlags:
                        return RawUserFlags;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                PexObjectStructInfoMember_FieldIndex enu = (PexObjectStructInfoMember_FieldIndex)index;
                switch (enu)
                {
                    case PexObjectStructInfoMember_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case PexObjectStructInfoMember_FieldIndex.TypeName:
                        this.TypeName = ex;
                        break;
                    case PexObjectStructInfoMember_FieldIndex.Value:
                        this.Value = new MaskItem<Exception?, PexObjectVariableData.ErrorMask?>(ex, null);
                        break;
                    case PexObjectStructInfoMember_FieldIndex.IsConst:
                        this.IsConst = ex;
                        break;
                    case PexObjectStructInfoMember_FieldIndex.DocString:
                        this.DocString = ex;
                        break;
                    case PexObjectStructInfoMember_FieldIndex.RawUserFlags:
                        this.RawUserFlags = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                PexObjectStructInfoMember_FieldIndex enu = (PexObjectStructInfoMember_FieldIndex)index;
                switch (enu)
                {
                    case PexObjectStructInfoMember_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case PexObjectStructInfoMember_FieldIndex.TypeName:
                        this.TypeName = (Exception?)obj;
                        break;
                    case PexObjectStructInfoMember_FieldIndex.Value:
                        this.Value = (MaskItem<Exception?, PexObjectVariableData.ErrorMask?>?)obj;
                        break;
                    case PexObjectStructInfoMember_FieldIndex.IsConst:
                        this.IsConst = (Exception?)obj;
                        break;
                    case PexObjectStructInfoMember_FieldIndex.DocString:
                        this.DocString = (Exception?)obj;
                        break;
                    case PexObjectStructInfoMember_FieldIndex.RawUserFlags:
                        this.RawUserFlags = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (TypeName != null) return true;
                if (Value != null) return true;
                if (IsConst != null) return true;
                if (DocString != null) return true;
                if (RawUserFlags != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(TypeName, "TypeName");
                }
                Value?.Print(sb);
                {
                    sb.AppendItem(IsConst, "IsConst");
                }
                {
                    sb.AppendItem(DocString, "DocString");
                }
                {
                    sb.AppendItem(RawUserFlags, "RawUserFlags");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.TypeName = this.TypeName.Combine(rhs.TypeName);
                ret.Value = this.Value.Combine(rhs.Value, (l, r) => l.Combine(r));
                ret.IsConst = this.IsConst.Combine(rhs.IsConst);
                ret.DocString = this.DocString.Combine(rhs.DocString);
                ret.RawUserFlags = this.RawUserFlags.Combine(rhs.RawUserFlags);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Name;
            public bool TypeName;
            public PexObjectVariableData.TranslationMask? Value;
            public bool IsConst;
            public bool DocString;
            public bool RawUserFlags;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Name = defaultOn;
                this.TypeName = defaultOn;
                this.IsConst = defaultOn;
                this.DocString = defaultOn;
                this.RawUserFlags = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Name, null));
                ret.Add((TypeName, null));
                ret.Add((Value != null ? Value.OnOverall : DefaultOn, Value?.GetCrystal()));
                ret.Add((IsConst, null));
                ret.Add((DocString, null));
                ret.Add((RawUserFlags, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((PexObjectStructInfoMemberSetterCommon)((IPexObjectStructInfoMemberGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static PexObjectStructInfoMember GetNew()
        {
            return new PexObjectStructInfoMember();
        }

    }
    #endregion

    #region Interface
    public partial interface IPexObjectStructInfoMember :
        IHasUserFlags,
        ILoquiObjectSetter<IPexObjectStructInfoMember>,
        IPexObjectStructInfoMemberGetter
    {
        new String? Name { get; set; }
        new String? TypeName { get; set; }
        new PexObjectVariableData? Value { get; set; }
        new Boolean IsConst { get; set; }
        new String? DocString { get; set; }
        new UInt32 RawUserFlags { get; set; }
    }

    public partial interface IPexObjectStructInfoMemberGetter :
        ILoquiObject,
        IHasUserFlagsGetter,
        ILoquiObject<IPexObjectStructInfoMemberGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => PexObjectStructInfoMember_Registration.Instance;
        String? Name { get; }
        String? TypeName { get; }
        IPexObjectVariableDataGetter? Value { get; }
        Boolean IsConst { get; }
        String? DocString { get; }
        UInt32 RawUserFlags { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PexObjectStructInfoMemberMixIn
    {
        public static void Clear(this IPexObjectStructInfoMember item)
        {
            ((PexObjectStructInfoMemberSetterCommon)((IPexObjectStructInfoMemberGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PexObjectStructInfoMember.Mask<bool> GetEqualsMask(
            this IPexObjectStructInfoMemberGetter item,
            IPexObjectStructInfoMemberGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PexObjectStructInfoMemberCommon)((IPexObjectStructInfoMemberGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IPexObjectStructInfoMemberGetter item,
            string? name = null,
            PexObjectStructInfoMember.Mask<bool>? printMask = null)
        {
            return ((PexObjectStructInfoMemberCommon)((IPexObjectStructInfoMemberGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IPexObjectStructInfoMemberGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PexObjectStructInfoMember.Mask<bool>? printMask = null)
        {
            ((PexObjectStructInfoMemberCommon)((IPexObjectStructInfoMemberGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPexObjectStructInfoMemberGetter item,
            IPexObjectStructInfoMemberGetter rhs,
            PexObjectStructInfoMember.TranslationMask? equalsMask = null)
        {
            return ((PexObjectStructInfoMemberCommon)((IPexObjectStructInfoMemberGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPexObjectStructInfoMember lhs,
            IPexObjectStructInfoMemberGetter rhs)
        {
            ((PexObjectStructInfoMemberSetterTranslationCommon)((IPexObjectStructInfoMemberGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPexObjectStructInfoMember lhs,
            IPexObjectStructInfoMemberGetter rhs,
            PexObjectStructInfoMember.TranslationMask? copyMask = null)
        {
            ((PexObjectStructInfoMemberSetterTranslationCommon)((IPexObjectStructInfoMemberGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPexObjectStructInfoMember lhs,
            IPexObjectStructInfoMemberGetter rhs,
            out PexObjectStructInfoMember.ErrorMask errorMask,
            PexObjectStructInfoMember.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PexObjectStructInfoMemberSetterTranslationCommon)((IPexObjectStructInfoMemberGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PexObjectStructInfoMember.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPexObjectStructInfoMember lhs,
            IPexObjectStructInfoMemberGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PexObjectStructInfoMemberSetterTranslationCommon)((IPexObjectStructInfoMemberGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PexObjectStructInfoMember DeepCopy(
            this IPexObjectStructInfoMemberGetter item,
            PexObjectStructInfoMember.TranslationMask? copyMask = null)
        {
            return ((PexObjectStructInfoMemberSetterTranslationCommon)((IPexObjectStructInfoMemberGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PexObjectStructInfoMember DeepCopy(
            this IPexObjectStructInfoMemberGetter item,
            out PexObjectStructInfoMember.ErrorMask errorMask,
            PexObjectStructInfoMember.TranslationMask? copyMask = null)
        {
            return ((PexObjectStructInfoMemberSetterTranslationCommon)((IPexObjectStructInfoMemberGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PexObjectStructInfoMember DeepCopy(
            this IPexObjectStructInfoMemberGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PexObjectStructInfoMemberSetterTranslationCommon)((IPexObjectStructInfoMemberGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Pex
{
    #region Field Index
    internal enum PexObjectStructInfoMember_FieldIndex
    {
        Name = 0,
        TypeName = 1,
        Value = 2,
        IsConst = 3,
        DocString = 4,
        RawUserFlags = 5,
    }
    #endregion

    #region Registration
    internal partial class PexObjectStructInfoMember_Registration : ILoquiRegistration
    {
        public static readonly PexObjectStructInfoMember_Registration Instance = new PexObjectStructInfoMember_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Pex.ProtocolKey;

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(PexObjectStructInfoMember.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PexObjectStructInfoMember.ErrorMask);

        public static readonly Type ClassType = typeof(PexObjectStructInfoMember);

        public static readonly Type GetterType = typeof(IPexObjectStructInfoMemberGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPexObjectStructInfoMember);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Pex.PexObjectStructInfoMember";

        public const string Name = "PexObjectStructInfoMember";

        public const string Namespace = "Mutagen.Bethesda.Pex";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class PexObjectStructInfoMemberSetterCommon
    {
        public static readonly PexObjectStructInfoMemberSetterCommon Instance = new PexObjectStructInfoMemberSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPexObjectStructInfoMember item)
        {
            ClearPartial();
            item.Name = default;
            item.TypeName = default;
            item.Value = null;
            item.IsConst = default(Boolean);
            item.DocString = default;
            item.RawUserFlags = default(UInt32);
        }
        
    }
    internal partial class PexObjectStructInfoMemberCommon
    {
        public static readonly PexObjectStructInfoMemberCommon Instance = new PexObjectStructInfoMemberCommon();

        public PexObjectStructInfoMember.Mask<bool> GetEqualsMask(
            IPexObjectStructInfoMemberGetter item,
            IPexObjectStructInfoMemberGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PexObjectStructInfoMember.Mask<bool>(false);
            ((PexObjectStructInfoMemberCommon)((IPexObjectStructInfoMemberGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPexObjectStructInfoMemberGetter item,
            IPexObjectStructInfoMemberGetter rhs,
            PexObjectStructInfoMember.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.TypeName = string.Equals(item.TypeName, rhs.TypeName);
            ret.Value = EqualsMaskHelper.EqualsHelper(
                item.Value,
                rhs.Value,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.IsConst = item.IsConst == rhs.IsConst;
            ret.DocString = string.Equals(item.DocString, rhs.DocString);
            ret.RawUserFlags = item.RawUserFlags == rhs.RawUserFlags;
        }
        
        public string Print(
            IPexObjectStructInfoMemberGetter item,
            string? name = null,
            PexObjectStructInfoMember.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IPexObjectStructInfoMemberGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PexObjectStructInfoMember.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"PexObjectStructInfoMember =>");
            }
            else
            {
                sb.AppendLine($"{name} (PexObjectStructInfoMember) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IPexObjectStructInfoMemberGetter item,
            StructuredStringBuilder sb,
            PexObjectStructInfoMember.Mask<bool>? printMask = null)
        {
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.TypeName ?? true)
                && item.TypeName is {} TypeNameItem)
            {
                sb.AppendItem(TypeNameItem, "TypeName");
            }
            if ((printMask?.Value?.Overall ?? true)
                && item.Value is {} ValueItem)
            {
                ValueItem?.Print(sb, "Value");
            }
            if (printMask?.IsConst ?? true)
            {
                sb.AppendItem(item.IsConst, "IsConst");
            }
            if ((printMask?.DocString ?? true)
                && item.DocString is {} DocStringItem)
            {
                sb.AppendItem(DocStringItem, "DocString");
            }
            if (printMask?.RawUserFlags ?? true)
            {
                sb.AppendItem(item.RawUserFlags, "RawUserFlags");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPexObjectStructInfoMemberGetter? lhs,
            IPexObjectStructInfoMemberGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)PexObjectStructInfoMember_FieldIndex.Name) ?? true))
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PexObjectStructInfoMember_FieldIndex.TypeName) ?? true))
            {
                if (!string.Equals(lhs.TypeName, rhs.TypeName)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PexObjectStructInfoMember_FieldIndex.Value) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Value, rhs.Value, out var lhsValue, out var rhsValue, out var isValueEqual))
                {
                    if (!((PexObjectVariableDataCommon)((IPexObjectVariableDataGetter)lhsValue).CommonInstance()!).Equals(lhsValue, rhsValue, equalsMask?.GetSubCrystal((int)PexObjectStructInfoMember_FieldIndex.Value))) return false;
                }
                else if (!isValueEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PexObjectStructInfoMember_FieldIndex.IsConst) ?? true))
            {
                if (lhs.IsConst != rhs.IsConst) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PexObjectStructInfoMember_FieldIndex.DocString) ?? true))
            {
                if (!string.Equals(lhs.DocString, rhs.DocString)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PexObjectStructInfoMember_FieldIndex.RawUserFlags) ?? true))
            {
                if (lhs.RawUserFlags != rhs.RawUserFlags) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IPexObjectStructInfoMemberGetter item)
        {
            var hash = new HashCode();
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.TypeName is {} TypeNameitem)
            {
                hash.Add(TypeNameitem);
            }
            if (item.Value is {} Valueitem)
            {
                hash.Add(Valueitem);
            }
            hash.Add(item.IsConst);
            if (item.DocString is {} DocStringitem)
            {
                hash.Add(DocStringitem);
            }
            hash.Add(item.RawUserFlags);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return PexObjectStructInfoMember.GetNew();
        }
        
    }
    internal partial class PexObjectStructInfoMemberSetterTranslationCommon
    {
        public static readonly PexObjectStructInfoMemberSetterTranslationCommon Instance = new PexObjectStructInfoMemberSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPexObjectStructInfoMember item,
            IPexObjectStructInfoMemberGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)PexObjectStructInfoMember_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)PexObjectStructInfoMember_FieldIndex.TypeName) ?? true))
            {
                item.TypeName = rhs.TypeName;
            }
            if ((copyMask?.GetShouldTranslate((int)PexObjectStructInfoMember_FieldIndex.Value) ?? true))
            {
                errorMask?.PushIndex((int)PexObjectStructInfoMember_FieldIndex.Value);
                try
                {
                    if(rhs.Value is {} rhsValue)
                    {
                        item.Value = rhsValue.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PexObjectStructInfoMember_FieldIndex.Value));
                    }
                    else
                    {
                        item.Value = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PexObjectStructInfoMember_FieldIndex.IsConst) ?? true))
            {
                item.IsConst = rhs.IsConst;
            }
            if ((copyMask?.GetShouldTranslate((int)PexObjectStructInfoMember_FieldIndex.DocString) ?? true))
            {
                item.DocString = rhs.DocString;
            }
            if ((copyMask?.GetShouldTranslate((int)PexObjectStructInfoMember_FieldIndex.RawUserFlags) ?? true))
            {
                item.RawUserFlags = rhs.RawUserFlags;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IPexObjectStructInfoMember item,
            IPexObjectStructInfoMemberGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public PexObjectStructInfoMember DeepCopy(
            IPexObjectStructInfoMemberGetter item,
            PexObjectStructInfoMember.TranslationMask? copyMask = null)
        {
            PexObjectStructInfoMember ret = (PexObjectStructInfoMember)((PexObjectStructInfoMemberCommon)((IPexObjectStructInfoMemberGetter)item).CommonInstance()!).GetNew();
            ((PexObjectStructInfoMemberSetterTranslationCommon)((IPexObjectStructInfoMemberGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PexObjectStructInfoMember DeepCopy(
            IPexObjectStructInfoMemberGetter item,
            out PexObjectStructInfoMember.ErrorMask errorMask,
            PexObjectStructInfoMember.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PexObjectStructInfoMember ret = (PexObjectStructInfoMember)((PexObjectStructInfoMemberCommon)((IPexObjectStructInfoMemberGetter)item).CommonInstance()!).GetNew();
            ((PexObjectStructInfoMemberSetterTranslationCommon)((IPexObjectStructInfoMemberGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PexObjectStructInfoMember.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PexObjectStructInfoMember DeepCopy(
            IPexObjectStructInfoMemberGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PexObjectStructInfoMember ret = (PexObjectStructInfoMember)((PexObjectStructInfoMemberCommon)((IPexObjectStructInfoMemberGetter)item).CommonInstance()!).GetNew();
            ((PexObjectStructInfoMemberSetterTranslationCommon)((IPexObjectStructInfoMemberGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Pex
{
    public partial class PexObjectStructInfoMember
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PexObjectStructInfoMember_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => PexObjectStructInfoMember_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PexObjectStructInfoMemberCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return PexObjectStructInfoMemberSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PexObjectStructInfoMemberSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPexObjectStructInfoMemberGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IPexObjectStructInfoMemberGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IPexObjectStructInfoMemberGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

