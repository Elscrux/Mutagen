/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class TransientType :
        IEquatable<ITransientTypeGetter>,
        ILoquiObjectSetter<TransientType>,
        ITransientType
    {
        #region Ctor
        public TransientType()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region FormType
        public UInt32 FormType { get; set; } = default(UInt32);
        #endregion
        #region Links
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IFallout4MajorRecordGetter>> _Links = new ExtendedList<IFormLinkGetter<IFallout4MajorRecordGetter>>();
        public ExtendedList<IFormLinkGetter<IFallout4MajorRecordGetter>> Links
        {
            get => this._Links;
            init => this._Links = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IFallout4MajorRecordGetter>> ITransientTypeGetter.Links => _Links;
        #endregion

        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TransientTypeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ITransientTypeGetter rhs) return false;
            return ((TransientTypeCommon)((ITransientTypeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITransientTypeGetter? obj)
        {
            return ((TransientTypeCommon)((ITransientTypeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TransientTypeCommon)((ITransientTypeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.FormType = initialValue;
                this.Links = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
            }

            public Mask(
                TItem FormType,
                TItem Links)
            {
                this.FormType = FormType;
                this.Links = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Links, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem FormType;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Links;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.FormType, rhs.FormType)) return false;
                if (!object.Equals(this.Links, rhs.Links)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.FormType);
                hash.Add(this.Links);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.FormType)) return false;
                if (this.Links != null)
                {
                    if (!eval(this.Links.Overall)) return false;
                    if (this.Links.Specific != null)
                    {
                        foreach (var item in this.Links.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.FormType)) return true;
                if (this.Links != null)
                {
                    if (eval(this.Links.Overall)) return true;
                    if (this.Links.Specific != null)
                    {
                        foreach (var item in this.Links.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new TransientType.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.FormType = eval(this.FormType);
                if (Links != null)
                {
                    obj.Links = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Links.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Links.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Links.Specific = l;
                        foreach (var item in Links.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(TransientType.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, TransientType.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(TransientType.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.FormType ?? true)
                    {
                        sb.AppendItem(FormType, "FormType");
                    }
                    if ((printMask?.Links?.Overall ?? true)
                        && Links is {} LinksItem)
                    {
                        sb.AppendLine("Links =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(LinksItem.Overall);
                            if (LinksItem.Specific != null)
                            {
                                foreach (var subItem in LinksItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? FormType;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Links;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                TransientType_FieldIndex enu = (TransientType_FieldIndex)index;
                switch (enu)
                {
                    case TransientType_FieldIndex.FormType:
                        return FormType;
                    case TransientType_FieldIndex.Links:
                        return Links;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                TransientType_FieldIndex enu = (TransientType_FieldIndex)index;
                switch (enu)
                {
                    case TransientType_FieldIndex.FormType:
                        this.FormType = ex;
                        break;
                    case TransientType_FieldIndex.Links:
                        this.Links = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                TransientType_FieldIndex enu = (TransientType_FieldIndex)index;
                switch (enu)
                {
                    case TransientType_FieldIndex.FormType:
                        this.FormType = (Exception?)obj;
                        break;
                    case TransientType_FieldIndex.Links:
                        this.Links = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (FormType != null) return true;
                if (Links != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(FormType, "FormType");
                }
                if (Links is {} LinksItem)
                {
                    sb.AppendLine("Links =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(LinksItem.Overall);
                        if (LinksItem.Specific != null)
                        {
                            foreach (var subItem in LinksItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.FormType = this.FormType.Combine(rhs.FormType);
                ret.Links = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Links?.Overall, rhs.Links?.Overall), Noggog.ExceptionExt.Combine(this.Links?.Specific, rhs.Links?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool FormType;
            public bool Links;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.FormType = defaultOn;
                this.Links = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((FormType, null));
                ret.Add((Links, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => TransientTypeCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => TransientTypeSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TransientTypeBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TransientTypeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static TransientType CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new TransientType();
            ((TransientTypeSetterCommon)((ITransientTypeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out TransientType item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((TransientTypeSetterCommon)((ITransientTypeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static TransientType GetNew()
        {
            return new TransientType();
        }

    }
    #endregion

    #region Interface
    public partial interface ITransientType :
        IFormLinkContainer,
        ILoquiObjectSetter<ITransientType>,
        ITransientTypeGetter
    {
        new UInt32 FormType { get; set; }
        new ExtendedList<IFormLinkGetter<IFallout4MajorRecordGetter>> Links { get; }
    }

    public partial interface ITransientTypeGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ITransientTypeGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => TransientType_Registration.Instance;
        UInt32 FormType { get; }
        IReadOnlyList<IFormLinkGetter<IFallout4MajorRecordGetter>> Links { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class TransientTypeMixIn
    {
        public static void Clear(this ITransientType item)
        {
            ((TransientTypeSetterCommon)((ITransientTypeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static TransientType.Mask<bool> GetEqualsMask(
            this ITransientTypeGetter item,
            ITransientTypeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TransientTypeCommon)((ITransientTypeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ITransientTypeGetter item,
            string? name = null,
            TransientType.Mask<bool>? printMask = null)
        {
            return ((TransientTypeCommon)((ITransientTypeGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ITransientTypeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            TransientType.Mask<bool>? printMask = null)
        {
            ((TransientTypeCommon)((ITransientTypeGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ITransientTypeGetter item,
            ITransientTypeGetter rhs,
            TransientType.TranslationMask? equalsMask = null)
        {
            return ((TransientTypeCommon)((ITransientTypeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ITransientType lhs,
            ITransientTypeGetter rhs)
        {
            ((TransientTypeSetterTranslationCommon)((ITransientTypeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ITransientType lhs,
            ITransientTypeGetter rhs,
            TransientType.TranslationMask? copyMask = null)
        {
            ((TransientTypeSetterTranslationCommon)((ITransientTypeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ITransientType lhs,
            ITransientTypeGetter rhs,
            out TransientType.ErrorMask errorMask,
            TransientType.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TransientTypeSetterTranslationCommon)((ITransientTypeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = TransientType.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITransientType lhs,
            ITransientTypeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TransientTypeSetterTranslationCommon)((ITransientTypeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static TransientType DeepCopy(
            this ITransientTypeGetter item,
            TransientType.TranslationMask? copyMask = null)
        {
            return ((TransientTypeSetterTranslationCommon)((ITransientTypeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static TransientType DeepCopy(
            this ITransientTypeGetter item,
            out TransientType.ErrorMask errorMask,
            TransientType.TranslationMask? copyMask = null)
        {
            return ((TransientTypeSetterTranslationCommon)((ITransientTypeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static TransientType DeepCopy(
            this ITransientTypeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TransientTypeSetterTranslationCommon)((ITransientTypeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ITransientType item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((TransientTypeSetterCommon)((ITransientTypeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum TransientType_FieldIndex
    {
        FormType = 0,
        Links = 1,
    }
    #endregion

    #region Registration
    internal partial class TransientType_Registration : ILoquiRegistration
    {
        public static readonly TransientType_Registration Instance = new TransientType_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(TransientType.Mask<>);

        public static readonly Type ErrorMaskType = typeof(TransientType.ErrorMask);

        public static readonly Type ClassType = typeof(TransientType);

        public static readonly Type GetterType = typeof(ITransientTypeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITransientType);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.TransientType";

        public const string Name = "TransientType";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TNAM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.TNAM);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(TransientTypeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class TransientTypeSetterCommon
    {
        public static readonly TransientTypeSetterCommon Instance = new TransientTypeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITransientType item)
        {
            ClearPartial();
            item.FormType = default(UInt32);
            item.Links.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(ITransientType obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Links.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ITransientType item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.TNAM),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: TransientTypeBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class TransientTypeCommon
    {
        public static readonly TransientTypeCommon Instance = new TransientTypeCommon();

        public TransientType.Mask<bool> GetEqualsMask(
            ITransientTypeGetter item,
            ITransientTypeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TransientType.Mask<bool>(false);
            ((TransientTypeCommon)((ITransientTypeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITransientTypeGetter item,
            ITransientTypeGetter rhs,
            TransientType.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.FormType = item.FormType == rhs.FormType;
            ret.Links = item.Links.CollectionEqualsHelper(
                rhs.Links,
                (l, r) => object.Equals(l, r),
                include);
        }
        
        public string Print(
            ITransientTypeGetter item,
            string? name = null,
            TransientType.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ITransientTypeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            TransientType.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"TransientType =>");
            }
            else
            {
                sb.AppendLine($"{name} (TransientType) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ITransientTypeGetter item,
            StructuredStringBuilder sb,
            TransientType.Mask<bool>? printMask = null)
        {
            if (printMask?.FormType ?? true)
            {
                sb.AppendItem(item.FormType, "FormType");
            }
            if (printMask?.Links?.Overall ?? true)
            {
                sb.AppendLine("Links =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Links)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITransientTypeGetter? lhs,
            ITransientTypeGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)TransientType_FieldIndex.FormType) ?? true))
            {
                if (lhs.FormType != rhs.FormType) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TransientType_FieldIndex.Links) ?? true))
            {
                if (!lhs.Links.SequenceEqualNullable(rhs.Links)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ITransientTypeGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.FormType);
            hash.Add(item.Links);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return TransientType.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ITransientTypeGetter obj)
        {
            foreach (var item in obj.Links)
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class TransientTypeSetterTranslationCommon
    {
        public static readonly TransientTypeSetterTranslationCommon Instance = new TransientTypeSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ITransientType item,
            ITransientTypeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)TransientType_FieldIndex.FormType) ?? true))
            {
                item.FormType = rhs.FormType;
            }
            if ((copyMask?.GetShouldTranslate((int)TransientType_FieldIndex.Links) ?? true))
            {
                errorMask?.PushIndex((int)TransientType_FieldIndex.Links);
                try
                {
                    item.Links.SetTo(
                        rhs.Links
                            .Select(b => (IFormLinkGetter<IFallout4MajorRecordGetter>)new FormLink<IFallout4MajorRecordGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public TransientType DeepCopy(
            ITransientTypeGetter item,
            TransientType.TranslationMask? copyMask = null)
        {
            TransientType ret = (TransientType)((TransientTypeCommon)((ITransientTypeGetter)item).CommonInstance()!).GetNew();
            ((TransientTypeSetterTranslationCommon)((ITransientTypeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public TransientType DeepCopy(
            ITransientTypeGetter item,
            out TransientType.ErrorMask errorMask,
            TransientType.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            TransientType ret = (TransientType)((TransientTypeCommon)((ITransientTypeGetter)item).CommonInstance()!).GetNew();
            ((TransientTypeSetterTranslationCommon)((ITransientTypeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = TransientType.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public TransientType DeepCopy(
            ITransientTypeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            TransientType ret = (TransientType)((TransientTypeCommon)((ITransientTypeGetter)item).CommonInstance()!).GetNew();
            ((TransientTypeSetterTranslationCommon)((ITransientTypeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class TransientType
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TransientType_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => TransientType_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TransientTypeCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return TransientTypeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TransientTypeSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITransientTypeGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ITransientTypeGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ITransientTypeGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class TransientTypeBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly TransientTypeBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ITransientTypeGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.FormType);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IFallout4MajorRecordGetter>>.Instance.Write(
                writer: writer,
                items: item.Links,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IFallout4MajorRecordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
        }

        public void Write(
            MutagenWriter writer,
            ITransientTypeGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.TNAM),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ITransientTypeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class TransientTypeBinaryCreateTranslation
    {
        public static readonly TransientTypeBinaryCreateTranslation Instance = new TransientTypeBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ITransientType item,
            MutagenFrame frame)
        {
            item.FormType = frame.ReadUInt32();
            item.Links.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IFallout4MajorRecordGetter>>.Instance.Parse(
                    reader: frame,
                    transl: FormLinkBinaryTranslation.Instance.Parse));
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class TransientTypeBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ITransientTypeGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TransientTypeBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class TransientTypeBinaryOverlay :
        PluginBinaryOverlay,
        ITransientTypeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TransientType_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => TransientType_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TransientTypeCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TransientTypeSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITransientTypeGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ITransientTypeGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ITransientTypeGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => TransientTypeCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TransientTypeBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TransientTypeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public UInt32 FormType => BinaryPrimitives.ReadUInt32LittleEndian(_structData.Slice(0x0, 0x4));
        #region Links
        public IReadOnlyList<IFormLinkGetter<IFallout4MajorRecordGetter>> Links => BinaryOverlayList.FactoryByStartIndex<IFormLinkGetter<IFallout4MajorRecordGetter>>(_structData.Slice(0x4), _package, 4, (s, p) => new FormLink<IFallout4MajorRecordGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
        protected int LinksEndingPos;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected TransientTypeBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static void TransientTypeParseEndingPositions(
            TransientTypeBinaryOverlay ret,
            BinaryOverlayFactoryPackage package)
        {
            ret.LinksEndingPos = ret._structData.Length;
        }

        public static ITransientTypeGetter TransientTypeFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new TransientTypeBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            TransientTypeParseEndingPositions(ret, package);
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ITransientTypeGetter TransientTypeFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return TransientTypeFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TransientTypeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ITransientTypeGetter rhs) return false;
            return ((TransientTypeCommon)((ITransientTypeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITransientTypeGetter? obj)
        {
            return ((TransientTypeCommon)((ITransientTypeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TransientTypeCommon)((ITransientTypeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

