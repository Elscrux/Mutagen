/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.RecordTypeMapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Light :
        Fallout4MajorRecord,
        IEquatable<ILightGetter>,
        ILightInternal,
        ILoquiObjectSetter<Light>
    {
        #region Ctor
        protected Light()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        /// <summary>
        /// Aspects: IScripted
        /// </summary>
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? ILightGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IScriptedGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded, IObjectBoundedOptional
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter ILightGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region PreviewTransform
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PreviewTransform? _PreviewTransform;
        public PreviewTransform? PreviewTransform
        {
            get => _PreviewTransform;
            set => _PreviewTransform = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPreviewTransformGetter? ILightGetter.PreviewTransform => this.PreviewTransform;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? ILightGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? ILightGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region Destructible
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Destructible? _Destructible;
        public Destructible? Destructible
        {
            get => _Destructible;
            set => _Destructible = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? ILightGetter.Destructible => this.Destructible;
        #endregion
        #region Properties
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Properties? _Properties;
        public Properties? Properties
        {
            get => _Properties;
            set => _Properties = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPropertiesGetter? ILightGetter.Properties => this.Properties;
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ILightGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region InventoryImage
        public TranslatedString? InventoryImage { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ILightGetter.InventoryImage => this.InventoryImage;
        #endregion
        #region MessageIcon
        public TranslatedString? MessageIcon { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ILightGetter.MessageIcon => this.MessageIcon;
        #endregion
        #region Time
        public Int32 Time { get; set; } = default;
        #endregion
        #region Radius
        public UInt32 Radius { get; set; } = default;
        #endregion
        #region Color
        public Color Color { get; set; } = default;
        #endregion
        #region Flags
        public Light.Flag Flags { get; set; } = default;
        #endregion
        #region FalloffExponent
        public Single FalloffExponent { get; set; } = default;
        #endregion
        #region FOV
        public Single FOV { get; set; } = default;
        #endregion
        #region NearClip
        public Single NearClip { get; set; } = default;
        #endregion
        #region FlickerPeriod
        public Single FlickerPeriod { get; set; } = default;
        #endregion
        #region FlickerIntensityAmplitude
        public Single FlickerIntensityAmplitude { get; set; } = default;
        #endregion
        #region FlickerMovementAmplitude
        public Single FlickerMovementAmplitude { get; set; } = default;
        #endregion
        #region Constant
        public Single Constant { get; set; } = default;
        #endregion
        #region Scalar
        public Single Scalar { get; set; } = default;
        #endregion
        #region Exponent
        public Single Exponent { get; set; } = default;
        #endregion
        #region GodRaysNearClip
        public Single GodRaysNearClip { get; set; } = default;
        #endregion
        #region Value
        public UInt32 Value { get; set; } = default;
        #endregion
        #region Weight
        public Single Weight { get; set; } = default;
        #endregion
        #region FadeValue
        public Single FadeValue { get; set; } = default;
        #endregion
        #region Gobo
        public String? Gobo { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ILightGetter.Gobo => this.Gobo;
        #endregion
        #region Lens
        private readonly IFormLinkNullable<ILensFlareGetter> _Lens = new FormLinkNullable<ILensFlareGetter>();
        public IFormLinkNullable<ILensFlareGetter> Lens
        {
            get => _Lens;
            set => _Lens.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ILensFlareGetter> ILightGetter.Lens => this.Lens;
        #endregion
        #region GodRays
        private readonly IFormLinkNullable<IGodRaysGetter> _GodRays = new FormLinkNullable<IGodRaysGetter>();
        public IFormLinkNullable<IGodRaysGetter> GodRays
        {
            get => _GodRays;
            set => _GodRays.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IGodRaysGetter> ILightGetter.GodRays => this.GodRays;
        #endregion
        #region Sound
        private readonly IFormLinkNullable<ISoundDescriptorGetter> _Sound = new FormLinkNullable<ISoundDescriptorGetter>();
        public IFormLinkNullable<ISoundDescriptorGetter> Sound
        {
            get => _Sound;
            set => _Sound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> ILightGetter.Sound => this.Sound;
        #endregion
        #region DATADataTypeState
        public Light.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LightMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.PreviewTransform = new MaskItem<TItem, PreviewTransform.Mask<TItem>?>(initialValue, new PreviewTransform.Mask<TItem>(initialValue));
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(initialValue, new Destructible.Mask<TItem>(initialValue));
                this.Properties = new MaskItem<TItem, Properties.Mask<TItem>?>(initialValue, new Properties.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.InventoryImage = initialValue;
                this.MessageIcon = initialValue;
                this.Time = initialValue;
                this.Radius = initialValue;
                this.Color = initialValue;
                this.Flags = initialValue;
                this.FalloffExponent = initialValue;
                this.FOV = initialValue;
                this.NearClip = initialValue;
                this.FlickerPeriod = initialValue;
                this.FlickerIntensityAmplitude = initialValue;
                this.FlickerMovementAmplitude = initialValue;
                this.Constant = initialValue;
                this.Scalar = initialValue;
                this.Exponent = initialValue;
                this.GodRaysNearClip = initialValue;
                this.Value = initialValue;
                this.Weight = initialValue;
                this.FadeValue = initialValue;
                this.Gobo = initialValue;
                this.Lens = initialValue;
                this.GodRays = initialValue;
                this.Sound = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem ObjectBounds,
                TItem PreviewTransform,
                TItem Model,
                TItem Keywords,
                TItem Destructible,
                TItem Properties,
                TItem Name,
                TItem InventoryImage,
                TItem MessageIcon,
                TItem Time,
                TItem Radius,
                TItem Color,
                TItem Flags,
                TItem FalloffExponent,
                TItem FOV,
                TItem NearClip,
                TItem FlickerPeriod,
                TItem FlickerIntensityAmplitude,
                TItem FlickerMovementAmplitude,
                TItem Constant,
                TItem Scalar,
                TItem Exponent,
                TItem GodRaysNearClip,
                TItem Value,
                TItem Weight,
                TItem FadeValue,
                TItem Gobo,
                TItem Lens,
                TItem GodRays,
                TItem Sound,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.PreviewTransform = new MaskItem<TItem, PreviewTransform.Mask<TItem>?>(PreviewTransform, new PreviewTransform.Mask<TItem>(PreviewTransform));
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(Destructible, new Destructible.Mask<TItem>(Destructible));
                this.Properties = new MaskItem<TItem, Properties.Mask<TItem>?>(Properties, new Properties.Mask<TItem>(Properties));
                this.Name = Name;
                this.InventoryImage = InventoryImage;
                this.MessageIcon = MessageIcon;
                this.Time = Time;
                this.Radius = Radius;
                this.Color = Color;
                this.Flags = Flags;
                this.FalloffExponent = FalloffExponent;
                this.FOV = FOV;
                this.NearClip = NearClip;
                this.FlickerPeriod = FlickerPeriod;
                this.FlickerIntensityAmplitude = FlickerIntensityAmplitude;
                this.FlickerMovementAmplitude = FlickerMovementAmplitude;
                this.Constant = Constant;
                this.Scalar = Scalar;
                this.Exponent = Exponent;
                this.GodRaysNearClip = GodRaysNearClip;
                this.Value = Value;
                this.Weight = Weight;
                this.FadeValue = FadeValue;
                this.Gobo = Gobo;
                this.Lens = Lens;
                this.GodRays = GodRays;
                this.Sound = Sound;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public MaskItem<TItem, PreviewTransform.Mask<TItem>?>? PreviewTransform { get; set; }
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public MaskItem<TItem, Destructible.Mask<TItem>?>? Destructible { get; set; }
            public MaskItem<TItem, Properties.Mask<TItem>?>? Properties { get; set; }
            public TItem Name;
            public TItem InventoryImage;
            public TItem MessageIcon;
            public TItem Time;
            public TItem Radius;
            public TItem Color;
            public TItem Flags;
            public TItem FalloffExponent;
            public TItem FOV;
            public TItem NearClip;
            public TItem FlickerPeriod;
            public TItem FlickerIntensityAmplitude;
            public TItem FlickerMovementAmplitude;
            public TItem Constant;
            public TItem Scalar;
            public TItem Exponent;
            public TItem GodRaysNearClip;
            public TItem Value;
            public TItem Weight;
            public TItem FadeValue;
            public TItem Gobo;
            public TItem Lens;
            public TItem GodRays;
            public TItem Sound;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.PreviewTransform, rhs.PreviewTransform)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Destructible, rhs.Destructible)) return false;
                if (!object.Equals(this.Properties, rhs.Properties)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.InventoryImage, rhs.InventoryImage)) return false;
                if (!object.Equals(this.MessageIcon, rhs.MessageIcon)) return false;
                if (!object.Equals(this.Time, rhs.Time)) return false;
                if (!object.Equals(this.Radius, rhs.Radius)) return false;
                if (!object.Equals(this.Color, rhs.Color)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.FalloffExponent, rhs.FalloffExponent)) return false;
                if (!object.Equals(this.FOV, rhs.FOV)) return false;
                if (!object.Equals(this.NearClip, rhs.NearClip)) return false;
                if (!object.Equals(this.FlickerPeriod, rhs.FlickerPeriod)) return false;
                if (!object.Equals(this.FlickerIntensityAmplitude, rhs.FlickerIntensityAmplitude)) return false;
                if (!object.Equals(this.FlickerMovementAmplitude, rhs.FlickerMovementAmplitude)) return false;
                if (!object.Equals(this.Constant, rhs.Constant)) return false;
                if (!object.Equals(this.Scalar, rhs.Scalar)) return false;
                if (!object.Equals(this.Exponent, rhs.Exponent)) return false;
                if (!object.Equals(this.GodRaysNearClip, rhs.GodRaysNearClip)) return false;
                if (!object.Equals(this.Value, rhs.Value)) return false;
                if (!object.Equals(this.Weight, rhs.Weight)) return false;
                if (!object.Equals(this.FadeValue, rhs.FadeValue)) return false;
                if (!object.Equals(this.Gobo, rhs.Gobo)) return false;
                if (!object.Equals(this.Lens, rhs.Lens)) return false;
                if (!object.Equals(this.GodRays, rhs.GodRays)) return false;
                if (!object.Equals(this.Sound, rhs.Sound)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.ObjectBounds);
                hash.Add(this.PreviewTransform);
                hash.Add(this.Model);
                hash.Add(this.Keywords);
                hash.Add(this.Destructible);
                hash.Add(this.Properties);
                hash.Add(this.Name);
                hash.Add(this.InventoryImage);
                hash.Add(this.MessageIcon);
                hash.Add(this.Time);
                hash.Add(this.Radius);
                hash.Add(this.Color);
                hash.Add(this.Flags);
                hash.Add(this.FalloffExponent);
                hash.Add(this.FOV);
                hash.Add(this.NearClip);
                hash.Add(this.FlickerPeriod);
                hash.Add(this.FlickerIntensityAmplitude);
                hash.Add(this.FlickerMovementAmplitude);
                hash.Add(this.Constant);
                hash.Add(this.Scalar);
                hash.Add(this.Exponent);
                hash.Add(this.GodRaysNearClip);
                hash.Add(this.Value);
                hash.Add(this.Weight);
                hash.Add(this.FadeValue);
                hash.Add(this.Gobo);
                hash.Add(this.Lens);
                hash.Add(this.GodRays);
                hash.Add(this.Sound);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (PreviewTransform != null)
                {
                    if (!eval(this.PreviewTransform.Overall)) return false;
                    if (this.PreviewTransform.Specific != null && !this.PreviewTransform.Specific.All(eval)) return false;
                }
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Destructible != null)
                {
                    if (!eval(this.Destructible.Overall)) return false;
                    if (this.Destructible.Specific != null && !this.Destructible.Specific.All(eval)) return false;
                }
                if (Properties != null)
                {
                    if (!eval(this.Properties.Overall)) return false;
                    if (this.Properties.Specific != null && !this.Properties.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (!eval(this.InventoryImage)) return false;
                if (!eval(this.MessageIcon)) return false;
                if (!eval(this.Time)) return false;
                if (!eval(this.Radius)) return false;
                if (!eval(this.Color)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.FalloffExponent)) return false;
                if (!eval(this.FOV)) return false;
                if (!eval(this.NearClip)) return false;
                if (!eval(this.FlickerPeriod)) return false;
                if (!eval(this.FlickerIntensityAmplitude)) return false;
                if (!eval(this.FlickerMovementAmplitude)) return false;
                if (!eval(this.Constant)) return false;
                if (!eval(this.Scalar)) return false;
                if (!eval(this.Exponent)) return false;
                if (!eval(this.GodRaysNearClip)) return false;
                if (!eval(this.Value)) return false;
                if (!eval(this.Weight)) return false;
                if (!eval(this.FadeValue)) return false;
                if (!eval(this.Gobo)) return false;
                if (!eval(this.Lens)) return false;
                if (!eval(this.GodRays)) return false;
                if (!eval(this.Sound)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (PreviewTransform != null)
                {
                    if (eval(this.PreviewTransform.Overall)) return true;
                    if (this.PreviewTransform.Specific != null && this.PreviewTransform.Specific.Any(eval)) return true;
                }
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Destructible != null)
                {
                    if (eval(this.Destructible.Overall)) return true;
                    if (this.Destructible.Specific != null && this.Destructible.Specific.Any(eval)) return true;
                }
                if (Properties != null)
                {
                    if (eval(this.Properties.Overall)) return true;
                    if (this.Properties.Specific != null && this.Properties.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (eval(this.InventoryImage)) return true;
                if (eval(this.MessageIcon)) return true;
                if (eval(this.Time)) return true;
                if (eval(this.Radius)) return true;
                if (eval(this.Color)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.FalloffExponent)) return true;
                if (eval(this.FOV)) return true;
                if (eval(this.NearClip)) return true;
                if (eval(this.FlickerPeriod)) return true;
                if (eval(this.FlickerIntensityAmplitude)) return true;
                if (eval(this.FlickerMovementAmplitude)) return true;
                if (eval(this.Constant)) return true;
                if (eval(this.Scalar)) return true;
                if (eval(this.Exponent)) return true;
                if (eval(this.GodRaysNearClip)) return true;
                if (eval(this.Value)) return true;
                if (eval(this.Weight)) return true;
                if (eval(this.FadeValue)) return true;
                if (eval(this.Gobo)) return true;
                if (eval(this.Lens)) return true;
                if (eval(this.GodRays)) return true;
                if (eval(this.Sound)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Light.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.PreviewTransform = this.PreviewTransform == null ? null : new MaskItem<R, PreviewTransform.Mask<R>?>(eval(this.PreviewTransform.Overall), this.PreviewTransform.Specific?.Translate(eval));
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Destructible = this.Destructible == null ? null : new MaskItem<R, Destructible.Mask<R>?>(eval(this.Destructible.Overall), this.Destructible.Specific?.Translate(eval));
                obj.Properties = this.Properties == null ? null : new MaskItem<R, Properties.Mask<R>?>(eval(this.Properties.Overall), this.Properties.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.InventoryImage = eval(this.InventoryImage);
                obj.MessageIcon = eval(this.MessageIcon);
                obj.Time = eval(this.Time);
                obj.Radius = eval(this.Radius);
                obj.Color = eval(this.Color);
                obj.Flags = eval(this.Flags);
                obj.FalloffExponent = eval(this.FalloffExponent);
                obj.FOV = eval(this.FOV);
                obj.NearClip = eval(this.NearClip);
                obj.FlickerPeriod = eval(this.FlickerPeriod);
                obj.FlickerIntensityAmplitude = eval(this.FlickerIntensityAmplitude);
                obj.FlickerMovementAmplitude = eval(this.FlickerMovementAmplitude);
                obj.Constant = eval(this.Constant);
                obj.Scalar = eval(this.Scalar);
                obj.Exponent = eval(this.Exponent);
                obj.GodRaysNearClip = eval(this.GodRaysNearClip);
                obj.Value = eval(this.Value);
                obj.Weight = eval(this.Weight);
                obj.FadeValue = eval(this.FadeValue);
                obj.Gobo = eval(this.Gobo);
                obj.Lens = eval(this.Lens);
                obj.GodRays = eval(this.GodRays);
                obj.Sound = eval(this.Sound);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Light.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Light.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Light.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.ToString(fg);
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.PreviewTransform?.Overall ?? true)
                    {
                        PreviewTransform?.ToString(fg);
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        fg.AppendLine("Keywords =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Destructible?.Overall ?? true)
                    {
                        Destructible?.ToString(fg);
                    }
                    if (printMask?.Properties?.Overall ?? true)
                    {
                        Properties?.ToString(fg);
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.InventoryImage ?? true)
                    {
                        fg.AppendItem(InventoryImage, "InventoryImage");
                    }
                    if (printMask?.MessageIcon ?? true)
                    {
                        fg.AppendItem(MessageIcon, "MessageIcon");
                    }
                    if (printMask?.Time ?? true)
                    {
                        fg.AppendItem(Time, "Time");
                    }
                    if (printMask?.Radius ?? true)
                    {
                        fg.AppendItem(Radius, "Radius");
                    }
                    if (printMask?.Color ?? true)
                    {
                        fg.AppendItem(Color, "Color");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.FalloffExponent ?? true)
                    {
                        fg.AppendItem(FalloffExponent, "FalloffExponent");
                    }
                    if (printMask?.FOV ?? true)
                    {
                        fg.AppendItem(FOV, "FOV");
                    }
                    if (printMask?.NearClip ?? true)
                    {
                        fg.AppendItem(NearClip, "NearClip");
                    }
                    if (printMask?.FlickerPeriod ?? true)
                    {
                        fg.AppendItem(FlickerPeriod, "FlickerPeriod");
                    }
                    if (printMask?.FlickerIntensityAmplitude ?? true)
                    {
                        fg.AppendItem(FlickerIntensityAmplitude, "FlickerIntensityAmplitude");
                    }
                    if (printMask?.FlickerMovementAmplitude ?? true)
                    {
                        fg.AppendItem(FlickerMovementAmplitude, "FlickerMovementAmplitude");
                    }
                    if (printMask?.Constant ?? true)
                    {
                        fg.AppendItem(Constant, "Constant");
                    }
                    if (printMask?.Scalar ?? true)
                    {
                        fg.AppendItem(Scalar, "Scalar");
                    }
                    if (printMask?.Exponent ?? true)
                    {
                        fg.AppendItem(Exponent, "Exponent");
                    }
                    if (printMask?.GodRaysNearClip ?? true)
                    {
                        fg.AppendItem(GodRaysNearClip, "GodRaysNearClip");
                    }
                    if (printMask?.Value ?? true)
                    {
                        fg.AppendItem(Value, "Value");
                    }
                    if (printMask?.Weight ?? true)
                    {
                        fg.AppendItem(Weight, "Weight");
                    }
                    if (printMask?.FadeValue ?? true)
                    {
                        fg.AppendItem(FadeValue, "FadeValue");
                    }
                    if (printMask?.Gobo ?? true)
                    {
                        fg.AppendItem(Gobo, "Gobo");
                    }
                    if (printMask?.Lens ?? true)
                    {
                        fg.AppendItem(Lens, "Lens");
                    }
                    if (printMask?.GodRays ?? true)
                    {
                        fg.AppendItem(GodRays, "GodRays");
                    }
                    if (printMask?.Sound ?? true)
                    {
                        fg.AppendItem(Sound, "Sound");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public MaskItem<Exception?, PreviewTransform.ErrorMask?>? PreviewTransform;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public MaskItem<Exception?, Destructible.ErrorMask?>? Destructible;
            public MaskItem<Exception?, Properties.ErrorMask?>? Properties;
            public Exception? Name;
            public Exception? InventoryImage;
            public Exception? MessageIcon;
            public Exception? Time;
            public Exception? Radius;
            public Exception? Color;
            public Exception? Flags;
            public Exception? FalloffExponent;
            public Exception? FOV;
            public Exception? NearClip;
            public Exception? FlickerPeriod;
            public Exception? FlickerIntensityAmplitude;
            public Exception? FlickerMovementAmplitude;
            public Exception? Constant;
            public Exception? Scalar;
            public Exception? Exponent;
            public Exception? GodRaysNearClip;
            public Exception? Value;
            public Exception? Weight;
            public Exception? FadeValue;
            public Exception? Gobo;
            public Exception? Lens;
            public Exception? GodRays;
            public Exception? Sound;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Light_FieldIndex enu = (Light_FieldIndex)index;
                switch (enu)
                {
                    case Light_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Light_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Light_FieldIndex.PreviewTransform:
                        return PreviewTransform;
                    case Light_FieldIndex.Model:
                        return Model;
                    case Light_FieldIndex.Keywords:
                        return Keywords;
                    case Light_FieldIndex.Destructible:
                        return Destructible;
                    case Light_FieldIndex.Properties:
                        return Properties;
                    case Light_FieldIndex.Name:
                        return Name;
                    case Light_FieldIndex.InventoryImage:
                        return InventoryImage;
                    case Light_FieldIndex.MessageIcon:
                        return MessageIcon;
                    case Light_FieldIndex.Time:
                        return Time;
                    case Light_FieldIndex.Radius:
                        return Radius;
                    case Light_FieldIndex.Color:
                        return Color;
                    case Light_FieldIndex.Flags:
                        return Flags;
                    case Light_FieldIndex.FalloffExponent:
                        return FalloffExponent;
                    case Light_FieldIndex.FOV:
                        return FOV;
                    case Light_FieldIndex.NearClip:
                        return NearClip;
                    case Light_FieldIndex.FlickerPeriod:
                        return FlickerPeriod;
                    case Light_FieldIndex.FlickerIntensityAmplitude:
                        return FlickerIntensityAmplitude;
                    case Light_FieldIndex.FlickerMovementAmplitude:
                        return FlickerMovementAmplitude;
                    case Light_FieldIndex.Constant:
                        return Constant;
                    case Light_FieldIndex.Scalar:
                        return Scalar;
                    case Light_FieldIndex.Exponent:
                        return Exponent;
                    case Light_FieldIndex.GodRaysNearClip:
                        return GodRaysNearClip;
                    case Light_FieldIndex.Value:
                        return Value;
                    case Light_FieldIndex.Weight:
                        return Weight;
                    case Light_FieldIndex.FadeValue:
                        return FadeValue;
                    case Light_FieldIndex.Gobo:
                        return Gobo;
                    case Light_FieldIndex.Lens:
                        return Lens;
                    case Light_FieldIndex.GodRays:
                        return GodRays;
                    case Light_FieldIndex.Sound:
                        return Sound;
                    case Light_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Light_FieldIndex enu = (Light_FieldIndex)index;
                switch (enu)
                {
                    case Light_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case Light_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Light_FieldIndex.PreviewTransform:
                        this.PreviewTransform = new MaskItem<Exception?, PreviewTransform.ErrorMask?>(ex, null);
                        break;
                    case Light_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Light_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Light_FieldIndex.Destructible:
                        this.Destructible = new MaskItem<Exception?, Destructible.ErrorMask?>(ex, null);
                        break;
                    case Light_FieldIndex.Properties:
                        this.Properties = new MaskItem<Exception?, Properties.ErrorMask?>(ex, null);
                        break;
                    case Light_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Light_FieldIndex.InventoryImage:
                        this.InventoryImage = ex;
                        break;
                    case Light_FieldIndex.MessageIcon:
                        this.MessageIcon = ex;
                        break;
                    case Light_FieldIndex.Time:
                        this.Time = ex;
                        break;
                    case Light_FieldIndex.Radius:
                        this.Radius = ex;
                        break;
                    case Light_FieldIndex.Color:
                        this.Color = ex;
                        break;
                    case Light_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Light_FieldIndex.FalloffExponent:
                        this.FalloffExponent = ex;
                        break;
                    case Light_FieldIndex.FOV:
                        this.FOV = ex;
                        break;
                    case Light_FieldIndex.NearClip:
                        this.NearClip = ex;
                        break;
                    case Light_FieldIndex.FlickerPeriod:
                        this.FlickerPeriod = ex;
                        break;
                    case Light_FieldIndex.FlickerIntensityAmplitude:
                        this.FlickerIntensityAmplitude = ex;
                        break;
                    case Light_FieldIndex.FlickerMovementAmplitude:
                        this.FlickerMovementAmplitude = ex;
                        break;
                    case Light_FieldIndex.Constant:
                        this.Constant = ex;
                        break;
                    case Light_FieldIndex.Scalar:
                        this.Scalar = ex;
                        break;
                    case Light_FieldIndex.Exponent:
                        this.Exponent = ex;
                        break;
                    case Light_FieldIndex.GodRaysNearClip:
                        this.GodRaysNearClip = ex;
                        break;
                    case Light_FieldIndex.Value:
                        this.Value = ex;
                        break;
                    case Light_FieldIndex.Weight:
                        this.Weight = ex;
                        break;
                    case Light_FieldIndex.FadeValue:
                        this.FadeValue = ex;
                        break;
                    case Light_FieldIndex.Gobo:
                        this.Gobo = ex;
                        break;
                    case Light_FieldIndex.Lens:
                        this.Lens = ex;
                        break;
                    case Light_FieldIndex.GodRays:
                        this.GodRays = ex;
                        break;
                    case Light_FieldIndex.Sound:
                        this.Sound = ex;
                        break;
                    case Light_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Light_FieldIndex enu = (Light_FieldIndex)index;
                switch (enu)
                {
                    case Light_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case Light_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Light_FieldIndex.PreviewTransform:
                        this.PreviewTransform = (MaskItem<Exception?, PreviewTransform.ErrorMask?>?)obj;
                        break;
                    case Light_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Light_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Light_FieldIndex.Destructible:
                        this.Destructible = (MaskItem<Exception?, Destructible.ErrorMask?>?)obj;
                        break;
                    case Light_FieldIndex.Properties:
                        this.Properties = (MaskItem<Exception?, Properties.ErrorMask?>?)obj;
                        break;
                    case Light_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Light_FieldIndex.InventoryImage:
                        this.InventoryImage = (Exception?)obj;
                        break;
                    case Light_FieldIndex.MessageIcon:
                        this.MessageIcon = (Exception?)obj;
                        break;
                    case Light_FieldIndex.Time:
                        this.Time = (Exception?)obj;
                        break;
                    case Light_FieldIndex.Radius:
                        this.Radius = (Exception?)obj;
                        break;
                    case Light_FieldIndex.Color:
                        this.Color = (Exception?)obj;
                        break;
                    case Light_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Light_FieldIndex.FalloffExponent:
                        this.FalloffExponent = (Exception?)obj;
                        break;
                    case Light_FieldIndex.FOV:
                        this.FOV = (Exception?)obj;
                        break;
                    case Light_FieldIndex.NearClip:
                        this.NearClip = (Exception?)obj;
                        break;
                    case Light_FieldIndex.FlickerPeriod:
                        this.FlickerPeriod = (Exception?)obj;
                        break;
                    case Light_FieldIndex.FlickerIntensityAmplitude:
                        this.FlickerIntensityAmplitude = (Exception?)obj;
                        break;
                    case Light_FieldIndex.FlickerMovementAmplitude:
                        this.FlickerMovementAmplitude = (Exception?)obj;
                        break;
                    case Light_FieldIndex.Constant:
                        this.Constant = (Exception?)obj;
                        break;
                    case Light_FieldIndex.Scalar:
                        this.Scalar = (Exception?)obj;
                        break;
                    case Light_FieldIndex.Exponent:
                        this.Exponent = (Exception?)obj;
                        break;
                    case Light_FieldIndex.GodRaysNearClip:
                        this.GodRaysNearClip = (Exception?)obj;
                        break;
                    case Light_FieldIndex.Value:
                        this.Value = (Exception?)obj;
                        break;
                    case Light_FieldIndex.Weight:
                        this.Weight = (Exception?)obj;
                        break;
                    case Light_FieldIndex.FadeValue:
                        this.FadeValue = (Exception?)obj;
                        break;
                    case Light_FieldIndex.Gobo:
                        this.Gobo = (Exception?)obj;
                        break;
                    case Light_FieldIndex.Lens:
                        this.Lens = (Exception?)obj;
                        break;
                    case Light_FieldIndex.GodRays:
                        this.GodRays = (Exception?)obj;
                        break;
                    case Light_FieldIndex.Sound:
                        this.Sound = (Exception?)obj;
                        break;
                    case Light_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (ObjectBounds != null) return true;
                if (PreviewTransform != null) return true;
                if (Model != null) return true;
                if (Keywords != null) return true;
                if (Destructible != null) return true;
                if (Properties != null) return true;
                if (Name != null) return true;
                if (InventoryImage != null) return true;
                if (MessageIcon != null) return true;
                if (Time != null) return true;
                if (Radius != null) return true;
                if (Color != null) return true;
                if (Flags != null) return true;
                if (FalloffExponent != null) return true;
                if (FOV != null) return true;
                if (NearClip != null) return true;
                if (FlickerPeriod != null) return true;
                if (FlickerIntensityAmplitude != null) return true;
                if (FlickerMovementAmplitude != null) return true;
                if (Constant != null) return true;
                if (Scalar != null) return true;
                if (Exponent != null) return true;
                if (GodRaysNearClip != null) return true;
                if (Value != null) return true;
                if (Weight != null) return true;
                if (FadeValue != null) return true;
                if (Gobo != null) return true;
                if (Lens != null) return true;
                if (GodRays != null) return true;
                if (Sound != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                VirtualMachineAdapter?.ToString(fg);
                ObjectBounds?.ToString(fg);
                PreviewTransform?.ToString(fg);
                Model?.ToString(fg);
                if (Keywords is {} KeywordsItem)
                {
                    fg.AppendLine("Keywords =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                Destructible?.ToString(fg);
                Properties?.ToString(fg);
                fg.AppendItem(Name, "Name");
                fg.AppendItem(InventoryImage, "InventoryImage");
                fg.AppendItem(MessageIcon, "MessageIcon");
                fg.AppendItem(Time, "Time");
                fg.AppendItem(Radius, "Radius");
                fg.AppendItem(Color, "Color");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(FalloffExponent, "FalloffExponent");
                fg.AppendItem(FOV, "FOV");
                fg.AppendItem(NearClip, "NearClip");
                fg.AppendItem(FlickerPeriod, "FlickerPeriod");
                fg.AppendItem(FlickerIntensityAmplitude, "FlickerIntensityAmplitude");
                fg.AppendItem(FlickerMovementAmplitude, "FlickerMovementAmplitude");
                fg.AppendItem(Constant, "Constant");
                fg.AppendItem(Scalar, "Scalar");
                fg.AppendItem(Exponent, "Exponent");
                fg.AppendItem(GodRaysNearClip, "GodRaysNearClip");
                fg.AppendItem(Value, "Value");
                fg.AppendItem(Weight, "Weight");
                fg.AppendItem(FadeValue, "FadeValue");
                fg.AppendItem(Gobo, "Gobo");
                fg.AppendItem(Lens, "Lens");
                fg.AppendItem(GodRays, "GodRays");
                fg.AppendItem(Sound, "Sound");
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.PreviewTransform = this.PreviewTransform.Combine(rhs.PreviewTransform, (l, r) => l.Combine(r));
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Destructible = this.Destructible.Combine(rhs.Destructible, (l, r) => l.Combine(r));
                ret.Properties = this.Properties.Combine(rhs.Properties, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.InventoryImage = this.InventoryImage.Combine(rhs.InventoryImage);
                ret.MessageIcon = this.MessageIcon.Combine(rhs.MessageIcon);
                ret.Time = this.Time.Combine(rhs.Time);
                ret.Radius = this.Radius.Combine(rhs.Radius);
                ret.Color = this.Color.Combine(rhs.Color);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.FalloffExponent = this.FalloffExponent.Combine(rhs.FalloffExponent);
                ret.FOV = this.FOV.Combine(rhs.FOV);
                ret.NearClip = this.NearClip.Combine(rhs.NearClip);
                ret.FlickerPeriod = this.FlickerPeriod.Combine(rhs.FlickerPeriod);
                ret.FlickerIntensityAmplitude = this.FlickerIntensityAmplitude.Combine(rhs.FlickerIntensityAmplitude);
                ret.FlickerMovementAmplitude = this.FlickerMovementAmplitude.Combine(rhs.FlickerMovementAmplitude);
                ret.Constant = this.Constant.Combine(rhs.Constant);
                ret.Scalar = this.Scalar.Combine(rhs.Scalar);
                ret.Exponent = this.Exponent.Combine(rhs.Exponent);
                ret.GodRaysNearClip = this.GodRaysNearClip.Combine(rhs.GodRaysNearClip);
                ret.Value = this.Value.Combine(rhs.Value);
                ret.Weight = this.Weight.Combine(rhs.Weight);
                ret.FadeValue = this.FadeValue.Combine(rhs.FadeValue);
                ret.Gobo = this.Gobo.Combine(rhs.Gobo);
                ret.Lens = this.Lens.Combine(rhs.Lens);
                ret.GodRays = this.GodRays.Combine(rhs.GodRays);
                ret.Sound = this.Sound.Combine(rhs.Sound);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public ObjectBounds.TranslationMask? ObjectBounds;
            public PreviewTransform.TranslationMask? PreviewTransform;
            public Model.TranslationMask? Model;
            public bool Keywords;
            public Destructible.TranslationMask? Destructible;
            public Properties.TranslationMask? Properties;
            public bool Name;
            public bool InventoryImage;
            public bool MessageIcon;
            public bool Time;
            public bool Radius;
            public bool Color;
            public bool Flags;
            public bool FalloffExponent;
            public bool FOV;
            public bool NearClip;
            public bool FlickerPeriod;
            public bool FlickerIntensityAmplitude;
            public bool FlickerMovementAmplitude;
            public bool Constant;
            public bool Scalar;
            public bool Exponent;
            public bool GodRaysNearClip;
            public bool Value;
            public bool Weight;
            public bool FadeValue;
            public bool Gobo;
            public bool Lens;
            public bool GodRays;
            public bool Sound;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Keywords = defaultOn;
                this.Name = defaultOn;
                this.InventoryImage = defaultOn;
                this.MessageIcon = defaultOn;
                this.Time = defaultOn;
                this.Radius = defaultOn;
                this.Color = defaultOn;
                this.Flags = defaultOn;
                this.FalloffExponent = defaultOn;
                this.FOV = defaultOn;
                this.NearClip = defaultOn;
                this.FlickerPeriod = defaultOn;
                this.FlickerIntensityAmplitude = defaultOn;
                this.FlickerMovementAmplitude = defaultOn;
                this.Constant = defaultOn;
                this.Scalar = defaultOn;
                this.Exponent = defaultOn;
                this.GodRaysNearClip = defaultOn;
                this.Value = defaultOn;
                this.Weight = defaultOn;
                this.FadeValue = defaultOn;
                this.Gobo = defaultOn;
                this.Lens = defaultOn;
                this.GodRays = defaultOn;
                this.Sound = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((PreviewTransform != null ? PreviewTransform.OnOverall : DefaultOn, PreviewTransform?.GetCrystal()));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((Keywords, null));
                ret.Add((Destructible != null ? Destructible.OnOverall : DefaultOn, Destructible?.GetCrystal()));
                ret.Add((Properties != null ? Properties.OnOverall : DefaultOn, Properties?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((InventoryImage, null));
                ret.Add((MessageIcon, null));
                ret.Add((Time, null));
                ret.Add((Radius, null));
                ret.Add((Color, null));
                ret.Add((Flags, null));
                ret.Add((FalloffExponent, null));
                ret.Add((FOV, null));
                ret.Add((NearClip, null));
                ret.Add((FlickerPeriod, null));
                ret.Add((FlickerIntensityAmplitude, null));
                ret.Add((FlickerMovementAmplitude, null));
                ret.Add((Constant, null));
                ret.Add((Scalar, null));
                ret.Add((Exponent, null));
                ret.Add((GodRaysNearClip, null));
                ret.Add((Value, null));
                ret.Add((Weight, null));
                ret.Add((FadeValue, null));
                ret.Add((Gobo, null));
                ret.Add((Lens, null));
                ret.Add((GodRays, null));
                ret.Add((Sound, null));
                ret.Add((DATADataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Light_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => LightCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LightSetterCommon.Instance.RemapLinks(this, mapping);
        public Light(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private Light(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal Light(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Light(IFallout4Mod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Light(IFallout4Mod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Light>.ToString(this);
        }

        protected override Type LinkType => typeof(ILight);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        [Flags]
        public enum DATADataType
        {
        }
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ILightGetter rhs) return false;
            return ((LightCommon)((ILightGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(ILightGetter? obj)
        {
            return ((LightCommon)((ILightGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((LightCommon)((ILightGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LightBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((LightBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Light CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new Light();
            ((LightSetterCommon)((ILightGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Light item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((LightSetterCommon)((ILightGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Light GetNew()
        {
            return new Light();
        }

    }
    #endregion

    #region Interface
    public partial interface ILight :
        IConstructible,
        IEmittance,
        IFallout4MajorRecordInternal,
        IFormLinkContainer,
        IItem,
        IKeyworded<IKeywordGetter>,
        ILightGetter,
        ILoquiObjectSetter<ILightInternal>,
        IModeled,
        INamed,
        INamedRequired,
        IObjectBounded,
        IObjectBoundedOptional,
        IObjectId,
        IScripted,
        ITranslatedNamed,
        ITranslatedNamedRequired,
        IWeightValue
    {
        /// <summary>
        /// Aspects: IScripted
        /// </summary>
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        /// <summary>
        /// Aspects: IObjectBounded, IObjectBoundedOptional
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        new PreviewTransform? PreviewTransform { get; set; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new Destructible? Destructible { get; set; }
        new Properties? Properties { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new TranslatedString? InventoryImage { get; set; }
        new TranslatedString? MessageIcon { get; set; }
        new Int32 Time { get; set; }
        new UInt32 Radius { get; set; }
        new Color Color { get; set; }
        new Light.Flag Flags { get; set; }
        new Single FalloffExponent { get; set; }
        new Single FOV { get; set; }
        new Single NearClip { get; set; }
        new Single FlickerPeriod { get; set; }
        new Single FlickerIntensityAmplitude { get; set; }
        new Single FlickerMovementAmplitude { get; set; }
        new Single Constant { get; set; }
        new Single Scalar { get; set; }
        new Single Exponent { get; set; }
        new Single GodRaysNearClip { get; set; }
        new UInt32 Value { get; set; }
        new Single Weight { get; set; }
        new Single FadeValue { get; set; }
        new String? Gobo { get; set; }
        new IFormLinkNullable<ILensFlareGetter> Lens { get; set; }
        new IFormLinkNullable<IGodRaysGetter> GodRays { get; set; }
        new IFormLinkNullable<ISoundDescriptorGetter> Sound { get; set; }
        new Light.DATADataType DATADataTypeState { get; set; }
        #region Mutagen
        new Light.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface ILightInternal :
        IFallout4MajorRecordInternal,
        ILight,
        ILightGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.LIGH)]
    public partial interface ILightGetter :
        IFallout4MajorRecordGetter,
        IBinaryItem,
        IConstructibleGetter,
        IEmittanceGetter,
        IFormLinkContainerGetter,
        IItemGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<ILightGetter>,
        IMapsToGetter<ILightGetter>,
        IModeledGetter,
        INamedGetter,
        INamedRequiredGetter,
        IObjectBoundedGetter,
        IObjectBoundedOptionalGetter,
        IObjectIdGetter,
        IScriptedGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter,
        IWeightValueGetter
    {
        static new ILoquiRegistration StaticRegistration => Light_Registration.Instance;
        #region VirtualMachineAdapter
        /// <summary>
        /// Aspects: IScriptedGetter
        /// </summary>
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter, IObjectBoundedOptionalGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        IPreviewTransformGetter? PreviewTransform { get; }
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        IDestructibleGetter? Destructible { get; }
        IPropertiesGetter? Properties { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        ITranslatedStringGetter? InventoryImage { get; }
        ITranslatedStringGetter? MessageIcon { get; }
        Int32 Time { get; }
        UInt32 Radius { get; }
        Color Color { get; }
        Light.Flag Flags { get; }
        Single FalloffExponent { get; }
        Single FOV { get; }
        Single NearClip { get; }
        Single FlickerPeriod { get; }
        Single FlickerIntensityAmplitude { get; }
        Single FlickerMovementAmplitude { get; }
        Single Constant { get; }
        Single Scalar { get; }
        Single Exponent { get; }
        Single GodRaysNearClip { get; }
        UInt32 Value { get; }
        Single Weight { get; }
        Single FadeValue { get; }
        String? Gobo { get; }
        IFormLinkNullableGetter<ILensFlareGetter> Lens { get; }
        IFormLinkNullableGetter<IGodRaysGetter> GodRays { get; }
        IFormLinkNullableGetter<ISoundDescriptorGetter> Sound { get; }
        Light.DATADataType DATADataTypeState { get; }

        #region Mutagen
        Light.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class LightMixIn
    {
        public static void Clear(this ILightInternal item)
        {
            ((LightSetterCommon)((ILightGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Light.Mask<bool> GetEqualsMask(
            this ILightGetter item,
            ILightGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LightCommon)((ILightGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILightGetter item,
            string? name = null,
            Light.Mask<bool>? printMask = null)
        {
            return ((LightCommon)((ILightGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILightGetter item,
            FileGeneration fg,
            string? name = null,
            Light.Mask<bool>? printMask = null)
        {
            ((LightCommon)((ILightGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ILightGetter item,
            ILightGetter rhs,
            Light.TranslationMask? equalsMask = null)
        {
            return ((LightCommon)((ILightGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ILightInternal lhs,
            ILightGetter rhs,
            out Light.ErrorMask errorMask,
            Light.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LightSetterTranslationCommon)((ILightGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Light.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILightInternal lhs,
            ILightGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LightSetterTranslationCommon)((ILightGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Light DeepCopy(
            this ILightGetter item,
            Light.TranslationMask? copyMask = null)
        {
            return ((LightSetterTranslationCommon)((ILightGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Light DeepCopy(
            this ILightGetter item,
            out Light.ErrorMask errorMask,
            Light.TranslationMask? copyMask = null)
        {
            return ((LightSetterTranslationCommon)((ILightGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Light DeepCopy(
            this ILightGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LightSetterTranslationCommon)((ILightGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Light Duplicate(
            this ILightGetter item,
            FormKey formKey,
            Light.TranslationMask? copyMask = null)
        {
            return ((LightCommon)((ILightGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ILightInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((LightSetterCommon)((ILightGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Light_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        ObjectBounds = 7,
        PreviewTransform = 8,
        Model = 9,
        Keywords = 10,
        Destructible = 11,
        Properties = 12,
        Name = 13,
        InventoryImage = 14,
        MessageIcon = 15,
        Time = 16,
        Radius = 17,
        Color = 18,
        Flags = 19,
        FalloffExponent = 20,
        FOV = 21,
        NearClip = 22,
        FlickerPeriod = 23,
        FlickerIntensityAmplitude = 24,
        FlickerMovementAmplitude = 25,
        Constant = 26,
        Scalar = 27,
        Exponent = 28,
        GodRaysNearClip = 29,
        Value = 30,
        Weight = 31,
        FadeValue = 32,
        Gobo = 33,
        Lens = 34,
        GodRays = 35,
        Sound = 36,
        DATADataTypeState = 37,
    }
    #endregion

    #region Registration
    public partial class Light_Registration : ILoquiRegistration
    {
        public static readonly Light_Registration Instance = new Light_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 196,
            version: 0);

        public const string GUID = "e0a72b05-9730-493d-96df-7fc91bae436b";

        public const ushort AdditionalFieldCount = 32;

        public const ushort FieldCount = 38;

        public static readonly Type MaskType = typeof(Light.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Light.ErrorMask);

        public static readonly Type ClassType = typeof(Light);

        public static readonly Type GetterType = typeof(ILightGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILight);

        public static readonly Type? InternalSetterType = typeof(ILightInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Light";

        public const string Name = "Light";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.LIGH;
        public static readonly Type BinaryWriteTranslation = typeof(LightBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class LightSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly LightSetterCommon Instance = new LightSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILightInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.ObjectBounds.Clear();
            item.PreviewTransform = null;
            item.Model = null;
            item.Keywords = null;
            item.Destructible = null;
            item.Properties = null;
            item.Name = default;
            item.InventoryImage = default;
            item.MessageIcon = default;
            item.Time = default;
            item.Radius = default;
            item.Color = default;
            item.Flags = default;
            item.FalloffExponent = default;
            item.FOV = default;
            item.NearClip = default;
            item.FlickerPeriod = default;
            item.FlickerIntensityAmplitude = default;
            item.FlickerMovementAmplitude = default;
            item.Constant = default;
            item.Scalar = default;
            item.Exponent = default;
            item.GodRaysNearClip = default;
            item.Value = default;
            item.Weight = default;
            item.FadeValue = default;
            item.Gobo = default;
            item.Lens.Clear();
            item.GodRays.Clear();
            item.Sound.Clear();
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (ILightInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ILightInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ILight obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.PreviewTransform?.RemapLinks(mapping);
            obj.Model?.RemapLinks(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.Destructible?.RemapLinks(mapping);
            obj.Lens.Relink(mapping);
            obj.GodRays.Relink(mapping);
            obj.Sound.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILightInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.MajorRecordParse<ILightInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: LightBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: LightBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (Light)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (Light)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    public partial class LightCommon : Fallout4MajorRecordCommon
    {
        public new static readonly LightCommon Instance = new LightCommon();

        public Light.Mask<bool> GetEqualsMask(
            ILightGetter item,
            ILightGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Light.Mask<bool>(false);
            ((LightCommon)((ILightGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILightGetter item,
            ILightGetter rhs,
            Light.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.PreviewTransform = EqualsMaskHelper.EqualsHelper(
                item.PreviewTransform,
                rhs.PreviewTransform,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Destructible = EqualsMaskHelper.EqualsHelper(
                item.Destructible,
                rhs.Destructible,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Properties = EqualsMaskHelper.EqualsHelper(
                item.Properties,
                rhs.Properties,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.InventoryImage = object.Equals(item.InventoryImage, rhs.InventoryImage);
            ret.MessageIcon = object.Equals(item.MessageIcon, rhs.MessageIcon);
            ret.Time = item.Time == rhs.Time;
            ret.Radius = item.Radius == rhs.Radius;
            ret.Color = item.Color.ColorOnlyEquals(rhs.Color);
            ret.Flags = item.Flags == rhs.Flags;
            ret.FalloffExponent = item.FalloffExponent.EqualsWithin(rhs.FalloffExponent);
            ret.FOV = item.FOV.EqualsWithin(rhs.FOV);
            ret.NearClip = item.NearClip.EqualsWithin(rhs.NearClip);
            ret.FlickerPeriod = item.FlickerPeriod.EqualsWithin(rhs.FlickerPeriod);
            ret.FlickerIntensityAmplitude = item.FlickerIntensityAmplitude.EqualsWithin(rhs.FlickerIntensityAmplitude);
            ret.FlickerMovementAmplitude = item.FlickerMovementAmplitude.EqualsWithin(rhs.FlickerMovementAmplitude);
            ret.Constant = item.Constant.EqualsWithin(rhs.Constant);
            ret.Scalar = item.Scalar.EqualsWithin(rhs.Scalar);
            ret.Exponent = item.Exponent.EqualsWithin(rhs.Exponent);
            ret.GodRaysNearClip = item.GodRaysNearClip.EqualsWithin(rhs.GodRaysNearClip);
            ret.Value = item.Value == rhs.Value;
            ret.Weight = item.Weight.EqualsWithin(rhs.Weight);
            ret.FadeValue = item.FadeValue.EqualsWithin(rhs.FadeValue);
            ret.Gobo = string.Equals(item.Gobo, rhs.Gobo);
            ret.Lens = item.Lens.Equals(rhs.Lens);
            ret.GodRays = item.GodRays.Equals(rhs.GodRays);
            ret.Sound = item.Sound.Equals(rhs.Sound);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ILightGetter item,
            string? name = null,
            Light.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILightGetter item,
            FileGeneration fg,
            string? name = null,
            Light.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Light =>");
            }
            else
            {
                fg.AppendLine($"{name} (Light) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILightGetter item,
            FileGeneration fg,
            Light.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                VirtualMachineAdapterItem?.ToString(fg, "VirtualMachineAdapter");
            }
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if ((printMask?.PreviewTransform?.Overall ?? true)
                && item.PreviewTransform is {} PreviewTransformItem)
            {
                PreviewTransformItem?.ToString(fg, "PreviewTransform");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.ToString(fg, "Model");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                fg.AppendLine("Keywords =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Destructible?.Overall ?? true)
                && item.Destructible is {} DestructibleItem)
            {
                DestructibleItem?.ToString(fg, "Destructible");
            }
            if ((printMask?.Properties?.Overall ?? true)
                && item.Properties is {} PropertiesItem)
            {
                PropertiesItem?.ToString(fg, "Properties");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.InventoryImage ?? true)
                && item.InventoryImage is {} InventoryImageItem)
            {
                fg.AppendItem(InventoryImageItem, "InventoryImage");
            }
            if ((printMask?.MessageIcon ?? true)
                && item.MessageIcon is {} MessageIconItem)
            {
                fg.AppendItem(MessageIconItem, "MessageIcon");
            }
            if (printMask?.Time ?? true)
            {
                fg.AppendItem(item.Time, "Time");
            }
            if (printMask?.Radius ?? true)
            {
                fg.AppendItem(item.Radius, "Radius");
            }
            if (printMask?.Color ?? true)
            {
                fg.AppendItem(item.Color, "Color");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.FalloffExponent ?? true)
            {
                fg.AppendItem(item.FalloffExponent, "FalloffExponent");
            }
            if (printMask?.FOV ?? true)
            {
                fg.AppendItem(item.FOV, "FOV");
            }
            if (printMask?.NearClip ?? true)
            {
                fg.AppendItem(item.NearClip, "NearClip");
            }
            if (printMask?.FlickerPeriod ?? true)
            {
                fg.AppendItem(item.FlickerPeriod, "FlickerPeriod");
            }
            if (printMask?.FlickerIntensityAmplitude ?? true)
            {
                fg.AppendItem(item.FlickerIntensityAmplitude, "FlickerIntensityAmplitude");
            }
            if (printMask?.FlickerMovementAmplitude ?? true)
            {
                fg.AppendItem(item.FlickerMovementAmplitude, "FlickerMovementAmplitude");
            }
            if (printMask?.Constant ?? true)
            {
                fg.AppendItem(item.Constant, "Constant");
            }
            if (printMask?.Scalar ?? true)
            {
                fg.AppendItem(item.Scalar, "Scalar");
            }
            if (printMask?.Exponent ?? true)
            {
                fg.AppendItem(item.Exponent, "Exponent");
            }
            if (printMask?.GodRaysNearClip ?? true)
            {
                fg.AppendItem(item.GodRaysNearClip, "GodRaysNearClip");
            }
            if (printMask?.Value ?? true)
            {
                fg.AppendItem(item.Value, "Value");
            }
            if (printMask?.Weight ?? true)
            {
                fg.AppendItem(item.Weight, "Weight");
            }
            if (printMask?.FadeValue ?? true)
            {
                fg.AppendItem(item.FadeValue, "FadeValue");
            }
            if ((printMask?.Gobo ?? true)
                && item.Gobo is {} GoboItem)
            {
                fg.AppendItem(GoboItem, "Gobo");
            }
            if (printMask?.Lens ?? true)
            {
                fg.AppendItem(item.Lens.FormKeyNullable, "Lens");
            }
            if (printMask?.GodRays ?? true)
            {
                fg.AppendItem(item.GodRays.FormKeyNullable, "GodRays");
            }
            if (printMask?.Sound ?? true)
            {
                fg.AppendItem(item.Sound.FormKeyNullable, "Sound");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public static Light_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Light_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Light_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Light_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Light_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Light_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Light_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Light_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Light_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Light_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Light_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Light_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILightGetter? lhs,
            ILightGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter, out var lhsVirtualMachineAdapter, out var rhsVirtualMachineAdapter, out var isVirtualMachineAdapterEqual))
                {
                    if (!((VirtualMachineAdapterCommon)((IVirtualMachineAdapterGetter)lhsVirtualMachineAdapter).CommonInstance()!).Equals(lhsVirtualMachineAdapter, rhsVirtualMachineAdapter, crystal?.GetSubCrystal((int)Light_FieldIndex.VirtualMachineAdapter))) return false;
                }
                else if (!isVirtualMachineAdapterEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, crystal?.GetSubCrystal((int)Light_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.PreviewTransform) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.PreviewTransform, rhs.PreviewTransform, out var lhsPreviewTransform, out var rhsPreviewTransform, out var isPreviewTransformEqual))
                {
                    if (!((PreviewTransformCommon)((IPreviewTransformGetter)lhsPreviewTransform).CommonInstance()!).Equals(lhsPreviewTransform, rhsPreviewTransform, crystal?.GetSubCrystal((int)Light_FieldIndex.PreviewTransform))) return false;
                }
                else if (!isPreviewTransformEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, crystal?.GetSubCrystal((int)Light_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.Destructible) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Destructible, rhs.Destructible, out var lhsDestructible, out var rhsDestructible, out var isDestructibleEqual))
                {
                    if (!((DestructibleCommon)((IDestructibleGetter)lhsDestructible).CommonInstance()!).Equals(lhsDestructible, rhsDestructible, crystal?.GetSubCrystal((int)Light_FieldIndex.Destructible))) return false;
                }
                else if (!isDestructibleEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.Properties) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Properties, rhs.Properties, out var lhsProperties, out var rhsProperties, out var isPropertiesEqual))
                {
                    if (!((PropertiesCommon)((IPropertiesGetter)lhsProperties).CommonInstance()!).Equals(lhsProperties, rhsProperties, crystal?.GetSubCrystal((int)Light_FieldIndex.Properties))) return false;
                }
                else if (!isPropertiesEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.InventoryImage) ?? true))
            {
                if (!object.Equals(lhs.InventoryImage, rhs.InventoryImage)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.MessageIcon) ?? true))
            {
                if (!object.Equals(lhs.MessageIcon, rhs.MessageIcon)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.Time) ?? true))
            {
                if (lhs.Time != rhs.Time) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.Radius) ?? true))
            {
                if (lhs.Radius != rhs.Radius) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.Color) ?? true))
            {
                if (!lhs.Color.ColorOnlyEquals(rhs.Color)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.FalloffExponent) ?? true))
            {
                if (!lhs.FalloffExponent.EqualsWithin(rhs.FalloffExponent)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.FOV) ?? true))
            {
                if (!lhs.FOV.EqualsWithin(rhs.FOV)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.NearClip) ?? true))
            {
                if (!lhs.NearClip.EqualsWithin(rhs.NearClip)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.FlickerPeriod) ?? true))
            {
                if (!lhs.FlickerPeriod.EqualsWithin(rhs.FlickerPeriod)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.FlickerIntensityAmplitude) ?? true))
            {
                if (!lhs.FlickerIntensityAmplitude.EqualsWithin(rhs.FlickerIntensityAmplitude)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.FlickerMovementAmplitude) ?? true))
            {
                if (!lhs.FlickerMovementAmplitude.EqualsWithin(rhs.FlickerMovementAmplitude)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.Constant) ?? true))
            {
                if (!lhs.Constant.EqualsWithin(rhs.Constant)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.Scalar) ?? true))
            {
                if (!lhs.Scalar.EqualsWithin(rhs.Scalar)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.Exponent) ?? true))
            {
                if (!lhs.Exponent.EqualsWithin(rhs.Exponent)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.GodRaysNearClip) ?? true))
            {
                if (!lhs.GodRaysNearClip.EqualsWithin(rhs.GodRaysNearClip)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.Value) ?? true))
            {
                if (lhs.Value != rhs.Value) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.Weight) ?? true))
            {
                if (!lhs.Weight.EqualsWithin(rhs.Weight)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.FadeValue) ?? true))
            {
                if (!lhs.FadeValue.EqualsWithin(rhs.FadeValue)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.Gobo) ?? true))
            {
                if (!string.Equals(lhs.Gobo, rhs.Gobo)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.Lens) ?? true))
            {
                if (!lhs.Lens.Equals(rhs.Lens)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.GodRays) ?? true))
            {
                if (!lhs.GodRays.Equals(rhs.GodRays)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.Sound) ?? true))
            {
                if (!lhs.Sound.Equals(rhs.Sound)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Light_FieldIndex.DATADataTypeState) ?? true))
            {
                if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (ILightGetter?)lhs,
                rhs: rhs as ILightGetter,
                crystal: crystal);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (ILightGetter?)lhs,
                rhs: rhs as ILightGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(ILightGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapteritem)
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.ObjectBounds);
            if (item.PreviewTransform is {} PreviewTransformitem)
            {
                hash.Add(PreviewTransformitem);
            }
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.Keywords);
            if (item.Destructible is {} Destructibleitem)
            {
                hash.Add(Destructibleitem);
            }
            if (item.Properties is {} Propertiesitem)
            {
                hash.Add(Propertiesitem);
            }
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.InventoryImage is {} InventoryImageitem)
            {
                hash.Add(InventoryImageitem);
            }
            if (item.MessageIcon is {} MessageIconitem)
            {
                hash.Add(MessageIconitem);
            }
            hash.Add(item.Time);
            hash.Add(item.Radius);
            hash.Add(item.Color);
            hash.Add(item.Flags);
            hash.Add(item.FalloffExponent);
            hash.Add(item.FOV);
            hash.Add(item.NearClip);
            hash.Add(item.FlickerPeriod);
            hash.Add(item.FlickerIntensityAmplitude);
            hash.Add(item.FlickerMovementAmplitude);
            hash.Add(item.Constant);
            hash.Add(item.Scalar);
            hash.Add(item.Exponent);
            hash.Add(item.GodRaysNearClip);
            hash.Add(item.Value);
            hash.Add(item.Weight);
            hash.Add(item.FadeValue);
            if (item.Gobo is {} Goboitem)
            {
                hash.Add(Goboitem);
            }
            hash.Add(item.Lens);
            hash.Add(item.GodRays);
            hash.Add(item.Sound);
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (ILightGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ILightGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Light.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(ILightGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.PreviewTransform is {} PreviewTransformItems)
            {
                foreach (var item in PreviewTransformItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Destructible is {} DestructibleItems)
            {
                foreach (var item in DestructibleItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Lens.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Lens);
            }
            if (obj.GodRays.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.GodRays);
            }
            if (obj.Sound.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Sound);
            }
            yield break;
        }
        
        #region Duplicate
        public Light Duplicate(
            ILightGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Light(formKey);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ILightGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ILightGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class LightSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly LightSetterTranslationCommon Instance = new LightSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ILightInternal item,
            ILightGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ILight item,
            ILightGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Light_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter is {} rhsVirtualMachineAdapter)
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Light_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Light_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Light_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.PreviewTransform) ?? true))
            {
                errorMask?.PushIndex((int)Light_FieldIndex.PreviewTransform);
                try
                {
                    if(rhs.PreviewTransform is {} rhsPreviewTransform)
                    {
                        item.PreviewTransform = rhsPreviewTransform.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Light_FieldIndex.PreviewTransform));
                    }
                    else
                    {
                        item.PreviewTransform = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Light_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Light_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Light_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                            .Select(r => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(r.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Destructible) ?? true))
            {
                errorMask?.PushIndex((int)Light_FieldIndex.Destructible);
                try
                {
                    if(rhs.Destructible is {} rhsDestructible)
                    {
                        item.Destructible = rhsDestructible.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Light_FieldIndex.Destructible));
                    }
                    else
                    {
                        item.Destructible = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Properties) ?? true))
            {
                errorMask?.PushIndex((int)Light_FieldIndex.Properties);
                try
                {
                    if(rhs.Properties is {} rhsProperties)
                    {
                        item.Properties = rhsProperties.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Light_FieldIndex.Properties));
                    }
                    else
                    {
                        item.Properties = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.InventoryImage) ?? true))
            {
                item.InventoryImage = rhs.InventoryImage?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.MessageIcon) ?? true))
            {
                item.MessageIcon = rhs.MessageIcon?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Time) ?? true))
            {
                item.Time = rhs.Time;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Radius) ?? true))
            {
                item.Radius = rhs.Radius;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Color) ?? true))
            {
                item.Color = rhs.Color;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.FalloffExponent) ?? true))
            {
                item.FalloffExponent = rhs.FalloffExponent;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.FOV) ?? true))
            {
                item.FOV = rhs.FOV;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.NearClip) ?? true))
            {
                item.NearClip = rhs.NearClip;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.FlickerPeriod) ?? true))
            {
                item.FlickerPeriod = rhs.FlickerPeriod;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.FlickerIntensityAmplitude) ?? true))
            {
                item.FlickerIntensityAmplitude = rhs.FlickerIntensityAmplitude;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.FlickerMovementAmplitude) ?? true))
            {
                item.FlickerMovementAmplitude = rhs.FlickerMovementAmplitude;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Constant) ?? true))
            {
                item.Constant = rhs.Constant;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Scalar) ?? true))
            {
                item.Scalar = rhs.Scalar;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Exponent) ?? true))
            {
                item.Exponent = rhs.Exponent;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.GodRaysNearClip) ?? true))
            {
                item.GodRaysNearClip = rhs.GodRaysNearClip;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Value) ?? true))
            {
                item.Value = rhs.Value;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Weight) ?? true))
            {
                item.Weight = rhs.Weight;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.FadeValue) ?? true))
            {
                item.FadeValue = rhs.FadeValue;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Gobo) ?? true))
            {
                item.Gobo = rhs.Gobo;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Lens) ?? true))
            {
                item.Lens.SetTo(rhs.Lens.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.GodRays) ?? true))
            {
                item.GodRays.SetTo(rhs.GodRays.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Sound) ?? true))
            {
                item.Sound.SetTo(rhs.Sound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILightInternal)item,
                rhs: (ILightGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILight)item,
                rhs: (ILightGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILightInternal)item,
                rhs: (ILightGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILight)item,
                rhs: (ILightGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Light DeepCopy(
            ILightGetter item,
            Light.TranslationMask? copyMask = null)
        {
            Light ret = (Light)((LightCommon)((ILightGetter)item).CommonInstance()!).GetNew();
            ((LightSetterTranslationCommon)((ILightGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Light DeepCopy(
            ILightGetter item,
            out Light.ErrorMask errorMask,
            Light.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Light ret = (Light)((LightCommon)((ILightGetter)item).CommonInstance()!).GetNew();
            ((LightSetterTranslationCommon)((ILightGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Light.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Light DeepCopy(
            ILightGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Light ret = (Light)((LightCommon)((ILightGetter)item).CommonInstance()!).GetNew();
            ((LightSetterTranslationCommon)((ILightGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Light
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Light_Registration.Instance;
        public new static Light_Registration StaticRegistration => Light_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LightCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return LightSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LightSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class LightBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static LightBinaryWriteTranslation Instance = new LightBinaryWriteTranslation();

        public static void WriteEmbedded(
            ILightGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            ILightGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            if (item.PreviewTransform is {} PreviewTransformItem)
            {
                ((PreviewTransformBinaryWriteTranslation)((IBinaryItem)PreviewTransformItem).BinaryWriteTranslator).Write(
                    item: PreviewTransformItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams? conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            if (item.Destructible is {} DestructibleItem)
            {
                ((DestructibleBinaryWriteTranslation)((IBinaryItem)DestructibleItem).BinaryWriteTranslator).Write(
                    item: DestructibleItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.Properties is {} PropertiesItem)
            {
                ((PropertiesBinaryWriteTranslation)((IBinaryItem)PropertiesItem).BinaryWriteTranslator).Write(
                    item: PropertiesItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.InventoryImage,
                header: translationParams.ConvertToCustom(RecordTypes.ICON),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MessageIcon,
                header: translationParams.ConvertToCustom(RecordTypes.MICO),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DATA)))
            {
                writer.Write(item.Time);
                writer.Write(item.Radius);
                ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Color);
                EnumBinaryTranslation<Light.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 4);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FalloffExponent);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FOV);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.NearClip);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FlickerPeriod);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FlickerIntensityAmplitude);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FlickerMovementAmplitude);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Constant);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Scalar);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Exponent);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.GodRaysNearClip);
                writer.Write(item.Value);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Weight);
            }
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FadeValue,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Gobo,
                header: translationParams.ConvertToCustom(RecordTypes.NAM0),
                binaryType: StringBinaryType.NullTerminate);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Lens,
                header: translationParams.ConvertToCustom(RecordTypes.LNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.GodRays,
                header: translationParams.ConvertToCustom(RecordTypes.WGDR));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Sound,
                header: translationParams.ConvertToCustom(RecordTypes.SNAM));
        }

        public void Write(
            MutagenWriter writer,
            ILightGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Record(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.LIGH)))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        translationParams: translationParams);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Enrich(ex, item);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (ILightGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (ILightGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (ILightGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class LightBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static LightBinaryCreateTranslation Instance = new LightBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.LIGH;
        public static void FillBinaryStructs(
            ILightInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            ILightInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Fallout4.VirtualMachineAdapter.CreateFromBinary(frame: frame);
                    return (int)Light_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Fallout4.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Light_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.PTRN:
                {
                    item.PreviewTransform = Mutagen.Bethesda.Fallout4.PreviewTransform.CreateFromBinary(frame: frame);
                    return (int)Light_FieldIndex.PreviewTransform;
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Fallout4.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams);
                    return (int)Light_FieldIndex.Model;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Light_FieldIndex.Keywords;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DAMC:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DSTA:
                case RecordTypeInts.DMDL:
                {
                    item.Destructible = Mutagen.Bethesda.Fallout4.Destructible.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams);
                    return (int)Light_FieldIndex.Destructible;
                }
                case RecordTypeInts.PRPS:
                {
                    item.Properties = Mutagen.Bethesda.Fallout4.Properties.CreateFromBinary(frame: frame);
                    return (int)Light_FieldIndex.Properties;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Light_FieldIndex.Name;
                }
                case RecordTypeInts.ICON:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.InventoryImage = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Light_FieldIndex.InventoryImage;
                }
                case RecordTypeInts.MICO:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MessageIcon = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Light_FieldIndex.MessageIcon;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Time = dataFrame.ReadInt32();
                    item.Radius = dataFrame.ReadUInt32();
                    item.Color = dataFrame.ReadColor(ColorBinaryType.Alpha);
                    item.Flags = EnumBinaryTranslation<Light.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    item.FalloffExponent = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    item.FOV = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    item.NearClip = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    item.FlickerPeriod = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    item.FlickerIntensityAmplitude = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    item.FlickerMovementAmplitude = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    item.Constant = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    item.Scalar = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    item.Exponent = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    item.GodRaysNearClip = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    item.Value = dataFrame.ReadUInt32();
                    item.Weight = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)Light_FieldIndex.Weight;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FadeValue = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Light_FieldIndex.FadeValue;
                }
                case RecordTypeInts.NAM0:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Gobo = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Light_FieldIndex.Gobo;
                }
                case RecordTypeInts.LNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Lens.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Light_FieldIndex.Lens;
                }
                case RecordTypeInts.WGDR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GodRays.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Light_FieldIndex.GodRays;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Sound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Light_FieldIndex.Sound;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class LightBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class LightBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        ILightGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Light_Registration.Instance;
        public new static Light_Registration StaticRegistration => Light_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LightCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LightSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => LightCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LightBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((LightBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ILight);

        public Light.MajorFlag MajorFlags => (Light.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(new OverlayStream(_data.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new OverlayStream(_data.Slice(_ObjectBoundsLocation!.Value.Min), _package), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region PreviewTransform
        private RangeInt32? _PreviewTransformLocation;
        public IPreviewTransformGetter? PreviewTransform => _PreviewTransformLocation.HasValue ? PreviewTransformBinaryOverlay.PreviewTransformFactory(new OverlayStream(_data.Slice(_PreviewTransformLocation!.Value.Min), _package), _package) : default;
        #endregion
        public IModelGetter? Model { get; private set; }
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        public IDestructibleGetter? Destructible { get; private set; }
        #region Properties
        private RangeInt32? _PropertiesLocation;
        public IPropertiesGetter? Properties => _PropertiesLocation.HasValue ? PropertiesBinaryOverlay.PropertiesFactory(new OverlayStream(_data.Slice(_PropertiesLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region InventoryImage
        private int? _InventoryImageLocation;
        public ITranslatedStringGetter? InventoryImage => _InventoryImageLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _InventoryImageLocation.Value, _package.MetaData.Constants), StringsSource.DL, parsingBundle: _package.MetaData) : default(TranslatedString?);
        #endregion
        #region MessageIcon
        private int? _MessageIconLocation;
        public ITranslatedStringGetter? MessageIcon => _MessageIconLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _MessageIconLocation.Value, _package.MetaData.Constants), StringsSource.DL, parsingBundle: _package.MetaData) : default(TranslatedString?);
        #endregion
        private int? _DATALocation;
        public Light.DATADataType DATADataTypeState { get; private set; }
        #region Time
        private int _TimeLocation => _DATALocation!.Value;
        private bool _Time_IsSet => _DATALocation.HasValue;
        public Int32 Time => _Time_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(_TimeLocation, 4)) : default;
        #endregion
        #region Radius
        private int _RadiusLocation => _DATALocation!.Value + 0x4;
        private bool _Radius_IsSet => _DATALocation.HasValue;
        public UInt32 Radius => _Radius_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(_RadiusLocation, 4)) : default;
        #endregion
        #region Color
        private int _ColorLocation => _DATALocation!.Value + 0x8;
        private bool _Color_IsSet => _DATALocation.HasValue;
        public Color Color => _Color_IsSet ? _data.Slice(_ColorLocation, 4).ReadColor(ColorBinaryType.Alpha) : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value + 0xC;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public Light.Flag Flags => _Flags_IsSet ? (Light.Flag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagsLocation, 0x4)) : default;
        #endregion
        #region FalloffExponent
        private int _FalloffExponentLocation => _DATALocation!.Value + 0x10;
        private bool _FalloffExponent_IsSet => _DATALocation.HasValue;
        public Single FalloffExponent => _FalloffExponent_IsSet ? _data.Slice(_FalloffExponentLocation, 4).Float() : default;
        #endregion
        #region FOV
        private int _FOVLocation => _DATALocation!.Value + 0x14;
        private bool _FOV_IsSet => _DATALocation.HasValue;
        public Single FOV => _FOV_IsSet ? _data.Slice(_FOVLocation, 4).Float() : default;
        #endregion
        #region NearClip
        private int _NearClipLocation => _DATALocation!.Value + 0x18;
        private bool _NearClip_IsSet => _DATALocation.HasValue;
        public Single NearClip => _NearClip_IsSet ? _data.Slice(_NearClipLocation, 4).Float() : default;
        #endregion
        #region FlickerPeriod
        private int _FlickerPeriodLocation => _DATALocation!.Value + 0x1C;
        private bool _FlickerPeriod_IsSet => _DATALocation.HasValue;
        public Single FlickerPeriod => _FlickerPeriod_IsSet ? _data.Slice(_FlickerPeriodLocation, 4).Float() : default;
        #endregion
        #region FlickerIntensityAmplitude
        private int _FlickerIntensityAmplitudeLocation => _DATALocation!.Value + 0x20;
        private bool _FlickerIntensityAmplitude_IsSet => _DATALocation.HasValue;
        public Single FlickerIntensityAmplitude => _FlickerIntensityAmplitude_IsSet ? _data.Slice(_FlickerIntensityAmplitudeLocation, 4).Float() : default;
        #endregion
        #region FlickerMovementAmplitude
        private int _FlickerMovementAmplitudeLocation => _DATALocation!.Value + 0x24;
        private bool _FlickerMovementAmplitude_IsSet => _DATALocation.HasValue;
        public Single FlickerMovementAmplitude => _FlickerMovementAmplitude_IsSet ? _data.Slice(_FlickerMovementAmplitudeLocation, 4).Float() : default;
        #endregion
        #region Constant
        private int _ConstantLocation => _DATALocation!.Value + 0x28;
        private bool _Constant_IsSet => _DATALocation.HasValue;
        public Single Constant => _Constant_IsSet ? _data.Slice(_ConstantLocation, 4).Float() : default;
        #endregion
        #region Scalar
        private int _ScalarLocation => _DATALocation!.Value + 0x2C;
        private bool _Scalar_IsSet => _DATALocation.HasValue;
        public Single Scalar => _Scalar_IsSet ? _data.Slice(_ScalarLocation, 4).Float() : default;
        #endregion
        #region Exponent
        private int _ExponentLocation => _DATALocation!.Value + 0x30;
        private bool _Exponent_IsSet => _DATALocation.HasValue;
        public Single Exponent => _Exponent_IsSet ? _data.Slice(_ExponentLocation, 4).Float() : default;
        #endregion
        #region GodRaysNearClip
        private int _GodRaysNearClipLocation => _DATALocation!.Value + 0x34;
        private bool _GodRaysNearClip_IsSet => _DATALocation.HasValue;
        public Single GodRaysNearClip => _GodRaysNearClip_IsSet ? _data.Slice(_GodRaysNearClipLocation, 4).Float() : default;
        #endregion
        #region Value
        private int _ValueLocation => _DATALocation!.Value + 0x38;
        private bool _Value_IsSet => _DATALocation.HasValue;
        public UInt32 Value => _Value_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(_ValueLocation, 4)) : default;
        #endregion
        #region Weight
        private int _WeightLocation => _DATALocation!.Value + 0x3C;
        private bool _Weight_IsSet => _DATALocation.HasValue;
        public Single Weight => _Weight_IsSet ? _data.Slice(_WeightLocation, 4).Float() : default;
        #endregion
        #region FadeValue
        private int? _FadeValueLocation;
        public Single FadeValue => _FadeValueLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _FadeValueLocation.Value, _package.MetaData.Constants).Float() : default;
        #endregion
        #region Gobo
        private int? _GoboLocation;
        public String? Gobo => _GoboLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _GoboLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region Lens
        private int? _LensLocation;
        public IFormLinkNullableGetter<ILensFlareGetter> Lens => _LensLocation.HasValue ? new FormLinkNullable<ILensFlareGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _LensLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ILensFlareGetter>.Null;
        #endregion
        #region GodRays
        private int? _GodRaysLocation;
        public IFormLinkNullableGetter<IGodRaysGetter> GodRays => _GodRaysLocation.HasValue ? new FormLinkNullable<IGodRaysGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _GodRaysLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IGodRaysGetter>.Null;
        #endregion
        #region Sound
        private int? _SoundLocation;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> Sound => _SoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _SoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected LightBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static LightBinaryOverlay LightFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            stream = PluginUtilityTranslation.DecompressStream(stream);
            var ret = new LightBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static LightBinaryOverlay LightFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return LightFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Light_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Light_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.PTRN:
                {
                    _PreviewTransformLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Light_FieldIndex.PreviewTransform;
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        parseParams: parseParams);
                    return (int)Light_FieldIndex.Model;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        subrecordType: RecordTypes.KWDA,
                        getter: (s, p) => new FormLink<IKeywordGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    return (int)Light_FieldIndex.Keywords;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DAMC:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DSTA:
                case RecordTypeInts.DMDL:
                {
                    this.Destructible = DestructibleBinaryOverlay.DestructibleFactory(
                        stream: stream,
                        package: _package,
                        parseParams: parseParams);
                    return (int)Light_FieldIndex.Destructible;
                }
                case RecordTypeInts.PRPS:
                {
                    _PropertiesLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Light_FieldIndex.Properties;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Light_FieldIndex.Name;
                }
                case RecordTypeInts.ICON:
                {
                    _InventoryImageLocation = (stream.Position - offset);
                    return (int)Light_FieldIndex.InventoryImage;
                }
                case RecordTypeInts.MICO:
                {
                    _MessageIconLocation = (stream.Position - offset);
                    return (int)Light_FieldIndex.MessageIcon;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)Light_FieldIndex.Weight;
                }
                case RecordTypeInts.FNAM:
                {
                    _FadeValueLocation = (stream.Position - offset);
                    return (int)Light_FieldIndex.FadeValue;
                }
                case RecordTypeInts.NAM0:
                {
                    _GoboLocation = (stream.Position - offset);
                    return (int)Light_FieldIndex.Gobo;
                }
                case RecordTypeInts.LNAM:
                {
                    _LensLocation = (stream.Position - offset);
                    return (int)Light_FieldIndex.Lens;
                }
                case RecordTypeInts.WGDR:
                {
                    _GodRaysLocation = (stream.Position - offset);
                    return (int)Light_FieldIndex.GodRays;
                }
                case RecordTypeInts.SNAM:
                {
                    _SoundLocation = (stream.Position - offset);
                    return (int)Light_FieldIndex.Sound;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LightMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Light>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ILightGetter rhs) return false;
            return ((LightCommon)((ILightGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(ILightGetter? obj)
        {
            return ((LightCommon)((ILightGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((LightCommon)((ILightGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

