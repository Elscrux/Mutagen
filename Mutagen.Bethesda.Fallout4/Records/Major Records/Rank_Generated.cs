/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Rank :
        IEquatable<IRankGetter>,
        ILoquiObjectSetter<Rank>,
        IRank
    {
        #region Ctor
        public Rank()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Number
        public UInt32? Number { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IRankGetter.Number => this.Number;
        #endregion
        #region Title
        public IGenderedItem<TranslatedString?>? Title { get; set; }
        IGenderedItemGetter<ITranslatedStringGetter?>? IRankGetter.Title => this.Title;
        #endregion
        #region InsigniaUnused
        public String? InsigniaUnused { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IRankGetter.InsigniaUnused => this.InsigniaUnused;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RankMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IRankGetter rhs) return false;
            return ((RankCommon)((IRankGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IRankGetter? obj)
        {
            return ((RankCommon)((IRankGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((RankCommon)((IRankGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Number = initialValue;
                this.Title = new MaskItem<TItem, GenderedItem<TItem>?>(initialValue, default);
                this.InsigniaUnused = initialValue;
            }

            public Mask(
                TItem Number,
                TItem Title,
                TItem InsigniaUnused)
            {
                this.Number = Number;
                this.Title = new MaskItem<TItem, GenderedItem<TItem>?>(Title, default);
                this.InsigniaUnused = InsigniaUnused;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Number;
            public MaskItem<TItem, GenderedItem<TItem>?>? Title;
            public TItem InsigniaUnused;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Number, rhs.Number)) return false;
                if (!object.Equals(this.Title, rhs.Title)) return false;
                if (!object.Equals(this.InsigniaUnused, rhs.InsigniaUnused)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Number);
                hash.Add(this.Title);
                hash.Add(this.InsigniaUnused);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Number)) return false;
                if (!GenderedItem.All(
                    this.Title,
                    eval: eval)) return false;
                if (!eval(this.InsigniaUnused)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Number)) return true;
                if (GenderedItem.Any(
                    this.Title,
                    eval: eval)) return true;
                if (eval(this.InsigniaUnused)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Rank.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Number = eval(this.Number);
                obj.Title = GenderedItem.TranslateHelper(
                    this.Title,
                    eval);
                obj.InsigniaUnused = eval(this.InsigniaUnused);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Rank.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Rank.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Rank.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Number ?? true)
                    {
                        fg.AppendItem(Number, "Number");
                    }
                    if (Title != null
                        && (printMask?.Title?.Overall ?? true))
                    {
                        fg.AppendLine($"Title => {Title}");
                    }
                    if (printMask?.InsigniaUnused ?? true)
                    {
                        fg.AppendItem(InsigniaUnused, "InsigniaUnused");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Number;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? Title;
            public Exception? InsigniaUnused;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Rank_FieldIndex enu = (Rank_FieldIndex)index;
                switch (enu)
                {
                    case Rank_FieldIndex.Number:
                        return Number;
                    case Rank_FieldIndex.Title:
                        return Title;
                    case Rank_FieldIndex.InsigniaUnused:
                        return InsigniaUnused;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Rank_FieldIndex enu = (Rank_FieldIndex)index;
                switch (enu)
                {
                    case Rank_FieldIndex.Number:
                        this.Number = ex;
                        break;
                    case Rank_FieldIndex.Title:
                        this.Title = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Rank_FieldIndex.InsigniaUnused:
                        this.InsigniaUnused = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Rank_FieldIndex enu = (Rank_FieldIndex)index;
                switch (enu)
                {
                    case Rank_FieldIndex.Number:
                        this.Number = (Exception?)obj;
                        break;
                    case Rank_FieldIndex.Title:
                        this.Title = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Rank_FieldIndex.InsigniaUnused:
                        this.InsigniaUnused = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Number != null) return true;
                if (Title != null) return true;
                if (InsigniaUnused != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Number, "Number");
                if (Title != null)
                {
                    fg.AppendLine($"Title => {Title}");
                }
                fg.AppendItem(InsigniaUnused, "InsigniaUnused");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Number = this.Number.Combine(rhs.Number);
                ret.Title = new MaskItem<Exception?, GenderedItem<Exception?>?>(ExceptionExt.Combine(this.Title?.Overall, rhs.Title?.Overall), GenderedItem.Combine(this.Title?.Specific, rhs.Title?.Specific));
                ret.InsigniaUnused = this.InsigniaUnused.Combine(rhs.InsigniaUnused);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Number;
            public GenderedItem<bool>? Title;
            public bool InsigniaUnused;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Number = defaultOn;
                this.InsigniaUnused = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Number, null));
                ret.Add((Title != null || DefaultOn, null));
                ret.Add((InsigniaUnused, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => RankBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((RankBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static Rank CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new Rank();
            ((RankSetterCommon)((IRankGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Rank item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((RankSetterCommon)((IRankGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Rank GetNew()
        {
            return new Rank();
        }

    }
    #endregion

    #region Interface
    public partial interface IRank :
        ILoquiObjectSetter<IRank>,
        IRankGetter
    {
        new UInt32? Number { get; set; }
        new IGenderedItem<TranslatedString?>? Title { get; set; }
        new String? InsigniaUnused { get; set; }
    }

    public partial interface IRankGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IRankGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => Rank_Registration.Instance;
        UInt32? Number { get; }
        IGenderedItemGetter<ITranslatedStringGetter?>? Title { get; }
        String? InsigniaUnused { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class RankMixIn
    {
        public static void Clear(this IRank item)
        {
            ((RankSetterCommon)((IRankGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Rank.Mask<bool> GetEqualsMask(
            this IRankGetter item,
            IRankGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RankCommon)((IRankGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRankGetter item,
            string? name = null,
            Rank.Mask<bool>? printMask = null)
        {
            return ((RankCommon)((IRankGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRankGetter item,
            FileGeneration fg,
            string? name = null,
            Rank.Mask<bool>? printMask = null)
        {
            ((RankCommon)((IRankGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IRankGetter item,
            IRankGetter rhs,
            Rank.TranslationMask? equalsMask = null)
        {
            return ((RankCommon)((IRankGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IRank lhs,
            IRankGetter rhs)
        {
            ((RankSetterTranslationCommon)((IRankGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IRank lhs,
            IRankGetter rhs,
            Rank.TranslationMask? copyMask = null)
        {
            ((RankSetterTranslationCommon)((IRankGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IRank lhs,
            IRankGetter rhs,
            out Rank.ErrorMask errorMask,
            Rank.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RankSetterTranslationCommon)((IRankGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Rank.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRank lhs,
            IRankGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RankSetterTranslationCommon)((IRankGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Rank DeepCopy(
            this IRankGetter item,
            Rank.TranslationMask? copyMask = null)
        {
            return ((RankSetterTranslationCommon)((IRankGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Rank DeepCopy(
            this IRankGetter item,
            out Rank.ErrorMask errorMask,
            Rank.TranslationMask? copyMask = null)
        {
            return ((RankSetterTranslationCommon)((IRankGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Rank DeepCopy(
            this IRankGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RankSetterTranslationCommon)((IRankGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IRank item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((RankSetterCommon)((IRankGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Rank_FieldIndex
    {
        Number = 0,
        Title = 1,
        InsigniaUnused = 2,
    }
    #endregion

    #region Registration
    public partial class Rank_Registration : ILoquiRegistration
    {
        public static readonly Rank_Registration Instance = new Rank_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 73,
            version: 0);

        public const string GUID = "597ac075-f8e4-4a14-b4c2-a9363ba4a8a1";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(Rank.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Rank.ErrorMask);

        public static readonly Type ClassType = typeof(Rank);

        public static readonly Type GetterType = typeof(IRankGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRank);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.Rank";

        public const string Name = "Rank";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static TriggeringRecordCollection TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<TriggeringRecordCollection> _TriggeringRecordTypes = new Lazy<TriggeringRecordCollection>(() =>
        {
            return new TriggeringRecordCollection(
                RecordTypes.RNAM,
                RecordTypes.MNAM,
                RecordTypes.FNAM,
                RecordTypes.INAM);
        });
        public static readonly Type BinaryWriteTranslation = typeof(RankBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class RankSetterCommon
    {
        public static readonly RankSetterCommon Instance = new RankSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRank item)
        {
            ClearPartial();
            item.Number = default;
            item.Title = null;
            item.InsigniaUnused = default;
        }
        
        #region Mutagen
        public void RemapLinks(IRank obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IRank item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: RankBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: RankBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class RankCommon
    {
        public static readonly RankCommon Instance = new RankCommon();

        public Rank.Mask<bool> GetEqualsMask(
            IRankGetter item,
            IRankGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Rank.Mask<bool>(false);
            ((RankCommon)((IRankGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRankGetter item,
            IRankGetter rhs,
            Rank.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Number = item.Number == rhs.Number;
            ret.Title = GenderedItem.EqualityMaskHelper(
                lhs: item.Title,
                rhs: rhs.Title,
                maskGetter: (l, r, i) => EqualityComparer<ITranslatedStringGetter?>.Default.Equals(l, r),
                include: include);
            ret.InsigniaUnused = string.Equals(item.InsigniaUnused, rhs.InsigniaUnused);
        }
        
        public string ToString(
            IRankGetter item,
            string? name = null,
            Rank.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRankGetter item,
            FileGeneration fg,
            string? name = null,
            Rank.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Rank =>");
            }
            else
            {
                fg.AppendLine($"{name} (Rank) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRankGetter item,
            FileGeneration fg,
            Rank.Mask<bool>? printMask = null)
        {
            if ((printMask?.Number ?? true)
                && item.Number is {} NumberItem)
            {
                fg.AppendItem(NumberItem, "Number");
            }
            if ((printMask?.Title?.Overall ?? true)
                && item.Title is {} TitleItem)
            {
                TitleItem?.ToString(fg, "Title");
            }
            if ((printMask?.InsigniaUnused ?? true)
                && item.InsigniaUnused is {} InsigniaUnusedItem)
            {
                fg.AppendItem(InsigniaUnusedItem, "InsigniaUnused");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRankGetter? lhs,
            IRankGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)Rank_FieldIndex.Number) ?? true))
            {
                if (lhs.Number != rhs.Number) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Rank_FieldIndex.Title) ?? true))
            {
                if (!Equals(lhs.Title, rhs.Title)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Rank_FieldIndex.InsigniaUnused) ?? true))
            {
                if (!string.Equals(lhs.InsigniaUnused, rhs.InsigniaUnused)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IRankGetter item)
        {
            var hash = new HashCode();
            if (item.Number is {} Numberitem)
            {
                hash.Add(Numberitem);
            }
            if (item.Title is {} Titleitem)
            {
                hash.Add(HashCode.Combine(Titleitem.Male, Titleitem.Female));
            }
            if (item.InsigniaUnused is {} InsigniaUnuseditem)
            {
                hash.Add(InsigniaUnuseditem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Rank.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IRankGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class RankSetterTranslationCommon
    {
        public static readonly RankSetterTranslationCommon Instance = new RankSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IRank item,
            IRankGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)Rank_FieldIndex.Number) ?? true))
            {
                item.Number = rhs.Number;
            }
            if (rhs.Title is not {} rhsTitleitem)
            {
                item.Title = null;
            }
            else
            {
                item.Title = new GenderedItem<TranslatedString?>(
                    male: rhsTitleitem.Male?.DeepCopy(),
                    female: rhsTitleitem.Female?.DeepCopy());
            }
            if ((copyMask?.GetShouldTranslate((int)Rank_FieldIndex.InsigniaUnused) ?? true))
            {
                item.InsigniaUnused = rhs.InsigniaUnused;
            }
        }
        
        #endregion
        
        public Rank DeepCopy(
            IRankGetter item,
            Rank.TranslationMask? copyMask = null)
        {
            Rank ret = (Rank)((RankCommon)((IRankGetter)item).CommonInstance()!).GetNew();
            ((RankSetterTranslationCommon)((IRankGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Rank DeepCopy(
            IRankGetter item,
            out Rank.ErrorMask errorMask,
            Rank.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Rank ret = (Rank)((RankCommon)((IRankGetter)item).CommonInstance()!).GetNew();
            ((RankSetterTranslationCommon)((IRankGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Rank.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Rank DeepCopy(
            IRankGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Rank ret = (Rank)((RankCommon)((IRankGetter)item).CommonInstance()!).GetNew();
            ((RankSetterTranslationCommon)((IRankGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Rank
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Rank_Registration.Instance;
        public static Rank_Registration StaticRegistration => Rank_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => RankCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return RankSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => RankSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRankGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IRankGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IRankGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class RankBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static RankBinaryWriteTranslation Instance = new RankBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IRankGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Number,
                header: translationParams.ConvertToCustom(RecordTypes.RNAM));
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.Title,
                maleMarker: RecordTypes.MNAM,
                femaleMarker: RecordTypes.FNAM,
                transl: (MutagenWriter subWriter, ITranslatedStringGetter? subItem) =>
                {
                    StringBinaryTranslation.Instance.WriteNullable(
                        writer: subWriter,
                        item: subItem,
                        binaryType: StringBinaryType.NullTerminate,
                        source: StringsSource.Normal);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.InsigniaUnused,
                header: translationParams.ConvertToCustom(RecordTypes.INAM),
                binaryType: StringBinaryType.NullTerminate);
        }

        public void Write(
            MutagenWriter writer,
            IRankGetter item,
            TypedWriteParams? translationParams = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IRankGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class RankBinaryCreateTranslation
    {
        public readonly static RankBinaryCreateTranslation Instance = new RankBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IRank item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IRank item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.RNAM:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)Rank_FieldIndex.Number) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Number = frame.ReadUInt32();
                    return (int)Rank_FieldIndex.Number;
                }
                case RecordTypeInts.MNAM:
                case RecordTypeInts.FNAM:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)Rank_FieldIndex.Title) return ParseResult.Stop;
                    item.Title = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.Parse<TranslatedString>(
                        frame: frame,
                        maleMarker: RecordTypes.MNAM,
                        femaleMarker: RecordTypes.FNAM,
                        skipMarker: false,
                        transl: (MutagenFrame r, out TranslatedString genSubItem) =>
                        {
                            return StringBinaryTranslation.Instance.Parse(
                                r,
                                item: out genSubItem,
                                parseWhole: false,
                                binaryType: StringBinaryType.NullTerminate,
                                source: StringsSource.Normal);
                        });
                    return (int)Rank_FieldIndex.Title;
                }
                case RecordTypeInts.INAM:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)Rank_FieldIndex.InsigniaUnused) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.InsigniaUnused = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Rank_FieldIndex.InsigniaUnused;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class RankBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRankGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((RankBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class RankBinaryOverlay :
        PluginBinaryOverlay,
        IRankGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Rank_Registration.Instance;
        public static Rank_Registration StaticRegistration => Rank_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => RankCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => RankSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRankGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IRankGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IRankGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => RankBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((RankBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Number
        private int? _NumberLocation;
        public UInt32? Number => _NumberLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _NumberLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region Title
        private IGenderedItemGetter<ITranslatedStringGetter?>? _TitleOverlay;
        public IGenderedItemGetter<ITranslatedStringGetter?>? Title => _TitleOverlay;
        #endregion
        #region InsigniaUnused
        private int? _InsigniaUnusedLocation;
        public String? InsigniaUnused => _InsigniaUnusedLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _InsigniaUnusedLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected RankBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static RankBinaryOverlay RankFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new RankBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static RankBinaryOverlay RankFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return RankFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.RNAM:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)Rank_FieldIndex.Number) return ParseResult.Stop;
                    _NumberLocation = (stream.Position - offset);
                    return (int)Rank_FieldIndex.Number;
                }
                case RecordTypeInts.MNAM:
                case RecordTypeInts.FNAM:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)Rank_FieldIndex.Title) return ParseResult.Stop;
                    _TitleOverlay = GenderedItemBinaryOverlay.Factory<ITranslatedStringGetter>(
                        package: _package,
                        male: RecordTypes.MNAM,
                        female: RecordTypes.FNAM,
                        stream: stream,
                        creator: (m, p) => StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(m, p.MetaData.Constants), StringsSource.Normal, parsingBundle: p.MetaData));
                    return (int)Rank_FieldIndex.Title;
                }
                case RecordTypeInts.INAM:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)Rank_FieldIndex.InsigniaUnused) return ParseResult.Stop;
                    _InsigniaUnusedLocation = (stream.Position - offset);
                    return (int)Rank_FieldIndex.InsigniaUnused;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RankMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IRankGetter rhs) return false;
            return ((RankCommon)((IRankGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IRankGetter? obj)
        {
            return ((RankCommon)((IRankGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((RankCommon)((IRankGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

