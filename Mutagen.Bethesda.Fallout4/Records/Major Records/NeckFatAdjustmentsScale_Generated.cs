/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class NeckFatAdjustmentsScale :
        IEquatable<INeckFatAdjustmentsScaleGetter>,
        ILoquiObjectSetter<NeckFatAdjustmentsScale>,
        INeckFatAdjustmentsScale
    {
        #region Ctor
        public NeckFatAdjustmentsScale()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Unknown
        public UInt32 Unknown { get; set; } = default;
        #endregion
        #region X
        public Single X { get; set; } = default;
        #endregion
        #region Y
        public Single Y { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            NeckFatAdjustmentsScaleMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INeckFatAdjustmentsScaleGetter rhs) return false;
            return ((NeckFatAdjustmentsScaleCommon)((INeckFatAdjustmentsScaleGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(INeckFatAdjustmentsScaleGetter? obj)
        {
            return ((NeckFatAdjustmentsScaleCommon)((INeckFatAdjustmentsScaleGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((NeckFatAdjustmentsScaleCommon)((INeckFatAdjustmentsScaleGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Unknown = initialValue;
                this.X = initialValue;
                this.Y = initialValue;
            }

            public Mask(
                TItem Unknown,
                TItem X,
                TItem Y)
            {
                this.Unknown = Unknown;
                this.X = X;
                this.Y = Y;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Unknown;
            public TItem X;
            public TItem Y;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.X, rhs.X)) return false;
                if (!object.Equals(this.Y, rhs.Y)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Unknown);
                hash.Add(this.X);
                hash.Add(this.Y);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Unknown)) return false;
                if (!eval(this.X)) return false;
                if (!eval(this.Y)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Unknown)) return true;
                if (eval(this.X)) return true;
                if (eval(this.Y)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new NeckFatAdjustmentsScale.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Unknown = eval(this.Unknown);
                obj.X = eval(this.X);
                obj.Y = eval(this.Y);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(NeckFatAdjustmentsScale.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, NeckFatAdjustmentsScale.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(NeckFatAdjustmentsScale.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.X ?? true)
                    {
                        fg.AppendItem(X, "X");
                    }
                    if (printMask?.Y ?? true)
                    {
                        fg.AppendItem(Y, "Y");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Unknown;
            public Exception? X;
            public Exception? Y;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                NeckFatAdjustmentsScale_FieldIndex enu = (NeckFatAdjustmentsScale_FieldIndex)index;
                switch (enu)
                {
                    case NeckFatAdjustmentsScale_FieldIndex.Unknown:
                        return Unknown;
                    case NeckFatAdjustmentsScale_FieldIndex.X:
                        return X;
                    case NeckFatAdjustmentsScale_FieldIndex.Y:
                        return Y;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                NeckFatAdjustmentsScale_FieldIndex enu = (NeckFatAdjustmentsScale_FieldIndex)index;
                switch (enu)
                {
                    case NeckFatAdjustmentsScale_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case NeckFatAdjustmentsScale_FieldIndex.X:
                        this.X = ex;
                        break;
                    case NeckFatAdjustmentsScale_FieldIndex.Y:
                        this.Y = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                NeckFatAdjustmentsScale_FieldIndex enu = (NeckFatAdjustmentsScale_FieldIndex)index;
                switch (enu)
                {
                    case NeckFatAdjustmentsScale_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case NeckFatAdjustmentsScale_FieldIndex.X:
                        this.X = (Exception?)obj;
                        break;
                    case NeckFatAdjustmentsScale_FieldIndex.Y:
                        this.Y = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Unknown != null) return true;
                if (X != null) return true;
                if (Y != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(X, "X");
                fg.AppendItem(Y, "Y");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.X = this.X.Combine(rhs.X);
                ret.Y = this.Y.Combine(rhs.Y);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Unknown;
            public bool X;
            public bool Y;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Unknown = defaultOn;
                this.X = defaultOn;
                this.Y = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Unknown, null));
                ret.Add((X, null));
                ret.Add((Y, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NeckFatAdjustmentsScaleBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((NeckFatAdjustmentsScaleBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static NeckFatAdjustmentsScale CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new NeckFatAdjustmentsScale();
            ((NeckFatAdjustmentsScaleSetterCommon)((INeckFatAdjustmentsScaleGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out NeckFatAdjustmentsScale item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((NeckFatAdjustmentsScaleSetterCommon)((INeckFatAdjustmentsScaleGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static NeckFatAdjustmentsScale GetNew()
        {
            return new NeckFatAdjustmentsScale();
        }

    }
    #endregion

    #region Interface
    public partial interface INeckFatAdjustmentsScale :
        ILoquiObjectSetter<INeckFatAdjustmentsScale>,
        INeckFatAdjustmentsScaleGetter
    {
        new UInt32 Unknown { get; set; }
        new Single X { get; set; }
        new Single Y { get; set; }
    }

    public partial interface INeckFatAdjustmentsScaleGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<INeckFatAdjustmentsScaleGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => NeckFatAdjustmentsScale_Registration.Instance;
        UInt32 Unknown { get; }
        Single X { get; }
        Single Y { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class NeckFatAdjustmentsScaleMixIn
    {
        public static void Clear(this INeckFatAdjustmentsScale item)
        {
            ((NeckFatAdjustmentsScaleSetterCommon)((INeckFatAdjustmentsScaleGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static NeckFatAdjustmentsScale.Mask<bool> GetEqualsMask(
            this INeckFatAdjustmentsScaleGetter item,
            INeckFatAdjustmentsScaleGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NeckFatAdjustmentsScaleCommon)((INeckFatAdjustmentsScaleGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this INeckFatAdjustmentsScaleGetter item,
            string? name = null,
            NeckFatAdjustmentsScale.Mask<bool>? printMask = null)
        {
            return ((NeckFatAdjustmentsScaleCommon)((INeckFatAdjustmentsScaleGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this INeckFatAdjustmentsScaleGetter item,
            FileGeneration fg,
            string? name = null,
            NeckFatAdjustmentsScale.Mask<bool>? printMask = null)
        {
            ((NeckFatAdjustmentsScaleCommon)((INeckFatAdjustmentsScaleGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INeckFatAdjustmentsScaleGetter item,
            INeckFatAdjustmentsScaleGetter rhs,
            NeckFatAdjustmentsScale.TranslationMask? equalsMask = null)
        {
            return ((NeckFatAdjustmentsScaleCommon)((INeckFatAdjustmentsScaleGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this INeckFatAdjustmentsScale lhs,
            INeckFatAdjustmentsScaleGetter rhs)
        {
            ((NeckFatAdjustmentsScaleSetterTranslationCommon)((INeckFatAdjustmentsScaleGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INeckFatAdjustmentsScale lhs,
            INeckFatAdjustmentsScaleGetter rhs,
            NeckFatAdjustmentsScale.TranslationMask? copyMask = null)
        {
            ((NeckFatAdjustmentsScaleSetterTranslationCommon)((INeckFatAdjustmentsScaleGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INeckFatAdjustmentsScale lhs,
            INeckFatAdjustmentsScaleGetter rhs,
            out NeckFatAdjustmentsScale.ErrorMask errorMask,
            NeckFatAdjustmentsScale.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NeckFatAdjustmentsScaleSetterTranslationCommon)((INeckFatAdjustmentsScaleGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = NeckFatAdjustmentsScale.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INeckFatAdjustmentsScale lhs,
            INeckFatAdjustmentsScaleGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NeckFatAdjustmentsScaleSetterTranslationCommon)((INeckFatAdjustmentsScaleGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static NeckFatAdjustmentsScale DeepCopy(
            this INeckFatAdjustmentsScaleGetter item,
            NeckFatAdjustmentsScale.TranslationMask? copyMask = null)
        {
            return ((NeckFatAdjustmentsScaleSetterTranslationCommon)((INeckFatAdjustmentsScaleGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NeckFatAdjustmentsScale DeepCopy(
            this INeckFatAdjustmentsScaleGetter item,
            out NeckFatAdjustmentsScale.ErrorMask errorMask,
            NeckFatAdjustmentsScale.TranslationMask? copyMask = null)
        {
            return ((NeckFatAdjustmentsScaleSetterTranslationCommon)((INeckFatAdjustmentsScaleGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NeckFatAdjustmentsScale DeepCopy(
            this INeckFatAdjustmentsScaleGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NeckFatAdjustmentsScaleSetterTranslationCommon)((INeckFatAdjustmentsScaleGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this INeckFatAdjustmentsScale item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((NeckFatAdjustmentsScaleSetterCommon)((INeckFatAdjustmentsScaleGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum NeckFatAdjustmentsScale_FieldIndex
    {
        Unknown = 0,
        X = 1,
        Y = 2,
    }
    #endregion

    #region Registration
    public partial class NeckFatAdjustmentsScale_Registration : ILoquiRegistration
    {
        public static readonly NeckFatAdjustmentsScale_Registration Instance = new NeckFatAdjustmentsScale_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 219,
            version: 0);

        public const string GUID = "d679db18-314a-4f0a-bc61-4f6a81b5dc4b";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(NeckFatAdjustmentsScale.Mask<>);

        public static readonly Type ErrorMaskType = typeof(NeckFatAdjustmentsScale.ErrorMask);

        public static readonly Type ClassType = typeof(NeckFatAdjustmentsScale);

        public static readonly Type GetterType = typeof(INeckFatAdjustmentsScaleGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INeckFatAdjustmentsScale);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.NeckFatAdjustmentsScale";

        public const string Name = "NeckFatAdjustmentsScale";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(NeckFatAdjustmentsScaleBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class NeckFatAdjustmentsScaleSetterCommon
    {
        public static readonly NeckFatAdjustmentsScaleSetterCommon Instance = new NeckFatAdjustmentsScaleSetterCommon();

        partial void ClearPartial();
        
        public void Clear(INeckFatAdjustmentsScale item)
        {
            ClearPartial();
            item.Unknown = default;
            item.X = default;
            item.Y = default;
        }
        
        #region Mutagen
        public void RemapLinks(INeckFatAdjustmentsScale obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INeckFatAdjustmentsScale item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: NeckFatAdjustmentsScaleBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class NeckFatAdjustmentsScaleCommon
    {
        public static readonly NeckFatAdjustmentsScaleCommon Instance = new NeckFatAdjustmentsScaleCommon();

        public NeckFatAdjustmentsScale.Mask<bool> GetEqualsMask(
            INeckFatAdjustmentsScaleGetter item,
            INeckFatAdjustmentsScaleGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NeckFatAdjustmentsScale.Mask<bool>(false);
            ((NeckFatAdjustmentsScaleCommon)((INeckFatAdjustmentsScaleGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INeckFatAdjustmentsScaleGetter item,
            INeckFatAdjustmentsScaleGetter rhs,
            NeckFatAdjustmentsScale.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.X = item.X.EqualsWithin(rhs.X);
            ret.Y = item.Y.EqualsWithin(rhs.Y);
        }
        
        public string ToString(
            INeckFatAdjustmentsScaleGetter item,
            string? name = null,
            NeckFatAdjustmentsScale.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            INeckFatAdjustmentsScaleGetter item,
            FileGeneration fg,
            string? name = null,
            NeckFatAdjustmentsScale.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"NeckFatAdjustmentsScale =>");
            }
            else
            {
                fg.AppendLine($"{name} (NeckFatAdjustmentsScale) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            INeckFatAdjustmentsScaleGetter item,
            FileGeneration fg,
            NeckFatAdjustmentsScale.Mask<bool>? printMask = null)
        {
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.X ?? true)
            {
                fg.AppendItem(item.X, "X");
            }
            if (printMask?.Y ?? true)
            {
                fg.AppendItem(item.Y, "Y");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INeckFatAdjustmentsScaleGetter? lhs,
            INeckFatAdjustmentsScaleGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)NeckFatAdjustmentsScale_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NeckFatAdjustmentsScale_FieldIndex.X) ?? true))
            {
                if (!lhs.X.EqualsWithin(rhs.X)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NeckFatAdjustmentsScale_FieldIndex.Y) ?? true))
            {
                if (!lhs.Y.EqualsWithin(rhs.Y)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(INeckFatAdjustmentsScaleGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Unknown);
            hash.Add(item.X);
            hash.Add(item.Y);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return NeckFatAdjustmentsScale.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(INeckFatAdjustmentsScaleGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class NeckFatAdjustmentsScaleSetterTranslationCommon
    {
        public static readonly NeckFatAdjustmentsScaleSetterTranslationCommon Instance = new NeckFatAdjustmentsScaleSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            INeckFatAdjustmentsScale item,
            INeckFatAdjustmentsScaleGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)NeckFatAdjustmentsScale_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)NeckFatAdjustmentsScale_FieldIndex.X) ?? true))
            {
                item.X = rhs.X;
            }
            if ((copyMask?.GetShouldTranslate((int)NeckFatAdjustmentsScale_FieldIndex.Y) ?? true))
            {
                item.Y = rhs.Y;
            }
        }
        
        #endregion
        
        public NeckFatAdjustmentsScale DeepCopy(
            INeckFatAdjustmentsScaleGetter item,
            NeckFatAdjustmentsScale.TranslationMask? copyMask = null)
        {
            NeckFatAdjustmentsScale ret = (NeckFatAdjustmentsScale)((NeckFatAdjustmentsScaleCommon)((INeckFatAdjustmentsScaleGetter)item).CommonInstance()!).GetNew();
            ((NeckFatAdjustmentsScaleSetterTranslationCommon)((INeckFatAdjustmentsScaleGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public NeckFatAdjustmentsScale DeepCopy(
            INeckFatAdjustmentsScaleGetter item,
            out NeckFatAdjustmentsScale.ErrorMask errorMask,
            NeckFatAdjustmentsScale.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            NeckFatAdjustmentsScale ret = (NeckFatAdjustmentsScale)((NeckFatAdjustmentsScaleCommon)((INeckFatAdjustmentsScaleGetter)item).CommonInstance()!).GetNew();
            ((NeckFatAdjustmentsScaleSetterTranslationCommon)((INeckFatAdjustmentsScaleGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = NeckFatAdjustmentsScale.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public NeckFatAdjustmentsScale DeepCopy(
            INeckFatAdjustmentsScaleGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            NeckFatAdjustmentsScale ret = (NeckFatAdjustmentsScale)((NeckFatAdjustmentsScaleCommon)((INeckFatAdjustmentsScaleGetter)item).CommonInstance()!).GetNew();
            ((NeckFatAdjustmentsScaleSetterTranslationCommon)((INeckFatAdjustmentsScaleGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class NeckFatAdjustmentsScale
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NeckFatAdjustmentsScale_Registration.Instance;
        public static NeckFatAdjustmentsScale_Registration StaticRegistration => NeckFatAdjustmentsScale_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NeckFatAdjustmentsScaleCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return NeckFatAdjustmentsScaleSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NeckFatAdjustmentsScaleSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INeckFatAdjustmentsScaleGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object INeckFatAdjustmentsScaleGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object INeckFatAdjustmentsScaleGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class NeckFatAdjustmentsScaleBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static NeckFatAdjustmentsScaleBinaryWriteTranslation Instance = new NeckFatAdjustmentsScaleBinaryWriteTranslation();

        public static void WriteEmbedded(
            INeckFatAdjustmentsScaleGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Unknown);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.X);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Y);
        }

        public void Write(
            MutagenWriter writer,
            INeckFatAdjustmentsScaleGetter item,
            TypedWriteParams? translationParams = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (INeckFatAdjustmentsScaleGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class NeckFatAdjustmentsScaleBinaryCreateTranslation
    {
        public readonly static NeckFatAdjustmentsScaleBinaryCreateTranslation Instance = new NeckFatAdjustmentsScaleBinaryCreateTranslation();

        public static void FillBinaryStructs(
            INeckFatAdjustmentsScale item,
            MutagenFrame frame)
        {
            item.Unknown = frame.ReadUInt32();
            item.X = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Y = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class NeckFatAdjustmentsScaleBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this INeckFatAdjustmentsScaleGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((NeckFatAdjustmentsScaleBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class NeckFatAdjustmentsScaleBinaryOverlay :
        PluginBinaryOverlay,
        INeckFatAdjustmentsScaleGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NeckFatAdjustmentsScale_Registration.Instance;
        public static NeckFatAdjustmentsScale_Registration StaticRegistration => NeckFatAdjustmentsScale_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NeckFatAdjustmentsScaleCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NeckFatAdjustmentsScaleSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INeckFatAdjustmentsScaleGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? INeckFatAdjustmentsScaleGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object INeckFatAdjustmentsScaleGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NeckFatAdjustmentsScaleBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((NeckFatAdjustmentsScaleBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public UInt32 Unknown => BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(0x0, 0x4));
        public Single X => _data.Slice(0x4, 0x4).Float();
        public Single Y => _data.Slice(0x8, 0x4).Float();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NeckFatAdjustmentsScaleBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static NeckFatAdjustmentsScaleBinaryOverlay NeckFatAdjustmentsScaleFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new NeckFatAdjustmentsScaleBinaryOverlay(
                bytes: stream.RemainingMemory.Slice(0, 0xC),
                package: package);
            int offset = stream.Position;
            stream.Position += 0xC;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static NeckFatAdjustmentsScaleBinaryOverlay NeckFatAdjustmentsScaleFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return NeckFatAdjustmentsScaleFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            NeckFatAdjustmentsScaleMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INeckFatAdjustmentsScaleGetter rhs) return false;
            return ((NeckFatAdjustmentsScaleCommon)((INeckFatAdjustmentsScaleGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(INeckFatAdjustmentsScaleGetter? obj)
        {
            return ((NeckFatAdjustmentsScaleCommon)((INeckFatAdjustmentsScaleGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((NeckFatAdjustmentsScaleCommon)((INeckFatAdjustmentsScaleGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

