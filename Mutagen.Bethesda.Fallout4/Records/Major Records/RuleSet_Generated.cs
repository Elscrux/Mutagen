/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class RuleSet :
        IEquatable<IRuleSetGetter>,
        ILoquiObjectSetter<RuleSet>,
        IRuleSet
    {
        #region Ctor
        public RuleSet()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Count
        public UInt32 Count { get; set; } = default;
        #endregion
        #region Names
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<RuleName> _Names = new ExtendedList<RuleName>();
        public ExtendedList<RuleName> Names
        {
            get => this._Names;
            init => this._Names = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IRuleNameGetter> IRuleSetGetter.Names => _Names;
        #endregion

        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RuleSetMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IRuleSetGetter rhs) return false;
            return ((RuleSetCommon)((IRuleSetGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IRuleSetGetter? obj)
        {
            return ((RuleSetCommon)((IRuleSetGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((RuleSetCommon)((IRuleSetGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Count = initialValue;
                this.Names = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RuleName.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, RuleName.Mask<TItem>?>>());
            }

            public Mask(
                TItem Count,
                TItem Names)
            {
                this.Count = Count;
                this.Names = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RuleName.Mask<TItem>?>>?>(Names, Enumerable.Empty<MaskItemIndexed<TItem, RuleName.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Count;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RuleName.Mask<TItem>?>>?>? Names;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Count, rhs.Count)) return false;
                if (!object.Equals(this.Names, rhs.Names)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Count);
                hash.Add(this.Names);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Count)) return false;
                if (this.Names != null)
                {
                    if (!eval(this.Names.Overall)) return false;
                    if (this.Names.Specific != null)
                    {
                        foreach (var item in this.Names.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Count)) return true;
                if (this.Names != null)
                {
                    if (eval(this.Names.Overall)) return true;
                    if (this.Names.Specific != null)
                    {
                        foreach (var item in this.Names.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new RuleSet.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Count = eval(this.Count);
                if (Names != null)
                {
                    obj.Names = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RuleName.Mask<R>?>>?>(eval(this.Names.Overall), Enumerable.Empty<MaskItemIndexed<R, RuleName.Mask<R>?>>());
                    if (Names.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, RuleName.Mask<R>?>>();
                        obj.Names.Specific = l;
                        foreach (var item in Names.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, RuleName.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, RuleName.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(RuleSet.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, RuleSet.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(RuleSet.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Count ?? true)
                    {
                        fg.AppendItem(Count, "Count");
                    }
                    if ((printMask?.Names?.Overall ?? true)
                        && Names is {} NamesItem)
                    {
                        fg.AppendLine("Names =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(NamesItem.Overall);
                            if (NamesItem.Specific != null)
                            {
                                foreach (var subItem in NamesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Count;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RuleName.ErrorMask?>>?>? Names;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                RuleSet_FieldIndex enu = (RuleSet_FieldIndex)index;
                switch (enu)
                {
                    case RuleSet_FieldIndex.Count:
                        return Count;
                    case RuleSet_FieldIndex.Names:
                        return Names;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                RuleSet_FieldIndex enu = (RuleSet_FieldIndex)index;
                switch (enu)
                {
                    case RuleSet_FieldIndex.Count:
                        this.Count = ex;
                        break;
                    case RuleSet_FieldIndex.Names:
                        this.Names = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RuleName.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                RuleSet_FieldIndex enu = (RuleSet_FieldIndex)index;
                switch (enu)
                {
                    case RuleSet_FieldIndex.Count:
                        this.Count = (Exception?)obj;
                        break;
                    case RuleSet_FieldIndex.Names:
                        this.Names = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RuleName.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Count != null) return true;
                if (Names != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Count, "Count");
                if (Names is {} NamesItem)
                {
                    fg.AppendLine("Names =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(NamesItem.Overall);
                        if (NamesItem.Specific != null)
                        {
                            foreach (var subItem in NamesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Count = this.Count.Combine(rhs.Count);
                ret.Names = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RuleName.ErrorMask?>>?>(ExceptionExt.Combine(this.Names?.Overall, rhs.Names?.Overall), ExceptionExt.Combine(this.Names?.Specific, rhs.Names?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Count;
            public RuleName.TranslationMask? Names;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Count = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Count, null));
                ret.Add((Names == null ? DefaultOn : !Names.GetCrystal().CopyNothing, Names?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> ContainedFormLinks => RuleSetCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RuleSetSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => RuleSetBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((RuleSetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static RuleSet CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new RuleSet();
            ((RuleSetSetterCommon)((IRuleSetGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out RuleSet item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((RuleSetSetterCommon)((IRuleSetGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static RuleSet GetNew()
        {
            return new RuleSet();
        }

    }
    #endregion

    #region Interface
    public partial interface IRuleSet :
        IFormLinkContainer,
        ILoquiObjectSetter<IRuleSet>,
        IRuleSetGetter
    {
        new UInt32 Count { get; set; }
        new ExtendedList<RuleName> Names { get; }
    }

    public partial interface IRuleSetGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IRuleSetGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => RuleSet_Registration.Instance;
        UInt32 Count { get; }
        IReadOnlyList<IRuleNameGetter> Names { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class RuleSetMixIn
    {
        public static void Clear(this IRuleSet item)
        {
            ((RuleSetSetterCommon)((IRuleSetGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static RuleSet.Mask<bool> GetEqualsMask(
            this IRuleSetGetter item,
            IRuleSetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RuleSetCommon)((IRuleSetGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRuleSetGetter item,
            string? name = null,
            RuleSet.Mask<bool>? printMask = null)
        {
            return ((RuleSetCommon)((IRuleSetGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRuleSetGetter item,
            FileGeneration fg,
            string? name = null,
            RuleSet.Mask<bool>? printMask = null)
        {
            ((RuleSetCommon)((IRuleSetGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IRuleSetGetter item,
            IRuleSetGetter rhs,
            RuleSet.TranslationMask? equalsMask = null)
        {
            return ((RuleSetCommon)((IRuleSetGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IRuleSet lhs,
            IRuleSetGetter rhs)
        {
            ((RuleSetSetterTranslationCommon)((IRuleSetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IRuleSet lhs,
            IRuleSetGetter rhs,
            RuleSet.TranslationMask? copyMask = null)
        {
            ((RuleSetSetterTranslationCommon)((IRuleSetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IRuleSet lhs,
            IRuleSetGetter rhs,
            out RuleSet.ErrorMask errorMask,
            RuleSet.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RuleSetSetterTranslationCommon)((IRuleSetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = RuleSet.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRuleSet lhs,
            IRuleSetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RuleSetSetterTranslationCommon)((IRuleSetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static RuleSet DeepCopy(
            this IRuleSetGetter item,
            RuleSet.TranslationMask? copyMask = null)
        {
            return ((RuleSetSetterTranslationCommon)((IRuleSetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static RuleSet DeepCopy(
            this IRuleSetGetter item,
            out RuleSet.ErrorMask errorMask,
            RuleSet.TranslationMask? copyMask = null)
        {
            return ((RuleSetSetterTranslationCommon)((IRuleSetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static RuleSet DeepCopy(
            this IRuleSetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RuleSetSetterTranslationCommon)((IRuleSetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IRuleSet item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((RuleSetSetterCommon)((IRuleSetGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum RuleSet_FieldIndex
    {
        Count = 0,
        Names = 1,
    }
    #endregion

    #region Registration
    public partial class RuleSet_Registration : ILoquiRegistration
    {
        public static readonly RuleSet_Registration Instance = new RuleSet_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 226,
            version: 0);

        public const string GUID = "71e89a3f-bb5c-48c0-ae13-39b4be69fd07";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(RuleSet.Mask<>);

        public static readonly Type ErrorMaskType = typeof(RuleSet.ErrorMask);

        public static readonly Type ClassType = typeof(RuleSet);

        public static readonly Type GetterType = typeof(IRuleSetGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRuleSet);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.RuleSet";

        public const string Name = "RuleSet";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(RuleSetBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class RuleSetSetterCommon
    {
        public static readonly RuleSetSetterCommon Instance = new RuleSetSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRuleSet item)
        {
            ClearPartial();
            item.Count = default;
            item.Names.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IRuleSet obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Names.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IRuleSet item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: RuleSetBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: RuleSetBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class RuleSetCommon
    {
        public static readonly RuleSetCommon Instance = new RuleSetCommon();

        public RuleSet.Mask<bool> GetEqualsMask(
            IRuleSetGetter item,
            IRuleSetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RuleSet.Mask<bool>(false);
            ((RuleSetCommon)((IRuleSetGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRuleSetGetter item,
            IRuleSetGetter rhs,
            RuleSet.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Count = item.Count == rhs.Count;
            ret.Names = item.Names.CollectionEqualsHelper(
                rhs.Names,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string ToString(
            IRuleSetGetter item,
            string? name = null,
            RuleSet.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRuleSetGetter item,
            FileGeneration fg,
            string? name = null,
            RuleSet.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"RuleSet =>");
            }
            else
            {
                fg.AppendLine($"{name} (RuleSet) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRuleSetGetter item,
            FileGeneration fg,
            RuleSet.Mask<bool>? printMask = null)
        {
            if (printMask?.Count ?? true)
            {
                fg.AppendItem(item.Count, "Count");
            }
            if (printMask?.Names?.Overall ?? true)
            {
                fg.AppendLine("Names =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Names)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRuleSetGetter? lhs,
            IRuleSetGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)RuleSet_FieldIndex.Count) ?? true))
            {
                if (lhs.Count != rhs.Count) return false;
            }
            if ((crystal?.GetShouldTranslate((int)RuleSet_FieldIndex.Names) ?? true))
            {
                if (!lhs.Names.SequenceEqualNullable(rhs.Names)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IRuleSetGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Count);
            hash.Add(item.Names);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return RuleSet.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IRuleSetGetter obj)
        {
            foreach (var item in obj.Names.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class RuleSetSetterTranslationCommon
    {
        public static readonly RuleSetSetterTranslationCommon Instance = new RuleSetSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IRuleSet item,
            IRuleSetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)RuleSet_FieldIndex.Count) ?? true))
            {
                item.Count = rhs.Count;
            }
            if ((copyMask?.GetShouldTranslate((int)RuleSet_FieldIndex.Names) ?? true))
            {
                errorMask?.PushIndex((int)RuleSet_FieldIndex.Names);
                try
                {
                    item.Names.SetTo(
                        rhs.Names
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public RuleSet DeepCopy(
            IRuleSetGetter item,
            RuleSet.TranslationMask? copyMask = null)
        {
            RuleSet ret = (RuleSet)((RuleSetCommon)((IRuleSetGetter)item).CommonInstance()!).GetNew();
            ((RuleSetSetterTranslationCommon)((IRuleSetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public RuleSet DeepCopy(
            IRuleSetGetter item,
            out RuleSet.ErrorMask errorMask,
            RuleSet.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RuleSet ret = (RuleSet)((RuleSetCommon)((IRuleSetGetter)item).CommonInstance()!).GetNew();
            ((RuleSetSetterTranslationCommon)((IRuleSetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = RuleSet.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public RuleSet DeepCopy(
            IRuleSetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            RuleSet ret = (RuleSet)((RuleSetCommon)((IRuleSetGetter)item).CommonInstance()!).GetNew();
            ((RuleSetSetterTranslationCommon)((IRuleSetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class RuleSet
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RuleSet_Registration.Instance;
        public static RuleSet_Registration StaticRegistration => RuleSet_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => RuleSetCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return RuleSetSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => RuleSetSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRuleSetGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IRuleSetGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IRuleSetGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class RuleSetBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static RuleSetBinaryWriteTranslation Instance = new RuleSetBinaryWriteTranslation();

        public static void WriteEmbedded(
            IRuleSetGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Count);
        }

        public static void WriteRecordTypes(
            IRuleSetGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IRuleNameGetter>.Instance.Write(
                writer: writer,
                items: item.Names,
                transl: (MutagenWriter subWriter, IRuleNameGetter subItem, TypedWriteParams? conv) =>
                {
                    var Item = subItem;
                    ((RuleNameBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IRuleSetGetter item,
            TypedWriteParams? translationParams = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IRuleSetGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class RuleSetBinaryCreateTranslation
    {
        public readonly static RuleSetBinaryCreateTranslation Instance = new RuleSetBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IRuleSet item,
            MutagenFrame frame)
        {
            item.Count = frame.ReadUInt32();
        }

        public static ParseResult FillBinaryRecordTypes(
            IRuleSet item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.WNAM:
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.XNAM:
                {
                    item.Names.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<RuleName>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: RuleName_Registration.TriggeringRecordTypes,
                            translationParams: translationParams,
                            transl: RuleName.TryCreateFromBinary));
                    return (int)RuleSet_FieldIndex.Names;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class RuleSetBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRuleSetGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((RuleSetBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class RuleSetBinaryOverlay :
        PluginBinaryOverlay,
        IRuleSetGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RuleSet_Registration.Instance;
        public static RuleSet_Registration StaticRegistration => RuleSet_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => RuleSetCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => RuleSetSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRuleSetGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IRuleSetGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IRuleSetGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public IEnumerable<IFormLinkGetter> ContainedFormLinks => RuleSetCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => RuleSetBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((RuleSetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public UInt32 Count => BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(0x0, 0x4));
        public IReadOnlyList<IRuleNameGetter> Names { get; private set; } = ListExt.Empty<RuleNameBinaryOverlay>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected RuleSetBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static RuleSetBinaryOverlay RuleSetFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new RuleSetBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static RuleSetBinaryOverlay RuleSetFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return RuleSetFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.WNAM:
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.XNAM:
                {
                    this.Names = this.ParseRepeatedTypelessSubrecord<RuleNameBinaryOverlay>(
                        stream: stream,
                        parseParams: parseParams,
                        trigger: RuleName_Registration.TriggeringRecordTypes,
                        factory: RuleNameBinaryOverlay.RuleNameFactory);
                    return (int)RuleSet_FieldIndex.Names;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RuleSetMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IRuleSetGetter rhs) return false;
            return ((RuleSetCommon)((IRuleSetGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IRuleSetGetter? obj)
        {
            return ((RuleSetCommon)((IRuleSetGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((RuleSetCommon)((IRuleSetGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

