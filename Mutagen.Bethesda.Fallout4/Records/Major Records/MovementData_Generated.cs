/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class MovementData :
        IEquatable<IMovementDataGetter>,
        ILoquiObjectSetter<MovementData>,
        IMovementData
    {
        #region Ctor
        public MovementData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Left
        public MovementDirectionData Left { get; set; } = new MovementDirectionData();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMovementDirectionDataGetter IMovementDataGetter.Left => Left;
        #endregion
        #region Right
        public MovementDirectionData Right { get; set; } = new MovementDirectionData();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMovementDirectionDataGetter IMovementDataGetter.Right => Right;
        #endregion
        #region Forward
        public MovementDirectionData Forward { get; set; } = new MovementDirectionData();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMovementDirectionDataGetter IMovementDataGetter.Forward => Forward;
        #endregion
        #region Back
        public MovementDirectionData Back { get; set; } = new MovementDirectionData();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMovementDirectionDataGetter IMovementDataGetter.Back => Back;
        #endregion
        #region Pitch
        public MovementRotationData Pitch { get; set; } = new MovementRotationData();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMovementRotationDataGetter IMovementDataGetter.Pitch => Pitch;
        #endregion
        #region Roll
        public MovementRotationData Roll { get; set; } = new MovementRotationData();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMovementRotationDataGetter IMovementDataGetter.Roll => Roll;
        #endregion
        #region Yaw
        public MovementRotationData Yaw { get; set; } = new MovementRotationData();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMovementRotationDataGetter IMovementDataGetter.Yaw => Yaw;
        #endregion
        #region Unused
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unused = new byte[12];
        public MemorySlice<Byte> Unused
        {
            get => _Unused;
            set => this._Unused = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IMovementDataGetter.Unused => this.Unused;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            MovementDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IMovementDataGetter rhs) return false;
            return ((MovementDataCommon)((IMovementDataGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IMovementDataGetter? obj)
        {
            return ((MovementDataCommon)((IMovementDataGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((MovementDataCommon)((IMovementDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Left = new MaskItem<TItem, MovementDirectionData.Mask<TItem>?>(initialValue, new MovementDirectionData.Mask<TItem>(initialValue));
                this.Right = new MaskItem<TItem, MovementDirectionData.Mask<TItem>?>(initialValue, new MovementDirectionData.Mask<TItem>(initialValue));
                this.Forward = new MaskItem<TItem, MovementDirectionData.Mask<TItem>?>(initialValue, new MovementDirectionData.Mask<TItem>(initialValue));
                this.Back = new MaskItem<TItem, MovementDirectionData.Mask<TItem>?>(initialValue, new MovementDirectionData.Mask<TItem>(initialValue));
                this.Pitch = new MaskItem<TItem, MovementRotationData.Mask<TItem>?>(initialValue, new MovementRotationData.Mask<TItem>(initialValue));
                this.Roll = new MaskItem<TItem, MovementRotationData.Mask<TItem>?>(initialValue, new MovementRotationData.Mask<TItem>(initialValue));
                this.Yaw = new MaskItem<TItem, MovementRotationData.Mask<TItem>?>(initialValue, new MovementRotationData.Mask<TItem>(initialValue));
                this.Unused = initialValue;
            }

            public Mask(
                TItem Left,
                TItem Right,
                TItem Forward,
                TItem Back,
                TItem Pitch,
                TItem Roll,
                TItem Yaw,
                TItem Unused)
            {
                this.Left = new MaskItem<TItem, MovementDirectionData.Mask<TItem>?>(Left, new MovementDirectionData.Mask<TItem>(Left));
                this.Right = new MaskItem<TItem, MovementDirectionData.Mask<TItem>?>(Right, new MovementDirectionData.Mask<TItem>(Right));
                this.Forward = new MaskItem<TItem, MovementDirectionData.Mask<TItem>?>(Forward, new MovementDirectionData.Mask<TItem>(Forward));
                this.Back = new MaskItem<TItem, MovementDirectionData.Mask<TItem>?>(Back, new MovementDirectionData.Mask<TItem>(Back));
                this.Pitch = new MaskItem<TItem, MovementRotationData.Mask<TItem>?>(Pitch, new MovementRotationData.Mask<TItem>(Pitch));
                this.Roll = new MaskItem<TItem, MovementRotationData.Mask<TItem>?>(Roll, new MovementRotationData.Mask<TItem>(Roll));
                this.Yaw = new MaskItem<TItem, MovementRotationData.Mask<TItem>?>(Yaw, new MovementRotationData.Mask<TItem>(Yaw));
                this.Unused = Unused;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, MovementDirectionData.Mask<TItem>?>? Left { get; set; }
            public MaskItem<TItem, MovementDirectionData.Mask<TItem>?>? Right { get; set; }
            public MaskItem<TItem, MovementDirectionData.Mask<TItem>?>? Forward { get; set; }
            public MaskItem<TItem, MovementDirectionData.Mask<TItem>?>? Back { get; set; }
            public MaskItem<TItem, MovementRotationData.Mask<TItem>?>? Pitch { get; set; }
            public MaskItem<TItem, MovementRotationData.Mask<TItem>?>? Roll { get; set; }
            public MaskItem<TItem, MovementRotationData.Mask<TItem>?>? Yaw { get; set; }
            public TItem Unused;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Left, rhs.Left)) return false;
                if (!object.Equals(this.Right, rhs.Right)) return false;
                if (!object.Equals(this.Forward, rhs.Forward)) return false;
                if (!object.Equals(this.Back, rhs.Back)) return false;
                if (!object.Equals(this.Pitch, rhs.Pitch)) return false;
                if (!object.Equals(this.Roll, rhs.Roll)) return false;
                if (!object.Equals(this.Yaw, rhs.Yaw)) return false;
                if (!object.Equals(this.Unused, rhs.Unused)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Left);
                hash.Add(this.Right);
                hash.Add(this.Forward);
                hash.Add(this.Back);
                hash.Add(this.Pitch);
                hash.Add(this.Roll);
                hash.Add(this.Yaw);
                hash.Add(this.Unused);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (Left != null)
                {
                    if (!eval(this.Left.Overall)) return false;
                    if (this.Left.Specific != null && !this.Left.Specific.All(eval)) return false;
                }
                if (Right != null)
                {
                    if (!eval(this.Right.Overall)) return false;
                    if (this.Right.Specific != null && !this.Right.Specific.All(eval)) return false;
                }
                if (Forward != null)
                {
                    if (!eval(this.Forward.Overall)) return false;
                    if (this.Forward.Specific != null && !this.Forward.Specific.All(eval)) return false;
                }
                if (Back != null)
                {
                    if (!eval(this.Back.Overall)) return false;
                    if (this.Back.Specific != null && !this.Back.Specific.All(eval)) return false;
                }
                if (Pitch != null)
                {
                    if (!eval(this.Pitch.Overall)) return false;
                    if (this.Pitch.Specific != null && !this.Pitch.Specific.All(eval)) return false;
                }
                if (Roll != null)
                {
                    if (!eval(this.Roll.Overall)) return false;
                    if (this.Roll.Specific != null && !this.Roll.Specific.All(eval)) return false;
                }
                if (Yaw != null)
                {
                    if (!eval(this.Yaw.Overall)) return false;
                    if (this.Yaw.Specific != null && !this.Yaw.Specific.All(eval)) return false;
                }
                if (!eval(this.Unused)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (Left != null)
                {
                    if (eval(this.Left.Overall)) return true;
                    if (this.Left.Specific != null && this.Left.Specific.Any(eval)) return true;
                }
                if (Right != null)
                {
                    if (eval(this.Right.Overall)) return true;
                    if (this.Right.Specific != null && this.Right.Specific.Any(eval)) return true;
                }
                if (Forward != null)
                {
                    if (eval(this.Forward.Overall)) return true;
                    if (this.Forward.Specific != null && this.Forward.Specific.Any(eval)) return true;
                }
                if (Back != null)
                {
                    if (eval(this.Back.Overall)) return true;
                    if (this.Back.Specific != null && this.Back.Specific.Any(eval)) return true;
                }
                if (Pitch != null)
                {
                    if (eval(this.Pitch.Overall)) return true;
                    if (this.Pitch.Specific != null && this.Pitch.Specific.Any(eval)) return true;
                }
                if (Roll != null)
                {
                    if (eval(this.Roll.Overall)) return true;
                    if (this.Roll.Specific != null && this.Roll.Specific.Any(eval)) return true;
                }
                if (Yaw != null)
                {
                    if (eval(this.Yaw.Overall)) return true;
                    if (this.Yaw.Specific != null && this.Yaw.Specific.Any(eval)) return true;
                }
                if (eval(this.Unused)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new MovementData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Left = this.Left == null ? null : new MaskItem<R, MovementDirectionData.Mask<R>?>(eval(this.Left.Overall), this.Left.Specific?.Translate(eval));
                obj.Right = this.Right == null ? null : new MaskItem<R, MovementDirectionData.Mask<R>?>(eval(this.Right.Overall), this.Right.Specific?.Translate(eval));
                obj.Forward = this.Forward == null ? null : new MaskItem<R, MovementDirectionData.Mask<R>?>(eval(this.Forward.Overall), this.Forward.Specific?.Translate(eval));
                obj.Back = this.Back == null ? null : new MaskItem<R, MovementDirectionData.Mask<R>?>(eval(this.Back.Overall), this.Back.Specific?.Translate(eval));
                obj.Pitch = this.Pitch == null ? null : new MaskItem<R, MovementRotationData.Mask<R>?>(eval(this.Pitch.Overall), this.Pitch.Specific?.Translate(eval));
                obj.Roll = this.Roll == null ? null : new MaskItem<R, MovementRotationData.Mask<R>?>(eval(this.Roll.Overall), this.Roll.Specific?.Translate(eval));
                obj.Yaw = this.Yaw == null ? null : new MaskItem<R, MovementRotationData.Mask<R>?>(eval(this.Yaw.Overall), this.Yaw.Specific?.Translate(eval));
                obj.Unused = eval(this.Unused);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(MovementData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, MovementData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(MovementData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Left?.Overall ?? true)
                    {
                        Left?.ToString(fg);
                    }
                    if (printMask?.Right?.Overall ?? true)
                    {
                        Right?.ToString(fg);
                    }
                    if (printMask?.Forward?.Overall ?? true)
                    {
                        Forward?.ToString(fg);
                    }
                    if (printMask?.Back?.Overall ?? true)
                    {
                        Back?.ToString(fg);
                    }
                    if (printMask?.Pitch?.Overall ?? true)
                    {
                        Pitch?.ToString(fg);
                    }
                    if (printMask?.Roll?.Overall ?? true)
                    {
                        Roll?.ToString(fg);
                    }
                    if (printMask?.Yaw?.Overall ?? true)
                    {
                        Yaw?.ToString(fg);
                    }
                    if (printMask?.Unused ?? true)
                    {
                        fg.AppendItem(Unused, "Unused");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, MovementDirectionData.ErrorMask?>? Left;
            public MaskItem<Exception?, MovementDirectionData.ErrorMask?>? Right;
            public MaskItem<Exception?, MovementDirectionData.ErrorMask?>? Forward;
            public MaskItem<Exception?, MovementDirectionData.ErrorMask?>? Back;
            public MaskItem<Exception?, MovementRotationData.ErrorMask?>? Pitch;
            public MaskItem<Exception?, MovementRotationData.ErrorMask?>? Roll;
            public MaskItem<Exception?, MovementRotationData.ErrorMask?>? Yaw;
            public Exception? Unused;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                MovementData_FieldIndex enu = (MovementData_FieldIndex)index;
                switch (enu)
                {
                    case MovementData_FieldIndex.Left:
                        return Left;
                    case MovementData_FieldIndex.Right:
                        return Right;
                    case MovementData_FieldIndex.Forward:
                        return Forward;
                    case MovementData_FieldIndex.Back:
                        return Back;
                    case MovementData_FieldIndex.Pitch:
                        return Pitch;
                    case MovementData_FieldIndex.Roll:
                        return Roll;
                    case MovementData_FieldIndex.Yaw:
                        return Yaw;
                    case MovementData_FieldIndex.Unused:
                        return Unused;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                MovementData_FieldIndex enu = (MovementData_FieldIndex)index;
                switch (enu)
                {
                    case MovementData_FieldIndex.Left:
                        this.Left = new MaskItem<Exception?, MovementDirectionData.ErrorMask?>(ex, null);
                        break;
                    case MovementData_FieldIndex.Right:
                        this.Right = new MaskItem<Exception?, MovementDirectionData.ErrorMask?>(ex, null);
                        break;
                    case MovementData_FieldIndex.Forward:
                        this.Forward = new MaskItem<Exception?, MovementDirectionData.ErrorMask?>(ex, null);
                        break;
                    case MovementData_FieldIndex.Back:
                        this.Back = new MaskItem<Exception?, MovementDirectionData.ErrorMask?>(ex, null);
                        break;
                    case MovementData_FieldIndex.Pitch:
                        this.Pitch = new MaskItem<Exception?, MovementRotationData.ErrorMask?>(ex, null);
                        break;
                    case MovementData_FieldIndex.Roll:
                        this.Roll = new MaskItem<Exception?, MovementRotationData.ErrorMask?>(ex, null);
                        break;
                    case MovementData_FieldIndex.Yaw:
                        this.Yaw = new MaskItem<Exception?, MovementRotationData.ErrorMask?>(ex, null);
                        break;
                    case MovementData_FieldIndex.Unused:
                        this.Unused = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                MovementData_FieldIndex enu = (MovementData_FieldIndex)index;
                switch (enu)
                {
                    case MovementData_FieldIndex.Left:
                        this.Left = (MaskItem<Exception?, MovementDirectionData.ErrorMask?>?)obj;
                        break;
                    case MovementData_FieldIndex.Right:
                        this.Right = (MaskItem<Exception?, MovementDirectionData.ErrorMask?>?)obj;
                        break;
                    case MovementData_FieldIndex.Forward:
                        this.Forward = (MaskItem<Exception?, MovementDirectionData.ErrorMask?>?)obj;
                        break;
                    case MovementData_FieldIndex.Back:
                        this.Back = (MaskItem<Exception?, MovementDirectionData.ErrorMask?>?)obj;
                        break;
                    case MovementData_FieldIndex.Pitch:
                        this.Pitch = (MaskItem<Exception?, MovementRotationData.ErrorMask?>?)obj;
                        break;
                    case MovementData_FieldIndex.Roll:
                        this.Roll = (MaskItem<Exception?, MovementRotationData.ErrorMask?>?)obj;
                        break;
                    case MovementData_FieldIndex.Yaw:
                        this.Yaw = (MaskItem<Exception?, MovementRotationData.ErrorMask?>?)obj;
                        break;
                    case MovementData_FieldIndex.Unused:
                        this.Unused = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Left != null) return true;
                if (Right != null) return true;
                if (Forward != null) return true;
                if (Back != null) return true;
                if (Pitch != null) return true;
                if (Roll != null) return true;
                if (Yaw != null) return true;
                if (Unused != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                Left?.ToString(fg);
                Right?.ToString(fg);
                Forward?.ToString(fg);
                Back?.ToString(fg);
                Pitch?.ToString(fg);
                Roll?.ToString(fg);
                Yaw?.ToString(fg);
                fg.AppendItem(Unused, "Unused");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Left = this.Left.Combine(rhs.Left, (l, r) => l.Combine(r));
                ret.Right = this.Right.Combine(rhs.Right, (l, r) => l.Combine(r));
                ret.Forward = this.Forward.Combine(rhs.Forward, (l, r) => l.Combine(r));
                ret.Back = this.Back.Combine(rhs.Back, (l, r) => l.Combine(r));
                ret.Pitch = this.Pitch.Combine(rhs.Pitch, (l, r) => l.Combine(r));
                ret.Roll = this.Roll.Combine(rhs.Roll, (l, r) => l.Combine(r));
                ret.Yaw = this.Yaw.Combine(rhs.Yaw, (l, r) => l.Combine(r));
                ret.Unused = this.Unused.Combine(rhs.Unused);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public MovementDirectionData.TranslationMask? Left;
            public MovementDirectionData.TranslationMask? Right;
            public MovementDirectionData.TranslationMask? Forward;
            public MovementDirectionData.TranslationMask? Back;
            public MovementRotationData.TranslationMask? Pitch;
            public MovementRotationData.TranslationMask? Roll;
            public MovementRotationData.TranslationMask? Yaw;
            public bool Unused;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Unused = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Left != null ? Left.OnOverall : DefaultOn, Left?.GetCrystal()));
                ret.Add((Right != null ? Right.OnOverall : DefaultOn, Right?.GetCrystal()));
                ret.Add((Forward != null ? Forward.OnOverall : DefaultOn, Forward?.GetCrystal()));
                ret.Add((Back != null ? Back.OnOverall : DefaultOn, Back?.GetCrystal()));
                ret.Add((Pitch != null ? Pitch.OnOverall : DefaultOn, Pitch?.GetCrystal()));
                ret.Add((Roll != null ? Roll.OnOverall : DefaultOn, Roll?.GetCrystal()));
                ret.Add((Yaw != null ? Yaw.OnOverall : DefaultOn, Yaw?.GetCrystal()));
                ret.Add((Unused, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => MovementDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((MovementDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static MovementData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new MovementData();
            ((MovementDataSetterCommon)((IMovementDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out MovementData item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((MovementDataSetterCommon)((IMovementDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static MovementData GetNew()
        {
            return new MovementData();
        }

    }
    #endregion

    #region Interface
    public partial interface IMovementData :
        ILoquiObjectSetter<IMovementData>,
        IMovementDataGetter
    {
        new MovementDirectionData Left { get; set; }
        new MovementDirectionData Right { get; set; }
        new MovementDirectionData Forward { get; set; }
        new MovementDirectionData Back { get; set; }
        new MovementRotationData Pitch { get; set; }
        new MovementRotationData Roll { get; set; }
        new MovementRotationData Yaw { get; set; }
        new MemorySlice<Byte> Unused { get; set; }
    }

    public partial interface IMovementDataGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IMovementDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => MovementData_Registration.Instance;
        IMovementDirectionDataGetter Left { get; }
        IMovementDirectionDataGetter Right { get; }
        IMovementDirectionDataGetter Forward { get; }
        IMovementDirectionDataGetter Back { get; }
        IMovementRotationDataGetter Pitch { get; }
        IMovementRotationDataGetter Roll { get; }
        IMovementRotationDataGetter Yaw { get; }
        ReadOnlyMemorySlice<Byte> Unused { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class MovementDataMixIn
    {
        public static void Clear(this IMovementData item)
        {
            ((MovementDataSetterCommon)((IMovementDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static MovementData.Mask<bool> GetEqualsMask(
            this IMovementDataGetter item,
            IMovementDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MovementDataCommon)((IMovementDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IMovementDataGetter item,
            string? name = null,
            MovementData.Mask<bool>? printMask = null)
        {
            return ((MovementDataCommon)((IMovementDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IMovementDataGetter item,
            FileGeneration fg,
            string? name = null,
            MovementData.Mask<bool>? printMask = null)
        {
            ((MovementDataCommon)((IMovementDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IMovementDataGetter item,
            IMovementDataGetter rhs,
            MovementData.TranslationMask? equalsMask = null)
        {
            return ((MovementDataCommon)((IMovementDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IMovementData lhs,
            IMovementDataGetter rhs)
        {
            ((MovementDataSetterTranslationCommon)((IMovementDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IMovementData lhs,
            IMovementDataGetter rhs,
            MovementData.TranslationMask? copyMask = null)
        {
            ((MovementDataSetterTranslationCommon)((IMovementDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IMovementData lhs,
            IMovementDataGetter rhs,
            out MovementData.ErrorMask errorMask,
            MovementData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((MovementDataSetterTranslationCommon)((IMovementDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = MovementData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IMovementData lhs,
            IMovementDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((MovementDataSetterTranslationCommon)((IMovementDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static MovementData DeepCopy(
            this IMovementDataGetter item,
            MovementData.TranslationMask? copyMask = null)
        {
            return ((MovementDataSetterTranslationCommon)((IMovementDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static MovementData DeepCopy(
            this IMovementDataGetter item,
            out MovementData.ErrorMask errorMask,
            MovementData.TranslationMask? copyMask = null)
        {
            return ((MovementDataSetterTranslationCommon)((IMovementDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static MovementData DeepCopy(
            this IMovementDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((MovementDataSetterTranslationCommon)((IMovementDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IMovementData item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((MovementDataSetterCommon)((IMovementDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum MovementData_FieldIndex
    {
        Left = 0,
        Right = 1,
        Forward = 2,
        Back = 3,
        Pitch = 4,
        Roll = 5,
        Yaw = 6,
        Unused = 7,
    }
    #endregion

    #region Registration
    public partial class MovementData_Registration : ILoquiRegistration
    {
        public static readonly MovementData_Registration Instance = new MovementData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 213,
            version: 0);

        public const string GUID = "4700c9f5-07fe-4d1c-82bd-b247e7b89cee";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(MovementData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(MovementData.ErrorMask);

        public static readonly Type ClassType = typeof(MovementData);

        public static readonly Type GetterType = typeof(IMovementDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMovementData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.MovementData";

        public const string Name = "MovementData";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(MovementDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class MovementDataSetterCommon
    {
        public static readonly MovementDataSetterCommon Instance = new MovementDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IMovementData item)
        {
            ClearPartial();
            item.Left.Clear();
            item.Right.Clear();
            item.Forward.Clear();
            item.Back.Clear();
            item.Pitch.Clear();
            item.Roll.Clear();
            item.Yaw.Clear();
            item.Unused = new byte[12];
        }
        
        #region Mutagen
        public void RemapLinks(IMovementData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IMovementData item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: MovementDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class MovementDataCommon
    {
        public static readonly MovementDataCommon Instance = new MovementDataCommon();

        public MovementData.Mask<bool> GetEqualsMask(
            IMovementDataGetter item,
            IMovementDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MovementData.Mask<bool>(false);
            ((MovementDataCommon)((IMovementDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMovementDataGetter item,
            IMovementDataGetter rhs,
            MovementData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Left = MaskItemExt.Factory(item.Left.GetEqualsMask(rhs.Left, include), include);
            ret.Right = MaskItemExt.Factory(item.Right.GetEqualsMask(rhs.Right, include), include);
            ret.Forward = MaskItemExt.Factory(item.Forward.GetEqualsMask(rhs.Forward, include), include);
            ret.Back = MaskItemExt.Factory(item.Back.GetEqualsMask(rhs.Back, include), include);
            ret.Pitch = MaskItemExt.Factory(item.Pitch.GetEqualsMask(rhs.Pitch, include), include);
            ret.Roll = MaskItemExt.Factory(item.Roll.GetEqualsMask(rhs.Roll, include), include);
            ret.Yaw = MaskItemExt.Factory(item.Yaw.GetEqualsMask(rhs.Yaw, include), include);
            ret.Unused = MemoryExtensions.SequenceEqual(item.Unused.Span, rhs.Unused.Span);
        }
        
        public string ToString(
            IMovementDataGetter item,
            string? name = null,
            MovementData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IMovementDataGetter item,
            FileGeneration fg,
            string? name = null,
            MovementData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"MovementData =>");
            }
            else
            {
                fg.AppendLine($"{name} (MovementData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IMovementDataGetter item,
            FileGeneration fg,
            MovementData.Mask<bool>? printMask = null)
        {
            if (printMask?.Left?.Overall ?? true)
            {
                item.Left?.ToString(fg, "Left");
            }
            if (printMask?.Right?.Overall ?? true)
            {
                item.Right?.ToString(fg, "Right");
            }
            if (printMask?.Forward?.Overall ?? true)
            {
                item.Forward?.ToString(fg, "Forward");
            }
            if (printMask?.Back?.Overall ?? true)
            {
                item.Back?.ToString(fg, "Back");
            }
            if (printMask?.Pitch?.Overall ?? true)
            {
                item.Pitch?.ToString(fg, "Pitch");
            }
            if (printMask?.Roll?.Overall ?? true)
            {
                item.Roll?.ToString(fg, "Roll");
            }
            if (printMask?.Yaw?.Overall ?? true)
            {
                item.Yaw?.ToString(fg, "Yaw");
            }
            if (printMask?.Unused ?? true)
            {
                fg.AppendLine($"Unused => {SpanExt.ToHexString(item.Unused)}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMovementDataGetter? lhs,
            IMovementDataGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)MovementData_FieldIndex.Left) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Left, rhs.Left, out var lhsLeft, out var rhsLeft, out var isLeftEqual))
                {
                    if (!((MovementDirectionDataCommon)((IMovementDirectionDataGetter)lhsLeft).CommonInstance()!).Equals(lhsLeft, rhsLeft, crystal?.GetSubCrystal((int)MovementData_FieldIndex.Left))) return false;
                }
                else if (!isLeftEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)MovementData_FieldIndex.Right) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Right, rhs.Right, out var lhsRight, out var rhsRight, out var isRightEqual))
                {
                    if (!((MovementDirectionDataCommon)((IMovementDirectionDataGetter)lhsRight).CommonInstance()!).Equals(lhsRight, rhsRight, crystal?.GetSubCrystal((int)MovementData_FieldIndex.Right))) return false;
                }
                else if (!isRightEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)MovementData_FieldIndex.Forward) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Forward, rhs.Forward, out var lhsForward, out var rhsForward, out var isForwardEqual))
                {
                    if (!((MovementDirectionDataCommon)((IMovementDirectionDataGetter)lhsForward).CommonInstance()!).Equals(lhsForward, rhsForward, crystal?.GetSubCrystal((int)MovementData_FieldIndex.Forward))) return false;
                }
                else if (!isForwardEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)MovementData_FieldIndex.Back) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Back, rhs.Back, out var lhsBack, out var rhsBack, out var isBackEqual))
                {
                    if (!((MovementDirectionDataCommon)((IMovementDirectionDataGetter)lhsBack).CommonInstance()!).Equals(lhsBack, rhsBack, crystal?.GetSubCrystal((int)MovementData_FieldIndex.Back))) return false;
                }
                else if (!isBackEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)MovementData_FieldIndex.Pitch) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Pitch, rhs.Pitch, out var lhsPitch, out var rhsPitch, out var isPitchEqual))
                {
                    if (!((MovementRotationDataCommon)((IMovementRotationDataGetter)lhsPitch).CommonInstance()!).Equals(lhsPitch, rhsPitch, crystal?.GetSubCrystal((int)MovementData_FieldIndex.Pitch))) return false;
                }
                else if (!isPitchEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)MovementData_FieldIndex.Roll) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Roll, rhs.Roll, out var lhsRoll, out var rhsRoll, out var isRollEqual))
                {
                    if (!((MovementRotationDataCommon)((IMovementRotationDataGetter)lhsRoll).CommonInstance()!).Equals(lhsRoll, rhsRoll, crystal?.GetSubCrystal((int)MovementData_FieldIndex.Roll))) return false;
                }
                else if (!isRollEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)MovementData_FieldIndex.Yaw) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Yaw, rhs.Yaw, out var lhsYaw, out var rhsYaw, out var isYawEqual))
                {
                    if (!((MovementRotationDataCommon)((IMovementRotationDataGetter)lhsYaw).CommonInstance()!).Equals(lhsYaw, rhsYaw, crystal?.GetSubCrystal((int)MovementData_FieldIndex.Yaw))) return false;
                }
                else if (!isYawEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)MovementData_FieldIndex.Unused) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.Unused.Span, rhs.Unused.Span)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IMovementDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Left);
            hash.Add(item.Right);
            hash.Add(item.Forward);
            hash.Add(item.Back);
            hash.Add(item.Pitch);
            hash.Add(item.Roll);
            hash.Add(item.Yaw);
            hash.Add(item.Unused);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return MovementData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IMovementDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class MovementDataSetterTranslationCommon
    {
        public static readonly MovementDataSetterTranslationCommon Instance = new MovementDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IMovementData item,
            IMovementDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)MovementData_FieldIndex.Left) ?? true))
            {
                errorMask?.PushIndex((int)MovementData_FieldIndex.Left);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)MovementData_FieldIndex.Left) ?? true))
                    {
                        item.Left = rhs.Left.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)MovementData_FieldIndex.Left),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MovementData_FieldIndex.Right) ?? true))
            {
                errorMask?.PushIndex((int)MovementData_FieldIndex.Right);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)MovementData_FieldIndex.Right) ?? true))
                    {
                        item.Right = rhs.Right.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)MovementData_FieldIndex.Right),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MovementData_FieldIndex.Forward) ?? true))
            {
                errorMask?.PushIndex((int)MovementData_FieldIndex.Forward);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)MovementData_FieldIndex.Forward) ?? true))
                    {
                        item.Forward = rhs.Forward.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)MovementData_FieldIndex.Forward),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MovementData_FieldIndex.Back) ?? true))
            {
                errorMask?.PushIndex((int)MovementData_FieldIndex.Back);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)MovementData_FieldIndex.Back) ?? true))
                    {
                        item.Back = rhs.Back.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)MovementData_FieldIndex.Back),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MovementData_FieldIndex.Pitch) ?? true))
            {
                errorMask?.PushIndex((int)MovementData_FieldIndex.Pitch);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)MovementData_FieldIndex.Pitch) ?? true))
                    {
                        item.Pitch = rhs.Pitch.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)MovementData_FieldIndex.Pitch),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MovementData_FieldIndex.Roll) ?? true))
            {
                errorMask?.PushIndex((int)MovementData_FieldIndex.Roll);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)MovementData_FieldIndex.Roll) ?? true))
                    {
                        item.Roll = rhs.Roll.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)MovementData_FieldIndex.Roll),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MovementData_FieldIndex.Yaw) ?? true))
            {
                errorMask?.PushIndex((int)MovementData_FieldIndex.Yaw);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)MovementData_FieldIndex.Yaw) ?? true))
                    {
                        item.Yaw = rhs.Yaw.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)MovementData_FieldIndex.Yaw),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MovementData_FieldIndex.Unused) ?? true))
            {
                item.Unused = rhs.Unused.ToArray();
            }
        }
        
        #endregion
        
        public MovementData DeepCopy(
            IMovementDataGetter item,
            MovementData.TranslationMask? copyMask = null)
        {
            MovementData ret = (MovementData)((MovementDataCommon)((IMovementDataGetter)item).CommonInstance()!).GetNew();
            ((MovementDataSetterTranslationCommon)((IMovementDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public MovementData DeepCopy(
            IMovementDataGetter item,
            out MovementData.ErrorMask errorMask,
            MovementData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            MovementData ret = (MovementData)((MovementDataCommon)((IMovementDataGetter)item).CommonInstance()!).GetNew();
            ((MovementDataSetterTranslationCommon)((IMovementDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = MovementData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public MovementData DeepCopy(
            IMovementDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            MovementData ret = (MovementData)((MovementDataCommon)((IMovementDataGetter)item).CommonInstance()!).GetNew();
            ((MovementDataSetterTranslationCommon)((IMovementDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class MovementData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MovementData_Registration.Instance;
        public static MovementData_Registration StaticRegistration => MovementData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => MovementDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return MovementDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => MovementDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IMovementDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IMovementDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IMovementDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class MovementDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static MovementDataBinaryWriteTranslation Instance = new MovementDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            IMovementDataGetter item,
            MutagenWriter writer)
        {
            var LeftItem = item.Left;
            ((MovementDirectionDataBinaryWriteTranslation)((IBinaryItem)LeftItem).BinaryWriteTranslator).Write(
                item: LeftItem,
                writer: writer);
            var RightItem = item.Right;
            ((MovementDirectionDataBinaryWriteTranslation)((IBinaryItem)RightItem).BinaryWriteTranslator).Write(
                item: RightItem,
                writer: writer);
            var ForwardItem = item.Forward;
            ((MovementDirectionDataBinaryWriteTranslation)((IBinaryItem)ForwardItem).BinaryWriteTranslator).Write(
                item: ForwardItem,
                writer: writer);
            var BackItem = item.Back;
            ((MovementDirectionDataBinaryWriteTranslation)((IBinaryItem)BackItem).BinaryWriteTranslator).Write(
                item: BackItem,
                writer: writer);
            var PitchItem = item.Pitch;
            ((MovementRotationDataBinaryWriteTranslation)((IBinaryItem)PitchItem).BinaryWriteTranslator).Write(
                item: PitchItem,
                writer: writer);
            var RollItem = item.Roll;
            ((MovementRotationDataBinaryWriteTranslation)((IBinaryItem)RollItem).BinaryWriteTranslator).Write(
                item: RollItem,
                writer: writer);
            var YawItem = item.Yaw;
            ((MovementRotationDataBinaryWriteTranslation)((IBinaryItem)YawItem).BinaryWriteTranslator).Write(
                item: YawItem,
                writer: writer);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unused);
        }

        public void Write(
            MutagenWriter writer,
            IMovementDataGetter item,
            TypedWriteParams? translationParams = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IMovementDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class MovementDataBinaryCreateTranslation
    {
        public readonly static MovementDataBinaryCreateTranslation Instance = new MovementDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IMovementData item,
            MutagenFrame frame)
        {
            item.Left = Mutagen.Bethesda.Fallout4.MovementDirectionData.CreateFromBinary(frame: frame);
            item.Right = Mutagen.Bethesda.Fallout4.MovementDirectionData.CreateFromBinary(frame: frame);
            item.Forward = Mutagen.Bethesda.Fallout4.MovementDirectionData.CreateFromBinary(frame: frame);
            item.Back = Mutagen.Bethesda.Fallout4.MovementDirectionData.CreateFromBinary(frame: frame);
            item.Pitch = Mutagen.Bethesda.Fallout4.MovementRotationData.CreateFromBinary(frame: frame);
            item.Roll = Mutagen.Bethesda.Fallout4.MovementRotationData.CreateFromBinary(frame: frame);
            item.Yaw = Mutagen.Bethesda.Fallout4.MovementRotationData.CreateFromBinary(frame: frame);
            item.Unused = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(12));
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class MovementDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IMovementDataGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((MovementDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class MovementDataBinaryOverlay :
        PluginBinaryOverlay,
        IMovementDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MovementData_Registration.Instance;
        public static MovementData_Registration StaticRegistration => MovementData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => MovementDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => MovementDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IMovementDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IMovementDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IMovementDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => MovementDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((MovementDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public IMovementDirectionDataGetter Left => MovementDirectionDataBinaryOverlay.MovementDirectionDataFactory(new OverlayStream(_data.Slice(0x0), _package), _package, default(TypedParseParams));
        public IMovementDirectionDataGetter Right => MovementDirectionDataBinaryOverlay.MovementDirectionDataFactory(new OverlayStream(_data.Slice(0x10), _package), _package, default(TypedParseParams));
        public IMovementDirectionDataGetter Forward => MovementDirectionDataBinaryOverlay.MovementDirectionDataFactory(new OverlayStream(_data.Slice(0x20), _package), _package, default(TypedParseParams));
        public IMovementDirectionDataGetter Back => MovementDirectionDataBinaryOverlay.MovementDirectionDataFactory(new OverlayStream(_data.Slice(0x30), _package), _package, default(TypedParseParams));
        public IMovementRotationDataGetter Pitch => MovementRotationDataBinaryOverlay.MovementRotationDataFactory(new OverlayStream(_data.Slice(0x40), _package), _package, default(TypedParseParams));
        public IMovementRotationDataGetter Roll => MovementRotationDataBinaryOverlay.MovementRotationDataFactory(new OverlayStream(_data.Slice(0x50), _package), _package, default(TypedParseParams));
        public IMovementRotationDataGetter Yaw => MovementRotationDataBinaryOverlay.MovementRotationDataFactory(new OverlayStream(_data.Slice(0x60), _package), _package, default(TypedParseParams));
        public ReadOnlyMemorySlice<Byte> Unused => _data.Span.Slice(0x70, 0xC).ToArray();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected MovementDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static MovementDataBinaryOverlay MovementDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new MovementDataBinaryOverlay(
                bytes: stream.RemainingMemory.Slice(0, 0x7C),
                package: package);
            int offset = stream.Position;
            stream.Position += 0x7C;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static MovementDataBinaryOverlay MovementDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return MovementDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            MovementDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IMovementDataGetter rhs) return false;
            return ((MovementDataCommon)((IMovementDataGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IMovementDataGetter? obj)
        {
            return ((MovementDataCommon)((IMovementDataGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((MovementDataCommon)((IMovementDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

