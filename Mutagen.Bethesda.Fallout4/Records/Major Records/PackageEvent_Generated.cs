/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class PackageEvent :
        IEquatable<IPackageEventGetter>,
        ILoquiObjectSetter<PackageEvent>,
        IPackageEvent
    {
        #region Ctor
        public PackageEvent()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Idle
        private readonly IFormLink<IIdleAnimationGetter> _Idle = new FormLink<IIdleAnimationGetter>();
        public IFormLink<IIdleAnimationGetter> Idle
        {
            get => _Idle;
            set => _Idle.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IIdleAnimationGetter> IPackageEventGetter.Idle => this.Idle;
        #endregion
        #region Topics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ATopicReference> _Topics = new ExtendedList<ATopicReference>();
        public ExtendedList<ATopicReference> Topics
        {
            get => this._Topics;
            init => this._Topics = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IATopicReferenceGetter> IPackageEventGetter.Topics => _Topics;
        #endregion

        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PackageEventMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPackageEventGetter rhs) return false;
            return ((PackageEventCommon)((IPackageEventGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPackageEventGetter? obj)
        {
            return ((PackageEventCommon)((IPackageEventGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PackageEventCommon)((IPackageEventGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Idle = initialValue;
                this.Topics = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ATopicReference.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ATopicReference.Mask<TItem>?>>());
            }

            public Mask(
                TItem Idle,
                TItem Topics)
            {
                this.Idle = Idle;
                this.Topics = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ATopicReference.Mask<TItem>?>>?>(Topics, Enumerable.Empty<MaskItemIndexed<TItem, ATopicReference.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Idle;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ATopicReference.Mask<TItem>?>>?>? Topics;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Idle, rhs.Idle)) return false;
                if (!object.Equals(this.Topics, rhs.Topics)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Idle);
                hash.Add(this.Topics);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Idle)) return false;
                if (this.Topics != null)
                {
                    if (!eval(this.Topics.Overall)) return false;
                    if (this.Topics.Specific != null)
                    {
                        foreach (var item in this.Topics.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Idle)) return true;
                if (this.Topics != null)
                {
                    if (eval(this.Topics.Overall)) return true;
                    if (this.Topics.Specific != null)
                    {
                        foreach (var item in this.Topics.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PackageEvent.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Idle = eval(this.Idle);
                if (Topics != null)
                {
                    obj.Topics = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ATopicReference.Mask<R>?>>?>(eval(this.Topics.Overall), Enumerable.Empty<MaskItemIndexed<R, ATopicReference.Mask<R>?>>());
                    if (Topics.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ATopicReference.Mask<R>?>>();
                        obj.Topics.Specific = l;
                        foreach (var item in Topics.Specific)
                        {
                            MaskItemIndexed<R, ATopicReference.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ATopicReference.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(PackageEvent.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, PackageEvent.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(PackageEvent.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Idle ?? true)
                    {
                        sb.AppendItem(Idle, "Idle");
                    }
                    if ((printMask?.Topics?.Overall ?? true)
                        && Topics is {} TopicsItem)
                    {
                        sb.AppendLine("Topics =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(TopicsItem.Overall);
                            if (TopicsItem.Specific != null)
                            {
                                foreach (var subItem in TopicsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Idle;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ATopicReference.ErrorMask?>>?>? Topics;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                PackageEvent_FieldIndex enu = (PackageEvent_FieldIndex)index;
                switch (enu)
                {
                    case PackageEvent_FieldIndex.Idle:
                        return Idle;
                    case PackageEvent_FieldIndex.Topics:
                        return Topics;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                PackageEvent_FieldIndex enu = (PackageEvent_FieldIndex)index;
                switch (enu)
                {
                    case PackageEvent_FieldIndex.Idle:
                        this.Idle = ex;
                        break;
                    case PackageEvent_FieldIndex.Topics:
                        this.Topics = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ATopicReference.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                PackageEvent_FieldIndex enu = (PackageEvent_FieldIndex)index;
                switch (enu)
                {
                    case PackageEvent_FieldIndex.Idle:
                        this.Idle = (Exception?)obj;
                        break;
                    case PackageEvent_FieldIndex.Topics:
                        this.Topics = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ATopicReference.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Idle != null) return true;
                if (Topics != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Idle, "Idle");
                }
                if (Topics is {} TopicsItem)
                {
                    sb.AppendLine("Topics =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(TopicsItem.Overall);
                        if (TopicsItem.Specific != null)
                        {
                            foreach (var subItem in TopicsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Idle = this.Idle.Combine(rhs.Idle);
                ret.Topics = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ATopicReference.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Topics?.Overall, rhs.Topics?.Overall), Noggog.ExceptionExt.Combine(this.Topics?.Specific, rhs.Topics?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Idle;
            public ATopicReference.TranslationMask? Topics;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Idle = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Idle, null));
                ret.Add((Topics == null ? DefaultOn : !Topics.GetCrystal().CopyNothing, Topics?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PackageEventCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PackageEventSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PackageEventBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PackageEventBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static PackageEvent CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new PackageEvent();
            ((PackageEventSetterCommon)((IPackageEventGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PackageEvent item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((PackageEventSetterCommon)((IPackageEventGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static PackageEvent GetNew()
        {
            return new PackageEvent();
        }

    }
    #endregion

    #region Interface
    public partial interface IPackageEvent :
        IFormLinkContainer,
        ILoquiObjectSetter<IPackageEvent>,
        IPackageEventGetter
    {
        new IFormLink<IIdleAnimationGetter> Idle { get; set; }
        new ExtendedList<ATopicReference> Topics { get; }
    }

    public partial interface IPackageEventGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IPackageEventGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => PackageEvent_Registration.Instance;
        IFormLinkGetter<IIdleAnimationGetter> Idle { get; }
        IReadOnlyList<IATopicReferenceGetter> Topics { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PackageEventMixIn
    {
        public static void Clear(this IPackageEvent item)
        {
            ((PackageEventSetterCommon)((IPackageEventGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PackageEvent.Mask<bool> GetEqualsMask(
            this IPackageEventGetter item,
            IPackageEventGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PackageEventCommon)((IPackageEventGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IPackageEventGetter item,
            string? name = null,
            PackageEvent.Mask<bool>? printMask = null)
        {
            return ((PackageEventCommon)((IPackageEventGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IPackageEventGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PackageEvent.Mask<bool>? printMask = null)
        {
            ((PackageEventCommon)((IPackageEventGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPackageEventGetter item,
            IPackageEventGetter rhs,
            PackageEvent.TranslationMask? equalsMask = null)
        {
            return ((PackageEventCommon)((IPackageEventGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPackageEvent lhs,
            IPackageEventGetter rhs)
        {
            ((PackageEventSetterTranslationCommon)((IPackageEventGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPackageEvent lhs,
            IPackageEventGetter rhs,
            PackageEvent.TranslationMask? copyMask = null)
        {
            ((PackageEventSetterTranslationCommon)((IPackageEventGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPackageEvent lhs,
            IPackageEventGetter rhs,
            out PackageEvent.ErrorMask errorMask,
            PackageEvent.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PackageEventSetterTranslationCommon)((IPackageEventGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PackageEvent.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPackageEvent lhs,
            IPackageEventGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PackageEventSetterTranslationCommon)((IPackageEventGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PackageEvent DeepCopy(
            this IPackageEventGetter item,
            PackageEvent.TranslationMask? copyMask = null)
        {
            return ((PackageEventSetterTranslationCommon)((IPackageEventGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PackageEvent DeepCopy(
            this IPackageEventGetter item,
            out PackageEvent.ErrorMask errorMask,
            PackageEvent.TranslationMask? copyMask = null)
        {
            return ((PackageEventSetterTranslationCommon)((IPackageEventGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PackageEvent DeepCopy(
            this IPackageEventGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PackageEventSetterTranslationCommon)((IPackageEventGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPackageEvent item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((PackageEventSetterCommon)((IPackageEventGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum PackageEvent_FieldIndex
    {
        Idle = 0,
        Topics = 1,
    }
    #endregion

    #region Registration
    internal partial class PackageEvent_Registration : ILoquiRegistration
    {
        public static readonly PackageEvent_Registration Instance = new PackageEvent_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(PackageEvent.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PackageEvent.ErrorMask);

        public static readonly Type ClassType = typeof(PackageEvent);

        public static readonly Type GetterType = typeof(IPackageEventGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPackageEvent);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.PackageEvent";

        public const string Name = "PackageEvent";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.INAM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.INAM);
            var all = RecordCollection.Factory(
                RecordTypes.INAM,
                RecordTypes.PDTO);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(PackageEventBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class PackageEventSetterCommon
    {
        public static readonly PackageEventSetterCommon Instance = new PackageEventSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPackageEvent item)
        {
            ClearPartial();
            item.Idle.Clear();
            item.Topics.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IPackageEvent obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Idle.Relink(mapping);
            obj.Topics.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPackageEvent item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: PackageEventBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class PackageEventCommon
    {
        public static readonly PackageEventCommon Instance = new PackageEventCommon();

        public PackageEvent.Mask<bool> GetEqualsMask(
            IPackageEventGetter item,
            IPackageEventGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PackageEvent.Mask<bool>(false);
            ((PackageEventCommon)((IPackageEventGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPackageEventGetter item,
            IPackageEventGetter rhs,
            PackageEvent.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Idle = item.Idle.Equals(rhs.Idle);
            ret.Topics = item.Topics.CollectionEqualsHelper(
                rhs.Topics,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string Print(
            IPackageEventGetter item,
            string? name = null,
            PackageEvent.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IPackageEventGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PackageEvent.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"PackageEvent =>");
            }
            else
            {
                sb.AppendLine($"{name} (PackageEvent) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IPackageEventGetter item,
            StructuredStringBuilder sb,
            PackageEvent.Mask<bool>? printMask = null)
        {
            if (printMask?.Idle ?? true)
            {
                sb.AppendItem(item.Idle.FormKey, "Idle");
            }
            if (printMask?.Topics?.Overall ?? true)
            {
                sb.AppendLine("Topics =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Topics)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPackageEventGetter? lhs,
            IPackageEventGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)PackageEvent_FieldIndex.Idle) ?? true))
            {
                if (!lhs.Idle.Equals(rhs.Idle)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PackageEvent_FieldIndex.Topics) ?? true))
            {
                if (!lhs.Topics.SequenceEqual(rhs.Topics, (l, r) => ((ATopicReferenceCommon)((IATopicReferenceGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)PackageEvent_FieldIndex.Topics)))) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IPackageEventGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Idle);
            hash.Add(item.Topics);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return PackageEvent.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IPackageEventGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.Idle);
            foreach (var item in obj.Topics.WhereCastable<IATopicReferenceGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class PackageEventSetterTranslationCommon
    {
        public static readonly PackageEventSetterTranslationCommon Instance = new PackageEventSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPackageEvent item,
            IPackageEventGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)PackageEvent_FieldIndex.Idle) ?? true))
            {
                item.Idle.SetTo(rhs.Idle.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)PackageEvent_FieldIndex.Topics) ?? true))
            {
                errorMask?.PushIndex((int)PackageEvent_FieldIndex.Topics);
                try
                {
                    item.Topics.SetTo(
                        rhs.Topics
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public PackageEvent DeepCopy(
            IPackageEventGetter item,
            PackageEvent.TranslationMask? copyMask = null)
        {
            PackageEvent ret = (PackageEvent)((PackageEventCommon)((IPackageEventGetter)item).CommonInstance()!).GetNew();
            ((PackageEventSetterTranslationCommon)((IPackageEventGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PackageEvent DeepCopy(
            IPackageEventGetter item,
            out PackageEvent.ErrorMask errorMask,
            PackageEvent.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PackageEvent ret = (PackageEvent)((PackageEventCommon)((IPackageEventGetter)item).CommonInstance()!).GetNew();
            ((PackageEventSetterTranslationCommon)((IPackageEventGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PackageEvent.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PackageEvent DeepCopy(
            IPackageEventGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PackageEvent ret = (PackageEvent)((PackageEventCommon)((IPackageEventGetter)item).CommonInstance()!).GetNew();
            ((PackageEventSetterTranslationCommon)((IPackageEventGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class PackageEvent
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PackageEvent_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => PackageEvent_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PackageEventCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return PackageEventSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PackageEventSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPackageEventGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IPackageEventGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IPackageEventGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class PackageEventBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly PackageEventBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IPackageEventGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Idle,
                header: translationParams.ConvertToCustom(RecordTypes.INAM));
            PackageEventBinaryWriteTranslation.WriteBinaryTopics(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryTopicsCustom(
            MutagenWriter writer,
            IPackageEventGetter item);

        public static void WriteBinaryTopics(
            MutagenWriter writer,
            IPackageEventGetter item)
        {
            WriteBinaryTopicsCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IPackageEventGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IPackageEventGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class PackageEventBinaryCreateTranslation
    {
        public static readonly PackageEventBinaryCreateTranslation Instance = new PackageEventBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IPackageEvent item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.INAM:
                {
                    if (lastParsed.ShortCircuit((int)PackageEvent_FieldIndex.Idle, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Idle.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PackageEvent_FieldIndex.Idle;
                }
                case RecordTypeInts.PDTO:
                {
                    PackageEventBinaryCreateTranslation.FillBinaryTopicsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                    return (int)PackageEvent_FieldIndex.Topics;
                }
                default:
                    return ParseResult.Stop;
            }
        }

        public static partial void FillBinaryTopicsCustom(
            MutagenFrame frame,
            IPackageEvent item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class PackageEventBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IPackageEventGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PackageEventBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class PackageEventBinaryOverlay :
        PluginBinaryOverlay,
        IPackageEventGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PackageEvent_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => PackageEvent_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PackageEventCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PackageEventSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPackageEventGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IPackageEventGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IPackageEventGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PackageEventCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PackageEventBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PackageEventBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Idle
        private int? _IdleLocation;
        public IFormLinkGetter<IIdleAnimationGetter> Idle => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IIdleAnimationGetter>(_package, _recordData, _IdleLocation);
        #endregion
        #region Topics
        partial void TopicsCustomParse(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PackageEventBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IPackageEventGetter PackageEventFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new PackageEventBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IPackageEventGetter PackageEventFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return PackageEventFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.INAM:
                {
                    if (lastParsed.ShortCircuit((int)PackageEvent_FieldIndex.Idle, translationParams)) return ParseResult.Stop;
                    _IdleLocation = (stream.Position - offset);
                    return (int)PackageEvent_FieldIndex.Idle;
                }
                case RecordTypeInts.PDTO:
                {
                    TopicsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)PackageEvent_FieldIndex.Topics;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PackageEventMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPackageEventGetter rhs) return false;
            return ((PackageEventCommon)((IPackageEventGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPackageEventGetter? obj)
        {
            return ((PackageEventCommon)((IPackageEventGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PackageEventCommon)((IPackageEventGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

