/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class StateVariableFilterAudioEffect :
        AAudioEffect,
        IEquatable<IStateVariableFilterAudioEffectGetter>,
        ILoquiObjectSetter<StateVariableFilterAudioEffect>,
        IStateVariableFilterAudioEffect
    {
        #region Ctor
        public StateVariableFilterAudioEffect()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region CenterFrequency
        public Single CenterFrequency { get; set; } = default(Single);
        #endregion
        #region QValue
        public Single QValue { get; set; } = default(Single);
        #endregion
        #region Mode
        public StateVariableFilterAudioEffect.FilterMode Mode { get; set; } = default(StateVariableFilterAudioEffect.FilterMode);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            StateVariableFilterAudioEffectMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IStateVariableFilterAudioEffectGetter rhs) return false;
            return ((StateVariableFilterAudioEffectCommon)((IStateVariableFilterAudioEffectGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IStateVariableFilterAudioEffectGetter? obj)
        {
            return ((StateVariableFilterAudioEffectCommon)((IStateVariableFilterAudioEffectGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((StateVariableFilterAudioEffectCommon)((IStateVariableFilterAudioEffectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AAudioEffect.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.CenterFrequency = initialValue;
                this.QValue = initialValue;
                this.Mode = initialValue;
            }

            public Mask(
                TItem Enabled,
                TItem CenterFrequency,
                TItem QValue,
                TItem Mode)
            : base(Enabled: Enabled)
            {
                this.CenterFrequency = CenterFrequency;
                this.QValue = QValue;
                this.Mode = Mode;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem CenterFrequency;
            public TItem QValue;
            public TItem Mode;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.CenterFrequency, rhs.CenterFrequency)) return false;
                if (!object.Equals(this.QValue, rhs.QValue)) return false;
                if (!object.Equals(this.Mode, rhs.Mode)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.CenterFrequency);
                hash.Add(this.QValue);
                hash.Add(this.Mode);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.CenterFrequency)) return false;
                if (!eval(this.QValue)) return false;
                if (!eval(this.Mode)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.CenterFrequency)) return true;
                if (eval(this.QValue)) return true;
                if (eval(this.Mode)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new StateVariableFilterAudioEffect.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.CenterFrequency = eval(this.CenterFrequency);
                obj.QValue = eval(this.QValue);
                obj.Mode = eval(this.Mode);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(StateVariableFilterAudioEffect.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, StateVariableFilterAudioEffect.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(StateVariableFilterAudioEffect.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.CenterFrequency ?? true)
                    {
                        sb.AppendItem(CenterFrequency, "CenterFrequency");
                    }
                    if (printMask?.QValue ?? true)
                    {
                        sb.AppendItem(QValue, "QValue");
                    }
                    if (printMask?.Mode ?? true)
                    {
                        sb.AppendItem(Mode, "Mode");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            AAudioEffect.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? CenterFrequency;
            public Exception? QValue;
            public Exception? Mode;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                StateVariableFilterAudioEffect_FieldIndex enu = (StateVariableFilterAudioEffect_FieldIndex)index;
                switch (enu)
                {
                    case StateVariableFilterAudioEffect_FieldIndex.CenterFrequency:
                        return CenterFrequency;
                    case StateVariableFilterAudioEffect_FieldIndex.QValue:
                        return QValue;
                    case StateVariableFilterAudioEffect_FieldIndex.Mode:
                        return Mode;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                StateVariableFilterAudioEffect_FieldIndex enu = (StateVariableFilterAudioEffect_FieldIndex)index;
                switch (enu)
                {
                    case StateVariableFilterAudioEffect_FieldIndex.CenterFrequency:
                        this.CenterFrequency = ex;
                        break;
                    case StateVariableFilterAudioEffect_FieldIndex.QValue:
                        this.QValue = ex;
                        break;
                    case StateVariableFilterAudioEffect_FieldIndex.Mode:
                        this.Mode = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                StateVariableFilterAudioEffect_FieldIndex enu = (StateVariableFilterAudioEffect_FieldIndex)index;
                switch (enu)
                {
                    case StateVariableFilterAudioEffect_FieldIndex.CenterFrequency:
                        this.CenterFrequency = (Exception?)obj;
                        break;
                    case StateVariableFilterAudioEffect_FieldIndex.QValue:
                        this.QValue = (Exception?)obj;
                        break;
                    case StateVariableFilterAudioEffect_FieldIndex.Mode:
                        this.Mode = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (CenterFrequency != null) return true;
                if (QValue != null) return true;
                if (Mode != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(CenterFrequency, "CenterFrequency");
                }
                {
                    sb.AppendItem(QValue, "QValue");
                }
                {
                    sb.AppendItem(Mode, "Mode");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.CenterFrequency = this.CenterFrequency.Combine(rhs.CenterFrequency);
                ret.QValue = this.QValue.Combine(rhs.QValue);
                ret.Mode = this.Mode.Combine(rhs.Mode);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AAudioEffect.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool CenterFrequency;
            public bool QValue;
            public bool Mode;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.CenterFrequency = defaultOn;
                this.QValue = defaultOn;
                this.Mode = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((CenterFrequency, null));
                ret.Add((QValue, null));
                ret.Add((Mode, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => StateVariableFilterAudioEffectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((StateVariableFilterAudioEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static StateVariableFilterAudioEffect CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new StateVariableFilterAudioEffect();
            ((StateVariableFilterAudioEffectSetterCommon)((IStateVariableFilterAudioEffectGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out StateVariableFilterAudioEffect item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((StateVariableFilterAudioEffectSetterCommon)((IStateVariableFilterAudioEffectGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new StateVariableFilterAudioEffect GetNew()
        {
            return new StateVariableFilterAudioEffect();
        }

    }
    #endregion

    #region Interface
    public partial interface IStateVariableFilterAudioEffect :
        IAAudioEffect,
        ILoquiObjectSetter<IStateVariableFilterAudioEffect>,
        IStateVariableFilterAudioEffectGetter
    {
        new Single CenterFrequency { get; set; }
        new Single QValue { get; set; }
        new StateVariableFilterAudioEffect.FilterMode Mode { get; set; }
    }

    public partial interface IStateVariableFilterAudioEffectGetter :
        IAAudioEffectGetter,
        IBinaryItem,
        ILoquiObject<IStateVariableFilterAudioEffectGetter>
    {
        static new ILoquiRegistration StaticRegistration => StateVariableFilterAudioEffect_Registration.Instance;
        Single CenterFrequency { get; }
        Single QValue { get; }
        StateVariableFilterAudioEffect.FilterMode Mode { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class StateVariableFilterAudioEffectMixIn
    {
        public static void Clear(this IStateVariableFilterAudioEffect item)
        {
            ((StateVariableFilterAudioEffectSetterCommon)((IStateVariableFilterAudioEffectGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static StateVariableFilterAudioEffect.Mask<bool> GetEqualsMask(
            this IStateVariableFilterAudioEffectGetter item,
            IStateVariableFilterAudioEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((StateVariableFilterAudioEffectCommon)((IStateVariableFilterAudioEffectGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IStateVariableFilterAudioEffectGetter item,
            string? name = null,
            StateVariableFilterAudioEffect.Mask<bool>? printMask = null)
        {
            return ((StateVariableFilterAudioEffectCommon)((IStateVariableFilterAudioEffectGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IStateVariableFilterAudioEffectGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            StateVariableFilterAudioEffect.Mask<bool>? printMask = null)
        {
            ((StateVariableFilterAudioEffectCommon)((IStateVariableFilterAudioEffectGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IStateVariableFilterAudioEffectGetter item,
            IStateVariableFilterAudioEffectGetter rhs,
            StateVariableFilterAudioEffect.TranslationMask? equalsMask = null)
        {
            return ((StateVariableFilterAudioEffectCommon)((IStateVariableFilterAudioEffectGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IStateVariableFilterAudioEffect lhs,
            IStateVariableFilterAudioEffectGetter rhs,
            out StateVariableFilterAudioEffect.ErrorMask errorMask,
            StateVariableFilterAudioEffect.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((StateVariableFilterAudioEffectSetterTranslationCommon)((IStateVariableFilterAudioEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = StateVariableFilterAudioEffect.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IStateVariableFilterAudioEffect lhs,
            IStateVariableFilterAudioEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((StateVariableFilterAudioEffectSetterTranslationCommon)((IStateVariableFilterAudioEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static StateVariableFilterAudioEffect DeepCopy(
            this IStateVariableFilterAudioEffectGetter item,
            StateVariableFilterAudioEffect.TranslationMask? copyMask = null)
        {
            return ((StateVariableFilterAudioEffectSetterTranslationCommon)((IStateVariableFilterAudioEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static StateVariableFilterAudioEffect DeepCopy(
            this IStateVariableFilterAudioEffectGetter item,
            out StateVariableFilterAudioEffect.ErrorMask errorMask,
            StateVariableFilterAudioEffect.TranslationMask? copyMask = null)
        {
            return ((StateVariableFilterAudioEffectSetterTranslationCommon)((IStateVariableFilterAudioEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static StateVariableFilterAudioEffect DeepCopy(
            this IStateVariableFilterAudioEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((StateVariableFilterAudioEffectSetterTranslationCommon)((IStateVariableFilterAudioEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IStateVariableFilterAudioEffect item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((StateVariableFilterAudioEffectSetterCommon)((IStateVariableFilterAudioEffectGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum StateVariableFilterAudioEffect_FieldIndex
    {
        Enabled = 0,
        CenterFrequency = 1,
        QValue = 2,
        Mode = 3,
    }
    #endregion

    #region Registration
    internal partial class StateVariableFilterAudioEffect_Registration : ILoquiRegistration
    {
        public static readonly StateVariableFilterAudioEffect_Registration Instance = new StateVariableFilterAudioEffect_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(StateVariableFilterAudioEffect.Mask<>);

        public static readonly Type ErrorMaskType = typeof(StateVariableFilterAudioEffect.ErrorMask);

        public static readonly Type ClassType = typeof(StateVariableFilterAudioEffect);

        public static readonly Type GetterType = typeof(IStateVariableFilterAudioEffectGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IStateVariableFilterAudioEffect);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.StateVariableFilterAudioEffect";

        public const string Name = "StateVariableFilterAudioEffect";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(StateVariableFilterAudioEffectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class StateVariableFilterAudioEffectSetterCommon : AAudioEffectSetterCommon
    {
        public new static readonly StateVariableFilterAudioEffectSetterCommon Instance = new StateVariableFilterAudioEffectSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IStateVariableFilterAudioEffect item)
        {
            ClearPartial();
            item.CenterFrequency = default(Single);
            item.QValue = default(Single);
            item.Mode = default(StateVariableFilterAudioEffect.FilterMode);
            base.Clear(item);
        }
        
        public override void Clear(IAAudioEffect item)
        {
            Clear(item: (IStateVariableFilterAudioEffect)item);
        }
        
        #region Mutagen
        public void RemapLinks(IStateVariableFilterAudioEffect obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IStateVariableFilterAudioEffect item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: StateVariableFilterAudioEffectBinaryCreateTranslation.FillBinaryStructs);
        }
        
        public override void CopyInFromBinary(
            IAAudioEffect item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (StateVariableFilterAudioEffect)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class StateVariableFilterAudioEffectCommon : AAudioEffectCommon
    {
        public new static readonly StateVariableFilterAudioEffectCommon Instance = new StateVariableFilterAudioEffectCommon();

        public StateVariableFilterAudioEffect.Mask<bool> GetEqualsMask(
            IStateVariableFilterAudioEffectGetter item,
            IStateVariableFilterAudioEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new StateVariableFilterAudioEffect.Mask<bool>(false);
            ((StateVariableFilterAudioEffectCommon)((IStateVariableFilterAudioEffectGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IStateVariableFilterAudioEffectGetter item,
            IStateVariableFilterAudioEffectGetter rhs,
            StateVariableFilterAudioEffect.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.CenterFrequency = item.CenterFrequency.EqualsWithin(rhs.CenterFrequency);
            ret.QValue = item.QValue.EqualsWithin(rhs.QValue);
            ret.Mode = item.Mode == rhs.Mode;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IStateVariableFilterAudioEffectGetter item,
            string? name = null,
            StateVariableFilterAudioEffect.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IStateVariableFilterAudioEffectGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            StateVariableFilterAudioEffect.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"StateVariableFilterAudioEffect =>");
            }
            else
            {
                sb.AppendLine($"{name} (StateVariableFilterAudioEffect) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IStateVariableFilterAudioEffectGetter item,
            StructuredStringBuilder sb,
            StateVariableFilterAudioEffect.Mask<bool>? printMask = null)
        {
            AAudioEffectCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.CenterFrequency ?? true)
            {
                sb.AppendItem(item.CenterFrequency, "CenterFrequency");
            }
            if (printMask?.QValue ?? true)
            {
                sb.AppendItem(item.QValue, "QValue");
            }
            if (printMask?.Mode ?? true)
            {
                sb.AppendItem(item.Mode, "Mode");
            }
        }
        
        public static StateVariableFilterAudioEffect_FieldIndex ConvertFieldIndex(AAudioEffect_FieldIndex index)
        {
            switch (index)
            {
                case AAudioEffect_FieldIndex.Enabled:
                    return (StateVariableFilterAudioEffect_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IStateVariableFilterAudioEffectGetter? lhs,
            IStateVariableFilterAudioEffectGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAAudioEffectGetter)lhs, (IAAudioEffectGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)StateVariableFilterAudioEffect_FieldIndex.CenterFrequency) ?? true))
            {
                if (!lhs.CenterFrequency.EqualsWithin(rhs.CenterFrequency)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StateVariableFilterAudioEffect_FieldIndex.QValue) ?? true))
            {
                if (!lhs.QValue.EqualsWithin(rhs.QValue)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StateVariableFilterAudioEffect_FieldIndex.Mode) ?? true))
            {
                if (lhs.Mode != rhs.Mode) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAAudioEffectGetter? lhs,
            IAAudioEffectGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IStateVariableFilterAudioEffectGetter?)lhs,
                rhs: rhs as IStateVariableFilterAudioEffectGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IStateVariableFilterAudioEffectGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.CenterFrequency);
            hash.Add(item.QValue);
            hash.Add(item.Mode);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAAudioEffectGetter item)
        {
            return GetHashCode(item: (IStateVariableFilterAudioEffectGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return StateVariableFilterAudioEffect.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IStateVariableFilterAudioEffectGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class StateVariableFilterAudioEffectSetterTranslationCommon : AAudioEffectSetterTranslationCommon
    {
        public new static readonly StateVariableFilterAudioEffectSetterTranslationCommon Instance = new StateVariableFilterAudioEffectSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IStateVariableFilterAudioEffect item,
            IStateVariableFilterAudioEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAAudioEffect)item,
                (IAAudioEffectGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)StateVariableFilterAudioEffect_FieldIndex.CenterFrequency) ?? true))
            {
                item.CenterFrequency = rhs.CenterFrequency;
            }
            if ((copyMask?.GetShouldTranslate((int)StateVariableFilterAudioEffect_FieldIndex.QValue) ?? true))
            {
                item.QValue = rhs.QValue;
            }
            if ((copyMask?.GetShouldTranslate((int)StateVariableFilterAudioEffect_FieldIndex.Mode) ?? true))
            {
                item.Mode = rhs.Mode;
            }
        }
        
        
        public override void DeepCopyIn(
            IAAudioEffect item,
            IAAudioEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IStateVariableFilterAudioEffect)item,
                rhs: (IStateVariableFilterAudioEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public StateVariableFilterAudioEffect DeepCopy(
            IStateVariableFilterAudioEffectGetter item,
            StateVariableFilterAudioEffect.TranslationMask? copyMask = null)
        {
            StateVariableFilterAudioEffect ret = (StateVariableFilterAudioEffect)((StateVariableFilterAudioEffectCommon)((IStateVariableFilterAudioEffectGetter)item).CommonInstance()!).GetNew();
            ((StateVariableFilterAudioEffectSetterTranslationCommon)((IStateVariableFilterAudioEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public StateVariableFilterAudioEffect DeepCopy(
            IStateVariableFilterAudioEffectGetter item,
            out StateVariableFilterAudioEffect.ErrorMask errorMask,
            StateVariableFilterAudioEffect.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            StateVariableFilterAudioEffect ret = (StateVariableFilterAudioEffect)((StateVariableFilterAudioEffectCommon)((IStateVariableFilterAudioEffectGetter)item).CommonInstance()!).GetNew();
            ((StateVariableFilterAudioEffectSetterTranslationCommon)((IStateVariableFilterAudioEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = StateVariableFilterAudioEffect.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public StateVariableFilterAudioEffect DeepCopy(
            IStateVariableFilterAudioEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            StateVariableFilterAudioEffect ret = (StateVariableFilterAudioEffect)((StateVariableFilterAudioEffectCommon)((IStateVariableFilterAudioEffectGetter)item).CommonInstance()!).GetNew();
            ((StateVariableFilterAudioEffectSetterTranslationCommon)((IStateVariableFilterAudioEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class StateVariableFilterAudioEffect
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => StateVariableFilterAudioEffect_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => StateVariableFilterAudioEffect_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => StateVariableFilterAudioEffectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return StateVariableFilterAudioEffectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => StateVariableFilterAudioEffectSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class StateVariableFilterAudioEffectBinaryWriteTranslation :
        AAudioEffectBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly StateVariableFilterAudioEffectBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IStateVariableFilterAudioEffectGetter item,
            MutagenWriter writer)
        {
            AAudioEffectBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CenterFrequency);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.QValue);
            EnumBinaryTranslation<StateVariableFilterAudioEffect.FilterMode, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Mode,
                length: 4);
        }

        public void Write(
            MutagenWriter writer,
            IStateVariableFilterAudioEffectGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IStateVariableFilterAudioEffectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IAAudioEffectGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IStateVariableFilterAudioEffectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class StateVariableFilterAudioEffectBinaryCreateTranslation : AAudioEffectBinaryCreateTranslation
    {
        public new static readonly StateVariableFilterAudioEffectBinaryCreateTranslation Instance = new StateVariableFilterAudioEffectBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IStateVariableFilterAudioEffect item,
            MutagenFrame frame)
        {
            AAudioEffectBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            item.CenterFrequency = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.QValue = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Mode = EnumBinaryTranslation<StateVariableFilterAudioEffect.FilterMode, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class StateVariableFilterAudioEffectBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class StateVariableFilterAudioEffectBinaryOverlay :
        AAudioEffectBinaryOverlay,
        IStateVariableFilterAudioEffectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => StateVariableFilterAudioEffect_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => StateVariableFilterAudioEffect_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => StateVariableFilterAudioEffectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => StateVariableFilterAudioEffectSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => StateVariableFilterAudioEffectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((StateVariableFilterAudioEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Single CenterFrequency => _structData.Slice(0x4, 0x4).Float();
        public Single QValue => _structData.Slice(0x8, 0x4).Float();
        public StateVariableFilterAudioEffect.FilterMode Mode => (StateVariableFilterAudioEffect.FilterMode)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0xC, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected StateVariableFilterAudioEffectBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IStateVariableFilterAudioEffectGetter StateVariableFilterAudioEffectFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x10,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new StateVariableFilterAudioEffectBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x10;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IStateVariableFilterAudioEffectGetter StateVariableFilterAudioEffectFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return StateVariableFilterAudioEffectFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            StateVariableFilterAudioEffectMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IStateVariableFilterAudioEffectGetter rhs) return false;
            return ((StateVariableFilterAudioEffectCommon)((IStateVariableFilterAudioEffectGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IStateVariableFilterAudioEffectGetter? obj)
        {
            return ((StateVariableFilterAudioEffectCommon)((IStateVariableFilterAudioEffectGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((StateVariableFilterAudioEffectCommon)((IStateVariableFilterAudioEffectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

