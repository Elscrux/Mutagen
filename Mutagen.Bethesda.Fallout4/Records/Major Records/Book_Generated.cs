/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.RecordTypeMapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Book :
        Fallout4MajorRecord,
        IBookInternal,
        IEquatable<IBookGetter>,
        ILoquiObjectSetter<Book>
    {
        #region Ctor
        protected Book()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        /// <summary>
        /// Aspects: IScripted
        /// </summary>
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IBookGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IScriptedGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded, IObjectBoundedOptional
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IBookGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region PreviewTransform
        public PreviewTransform PreviewTransform { get; set; } = new PreviewTransform();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPreviewTransformGetter IBookGetter.PreviewTransform => PreviewTransform;
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IBookGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IBookGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region InventoryImage
        public TranslatedString? InventoryImage { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IBookGetter.InventoryImage => this.InventoryImage;
        #endregion
        #region MessageIcon
        public TranslatedString? MessageIcon { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IBookGetter.MessageIcon => this.MessageIcon;
        #endregion
        #region BookDescription
        public TranslatedString BookDescription { get; set; } = string.Empty;
        ITranslatedStringGetter IBookGetter.BookDescription => this.BookDescription;
        #endregion
        #region Destructible
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Destructible? _Destructible;
        public Destructible? Destructible
        {
            get => _Destructible;
            set => _Destructible = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? IBookGetter.Destructible => this.Destructible;
        #endregion
        #region PickUpSound
        private readonly IFormLinkNullable<ISoundDescriptorGetter> _PickUpSound = new FormLinkNullable<ISoundDescriptorGetter>();
        public IFormLinkNullable<ISoundDescriptorGetter> PickUpSound
        {
            get => _PickUpSound;
            set => _PickUpSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> IBookGetter.PickUpSound => this.PickUpSound;
        #endregion
        #region PutDownSound
        private readonly IFormLinkNullable<ISoundDescriptorGetter> _PutDownSound = new FormLinkNullable<ISoundDescriptorGetter>();
        public IFormLinkNullable<ISoundDescriptorGetter> PutDownSound
        {
            get => _PutDownSound;
            set => _PutDownSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> IBookGetter.PutDownSound => this.PutDownSound;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IBookGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region FeaturedItemMessage
        private readonly IFormLinkNullable<IMessageGetter> _FeaturedItemMessage = new FormLinkNullable<IMessageGetter>();
        public IFormLinkNullable<IMessageGetter> FeaturedItemMessage
        {
            get => _FeaturedItemMessage;
            set => _FeaturedItemMessage.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMessageGetter> IBookGetter.FeaturedItemMessage => this.FeaturedItemMessage;
        #endregion
        #region Value
        public UInt32 Value { get; set; } = default;
        #endregion
        #region Weight
        public Single Weight { get; set; } = default;
        #endregion
        #region Flags
        public Book.Flag Flags { get; set; } = default;
        #endregion
        #region Teaches
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private BookTeachTarget? _Teaches;
        public BookTeachTarget? Teaches
        {
            get => _Teaches;
            set => _Teaches = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBookTeachTargetGetter? IBookGetter.Teaches => this.Teaches;
        #endregion
        #region TextOffsetX
        public UInt32 TextOffsetX { get; set; } = default;
        #endregion
        #region TextOffsetY
        public UInt32 TextOffsetY { get; set; } = default;
        #endregion
        #region Description
        public TranslatedString? Description { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IBookGetter.Description => this.Description;
        #endregion
        #region InventoryArt
        private readonly IFormLinkNullable<IStaticGetter> _InventoryArt = new FormLinkNullable<IStaticGetter>();
        public IFormLinkNullable<IStaticGetter> InventoryArt
        {
            get => _InventoryArt;
            set => _InventoryArt.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IStaticGetter> IBookGetter.InventoryArt => this.InventoryArt;
        #endregion
        #region DATADataTypeState
        public Book.DATADataType DATADataTypeState { get; set; } = default;
        #endregion
        #region DNAMDataTypeState
        public Book.DNAMDataType DNAMDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            BookMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.PreviewTransform = new MaskItem<TItem, PreviewTransform.Mask<TItem>?>(initialValue, new PreviewTransform.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.InventoryImage = initialValue;
                this.MessageIcon = initialValue;
                this.BookDescription = initialValue;
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(initialValue, new Destructible.Mask<TItem>(initialValue));
                this.PickUpSound = initialValue;
                this.PutDownSound = initialValue;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.FeaturedItemMessage = initialValue;
                this.Value = initialValue;
                this.Weight = initialValue;
                this.Flags = initialValue;
                this.Teaches = new MaskItem<TItem, BookTeachTarget.Mask<TItem>?>(initialValue, new BookTeachTarget.Mask<TItem>(initialValue));
                this.TextOffsetX = initialValue;
                this.TextOffsetY = initialValue;
                this.Description = initialValue;
                this.InventoryArt = initialValue;
                this.DATADataTypeState = initialValue;
                this.DNAMDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem ObjectBounds,
                TItem PreviewTransform,
                TItem Name,
                TItem Model,
                TItem InventoryImage,
                TItem MessageIcon,
                TItem BookDescription,
                TItem Destructible,
                TItem PickUpSound,
                TItem PutDownSound,
                TItem Keywords,
                TItem FeaturedItemMessage,
                TItem Value,
                TItem Weight,
                TItem Flags,
                TItem Teaches,
                TItem TextOffsetX,
                TItem TextOffsetY,
                TItem Description,
                TItem InventoryArt,
                TItem DATADataTypeState,
                TItem DNAMDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.PreviewTransform = new MaskItem<TItem, PreviewTransform.Mask<TItem>?>(PreviewTransform, new PreviewTransform.Mask<TItem>(PreviewTransform));
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.InventoryImage = InventoryImage;
                this.MessageIcon = MessageIcon;
                this.BookDescription = BookDescription;
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(Destructible, new Destructible.Mask<TItem>(Destructible));
                this.PickUpSound = PickUpSound;
                this.PutDownSound = PutDownSound;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.FeaturedItemMessage = FeaturedItemMessage;
                this.Value = Value;
                this.Weight = Weight;
                this.Flags = Flags;
                this.Teaches = new MaskItem<TItem, BookTeachTarget.Mask<TItem>?>(Teaches, new BookTeachTarget.Mask<TItem>(Teaches));
                this.TextOffsetX = TextOffsetX;
                this.TextOffsetY = TextOffsetY;
                this.Description = Description;
                this.InventoryArt = InventoryArt;
                this.DATADataTypeState = DATADataTypeState;
                this.DNAMDataTypeState = DNAMDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public MaskItem<TItem, PreviewTransform.Mask<TItem>?>? PreviewTransform { get; set; }
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem InventoryImage;
            public TItem MessageIcon;
            public TItem BookDescription;
            public MaskItem<TItem, Destructible.Mask<TItem>?>? Destructible { get; set; }
            public TItem PickUpSound;
            public TItem PutDownSound;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public TItem FeaturedItemMessage;
            public TItem Value;
            public TItem Weight;
            public TItem Flags;
            public MaskItem<TItem, BookTeachTarget.Mask<TItem>?>? Teaches { get; set; }
            public TItem TextOffsetX;
            public TItem TextOffsetY;
            public TItem Description;
            public TItem InventoryArt;
            public TItem DATADataTypeState;
            public TItem DNAMDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.PreviewTransform, rhs.PreviewTransform)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.InventoryImage, rhs.InventoryImage)) return false;
                if (!object.Equals(this.MessageIcon, rhs.MessageIcon)) return false;
                if (!object.Equals(this.BookDescription, rhs.BookDescription)) return false;
                if (!object.Equals(this.Destructible, rhs.Destructible)) return false;
                if (!object.Equals(this.PickUpSound, rhs.PickUpSound)) return false;
                if (!object.Equals(this.PutDownSound, rhs.PutDownSound)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.FeaturedItemMessage, rhs.FeaturedItemMessage)) return false;
                if (!object.Equals(this.Value, rhs.Value)) return false;
                if (!object.Equals(this.Weight, rhs.Weight)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Teaches, rhs.Teaches)) return false;
                if (!object.Equals(this.TextOffsetX, rhs.TextOffsetX)) return false;
                if (!object.Equals(this.TextOffsetY, rhs.TextOffsetY)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.InventoryArt, rhs.InventoryArt)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                if (!object.Equals(this.DNAMDataTypeState, rhs.DNAMDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.ObjectBounds);
                hash.Add(this.PreviewTransform);
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.InventoryImage);
                hash.Add(this.MessageIcon);
                hash.Add(this.BookDescription);
                hash.Add(this.Destructible);
                hash.Add(this.PickUpSound);
                hash.Add(this.PutDownSound);
                hash.Add(this.Keywords);
                hash.Add(this.FeaturedItemMessage);
                hash.Add(this.Value);
                hash.Add(this.Weight);
                hash.Add(this.Flags);
                hash.Add(this.Teaches);
                hash.Add(this.TextOffsetX);
                hash.Add(this.TextOffsetY);
                hash.Add(this.Description);
                hash.Add(this.InventoryArt);
                hash.Add(this.DATADataTypeState);
                hash.Add(this.DNAMDataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (PreviewTransform != null)
                {
                    if (!eval(this.PreviewTransform.Overall)) return false;
                    if (this.PreviewTransform.Specific != null && !this.PreviewTransform.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.InventoryImage)) return false;
                if (!eval(this.MessageIcon)) return false;
                if (!eval(this.BookDescription)) return false;
                if (Destructible != null)
                {
                    if (!eval(this.Destructible.Overall)) return false;
                    if (this.Destructible.Specific != null && !this.Destructible.Specific.All(eval)) return false;
                }
                if (!eval(this.PickUpSound)) return false;
                if (!eval(this.PutDownSound)) return false;
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.FeaturedItemMessage)) return false;
                if (!eval(this.Value)) return false;
                if (!eval(this.Weight)) return false;
                if (!eval(this.Flags)) return false;
                if (Teaches != null)
                {
                    if (!eval(this.Teaches.Overall)) return false;
                    if (this.Teaches.Specific != null && !this.Teaches.Specific.All(eval)) return false;
                }
                if (!eval(this.TextOffsetX)) return false;
                if (!eval(this.TextOffsetY)) return false;
                if (!eval(this.Description)) return false;
                if (!eval(this.InventoryArt)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                if (!eval(this.DNAMDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (PreviewTransform != null)
                {
                    if (eval(this.PreviewTransform.Overall)) return true;
                    if (this.PreviewTransform.Specific != null && this.PreviewTransform.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.InventoryImage)) return true;
                if (eval(this.MessageIcon)) return true;
                if (eval(this.BookDescription)) return true;
                if (Destructible != null)
                {
                    if (eval(this.Destructible.Overall)) return true;
                    if (this.Destructible.Specific != null && this.Destructible.Specific.Any(eval)) return true;
                }
                if (eval(this.PickUpSound)) return true;
                if (eval(this.PutDownSound)) return true;
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.FeaturedItemMessage)) return true;
                if (eval(this.Value)) return true;
                if (eval(this.Weight)) return true;
                if (eval(this.Flags)) return true;
                if (Teaches != null)
                {
                    if (eval(this.Teaches.Overall)) return true;
                    if (this.Teaches.Specific != null && this.Teaches.Specific.Any(eval)) return true;
                }
                if (eval(this.TextOffsetX)) return true;
                if (eval(this.TextOffsetY)) return true;
                if (eval(this.Description)) return true;
                if (eval(this.InventoryArt)) return true;
                if (eval(this.DATADataTypeState)) return true;
                if (eval(this.DNAMDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Book.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.PreviewTransform = this.PreviewTransform == null ? null : new MaskItem<R, PreviewTransform.Mask<R>?>(eval(this.PreviewTransform.Overall), this.PreviewTransform.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.InventoryImage = eval(this.InventoryImage);
                obj.MessageIcon = eval(this.MessageIcon);
                obj.BookDescription = eval(this.BookDescription);
                obj.Destructible = this.Destructible == null ? null : new MaskItem<R, Destructible.Mask<R>?>(eval(this.Destructible.Overall), this.Destructible.Specific?.Translate(eval));
                obj.PickUpSound = eval(this.PickUpSound);
                obj.PutDownSound = eval(this.PutDownSound);
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.FeaturedItemMessage = eval(this.FeaturedItemMessage);
                obj.Value = eval(this.Value);
                obj.Weight = eval(this.Weight);
                obj.Flags = eval(this.Flags);
                obj.Teaches = this.Teaches == null ? null : new MaskItem<R, BookTeachTarget.Mask<R>?>(eval(this.Teaches.Overall), this.Teaches.Specific?.Translate(eval));
                obj.TextOffsetX = eval(this.TextOffsetX);
                obj.TextOffsetY = eval(this.TextOffsetY);
                obj.Description = eval(this.Description);
                obj.InventoryArt = eval(this.InventoryArt);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
                obj.DNAMDataTypeState = eval(this.DNAMDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Book.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Book.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Book.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.ToString(fg);
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.PreviewTransform?.Overall ?? true)
                    {
                        PreviewTransform?.ToString(fg);
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.InventoryImage ?? true)
                    {
                        fg.AppendItem(InventoryImage, "InventoryImage");
                    }
                    if (printMask?.MessageIcon ?? true)
                    {
                        fg.AppendItem(MessageIcon, "MessageIcon");
                    }
                    if (printMask?.BookDescription ?? true)
                    {
                        fg.AppendItem(BookDescription, "BookDescription");
                    }
                    if (printMask?.Destructible?.Overall ?? true)
                    {
                        Destructible?.ToString(fg);
                    }
                    if (printMask?.PickUpSound ?? true)
                    {
                        fg.AppendItem(PickUpSound, "PickUpSound");
                    }
                    if (printMask?.PutDownSound ?? true)
                    {
                        fg.AppendItem(PutDownSound, "PutDownSound");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        fg.AppendLine("Keywords =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.FeaturedItemMessage ?? true)
                    {
                        fg.AppendItem(FeaturedItemMessage, "FeaturedItemMessage");
                    }
                    if (printMask?.Value ?? true)
                    {
                        fg.AppendItem(Value, "Value");
                    }
                    if (printMask?.Weight ?? true)
                    {
                        fg.AppendItem(Weight, "Weight");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Teaches?.Overall ?? true)
                    {
                        Teaches?.ToString(fg);
                    }
                    if (printMask?.TextOffsetX ?? true)
                    {
                        fg.AppendItem(TextOffsetX, "TextOffsetX");
                    }
                    if (printMask?.TextOffsetY ?? true)
                    {
                        fg.AppendItem(TextOffsetY, "TextOffsetY");
                    }
                    if (printMask?.Description ?? true)
                    {
                        fg.AppendItem(Description, "Description");
                    }
                    if (printMask?.InventoryArt ?? true)
                    {
                        fg.AppendItem(InventoryArt, "InventoryArt");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                    if (printMask?.DNAMDataTypeState ?? true)
                    {
                        fg.AppendItem(DNAMDataTypeState, "DNAMDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public MaskItem<Exception?, PreviewTransform.ErrorMask?>? PreviewTransform;
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? InventoryImage;
            public Exception? MessageIcon;
            public Exception? BookDescription;
            public MaskItem<Exception?, Destructible.ErrorMask?>? Destructible;
            public Exception? PickUpSound;
            public Exception? PutDownSound;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public Exception? FeaturedItemMessage;
            public Exception? Value;
            public Exception? Weight;
            public Exception? Flags;
            public MaskItem<Exception?, BookTeachTarget.ErrorMask?>? Teaches;
            public Exception? TextOffsetX;
            public Exception? TextOffsetY;
            public Exception? Description;
            public Exception? InventoryArt;
            public Exception? DATADataTypeState;
            public Exception? DNAMDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Book_FieldIndex enu = (Book_FieldIndex)index;
                switch (enu)
                {
                    case Book_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Book_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Book_FieldIndex.PreviewTransform:
                        return PreviewTransform;
                    case Book_FieldIndex.Name:
                        return Name;
                    case Book_FieldIndex.Model:
                        return Model;
                    case Book_FieldIndex.InventoryImage:
                        return InventoryImage;
                    case Book_FieldIndex.MessageIcon:
                        return MessageIcon;
                    case Book_FieldIndex.BookDescription:
                        return BookDescription;
                    case Book_FieldIndex.Destructible:
                        return Destructible;
                    case Book_FieldIndex.PickUpSound:
                        return PickUpSound;
                    case Book_FieldIndex.PutDownSound:
                        return PutDownSound;
                    case Book_FieldIndex.Keywords:
                        return Keywords;
                    case Book_FieldIndex.FeaturedItemMessage:
                        return FeaturedItemMessage;
                    case Book_FieldIndex.Value:
                        return Value;
                    case Book_FieldIndex.Weight:
                        return Weight;
                    case Book_FieldIndex.Flags:
                        return Flags;
                    case Book_FieldIndex.Teaches:
                        return Teaches;
                    case Book_FieldIndex.TextOffsetX:
                        return TextOffsetX;
                    case Book_FieldIndex.TextOffsetY:
                        return TextOffsetY;
                    case Book_FieldIndex.Description:
                        return Description;
                    case Book_FieldIndex.InventoryArt:
                        return InventoryArt;
                    case Book_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    case Book_FieldIndex.DNAMDataTypeState:
                        return DNAMDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Book_FieldIndex enu = (Book_FieldIndex)index;
                switch (enu)
                {
                    case Book_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case Book_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Book_FieldIndex.PreviewTransform:
                        this.PreviewTransform = new MaskItem<Exception?, PreviewTransform.ErrorMask?>(ex, null);
                        break;
                    case Book_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Book_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Book_FieldIndex.InventoryImage:
                        this.InventoryImage = ex;
                        break;
                    case Book_FieldIndex.MessageIcon:
                        this.MessageIcon = ex;
                        break;
                    case Book_FieldIndex.BookDescription:
                        this.BookDescription = ex;
                        break;
                    case Book_FieldIndex.Destructible:
                        this.Destructible = new MaskItem<Exception?, Destructible.ErrorMask?>(ex, null);
                        break;
                    case Book_FieldIndex.PickUpSound:
                        this.PickUpSound = ex;
                        break;
                    case Book_FieldIndex.PutDownSound:
                        this.PutDownSound = ex;
                        break;
                    case Book_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Book_FieldIndex.FeaturedItemMessage:
                        this.FeaturedItemMessage = ex;
                        break;
                    case Book_FieldIndex.Value:
                        this.Value = ex;
                        break;
                    case Book_FieldIndex.Weight:
                        this.Weight = ex;
                        break;
                    case Book_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Book_FieldIndex.Teaches:
                        this.Teaches = new MaskItem<Exception?, BookTeachTarget.ErrorMask?>(ex, null);
                        break;
                    case Book_FieldIndex.TextOffsetX:
                        this.TextOffsetX = ex;
                        break;
                    case Book_FieldIndex.TextOffsetY:
                        this.TextOffsetY = ex;
                        break;
                    case Book_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Book_FieldIndex.InventoryArt:
                        this.InventoryArt = ex;
                        break;
                    case Book_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    case Book_FieldIndex.DNAMDataTypeState:
                        this.DNAMDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Book_FieldIndex enu = (Book_FieldIndex)index;
                switch (enu)
                {
                    case Book_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case Book_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Book_FieldIndex.PreviewTransform:
                        this.PreviewTransform = (MaskItem<Exception?, PreviewTransform.ErrorMask?>?)obj;
                        break;
                    case Book_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Book_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Book_FieldIndex.InventoryImage:
                        this.InventoryImage = (Exception?)obj;
                        break;
                    case Book_FieldIndex.MessageIcon:
                        this.MessageIcon = (Exception?)obj;
                        break;
                    case Book_FieldIndex.BookDescription:
                        this.BookDescription = (Exception?)obj;
                        break;
                    case Book_FieldIndex.Destructible:
                        this.Destructible = (MaskItem<Exception?, Destructible.ErrorMask?>?)obj;
                        break;
                    case Book_FieldIndex.PickUpSound:
                        this.PickUpSound = (Exception?)obj;
                        break;
                    case Book_FieldIndex.PutDownSound:
                        this.PutDownSound = (Exception?)obj;
                        break;
                    case Book_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Book_FieldIndex.FeaturedItemMessage:
                        this.FeaturedItemMessage = (Exception?)obj;
                        break;
                    case Book_FieldIndex.Value:
                        this.Value = (Exception?)obj;
                        break;
                    case Book_FieldIndex.Weight:
                        this.Weight = (Exception?)obj;
                        break;
                    case Book_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Book_FieldIndex.Teaches:
                        this.Teaches = (MaskItem<Exception?, BookTeachTarget.ErrorMask?>?)obj;
                        break;
                    case Book_FieldIndex.TextOffsetX:
                        this.TextOffsetX = (Exception?)obj;
                        break;
                    case Book_FieldIndex.TextOffsetY:
                        this.TextOffsetY = (Exception?)obj;
                        break;
                    case Book_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case Book_FieldIndex.InventoryArt:
                        this.InventoryArt = (Exception?)obj;
                        break;
                    case Book_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    case Book_FieldIndex.DNAMDataTypeState:
                        this.DNAMDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (ObjectBounds != null) return true;
                if (PreviewTransform != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (InventoryImage != null) return true;
                if (MessageIcon != null) return true;
                if (BookDescription != null) return true;
                if (Destructible != null) return true;
                if (PickUpSound != null) return true;
                if (PutDownSound != null) return true;
                if (Keywords != null) return true;
                if (FeaturedItemMessage != null) return true;
                if (Value != null) return true;
                if (Weight != null) return true;
                if (Flags != null) return true;
                if (Teaches != null) return true;
                if (TextOffsetX != null) return true;
                if (TextOffsetY != null) return true;
                if (Description != null) return true;
                if (InventoryArt != null) return true;
                if (DATADataTypeState != null) return true;
                if (DNAMDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                VirtualMachineAdapter?.ToString(fg);
                ObjectBounds?.ToString(fg);
                PreviewTransform?.ToString(fg);
                fg.AppendItem(Name, "Name");
                Model?.ToString(fg);
                fg.AppendItem(InventoryImage, "InventoryImage");
                fg.AppendItem(MessageIcon, "MessageIcon");
                fg.AppendItem(BookDescription, "BookDescription");
                Destructible?.ToString(fg);
                fg.AppendItem(PickUpSound, "PickUpSound");
                fg.AppendItem(PutDownSound, "PutDownSound");
                if (Keywords is {} KeywordsItem)
                {
                    fg.AppendLine("Keywords =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(FeaturedItemMessage, "FeaturedItemMessage");
                fg.AppendItem(Value, "Value");
                fg.AppendItem(Weight, "Weight");
                fg.AppendItem(Flags, "Flags");
                Teaches?.ToString(fg);
                fg.AppendItem(TextOffsetX, "TextOffsetX");
                fg.AppendItem(TextOffsetY, "TextOffsetY");
                fg.AppendItem(Description, "Description");
                fg.AppendItem(InventoryArt, "InventoryArt");
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                fg.AppendItem(DNAMDataTypeState, "DNAMDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.PreviewTransform = this.PreviewTransform.Combine(rhs.PreviewTransform, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.InventoryImage = this.InventoryImage.Combine(rhs.InventoryImage);
                ret.MessageIcon = this.MessageIcon.Combine(rhs.MessageIcon);
                ret.BookDescription = this.BookDescription.Combine(rhs.BookDescription);
                ret.Destructible = this.Destructible.Combine(rhs.Destructible, (l, r) => l.Combine(r));
                ret.PickUpSound = this.PickUpSound.Combine(rhs.PickUpSound);
                ret.PutDownSound = this.PutDownSound.Combine(rhs.PutDownSound);
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.FeaturedItemMessage = this.FeaturedItemMessage.Combine(rhs.FeaturedItemMessage);
                ret.Value = this.Value.Combine(rhs.Value);
                ret.Weight = this.Weight.Combine(rhs.Weight);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Teaches = this.Teaches.Combine(rhs.Teaches, (l, r) => l.Combine(r));
                ret.TextOffsetX = this.TextOffsetX.Combine(rhs.TextOffsetX);
                ret.TextOffsetY = this.TextOffsetY.Combine(rhs.TextOffsetY);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.InventoryArt = this.InventoryArt.Combine(rhs.InventoryArt);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                ret.DNAMDataTypeState = this.DNAMDataTypeState.Combine(rhs.DNAMDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public ObjectBounds.TranslationMask? ObjectBounds;
            public PreviewTransform.TranslationMask? PreviewTransform;
            public bool Name;
            public Model.TranslationMask? Model;
            public bool InventoryImage;
            public bool MessageIcon;
            public bool BookDescription;
            public Destructible.TranslationMask? Destructible;
            public bool PickUpSound;
            public bool PutDownSound;
            public bool Keywords;
            public bool FeaturedItemMessage;
            public bool Value;
            public bool Weight;
            public bool Flags;
            public BookTeachTarget.TranslationMask? Teaches;
            public bool TextOffsetX;
            public bool TextOffsetY;
            public bool Description;
            public bool InventoryArt;
            public bool DATADataTypeState;
            public bool DNAMDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.InventoryImage = defaultOn;
                this.MessageIcon = defaultOn;
                this.BookDescription = defaultOn;
                this.PickUpSound = defaultOn;
                this.PutDownSound = defaultOn;
                this.Keywords = defaultOn;
                this.FeaturedItemMessage = defaultOn;
                this.Value = defaultOn;
                this.Weight = defaultOn;
                this.Flags = defaultOn;
                this.TextOffsetX = defaultOn;
                this.TextOffsetY = defaultOn;
                this.Description = defaultOn;
                this.InventoryArt = defaultOn;
                this.DATADataTypeState = defaultOn;
                this.DNAMDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((PreviewTransform != null ? PreviewTransform.OnOverall : DefaultOn, PreviewTransform?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((InventoryImage, null));
                ret.Add((MessageIcon, null));
                ret.Add((BookDescription, null));
                ret.Add((Destructible != null ? Destructible.OnOverall : DefaultOn, Destructible?.GetCrystal()));
                ret.Add((PickUpSound, null));
                ret.Add((PutDownSound, null));
                ret.Add((Keywords, null));
                ret.Add((FeaturedItemMessage, null));
                ret.Add((Value, null));
                ret.Add((Weight, null));
                ret.Add((Flags, null));
                ret.Add((Teaches != null ? Teaches.OnOverall : DefaultOn, Teaches?.GetCrystal()));
                ret.Add((TextOffsetX, null));
                ret.Add((TextOffsetY, null));
                ret.Add((Description, null));
                ret.Add((InventoryArt, null));
                ret.Add((DATADataTypeState, null));
                ret.Add((DNAMDataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Book_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => BookCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => BookSetterCommon.Instance.RemapLinks(this, mapping);
        public Book(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private Book(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal Book(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Book(IFallout4Mod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Book(IFallout4Mod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Book>.ToString(this);
        }

        protected override Type LinkType => typeof(IBook);

        [Flags]
        public enum DATADataType
        {
        }
        [Flags]
        public enum DNAMDataType
        {
        }
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IBookGetter rhs) return false;
            return ((BookCommon)((IBookGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IBookGetter? obj)
        {
            return ((BookCommon)((IBookGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((BookCommon)((IBookGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => BookBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((BookBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Book CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new Book();
            ((BookSetterCommon)((IBookGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Book item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((BookSetterCommon)((IBookGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Book GetNew()
        {
            return new Book();
        }

    }
    #endregion

    #region Interface
    public partial interface IBook :
        IBookGetter,
        IConstructible,
        IFallout4MajorRecordInternal,
        IFormLinkContainer,
        IItem,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IBookInternal>,
        IModeled,
        INamed,
        INamedRequired,
        IObjectBounded,
        IObjectBoundedOptional,
        IObjectId,
        IScripted,
        ITranslatedNamed,
        ITranslatedNamedRequired,
        IWeightValue
    {
        /// <summary>
        /// Aspects: IScripted
        /// </summary>
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        /// <summary>
        /// Aspects: IObjectBounded, IObjectBoundedOptional
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        new PreviewTransform PreviewTransform { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        new TranslatedString? InventoryImage { get; set; }
        new TranslatedString? MessageIcon { get; set; }
        new TranslatedString BookDescription { get; set; }
        new Destructible? Destructible { get; set; }
        new IFormLinkNullable<ISoundDescriptorGetter> PickUpSound { get; set; }
        new IFormLinkNullable<ISoundDescriptorGetter> PutDownSound { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new IFormLinkNullable<IMessageGetter> FeaturedItemMessage { get; set; }
        new UInt32 Value { get; set; }
        new Single Weight { get; set; }
        new Book.Flag Flags { get; set; }
        new BookTeachTarget? Teaches { get; set; }
        new UInt32 TextOffsetX { get; set; }
        new UInt32 TextOffsetY { get; set; }
        new TranslatedString? Description { get; set; }
        new IFormLinkNullable<IStaticGetter> InventoryArt { get; set; }
        new Book.DATADataType DATADataTypeState { get; set; }
        new Book.DNAMDataType DNAMDataTypeState { get; set; }
    }

    public partial interface IBookInternal :
        IFallout4MajorRecordInternal,
        IBook,
        IBookGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.BOOK)]
    public partial interface IBookGetter :
        IFallout4MajorRecordGetter,
        IBinaryItem,
        IConstructibleGetter,
        IFormLinkContainerGetter,
        IItemGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IBookGetter>,
        IMapsToGetter<IBookGetter>,
        IModeledGetter,
        INamedGetter,
        INamedRequiredGetter,
        IObjectBoundedGetter,
        IObjectBoundedOptionalGetter,
        IObjectIdGetter,
        IScriptedGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter,
        IWeightValueGetter
    {
        static new ILoquiRegistration StaticRegistration => Book_Registration.Instance;
        #region VirtualMachineAdapter
        /// <summary>
        /// Aspects: IScriptedGetter
        /// </summary>
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter, IObjectBoundedOptionalGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        IPreviewTransformGetter PreviewTransform { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        ITranslatedStringGetter? InventoryImage { get; }
        ITranslatedStringGetter? MessageIcon { get; }
        ITranslatedStringGetter BookDescription { get; }
        IDestructibleGetter? Destructible { get; }
        IFormLinkNullableGetter<ISoundDescriptorGetter> PickUpSound { get; }
        IFormLinkNullableGetter<ISoundDescriptorGetter> PutDownSound { get; }
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        IFormLinkNullableGetter<IMessageGetter> FeaturedItemMessage { get; }
        UInt32 Value { get; }
        Single Weight { get; }
        Book.Flag Flags { get; }
        IBookTeachTargetGetter? Teaches { get; }
        UInt32 TextOffsetX { get; }
        UInt32 TextOffsetY { get; }
        ITranslatedStringGetter? Description { get; }
        IFormLinkNullableGetter<IStaticGetter> InventoryArt { get; }
        Book.DATADataType DATADataTypeState { get; }
        Book.DNAMDataType DNAMDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class BookMixIn
    {
        public static void Clear(this IBookInternal item)
        {
            ((BookSetterCommon)((IBookGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Book.Mask<bool> GetEqualsMask(
            this IBookGetter item,
            IBookGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BookCommon)((IBookGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IBookGetter item,
            string? name = null,
            Book.Mask<bool>? printMask = null)
        {
            return ((BookCommon)((IBookGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IBookGetter item,
            FileGeneration fg,
            string? name = null,
            Book.Mask<bool>? printMask = null)
        {
            ((BookCommon)((IBookGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IBookGetter item,
            IBookGetter rhs,
            Book.TranslationMask? equalsMask = null)
        {
            return ((BookCommon)((IBookGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IBookInternal lhs,
            IBookGetter rhs,
            out Book.ErrorMask errorMask,
            Book.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((BookSetterTranslationCommon)((IBookGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Book.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IBookInternal lhs,
            IBookGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((BookSetterTranslationCommon)((IBookGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Book DeepCopy(
            this IBookGetter item,
            Book.TranslationMask? copyMask = null)
        {
            return ((BookSetterTranslationCommon)((IBookGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Book DeepCopy(
            this IBookGetter item,
            out Book.ErrorMask errorMask,
            Book.TranslationMask? copyMask = null)
        {
            return ((BookSetterTranslationCommon)((IBookGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Book DeepCopy(
            this IBookGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((BookSetterTranslationCommon)((IBookGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Book Duplicate(
            this IBookGetter item,
            FormKey formKey,
            Book.TranslationMask? copyMask = null)
        {
            return ((BookCommon)((IBookGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IBookInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((BookSetterCommon)((IBookGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Book_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        ObjectBounds = 7,
        PreviewTransform = 8,
        Name = 9,
        Model = 10,
        InventoryImage = 11,
        MessageIcon = 12,
        BookDescription = 13,
        Destructible = 14,
        PickUpSound = 15,
        PutDownSound = 16,
        Keywords = 17,
        FeaturedItemMessage = 18,
        Value = 19,
        Weight = 20,
        Flags = 21,
        Teaches = 22,
        TextOffsetX = 23,
        TextOffsetY = 24,
        Description = 25,
        InventoryArt = 26,
        DATADataTypeState = 27,
        DNAMDataTypeState = 28,
    }
    #endregion

    #region Registration
    public partial class Book_Registration : ILoquiRegistration
    {
        public static readonly Book_Registration Instance = new Book_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 156,
            version: 0);

        public const string GUID = "c56f0c8d-eb97-4ab3-9fd8-1eb891d6ac5a";

        public const ushort AdditionalFieldCount = 23;

        public const ushort FieldCount = 29;

        public static readonly Type MaskType = typeof(Book.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Book.ErrorMask);

        public static readonly Type ClassType = typeof(Book);

        public static readonly Type GetterType = typeof(IBookGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IBook);

        public static readonly Type? InternalSetterType = typeof(IBookInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Book";

        public const string Name = "Book";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.BOOK;
        public static readonly Type BinaryWriteTranslation = typeof(BookBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class BookSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly BookSetterCommon Instance = new BookSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IBookInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.ObjectBounds.Clear();
            item.PreviewTransform.Clear();
            item.Name = default;
            item.Model = null;
            item.InventoryImage = default;
            item.MessageIcon = default;
            item.BookDescription.Clear();
            item.Destructible = null;
            item.PickUpSound.Clear();
            item.PutDownSound.Clear();
            item.Keywords = null;
            item.FeaturedItemMessage.Clear();
            item.Value = default;
            item.Weight = default;
            item.Flags = default;
            item.Teaches = null;
            item.TextOffsetX = default;
            item.TextOffsetY = default;
            item.Description = default;
            item.InventoryArt.Clear();
            item.DATADataTypeState = default;
            item.DNAMDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IBookInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IBookInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IBook obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.PreviewTransform.RemapLinks(mapping);
            obj.Model?.RemapLinks(mapping);
            obj.Destructible?.RemapLinks(mapping);
            obj.PickUpSound.Relink(mapping);
            obj.PutDownSound.Relink(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.FeaturedItemMessage.Relink(mapping);
            obj.Teaches?.RemapLinks(mapping);
            obj.InventoryArt.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IBookInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.MajorRecordParse<IBookInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: BookBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: BookBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (Book)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (Book)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    public partial class BookCommon : Fallout4MajorRecordCommon
    {
        public new static readonly BookCommon Instance = new BookCommon();

        public Book.Mask<bool> GetEqualsMask(
            IBookGetter item,
            IBookGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Book.Mask<bool>(false);
            ((BookCommon)((IBookGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IBookGetter item,
            IBookGetter rhs,
            Book.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.PreviewTransform = MaskItemExt.Factory(item.PreviewTransform.GetEqualsMask(rhs.PreviewTransform, include), include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.InventoryImage = object.Equals(item.InventoryImage, rhs.InventoryImage);
            ret.MessageIcon = object.Equals(item.MessageIcon, rhs.MessageIcon);
            ret.BookDescription = object.Equals(item.BookDescription, rhs.BookDescription);
            ret.Destructible = EqualsMaskHelper.EqualsHelper(
                item.Destructible,
                rhs.Destructible,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.PickUpSound = item.PickUpSound.Equals(rhs.PickUpSound);
            ret.PutDownSound = item.PutDownSound.Equals(rhs.PutDownSound);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.FeaturedItemMessage = item.FeaturedItemMessage.Equals(rhs.FeaturedItemMessage);
            ret.Value = item.Value == rhs.Value;
            ret.Weight = item.Weight.EqualsWithin(rhs.Weight);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Teaches = EqualsMaskHelper.EqualsHelper(
                item.Teaches,
                rhs.Teaches,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.TextOffsetX = item.TextOffsetX == rhs.TextOffsetX;
            ret.TextOffsetY = item.TextOffsetY == rhs.TextOffsetY;
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.InventoryArt = item.InventoryArt.Equals(rhs.InventoryArt);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            ret.DNAMDataTypeState = item.DNAMDataTypeState == rhs.DNAMDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IBookGetter item,
            string? name = null,
            Book.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IBookGetter item,
            FileGeneration fg,
            string? name = null,
            Book.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Book =>");
            }
            else
            {
                fg.AppendLine($"{name} (Book) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IBookGetter item,
            FileGeneration fg,
            Book.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                VirtualMachineAdapterItem?.ToString(fg, "VirtualMachineAdapter");
            }
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if (printMask?.PreviewTransform?.Overall ?? true)
            {
                item.PreviewTransform?.ToString(fg, "PreviewTransform");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.ToString(fg, "Model");
            }
            if ((printMask?.InventoryImage ?? true)
                && item.InventoryImage is {} InventoryImageItem)
            {
                fg.AppendItem(InventoryImageItem, "InventoryImage");
            }
            if ((printMask?.MessageIcon ?? true)
                && item.MessageIcon is {} MessageIconItem)
            {
                fg.AppendItem(MessageIconItem, "MessageIcon");
            }
            if (printMask?.BookDescription ?? true)
            {
                fg.AppendItem(item.BookDescription, "BookDescription");
            }
            if ((printMask?.Destructible?.Overall ?? true)
                && item.Destructible is {} DestructibleItem)
            {
                DestructibleItem?.ToString(fg, "Destructible");
            }
            if (printMask?.PickUpSound ?? true)
            {
                fg.AppendItem(item.PickUpSound.FormKeyNullable, "PickUpSound");
            }
            if (printMask?.PutDownSound ?? true)
            {
                fg.AppendItem(item.PutDownSound.FormKeyNullable, "PutDownSound");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                fg.AppendLine("Keywords =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.FeaturedItemMessage ?? true)
            {
                fg.AppendItem(item.FeaturedItemMessage.FormKeyNullable, "FeaturedItemMessage");
            }
            if (printMask?.Value ?? true)
            {
                fg.AppendItem(item.Value, "Value");
            }
            if (printMask?.Weight ?? true)
            {
                fg.AppendItem(item.Weight, "Weight");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if ((printMask?.Teaches?.Overall ?? true)
                && item.Teaches is {} TeachesItem)
            {
                TeachesItem?.ToString(fg, "Teaches");
            }
            if (printMask?.TextOffsetX ?? true)
            {
                fg.AppendItem(item.TextOffsetX, "TextOffsetX");
            }
            if (printMask?.TextOffsetY ?? true)
            {
                fg.AppendItem(item.TextOffsetY, "TextOffsetY");
            }
            if ((printMask?.Description ?? true)
                && item.Description is {} DescriptionItem)
            {
                fg.AppendItem(DescriptionItem, "Description");
            }
            if (printMask?.InventoryArt ?? true)
            {
                fg.AppendItem(item.InventoryArt.FormKeyNullable, "InventoryArt");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
            if (printMask?.DNAMDataTypeState ?? true)
            {
                fg.AppendItem(item.DNAMDataTypeState, "DNAMDataTypeState");
            }
        }
        
        public static Book_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Book_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Book_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Book_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Book_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Book_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Book_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Book_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Book_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Book_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Book_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Book_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IBookGetter? lhs,
            IBookGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)Book_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter, out var lhsVirtualMachineAdapter, out var rhsVirtualMachineAdapter, out var isVirtualMachineAdapterEqual))
                {
                    if (!((VirtualMachineAdapterCommon)((IVirtualMachineAdapterGetter)lhsVirtualMachineAdapter).CommonInstance()!).Equals(lhsVirtualMachineAdapter, rhsVirtualMachineAdapter, crystal?.GetSubCrystal((int)Book_FieldIndex.VirtualMachineAdapter))) return false;
                }
                else if (!isVirtualMachineAdapterEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Book_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, crystal?.GetSubCrystal((int)Book_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Book_FieldIndex.PreviewTransform) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.PreviewTransform, rhs.PreviewTransform, out var lhsPreviewTransform, out var rhsPreviewTransform, out var isPreviewTransformEqual))
                {
                    if (!((PreviewTransformCommon)((IPreviewTransformGetter)lhsPreviewTransform).CommonInstance()!).Equals(lhsPreviewTransform, rhsPreviewTransform, crystal?.GetSubCrystal((int)Book_FieldIndex.PreviewTransform))) return false;
                }
                else if (!isPreviewTransformEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Book_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Book_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, crystal?.GetSubCrystal((int)Book_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Book_FieldIndex.InventoryImage) ?? true))
            {
                if (!object.Equals(lhs.InventoryImage, rhs.InventoryImage)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Book_FieldIndex.MessageIcon) ?? true))
            {
                if (!object.Equals(lhs.MessageIcon, rhs.MessageIcon)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Book_FieldIndex.BookDescription) ?? true))
            {
                if (!object.Equals(lhs.BookDescription, rhs.BookDescription)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Book_FieldIndex.Destructible) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Destructible, rhs.Destructible, out var lhsDestructible, out var rhsDestructible, out var isDestructibleEqual))
                {
                    if (!((DestructibleCommon)((IDestructibleGetter)lhsDestructible).CommonInstance()!).Equals(lhsDestructible, rhsDestructible, crystal?.GetSubCrystal((int)Book_FieldIndex.Destructible))) return false;
                }
                else if (!isDestructibleEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Book_FieldIndex.PickUpSound) ?? true))
            {
                if (!lhs.PickUpSound.Equals(rhs.PickUpSound)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Book_FieldIndex.PutDownSound) ?? true))
            {
                if (!lhs.PutDownSound.Equals(rhs.PutDownSound)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Book_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Book_FieldIndex.FeaturedItemMessage) ?? true))
            {
                if (!lhs.FeaturedItemMessage.Equals(rhs.FeaturedItemMessage)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Book_FieldIndex.Value) ?? true))
            {
                if (lhs.Value != rhs.Value) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Book_FieldIndex.Weight) ?? true))
            {
                if (!lhs.Weight.EqualsWithin(rhs.Weight)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Book_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Book_FieldIndex.Teaches) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Teaches, rhs.Teaches, out var lhsTeaches, out var rhsTeaches, out var isTeachesEqual))
                {
                    if (!((BookTeachTargetCommon)((IBookTeachTargetGetter)lhsTeaches).CommonInstance()!).Equals(lhsTeaches, rhsTeaches, crystal?.GetSubCrystal((int)Book_FieldIndex.Teaches))) return false;
                }
                else if (!isTeachesEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Book_FieldIndex.TextOffsetX) ?? true))
            {
                if (lhs.TextOffsetX != rhs.TextOffsetX) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Book_FieldIndex.TextOffsetY) ?? true))
            {
                if (lhs.TextOffsetY != rhs.TextOffsetY) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Book_FieldIndex.Description) ?? true))
            {
                if (!object.Equals(lhs.Description, rhs.Description)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Book_FieldIndex.InventoryArt) ?? true))
            {
                if (!lhs.InventoryArt.Equals(rhs.InventoryArt)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Book_FieldIndex.DATADataTypeState) ?? true))
            {
                if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Book_FieldIndex.DNAMDataTypeState) ?? true))
            {
                if (lhs.DNAMDataTypeState != rhs.DNAMDataTypeState) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IBookGetter?)lhs,
                rhs: rhs as IBookGetter,
                crystal: crystal);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IBookGetter?)lhs,
                rhs: rhs as IBookGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(IBookGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapteritem)
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.ObjectBounds);
            hash.Add(item.PreviewTransform);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            if (item.InventoryImage is {} InventoryImageitem)
            {
                hash.Add(InventoryImageitem);
            }
            if (item.MessageIcon is {} MessageIconitem)
            {
                hash.Add(MessageIconitem);
            }
            hash.Add(item.BookDescription);
            if (item.Destructible is {} Destructibleitem)
            {
                hash.Add(Destructibleitem);
            }
            hash.Add(item.PickUpSound);
            hash.Add(item.PutDownSound);
            hash.Add(item.Keywords);
            hash.Add(item.FeaturedItemMessage);
            hash.Add(item.Value);
            hash.Add(item.Weight);
            hash.Add(item.Flags);
            if (item.Teaches is {} Teachesitem)
            {
                hash.Add(Teachesitem);
            }
            hash.Add(item.TextOffsetX);
            hash.Add(item.TextOffsetY);
            if (item.Description is {} Descriptionitem)
            {
                hash.Add(Descriptionitem);
            }
            hash.Add(item.InventoryArt);
            hash.Add(item.DATADataTypeState);
            hash.Add(item.DNAMDataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IBookGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IBookGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Book.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IBookGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            foreach (var item in obj.PreviewTransform.ContainedFormLinks)
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Destructible is {} DestructibleItems)
            {
                foreach (var item in DestructibleItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.PickUpSound.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.PickUpSound);
            }
            if (obj.PutDownSound.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.PutDownSound);
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.FeaturedItemMessage.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.FeaturedItemMessage);
            }
            if (obj.Teaches is IFormLinkContainerGetter TeacheslinkCont)
            {
                foreach (var item in TeacheslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.InventoryArt.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.InventoryArt);
            }
            yield break;
        }
        
        #region Duplicate
        public Book Duplicate(
            IBookGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Book(formKey);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IBookGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IBookGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class BookSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly BookSetterTranslationCommon Instance = new BookSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IBookInternal item,
            IBookGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IBook item,
            IBookGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Book_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Book_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter is {} rhsVirtualMachineAdapter)
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Book_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Book_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Book_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Book_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Book_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Book_FieldIndex.PreviewTransform) ?? true))
            {
                errorMask?.PushIndex((int)Book_FieldIndex.PreviewTransform);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Book_FieldIndex.PreviewTransform) ?? true))
                    {
                        item.PreviewTransform = rhs.PreviewTransform.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Book_FieldIndex.PreviewTransform),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Book_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Book_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Book_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Book_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Book_FieldIndex.InventoryImage) ?? true))
            {
                item.InventoryImage = rhs.InventoryImage?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Book_FieldIndex.MessageIcon) ?? true))
            {
                item.MessageIcon = rhs.MessageIcon?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Book_FieldIndex.BookDescription) ?? true))
            {
                item.BookDescription = rhs.BookDescription.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Book_FieldIndex.Destructible) ?? true))
            {
                errorMask?.PushIndex((int)Book_FieldIndex.Destructible);
                try
                {
                    if(rhs.Destructible is {} rhsDestructible)
                    {
                        item.Destructible = rhsDestructible.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Book_FieldIndex.Destructible));
                    }
                    else
                    {
                        item.Destructible = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Book_FieldIndex.PickUpSound) ?? true))
            {
                item.PickUpSound.SetTo(rhs.PickUpSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Book_FieldIndex.PutDownSound) ?? true))
            {
                item.PutDownSound.SetTo(rhs.PutDownSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Book_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Book_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                            .Select(r => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(r.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Book_FieldIndex.FeaturedItemMessage) ?? true))
            {
                item.FeaturedItemMessage.SetTo(rhs.FeaturedItemMessage.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Book_FieldIndex.Value) ?? true))
            {
                item.Value = rhs.Value;
            }
            if ((copyMask?.GetShouldTranslate((int)Book_FieldIndex.Weight) ?? true))
            {
                item.Weight = rhs.Weight;
            }
            if ((copyMask?.GetShouldTranslate((int)Book_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Book_FieldIndex.Teaches) ?? true))
            {
                errorMask?.PushIndex((int)Book_FieldIndex.Teaches);
                try
                {
                    if(rhs.Teaches is {} rhsTeaches)
                    {
                        item.Teaches = rhsTeaches.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Book_FieldIndex.Teaches));
                    }
                    else
                    {
                        item.Teaches = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Book_FieldIndex.TextOffsetX) ?? true))
            {
                item.TextOffsetX = rhs.TextOffsetX;
            }
            if ((copyMask?.GetShouldTranslate((int)Book_FieldIndex.TextOffsetY) ?? true))
            {
                item.TextOffsetY = rhs.TextOffsetY;
            }
            if ((copyMask?.GetShouldTranslate((int)Book_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Book_FieldIndex.InventoryArt) ?? true))
            {
                item.InventoryArt.SetTo(rhs.InventoryArt.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Book_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
            if ((copyMask?.GetShouldTranslate((int)Book_FieldIndex.DNAMDataTypeState) ?? true))
            {
                item.DNAMDataTypeState = rhs.DNAMDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IBookInternal)item,
                rhs: (IBookGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IBook)item,
                rhs: (IBookGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IBookInternal)item,
                rhs: (IBookGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IBook)item,
                rhs: (IBookGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Book DeepCopy(
            IBookGetter item,
            Book.TranslationMask? copyMask = null)
        {
            Book ret = (Book)((BookCommon)((IBookGetter)item).CommonInstance()!).GetNew();
            ((BookSetterTranslationCommon)((IBookGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Book DeepCopy(
            IBookGetter item,
            out Book.ErrorMask errorMask,
            Book.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Book ret = (Book)((BookCommon)((IBookGetter)item).CommonInstance()!).GetNew();
            ((BookSetterTranslationCommon)((IBookGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Book.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Book DeepCopy(
            IBookGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Book ret = (Book)((BookCommon)((IBookGetter)item).CommonInstance()!).GetNew();
            ((BookSetterTranslationCommon)((IBookGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Book
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Book_Registration.Instance;
        public new static Book_Registration StaticRegistration => Book_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => BookCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return BookSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => BookSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class BookBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static BookBinaryWriteTranslation Instance = new BookBinaryWriteTranslation();

        public static void WriteEmbedded(
            IBookGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IBookGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            var PreviewTransformItem = item.PreviewTransform;
            ((PreviewTransformBinaryWriteTranslation)((IBinaryItem)PreviewTransformItem).BinaryWriteTranslator).Write(
                item: PreviewTransformItem,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.InventoryImage,
                header: translationParams.ConvertToCustom(RecordTypes.ICON),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MessageIcon,
                header: translationParams.ConvertToCustom(RecordTypes.MICO),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BookDescription,
                header: translationParams.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            if (item.Destructible is {} DestructibleItem)
            {
                ((DestructibleBinaryWriteTranslation)((IBinaryItem)DestructibleItem).BinaryWriteTranslator).Write(
                    item: DestructibleItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PickUpSound,
                header: translationParams.ConvertToCustom(RecordTypes.YNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PutDownSound,
                header: translationParams.ConvertToCustom(RecordTypes.ZNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams? conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FeaturedItemMessage,
                header: translationParams.ConvertToCustom(RecordTypes.FIMD));
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DATA)))
            {
                writer.Write(item.Value);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Weight);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DNAM)))
            {
                EnumBinaryTranslation<Book.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1);
                BookBinaryWriteTranslation.WriteBinaryTeaches(
                    writer: writer,
                    item: item);
                writer.Write(item.TextOffsetX);
                writer.Write(item.TextOffsetY);
            }
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.InventoryArt,
                header: translationParams.ConvertToCustom(RecordTypes.INAM));
        }

        public static partial void WriteBinaryTeachesCustom(
            MutagenWriter writer,
            IBookGetter item);

        public static void WriteBinaryTeaches(
            MutagenWriter writer,
            IBookGetter item)
        {
            WriteBinaryTeachesCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IBookGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Record(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.BOOK)))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        translationParams: translationParams);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Enrich(ex, item);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IBookGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IBookGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IBookGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class BookBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static BookBinaryCreateTranslation Instance = new BookBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.BOOK;
        public static void FillBinaryStructs(
            IBookInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IBookInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Fallout4.VirtualMachineAdapter.CreateFromBinary(frame: frame);
                    return (int)Book_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Fallout4.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Book_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.PTRN:
                {
                    item.PreviewTransform = Mutagen.Bethesda.Fallout4.PreviewTransform.CreateFromBinary(frame: frame);
                    return (int)Book_FieldIndex.PreviewTransform;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Book_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Fallout4.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams);
                    return (int)Book_FieldIndex.Model;
                }
                case RecordTypeInts.ICON:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.InventoryImage = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Book_FieldIndex.InventoryImage;
                }
                case RecordTypeInts.MICO:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MessageIcon = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Book_FieldIndex.MessageIcon;
                }
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BookDescription = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Book_FieldIndex.BookDescription;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DAMC:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DSTA:
                case RecordTypeInts.DMDL:
                {
                    item.Destructible = Mutagen.Bethesda.Fallout4.Destructible.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams);
                    return (int)Book_FieldIndex.Destructible;
                }
                case RecordTypeInts.YNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PickUpSound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Book_FieldIndex.PickUpSound;
                }
                case RecordTypeInts.ZNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PutDownSound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Book_FieldIndex.PutDownSound;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Book_FieldIndex.Keywords;
                }
                case RecordTypeInts.FIMD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FeaturedItemMessage.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Book_FieldIndex.FeaturedItemMessage;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Value = dataFrame.ReadUInt32();
                    item.Weight = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)Book_FieldIndex.Weight;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Flags = EnumBinaryTranslation<Book.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    BookBinaryCreateTranslation.FillBinaryTeachesCustom(
                        frame: dataFrame,
                        item: item);
                    item.TextOffsetX = dataFrame.ReadUInt32();
                    item.TextOffsetY = dataFrame.ReadUInt32();
                    return (int)Book_FieldIndex.TextOffsetY;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Book_FieldIndex.Description;
                }
                case RecordTypeInts.INAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.InventoryArt.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Book_FieldIndex.InventoryArt;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        public static partial void FillBinaryTeachesCustom(
            MutagenFrame frame,
            IBookInternal item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class BookBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class BookBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IBookGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Book_Registration.Instance;
        public new static Book_Registration StaticRegistration => Book_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => BookCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => BookSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => BookCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => BookBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((BookBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IBook);


        #region VirtualMachineAdapter
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(new OverlayStream(_data.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new OverlayStream(_data.Slice(_ObjectBoundsLocation!.Value.Min), _package), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region PreviewTransform
        private RangeInt32? _PreviewTransformLocation;
        private IPreviewTransformGetter? _PreviewTransform => _PreviewTransformLocation.HasValue ? PreviewTransformBinaryOverlay.PreviewTransformFactory(new OverlayStream(_data.Slice(_PreviewTransformLocation!.Value.Min), _package), _package) : default;
        public IPreviewTransformGetter PreviewTransform => _PreviewTransform ?? new PreviewTransform();
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        public IModelGetter? Model { get; private set; }
        #region InventoryImage
        private int? _InventoryImageLocation;
        public ITranslatedStringGetter? InventoryImage => _InventoryImageLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _InventoryImageLocation.Value, _package.MetaData.Constants), StringsSource.DL, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        #region MessageIcon
        private int? _MessageIconLocation;
        public ITranslatedStringGetter? MessageIcon => _MessageIconLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _MessageIconLocation.Value, _package.MetaData.Constants), StringsSource.DL, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        #region BookDescription
        private int? _BookDescriptionLocation;
        public ITranslatedStringGetter BookDescription => _BookDescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _BookDescriptionLocation.Value, _package.MetaData.Constants), StringsSource.DL, _package.MetaData.StringsLookup) : TranslatedString.Empty;
        #endregion
        public IDestructibleGetter? Destructible { get; private set; }
        #region PickUpSound
        private int? _PickUpSoundLocation;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> PickUpSound => _PickUpSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _PickUpSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        #region PutDownSound
        private int? _PutDownSoundLocation;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> PutDownSound => _PutDownSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _PutDownSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #region FeaturedItemMessage
        private int? _FeaturedItemMessageLocation;
        public IFormLinkNullableGetter<IMessageGetter> FeaturedItemMessage => _FeaturedItemMessageLocation.HasValue ? new FormLinkNullable<IMessageGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _FeaturedItemMessageLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IMessageGetter>.Null;
        #endregion
        private int? _DATALocation;
        public Book.DATADataType DATADataTypeState { get; private set; }
        #region Value
        private int _ValueLocation => _DATALocation!.Value;
        private bool _Value_IsSet => _DATALocation.HasValue;
        public UInt32 Value => _Value_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(_ValueLocation, 4)) : default;
        #endregion
        #region Weight
        private int _WeightLocation => _DATALocation!.Value + 0x4;
        private bool _Weight_IsSet => _DATALocation.HasValue;
        public Single Weight => _Weight_IsSet ? _data.Slice(_WeightLocation, 4).Float() : default;
        #endregion
        private int? _DNAMLocation;
        public Book.DNAMDataType DNAMDataTypeState { get; private set; }
        #region Flags
        private int _FlagsLocation => _DNAMLocation!.Value;
        private bool _Flags_IsSet => _DNAMLocation.HasValue;
        public Book.Flag Flags => _Flags_IsSet ? (Book.Flag)_data.Span.Slice(_FlagsLocation, 0x1)[0] : default;
        #endregion
        #region Teaches
        private int _TeachesLocation => _DNAMLocation!.Value + 0x1;
        public IBookTeachTargetGetter? Teaches => GetTeachesCustom();
        #endregion
        #region TextOffsetX
        private int _TextOffsetXLocation => _DNAMLocation!.Value + 0x5;
        private bool _TextOffsetX_IsSet => _DNAMLocation.HasValue;
        public UInt32 TextOffsetX => _TextOffsetX_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(_TextOffsetXLocation, 4)) : default;
        #endregion
        #region TextOffsetY
        private int _TextOffsetYLocation => _DNAMLocation!.Value + 0x9;
        private bool _TextOffsetY_IsSet => _DNAMLocation.HasValue;
        public UInt32 TextOffsetY => _TextOffsetY_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(_TextOffsetYLocation, 4)) : default;
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter? Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.DL, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        #region InventoryArt
        private int? _InventoryArtLocation;
        public IFormLinkNullableGetter<IStaticGetter> InventoryArt => _InventoryArtLocation.HasValue ? new FormLinkNullable<IStaticGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _InventoryArtLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IStaticGetter>.Null;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected BookBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static BookBinaryOverlay BookFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            stream = PluginUtilityTranslation.DecompressStream(stream);
            var ret = new BookBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static BookBinaryOverlay BookFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return BookFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Book_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Book_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.PTRN:
                {
                    _PreviewTransformLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Book_FieldIndex.PreviewTransform;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Book_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        parseParams: parseParams);
                    return (int)Book_FieldIndex.Model;
                }
                case RecordTypeInts.ICON:
                {
                    _InventoryImageLocation = (stream.Position - offset);
                    return (int)Book_FieldIndex.InventoryImage;
                }
                case RecordTypeInts.MICO:
                {
                    _MessageIconLocation = (stream.Position - offset);
                    return (int)Book_FieldIndex.MessageIcon;
                }
                case RecordTypeInts.DESC:
                {
                    _BookDescriptionLocation = (stream.Position - offset);
                    return (int)Book_FieldIndex.BookDescription;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DAMC:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DSTA:
                case RecordTypeInts.DMDL:
                {
                    this.Destructible = DestructibleBinaryOverlay.DestructibleFactory(
                        stream: stream,
                        package: _package,
                        parseParams: parseParams);
                    return (int)Book_FieldIndex.Destructible;
                }
                case RecordTypeInts.YNAM:
                {
                    _PickUpSoundLocation = (stream.Position - offset);
                    return (int)Book_FieldIndex.PickUpSound;
                }
                case RecordTypeInts.ZNAM:
                {
                    _PutDownSoundLocation = (stream.Position - offset);
                    return (int)Book_FieldIndex.PutDownSound;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        subrecordType: RecordTypes.KWDA,
                        getter: (s, p) => new FormLink<IKeywordGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    return (int)Book_FieldIndex.Keywords;
                }
                case RecordTypeInts.FIMD:
                {
                    _FeaturedItemMessageLocation = (stream.Position - offset);
                    return (int)Book_FieldIndex.FeaturedItemMessage;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)Book_FieldIndex.Weight;
                }
                case RecordTypeInts.DNAM:
                {
                    _DNAMLocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)Book_FieldIndex.TextOffsetY;
                }
                case RecordTypeInts.CNAM:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)Book_FieldIndex.Description;
                }
                case RecordTypeInts.INAM:
                {
                    _InventoryArtLocation = (stream.Position - offset);
                    return (int)Book_FieldIndex.InventoryArt;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            BookMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Book>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IBookGetter rhs) return false;
            return ((BookCommon)((IBookGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IBookGetter? obj)
        {
            return ((BookCommon)((IBookGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((BookCommon)((IBookGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

