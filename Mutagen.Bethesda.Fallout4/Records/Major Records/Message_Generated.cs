/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.RecordTypeMapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Message :
        Fallout4MajorRecord,
        IEquatable<IMessageGetter>,
        ILoquiObjectSetter<Message>,
        IMessageInternal
    {
        #region Ctor
        protected Message()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Description
        public TranslatedString Description { get; set; } = string.Empty;
        ITranslatedStringGetter IMessageGetter.Description => this.Description;
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IMessageGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region INAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _INAM = new byte[0];
        public MemorySlice<Byte> INAM
        {
            get => _INAM;
            set => this._INAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IMessageGetter.INAM => this.INAM;
        #endregion
        #region OwnerQuest
        private readonly IFormLinkNullable<IQuestGetter> _OwnerQuest = new FormLinkNullable<IQuestGetter>();
        public IFormLinkNullable<IQuestGetter> OwnerQuest
        {
            get => _OwnerQuest;
            set => _OwnerQuest.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IQuestGetter> IMessageGetter.OwnerQuest => this.OwnerQuest;
        #endregion
        #region Flags
        public Message.Flag Flags { get; set; } = default;
        #endregion
        #region DisplayTime
        public UInt32? DisplayTime { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IMessageGetter.DisplayTime => this.DisplayTime;
        #endregion
        #region SWF
        public String? SWF { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IMessageGetter.SWF => this.SWF;
        #endregion
        #region ShortTitle
        public TranslatedString? ShortTitle { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IMessageGetter.ShortTitle => this.ShortTitle;
        #endregion
        #region MenuButtons
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<MessageButton> _MenuButtons = new ExtendedList<MessageButton>();
        public ExtendedList<MessageButton> MenuButtons
        {
            get => this._MenuButtons;
            init => this._MenuButtons = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IMessageButtonGetter> IMessageGetter.MenuButtons => _MenuButtons;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            MessageMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Description = initialValue;
                this.Name = initialValue;
                this.INAM = initialValue;
                this.OwnerQuest = initialValue;
                this.Flags = initialValue;
                this.DisplayTime = initialValue;
                this.SWF = initialValue;
                this.ShortTitle = initialValue;
                this.MenuButtons = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MessageButton.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, MessageButton.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Description,
                TItem Name,
                TItem INAM,
                TItem OwnerQuest,
                TItem Flags,
                TItem DisplayTime,
                TItem SWF,
                TItem ShortTitle,
                TItem MenuButtons)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Description = Description;
                this.Name = Name;
                this.INAM = INAM;
                this.OwnerQuest = OwnerQuest;
                this.Flags = Flags;
                this.DisplayTime = DisplayTime;
                this.SWF = SWF;
                this.ShortTitle = ShortTitle;
                this.MenuButtons = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MessageButton.Mask<TItem>?>>?>(MenuButtons, Enumerable.Empty<MaskItemIndexed<TItem, MessageButton.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Description;
            public TItem Name;
            public TItem INAM;
            public TItem OwnerQuest;
            public TItem Flags;
            public TItem DisplayTime;
            public TItem SWF;
            public TItem ShortTitle;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MessageButton.Mask<TItem>?>>?>? MenuButtons;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.INAM, rhs.INAM)) return false;
                if (!object.Equals(this.OwnerQuest, rhs.OwnerQuest)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.DisplayTime, rhs.DisplayTime)) return false;
                if (!object.Equals(this.SWF, rhs.SWF)) return false;
                if (!object.Equals(this.ShortTitle, rhs.ShortTitle)) return false;
                if (!object.Equals(this.MenuButtons, rhs.MenuButtons)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Description);
                hash.Add(this.Name);
                hash.Add(this.INAM);
                hash.Add(this.OwnerQuest);
                hash.Add(this.Flags);
                hash.Add(this.DisplayTime);
                hash.Add(this.SWF);
                hash.Add(this.ShortTitle);
                hash.Add(this.MenuButtons);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Description)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.INAM)) return false;
                if (!eval(this.OwnerQuest)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.DisplayTime)) return false;
                if (!eval(this.SWF)) return false;
                if (!eval(this.ShortTitle)) return false;
                if (this.MenuButtons != null)
                {
                    if (!eval(this.MenuButtons.Overall)) return false;
                    if (this.MenuButtons.Specific != null)
                    {
                        foreach (var item in this.MenuButtons.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Description)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.INAM)) return true;
                if (eval(this.OwnerQuest)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.DisplayTime)) return true;
                if (eval(this.SWF)) return true;
                if (eval(this.ShortTitle)) return true;
                if (this.MenuButtons != null)
                {
                    if (eval(this.MenuButtons.Overall)) return true;
                    if (this.MenuButtons.Specific != null)
                    {
                        foreach (var item in this.MenuButtons.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Message.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Description = eval(this.Description);
                obj.Name = eval(this.Name);
                obj.INAM = eval(this.INAM);
                obj.OwnerQuest = eval(this.OwnerQuest);
                obj.Flags = eval(this.Flags);
                obj.DisplayTime = eval(this.DisplayTime);
                obj.SWF = eval(this.SWF);
                obj.ShortTitle = eval(this.ShortTitle);
                if (MenuButtons != null)
                {
                    obj.MenuButtons = new MaskItem<R, IEnumerable<MaskItemIndexed<R, MessageButton.Mask<R>?>>?>(eval(this.MenuButtons.Overall), Enumerable.Empty<MaskItemIndexed<R, MessageButton.Mask<R>?>>());
                    if (MenuButtons.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, MessageButton.Mask<R>?>>();
                        obj.MenuButtons.Specific = l;
                        foreach (var item in MenuButtons.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, MessageButton.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, MessageButton.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Message.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Message.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Message.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Description ?? true)
                    {
                        fg.AppendItem(Description, "Description");
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.INAM ?? true)
                    {
                        fg.AppendItem(INAM, "INAM");
                    }
                    if (printMask?.OwnerQuest ?? true)
                    {
                        fg.AppendItem(OwnerQuest, "OwnerQuest");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.DisplayTime ?? true)
                    {
                        fg.AppendItem(DisplayTime, "DisplayTime");
                    }
                    if (printMask?.SWF ?? true)
                    {
                        fg.AppendItem(SWF, "SWF");
                    }
                    if (printMask?.ShortTitle ?? true)
                    {
                        fg.AppendItem(ShortTitle, "ShortTitle");
                    }
                    if ((printMask?.MenuButtons?.Overall ?? true)
                        && MenuButtons is {} MenuButtonsItem)
                    {
                        fg.AppendLine("MenuButtons =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(MenuButtonsItem.Overall);
                            if (MenuButtonsItem.Specific != null)
                            {
                                foreach (var subItem in MenuButtonsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Description;
            public Exception? Name;
            public Exception? INAM;
            public Exception? OwnerQuest;
            public Exception? Flags;
            public Exception? DisplayTime;
            public Exception? SWF;
            public Exception? ShortTitle;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MessageButton.ErrorMask?>>?>? MenuButtons;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Message_FieldIndex enu = (Message_FieldIndex)index;
                switch (enu)
                {
                    case Message_FieldIndex.Description:
                        return Description;
                    case Message_FieldIndex.Name:
                        return Name;
                    case Message_FieldIndex.INAM:
                        return INAM;
                    case Message_FieldIndex.OwnerQuest:
                        return OwnerQuest;
                    case Message_FieldIndex.Flags:
                        return Flags;
                    case Message_FieldIndex.DisplayTime:
                        return DisplayTime;
                    case Message_FieldIndex.SWF:
                        return SWF;
                    case Message_FieldIndex.ShortTitle:
                        return ShortTitle;
                    case Message_FieldIndex.MenuButtons:
                        return MenuButtons;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Message_FieldIndex enu = (Message_FieldIndex)index;
                switch (enu)
                {
                    case Message_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Message_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Message_FieldIndex.INAM:
                        this.INAM = ex;
                        break;
                    case Message_FieldIndex.OwnerQuest:
                        this.OwnerQuest = ex;
                        break;
                    case Message_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Message_FieldIndex.DisplayTime:
                        this.DisplayTime = ex;
                        break;
                    case Message_FieldIndex.SWF:
                        this.SWF = ex;
                        break;
                    case Message_FieldIndex.ShortTitle:
                        this.ShortTitle = ex;
                        break;
                    case Message_FieldIndex.MenuButtons:
                        this.MenuButtons = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MessageButton.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Message_FieldIndex enu = (Message_FieldIndex)index;
                switch (enu)
                {
                    case Message_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case Message_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Message_FieldIndex.INAM:
                        this.INAM = (Exception?)obj;
                        break;
                    case Message_FieldIndex.OwnerQuest:
                        this.OwnerQuest = (Exception?)obj;
                        break;
                    case Message_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Message_FieldIndex.DisplayTime:
                        this.DisplayTime = (Exception?)obj;
                        break;
                    case Message_FieldIndex.SWF:
                        this.SWF = (Exception?)obj;
                        break;
                    case Message_FieldIndex.ShortTitle:
                        this.ShortTitle = (Exception?)obj;
                        break;
                    case Message_FieldIndex.MenuButtons:
                        this.MenuButtons = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MessageButton.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Description != null) return true;
                if (Name != null) return true;
                if (INAM != null) return true;
                if (OwnerQuest != null) return true;
                if (Flags != null) return true;
                if (DisplayTime != null) return true;
                if (SWF != null) return true;
                if (ShortTitle != null) return true;
                if (MenuButtons != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Description, "Description");
                fg.AppendItem(Name, "Name");
                fg.AppendItem(INAM, "INAM");
                fg.AppendItem(OwnerQuest, "OwnerQuest");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(DisplayTime, "DisplayTime");
                fg.AppendItem(SWF, "SWF");
                fg.AppendItem(ShortTitle, "ShortTitle");
                if (MenuButtons is {} MenuButtonsItem)
                {
                    fg.AppendLine("MenuButtons =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(MenuButtonsItem.Overall);
                        if (MenuButtonsItem.Specific != null)
                        {
                            foreach (var subItem in MenuButtonsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.INAM = this.INAM.Combine(rhs.INAM);
                ret.OwnerQuest = this.OwnerQuest.Combine(rhs.OwnerQuest);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.DisplayTime = this.DisplayTime.Combine(rhs.DisplayTime);
                ret.SWF = this.SWF.Combine(rhs.SWF);
                ret.ShortTitle = this.ShortTitle.Combine(rhs.ShortTitle);
                ret.MenuButtons = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MessageButton.ErrorMask?>>?>(ExceptionExt.Combine(this.MenuButtons?.Overall, rhs.MenuButtons?.Overall), ExceptionExt.Combine(this.MenuButtons?.Specific, rhs.MenuButtons?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Description;
            public bool Name;
            public bool INAM;
            public bool OwnerQuest;
            public bool Flags;
            public bool DisplayTime;
            public bool SWF;
            public bool ShortTitle;
            public MessageButton.TranslationMask? MenuButtons;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Description = defaultOn;
                this.Name = defaultOn;
                this.INAM = defaultOn;
                this.OwnerQuest = defaultOn;
                this.Flags = defaultOn;
                this.DisplayTime = defaultOn;
                this.SWF = defaultOn;
                this.ShortTitle = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Description, null));
                ret.Add((Name, null));
                ret.Add((INAM, null));
                ret.Add((OwnerQuest, null));
                ret.Add((Flags, null));
                ret.Add((DisplayTime, null));
                ret.Add((SWF, null));
                ret.Add((ShortTitle, null));
                ret.Add((MenuButtons == null ? DefaultOn : !MenuButtons.GetCrystal().CopyNothing, MenuButtons?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Message_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => MessageCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => MessageSetterCommon.Instance.RemapLinks(this, mapping);
        public Message(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private Message(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal Message(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Message(IFallout4Mod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Message(IFallout4Mod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Message>.ToString(this);
        }

        protected override Type LinkType => typeof(IMessage);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IMessageGetter rhs) return false;
            return ((MessageCommon)((IMessageGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IMessageGetter? obj)
        {
            return ((MessageCommon)((IMessageGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((MessageCommon)((IMessageGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MessageBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((MessageBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Message CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new Message();
            ((MessageSetterCommon)((IMessageGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Message item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((MessageSetterCommon)((IMessageGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Message GetNew()
        {
            return new Message();
        }

    }
    #endregion

    #region Interface
    public partial interface IMessage :
        IFallout4MajorRecordInternal,
        IFormLinkContainer,
        ILoquiObjectSetter<IMessageInternal>,
        IMessageGetter,
        INamed,
        INamedRequired,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        new TranslatedString Description { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new MemorySlice<Byte> INAM { get; set; }
        new IFormLinkNullable<IQuestGetter> OwnerQuest { get; set; }
        new Message.Flag Flags { get; set; }
        new UInt32? DisplayTime { get; set; }
        new String? SWF { get; set; }
        new TranslatedString? ShortTitle { get; set; }
        new ExtendedList<MessageButton> MenuButtons { get; }
    }

    public partial interface IMessageInternal :
        IFallout4MajorRecordInternal,
        IMessage,
        IMessageGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.MESG)]
    public partial interface IMessageGetter :
        IFallout4MajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IMessageGetter>,
        IMapsToGetter<IMessageGetter>,
        INamedGetter,
        INamedRequiredGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Message_Registration.Instance;
        ITranslatedStringGetter Description { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        ReadOnlyMemorySlice<Byte> INAM { get; }
        IFormLinkNullableGetter<IQuestGetter> OwnerQuest { get; }
        Message.Flag Flags { get; }
        UInt32? DisplayTime { get; }
        String? SWF { get; }
        ITranslatedStringGetter? ShortTitle { get; }
        IReadOnlyList<IMessageButtonGetter> MenuButtons { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class MessageMixIn
    {
        public static void Clear(this IMessageInternal item)
        {
            ((MessageSetterCommon)((IMessageGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Message.Mask<bool> GetEqualsMask(
            this IMessageGetter item,
            IMessageGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MessageCommon)((IMessageGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IMessageGetter item,
            string? name = null,
            Message.Mask<bool>? printMask = null)
        {
            return ((MessageCommon)((IMessageGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IMessageGetter item,
            FileGeneration fg,
            string? name = null,
            Message.Mask<bool>? printMask = null)
        {
            ((MessageCommon)((IMessageGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IMessageGetter item,
            IMessageGetter rhs,
            Message.TranslationMask? equalsMask = null)
        {
            return ((MessageCommon)((IMessageGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IMessageInternal lhs,
            IMessageGetter rhs,
            out Message.ErrorMask errorMask,
            Message.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((MessageSetterTranslationCommon)((IMessageGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Message.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IMessageInternal lhs,
            IMessageGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((MessageSetterTranslationCommon)((IMessageGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Message DeepCopy(
            this IMessageGetter item,
            Message.TranslationMask? copyMask = null)
        {
            return ((MessageSetterTranslationCommon)((IMessageGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Message DeepCopy(
            this IMessageGetter item,
            out Message.ErrorMask errorMask,
            Message.TranslationMask? copyMask = null)
        {
            return ((MessageSetterTranslationCommon)((IMessageGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Message DeepCopy(
            this IMessageGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((MessageSetterTranslationCommon)((IMessageGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Message Duplicate(
            this IMessageGetter item,
            FormKey formKey,
            Message.TranslationMask? copyMask = null)
        {
            return ((MessageCommon)((IMessageGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IMessageInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((MessageSetterCommon)((IMessageGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Message_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Description = 6,
        Name = 7,
        INAM = 8,
        OwnerQuest = 9,
        Flags = 10,
        DisplayTime = 11,
        SWF = 12,
        ShortTitle = 13,
        MenuButtons = 14,
    }
    #endregion

    #region Registration
    public partial class Message_Registration : ILoquiRegistration
    {
        public static readonly Message_Registration Instance = new Message_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 152,
            version: 0);

        public const string GUID = "8a368675-cfab-43a2-a05b-2d2532d538fd";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(Message.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Message.ErrorMask);

        public static readonly Type ClassType = typeof(Message);

        public static readonly Type GetterType = typeof(IMessageGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMessage);

        public static readonly Type? InternalSetterType = typeof(IMessageInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Message";

        public const string Name = "Message";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.MESG;
        public static readonly Type BinaryWriteTranslation = typeof(MessageBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class MessageSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly MessageSetterCommon Instance = new MessageSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IMessageInternal item)
        {
            ClearPartial();
            item.Description.Clear();
            item.Name = default;
            item.INAM = new byte[0];
            item.OwnerQuest.Clear();
            item.Flags = default;
            item.DisplayTime = default;
            item.SWF = default;
            item.ShortTitle = default;
            item.MenuButtons.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IMessageInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IMessageInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IMessage obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.OwnerQuest.Relink(mapping);
            obj.MenuButtons.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IMessageInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.MajorRecordParse<IMessageInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: MessageBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: MessageBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (Message)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (Message)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    public partial class MessageCommon : Fallout4MajorRecordCommon
    {
        public new static readonly MessageCommon Instance = new MessageCommon();

        public Message.Mask<bool> GetEqualsMask(
            IMessageGetter item,
            IMessageGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Message.Mask<bool>(false);
            ((MessageCommon)((IMessageGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMessageGetter item,
            IMessageGetter rhs,
            Message.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.INAM = MemoryExtensions.SequenceEqual(item.INAM.Span, rhs.INAM.Span);
            ret.OwnerQuest = item.OwnerQuest.Equals(rhs.OwnerQuest);
            ret.Flags = item.Flags == rhs.Flags;
            ret.DisplayTime = item.DisplayTime == rhs.DisplayTime;
            ret.SWF = string.Equals(item.SWF, rhs.SWF);
            ret.ShortTitle = object.Equals(item.ShortTitle, rhs.ShortTitle);
            ret.MenuButtons = item.MenuButtons.CollectionEqualsHelper(
                rhs.MenuButtons,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IMessageGetter item,
            string? name = null,
            Message.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IMessageGetter item,
            FileGeneration fg,
            string? name = null,
            Message.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Message =>");
            }
            else
            {
                fg.AppendLine($"{name} (Message) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IMessageGetter item,
            FileGeneration fg,
            Message.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Description ?? true)
            {
                fg.AppendItem(item.Description, "Description");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                fg.AppendItem(NameItem, "Name");
            }
            if (printMask?.INAM ?? true)
            {
                fg.AppendLine($"INAM => {SpanExt.ToHexString(item.INAM)}");
            }
            if (printMask?.OwnerQuest ?? true)
            {
                fg.AppendItem(item.OwnerQuest.FormKeyNullable, "OwnerQuest");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if ((printMask?.DisplayTime ?? true)
                && item.DisplayTime is {} DisplayTimeItem)
            {
                fg.AppendItem(DisplayTimeItem, "DisplayTime");
            }
            if ((printMask?.SWF ?? true)
                && item.SWF is {} SWFItem)
            {
                fg.AppendItem(SWFItem, "SWF");
            }
            if ((printMask?.ShortTitle ?? true)
                && item.ShortTitle is {} ShortTitleItem)
            {
                fg.AppendItem(ShortTitleItem, "ShortTitle");
            }
            if (printMask?.MenuButtons?.Overall ?? true)
            {
                fg.AppendLine("MenuButtons =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.MenuButtons)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public static Message_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Message_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Message_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Message_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Message_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Message_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Message_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Message_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Message_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Message_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Message_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Message_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMessageGetter? lhs,
            IMessageGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)Message_FieldIndex.Description) ?? true))
            {
                if (!object.Equals(lhs.Description, rhs.Description)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Message_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Message_FieldIndex.INAM) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.INAM.Span, rhs.INAM.Span)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Message_FieldIndex.OwnerQuest) ?? true))
            {
                if (!lhs.OwnerQuest.Equals(rhs.OwnerQuest)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Message_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Message_FieldIndex.DisplayTime) ?? true))
            {
                if (lhs.DisplayTime != rhs.DisplayTime) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Message_FieldIndex.SWF) ?? true))
            {
                if (!string.Equals(lhs.SWF, rhs.SWF)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Message_FieldIndex.ShortTitle) ?? true))
            {
                if (!object.Equals(lhs.ShortTitle, rhs.ShortTitle)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Message_FieldIndex.MenuButtons) ?? true))
            {
                if (!lhs.MenuButtons.SequenceEqualNullable(rhs.MenuButtons)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IMessageGetter?)lhs,
                rhs: rhs as IMessageGetter,
                crystal: crystal);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IMessageGetter?)lhs,
                rhs: rhs as IMessageGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(IMessageGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Description);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.INAM);
            hash.Add(item.OwnerQuest);
            hash.Add(item.Flags);
            if (item.DisplayTime is {} DisplayTimeitem)
            {
                hash.Add(DisplayTimeitem);
            }
            if (item.SWF is {} SWFitem)
            {
                hash.Add(SWFitem);
            }
            if (item.ShortTitle is {} ShortTitleitem)
            {
                hash.Add(ShortTitleitem);
            }
            hash.Add(item.MenuButtons);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IMessageGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IMessageGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Message.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IMessageGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.OwnerQuest.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.OwnerQuest);
            }
            foreach (var item in obj.MenuButtons.WhereCastable<IMessageButtonGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public Message Duplicate(
            IMessageGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Message(formKey);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IMessageGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IMessageGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class MessageSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly MessageSetterTranslationCommon Instance = new MessageSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IMessageInternal item,
            IMessageGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IMessage item,
            IMessageGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Message_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Message_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Message_FieldIndex.INAM) ?? true))
            {
                item.INAM = rhs.INAM.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)Message_FieldIndex.OwnerQuest) ?? true))
            {
                item.OwnerQuest.SetTo(rhs.OwnerQuest.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Message_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Message_FieldIndex.DisplayTime) ?? true))
            {
                item.DisplayTime = rhs.DisplayTime;
            }
            if ((copyMask?.GetShouldTranslate((int)Message_FieldIndex.SWF) ?? true))
            {
                item.SWF = rhs.SWF;
            }
            if ((copyMask?.GetShouldTranslate((int)Message_FieldIndex.ShortTitle) ?? true))
            {
                item.ShortTitle = rhs.ShortTitle?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Message_FieldIndex.MenuButtons) ?? true))
            {
                errorMask?.PushIndex((int)Message_FieldIndex.MenuButtons);
                try
                {
                    item.MenuButtons.SetTo(
                        rhs.MenuButtons
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMessageInternal)item,
                rhs: (IMessageGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMessage)item,
                rhs: (IMessageGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMessageInternal)item,
                rhs: (IMessageGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMessage)item,
                rhs: (IMessageGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Message DeepCopy(
            IMessageGetter item,
            Message.TranslationMask? copyMask = null)
        {
            Message ret = (Message)((MessageCommon)((IMessageGetter)item).CommonInstance()!).GetNew();
            ((MessageSetterTranslationCommon)((IMessageGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Message DeepCopy(
            IMessageGetter item,
            out Message.ErrorMask errorMask,
            Message.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Message ret = (Message)((MessageCommon)((IMessageGetter)item).CommonInstance()!).GetNew();
            ((MessageSetterTranslationCommon)((IMessageGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Message.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Message DeepCopy(
            IMessageGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Message ret = (Message)((MessageCommon)((IMessageGetter)item).CommonInstance()!).GetNew();
            ((MessageSetterTranslationCommon)((IMessageGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Message
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Message_Registration.Instance;
        public new static Message_Registration StaticRegistration => Message_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MessageCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return MessageSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MessageSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class MessageBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static MessageBinaryWriteTranslation Instance = new MessageBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IMessageGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.INAM,
                header: translationParams.ConvertToCustom(RecordTypes.INAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.OwnerQuest,
                header: translationParams.ConvertToCustom(RecordTypes.QNAM));
            EnumBinaryTranslation<Message.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Flags,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM));
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.DisplayTime,
                header: translationParams.ConvertToCustom(RecordTypes.TNAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SWF,
                header: translationParams.ConvertToCustom(RecordTypes.SNAM),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ShortTitle,
                header: translationParams.ConvertToCustom(RecordTypes.NNAM),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IMessageButtonGetter>.Instance.Write(
                writer: writer,
                items: item.MenuButtons,
                transl: (MutagenWriter subWriter, IMessageButtonGetter subItem, TypedWriteParams? conv) =>
                {
                    var Item = subItem;
                    ((MessageButtonBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IMessageGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Record(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.MESG)))
            {
                try
                {
                    Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        translationParams: translationParams);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Enrich(ex, item);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IMessageGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IMessageGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IMessageGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class MessageBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static MessageBinaryCreateTranslation Instance = new MessageBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.MESG;
        public static void FillBinaryStructs(
            IMessageInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IMessageInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Message_FieldIndex.Description;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Message_FieldIndex.Name;
                }
                case RecordTypeInts.INAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.INAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Message_FieldIndex.INAM;
                }
                case RecordTypeInts.QNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.OwnerQuest.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Message_FieldIndex.OwnerQuest;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<Message.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)Message_FieldIndex.Flags;
                }
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DisplayTime = frame.ReadUInt32();
                    return (int)Message_FieldIndex.DisplayTime;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SWF = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Message_FieldIndex.SWF;
                }
                case RecordTypeInts.NNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ShortTitle = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Message_FieldIndex.ShortTitle;
                }
                case RecordTypeInts.ITXT:
                case RecordTypeInts.CTDA:
                {
                    item.MenuButtons.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<MessageButton>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: MessageButton_Registration.TriggeringRecordTypes,
                            translationParams: translationParams,
                            transl: MessageButton.TryCreateFromBinary));
                    return (int)Message_FieldIndex.MenuButtons;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class MessageBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class MessageBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IMessageGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Message_Registration.Instance;
        public new static Message_Registration StaticRegistration => Message_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MessageCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MessageSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => MessageCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MessageBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((MessageBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IMessage);


        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.DL, parsingBundle: _package.MetaData) : TranslatedString.Empty;
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region INAM
        private int? _INAMLocation;
        public ReadOnlyMemorySlice<Byte> INAM => _INAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _INAMLocation.Value, _package.MetaData.Constants) : Array.Empty<byte>();
        #endregion
        #region OwnerQuest
        private int? _OwnerQuestLocation;
        public IFormLinkNullableGetter<IQuestGetter> OwnerQuest => _OwnerQuestLocation.HasValue ? new FormLinkNullable<IQuestGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _OwnerQuestLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IQuestGetter>.Null;
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public Message.Flag Flags => _FlagsLocation.HasValue ? (Message.Flag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(Message.Flag);
        #endregion
        #region DisplayTime
        private int? _DisplayTimeLocation;
        public UInt32? DisplayTime => _DisplayTimeLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _DisplayTimeLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region SWF
        private int? _SWFLocation;
        public String? SWF => _SWFLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _SWFLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region ShortTitle
        private int? _ShortTitleLocation;
        public ITranslatedStringGetter? ShortTitle => _ShortTitleLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _ShortTitleLocation.Value, _package.MetaData.Constants), StringsSource.DL, parsingBundle: _package.MetaData) : default(TranslatedString?);
        #endregion
        public IReadOnlyList<IMessageButtonGetter> MenuButtons { get; private set; } = ListExt.Empty<MessageButtonBinaryOverlay>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected MessageBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static MessageBinaryOverlay MessageFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            stream = PluginUtilityTranslation.DecompressStream(stream);
            var ret = new MessageBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static MessageBinaryOverlay MessageFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return MessageFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)Message_FieldIndex.Description;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Message_FieldIndex.Name;
                }
                case RecordTypeInts.INAM:
                {
                    _INAMLocation = (stream.Position - offset);
                    return (int)Message_FieldIndex.INAM;
                }
                case RecordTypeInts.QNAM:
                {
                    _OwnerQuestLocation = (stream.Position - offset);
                    return (int)Message_FieldIndex.OwnerQuest;
                }
                case RecordTypeInts.DNAM:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)Message_FieldIndex.Flags;
                }
                case RecordTypeInts.TNAM:
                {
                    _DisplayTimeLocation = (stream.Position - offset);
                    return (int)Message_FieldIndex.DisplayTime;
                }
                case RecordTypeInts.SNAM:
                {
                    _SWFLocation = (stream.Position - offset);
                    return (int)Message_FieldIndex.SWF;
                }
                case RecordTypeInts.NNAM:
                {
                    _ShortTitleLocation = (stream.Position - offset);
                    return (int)Message_FieldIndex.ShortTitle;
                }
                case RecordTypeInts.ITXT:
                case RecordTypeInts.CTDA:
                {
                    this.MenuButtons = this.ParseRepeatedTypelessSubrecord<MessageButtonBinaryOverlay>(
                        stream: stream,
                        parseParams: parseParams,
                        trigger: MessageButton_Registration.TriggeringRecordTypes,
                        factory: MessageButtonBinaryOverlay.MessageButtonFactory);
                    return (int)Message_FieldIndex.MenuButtons;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            MessageMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Message>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IMessageGetter rhs) return false;
            return ((MessageCommon)((IMessageGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IMessageGetter? obj)
        {
            return ((MessageCommon)((IMessageGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((MessageCommon)((IMessageGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

