/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class NpcFaceTintingLayer :
        IEquatable<INpcFaceTintingLayerGetter>,
        ILoquiObjectSetter<NpcFaceTintingLayer>,
        INpcFaceTintingLayer
    {
        #region Ctor
        public NpcFaceTintingLayer()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region DataType
        public NpcFaceTintingLayer.Type DataType { get; set; } = default(NpcFaceTintingLayer.Type);
        #endregion
        #region Index
        public UInt16 Index { get; set; } = default(UInt16);
        #endregion
        #region Value
        public Single Value { get; set; } = default(Single);
        #endregion
        #region Color
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Color _Color;
        public Color Color
        {
            get => this._Color;
            set
            {
                this.TENDDataTypeState &= ~TENDDataType.Break0;
                this._Color = value;
            }
        }
        #endregion
        #region TemplateColorIndex
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Int16 _TemplateColorIndex;
        public Int16 TemplateColorIndex
        {
            get => this._TemplateColorIndex;
            set
            {
                this.TENDDataTypeState &= ~TENDDataType.Break0;
                this._TemplateColorIndex = value;
            }
        }
        #endregion
        #region TENDDataTypeState
        public NpcFaceTintingLayer.TENDDataType TENDDataTypeState { get; set; } = default(NpcFaceTintingLayer.TENDDataType);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NpcFaceTintingLayerMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INpcFaceTintingLayerGetter rhs) return false;
            return ((NpcFaceTintingLayerCommon)((INpcFaceTintingLayerGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INpcFaceTintingLayerGetter? obj)
        {
            return ((NpcFaceTintingLayerCommon)((INpcFaceTintingLayerGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NpcFaceTintingLayerCommon)((INpcFaceTintingLayerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.DataType = initialValue;
                this.Index = initialValue;
                this.Value = initialValue;
                this.Color = initialValue;
                this.TemplateColorIndex = initialValue;
                this.TENDDataTypeState = initialValue;
            }

            public Mask(
                TItem DataType,
                TItem Index,
                TItem Value,
                TItem Color,
                TItem TemplateColorIndex,
                TItem TENDDataTypeState)
            {
                this.DataType = DataType;
                this.Index = Index;
                this.Value = Value;
                this.Color = Color;
                this.TemplateColorIndex = TemplateColorIndex;
                this.TENDDataTypeState = TENDDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem DataType;
            public TItem Index;
            public TItem Value;
            public TItem Color;
            public TItem TemplateColorIndex;
            public TItem TENDDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.DataType, rhs.DataType)) return false;
                if (!object.Equals(this.Index, rhs.Index)) return false;
                if (!object.Equals(this.Value, rhs.Value)) return false;
                if (!object.Equals(this.Color, rhs.Color)) return false;
                if (!object.Equals(this.TemplateColorIndex, rhs.TemplateColorIndex)) return false;
                if (!object.Equals(this.TENDDataTypeState, rhs.TENDDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.DataType);
                hash.Add(this.Index);
                hash.Add(this.Value);
                hash.Add(this.Color);
                hash.Add(this.TemplateColorIndex);
                hash.Add(this.TENDDataTypeState);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.DataType)) return false;
                if (!eval(this.Index)) return false;
                if (!eval(this.Value)) return false;
                if (!eval(this.Color)) return false;
                if (!eval(this.TemplateColorIndex)) return false;
                if (!eval(this.TENDDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.DataType)) return true;
                if (eval(this.Index)) return true;
                if (eval(this.Value)) return true;
                if (eval(this.Color)) return true;
                if (eval(this.TemplateColorIndex)) return true;
                if (eval(this.TENDDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new NpcFaceTintingLayer.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.DataType = eval(this.DataType);
                obj.Index = eval(this.Index);
                obj.Value = eval(this.Value);
                obj.Color = eval(this.Color);
                obj.TemplateColorIndex = eval(this.TemplateColorIndex);
                obj.TENDDataTypeState = eval(this.TENDDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(NpcFaceTintingLayer.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, NpcFaceTintingLayer.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(NpcFaceTintingLayer.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.DataType ?? true)
                    {
                        sb.AppendItem(DataType, "DataType");
                    }
                    if (printMask?.Index ?? true)
                    {
                        sb.AppendItem(Index, "Index");
                    }
                    if (printMask?.Value ?? true)
                    {
                        sb.AppendItem(Value, "Value");
                    }
                    if (printMask?.Color ?? true)
                    {
                        sb.AppendItem(Color, "Color");
                    }
                    if (printMask?.TemplateColorIndex ?? true)
                    {
                        sb.AppendItem(TemplateColorIndex, "TemplateColorIndex");
                    }
                    if (printMask?.TENDDataTypeState ?? true)
                    {
                        sb.AppendItem(TENDDataTypeState, "TENDDataTypeState");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? DataType;
            public Exception? Index;
            public Exception? Value;
            public Exception? Color;
            public Exception? TemplateColorIndex;
            public Exception? TENDDataTypeState;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                NpcFaceTintingLayer_FieldIndex enu = (NpcFaceTintingLayer_FieldIndex)index;
                switch (enu)
                {
                    case NpcFaceTintingLayer_FieldIndex.DataType:
                        return DataType;
                    case NpcFaceTintingLayer_FieldIndex.Index:
                        return Index;
                    case NpcFaceTintingLayer_FieldIndex.Value:
                        return Value;
                    case NpcFaceTintingLayer_FieldIndex.Color:
                        return Color;
                    case NpcFaceTintingLayer_FieldIndex.TemplateColorIndex:
                        return TemplateColorIndex;
                    case NpcFaceTintingLayer_FieldIndex.TENDDataTypeState:
                        return TENDDataTypeState;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                NpcFaceTintingLayer_FieldIndex enu = (NpcFaceTintingLayer_FieldIndex)index;
                switch (enu)
                {
                    case NpcFaceTintingLayer_FieldIndex.DataType:
                        this.DataType = ex;
                        break;
                    case NpcFaceTintingLayer_FieldIndex.Index:
                        this.Index = ex;
                        break;
                    case NpcFaceTintingLayer_FieldIndex.Value:
                        this.Value = ex;
                        break;
                    case NpcFaceTintingLayer_FieldIndex.Color:
                        this.Color = ex;
                        break;
                    case NpcFaceTintingLayer_FieldIndex.TemplateColorIndex:
                        this.TemplateColorIndex = ex;
                        break;
                    case NpcFaceTintingLayer_FieldIndex.TENDDataTypeState:
                        this.TENDDataTypeState = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                NpcFaceTintingLayer_FieldIndex enu = (NpcFaceTintingLayer_FieldIndex)index;
                switch (enu)
                {
                    case NpcFaceTintingLayer_FieldIndex.DataType:
                        this.DataType = (Exception?)obj;
                        break;
                    case NpcFaceTintingLayer_FieldIndex.Index:
                        this.Index = (Exception?)obj;
                        break;
                    case NpcFaceTintingLayer_FieldIndex.Value:
                        this.Value = (Exception?)obj;
                        break;
                    case NpcFaceTintingLayer_FieldIndex.Color:
                        this.Color = (Exception?)obj;
                        break;
                    case NpcFaceTintingLayer_FieldIndex.TemplateColorIndex:
                        this.TemplateColorIndex = (Exception?)obj;
                        break;
                    case NpcFaceTintingLayer_FieldIndex.TENDDataTypeState:
                        this.TENDDataTypeState = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (DataType != null) return true;
                if (Index != null) return true;
                if (Value != null) return true;
                if (Color != null) return true;
                if (TemplateColorIndex != null) return true;
                if (TENDDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(DataType, "DataType");
                }
                {
                    sb.AppendItem(Index, "Index");
                }
                {
                    sb.AppendItem(Value, "Value");
                }
                {
                    sb.AppendItem(Color, "Color");
                }
                {
                    sb.AppendItem(TemplateColorIndex, "TemplateColorIndex");
                }
                {
                    sb.AppendItem(TENDDataTypeState, "TENDDataTypeState");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.DataType = this.DataType.Combine(rhs.DataType);
                ret.Index = this.Index.Combine(rhs.Index);
                ret.Value = this.Value.Combine(rhs.Value);
                ret.Color = this.Color.Combine(rhs.Color);
                ret.TemplateColorIndex = this.TemplateColorIndex.Combine(rhs.TemplateColorIndex);
                ret.TENDDataTypeState = this.TENDDataTypeState.Combine(rhs.TENDDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool DataType;
            public bool Index;
            public bool Value;
            public bool Color;
            public bool TemplateColorIndex;
            public bool TENDDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.DataType = defaultOn;
                this.Index = defaultOn;
                this.Value = defaultOn;
                this.Color = defaultOn;
                this.TemplateColorIndex = defaultOn;
                this.TENDDataTypeState = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((DataType, null));
                ret.Add((Index, null));
                ret.Add((Value, null));
                ret.Add((Color, null));
                ret.Add((TemplateColorIndex, null));
                ret.Add((TENDDataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        [Flags]
        public enum TENDDataType
        {
            Break0 = 1
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NpcFaceTintingLayerBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcFaceTintingLayerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static NpcFaceTintingLayer CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new NpcFaceTintingLayer();
            ((NpcFaceTintingLayerSetterCommon)((INpcFaceTintingLayerGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out NpcFaceTintingLayer item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((NpcFaceTintingLayerSetterCommon)((INpcFaceTintingLayerGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static NpcFaceTintingLayer GetNew()
        {
            return new NpcFaceTintingLayer();
        }

    }
    #endregion

    #region Interface
    public partial interface INpcFaceTintingLayer :
        ILoquiObjectSetter<INpcFaceTintingLayer>,
        INpcFaceTintingLayerGetter
    {
        new NpcFaceTintingLayer.Type DataType { get; set; }
        new UInt16 Index { get; set; }
        new Single Value { get; set; }
        new Color Color { get; set; }
        new Int16 TemplateColorIndex { get; set; }
        new NpcFaceTintingLayer.TENDDataType TENDDataTypeState { get; set; }
    }

    public partial interface INpcFaceTintingLayerGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<INpcFaceTintingLayerGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => NpcFaceTintingLayer_Registration.Instance;
        NpcFaceTintingLayer.Type DataType { get; }
        UInt16 Index { get; }
        Single Value { get; }
        Color Color { get; }
        Int16 TemplateColorIndex { get; }
        NpcFaceTintingLayer.TENDDataType TENDDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class NpcFaceTintingLayerMixIn
    {
        public static void Clear(this INpcFaceTintingLayer item)
        {
            ((NpcFaceTintingLayerSetterCommon)((INpcFaceTintingLayerGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static NpcFaceTintingLayer.Mask<bool> GetEqualsMask(
            this INpcFaceTintingLayerGetter item,
            INpcFaceTintingLayerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NpcFaceTintingLayerCommon)((INpcFaceTintingLayerGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this INpcFaceTintingLayerGetter item,
            string? name = null,
            NpcFaceTintingLayer.Mask<bool>? printMask = null)
        {
            return ((NpcFaceTintingLayerCommon)((INpcFaceTintingLayerGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this INpcFaceTintingLayerGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NpcFaceTintingLayer.Mask<bool>? printMask = null)
        {
            ((NpcFaceTintingLayerCommon)((INpcFaceTintingLayerGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INpcFaceTintingLayerGetter item,
            INpcFaceTintingLayerGetter rhs,
            NpcFaceTintingLayer.TranslationMask? equalsMask = null)
        {
            return ((NpcFaceTintingLayerCommon)((INpcFaceTintingLayerGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this INpcFaceTintingLayer lhs,
            INpcFaceTintingLayerGetter rhs)
        {
            ((NpcFaceTintingLayerSetterTranslationCommon)((INpcFaceTintingLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INpcFaceTintingLayer lhs,
            INpcFaceTintingLayerGetter rhs,
            NpcFaceTintingLayer.TranslationMask? copyMask = null)
        {
            ((NpcFaceTintingLayerSetterTranslationCommon)((INpcFaceTintingLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INpcFaceTintingLayer lhs,
            INpcFaceTintingLayerGetter rhs,
            out NpcFaceTintingLayer.ErrorMask errorMask,
            NpcFaceTintingLayer.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NpcFaceTintingLayerSetterTranslationCommon)((INpcFaceTintingLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = NpcFaceTintingLayer.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INpcFaceTintingLayer lhs,
            INpcFaceTintingLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NpcFaceTintingLayerSetterTranslationCommon)((INpcFaceTintingLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static NpcFaceTintingLayer DeepCopy(
            this INpcFaceTintingLayerGetter item,
            NpcFaceTintingLayer.TranslationMask? copyMask = null)
        {
            return ((NpcFaceTintingLayerSetterTranslationCommon)((INpcFaceTintingLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NpcFaceTintingLayer DeepCopy(
            this INpcFaceTintingLayerGetter item,
            out NpcFaceTintingLayer.ErrorMask errorMask,
            NpcFaceTintingLayer.TranslationMask? copyMask = null)
        {
            return ((NpcFaceTintingLayerSetterTranslationCommon)((INpcFaceTintingLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NpcFaceTintingLayer DeepCopy(
            this INpcFaceTintingLayerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NpcFaceTintingLayerSetterTranslationCommon)((INpcFaceTintingLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this INpcFaceTintingLayer item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((NpcFaceTintingLayerSetterCommon)((INpcFaceTintingLayerGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum NpcFaceTintingLayer_FieldIndex
    {
        DataType = 0,
        Index = 1,
        Value = 2,
        Color = 3,
        TemplateColorIndex = 4,
        TENDDataTypeState = 5,
    }
    #endregion

    #region Registration
    internal partial class NpcFaceTintingLayer_Registration : ILoquiRegistration
    {
        public static readonly NpcFaceTintingLayer_Registration Instance = new NpcFaceTintingLayer_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(NpcFaceTintingLayer.Mask<>);

        public static readonly Type ErrorMaskType = typeof(NpcFaceTintingLayer.ErrorMask);

        public static readonly Type ClassType = typeof(NpcFaceTintingLayer);

        public static readonly Type GetterType = typeof(INpcFaceTintingLayerGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INpcFaceTintingLayer);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.NpcFaceTintingLayer";

        public const string Name = "NpcFaceTintingLayer";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TETI;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.TETI);
            var all = RecordCollection.Factory(
                RecordTypes.TETI,
                RecordTypes.TEND);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(NpcFaceTintingLayerBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class NpcFaceTintingLayerSetterCommon
    {
        public static readonly NpcFaceTintingLayerSetterCommon Instance = new NpcFaceTintingLayerSetterCommon();

        partial void ClearPartial();
        
        public void Clear(INpcFaceTintingLayer item)
        {
            ClearPartial();
            item.DataType = default(NpcFaceTintingLayer.Type);
            item.Index = default(UInt16);
            item.Value = default(Single);
            item.Color = default(Color);
            item.TemplateColorIndex = default(Int16);
            item.TENDDataTypeState = default(NpcFaceTintingLayer.TENDDataType);
        }
        
        #region Mutagen
        public void RemapLinks(INpcFaceTintingLayer obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INpcFaceTintingLayer item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: NpcFaceTintingLayerBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: NpcFaceTintingLayerBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class NpcFaceTintingLayerCommon
    {
        public static readonly NpcFaceTintingLayerCommon Instance = new NpcFaceTintingLayerCommon();

        public NpcFaceTintingLayer.Mask<bool> GetEqualsMask(
            INpcFaceTintingLayerGetter item,
            INpcFaceTintingLayerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NpcFaceTintingLayer.Mask<bool>(false);
            ((NpcFaceTintingLayerCommon)((INpcFaceTintingLayerGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INpcFaceTintingLayerGetter item,
            INpcFaceTintingLayerGetter rhs,
            NpcFaceTintingLayer.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.DataType = item.DataType == rhs.DataType;
            ret.Index = item.Index == rhs.Index;
            ret.Value = item.Value.EqualsWithin(rhs.Value);
            ret.Color = item.Color.ColorOnlyEquals(rhs.Color);
            ret.TemplateColorIndex = item.TemplateColorIndex == rhs.TemplateColorIndex;
            ret.TENDDataTypeState = item.TENDDataTypeState == rhs.TENDDataTypeState;
        }
        
        public string Print(
            INpcFaceTintingLayerGetter item,
            string? name = null,
            NpcFaceTintingLayer.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            INpcFaceTintingLayerGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NpcFaceTintingLayer.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"NpcFaceTintingLayer =>");
            }
            else
            {
                sb.AppendLine($"{name} (NpcFaceTintingLayer) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            INpcFaceTintingLayerGetter item,
            StructuredStringBuilder sb,
            NpcFaceTintingLayer.Mask<bool>? printMask = null)
        {
            if (printMask?.DataType ?? true)
            {
                sb.AppendItem(item.DataType, "DataType");
            }
            if (printMask?.Index ?? true)
            {
                sb.AppendItem(item.Index, "Index");
            }
            if (printMask?.Value ?? true)
            {
                sb.AppendItem(item.Value, "Value");
            }
            if (printMask?.Color ?? true)
            {
                sb.AppendItem(item.Color, "Color");
            }
            if (printMask?.TemplateColorIndex ?? true)
            {
                sb.AppendItem(item.TemplateColorIndex, "TemplateColorIndex");
            }
            if (printMask?.TENDDataTypeState ?? true)
            {
                sb.AppendItem(item.TENDDataTypeState, "TENDDataTypeState");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INpcFaceTintingLayerGetter? lhs,
            INpcFaceTintingLayerGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)NpcFaceTintingLayer_FieldIndex.DataType) ?? true))
            {
                if (lhs.DataType != rhs.DataType) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcFaceTintingLayer_FieldIndex.Index) ?? true))
            {
                if (lhs.Index != rhs.Index) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcFaceTintingLayer_FieldIndex.Value) ?? true))
            {
                if (!lhs.Value.EqualsWithin(rhs.Value)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcFaceTintingLayer_FieldIndex.Color) ?? true))
            {
                if (!lhs.Color.ColorOnlyEquals(rhs.Color)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcFaceTintingLayer_FieldIndex.TemplateColorIndex) ?? true))
            {
                if (lhs.TemplateColorIndex != rhs.TemplateColorIndex) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcFaceTintingLayer_FieldIndex.TENDDataTypeState) ?? true))
            {
                if (lhs.TENDDataTypeState != rhs.TENDDataTypeState) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(INpcFaceTintingLayerGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.DataType);
            hash.Add(item.Index);
            hash.Add(item.Value);
            hash.Add(item.Color);
            hash.Add(item.TemplateColorIndex);
            hash.Add(item.TENDDataTypeState);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return NpcFaceTintingLayer.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(INpcFaceTintingLayerGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class NpcFaceTintingLayerSetterTranslationCommon
    {
        public static readonly NpcFaceTintingLayerSetterTranslationCommon Instance = new NpcFaceTintingLayerSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            INpcFaceTintingLayer item,
            INpcFaceTintingLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)NpcFaceTintingLayer_FieldIndex.DataType) ?? true))
            {
                item.DataType = rhs.DataType;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFaceTintingLayer_FieldIndex.Index) ?? true))
            {
                item.Index = rhs.Index;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFaceTintingLayer_FieldIndex.Value) ?? true))
            {
                item.Value = rhs.Value;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFaceTintingLayer_FieldIndex.Color) ?? true))
            {
                item.Color = rhs.Color;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFaceTintingLayer_FieldIndex.TemplateColorIndex) ?? true))
            {
                item.TemplateColorIndex = rhs.TemplateColorIndex;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFaceTintingLayer_FieldIndex.TENDDataTypeState) ?? true))
            {
                item.TENDDataTypeState = rhs.TENDDataTypeState;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            INpcFaceTintingLayer item,
            INpcFaceTintingLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public NpcFaceTintingLayer DeepCopy(
            INpcFaceTintingLayerGetter item,
            NpcFaceTintingLayer.TranslationMask? copyMask = null)
        {
            NpcFaceTintingLayer ret = (NpcFaceTintingLayer)((NpcFaceTintingLayerCommon)((INpcFaceTintingLayerGetter)item).CommonInstance()!).GetNew();
            ((NpcFaceTintingLayerSetterTranslationCommon)((INpcFaceTintingLayerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public NpcFaceTintingLayer DeepCopy(
            INpcFaceTintingLayerGetter item,
            out NpcFaceTintingLayer.ErrorMask errorMask,
            NpcFaceTintingLayer.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            NpcFaceTintingLayer ret = (NpcFaceTintingLayer)((NpcFaceTintingLayerCommon)((INpcFaceTintingLayerGetter)item).CommonInstance()!).GetNew();
            ((NpcFaceTintingLayerSetterTranslationCommon)((INpcFaceTintingLayerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = NpcFaceTintingLayer.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public NpcFaceTintingLayer DeepCopy(
            INpcFaceTintingLayerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            NpcFaceTintingLayer ret = (NpcFaceTintingLayer)((NpcFaceTintingLayerCommon)((INpcFaceTintingLayerGetter)item).CommonInstance()!).GetNew();
            ((NpcFaceTintingLayerSetterTranslationCommon)((INpcFaceTintingLayerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class NpcFaceTintingLayer
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NpcFaceTintingLayer_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => NpcFaceTintingLayer_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NpcFaceTintingLayerCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return NpcFaceTintingLayerSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NpcFaceTintingLayerSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INpcFaceTintingLayerGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object INpcFaceTintingLayerGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object INpcFaceTintingLayerGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class NpcFaceTintingLayerBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly NpcFaceTintingLayerBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            INpcFaceTintingLayerGetter item,
            MutagenWriter writer)
        {
        }

        public static void WriteRecordTypes(
            INpcFaceTintingLayerGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.TETI)))
            {
                EnumBinaryTranslation<NpcFaceTintingLayer.Type, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.DataType,
                    length: 2);
                writer.Write(item.Index);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.TEND)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Value,
                    integerType: FloatIntegerType.Byte,
                    multiplier: 100f,
                    divisor: null);
                if (!item.TENDDataTypeState.HasFlag(NpcFaceTintingLayer.TENDDataType.Break0))
                {
                    ColorBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Color);
                    writer.Write(item.TemplateColorIndex);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            INpcFaceTintingLayerGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (INpcFaceTintingLayerGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class NpcFaceTintingLayerBinaryCreateTranslation
    {
        public static readonly NpcFaceTintingLayerBinaryCreateTranslation Instance = new NpcFaceTintingLayerBinaryCreateTranslation();

        public static void FillBinaryStructs(
            INpcFaceTintingLayer item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            INpcFaceTintingLayer item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.TETI:
                {
                    if (lastParsed.ShortCircuit((int)NpcFaceTintingLayer_FieldIndex.Index, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 2) return null;
                    item.DataType = EnumBinaryTranslation<NpcFaceTintingLayer.Type, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 2);
                    if (dataFrame.Remaining < 2) return null;
                    item.Index = dataFrame.ReadUInt16();
                    return (int)NpcFaceTintingLayer_FieldIndex.Index;
                }
                case RecordTypeInts.TEND:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 1) return null;
                    item.Value = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.Byte,
                        multiplier: null,
                        divisor: 100f);
                    if (dataFrame.Complete)
                    {
                        item.TENDDataTypeState |= NpcFaceTintingLayer.TENDDataType.Break0;
                        return (int)NpcFaceTintingLayer_FieldIndex.Value;
                    }
                    if (dataFrame.Remaining < 4) return null;
                    item.Color = dataFrame.ReadColor(ColorBinaryType.Alpha);
                    if (dataFrame.Remaining < 2) return null;
                    item.TemplateColorIndex = dataFrame.ReadInt16();
                    return (int)NpcFaceTintingLayer_FieldIndex.TemplateColorIndex;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class NpcFaceTintingLayerBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this INpcFaceTintingLayerGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcFaceTintingLayerBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class NpcFaceTintingLayerBinaryOverlay :
        PluginBinaryOverlay,
        INpcFaceTintingLayerGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NpcFaceTintingLayer_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => NpcFaceTintingLayer_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NpcFaceTintingLayerCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NpcFaceTintingLayerSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INpcFaceTintingLayerGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? INpcFaceTintingLayerGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object INpcFaceTintingLayerGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NpcFaceTintingLayerBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcFaceTintingLayerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        private RangeInt32? _TETILocation;
        #region DataType
        private int _DataTypeLocation => _TETILocation!.Value.Min;
        private bool _DataType_IsSet => _TETILocation.HasValue;
        public NpcFaceTintingLayer.Type DataType => _DataType_IsSet ? (NpcFaceTintingLayer.Type)BinaryPrimitives.ReadUInt16LittleEndian(_recordData.Span.Slice(_DataTypeLocation, 0x2)) : default;
        #endregion
        #region Index
        private int _IndexLocation => _TETILocation!.Value.Min + 0x2;
        private bool _Index_IsSet => _TETILocation.HasValue;
        public UInt16 Index => _Index_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_recordData.Slice(_IndexLocation, 2)) : default(UInt16);
        #endregion
        private RangeInt32? _TENDLocation;
        public NpcFaceTintingLayer.TENDDataType TENDDataTypeState { get; private set; }
        #region Value
        private int _ValueLocation => _TENDLocation!.Value.Min;
        private bool _Value_IsSet => _TENDLocation.HasValue;
        public Single Value => _Value_IsSet ? FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.GetFloat(_recordData.Slice(_ValueLocation, 1), FloatIntegerType.Byte, multiplier: null, divisor: 100f) : default(Single);
        #endregion
        #region Color
        private int _ColorLocation => _TENDLocation!.Value.Min + 0x1;
        private bool _Color_IsSet => _TENDLocation.HasValue && !TENDDataTypeState.HasFlag(NpcFaceTintingLayer.TENDDataType.Break0);
        public Color Color => _Color_IsSet ? _recordData.Slice(_ColorLocation, 4).ReadColor(ColorBinaryType.Alpha) : default(Color);
        #endregion
        #region TemplateColorIndex
        private int _TemplateColorIndexLocation => _TENDLocation!.Value.Min + 0x5;
        private bool _TemplateColorIndex_IsSet => _TENDLocation.HasValue && !TENDDataTypeState.HasFlag(NpcFaceTintingLayer.TENDDataType.Break0);
        public Int16 TemplateColorIndex => _TemplateColorIndex_IsSet ? BinaryPrimitives.ReadInt16LittleEndian(_recordData.Slice(_TemplateColorIndexLocation, 2)) : default(Int16);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NpcFaceTintingLayerBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static INpcFaceTintingLayerGetter NpcFaceTintingLayerFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new NpcFaceTintingLayerBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static INpcFaceTintingLayerGetter NpcFaceTintingLayerFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return NpcFaceTintingLayerFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.TETI:
                {
                    if (lastParsed.ShortCircuit((int)NpcFaceTintingLayer_FieldIndex.Index, translationParams)) return ParseResult.Stop;
                    _TETILocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)NpcFaceTintingLayer_FieldIndex.Index;
                }
                case RecordTypeInts.TEND:
                {
                    _TENDLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    var subLen = _package.MetaData.Constants.SubrecordHeader(_recordData.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= 0x1)
                    {
                        this.TENDDataTypeState |= NpcFaceTintingLayer.TENDDataType.Break0;
                    }
                    return (int)NpcFaceTintingLayer_FieldIndex.TemplateColorIndex;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NpcFaceTintingLayerMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INpcFaceTintingLayerGetter rhs) return false;
            return ((NpcFaceTintingLayerCommon)((INpcFaceTintingLayerGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INpcFaceTintingLayerGetter? obj)
        {
            return ((NpcFaceTintingLayerCommon)((INpcFaceTintingLayerGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NpcFaceTintingLayerCommon)((INpcFaceTintingLayerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

