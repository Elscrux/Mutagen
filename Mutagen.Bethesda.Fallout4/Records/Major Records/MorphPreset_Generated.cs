/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class MorphPreset :
        IEquatable<IMorphPresetGetter>,
        ILoquiObjectSetter<MorphPreset>,
        IMorphPreset
    {
        #region Ctor
        public MorphPreset()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Index
        public UInt32? Index { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IMorphPresetGetter.Index => this.Index;
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IMorphPresetGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region UnknownMPPM
        public String? UnknownMPPM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IMorphPresetGetter.UnknownMPPM => this.UnknownMPPM;
        #endregion
        #region Texture
        private readonly IFormLinkNullable<ITextureSetGetter> _Texture = new FormLinkNullable<ITextureSetGetter>();
        public IFormLinkNullable<ITextureSetGetter> Texture
        {
            get => _Texture;
            set => _Texture.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ITextureSetGetter> IMorphPresetGetter.Texture => this.Texture;
        #endregion
        #region UnknownMPPF
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _UnknownMPPF;
        public MemorySlice<Byte>? UnknownMPPF
        {
            get => this._UnknownMPPF;
            set => this._UnknownMPPF = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IMorphPresetGetter.UnknownMPPF => this.UnknownMPPF;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            MorphPresetMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IMorphPresetGetter rhs) return false;
            return ((MorphPresetCommon)((IMorphPresetGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IMorphPresetGetter? obj)
        {
            return ((MorphPresetCommon)((IMorphPresetGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((MorphPresetCommon)((IMorphPresetGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Index = initialValue;
                this.Name = initialValue;
                this.UnknownMPPM = initialValue;
                this.Texture = initialValue;
                this.UnknownMPPF = initialValue;
            }

            public Mask(
                TItem Index,
                TItem Name,
                TItem UnknownMPPM,
                TItem Texture,
                TItem UnknownMPPF)
            {
                this.Index = Index;
                this.Name = Name;
                this.UnknownMPPM = UnknownMPPM;
                this.Texture = Texture;
                this.UnknownMPPF = UnknownMPPF;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Index;
            public TItem Name;
            public TItem UnknownMPPM;
            public TItem Texture;
            public TItem UnknownMPPF;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Index, rhs.Index)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.UnknownMPPM, rhs.UnknownMPPM)) return false;
                if (!object.Equals(this.Texture, rhs.Texture)) return false;
                if (!object.Equals(this.UnknownMPPF, rhs.UnknownMPPF)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Index);
                hash.Add(this.Name);
                hash.Add(this.UnknownMPPM);
                hash.Add(this.Texture);
                hash.Add(this.UnknownMPPF);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Index)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.UnknownMPPM)) return false;
                if (!eval(this.Texture)) return false;
                if (!eval(this.UnknownMPPF)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Index)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.UnknownMPPM)) return true;
                if (eval(this.Texture)) return true;
                if (eval(this.UnknownMPPF)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new MorphPreset.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Index = eval(this.Index);
                obj.Name = eval(this.Name);
                obj.UnknownMPPM = eval(this.UnknownMPPM);
                obj.Texture = eval(this.Texture);
                obj.UnknownMPPF = eval(this.UnknownMPPF);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(MorphPreset.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, MorphPreset.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(MorphPreset.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Index ?? true)
                    {
                        fg.AppendItem(Index, "Index");
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.UnknownMPPM ?? true)
                    {
                        fg.AppendItem(UnknownMPPM, "UnknownMPPM");
                    }
                    if (printMask?.Texture ?? true)
                    {
                        fg.AppendItem(Texture, "Texture");
                    }
                    if (printMask?.UnknownMPPF ?? true)
                    {
                        fg.AppendItem(UnknownMPPF, "UnknownMPPF");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Index;
            public Exception? Name;
            public Exception? UnknownMPPM;
            public Exception? Texture;
            public Exception? UnknownMPPF;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                MorphPreset_FieldIndex enu = (MorphPreset_FieldIndex)index;
                switch (enu)
                {
                    case MorphPreset_FieldIndex.Index:
                        return Index;
                    case MorphPreset_FieldIndex.Name:
                        return Name;
                    case MorphPreset_FieldIndex.UnknownMPPM:
                        return UnknownMPPM;
                    case MorphPreset_FieldIndex.Texture:
                        return Texture;
                    case MorphPreset_FieldIndex.UnknownMPPF:
                        return UnknownMPPF;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                MorphPreset_FieldIndex enu = (MorphPreset_FieldIndex)index;
                switch (enu)
                {
                    case MorphPreset_FieldIndex.Index:
                        this.Index = ex;
                        break;
                    case MorphPreset_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case MorphPreset_FieldIndex.UnknownMPPM:
                        this.UnknownMPPM = ex;
                        break;
                    case MorphPreset_FieldIndex.Texture:
                        this.Texture = ex;
                        break;
                    case MorphPreset_FieldIndex.UnknownMPPF:
                        this.UnknownMPPF = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                MorphPreset_FieldIndex enu = (MorphPreset_FieldIndex)index;
                switch (enu)
                {
                    case MorphPreset_FieldIndex.Index:
                        this.Index = (Exception?)obj;
                        break;
                    case MorphPreset_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case MorphPreset_FieldIndex.UnknownMPPM:
                        this.UnknownMPPM = (Exception?)obj;
                        break;
                    case MorphPreset_FieldIndex.Texture:
                        this.Texture = (Exception?)obj;
                        break;
                    case MorphPreset_FieldIndex.UnknownMPPF:
                        this.UnknownMPPF = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Index != null) return true;
                if (Name != null) return true;
                if (UnknownMPPM != null) return true;
                if (Texture != null) return true;
                if (UnknownMPPF != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Index, "Index");
                fg.AppendItem(Name, "Name");
                fg.AppendItem(UnknownMPPM, "UnknownMPPM");
                fg.AppendItem(Texture, "Texture");
                fg.AppendItem(UnknownMPPF, "UnknownMPPF");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Index = this.Index.Combine(rhs.Index);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.UnknownMPPM = this.UnknownMPPM.Combine(rhs.UnknownMPPM);
                ret.Texture = this.Texture.Combine(rhs.Texture);
                ret.UnknownMPPF = this.UnknownMPPF.Combine(rhs.UnknownMPPF);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Index;
            public bool Name;
            public bool UnknownMPPM;
            public bool Texture;
            public bool UnknownMPPF;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Index = defaultOn;
                this.Name = defaultOn;
                this.UnknownMPPM = defaultOn;
                this.Texture = defaultOn;
                this.UnknownMPPF = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Index, null));
                ret.Add((Name, null));
                ret.Add((UnknownMPPM, null));
                ret.Add((Texture, null));
                ret.Add((UnknownMPPF, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> ContainedFormLinks => MorphPresetCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => MorphPresetSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => MorphPresetBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((MorphPresetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static MorphPreset CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new MorphPreset();
            ((MorphPresetSetterCommon)((IMorphPresetGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out MorphPreset item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((MorphPresetSetterCommon)((IMorphPresetGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static MorphPreset GetNew()
        {
            return new MorphPreset();
        }

    }
    #endregion

    #region Interface
    public partial interface IMorphPreset :
        IFormLinkContainer,
        ILoquiObjectSetter<IMorphPreset>,
        IMorphPresetGetter,
        INamed,
        INamedRequired,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        new UInt32? Index { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new String? UnknownMPPM { get; set; }
        new IFormLinkNullable<ITextureSetGetter> Texture { get; set; }
        new MemorySlice<Byte>? UnknownMPPF { get; set; }
    }

    public partial interface IMorphPresetGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IMorphPresetGetter>,
        INamedGetter,
        INamedRequiredGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => MorphPreset_Registration.Instance;
        UInt32? Index { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        String? UnknownMPPM { get; }
        IFormLinkNullableGetter<ITextureSetGetter> Texture { get; }
        ReadOnlyMemorySlice<Byte>? UnknownMPPF { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class MorphPresetMixIn
    {
        public static void Clear(this IMorphPreset item)
        {
            ((MorphPresetSetterCommon)((IMorphPresetGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static MorphPreset.Mask<bool> GetEqualsMask(
            this IMorphPresetGetter item,
            IMorphPresetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MorphPresetCommon)((IMorphPresetGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IMorphPresetGetter item,
            string? name = null,
            MorphPreset.Mask<bool>? printMask = null)
        {
            return ((MorphPresetCommon)((IMorphPresetGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IMorphPresetGetter item,
            FileGeneration fg,
            string? name = null,
            MorphPreset.Mask<bool>? printMask = null)
        {
            ((MorphPresetCommon)((IMorphPresetGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IMorphPresetGetter item,
            IMorphPresetGetter rhs,
            MorphPreset.TranslationMask? equalsMask = null)
        {
            return ((MorphPresetCommon)((IMorphPresetGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IMorphPreset lhs,
            IMorphPresetGetter rhs)
        {
            ((MorphPresetSetterTranslationCommon)((IMorphPresetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IMorphPreset lhs,
            IMorphPresetGetter rhs,
            MorphPreset.TranslationMask? copyMask = null)
        {
            ((MorphPresetSetterTranslationCommon)((IMorphPresetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IMorphPreset lhs,
            IMorphPresetGetter rhs,
            out MorphPreset.ErrorMask errorMask,
            MorphPreset.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((MorphPresetSetterTranslationCommon)((IMorphPresetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = MorphPreset.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IMorphPreset lhs,
            IMorphPresetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((MorphPresetSetterTranslationCommon)((IMorphPresetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static MorphPreset DeepCopy(
            this IMorphPresetGetter item,
            MorphPreset.TranslationMask? copyMask = null)
        {
            return ((MorphPresetSetterTranslationCommon)((IMorphPresetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static MorphPreset DeepCopy(
            this IMorphPresetGetter item,
            out MorphPreset.ErrorMask errorMask,
            MorphPreset.TranslationMask? copyMask = null)
        {
            return ((MorphPresetSetterTranslationCommon)((IMorphPresetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static MorphPreset DeepCopy(
            this IMorphPresetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((MorphPresetSetterTranslationCommon)((IMorphPresetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IMorphPreset item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((MorphPresetSetterCommon)((IMorphPresetGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum MorphPreset_FieldIndex
    {
        Index = 0,
        Name = 1,
        UnknownMPPM = 2,
        Texture = 3,
        UnknownMPPF = 4,
    }
    #endregion

    #region Registration
    public partial class MorphPreset_Registration : ILoquiRegistration
    {
        public static readonly MorphPreset_Registration Instance = new MorphPreset_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 261,
            version: 0);

        public const string GUID = "c06ee700-01b5-46fe-8047-6cbd4eeeb74d";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(MorphPreset.Mask<>);

        public static readonly Type ErrorMaskType = typeof(MorphPreset.ErrorMask);

        public static readonly Type ClassType = typeof(MorphPreset);

        public static readonly Type GetterType = typeof(IMorphPresetGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMorphPreset);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.MorphPreset";

        public const string Name = "MorphPreset";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static TriggeringRecordCollection TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<TriggeringRecordCollection> _TriggeringRecordTypes = new Lazy<TriggeringRecordCollection>(() =>
        {
            return new TriggeringRecordCollection(
                RecordTypes.MPPI,
                RecordTypes.MPPN,
                RecordTypes.MPPM,
                RecordTypes.MPPT,
                RecordTypes.MPPF);
        });
        public static readonly Type BinaryWriteTranslation = typeof(MorphPresetBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class MorphPresetSetterCommon
    {
        public static readonly MorphPresetSetterCommon Instance = new MorphPresetSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IMorphPreset item)
        {
            ClearPartial();
            item.Index = default;
            item.Name = default;
            item.UnknownMPPM = default;
            item.Texture.Clear();
            item.UnknownMPPF = default;
        }
        
        #region Mutagen
        public void RemapLinks(IMorphPreset obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Texture.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IMorphPreset item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: MorphPresetBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: MorphPresetBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class MorphPresetCommon
    {
        public static readonly MorphPresetCommon Instance = new MorphPresetCommon();

        public MorphPreset.Mask<bool> GetEqualsMask(
            IMorphPresetGetter item,
            IMorphPresetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MorphPreset.Mask<bool>(false);
            ((MorphPresetCommon)((IMorphPresetGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMorphPresetGetter item,
            IMorphPresetGetter rhs,
            MorphPreset.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Index = item.Index == rhs.Index;
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.UnknownMPPM = string.Equals(item.UnknownMPPM, rhs.UnknownMPPM);
            ret.Texture = item.Texture.Equals(rhs.Texture);
            ret.UnknownMPPF = MemorySliceExt.Equal(item.UnknownMPPF, rhs.UnknownMPPF);
        }
        
        public string ToString(
            IMorphPresetGetter item,
            string? name = null,
            MorphPreset.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IMorphPresetGetter item,
            FileGeneration fg,
            string? name = null,
            MorphPreset.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"MorphPreset =>");
            }
            else
            {
                fg.AppendLine($"{name} (MorphPreset) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IMorphPresetGetter item,
            FileGeneration fg,
            MorphPreset.Mask<bool>? printMask = null)
        {
            if ((printMask?.Index ?? true)
                && item.Index is {} IndexItem)
            {
                fg.AppendItem(IndexItem, "Index");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.UnknownMPPM ?? true)
                && item.UnknownMPPM is {} UnknownMPPMItem)
            {
                fg.AppendItem(UnknownMPPMItem, "UnknownMPPM");
            }
            if (printMask?.Texture ?? true)
            {
                fg.AppendItem(item.Texture.FormKeyNullable, "Texture");
            }
            if ((printMask?.UnknownMPPF ?? true)
                && item.UnknownMPPF is {} UnknownMPPFItem)
            {
                fg.AppendLine($"UnknownMPPF => {SpanExt.ToHexString(UnknownMPPFItem)}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMorphPresetGetter? lhs,
            IMorphPresetGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)MorphPreset_FieldIndex.Index) ?? true))
            {
                if (lhs.Index != rhs.Index) return false;
            }
            if ((crystal?.GetShouldTranslate((int)MorphPreset_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)MorphPreset_FieldIndex.UnknownMPPM) ?? true))
            {
                if (!string.Equals(lhs.UnknownMPPM, rhs.UnknownMPPM)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)MorphPreset_FieldIndex.Texture) ?? true))
            {
                if (!lhs.Texture.Equals(rhs.Texture)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)MorphPreset_FieldIndex.UnknownMPPF) ?? true))
            {
                if (!MemorySliceExt.Equal(lhs.UnknownMPPF, rhs.UnknownMPPF)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IMorphPresetGetter item)
        {
            var hash = new HashCode();
            if (item.Index is {} Indexitem)
            {
                hash.Add(Indexitem);
            }
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.UnknownMPPM is {} UnknownMPPMitem)
            {
                hash.Add(UnknownMPPMitem);
            }
            hash.Add(item.Texture);
            if (item.UnknownMPPF is {} UnknownMPPFItem)
            {
                hash.Add(UnknownMPPFItem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return MorphPreset.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IMorphPresetGetter obj)
        {
            if (obj.Texture.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Texture);
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class MorphPresetSetterTranslationCommon
    {
        public static readonly MorphPresetSetterTranslationCommon Instance = new MorphPresetSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IMorphPreset item,
            IMorphPresetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)MorphPreset_FieldIndex.Index) ?? true))
            {
                item.Index = rhs.Index;
            }
            if ((copyMask?.GetShouldTranslate((int)MorphPreset_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)MorphPreset_FieldIndex.UnknownMPPM) ?? true))
            {
                item.UnknownMPPM = rhs.UnknownMPPM;
            }
            if ((copyMask?.GetShouldTranslate((int)MorphPreset_FieldIndex.Texture) ?? true))
            {
                item.Texture.SetTo(rhs.Texture.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)MorphPreset_FieldIndex.UnknownMPPF) ?? true))
            {
                if(rhs.UnknownMPPF is {} UnknownMPPFrhs)
                {
                    item.UnknownMPPF = UnknownMPPFrhs.ToArray();
                }
                else
                {
                    item.UnknownMPPF = default;
                }
            }
        }
        
        #endregion
        
        public MorphPreset DeepCopy(
            IMorphPresetGetter item,
            MorphPreset.TranslationMask? copyMask = null)
        {
            MorphPreset ret = (MorphPreset)((MorphPresetCommon)((IMorphPresetGetter)item).CommonInstance()!).GetNew();
            ((MorphPresetSetterTranslationCommon)((IMorphPresetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public MorphPreset DeepCopy(
            IMorphPresetGetter item,
            out MorphPreset.ErrorMask errorMask,
            MorphPreset.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            MorphPreset ret = (MorphPreset)((MorphPresetCommon)((IMorphPresetGetter)item).CommonInstance()!).GetNew();
            ((MorphPresetSetterTranslationCommon)((IMorphPresetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = MorphPreset.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public MorphPreset DeepCopy(
            IMorphPresetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            MorphPreset ret = (MorphPreset)((MorphPresetCommon)((IMorphPresetGetter)item).CommonInstance()!).GetNew();
            ((MorphPresetSetterTranslationCommon)((IMorphPresetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class MorphPreset
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MorphPreset_Registration.Instance;
        public static MorphPreset_Registration StaticRegistration => MorphPreset_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => MorphPresetCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return MorphPresetSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => MorphPresetSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IMorphPresetGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IMorphPresetGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IMorphPresetGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class MorphPresetBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static MorphPresetBinaryWriteTranslation Instance = new MorphPresetBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IMorphPresetGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Index,
                header: translationParams.ConvertToCustom(RecordTypes.MPPI));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.MPPN),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.UnknownMPPM,
                header: translationParams.ConvertToCustom(RecordTypes.MPPM),
                binaryType: StringBinaryType.NullTerminate);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Texture,
                header: translationParams.ConvertToCustom(RecordTypes.MPPT));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.UnknownMPPF,
                header: translationParams.ConvertToCustom(RecordTypes.MPPF));
        }

        public void Write(
            MutagenWriter writer,
            IMorphPresetGetter item,
            TypedWriteParams? translationParams = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IMorphPresetGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class MorphPresetBinaryCreateTranslation
    {
        public readonly static MorphPresetBinaryCreateTranslation Instance = new MorphPresetBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IMorphPreset item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IMorphPreset item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.MPPI:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)MorphPreset_FieldIndex.Index) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Index = frame.ReadUInt32();
                    return (int)MorphPreset_FieldIndex.Index;
                }
                case RecordTypeInts.MPPN:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)MorphPreset_FieldIndex.Name) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)MorphPreset_FieldIndex.Name;
                }
                case RecordTypeInts.MPPM:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)MorphPreset_FieldIndex.UnknownMPPM) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.UnknownMPPM = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)MorphPreset_FieldIndex.UnknownMPPM;
                }
                case RecordTypeInts.MPPT:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)MorphPreset_FieldIndex.Texture) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Texture.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)MorphPreset_FieldIndex.Texture;
                }
                case RecordTypeInts.MPPF:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)MorphPreset_FieldIndex.UnknownMPPF) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.UnknownMPPF = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)MorphPreset_FieldIndex.UnknownMPPF;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class MorphPresetBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IMorphPresetGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((MorphPresetBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class MorphPresetBinaryOverlay :
        PluginBinaryOverlay,
        IMorphPresetGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MorphPreset_Registration.Instance;
        public static MorphPreset_Registration StaticRegistration => MorphPreset_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => MorphPresetCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => MorphPresetSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IMorphPresetGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IMorphPresetGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IMorphPresetGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public IEnumerable<IFormLinkGetter> ContainedFormLinks => MorphPresetCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => MorphPresetBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((MorphPresetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Index
        private int? _IndexLocation;
        public UInt32? Index => _IndexLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _IndexLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region UnknownMPPM
        private int? _UnknownMPPMLocation;
        public String? UnknownMPPM => _UnknownMPPMLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _UnknownMPPMLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region Texture
        private int? _TextureLocation;
        public IFormLinkNullableGetter<ITextureSetGetter> Texture => _TextureLocation.HasValue ? new FormLinkNullable<ITextureSetGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _TextureLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ITextureSetGetter>.Null;
        #endregion
        #region UnknownMPPF
        private int? _UnknownMPPFLocation;
        public ReadOnlyMemorySlice<Byte>? UnknownMPPF => _UnknownMPPFLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _UnknownMPPFLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected MorphPresetBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static MorphPresetBinaryOverlay MorphPresetFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new MorphPresetBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static MorphPresetBinaryOverlay MorphPresetFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return MorphPresetFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.MPPI:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)MorphPreset_FieldIndex.Index) return ParseResult.Stop;
                    _IndexLocation = (stream.Position - offset);
                    return (int)MorphPreset_FieldIndex.Index;
                }
                case RecordTypeInts.MPPN:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)MorphPreset_FieldIndex.Name) return ParseResult.Stop;
                    _NameLocation = (stream.Position - offset);
                    return (int)MorphPreset_FieldIndex.Name;
                }
                case RecordTypeInts.MPPM:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)MorphPreset_FieldIndex.UnknownMPPM) return ParseResult.Stop;
                    _UnknownMPPMLocation = (stream.Position - offset);
                    return (int)MorphPreset_FieldIndex.UnknownMPPM;
                }
                case RecordTypeInts.MPPT:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)MorphPreset_FieldIndex.Texture) return ParseResult.Stop;
                    _TextureLocation = (stream.Position - offset);
                    return (int)MorphPreset_FieldIndex.Texture;
                }
                case RecordTypeInts.MPPF:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)MorphPreset_FieldIndex.UnknownMPPF) return ParseResult.Stop;
                    _UnknownMPPFLocation = (stream.Position - offset);
                    return (int)MorphPreset_FieldIndex.UnknownMPPF;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            MorphPresetMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IMorphPresetGetter rhs) return false;
            return ((MorphPresetCommon)((IMorphPresetGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IMorphPresetGetter? obj)
        {
            return ((MorphPresetCommon)((IMorphPresetGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((MorphPresetCommon)((IMorphPresetGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

