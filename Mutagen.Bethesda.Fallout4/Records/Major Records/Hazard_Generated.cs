/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.RecordTypeMapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Hazard :
        Fallout4MajorRecord,
        IEquatable<IHazardGetter>,
        IHazardInternal,
        ILoquiObjectSetter<Hazard>
    {
        #region Ctor
        protected Hazard()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded, IObjectBoundedOptional
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IHazardGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IHazardGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IHazardGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region ImageSpaceModifier
        private readonly IFormLinkNullable<IImageSpaceAdapterGetter> _ImageSpaceModifier = new FormLinkNullable<IImageSpaceAdapterGetter>();
        public IFormLinkNullable<IImageSpaceAdapterGetter> ImageSpaceModifier
        {
            get => _ImageSpaceModifier;
            set => _ImageSpaceModifier.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IImageSpaceAdapterGetter> IHazardGetter.ImageSpaceModifier => this.ImageSpaceModifier;
        #endregion
        #region Limit
        public UInt32 Limit { get; set; } = default;
        #endregion
        #region Radius
        public Single Radius { get; set; } = default;
        #endregion
        #region Lifetime
        public Single Lifetime { get; set; } = default;
        #endregion
        #region ImageSpaceRadius
        public Single ImageSpaceRadius { get; set; } = default;
        #endregion
        #region TargetInterval
        public Single TargetInterval { get; set; } = default;
        #endregion
        #region Flags
        public Hazard.Flag Flags { get; set; } = default;
        #endregion
        #region Effect
        private readonly IFormLink<IEffectRecordGetter> _Effect = new FormLink<IEffectRecordGetter>();
        public IFormLink<IEffectRecordGetter> Effect
        {
            get => _Effect;
            set => _Effect.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IEffectRecordGetter> IHazardGetter.Effect => this.Effect;
        #endregion
        #region Light
        private readonly IFormLink<ILightGetter> _Light = new FormLink<ILightGetter>();
        public IFormLink<ILightGetter> Light
        {
            get => _Light;
            set => _Light.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ILightGetter> IHazardGetter.Light => this.Light;
        #endregion
        #region ImpactDataSet
        private readonly IFormLink<IImpactDataSetGetter> _ImpactDataSet = new FormLink<IImpactDataSetGetter>();
        public IFormLink<IImpactDataSetGetter> ImpactDataSet
        {
            get => _ImpactDataSet;
            set => _ImpactDataSet.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IImpactDataSetGetter> IHazardGetter.ImpactDataSet => this.ImpactDataSet;
        #endregion
        #region Sound
        private readonly IFormLink<ISoundDescriptorGetter> _Sound = new FormLink<ISoundDescriptorGetter>();
        public IFormLink<ISoundDescriptorGetter> Sound
        {
            get => _Sound;
            set => _Sound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ISoundDescriptorGetter> IHazardGetter.Sound => this.Sound;
        #endregion
        #region FullEffectRadius
        public Single FullEffectRadius { get; set; } = default;
        #endregion
        #region TaperWeight
        public Single TaperWeight { get; set; } = default;
        #endregion
        #region TaperCurse
        public Single TaperCurse { get; set; } = default;
        #endregion
        #region DNAMDataTypeState
        public Hazard.DNAMDataType DNAMDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            HazardMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.ImageSpaceModifier = initialValue;
                this.Limit = initialValue;
                this.Radius = initialValue;
                this.Lifetime = initialValue;
                this.ImageSpaceRadius = initialValue;
                this.TargetInterval = initialValue;
                this.Flags = initialValue;
                this.Effect = initialValue;
                this.Light = initialValue;
                this.ImpactDataSet = initialValue;
                this.Sound = initialValue;
                this.FullEffectRadius = initialValue;
                this.TaperWeight = initialValue;
                this.TaperCurse = initialValue;
                this.DNAMDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem ObjectBounds,
                TItem Name,
                TItem Model,
                TItem ImageSpaceModifier,
                TItem Limit,
                TItem Radius,
                TItem Lifetime,
                TItem ImageSpaceRadius,
                TItem TargetInterval,
                TItem Flags,
                TItem Effect,
                TItem Light,
                TItem ImpactDataSet,
                TItem Sound,
                TItem FullEffectRadius,
                TItem TaperWeight,
                TItem TaperCurse,
                TItem DNAMDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.ImageSpaceModifier = ImageSpaceModifier;
                this.Limit = Limit;
                this.Radius = Radius;
                this.Lifetime = Lifetime;
                this.ImageSpaceRadius = ImageSpaceRadius;
                this.TargetInterval = TargetInterval;
                this.Flags = Flags;
                this.Effect = Effect;
                this.Light = Light;
                this.ImpactDataSet = ImpactDataSet;
                this.Sound = Sound;
                this.FullEffectRadius = FullEffectRadius;
                this.TaperWeight = TaperWeight;
                this.TaperCurse = TaperCurse;
                this.DNAMDataTypeState = DNAMDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem ImageSpaceModifier;
            public TItem Limit;
            public TItem Radius;
            public TItem Lifetime;
            public TItem ImageSpaceRadius;
            public TItem TargetInterval;
            public TItem Flags;
            public TItem Effect;
            public TItem Light;
            public TItem ImpactDataSet;
            public TItem Sound;
            public TItem FullEffectRadius;
            public TItem TaperWeight;
            public TItem TaperCurse;
            public TItem DNAMDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.ImageSpaceModifier, rhs.ImageSpaceModifier)) return false;
                if (!object.Equals(this.Limit, rhs.Limit)) return false;
                if (!object.Equals(this.Radius, rhs.Radius)) return false;
                if (!object.Equals(this.Lifetime, rhs.Lifetime)) return false;
                if (!object.Equals(this.ImageSpaceRadius, rhs.ImageSpaceRadius)) return false;
                if (!object.Equals(this.TargetInterval, rhs.TargetInterval)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Effect, rhs.Effect)) return false;
                if (!object.Equals(this.Light, rhs.Light)) return false;
                if (!object.Equals(this.ImpactDataSet, rhs.ImpactDataSet)) return false;
                if (!object.Equals(this.Sound, rhs.Sound)) return false;
                if (!object.Equals(this.FullEffectRadius, rhs.FullEffectRadius)) return false;
                if (!object.Equals(this.TaperWeight, rhs.TaperWeight)) return false;
                if (!object.Equals(this.TaperCurse, rhs.TaperCurse)) return false;
                if (!object.Equals(this.DNAMDataTypeState, rhs.DNAMDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.ImageSpaceModifier);
                hash.Add(this.Limit);
                hash.Add(this.Radius);
                hash.Add(this.Lifetime);
                hash.Add(this.ImageSpaceRadius);
                hash.Add(this.TargetInterval);
                hash.Add(this.Flags);
                hash.Add(this.Effect);
                hash.Add(this.Light);
                hash.Add(this.ImpactDataSet);
                hash.Add(this.Sound);
                hash.Add(this.FullEffectRadius);
                hash.Add(this.TaperWeight);
                hash.Add(this.TaperCurse);
                hash.Add(this.DNAMDataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.ImageSpaceModifier)) return false;
                if (!eval(this.Limit)) return false;
                if (!eval(this.Radius)) return false;
                if (!eval(this.Lifetime)) return false;
                if (!eval(this.ImageSpaceRadius)) return false;
                if (!eval(this.TargetInterval)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Effect)) return false;
                if (!eval(this.Light)) return false;
                if (!eval(this.ImpactDataSet)) return false;
                if (!eval(this.Sound)) return false;
                if (!eval(this.FullEffectRadius)) return false;
                if (!eval(this.TaperWeight)) return false;
                if (!eval(this.TaperCurse)) return false;
                if (!eval(this.DNAMDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.ImageSpaceModifier)) return true;
                if (eval(this.Limit)) return true;
                if (eval(this.Radius)) return true;
                if (eval(this.Lifetime)) return true;
                if (eval(this.ImageSpaceRadius)) return true;
                if (eval(this.TargetInterval)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Effect)) return true;
                if (eval(this.Light)) return true;
                if (eval(this.ImpactDataSet)) return true;
                if (eval(this.Sound)) return true;
                if (eval(this.FullEffectRadius)) return true;
                if (eval(this.TaperWeight)) return true;
                if (eval(this.TaperCurse)) return true;
                if (eval(this.DNAMDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Hazard.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.ImageSpaceModifier = eval(this.ImageSpaceModifier);
                obj.Limit = eval(this.Limit);
                obj.Radius = eval(this.Radius);
                obj.Lifetime = eval(this.Lifetime);
                obj.ImageSpaceRadius = eval(this.ImageSpaceRadius);
                obj.TargetInterval = eval(this.TargetInterval);
                obj.Flags = eval(this.Flags);
                obj.Effect = eval(this.Effect);
                obj.Light = eval(this.Light);
                obj.ImpactDataSet = eval(this.ImpactDataSet);
                obj.Sound = eval(this.Sound);
                obj.FullEffectRadius = eval(this.FullEffectRadius);
                obj.TaperWeight = eval(this.TaperWeight);
                obj.TaperCurse = eval(this.TaperCurse);
                obj.DNAMDataTypeState = eval(this.DNAMDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Hazard.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Hazard.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Hazard.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.ImageSpaceModifier ?? true)
                    {
                        fg.AppendItem(ImageSpaceModifier, "ImageSpaceModifier");
                    }
                    if (printMask?.Limit ?? true)
                    {
                        fg.AppendItem(Limit, "Limit");
                    }
                    if (printMask?.Radius ?? true)
                    {
                        fg.AppendItem(Radius, "Radius");
                    }
                    if (printMask?.Lifetime ?? true)
                    {
                        fg.AppendItem(Lifetime, "Lifetime");
                    }
                    if (printMask?.ImageSpaceRadius ?? true)
                    {
                        fg.AppendItem(ImageSpaceRadius, "ImageSpaceRadius");
                    }
                    if (printMask?.TargetInterval ?? true)
                    {
                        fg.AppendItem(TargetInterval, "TargetInterval");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Effect ?? true)
                    {
                        fg.AppendItem(Effect, "Effect");
                    }
                    if (printMask?.Light ?? true)
                    {
                        fg.AppendItem(Light, "Light");
                    }
                    if (printMask?.ImpactDataSet ?? true)
                    {
                        fg.AppendItem(ImpactDataSet, "ImpactDataSet");
                    }
                    if (printMask?.Sound ?? true)
                    {
                        fg.AppendItem(Sound, "Sound");
                    }
                    if (printMask?.FullEffectRadius ?? true)
                    {
                        fg.AppendItem(FullEffectRadius, "FullEffectRadius");
                    }
                    if (printMask?.TaperWeight ?? true)
                    {
                        fg.AppendItem(TaperWeight, "TaperWeight");
                    }
                    if (printMask?.TaperCurse ?? true)
                    {
                        fg.AppendItem(TaperCurse, "TaperCurse");
                    }
                    if (printMask?.DNAMDataTypeState ?? true)
                    {
                        fg.AppendItem(DNAMDataTypeState, "DNAMDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? ImageSpaceModifier;
            public Exception? Limit;
            public Exception? Radius;
            public Exception? Lifetime;
            public Exception? ImageSpaceRadius;
            public Exception? TargetInterval;
            public Exception? Flags;
            public Exception? Effect;
            public Exception? Light;
            public Exception? ImpactDataSet;
            public Exception? Sound;
            public Exception? FullEffectRadius;
            public Exception? TaperWeight;
            public Exception? TaperCurse;
            public Exception? DNAMDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Hazard_FieldIndex enu = (Hazard_FieldIndex)index;
                switch (enu)
                {
                    case Hazard_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Hazard_FieldIndex.Name:
                        return Name;
                    case Hazard_FieldIndex.Model:
                        return Model;
                    case Hazard_FieldIndex.ImageSpaceModifier:
                        return ImageSpaceModifier;
                    case Hazard_FieldIndex.Limit:
                        return Limit;
                    case Hazard_FieldIndex.Radius:
                        return Radius;
                    case Hazard_FieldIndex.Lifetime:
                        return Lifetime;
                    case Hazard_FieldIndex.ImageSpaceRadius:
                        return ImageSpaceRadius;
                    case Hazard_FieldIndex.TargetInterval:
                        return TargetInterval;
                    case Hazard_FieldIndex.Flags:
                        return Flags;
                    case Hazard_FieldIndex.Effect:
                        return Effect;
                    case Hazard_FieldIndex.Light:
                        return Light;
                    case Hazard_FieldIndex.ImpactDataSet:
                        return ImpactDataSet;
                    case Hazard_FieldIndex.Sound:
                        return Sound;
                    case Hazard_FieldIndex.FullEffectRadius:
                        return FullEffectRadius;
                    case Hazard_FieldIndex.TaperWeight:
                        return TaperWeight;
                    case Hazard_FieldIndex.TaperCurse:
                        return TaperCurse;
                    case Hazard_FieldIndex.DNAMDataTypeState:
                        return DNAMDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Hazard_FieldIndex enu = (Hazard_FieldIndex)index;
                switch (enu)
                {
                    case Hazard_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Hazard_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Hazard_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Hazard_FieldIndex.ImageSpaceModifier:
                        this.ImageSpaceModifier = ex;
                        break;
                    case Hazard_FieldIndex.Limit:
                        this.Limit = ex;
                        break;
                    case Hazard_FieldIndex.Radius:
                        this.Radius = ex;
                        break;
                    case Hazard_FieldIndex.Lifetime:
                        this.Lifetime = ex;
                        break;
                    case Hazard_FieldIndex.ImageSpaceRadius:
                        this.ImageSpaceRadius = ex;
                        break;
                    case Hazard_FieldIndex.TargetInterval:
                        this.TargetInterval = ex;
                        break;
                    case Hazard_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Hazard_FieldIndex.Effect:
                        this.Effect = ex;
                        break;
                    case Hazard_FieldIndex.Light:
                        this.Light = ex;
                        break;
                    case Hazard_FieldIndex.ImpactDataSet:
                        this.ImpactDataSet = ex;
                        break;
                    case Hazard_FieldIndex.Sound:
                        this.Sound = ex;
                        break;
                    case Hazard_FieldIndex.FullEffectRadius:
                        this.FullEffectRadius = ex;
                        break;
                    case Hazard_FieldIndex.TaperWeight:
                        this.TaperWeight = ex;
                        break;
                    case Hazard_FieldIndex.TaperCurse:
                        this.TaperCurse = ex;
                        break;
                    case Hazard_FieldIndex.DNAMDataTypeState:
                        this.DNAMDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Hazard_FieldIndex enu = (Hazard_FieldIndex)index;
                switch (enu)
                {
                    case Hazard_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Hazard_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Hazard_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Hazard_FieldIndex.ImageSpaceModifier:
                        this.ImageSpaceModifier = (Exception?)obj;
                        break;
                    case Hazard_FieldIndex.Limit:
                        this.Limit = (Exception?)obj;
                        break;
                    case Hazard_FieldIndex.Radius:
                        this.Radius = (Exception?)obj;
                        break;
                    case Hazard_FieldIndex.Lifetime:
                        this.Lifetime = (Exception?)obj;
                        break;
                    case Hazard_FieldIndex.ImageSpaceRadius:
                        this.ImageSpaceRadius = (Exception?)obj;
                        break;
                    case Hazard_FieldIndex.TargetInterval:
                        this.TargetInterval = (Exception?)obj;
                        break;
                    case Hazard_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Hazard_FieldIndex.Effect:
                        this.Effect = (Exception?)obj;
                        break;
                    case Hazard_FieldIndex.Light:
                        this.Light = (Exception?)obj;
                        break;
                    case Hazard_FieldIndex.ImpactDataSet:
                        this.ImpactDataSet = (Exception?)obj;
                        break;
                    case Hazard_FieldIndex.Sound:
                        this.Sound = (Exception?)obj;
                        break;
                    case Hazard_FieldIndex.FullEffectRadius:
                        this.FullEffectRadius = (Exception?)obj;
                        break;
                    case Hazard_FieldIndex.TaperWeight:
                        this.TaperWeight = (Exception?)obj;
                        break;
                    case Hazard_FieldIndex.TaperCurse:
                        this.TaperCurse = (Exception?)obj;
                        break;
                    case Hazard_FieldIndex.DNAMDataTypeState:
                        this.DNAMDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (ImageSpaceModifier != null) return true;
                if (Limit != null) return true;
                if (Radius != null) return true;
                if (Lifetime != null) return true;
                if (ImageSpaceRadius != null) return true;
                if (TargetInterval != null) return true;
                if (Flags != null) return true;
                if (Effect != null) return true;
                if (Light != null) return true;
                if (ImpactDataSet != null) return true;
                if (Sound != null) return true;
                if (FullEffectRadius != null) return true;
                if (TaperWeight != null) return true;
                if (TaperCurse != null) return true;
                if (DNAMDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                ObjectBounds?.ToString(fg);
                fg.AppendItem(Name, "Name");
                Model?.ToString(fg);
                fg.AppendItem(ImageSpaceModifier, "ImageSpaceModifier");
                fg.AppendItem(Limit, "Limit");
                fg.AppendItem(Radius, "Radius");
                fg.AppendItem(Lifetime, "Lifetime");
                fg.AppendItem(ImageSpaceRadius, "ImageSpaceRadius");
                fg.AppendItem(TargetInterval, "TargetInterval");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(Effect, "Effect");
                fg.AppendItem(Light, "Light");
                fg.AppendItem(ImpactDataSet, "ImpactDataSet");
                fg.AppendItem(Sound, "Sound");
                fg.AppendItem(FullEffectRadius, "FullEffectRadius");
                fg.AppendItem(TaperWeight, "TaperWeight");
                fg.AppendItem(TaperCurse, "TaperCurse");
                fg.AppendItem(DNAMDataTypeState, "DNAMDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.ImageSpaceModifier = this.ImageSpaceModifier.Combine(rhs.ImageSpaceModifier);
                ret.Limit = this.Limit.Combine(rhs.Limit);
                ret.Radius = this.Radius.Combine(rhs.Radius);
                ret.Lifetime = this.Lifetime.Combine(rhs.Lifetime);
                ret.ImageSpaceRadius = this.ImageSpaceRadius.Combine(rhs.ImageSpaceRadius);
                ret.TargetInterval = this.TargetInterval.Combine(rhs.TargetInterval);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Effect = this.Effect.Combine(rhs.Effect);
                ret.Light = this.Light.Combine(rhs.Light);
                ret.ImpactDataSet = this.ImpactDataSet.Combine(rhs.ImpactDataSet);
                ret.Sound = this.Sound.Combine(rhs.Sound);
                ret.FullEffectRadius = this.FullEffectRadius.Combine(rhs.FullEffectRadius);
                ret.TaperWeight = this.TaperWeight.Combine(rhs.TaperWeight);
                ret.TaperCurse = this.TaperCurse.Combine(rhs.TaperCurse);
                ret.DNAMDataTypeState = this.DNAMDataTypeState.Combine(rhs.DNAMDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool Name;
            public Model.TranslationMask? Model;
            public bool ImageSpaceModifier;
            public bool Limit;
            public bool Radius;
            public bool Lifetime;
            public bool ImageSpaceRadius;
            public bool TargetInterval;
            public bool Flags;
            public bool Effect;
            public bool Light;
            public bool ImpactDataSet;
            public bool Sound;
            public bool FullEffectRadius;
            public bool TaperWeight;
            public bool TaperCurse;
            public bool DNAMDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.ImageSpaceModifier = defaultOn;
                this.Limit = defaultOn;
                this.Radius = defaultOn;
                this.Lifetime = defaultOn;
                this.ImageSpaceRadius = defaultOn;
                this.TargetInterval = defaultOn;
                this.Flags = defaultOn;
                this.Effect = defaultOn;
                this.Light = defaultOn;
                this.ImpactDataSet = defaultOn;
                this.Sound = defaultOn;
                this.FullEffectRadius = defaultOn;
                this.TaperWeight = defaultOn;
                this.TaperCurse = defaultOn;
                this.DNAMDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((ImageSpaceModifier, null));
                ret.Add((Limit, null));
                ret.Add((Radius, null));
                ret.Add((Lifetime, null));
                ret.Add((ImageSpaceRadius, null));
                ret.Add((TargetInterval, null));
                ret.Add((Flags, null));
                ret.Add((Effect, null));
                ret.Add((Light, null));
                ret.Add((ImpactDataSet, null));
                ret.Add((Sound, null));
                ret.Add((FullEffectRadius, null));
                ret.Add((TaperWeight, null));
                ret.Add((TaperCurse, null));
                ret.Add((DNAMDataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Hazard_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => HazardCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => HazardSetterCommon.Instance.RemapLinks(this, mapping);
        public Hazard(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private Hazard(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal Hazard(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Hazard(IFallout4Mod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Hazard(IFallout4Mod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Hazard>.ToString(this);
        }

        protected override Type LinkType => typeof(IHazard);

        [Flags]
        public enum DNAMDataType
        {
        }
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IHazardGetter rhs) return false;
            return ((HazardCommon)((IHazardGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IHazardGetter? obj)
        {
            return ((HazardCommon)((IHazardGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((HazardCommon)((IHazardGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => HazardBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((HazardBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Hazard CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new Hazard();
            ((HazardSetterCommon)((IHazardGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Hazard item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((HazardSetterCommon)((IHazardGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Hazard GetNew()
        {
            return new Hazard();
        }

    }
    #endregion

    #region Interface
    public partial interface IHazard :
        IFallout4MajorRecordInternal,
        IFormLinkContainer,
        IHazardGetter,
        ILoquiObjectSetter<IHazardInternal>,
        IModeled,
        INamed,
        INamedRequired,
        IObjectBounded,
        IObjectBoundedOptional,
        IPlacedTrapTarget,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: IObjectBounded, IObjectBoundedOptional
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        new IFormLinkNullable<IImageSpaceAdapterGetter> ImageSpaceModifier { get; set; }
        new UInt32 Limit { get; set; }
        new Single Radius { get; set; }
        new Single Lifetime { get; set; }
        new Single ImageSpaceRadius { get; set; }
        new Single TargetInterval { get; set; }
        new Hazard.Flag Flags { get; set; }
        new IFormLink<IEffectRecordGetter> Effect { get; set; }
        new IFormLink<ILightGetter> Light { get; set; }
        new IFormLink<IImpactDataSetGetter> ImpactDataSet { get; set; }
        new IFormLink<ISoundDescriptorGetter> Sound { get; set; }
        new Single FullEffectRadius { get; set; }
        new Single TaperWeight { get; set; }
        new Single TaperCurse { get; set; }
        new Hazard.DNAMDataType DNAMDataTypeState { get; set; }
    }

    public partial interface IHazardInternal :
        IFallout4MajorRecordInternal,
        IHazard,
        IHazardGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.HAZD)]
    public partial interface IHazardGetter :
        IFallout4MajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IHazardGetter>,
        IMapsToGetter<IHazardGetter>,
        IModeledGetter,
        INamedGetter,
        INamedRequiredGetter,
        IObjectBoundedGetter,
        IObjectBoundedOptionalGetter,
        IPlacedTrapTargetGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Hazard_Registration.Instance;
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter, IObjectBoundedOptionalGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        IFormLinkNullableGetter<IImageSpaceAdapterGetter> ImageSpaceModifier { get; }
        UInt32 Limit { get; }
        Single Radius { get; }
        Single Lifetime { get; }
        Single ImageSpaceRadius { get; }
        Single TargetInterval { get; }
        Hazard.Flag Flags { get; }
        IFormLinkGetter<IEffectRecordGetter> Effect { get; }
        IFormLinkGetter<ILightGetter> Light { get; }
        IFormLinkGetter<IImpactDataSetGetter> ImpactDataSet { get; }
        IFormLinkGetter<ISoundDescriptorGetter> Sound { get; }
        Single FullEffectRadius { get; }
        Single TaperWeight { get; }
        Single TaperCurse { get; }
        Hazard.DNAMDataType DNAMDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class HazardMixIn
    {
        public static void Clear(this IHazardInternal item)
        {
            ((HazardSetterCommon)((IHazardGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Hazard.Mask<bool> GetEqualsMask(
            this IHazardGetter item,
            IHazardGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((HazardCommon)((IHazardGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IHazardGetter item,
            string? name = null,
            Hazard.Mask<bool>? printMask = null)
        {
            return ((HazardCommon)((IHazardGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IHazardGetter item,
            FileGeneration fg,
            string? name = null,
            Hazard.Mask<bool>? printMask = null)
        {
            ((HazardCommon)((IHazardGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IHazardGetter item,
            IHazardGetter rhs,
            Hazard.TranslationMask? equalsMask = null)
        {
            return ((HazardCommon)((IHazardGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IHazardInternal lhs,
            IHazardGetter rhs,
            out Hazard.ErrorMask errorMask,
            Hazard.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((HazardSetterTranslationCommon)((IHazardGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Hazard.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IHazardInternal lhs,
            IHazardGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((HazardSetterTranslationCommon)((IHazardGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Hazard DeepCopy(
            this IHazardGetter item,
            Hazard.TranslationMask? copyMask = null)
        {
            return ((HazardSetterTranslationCommon)((IHazardGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Hazard DeepCopy(
            this IHazardGetter item,
            out Hazard.ErrorMask errorMask,
            Hazard.TranslationMask? copyMask = null)
        {
            return ((HazardSetterTranslationCommon)((IHazardGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Hazard DeepCopy(
            this IHazardGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((HazardSetterTranslationCommon)((IHazardGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Hazard Duplicate(
            this IHazardGetter item,
            FormKey formKey,
            Hazard.TranslationMask? copyMask = null)
        {
            return ((HazardCommon)((IHazardGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IHazardInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((HazardSetterCommon)((IHazardGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Hazard_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        ObjectBounds = 6,
        Name = 7,
        Model = 8,
        ImageSpaceModifier = 9,
        Limit = 10,
        Radius = 11,
        Lifetime = 12,
        ImageSpaceRadius = 13,
        TargetInterval = 14,
        Flags = 15,
        Effect = 16,
        Light = 17,
        ImpactDataSet = 18,
        Sound = 19,
        FullEffectRadius = 20,
        TaperWeight = 21,
        TaperCurse = 22,
        DNAMDataTypeState = 23,
    }
    #endregion

    #region Registration
    public partial class Hazard_Registration : ILoquiRegistration
    {
        public static readonly Hazard_Registration Instance = new Hazard_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 241,
            version: 0);

        public const string GUID = "d61b1bde-1cf4-40d1-9eec-63626d1f147a";

        public const ushort AdditionalFieldCount = 18;

        public const ushort FieldCount = 24;

        public static readonly Type MaskType = typeof(Hazard.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Hazard.ErrorMask);

        public static readonly Type ClassType = typeof(Hazard);

        public static readonly Type GetterType = typeof(IHazardGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IHazard);

        public static readonly Type? InternalSetterType = typeof(IHazardInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Hazard";

        public const string Name = "Hazard";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.HAZD;
        public static readonly Type BinaryWriteTranslation = typeof(HazardBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class HazardSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly HazardSetterCommon Instance = new HazardSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IHazardInternal item)
        {
            ClearPartial();
            item.ObjectBounds.Clear();
            item.Name = default;
            item.Model = null;
            item.ImageSpaceModifier.Clear();
            item.Limit = default;
            item.Radius = default;
            item.Lifetime = default;
            item.ImageSpaceRadius = default;
            item.TargetInterval = default;
            item.Flags = default;
            item.Effect.Clear();
            item.Light.Clear();
            item.ImpactDataSet.Clear();
            item.Sound.Clear();
            item.FullEffectRadius = default;
            item.TaperWeight = default;
            item.TaperCurse = default;
            item.DNAMDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IHazardInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IHazardInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IHazard obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Model?.RemapLinks(mapping);
            obj.ImageSpaceModifier.Relink(mapping);
            obj.Effect.Relink(mapping);
            obj.Light.Relink(mapping);
            obj.ImpactDataSet.Relink(mapping);
            obj.Sound.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IHazardInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.MajorRecordParse<IHazardInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: HazardBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: HazardBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (Hazard)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (Hazard)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    public partial class HazardCommon : Fallout4MajorRecordCommon
    {
        public new static readonly HazardCommon Instance = new HazardCommon();

        public Hazard.Mask<bool> GetEqualsMask(
            IHazardGetter item,
            IHazardGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Hazard.Mask<bool>(false);
            ((HazardCommon)((IHazardGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IHazardGetter item,
            IHazardGetter rhs,
            Hazard.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ImageSpaceModifier = item.ImageSpaceModifier.Equals(rhs.ImageSpaceModifier);
            ret.Limit = item.Limit == rhs.Limit;
            ret.Radius = item.Radius.EqualsWithin(rhs.Radius);
            ret.Lifetime = item.Lifetime.EqualsWithin(rhs.Lifetime);
            ret.ImageSpaceRadius = item.ImageSpaceRadius.EqualsWithin(rhs.ImageSpaceRadius);
            ret.TargetInterval = item.TargetInterval.EqualsWithin(rhs.TargetInterval);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Effect = item.Effect.Equals(rhs.Effect);
            ret.Light = item.Light.Equals(rhs.Light);
            ret.ImpactDataSet = item.ImpactDataSet.Equals(rhs.ImpactDataSet);
            ret.Sound = item.Sound.Equals(rhs.Sound);
            ret.FullEffectRadius = item.FullEffectRadius.EqualsWithin(rhs.FullEffectRadius);
            ret.TaperWeight = item.TaperWeight.EqualsWithin(rhs.TaperWeight);
            ret.TaperCurse = item.TaperCurse.EqualsWithin(rhs.TaperCurse);
            ret.DNAMDataTypeState = item.DNAMDataTypeState == rhs.DNAMDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IHazardGetter item,
            string? name = null,
            Hazard.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IHazardGetter item,
            FileGeneration fg,
            string? name = null,
            Hazard.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Hazard =>");
            }
            else
            {
                fg.AppendLine($"{name} (Hazard) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IHazardGetter item,
            FileGeneration fg,
            Hazard.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.ToString(fg, "Model");
            }
            if (printMask?.ImageSpaceModifier ?? true)
            {
                fg.AppendItem(item.ImageSpaceModifier.FormKeyNullable, "ImageSpaceModifier");
            }
            if (printMask?.Limit ?? true)
            {
                fg.AppendItem(item.Limit, "Limit");
            }
            if (printMask?.Radius ?? true)
            {
                fg.AppendItem(item.Radius, "Radius");
            }
            if (printMask?.Lifetime ?? true)
            {
                fg.AppendItem(item.Lifetime, "Lifetime");
            }
            if (printMask?.ImageSpaceRadius ?? true)
            {
                fg.AppendItem(item.ImageSpaceRadius, "ImageSpaceRadius");
            }
            if (printMask?.TargetInterval ?? true)
            {
                fg.AppendItem(item.TargetInterval, "TargetInterval");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Effect ?? true)
            {
                fg.AppendItem(item.Effect.FormKey, "Effect");
            }
            if (printMask?.Light ?? true)
            {
                fg.AppendItem(item.Light.FormKey, "Light");
            }
            if (printMask?.ImpactDataSet ?? true)
            {
                fg.AppendItem(item.ImpactDataSet.FormKey, "ImpactDataSet");
            }
            if (printMask?.Sound ?? true)
            {
                fg.AppendItem(item.Sound.FormKey, "Sound");
            }
            if (printMask?.FullEffectRadius ?? true)
            {
                fg.AppendItem(item.FullEffectRadius, "FullEffectRadius");
            }
            if (printMask?.TaperWeight ?? true)
            {
                fg.AppendItem(item.TaperWeight, "TaperWeight");
            }
            if (printMask?.TaperCurse ?? true)
            {
                fg.AppendItem(item.TaperCurse, "TaperCurse");
            }
            if (printMask?.DNAMDataTypeState ?? true)
            {
                fg.AppendItem(item.DNAMDataTypeState, "DNAMDataTypeState");
            }
        }
        
        public static Hazard_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Hazard_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Hazard_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Hazard_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Hazard_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Hazard_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Hazard_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Hazard_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Hazard_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Hazard_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Hazard_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Hazard_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IHazardGetter? lhs,
            IHazardGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)Hazard_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, crystal?.GetSubCrystal((int)Hazard_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Hazard_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Hazard_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, crystal?.GetSubCrystal((int)Hazard_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Hazard_FieldIndex.ImageSpaceModifier) ?? true))
            {
                if (!lhs.ImageSpaceModifier.Equals(rhs.ImageSpaceModifier)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Hazard_FieldIndex.Limit) ?? true))
            {
                if (lhs.Limit != rhs.Limit) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Hazard_FieldIndex.Radius) ?? true))
            {
                if (!lhs.Radius.EqualsWithin(rhs.Radius)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Hazard_FieldIndex.Lifetime) ?? true))
            {
                if (!lhs.Lifetime.EqualsWithin(rhs.Lifetime)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Hazard_FieldIndex.ImageSpaceRadius) ?? true))
            {
                if (!lhs.ImageSpaceRadius.EqualsWithin(rhs.ImageSpaceRadius)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Hazard_FieldIndex.TargetInterval) ?? true))
            {
                if (!lhs.TargetInterval.EqualsWithin(rhs.TargetInterval)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Hazard_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Hazard_FieldIndex.Effect) ?? true))
            {
                if (!lhs.Effect.Equals(rhs.Effect)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Hazard_FieldIndex.Light) ?? true))
            {
                if (!lhs.Light.Equals(rhs.Light)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Hazard_FieldIndex.ImpactDataSet) ?? true))
            {
                if (!lhs.ImpactDataSet.Equals(rhs.ImpactDataSet)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Hazard_FieldIndex.Sound) ?? true))
            {
                if (!lhs.Sound.Equals(rhs.Sound)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Hazard_FieldIndex.FullEffectRadius) ?? true))
            {
                if (!lhs.FullEffectRadius.EqualsWithin(rhs.FullEffectRadius)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Hazard_FieldIndex.TaperWeight) ?? true))
            {
                if (!lhs.TaperWeight.EqualsWithin(rhs.TaperWeight)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Hazard_FieldIndex.TaperCurse) ?? true))
            {
                if (!lhs.TaperCurse.EqualsWithin(rhs.TaperCurse)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Hazard_FieldIndex.DNAMDataTypeState) ?? true))
            {
                if (lhs.DNAMDataTypeState != rhs.DNAMDataTypeState) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IHazardGetter?)lhs,
                rhs: rhs as IHazardGetter,
                crystal: crystal);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IHazardGetter?)lhs,
                rhs: rhs as IHazardGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(IHazardGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.ImageSpaceModifier);
            hash.Add(item.Limit);
            hash.Add(item.Radius);
            hash.Add(item.Lifetime);
            hash.Add(item.ImageSpaceRadius);
            hash.Add(item.TargetInterval);
            hash.Add(item.Flags);
            hash.Add(item.Effect);
            hash.Add(item.Light);
            hash.Add(item.ImpactDataSet);
            hash.Add(item.Sound);
            hash.Add(item.FullEffectRadius);
            hash.Add(item.TaperWeight);
            hash.Add(item.TaperCurse);
            hash.Add(item.DNAMDataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IHazardGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IHazardGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Hazard.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IHazardGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.ImageSpaceModifier.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.ImageSpaceModifier);
            }
            yield return FormLinkInformation.Factory(obj.Effect);
            yield return FormLinkInformation.Factory(obj.Light);
            yield return FormLinkInformation.Factory(obj.ImpactDataSet);
            yield return FormLinkInformation.Factory(obj.Sound);
            yield break;
        }
        
        #region Duplicate
        public Hazard Duplicate(
            IHazardGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Hazard(formKey);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IHazardGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IHazardGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class HazardSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly HazardSetterTranslationCommon Instance = new HazardSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IHazardInternal item,
            IHazardGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IHazard item,
            IHazardGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Hazard_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Hazard_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Hazard_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Hazard_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.ImageSpaceModifier) ?? true))
            {
                item.ImageSpaceModifier.SetTo(rhs.ImageSpaceModifier.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.Limit) ?? true))
            {
                item.Limit = rhs.Limit;
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.Radius) ?? true))
            {
                item.Radius = rhs.Radius;
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.Lifetime) ?? true))
            {
                item.Lifetime = rhs.Lifetime;
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.ImageSpaceRadius) ?? true))
            {
                item.ImageSpaceRadius = rhs.ImageSpaceRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.TargetInterval) ?? true))
            {
                item.TargetInterval = rhs.TargetInterval;
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.Effect) ?? true))
            {
                item.Effect.SetTo(rhs.Effect.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.Light) ?? true))
            {
                item.Light.SetTo(rhs.Light.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.ImpactDataSet) ?? true))
            {
                item.ImpactDataSet.SetTo(rhs.ImpactDataSet.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.Sound) ?? true))
            {
                item.Sound.SetTo(rhs.Sound.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.FullEffectRadius) ?? true))
            {
                item.FullEffectRadius = rhs.FullEffectRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.TaperWeight) ?? true))
            {
                item.TaperWeight = rhs.TaperWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.TaperCurse) ?? true))
            {
                item.TaperCurse = rhs.TaperCurse;
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.DNAMDataTypeState) ?? true))
            {
                item.DNAMDataTypeState = rhs.DNAMDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IHazardInternal)item,
                rhs: (IHazardGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IHazard)item,
                rhs: (IHazardGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IHazardInternal)item,
                rhs: (IHazardGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IHazard)item,
                rhs: (IHazardGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Hazard DeepCopy(
            IHazardGetter item,
            Hazard.TranslationMask? copyMask = null)
        {
            Hazard ret = (Hazard)((HazardCommon)((IHazardGetter)item).CommonInstance()!).GetNew();
            ((HazardSetterTranslationCommon)((IHazardGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Hazard DeepCopy(
            IHazardGetter item,
            out Hazard.ErrorMask errorMask,
            Hazard.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Hazard ret = (Hazard)((HazardCommon)((IHazardGetter)item).CommonInstance()!).GetNew();
            ((HazardSetterTranslationCommon)((IHazardGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Hazard.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Hazard DeepCopy(
            IHazardGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Hazard ret = (Hazard)((HazardCommon)((IHazardGetter)item).CommonInstance()!).GetNew();
            ((HazardSetterTranslationCommon)((IHazardGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Hazard
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Hazard_Registration.Instance;
        public new static Hazard_Registration StaticRegistration => Hazard_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => HazardCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return HazardSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => HazardSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class HazardBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static HazardBinaryWriteTranslation Instance = new HazardBinaryWriteTranslation();

        public static void WriteEmbedded(
            IHazardGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IHazardGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ImageSpaceModifier,
                header: translationParams.ConvertToCustom(RecordTypes.MNAM));
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DNAM)))
            {
                writer.Write(item.Limit);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Radius);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Lifetime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ImageSpaceRadius);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.TargetInterval);
                EnumBinaryTranslation<Hazard.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 4);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Effect);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Light);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ImpactDataSet);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Sound);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FullEffectRadius);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.TaperWeight);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.TaperCurse);
            }
        }

        public void Write(
            MutagenWriter writer,
            IHazardGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Record(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.HAZD)))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        translationParams: translationParams);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Enrich(ex, item);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IHazardGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IHazardGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IHazardGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class HazardBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static HazardBinaryCreateTranslation Instance = new HazardBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.HAZD;
        public static void FillBinaryStructs(
            IHazardInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IHazardInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Fallout4.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Hazard_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Hazard_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Fallout4.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams);
                    return (int)Hazard_FieldIndex.Model;
                }
                case RecordTypeInts.MNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ImageSpaceModifier.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Hazard_FieldIndex.ImageSpaceModifier;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Limit = dataFrame.ReadUInt32();
                    item.Radius = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    item.Lifetime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    item.ImageSpaceRadius = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    item.TargetInterval = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    item.Flags = EnumBinaryTranslation<Hazard.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    item.Effect.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    item.Light.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    item.ImpactDataSet.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    item.Sound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    item.FullEffectRadius = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    item.TaperWeight = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    item.TaperCurse = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)Hazard_FieldIndex.TaperCurse;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class HazardBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class HazardBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IHazardGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Hazard_Registration.Instance;
        public new static Hazard_Registration StaticRegistration => Hazard_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => HazardCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => HazardSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => HazardCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => HazardBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((HazardBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IHazard);


        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new OverlayStream(_data.Slice(_ObjectBoundsLocation!.Value.Min), _package), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        public IModelGetter? Model { get; private set; }
        #region ImageSpaceModifier
        private int? _ImageSpaceModifierLocation;
        public IFormLinkNullableGetter<IImageSpaceAdapterGetter> ImageSpaceModifier => _ImageSpaceModifierLocation.HasValue ? new FormLinkNullable<IImageSpaceAdapterGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ImageSpaceModifierLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IImageSpaceAdapterGetter>.Null;
        #endregion
        private int? _DNAMLocation;
        public Hazard.DNAMDataType DNAMDataTypeState { get; private set; }
        #region Limit
        private int _LimitLocation => _DNAMLocation!.Value;
        private bool _Limit_IsSet => _DNAMLocation.HasValue;
        public UInt32 Limit => _Limit_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(_LimitLocation, 4)) : default;
        #endregion
        #region Radius
        private int _RadiusLocation => _DNAMLocation!.Value + 0x4;
        private bool _Radius_IsSet => _DNAMLocation.HasValue;
        public Single Radius => _Radius_IsSet ? _data.Slice(_RadiusLocation, 4).Float() : default;
        #endregion
        #region Lifetime
        private int _LifetimeLocation => _DNAMLocation!.Value + 0x8;
        private bool _Lifetime_IsSet => _DNAMLocation.HasValue;
        public Single Lifetime => _Lifetime_IsSet ? _data.Slice(_LifetimeLocation, 4).Float() : default;
        #endregion
        #region ImageSpaceRadius
        private int _ImageSpaceRadiusLocation => _DNAMLocation!.Value + 0xC;
        private bool _ImageSpaceRadius_IsSet => _DNAMLocation.HasValue;
        public Single ImageSpaceRadius => _ImageSpaceRadius_IsSet ? _data.Slice(_ImageSpaceRadiusLocation, 4).Float() : default;
        #endregion
        #region TargetInterval
        private int _TargetIntervalLocation => _DNAMLocation!.Value + 0x10;
        private bool _TargetInterval_IsSet => _DNAMLocation.HasValue;
        public Single TargetInterval => _TargetInterval_IsSet ? _data.Slice(_TargetIntervalLocation, 4).Float() : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _DNAMLocation!.Value + 0x14;
        private bool _Flags_IsSet => _DNAMLocation.HasValue;
        public Hazard.Flag Flags => _Flags_IsSet ? (Hazard.Flag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagsLocation, 0x4)) : default;
        #endregion
        #region Effect
        private int _EffectLocation => _DNAMLocation!.Value + 0x18;
        private bool _Effect_IsSet => _DNAMLocation.HasValue;
        public IFormLinkGetter<IEffectRecordGetter> Effect => _Effect_IsSet ? new FormLink<IEffectRecordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_EffectLocation, 0x4)))) : FormLink<IEffectRecordGetter>.Null;
        #endregion
        #region Light
        private int _LightLocation => _DNAMLocation!.Value + 0x1C;
        private bool _Light_IsSet => _DNAMLocation.HasValue;
        public IFormLinkGetter<ILightGetter> Light => _Light_IsSet ? new FormLink<ILightGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_LightLocation, 0x4)))) : FormLink<ILightGetter>.Null;
        #endregion
        #region ImpactDataSet
        private int _ImpactDataSetLocation => _DNAMLocation!.Value + 0x20;
        private bool _ImpactDataSet_IsSet => _DNAMLocation.HasValue;
        public IFormLinkGetter<IImpactDataSetGetter> ImpactDataSet => _ImpactDataSet_IsSet ? new FormLink<IImpactDataSetGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_ImpactDataSetLocation, 0x4)))) : FormLink<IImpactDataSetGetter>.Null;
        #endregion
        #region Sound
        private int _SoundLocation => _DNAMLocation!.Value + 0x24;
        private bool _Sound_IsSet => _DNAMLocation.HasValue;
        public IFormLinkGetter<ISoundDescriptorGetter> Sound => _Sound_IsSet ? new FormLink<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_SoundLocation, 0x4)))) : FormLink<ISoundDescriptorGetter>.Null;
        #endregion
        #region FullEffectRadius
        private int _FullEffectRadiusLocation => _DNAMLocation!.Value + 0x28;
        private bool _FullEffectRadius_IsSet => _DNAMLocation.HasValue;
        public Single FullEffectRadius => _FullEffectRadius_IsSet ? _data.Slice(_FullEffectRadiusLocation, 4).Float() : default;
        #endregion
        #region TaperWeight
        private int _TaperWeightLocation => _DNAMLocation!.Value + 0x2C;
        private bool _TaperWeight_IsSet => _DNAMLocation.HasValue;
        public Single TaperWeight => _TaperWeight_IsSet ? _data.Slice(_TaperWeightLocation, 4).Float() : default;
        #endregion
        #region TaperCurse
        private int _TaperCurseLocation => _DNAMLocation!.Value + 0x30;
        private bool _TaperCurse_IsSet => _DNAMLocation.HasValue;
        public Single TaperCurse => _TaperCurse_IsSet ? _data.Slice(_TaperCurseLocation, 4).Float() : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected HazardBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static HazardBinaryOverlay HazardFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            stream = PluginUtilityTranslation.DecompressStream(stream);
            var ret = new HazardBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static HazardBinaryOverlay HazardFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return HazardFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Hazard_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Hazard_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        parseParams: parseParams);
                    return (int)Hazard_FieldIndex.Model;
                }
                case RecordTypeInts.MNAM:
                {
                    _ImageSpaceModifierLocation = (stream.Position - offset);
                    return (int)Hazard_FieldIndex.ImageSpaceModifier;
                }
                case RecordTypeInts.DNAM:
                {
                    _DNAMLocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)Hazard_FieldIndex.TaperCurse;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            HazardMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Hazard>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IHazardGetter rhs) return false;
            return ((HazardCommon)((IHazardGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IHazardGetter? obj)
        {
            return ((HazardCommon)((IHazardGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((HazardCommon)((IHazardGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

