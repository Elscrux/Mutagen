/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class SceneScriptFragments :
        ScriptFragments,
        IEquatable<ISceneScriptFragmentsGetter>,
        ILoquiObjectSetter<SceneScriptFragments>,
        ISceneScriptFragments
    {
        #region Ctor
        public SceneScriptFragments()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region PhaseFragments
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ScenePhaseFragment> _PhaseFragments = new ExtendedList<ScenePhaseFragment>();
        public ExtendedList<ScenePhaseFragment> PhaseFragments
        {
            get => this._PhaseFragments;
            init => this._PhaseFragments = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IScenePhaseFragmentGetter> ISceneScriptFragmentsGetter.PhaseFragments => _PhaseFragments;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SceneScriptFragmentsMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISceneScriptFragmentsGetter rhs) return false;
            return ((SceneScriptFragmentsCommon)((ISceneScriptFragmentsGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISceneScriptFragmentsGetter? obj)
        {
            return ((SceneScriptFragmentsCommon)((ISceneScriptFragmentsGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SceneScriptFragmentsCommon)((ISceneScriptFragmentsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            ScriptFragments.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.PhaseFragments = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ScenePhaseFragment.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ScenePhaseFragment.Mask<TItem>?>>());
            }

            public Mask(
                TItem ExtraBindDataVersion,
                TItem Script,
                TItem OnBegin,
                TItem OnEnd,
                TItem PhaseFragments)
            : base(
                ExtraBindDataVersion: ExtraBindDataVersion,
                Script: Script,
                OnBegin: OnBegin,
                OnEnd: OnEnd)
            {
                this.PhaseFragments = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ScenePhaseFragment.Mask<TItem>?>>?>(PhaseFragments, Enumerable.Empty<MaskItemIndexed<TItem, ScenePhaseFragment.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ScenePhaseFragment.Mask<TItem>?>>?>? PhaseFragments;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.PhaseFragments, rhs.PhaseFragments)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.PhaseFragments);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.PhaseFragments != null)
                {
                    if (!eval(this.PhaseFragments.Overall)) return false;
                    if (this.PhaseFragments.Specific != null)
                    {
                        foreach (var item in this.PhaseFragments.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.PhaseFragments != null)
                {
                    if (eval(this.PhaseFragments.Overall)) return true;
                    if (this.PhaseFragments.Specific != null)
                    {
                        foreach (var item in this.PhaseFragments.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SceneScriptFragments.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (PhaseFragments != null)
                {
                    obj.PhaseFragments = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ScenePhaseFragment.Mask<R>?>>?>(eval(this.PhaseFragments.Overall), Enumerable.Empty<MaskItemIndexed<R, ScenePhaseFragment.Mask<R>?>>());
                    if (PhaseFragments.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ScenePhaseFragment.Mask<R>?>>();
                        obj.PhaseFragments.Specific = l;
                        foreach (var item in PhaseFragments.Specific)
                        {
                            MaskItemIndexed<R, ScenePhaseFragment.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ScenePhaseFragment.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(SceneScriptFragments.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, SceneScriptFragments.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(SceneScriptFragments.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.PhaseFragments?.Overall ?? true)
                        && PhaseFragments is {} PhaseFragmentsItem)
                    {
                        sb.AppendLine("PhaseFragments =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PhaseFragmentsItem.Overall);
                            if (PhaseFragmentsItem.Specific != null)
                            {
                                foreach (var subItem in PhaseFragmentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            ScriptFragments.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ScenePhaseFragment.ErrorMask?>>?>? PhaseFragments;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                SceneScriptFragments_FieldIndex enu = (SceneScriptFragments_FieldIndex)index;
                switch (enu)
                {
                    case SceneScriptFragments_FieldIndex.PhaseFragments:
                        return PhaseFragments;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                SceneScriptFragments_FieldIndex enu = (SceneScriptFragments_FieldIndex)index;
                switch (enu)
                {
                    case SceneScriptFragments_FieldIndex.PhaseFragments:
                        this.PhaseFragments = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ScenePhaseFragment.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                SceneScriptFragments_FieldIndex enu = (SceneScriptFragments_FieldIndex)index;
                switch (enu)
                {
                    case SceneScriptFragments_FieldIndex.PhaseFragments:
                        this.PhaseFragments = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ScenePhaseFragment.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (PhaseFragments != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (PhaseFragments is {} PhaseFragmentsItem)
                {
                    sb.AppendLine("PhaseFragments =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PhaseFragmentsItem.Overall);
                        if (PhaseFragmentsItem.Specific != null)
                        {
                            foreach (var subItem in PhaseFragmentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.PhaseFragments = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ScenePhaseFragment.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.PhaseFragments?.Overall, rhs.PhaseFragments?.Overall), Noggog.ExceptionExt.Combine(this.PhaseFragments?.Specific, rhs.PhaseFragments?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ScriptFragments.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ScenePhaseFragment.TranslationMask? PhaseFragments;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((PhaseFragments == null ? DefaultOn : !PhaseFragments.GetCrystal().CopyNothing, PhaseFragments?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SceneScriptFragmentsBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SceneScriptFragmentsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static SceneScriptFragments CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new SceneScriptFragments();
            ((SceneScriptFragmentsSetterCommon)((ISceneScriptFragmentsGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SceneScriptFragments item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SceneScriptFragmentsSetterCommon)((ISceneScriptFragmentsGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new SceneScriptFragments GetNew()
        {
            return new SceneScriptFragments();
        }

    }
    #endregion

    #region Interface
    public partial interface ISceneScriptFragments :
        ILoquiObjectSetter<ISceneScriptFragments>,
        ISceneScriptFragmentsGetter,
        IScriptFragments
    {
        new ExtendedList<ScenePhaseFragment> PhaseFragments { get; }
    }

    public partial interface ISceneScriptFragmentsGetter :
        IScriptFragmentsGetter,
        IBinaryItem,
        ILoquiObject<ISceneScriptFragmentsGetter>
    {
        static new ILoquiRegistration StaticRegistration => SceneScriptFragments_Registration.Instance;
        IReadOnlyList<IScenePhaseFragmentGetter> PhaseFragments { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SceneScriptFragmentsMixIn
    {
        public static void Clear(this ISceneScriptFragments item)
        {
            ((SceneScriptFragmentsSetterCommon)((ISceneScriptFragmentsGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SceneScriptFragments.Mask<bool> GetEqualsMask(
            this ISceneScriptFragmentsGetter item,
            ISceneScriptFragmentsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SceneScriptFragmentsCommon)((ISceneScriptFragmentsGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ISceneScriptFragmentsGetter item,
            string? name = null,
            SceneScriptFragments.Mask<bool>? printMask = null)
        {
            return ((SceneScriptFragmentsCommon)((ISceneScriptFragmentsGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ISceneScriptFragmentsGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SceneScriptFragments.Mask<bool>? printMask = null)
        {
            ((SceneScriptFragmentsCommon)((ISceneScriptFragmentsGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISceneScriptFragmentsGetter item,
            ISceneScriptFragmentsGetter rhs,
            SceneScriptFragments.TranslationMask? equalsMask = null)
        {
            return ((SceneScriptFragmentsCommon)((ISceneScriptFragmentsGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISceneScriptFragments lhs,
            ISceneScriptFragmentsGetter rhs,
            out SceneScriptFragments.ErrorMask errorMask,
            SceneScriptFragments.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SceneScriptFragmentsSetterTranslationCommon)((ISceneScriptFragmentsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SceneScriptFragments.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISceneScriptFragments lhs,
            ISceneScriptFragmentsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SceneScriptFragmentsSetterTranslationCommon)((ISceneScriptFragmentsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SceneScriptFragments DeepCopy(
            this ISceneScriptFragmentsGetter item,
            SceneScriptFragments.TranslationMask? copyMask = null)
        {
            return ((SceneScriptFragmentsSetterTranslationCommon)((ISceneScriptFragmentsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SceneScriptFragments DeepCopy(
            this ISceneScriptFragmentsGetter item,
            out SceneScriptFragments.ErrorMask errorMask,
            SceneScriptFragments.TranslationMask? copyMask = null)
        {
            return ((SceneScriptFragmentsSetterTranslationCommon)((ISceneScriptFragmentsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SceneScriptFragments DeepCopy(
            this ISceneScriptFragmentsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SceneScriptFragmentsSetterTranslationCommon)((ISceneScriptFragmentsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISceneScriptFragments item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((SceneScriptFragmentsSetterCommon)((ISceneScriptFragmentsGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum SceneScriptFragments_FieldIndex
    {
        ExtraBindDataVersion = 0,
        Script = 1,
        OnBegin = 2,
        OnEnd = 3,
        PhaseFragments = 4,
    }
    #endregion

    #region Registration
    internal partial class SceneScriptFragments_Registration : ILoquiRegistration
    {
        public static readonly SceneScriptFragments_Registration Instance = new SceneScriptFragments_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(SceneScriptFragments.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SceneScriptFragments.ErrorMask);

        public static readonly Type ClassType = typeof(SceneScriptFragments);

        public static readonly Type GetterType = typeof(ISceneScriptFragmentsGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISceneScriptFragments);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.SceneScriptFragments";

        public const string Name = "SceneScriptFragments";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(SceneScriptFragmentsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class SceneScriptFragmentsSetterCommon : ScriptFragmentsSetterCommon
    {
        public new static readonly SceneScriptFragmentsSetterCommon Instance = new SceneScriptFragmentsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISceneScriptFragments item)
        {
            ClearPartial();
            item.PhaseFragments.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IScriptFragments item)
        {
            Clear(item: (ISceneScriptFragments)item);
        }
        
        #region Mutagen
        public void RemapLinks(ISceneScriptFragments obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISceneScriptFragments item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: SceneScriptFragmentsBinaryCreateTranslation.FillBinaryStructs);
        }
        
        public override void CopyInFromBinary(
            IScriptFragments item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SceneScriptFragments)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class SceneScriptFragmentsCommon : ScriptFragmentsCommon
    {
        public new static readonly SceneScriptFragmentsCommon Instance = new SceneScriptFragmentsCommon();

        public SceneScriptFragments.Mask<bool> GetEqualsMask(
            ISceneScriptFragmentsGetter item,
            ISceneScriptFragmentsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SceneScriptFragments.Mask<bool>(false);
            ((SceneScriptFragmentsCommon)((ISceneScriptFragmentsGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISceneScriptFragmentsGetter item,
            ISceneScriptFragmentsGetter rhs,
            SceneScriptFragments.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.PhaseFragments = item.PhaseFragments.CollectionEqualsHelper(
                rhs.PhaseFragments,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ISceneScriptFragmentsGetter item,
            string? name = null,
            SceneScriptFragments.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISceneScriptFragmentsGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SceneScriptFragments.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"SceneScriptFragments =>");
            }
            else
            {
                sb.AppendLine($"{name} (SceneScriptFragments) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISceneScriptFragmentsGetter item,
            StructuredStringBuilder sb,
            SceneScriptFragments.Mask<bool>? printMask = null)
        {
            ScriptFragmentsCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.PhaseFragments?.Overall ?? true)
            {
                sb.AppendLine("PhaseFragments =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.PhaseFragments)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static SceneScriptFragments_FieldIndex ConvertFieldIndex(ScriptFragments_FieldIndex index)
        {
            switch (index)
            {
                case ScriptFragments_FieldIndex.ExtraBindDataVersion:
                    return (SceneScriptFragments_FieldIndex)((int)index);
                case ScriptFragments_FieldIndex.Script:
                    return (SceneScriptFragments_FieldIndex)((int)index);
                case ScriptFragments_FieldIndex.OnBegin:
                    return (SceneScriptFragments_FieldIndex)((int)index);
                case ScriptFragments_FieldIndex.OnEnd:
                    return (SceneScriptFragments_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISceneScriptFragmentsGetter? lhs,
            ISceneScriptFragmentsGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IScriptFragmentsGetter)lhs, (IScriptFragmentsGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)SceneScriptFragments_FieldIndex.PhaseFragments) ?? true))
            {
                if (!lhs.PhaseFragments.SequenceEqual(rhs.PhaseFragments, (l, r) => ((ScenePhaseFragmentCommon)((IScenePhaseFragmentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)SceneScriptFragments_FieldIndex.PhaseFragments)))) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IScriptFragmentsGetter? lhs,
            IScriptFragmentsGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISceneScriptFragmentsGetter?)lhs,
                rhs: rhs as ISceneScriptFragmentsGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ISceneScriptFragmentsGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.PhaseFragments);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IScriptFragmentsGetter item)
        {
            return GetHashCode(item: (ISceneScriptFragmentsGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return SceneScriptFragments.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISceneScriptFragmentsGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class SceneScriptFragmentsSetterTranslationCommon : ScriptFragmentsSetterTranslationCommon
    {
        public new static readonly SceneScriptFragmentsSetterTranslationCommon Instance = new SceneScriptFragmentsSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISceneScriptFragments item,
            ISceneScriptFragmentsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IScriptFragments)item,
                (IScriptFragmentsGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)SceneScriptFragments_FieldIndex.PhaseFragments) ?? true))
            {
                errorMask?.PushIndex((int)SceneScriptFragments_FieldIndex.PhaseFragments);
                try
                {
                    item.PhaseFragments.SetTo(
                        rhs.PhaseFragments
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        
        public override void DeepCopyIn(
            IScriptFragments item,
            IScriptFragmentsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISceneScriptFragments)item,
                rhs: (ISceneScriptFragmentsGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public SceneScriptFragments DeepCopy(
            ISceneScriptFragmentsGetter item,
            SceneScriptFragments.TranslationMask? copyMask = null)
        {
            SceneScriptFragments ret = (SceneScriptFragments)((SceneScriptFragmentsCommon)((ISceneScriptFragmentsGetter)item).CommonInstance()!).GetNew();
            ((SceneScriptFragmentsSetterTranslationCommon)((ISceneScriptFragmentsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SceneScriptFragments DeepCopy(
            ISceneScriptFragmentsGetter item,
            out SceneScriptFragments.ErrorMask errorMask,
            SceneScriptFragments.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SceneScriptFragments ret = (SceneScriptFragments)((SceneScriptFragmentsCommon)((ISceneScriptFragmentsGetter)item).CommonInstance()!).GetNew();
            ((SceneScriptFragmentsSetterTranslationCommon)((ISceneScriptFragmentsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SceneScriptFragments.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SceneScriptFragments DeepCopy(
            ISceneScriptFragmentsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SceneScriptFragments ret = (SceneScriptFragments)((SceneScriptFragmentsCommon)((ISceneScriptFragmentsGetter)item).CommonInstance()!).GetNew();
            ((SceneScriptFragmentsSetterTranslationCommon)((ISceneScriptFragmentsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class SceneScriptFragments
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SceneScriptFragments_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SceneScriptFragments_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SceneScriptFragmentsCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SceneScriptFragmentsSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SceneScriptFragmentsSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class SceneScriptFragmentsBinaryWriteTranslation :
        ScriptFragmentsBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly SceneScriptFragmentsBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ISceneScriptFragmentsGetter item,
            MutagenWriter writer)
        {
            ScriptFragmentsBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IScenePhaseFragmentGetter>.Instance.Write(
                writer: writer,
                items: item.PhaseFragments,
                countLengthLength: 2,
                transl: (MutagenWriter subWriter, IScenePhaseFragmentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ScenePhaseFragmentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            ISceneScriptFragmentsGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ISceneScriptFragmentsGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IScriptFragmentsGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISceneScriptFragmentsGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class SceneScriptFragmentsBinaryCreateTranslation : ScriptFragmentsBinaryCreateTranslation
    {
        public new static readonly SceneScriptFragmentsBinaryCreateTranslation Instance = new SceneScriptFragmentsBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ISceneScriptFragments item,
            MutagenFrame frame)
        {
            ScriptFragmentsBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            item.PhaseFragments.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ScenePhaseFragment>.Instance.Parse(
                    amount: frame.ReadUInt16(),
                    reader: frame,
                    transl: ScenePhaseFragment.TryCreateFromBinary));
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class SceneScriptFragmentsBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class SceneScriptFragmentsBinaryOverlay :
        ScriptFragmentsBinaryOverlay,
        ISceneScriptFragmentsGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SceneScriptFragments_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SceneScriptFragments_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SceneScriptFragmentsCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SceneScriptFragmentsSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SceneScriptFragmentsBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SceneScriptFragmentsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region PhaseFragments
        public IReadOnlyList<IScenePhaseFragmentGetter> PhaseFragments { get; private set; } = null!;
        protected int PhaseFragmentsEndingPos;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SceneScriptFragmentsBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static void SceneScriptFragmentsParseEndingPositions(
            SceneScriptFragmentsBinaryOverlay ret,
            BinaryOverlayFactoryPackage package)
        {
            {
                var tempStream = new OverlayStream(ret._structData, package)
                {
                    Position = 0x1
                };
                ret.PhaseFragments = BinaryOverlayList.EagerFactoryByPrependedCount(tempStream, package, 2, (s, p) => ScenePhaseFragmentBinaryOverlay.ScenePhaseFragmentFactory(s, p));
                ret.PhaseFragmentsEndingPos = tempStream.Position;
            }
        }

        public static ISceneScriptFragmentsGetter SceneScriptFragmentsFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new SceneScriptFragmentsBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            SceneScriptFragmentsParseEndingPositions(ret, package);
            stream.Position += ret.PhaseFragmentsEndingPos;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ISceneScriptFragmentsGetter SceneScriptFragmentsFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return SceneScriptFragmentsFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SceneScriptFragmentsMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISceneScriptFragmentsGetter rhs) return false;
            return ((SceneScriptFragmentsCommon)((ISceneScriptFragmentsGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISceneScriptFragmentsGetter? obj)
        {
            return ((SceneScriptFragmentsCommon)((ISceneScriptFragmentsGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SceneScriptFragmentsCommon)((ISceneScriptFragmentsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

