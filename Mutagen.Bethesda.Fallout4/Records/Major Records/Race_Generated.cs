/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.RecordTypeMapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Race :
        Fallout4MajorRecord,
        IEquatable<IRaceGetter>,
        ILoquiObjectSetter<Race>,
        IRaceInternal
    {
        #region Ctor
        protected Race()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region AnimationSound
        private readonly IFormLinkNullable<IAnimationSoundTagSetGetter> _AnimationSound = new FormLinkNullable<IAnimationSoundTagSetGetter>();
        public IFormLinkNullable<IAnimationSoundTagSetGetter> AnimationSound
        {
            get => _AnimationSound;
            set => _AnimationSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IAnimationSoundTagSetGetter> IRaceGetter.AnimationSound => this.AnimationSound;
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IRaceGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Description
        public TranslatedString Description { get; set; } = string.Empty;
        ITranslatedStringGetter IRaceGetter.Description => this.Description;
        #endregion
        #region ActorEffect
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<ISpellRecordGetter>>? _ActorEffect;
        public ExtendedList<IFormLinkGetter<ISpellRecordGetter>>? ActorEffect
        {
            get => this._ActorEffect;
            set => this._ActorEffect = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ISpellRecordGetter>>? IRaceGetter.ActorEffect => _ActorEffect;
        #endregion

        #endregion
        #region Skin
        private readonly IFormLinkNullable<IArmorGetter> _Skin = new FormLinkNullable<IArmorGetter>();
        public IFormLinkNullable<IArmorGetter> Skin
        {
            get => _Skin;
            set => _Skin.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IArmorGetter> IRaceGetter.Skin => this.Skin;
        #endregion
        #region BipedBodyTemplate
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private BipedBodyTemplate? _BipedBodyTemplate;
        public BipedBodyTemplate? BipedBodyTemplate
        {
            get => _BipedBodyTemplate;
            set => _BipedBodyTemplate = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBipedBodyTemplateGetter? IRaceGetter.BipedBodyTemplate => this.BipedBodyTemplate;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IRaceGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region Properties
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Properties? _Properties;
        public Properties? Properties
        {
            get => _Properties;
            set => _Properties = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPropertiesGetter? IRaceGetter.Properties => this.Properties;
        #endregion
        #region AttachParentSlots
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _AttachParentSlots;
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? AttachParentSlots
        {
            get => this._AttachParentSlots;
            set => this._AttachParentSlots = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IRaceGetter.AttachParentSlots => _AttachParentSlots;
        #endregion

        #endregion
        #region Height
        public IGenderedItem<Single> Height { get; set; } = new GenderedItem<Single>(default, default);
        IGenderedItemGetter<Single> IRaceGetter.Height => this.Height;
        #endregion
        #region DefaultWeight
        public IGenderedItem<Single> DefaultWeight { get; set; } = new GenderedItem<Single>(default, default);
        IGenderedItemGetter<Single> IRaceGetter.DefaultWeight => this.DefaultWeight;
        #endregion
        #region Flags
        public Race.Flag Flags { get; set; } = default;
        #endregion
        #region AccelerationRate
        public Single AccelerationRate { get; set; } = default;
        #endregion
        #region DecelerationRate
        public Single DecelerationRate { get; set; } = default;
        #endregion
        #region Size
        public Size Size { get; set; } = default;
        #endregion
        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unknown = new byte[16];
        public MemorySlice<Byte> Unknown
        {
            get => _Unknown;
            set => this._Unknown = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IRaceGetter.Unknown => this.Unknown;
        #endregion
        #region InjuredHealthPercent
        public Single InjuredHealthPercent { get; set; } = default;
        #endregion
        #region ShieldBipedObject
        public readonly static BipedObject _ShieldBipedObject_Default = BipedObject.None;
        public BipedObject ShieldBipedObject { get; set; } = _ShieldBipedObject_Default;
        #endregion
        #region BearddBipedObject
        public readonly static BipedObject _BearddBipedObject_Default = BipedObject.None;
        public BipedObject BearddBipedObject { get; set; } = _BearddBipedObject_Default;
        #endregion
        #region BodyBipedObject
        public readonly static BipedObject _BodyBipedObject_Default = BipedObject.None;
        public BipedObject BodyBipedObject { get; set; } = _BodyBipedObject_Default;
        #endregion
        #region AimAngleTolerance
        public Single AimAngleTolerance { get; set; } = default;
        #endregion
        #region FlightRadius
        public Single FlightRadius { get; set; } = default;
        #endregion
        #region AngularAccelerationRate
        public Single AngularAccelerationRate { get; set; } = default;
        #endregion
        #region AngularTolerance
        public Single AngularTolerance { get; set; } = default;
        #endregion
        #region Flags2
        public Race.Flag2 Flags2 { get; set; } = default;
        #endregion
        #region Unknown2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unknown2 = new byte[72];
        public MemorySlice<Byte> Unknown2
        {
            get => _Unknown2;
            set => this._Unknown2 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IRaceGetter.Unknown2 => this.Unknown2;
        #endregion
        #region PipboyBipedObject
        public readonly static BipedObject _PipboyBipedObject_Default = BipedObject.None;
        public BipedObject PipboyBipedObject { get; set; } = _PipboyBipedObject_Default;
        #endregion
        #region XPValue
        public Int16 XPValue { get; set; } = default;
        #endregion
        #region SeverableDebrisScale
        public Single SeverableDebrisScale { get; set; } = default;
        #endregion
        #region SeverableDebrisCount
        public Byte SeverableDebrisCount { get; set; } = default;
        #endregion
        #region SeverableDecalCount
        public Byte SeverableDecalCount { get; set; } = default;
        #endregion
        #region ExplodableDebrisScale
        public Single ExplodableDebrisScale { get; set; } = default;
        #endregion
        #region ExplodableDebrisCount
        public Byte ExplodableDebrisCount { get; set; } = default;
        #endregion
        #region ExplodableDecalCount
        public Byte ExplodableDecalCount { get; set; } = default;
        #endregion
        #region SeverableExplosion
        private readonly IFormLink<IExplosionGetter> _SeverableExplosion = new FormLink<IExplosionGetter>();
        public IFormLink<IExplosionGetter> SeverableExplosion
        {
            get => _SeverableExplosion;
            set => _SeverableExplosion.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IExplosionGetter> IRaceGetter.SeverableExplosion => this.SeverableExplosion;
        #endregion
        #region SeverableDebris
        private readonly IFormLink<IDebrisGetter> _SeverableDebris = new FormLink<IDebrisGetter>();
        public IFormLink<IDebrisGetter> SeverableDebris
        {
            get => _SeverableDebris;
            set => _SeverableDebris.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IDebrisGetter> IRaceGetter.SeverableDebris => this.SeverableDebris;
        #endregion
        #region SeverableImpactDataSet
        private readonly IFormLink<IImpactDataSetGetter> _SeverableImpactDataSet = new FormLink<IImpactDataSetGetter>();
        public IFormLink<IImpactDataSetGetter> SeverableImpactDataSet
        {
            get => _SeverableImpactDataSet;
            set => _SeverableImpactDataSet.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IImpactDataSetGetter> IRaceGetter.SeverableImpactDataSet => this.SeverableImpactDataSet;
        #endregion
        #region ExplodableExplosion
        private readonly IFormLink<IExplosionGetter> _ExplodableExplosion = new FormLink<IExplosionGetter>();
        public IFormLink<IExplosionGetter> ExplodableExplosion
        {
            get => _ExplodableExplosion;
            set => _ExplodableExplosion.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IExplosionGetter> IRaceGetter.ExplodableExplosion => this.ExplodableExplosion;
        #endregion
        #region ExplodableDebris
        private readonly IFormLink<IDebrisGetter> _ExplodableDebris = new FormLink<IDebrisGetter>();
        public IFormLink<IDebrisGetter> ExplodableDebris
        {
            get => _ExplodableDebris;
            set => _ExplodableDebris.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IDebrisGetter> IRaceGetter.ExplodableDebris => this.ExplodableDebris;
        #endregion
        #region ExplodableImpactDataSet
        private readonly IFormLink<IImpactDataSetGetter> _ExplodableImpactDataSet = new FormLink<IImpactDataSetGetter>();
        public IFormLink<IImpactDataSetGetter> ExplodableImpactDataSet
        {
            get => _ExplodableImpactDataSet;
            set => _ExplodableImpactDataSet.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IImpactDataSetGetter> IRaceGetter.ExplodableImpactDataSet => this.ExplodableImpactDataSet;
        #endregion
        #region OnCrippleDebrisCount
        public Byte OnCrippleDebrisCount { get; set; } = default;
        #endregion
        #region OnCrippleDecalCount
        public Byte OnCrippleDecalCount { get; set; } = default;
        #endregion
        #region OnCrippleExplosion
        private readonly IFormLink<IExplosionGetter> _OnCrippleExplosion = new FormLink<IExplosionGetter>();
        public IFormLink<IExplosionGetter> OnCrippleExplosion
        {
            get => _OnCrippleExplosion;
            set => _OnCrippleExplosion.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IExplosionGetter> IRaceGetter.OnCrippleExplosion => this.OnCrippleExplosion;
        #endregion
        #region OnCrippleDebris
        private readonly IFormLink<IDebrisGetter> _OnCrippleDebris = new FormLink<IDebrisGetter>();
        public IFormLink<IDebrisGetter> OnCrippleDebris
        {
            get => _OnCrippleDebris;
            set => _OnCrippleDebris.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IDebrisGetter> IRaceGetter.OnCrippleDebris => this.OnCrippleDebris;
        #endregion
        #region OnCrippleImpactDataSet
        private readonly IFormLink<IImpactDataSetGetter> _OnCrippleImpactDataSet = new FormLink<IImpactDataSetGetter>();
        public IFormLink<IImpactDataSetGetter> OnCrippleImpactDataSet
        {
            get => _OnCrippleImpactDataSet;
            set => _OnCrippleImpactDataSet.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IImpactDataSetGetter> IRaceGetter.OnCrippleImpactDataSet => this.OnCrippleImpactDataSet;
        #endregion
        #region ExplodableSubsegmentExplosion
        private readonly IFormLink<IExplosionGetter> _ExplodableSubsegmentExplosion = new FormLink<IExplosionGetter>();
        public IFormLink<IExplosionGetter> ExplodableSubsegmentExplosion
        {
            get => _ExplodableSubsegmentExplosion;
            set => _ExplodableSubsegmentExplosion.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IExplosionGetter> IRaceGetter.ExplodableSubsegmentExplosion => this.ExplodableSubsegmentExplosion;
        #endregion
        #region DATADataTypeState
        public Race.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RaceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.AnimationSound = initialValue;
                this.Name = initialValue;
                this.Description = initialValue;
                this.ActorEffect = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Skin = initialValue;
                this.BipedBodyTemplate = new MaskItem<TItem, BipedBodyTemplate.Mask<TItem>?>(initialValue, new BipedBodyTemplate.Mask<TItem>(initialValue));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Properties = new MaskItem<TItem, Properties.Mask<TItem>?>(initialValue, new Properties.Mask<TItem>(initialValue));
                this.AttachParentSlots = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Height = new GenderedItem<TItem>(initialValue, initialValue);
                this.DefaultWeight = new GenderedItem<TItem>(initialValue, initialValue);
                this.Flags = initialValue;
                this.AccelerationRate = initialValue;
                this.DecelerationRate = initialValue;
                this.Size = initialValue;
                this.Unknown = initialValue;
                this.InjuredHealthPercent = initialValue;
                this.ShieldBipedObject = initialValue;
                this.BearddBipedObject = initialValue;
                this.BodyBipedObject = initialValue;
                this.AimAngleTolerance = initialValue;
                this.FlightRadius = initialValue;
                this.AngularAccelerationRate = initialValue;
                this.AngularTolerance = initialValue;
                this.Flags2 = initialValue;
                this.Unknown2 = initialValue;
                this.PipboyBipedObject = initialValue;
                this.XPValue = initialValue;
                this.SeverableDebrisScale = initialValue;
                this.SeverableDebrisCount = initialValue;
                this.SeverableDecalCount = initialValue;
                this.ExplodableDebrisScale = initialValue;
                this.ExplodableDebrisCount = initialValue;
                this.ExplodableDecalCount = initialValue;
                this.SeverableExplosion = initialValue;
                this.SeverableDebris = initialValue;
                this.SeverableImpactDataSet = initialValue;
                this.ExplodableExplosion = initialValue;
                this.ExplodableDebris = initialValue;
                this.ExplodableImpactDataSet = initialValue;
                this.OnCrippleDebrisCount = initialValue;
                this.OnCrippleDecalCount = initialValue;
                this.OnCrippleExplosion = initialValue;
                this.OnCrippleDebris = initialValue;
                this.OnCrippleImpactDataSet = initialValue;
                this.ExplodableSubsegmentExplosion = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem AnimationSound,
                TItem Name,
                TItem Description,
                TItem ActorEffect,
                TItem Skin,
                TItem BipedBodyTemplate,
                TItem Keywords,
                TItem Properties,
                TItem AttachParentSlots,
                TItem Height,
                TItem DefaultWeight,
                TItem Flags,
                TItem AccelerationRate,
                TItem DecelerationRate,
                TItem Size,
                TItem Unknown,
                TItem InjuredHealthPercent,
                TItem ShieldBipedObject,
                TItem BearddBipedObject,
                TItem BodyBipedObject,
                TItem AimAngleTolerance,
                TItem FlightRadius,
                TItem AngularAccelerationRate,
                TItem AngularTolerance,
                TItem Flags2,
                TItem Unknown2,
                TItem PipboyBipedObject,
                TItem XPValue,
                TItem SeverableDebrisScale,
                TItem SeverableDebrisCount,
                TItem SeverableDecalCount,
                TItem ExplodableDebrisScale,
                TItem ExplodableDebrisCount,
                TItem ExplodableDecalCount,
                TItem SeverableExplosion,
                TItem SeverableDebris,
                TItem SeverableImpactDataSet,
                TItem ExplodableExplosion,
                TItem ExplodableDebris,
                TItem ExplodableImpactDataSet,
                TItem OnCrippleDebrisCount,
                TItem OnCrippleDecalCount,
                TItem OnCrippleExplosion,
                TItem OnCrippleDebris,
                TItem OnCrippleImpactDataSet,
                TItem ExplodableSubsegmentExplosion,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.AnimationSound = AnimationSound;
                this.Name = Name;
                this.Description = Description;
                this.ActorEffect = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(ActorEffect, Enumerable.Empty<(int Index, TItem Value)>());
                this.Skin = Skin;
                this.BipedBodyTemplate = new MaskItem<TItem, BipedBodyTemplate.Mask<TItem>?>(BipedBodyTemplate, new BipedBodyTemplate.Mask<TItem>(BipedBodyTemplate));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Properties = new MaskItem<TItem, Properties.Mask<TItem>?>(Properties, new Properties.Mask<TItem>(Properties));
                this.AttachParentSlots = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(AttachParentSlots, Enumerable.Empty<(int Index, TItem Value)>());
                this.Height = new GenderedItem<TItem>(Height, Height);
                this.DefaultWeight = new GenderedItem<TItem>(DefaultWeight, DefaultWeight);
                this.Flags = Flags;
                this.AccelerationRate = AccelerationRate;
                this.DecelerationRate = DecelerationRate;
                this.Size = Size;
                this.Unknown = Unknown;
                this.InjuredHealthPercent = InjuredHealthPercent;
                this.ShieldBipedObject = ShieldBipedObject;
                this.BearddBipedObject = BearddBipedObject;
                this.BodyBipedObject = BodyBipedObject;
                this.AimAngleTolerance = AimAngleTolerance;
                this.FlightRadius = FlightRadius;
                this.AngularAccelerationRate = AngularAccelerationRate;
                this.AngularTolerance = AngularTolerance;
                this.Flags2 = Flags2;
                this.Unknown2 = Unknown2;
                this.PipboyBipedObject = PipboyBipedObject;
                this.XPValue = XPValue;
                this.SeverableDebrisScale = SeverableDebrisScale;
                this.SeverableDebrisCount = SeverableDebrisCount;
                this.SeverableDecalCount = SeverableDecalCount;
                this.ExplodableDebrisScale = ExplodableDebrisScale;
                this.ExplodableDebrisCount = ExplodableDebrisCount;
                this.ExplodableDecalCount = ExplodableDecalCount;
                this.SeverableExplosion = SeverableExplosion;
                this.SeverableDebris = SeverableDebris;
                this.SeverableImpactDataSet = SeverableImpactDataSet;
                this.ExplodableExplosion = ExplodableExplosion;
                this.ExplodableDebris = ExplodableDebris;
                this.ExplodableImpactDataSet = ExplodableImpactDataSet;
                this.OnCrippleDebrisCount = OnCrippleDebrisCount;
                this.OnCrippleDecalCount = OnCrippleDecalCount;
                this.OnCrippleExplosion = OnCrippleExplosion;
                this.OnCrippleDebris = OnCrippleDebris;
                this.OnCrippleImpactDataSet = OnCrippleImpactDataSet;
                this.ExplodableSubsegmentExplosion = ExplodableSubsegmentExplosion;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem AnimationSound;
            public TItem Name;
            public TItem Description;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? ActorEffect;
            public TItem Skin;
            public MaskItem<TItem, BipedBodyTemplate.Mask<TItem>?>? BipedBodyTemplate { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public MaskItem<TItem, Properties.Mask<TItem>?>? Properties { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? AttachParentSlots;
            public GenderedItem<TItem> Height;
            public GenderedItem<TItem> DefaultWeight;
            public TItem Flags;
            public TItem AccelerationRate;
            public TItem DecelerationRate;
            public TItem Size;
            public TItem Unknown;
            public TItem InjuredHealthPercent;
            public TItem ShieldBipedObject;
            public TItem BearddBipedObject;
            public TItem BodyBipedObject;
            public TItem AimAngleTolerance;
            public TItem FlightRadius;
            public TItem AngularAccelerationRate;
            public TItem AngularTolerance;
            public TItem Flags2;
            public TItem Unknown2;
            public TItem PipboyBipedObject;
            public TItem XPValue;
            public TItem SeverableDebrisScale;
            public TItem SeverableDebrisCount;
            public TItem SeverableDecalCount;
            public TItem ExplodableDebrisScale;
            public TItem ExplodableDebrisCount;
            public TItem ExplodableDecalCount;
            public TItem SeverableExplosion;
            public TItem SeverableDebris;
            public TItem SeverableImpactDataSet;
            public TItem ExplodableExplosion;
            public TItem ExplodableDebris;
            public TItem ExplodableImpactDataSet;
            public TItem OnCrippleDebrisCount;
            public TItem OnCrippleDecalCount;
            public TItem OnCrippleExplosion;
            public TItem OnCrippleDebris;
            public TItem OnCrippleImpactDataSet;
            public TItem ExplodableSubsegmentExplosion;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.AnimationSound, rhs.AnimationSound)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.ActorEffect, rhs.ActorEffect)) return false;
                if (!object.Equals(this.Skin, rhs.Skin)) return false;
                if (!object.Equals(this.BipedBodyTemplate, rhs.BipedBodyTemplate)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Properties, rhs.Properties)) return false;
                if (!object.Equals(this.AttachParentSlots, rhs.AttachParentSlots)) return false;
                if (!object.Equals(this.Height, rhs.Height)) return false;
                if (!object.Equals(this.DefaultWeight, rhs.DefaultWeight)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.AccelerationRate, rhs.AccelerationRate)) return false;
                if (!object.Equals(this.DecelerationRate, rhs.DecelerationRate)) return false;
                if (!object.Equals(this.Size, rhs.Size)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.InjuredHealthPercent, rhs.InjuredHealthPercent)) return false;
                if (!object.Equals(this.ShieldBipedObject, rhs.ShieldBipedObject)) return false;
                if (!object.Equals(this.BearddBipedObject, rhs.BearddBipedObject)) return false;
                if (!object.Equals(this.BodyBipedObject, rhs.BodyBipedObject)) return false;
                if (!object.Equals(this.AimAngleTolerance, rhs.AimAngleTolerance)) return false;
                if (!object.Equals(this.FlightRadius, rhs.FlightRadius)) return false;
                if (!object.Equals(this.AngularAccelerationRate, rhs.AngularAccelerationRate)) return false;
                if (!object.Equals(this.AngularTolerance, rhs.AngularTolerance)) return false;
                if (!object.Equals(this.Flags2, rhs.Flags2)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.PipboyBipedObject, rhs.PipboyBipedObject)) return false;
                if (!object.Equals(this.XPValue, rhs.XPValue)) return false;
                if (!object.Equals(this.SeverableDebrisScale, rhs.SeverableDebrisScale)) return false;
                if (!object.Equals(this.SeverableDebrisCount, rhs.SeverableDebrisCount)) return false;
                if (!object.Equals(this.SeverableDecalCount, rhs.SeverableDecalCount)) return false;
                if (!object.Equals(this.ExplodableDebrisScale, rhs.ExplodableDebrisScale)) return false;
                if (!object.Equals(this.ExplodableDebrisCount, rhs.ExplodableDebrisCount)) return false;
                if (!object.Equals(this.ExplodableDecalCount, rhs.ExplodableDecalCount)) return false;
                if (!object.Equals(this.SeverableExplosion, rhs.SeverableExplosion)) return false;
                if (!object.Equals(this.SeverableDebris, rhs.SeverableDebris)) return false;
                if (!object.Equals(this.SeverableImpactDataSet, rhs.SeverableImpactDataSet)) return false;
                if (!object.Equals(this.ExplodableExplosion, rhs.ExplodableExplosion)) return false;
                if (!object.Equals(this.ExplodableDebris, rhs.ExplodableDebris)) return false;
                if (!object.Equals(this.ExplodableImpactDataSet, rhs.ExplodableImpactDataSet)) return false;
                if (!object.Equals(this.OnCrippleDebrisCount, rhs.OnCrippleDebrisCount)) return false;
                if (!object.Equals(this.OnCrippleDecalCount, rhs.OnCrippleDecalCount)) return false;
                if (!object.Equals(this.OnCrippleExplosion, rhs.OnCrippleExplosion)) return false;
                if (!object.Equals(this.OnCrippleDebris, rhs.OnCrippleDebris)) return false;
                if (!object.Equals(this.OnCrippleImpactDataSet, rhs.OnCrippleImpactDataSet)) return false;
                if (!object.Equals(this.ExplodableSubsegmentExplosion, rhs.ExplodableSubsegmentExplosion)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.AnimationSound);
                hash.Add(this.Name);
                hash.Add(this.Description);
                hash.Add(this.ActorEffect);
                hash.Add(this.Skin);
                hash.Add(this.BipedBodyTemplate);
                hash.Add(this.Keywords);
                hash.Add(this.Properties);
                hash.Add(this.AttachParentSlots);
                hash.Add(this.Height);
                hash.Add(this.DefaultWeight);
                hash.Add(this.Flags);
                hash.Add(this.AccelerationRate);
                hash.Add(this.DecelerationRate);
                hash.Add(this.Size);
                hash.Add(this.Unknown);
                hash.Add(this.InjuredHealthPercent);
                hash.Add(this.ShieldBipedObject);
                hash.Add(this.BearddBipedObject);
                hash.Add(this.BodyBipedObject);
                hash.Add(this.AimAngleTolerance);
                hash.Add(this.FlightRadius);
                hash.Add(this.AngularAccelerationRate);
                hash.Add(this.AngularTolerance);
                hash.Add(this.Flags2);
                hash.Add(this.Unknown2);
                hash.Add(this.PipboyBipedObject);
                hash.Add(this.XPValue);
                hash.Add(this.SeverableDebrisScale);
                hash.Add(this.SeverableDebrisCount);
                hash.Add(this.SeverableDecalCount);
                hash.Add(this.ExplodableDebrisScale);
                hash.Add(this.ExplodableDebrisCount);
                hash.Add(this.ExplodableDecalCount);
                hash.Add(this.SeverableExplosion);
                hash.Add(this.SeverableDebris);
                hash.Add(this.SeverableImpactDataSet);
                hash.Add(this.ExplodableExplosion);
                hash.Add(this.ExplodableDebris);
                hash.Add(this.ExplodableImpactDataSet);
                hash.Add(this.OnCrippleDebrisCount);
                hash.Add(this.OnCrippleDecalCount);
                hash.Add(this.OnCrippleExplosion);
                hash.Add(this.OnCrippleDebris);
                hash.Add(this.OnCrippleImpactDataSet);
                hash.Add(this.ExplodableSubsegmentExplosion);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.AnimationSound)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Description)) return false;
                if (this.ActorEffect != null)
                {
                    if (!eval(this.ActorEffect.Overall)) return false;
                    if (this.ActorEffect.Specific != null)
                    {
                        foreach (var item in this.ActorEffect.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Skin)) return false;
                if (BipedBodyTemplate != null)
                {
                    if (!eval(this.BipedBodyTemplate.Overall)) return false;
                    if (this.BipedBodyTemplate.Specific != null && !this.BipedBodyTemplate.Specific.All(eval)) return false;
                }
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Properties != null)
                {
                    if (!eval(this.Properties.Overall)) return false;
                    if (this.Properties.Specific != null && !this.Properties.Specific.All(eval)) return false;
                }
                if (this.AttachParentSlots != null)
                {
                    if (!eval(this.AttachParentSlots.Overall)) return false;
                    if (this.AttachParentSlots.Specific != null)
                    {
                        foreach (var item in this.AttachParentSlots.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Height.Male) || !eval(this.Height.Female)) return false;
                if (!eval(this.DefaultWeight.Male) || !eval(this.DefaultWeight.Female)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.AccelerationRate)) return false;
                if (!eval(this.DecelerationRate)) return false;
                if (!eval(this.Size)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.InjuredHealthPercent)) return false;
                if (!eval(this.ShieldBipedObject)) return false;
                if (!eval(this.BearddBipedObject)) return false;
                if (!eval(this.BodyBipedObject)) return false;
                if (!eval(this.AimAngleTolerance)) return false;
                if (!eval(this.FlightRadius)) return false;
                if (!eval(this.AngularAccelerationRate)) return false;
                if (!eval(this.AngularTolerance)) return false;
                if (!eval(this.Flags2)) return false;
                if (!eval(this.Unknown2)) return false;
                if (!eval(this.PipboyBipedObject)) return false;
                if (!eval(this.XPValue)) return false;
                if (!eval(this.SeverableDebrisScale)) return false;
                if (!eval(this.SeverableDebrisCount)) return false;
                if (!eval(this.SeverableDecalCount)) return false;
                if (!eval(this.ExplodableDebrisScale)) return false;
                if (!eval(this.ExplodableDebrisCount)) return false;
                if (!eval(this.ExplodableDecalCount)) return false;
                if (!eval(this.SeverableExplosion)) return false;
                if (!eval(this.SeverableDebris)) return false;
                if (!eval(this.SeverableImpactDataSet)) return false;
                if (!eval(this.ExplodableExplosion)) return false;
                if (!eval(this.ExplodableDebris)) return false;
                if (!eval(this.ExplodableImpactDataSet)) return false;
                if (!eval(this.OnCrippleDebrisCount)) return false;
                if (!eval(this.OnCrippleDecalCount)) return false;
                if (!eval(this.OnCrippleExplosion)) return false;
                if (!eval(this.OnCrippleDebris)) return false;
                if (!eval(this.OnCrippleImpactDataSet)) return false;
                if (!eval(this.ExplodableSubsegmentExplosion)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.AnimationSound)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Description)) return true;
                if (this.ActorEffect != null)
                {
                    if (eval(this.ActorEffect.Overall)) return true;
                    if (this.ActorEffect.Specific != null)
                    {
                        foreach (var item in this.ActorEffect.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Skin)) return true;
                if (BipedBodyTemplate != null)
                {
                    if (eval(this.BipedBodyTemplate.Overall)) return true;
                    if (this.BipedBodyTemplate.Specific != null && this.BipedBodyTemplate.Specific.Any(eval)) return true;
                }
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Properties != null)
                {
                    if (eval(this.Properties.Overall)) return true;
                    if (this.Properties.Specific != null && this.Properties.Specific.Any(eval)) return true;
                }
                if (this.AttachParentSlots != null)
                {
                    if (eval(this.AttachParentSlots.Overall)) return true;
                    if (this.AttachParentSlots.Specific != null)
                    {
                        foreach (var item in this.AttachParentSlots.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Height.Male) || eval(this.Height.Female)) return true;
                if (eval(this.DefaultWeight.Male) || eval(this.DefaultWeight.Female)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.AccelerationRate)) return true;
                if (eval(this.DecelerationRate)) return true;
                if (eval(this.Size)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.InjuredHealthPercent)) return true;
                if (eval(this.ShieldBipedObject)) return true;
                if (eval(this.BearddBipedObject)) return true;
                if (eval(this.BodyBipedObject)) return true;
                if (eval(this.AimAngleTolerance)) return true;
                if (eval(this.FlightRadius)) return true;
                if (eval(this.AngularAccelerationRate)) return true;
                if (eval(this.AngularTolerance)) return true;
                if (eval(this.Flags2)) return true;
                if (eval(this.Unknown2)) return true;
                if (eval(this.PipboyBipedObject)) return true;
                if (eval(this.XPValue)) return true;
                if (eval(this.SeverableDebrisScale)) return true;
                if (eval(this.SeverableDebrisCount)) return true;
                if (eval(this.SeverableDecalCount)) return true;
                if (eval(this.ExplodableDebrisScale)) return true;
                if (eval(this.ExplodableDebrisCount)) return true;
                if (eval(this.ExplodableDecalCount)) return true;
                if (eval(this.SeverableExplosion)) return true;
                if (eval(this.SeverableDebris)) return true;
                if (eval(this.SeverableImpactDataSet)) return true;
                if (eval(this.ExplodableExplosion)) return true;
                if (eval(this.ExplodableDebris)) return true;
                if (eval(this.ExplodableImpactDataSet)) return true;
                if (eval(this.OnCrippleDebrisCount)) return true;
                if (eval(this.OnCrippleDecalCount)) return true;
                if (eval(this.OnCrippleExplosion)) return true;
                if (eval(this.OnCrippleDebris)) return true;
                if (eval(this.OnCrippleImpactDataSet)) return true;
                if (eval(this.ExplodableSubsegmentExplosion)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Race.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.AnimationSound = eval(this.AnimationSound);
                obj.Name = eval(this.Name);
                obj.Description = eval(this.Description);
                if (ActorEffect != null)
                {
                    obj.ActorEffect = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.ActorEffect.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (ActorEffect.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.ActorEffect.Specific = l;
                        foreach (var item in ActorEffect.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Skin = eval(this.Skin);
                obj.BipedBodyTemplate = this.BipedBodyTemplate == null ? null : new MaskItem<R, BipedBodyTemplate.Mask<R>?>(eval(this.BipedBodyTemplate.Overall), this.BipedBodyTemplate.Specific?.Translate(eval));
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Properties = this.Properties == null ? null : new MaskItem<R, Properties.Mask<R>?>(eval(this.Properties.Overall), this.Properties.Specific?.Translate(eval));
                if (AttachParentSlots != null)
                {
                    obj.AttachParentSlots = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.AttachParentSlots.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (AttachParentSlots.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.AttachParentSlots.Specific = l;
                        foreach (var item in AttachParentSlots.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Height = new GenderedItem<R>(
                    eval(this.Height.Male),
                    eval(this.Height.Female));
                obj.DefaultWeight = new GenderedItem<R>(
                    eval(this.DefaultWeight.Male),
                    eval(this.DefaultWeight.Female));
                obj.Flags = eval(this.Flags);
                obj.AccelerationRate = eval(this.AccelerationRate);
                obj.DecelerationRate = eval(this.DecelerationRate);
                obj.Size = eval(this.Size);
                obj.Unknown = eval(this.Unknown);
                obj.InjuredHealthPercent = eval(this.InjuredHealthPercent);
                obj.ShieldBipedObject = eval(this.ShieldBipedObject);
                obj.BearddBipedObject = eval(this.BearddBipedObject);
                obj.BodyBipedObject = eval(this.BodyBipedObject);
                obj.AimAngleTolerance = eval(this.AimAngleTolerance);
                obj.FlightRadius = eval(this.FlightRadius);
                obj.AngularAccelerationRate = eval(this.AngularAccelerationRate);
                obj.AngularTolerance = eval(this.AngularTolerance);
                obj.Flags2 = eval(this.Flags2);
                obj.Unknown2 = eval(this.Unknown2);
                obj.PipboyBipedObject = eval(this.PipboyBipedObject);
                obj.XPValue = eval(this.XPValue);
                obj.SeverableDebrisScale = eval(this.SeverableDebrisScale);
                obj.SeverableDebrisCount = eval(this.SeverableDebrisCount);
                obj.SeverableDecalCount = eval(this.SeverableDecalCount);
                obj.ExplodableDebrisScale = eval(this.ExplodableDebrisScale);
                obj.ExplodableDebrisCount = eval(this.ExplodableDebrisCount);
                obj.ExplodableDecalCount = eval(this.ExplodableDecalCount);
                obj.SeverableExplosion = eval(this.SeverableExplosion);
                obj.SeverableDebris = eval(this.SeverableDebris);
                obj.SeverableImpactDataSet = eval(this.SeverableImpactDataSet);
                obj.ExplodableExplosion = eval(this.ExplodableExplosion);
                obj.ExplodableDebris = eval(this.ExplodableDebris);
                obj.ExplodableImpactDataSet = eval(this.ExplodableImpactDataSet);
                obj.OnCrippleDebrisCount = eval(this.OnCrippleDebrisCount);
                obj.OnCrippleDecalCount = eval(this.OnCrippleDecalCount);
                obj.OnCrippleExplosion = eval(this.OnCrippleExplosion);
                obj.OnCrippleDebris = eval(this.OnCrippleDebris);
                obj.OnCrippleImpactDataSet = eval(this.OnCrippleImpactDataSet);
                obj.ExplodableSubsegmentExplosion = eval(this.ExplodableSubsegmentExplosion);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Race.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Race.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Race.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.AnimationSound ?? true)
                    {
                        fg.AppendItem(AnimationSound, "AnimationSound");
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Description ?? true)
                    {
                        fg.AppendItem(Description, "Description");
                    }
                    if ((printMask?.ActorEffect?.Overall ?? true)
                        && ActorEffect is {} ActorEffectItem)
                    {
                        fg.AppendLine("ActorEffect =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ActorEffectItem.Overall);
                            if (ActorEffectItem.Specific != null)
                            {
                                foreach (var subItem in ActorEffectItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Skin ?? true)
                    {
                        fg.AppendItem(Skin, "Skin");
                    }
                    if (printMask?.BipedBodyTemplate?.Overall ?? true)
                    {
                        BipedBodyTemplate?.ToString(fg);
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        fg.AppendLine("Keywords =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Properties?.Overall ?? true)
                    {
                        Properties?.ToString(fg);
                    }
                    if ((printMask?.AttachParentSlots?.Overall ?? true)
                        && AttachParentSlots is {} AttachParentSlotsItem)
                    {
                        fg.AppendLine("AttachParentSlots =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(AttachParentSlotsItem.Overall);
                            if (AttachParentSlotsItem.Specific != null)
                            {
                                foreach (var subItem in AttachParentSlotsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((true))
                    {
                        fg.AppendLine($"Height => {Height}");
                    }
                    if ((true))
                    {
                        fg.AppendLine($"DefaultWeight => {DefaultWeight}");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.AccelerationRate ?? true)
                    {
                        fg.AppendItem(AccelerationRate, "AccelerationRate");
                    }
                    if (printMask?.DecelerationRate ?? true)
                    {
                        fg.AppendItem(DecelerationRate, "DecelerationRate");
                    }
                    if (printMask?.Size ?? true)
                    {
                        fg.AppendItem(Size, "Size");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.InjuredHealthPercent ?? true)
                    {
                        fg.AppendItem(InjuredHealthPercent, "InjuredHealthPercent");
                    }
                    if (printMask?.ShieldBipedObject ?? true)
                    {
                        fg.AppendItem(ShieldBipedObject, "ShieldBipedObject");
                    }
                    if (printMask?.BearddBipedObject ?? true)
                    {
                        fg.AppendItem(BearddBipedObject, "BearddBipedObject");
                    }
                    if (printMask?.BodyBipedObject ?? true)
                    {
                        fg.AppendItem(BodyBipedObject, "BodyBipedObject");
                    }
                    if (printMask?.AimAngleTolerance ?? true)
                    {
                        fg.AppendItem(AimAngleTolerance, "AimAngleTolerance");
                    }
                    if (printMask?.FlightRadius ?? true)
                    {
                        fg.AppendItem(FlightRadius, "FlightRadius");
                    }
                    if (printMask?.AngularAccelerationRate ?? true)
                    {
                        fg.AppendItem(AngularAccelerationRate, "AngularAccelerationRate");
                    }
                    if (printMask?.AngularTolerance ?? true)
                    {
                        fg.AppendItem(AngularTolerance, "AngularTolerance");
                    }
                    if (printMask?.Flags2 ?? true)
                    {
                        fg.AppendItem(Flags2, "Flags2");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        fg.AppendItem(Unknown2, "Unknown2");
                    }
                    if (printMask?.PipboyBipedObject ?? true)
                    {
                        fg.AppendItem(PipboyBipedObject, "PipboyBipedObject");
                    }
                    if (printMask?.XPValue ?? true)
                    {
                        fg.AppendItem(XPValue, "XPValue");
                    }
                    if (printMask?.SeverableDebrisScale ?? true)
                    {
                        fg.AppendItem(SeverableDebrisScale, "SeverableDebrisScale");
                    }
                    if (printMask?.SeverableDebrisCount ?? true)
                    {
                        fg.AppendItem(SeverableDebrisCount, "SeverableDebrisCount");
                    }
                    if (printMask?.SeverableDecalCount ?? true)
                    {
                        fg.AppendItem(SeverableDecalCount, "SeverableDecalCount");
                    }
                    if (printMask?.ExplodableDebrisScale ?? true)
                    {
                        fg.AppendItem(ExplodableDebrisScale, "ExplodableDebrisScale");
                    }
                    if (printMask?.ExplodableDebrisCount ?? true)
                    {
                        fg.AppendItem(ExplodableDebrisCount, "ExplodableDebrisCount");
                    }
                    if (printMask?.ExplodableDecalCount ?? true)
                    {
                        fg.AppendItem(ExplodableDecalCount, "ExplodableDecalCount");
                    }
                    if (printMask?.SeverableExplosion ?? true)
                    {
                        fg.AppendItem(SeverableExplosion, "SeverableExplosion");
                    }
                    if (printMask?.SeverableDebris ?? true)
                    {
                        fg.AppendItem(SeverableDebris, "SeverableDebris");
                    }
                    if (printMask?.SeverableImpactDataSet ?? true)
                    {
                        fg.AppendItem(SeverableImpactDataSet, "SeverableImpactDataSet");
                    }
                    if (printMask?.ExplodableExplosion ?? true)
                    {
                        fg.AppendItem(ExplodableExplosion, "ExplodableExplosion");
                    }
                    if (printMask?.ExplodableDebris ?? true)
                    {
                        fg.AppendItem(ExplodableDebris, "ExplodableDebris");
                    }
                    if (printMask?.ExplodableImpactDataSet ?? true)
                    {
                        fg.AppendItem(ExplodableImpactDataSet, "ExplodableImpactDataSet");
                    }
                    if (printMask?.OnCrippleDebrisCount ?? true)
                    {
                        fg.AppendItem(OnCrippleDebrisCount, "OnCrippleDebrisCount");
                    }
                    if (printMask?.OnCrippleDecalCount ?? true)
                    {
                        fg.AppendItem(OnCrippleDecalCount, "OnCrippleDecalCount");
                    }
                    if (printMask?.OnCrippleExplosion ?? true)
                    {
                        fg.AppendItem(OnCrippleExplosion, "OnCrippleExplosion");
                    }
                    if (printMask?.OnCrippleDebris ?? true)
                    {
                        fg.AppendItem(OnCrippleDebris, "OnCrippleDebris");
                    }
                    if (printMask?.OnCrippleImpactDataSet ?? true)
                    {
                        fg.AppendItem(OnCrippleImpactDataSet, "OnCrippleImpactDataSet");
                    }
                    if (printMask?.ExplodableSubsegmentExplosion ?? true)
                    {
                        fg.AppendItem(ExplodableSubsegmentExplosion, "ExplodableSubsegmentExplosion");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? AnimationSound;
            public Exception? Name;
            public Exception? Description;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? ActorEffect;
            public Exception? Skin;
            public MaskItem<Exception?, BipedBodyTemplate.ErrorMask?>? BipedBodyTemplate;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public MaskItem<Exception?, Properties.ErrorMask?>? Properties;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? AttachParentSlots;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? Height;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? DefaultWeight;
            public Exception? Flags;
            public Exception? AccelerationRate;
            public Exception? DecelerationRate;
            public Exception? Size;
            public Exception? Unknown;
            public Exception? InjuredHealthPercent;
            public Exception? ShieldBipedObject;
            public Exception? BearddBipedObject;
            public Exception? BodyBipedObject;
            public Exception? AimAngleTolerance;
            public Exception? FlightRadius;
            public Exception? AngularAccelerationRate;
            public Exception? AngularTolerance;
            public Exception? Flags2;
            public Exception? Unknown2;
            public Exception? PipboyBipedObject;
            public Exception? XPValue;
            public Exception? SeverableDebrisScale;
            public Exception? SeverableDebrisCount;
            public Exception? SeverableDecalCount;
            public Exception? ExplodableDebrisScale;
            public Exception? ExplodableDebrisCount;
            public Exception? ExplodableDecalCount;
            public Exception? SeverableExplosion;
            public Exception? SeverableDebris;
            public Exception? SeverableImpactDataSet;
            public Exception? ExplodableExplosion;
            public Exception? ExplodableDebris;
            public Exception? ExplodableImpactDataSet;
            public Exception? OnCrippleDebrisCount;
            public Exception? OnCrippleDecalCount;
            public Exception? OnCrippleExplosion;
            public Exception? OnCrippleDebris;
            public Exception? OnCrippleImpactDataSet;
            public Exception? ExplodableSubsegmentExplosion;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Race_FieldIndex enu = (Race_FieldIndex)index;
                switch (enu)
                {
                    case Race_FieldIndex.AnimationSound:
                        return AnimationSound;
                    case Race_FieldIndex.Name:
                        return Name;
                    case Race_FieldIndex.Description:
                        return Description;
                    case Race_FieldIndex.ActorEffect:
                        return ActorEffect;
                    case Race_FieldIndex.Skin:
                        return Skin;
                    case Race_FieldIndex.BipedBodyTemplate:
                        return BipedBodyTemplate;
                    case Race_FieldIndex.Keywords:
                        return Keywords;
                    case Race_FieldIndex.Properties:
                        return Properties;
                    case Race_FieldIndex.AttachParentSlots:
                        return AttachParentSlots;
                    case Race_FieldIndex.Height:
                        return Height;
                    case Race_FieldIndex.DefaultWeight:
                        return DefaultWeight;
                    case Race_FieldIndex.Flags:
                        return Flags;
                    case Race_FieldIndex.AccelerationRate:
                        return AccelerationRate;
                    case Race_FieldIndex.DecelerationRate:
                        return DecelerationRate;
                    case Race_FieldIndex.Size:
                        return Size;
                    case Race_FieldIndex.Unknown:
                        return Unknown;
                    case Race_FieldIndex.InjuredHealthPercent:
                        return InjuredHealthPercent;
                    case Race_FieldIndex.ShieldBipedObject:
                        return ShieldBipedObject;
                    case Race_FieldIndex.BearddBipedObject:
                        return BearddBipedObject;
                    case Race_FieldIndex.BodyBipedObject:
                        return BodyBipedObject;
                    case Race_FieldIndex.AimAngleTolerance:
                        return AimAngleTolerance;
                    case Race_FieldIndex.FlightRadius:
                        return FlightRadius;
                    case Race_FieldIndex.AngularAccelerationRate:
                        return AngularAccelerationRate;
                    case Race_FieldIndex.AngularTolerance:
                        return AngularTolerance;
                    case Race_FieldIndex.Flags2:
                        return Flags2;
                    case Race_FieldIndex.Unknown2:
                        return Unknown2;
                    case Race_FieldIndex.PipboyBipedObject:
                        return PipboyBipedObject;
                    case Race_FieldIndex.XPValue:
                        return XPValue;
                    case Race_FieldIndex.SeverableDebrisScale:
                        return SeverableDebrisScale;
                    case Race_FieldIndex.SeverableDebrisCount:
                        return SeverableDebrisCount;
                    case Race_FieldIndex.SeverableDecalCount:
                        return SeverableDecalCount;
                    case Race_FieldIndex.ExplodableDebrisScale:
                        return ExplodableDebrisScale;
                    case Race_FieldIndex.ExplodableDebrisCount:
                        return ExplodableDebrisCount;
                    case Race_FieldIndex.ExplodableDecalCount:
                        return ExplodableDecalCount;
                    case Race_FieldIndex.SeverableExplosion:
                        return SeverableExplosion;
                    case Race_FieldIndex.SeverableDebris:
                        return SeverableDebris;
                    case Race_FieldIndex.SeverableImpactDataSet:
                        return SeverableImpactDataSet;
                    case Race_FieldIndex.ExplodableExplosion:
                        return ExplodableExplosion;
                    case Race_FieldIndex.ExplodableDebris:
                        return ExplodableDebris;
                    case Race_FieldIndex.ExplodableImpactDataSet:
                        return ExplodableImpactDataSet;
                    case Race_FieldIndex.OnCrippleDebrisCount:
                        return OnCrippleDebrisCount;
                    case Race_FieldIndex.OnCrippleDecalCount:
                        return OnCrippleDecalCount;
                    case Race_FieldIndex.OnCrippleExplosion:
                        return OnCrippleExplosion;
                    case Race_FieldIndex.OnCrippleDebris:
                        return OnCrippleDebris;
                    case Race_FieldIndex.OnCrippleImpactDataSet:
                        return OnCrippleImpactDataSet;
                    case Race_FieldIndex.ExplodableSubsegmentExplosion:
                        return ExplodableSubsegmentExplosion;
                    case Race_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Race_FieldIndex enu = (Race_FieldIndex)index;
                switch (enu)
                {
                    case Race_FieldIndex.AnimationSound:
                        this.AnimationSound = ex;
                        break;
                    case Race_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Race_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Race_FieldIndex.ActorEffect:
                        this.ActorEffect = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.Skin:
                        this.Skin = ex;
                        break;
                    case Race_FieldIndex.BipedBodyTemplate:
                        this.BipedBodyTemplate = new MaskItem<Exception?, BipedBodyTemplate.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.Properties:
                        this.Properties = new MaskItem<Exception?, Properties.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.AttachParentSlots:
                        this.AttachParentSlots = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.Height:
                        this.Height = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.DefaultWeight:
                        this.DefaultWeight = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Race_FieldIndex.AccelerationRate:
                        this.AccelerationRate = ex;
                        break;
                    case Race_FieldIndex.DecelerationRate:
                        this.DecelerationRate = ex;
                        break;
                    case Race_FieldIndex.Size:
                        this.Size = ex;
                        break;
                    case Race_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case Race_FieldIndex.InjuredHealthPercent:
                        this.InjuredHealthPercent = ex;
                        break;
                    case Race_FieldIndex.ShieldBipedObject:
                        this.ShieldBipedObject = ex;
                        break;
                    case Race_FieldIndex.BearddBipedObject:
                        this.BearddBipedObject = ex;
                        break;
                    case Race_FieldIndex.BodyBipedObject:
                        this.BodyBipedObject = ex;
                        break;
                    case Race_FieldIndex.AimAngleTolerance:
                        this.AimAngleTolerance = ex;
                        break;
                    case Race_FieldIndex.FlightRadius:
                        this.FlightRadius = ex;
                        break;
                    case Race_FieldIndex.AngularAccelerationRate:
                        this.AngularAccelerationRate = ex;
                        break;
                    case Race_FieldIndex.AngularTolerance:
                        this.AngularTolerance = ex;
                        break;
                    case Race_FieldIndex.Flags2:
                        this.Flags2 = ex;
                        break;
                    case Race_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    case Race_FieldIndex.PipboyBipedObject:
                        this.PipboyBipedObject = ex;
                        break;
                    case Race_FieldIndex.XPValue:
                        this.XPValue = ex;
                        break;
                    case Race_FieldIndex.SeverableDebrisScale:
                        this.SeverableDebrisScale = ex;
                        break;
                    case Race_FieldIndex.SeverableDebrisCount:
                        this.SeverableDebrisCount = ex;
                        break;
                    case Race_FieldIndex.SeverableDecalCount:
                        this.SeverableDecalCount = ex;
                        break;
                    case Race_FieldIndex.ExplodableDebrisScale:
                        this.ExplodableDebrisScale = ex;
                        break;
                    case Race_FieldIndex.ExplodableDebrisCount:
                        this.ExplodableDebrisCount = ex;
                        break;
                    case Race_FieldIndex.ExplodableDecalCount:
                        this.ExplodableDecalCount = ex;
                        break;
                    case Race_FieldIndex.SeverableExplosion:
                        this.SeverableExplosion = ex;
                        break;
                    case Race_FieldIndex.SeverableDebris:
                        this.SeverableDebris = ex;
                        break;
                    case Race_FieldIndex.SeverableImpactDataSet:
                        this.SeverableImpactDataSet = ex;
                        break;
                    case Race_FieldIndex.ExplodableExplosion:
                        this.ExplodableExplosion = ex;
                        break;
                    case Race_FieldIndex.ExplodableDebris:
                        this.ExplodableDebris = ex;
                        break;
                    case Race_FieldIndex.ExplodableImpactDataSet:
                        this.ExplodableImpactDataSet = ex;
                        break;
                    case Race_FieldIndex.OnCrippleDebrisCount:
                        this.OnCrippleDebrisCount = ex;
                        break;
                    case Race_FieldIndex.OnCrippleDecalCount:
                        this.OnCrippleDecalCount = ex;
                        break;
                    case Race_FieldIndex.OnCrippleExplosion:
                        this.OnCrippleExplosion = ex;
                        break;
                    case Race_FieldIndex.OnCrippleDebris:
                        this.OnCrippleDebris = ex;
                        break;
                    case Race_FieldIndex.OnCrippleImpactDataSet:
                        this.OnCrippleImpactDataSet = ex;
                        break;
                    case Race_FieldIndex.ExplodableSubsegmentExplosion:
                        this.ExplodableSubsegmentExplosion = ex;
                        break;
                    case Race_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Race_FieldIndex enu = (Race_FieldIndex)index;
                switch (enu)
                {
                    case Race_FieldIndex.AnimationSound:
                        this.AnimationSound = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ActorEffect:
                        this.ActorEffect = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.Skin:
                        this.Skin = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BipedBodyTemplate:
                        this.BipedBodyTemplate = (MaskItem<Exception?, BipedBodyTemplate.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.Properties:
                        this.Properties = (MaskItem<Exception?, Properties.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.AttachParentSlots:
                        this.AttachParentSlots = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.Height:
                        this.Height = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.DefaultWeight:
                        this.DefaultWeight = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Race_FieldIndex.AccelerationRate:
                        this.AccelerationRate = (Exception?)obj;
                        break;
                    case Race_FieldIndex.DecelerationRate:
                        this.DecelerationRate = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Size:
                        this.Size = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case Race_FieldIndex.InjuredHealthPercent:
                        this.InjuredHealthPercent = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ShieldBipedObject:
                        this.ShieldBipedObject = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BearddBipedObject:
                        this.BearddBipedObject = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BodyBipedObject:
                        this.BodyBipedObject = (Exception?)obj;
                        break;
                    case Race_FieldIndex.AimAngleTolerance:
                        this.AimAngleTolerance = (Exception?)obj;
                        break;
                    case Race_FieldIndex.FlightRadius:
                        this.FlightRadius = (Exception?)obj;
                        break;
                    case Race_FieldIndex.AngularAccelerationRate:
                        this.AngularAccelerationRate = (Exception?)obj;
                        break;
                    case Race_FieldIndex.AngularTolerance:
                        this.AngularTolerance = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Flags2:
                        this.Flags2 = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    case Race_FieldIndex.PipboyBipedObject:
                        this.PipboyBipedObject = (Exception?)obj;
                        break;
                    case Race_FieldIndex.XPValue:
                        this.XPValue = (Exception?)obj;
                        break;
                    case Race_FieldIndex.SeverableDebrisScale:
                        this.SeverableDebrisScale = (Exception?)obj;
                        break;
                    case Race_FieldIndex.SeverableDebrisCount:
                        this.SeverableDebrisCount = (Exception?)obj;
                        break;
                    case Race_FieldIndex.SeverableDecalCount:
                        this.SeverableDecalCount = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ExplodableDebrisScale:
                        this.ExplodableDebrisScale = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ExplodableDebrisCount:
                        this.ExplodableDebrisCount = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ExplodableDecalCount:
                        this.ExplodableDecalCount = (Exception?)obj;
                        break;
                    case Race_FieldIndex.SeverableExplosion:
                        this.SeverableExplosion = (Exception?)obj;
                        break;
                    case Race_FieldIndex.SeverableDebris:
                        this.SeverableDebris = (Exception?)obj;
                        break;
                    case Race_FieldIndex.SeverableImpactDataSet:
                        this.SeverableImpactDataSet = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ExplodableExplosion:
                        this.ExplodableExplosion = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ExplodableDebris:
                        this.ExplodableDebris = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ExplodableImpactDataSet:
                        this.ExplodableImpactDataSet = (Exception?)obj;
                        break;
                    case Race_FieldIndex.OnCrippleDebrisCount:
                        this.OnCrippleDebrisCount = (Exception?)obj;
                        break;
                    case Race_FieldIndex.OnCrippleDecalCount:
                        this.OnCrippleDecalCount = (Exception?)obj;
                        break;
                    case Race_FieldIndex.OnCrippleExplosion:
                        this.OnCrippleExplosion = (Exception?)obj;
                        break;
                    case Race_FieldIndex.OnCrippleDebris:
                        this.OnCrippleDebris = (Exception?)obj;
                        break;
                    case Race_FieldIndex.OnCrippleImpactDataSet:
                        this.OnCrippleImpactDataSet = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ExplodableSubsegmentExplosion:
                        this.ExplodableSubsegmentExplosion = (Exception?)obj;
                        break;
                    case Race_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (AnimationSound != null) return true;
                if (Name != null) return true;
                if (Description != null) return true;
                if (ActorEffect != null) return true;
                if (Skin != null) return true;
                if (BipedBodyTemplate != null) return true;
                if (Keywords != null) return true;
                if (Properties != null) return true;
                if (AttachParentSlots != null) return true;
                if (Height != null) return true;
                if (DefaultWeight != null) return true;
                if (Flags != null) return true;
                if (AccelerationRate != null) return true;
                if (DecelerationRate != null) return true;
                if (Size != null) return true;
                if (Unknown != null) return true;
                if (InjuredHealthPercent != null) return true;
                if (ShieldBipedObject != null) return true;
                if (BearddBipedObject != null) return true;
                if (BodyBipedObject != null) return true;
                if (AimAngleTolerance != null) return true;
                if (FlightRadius != null) return true;
                if (AngularAccelerationRate != null) return true;
                if (AngularTolerance != null) return true;
                if (Flags2 != null) return true;
                if (Unknown2 != null) return true;
                if (PipboyBipedObject != null) return true;
                if (XPValue != null) return true;
                if (SeverableDebrisScale != null) return true;
                if (SeverableDebrisCount != null) return true;
                if (SeverableDecalCount != null) return true;
                if (ExplodableDebrisScale != null) return true;
                if (ExplodableDebrisCount != null) return true;
                if (ExplodableDecalCount != null) return true;
                if (SeverableExplosion != null) return true;
                if (SeverableDebris != null) return true;
                if (SeverableImpactDataSet != null) return true;
                if (ExplodableExplosion != null) return true;
                if (ExplodableDebris != null) return true;
                if (ExplodableImpactDataSet != null) return true;
                if (OnCrippleDebrisCount != null) return true;
                if (OnCrippleDecalCount != null) return true;
                if (OnCrippleExplosion != null) return true;
                if (OnCrippleDebris != null) return true;
                if (OnCrippleImpactDataSet != null) return true;
                if (ExplodableSubsegmentExplosion != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(AnimationSound, "AnimationSound");
                fg.AppendItem(Name, "Name");
                fg.AppendItem(Description, "Description");
                if (ActorEffect is {} ActorEffectItem)
                {
                    fg.AppendLine("ActorEffect =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ActorEffectItem.Overall);
                        if (ActorEffectItem.Specific != null)
                        {
                            foreach (var subItem in ActorEffectItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Skin, "Skin");
                BipedBodyTemplate?.ToString(fg);
                if (Keywords is {} KeywordsItem)
                {
                    fg.AppendLine("Keywords =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                Properties?.ToString(fg);
                if (AttachParentSlots is {} AttachParentSlotsItem)
                {
                    fg.AppendLine("AttachParentSlots =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(AttachParentSlotsItem.Overall);
                        if (AttachParentSlotsItem.Specific != null)
                        {
                            foreach (var subItem in AttachParentSlotsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendLine($"Height => {Height}");
                fg.AppendLine($"DefaultWeight => {DefaultWeight}");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(AccelerationRate, "AccelerationRate");
                fg.AppendItem(DecelerationRate, "DecelerationRate");
                fg.AppendItem(Size, "Size");
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(InjuredHealthPercent, "InjuredHealthPercent");
                fg.AppendItem(ShieldBipedObject, "ShieldBipedObject");
                fg.AppendItem(BearddBipedObject, "BearddBipedObject");
                fg.AppendItem(BodyBipedObject, "BodyBipedObject");
                fg.AppendItem(AimAngleTolerance, "AimAngleTolerance");
                fg.AppendItem(FlightRadius, "FlightRadius");
                fg.AppendItem(AngularAccelerationRate, "AngularAccelerationRate");
                fg.AppendItem(AngularTolerance, "AngularTolerance");
                fg.AppendItem(Flags2, "Flags2");
                fg.AppendItem(Unknown2, "Unknown2");
                fg.AppendItem(PipboyBipedObject, "PipboyBipedObject");
                fg.AppendItem(XPValue, "XPValue");
                fg.AppendItem(SeverableDebrisScale, "SeverableDebrisScale");
                fg.AppendItem(SeverableDebrisCount, "SeverableDebrisCount");
                fg.AppendItem(SeverableDecalCount, "SeverableDecalCount");
                fg.AppendItem(ExplodableDebrisScale, "ExplodableDebrisScale");
                fg.AppendItem(ExplodableDebrisCount, "ExplodableDebrisCount");
                fg.AppendItem(ExplodableDecalCount, "ExplodableDecalCount");
                fg.AppendItem(SeverableExplosion, "SeverableExplosion");
                fg.AppendItem(SeverableDebris, "SeverableDebris");
                fg.AppendItem(SeverableImpactDataSet, "SeverableImpactDataSet");
                fg.AppendItem(ExplodableExplosion, "ExplodableExplosion");
                fg.AppendItem(ExplodableDebris, "ExplodableDebris");
                fg.AppendItem(ExplodableImpactDataSet, "ExplodableImpactDataSet");
                fg.AppendItem(OnCrippleDebrisCount, "OnCrippleDebrisCount");
                fg.AppendItem(OnCrippleDecalCount, "OnCrippleDecalCount");
                fg.AppendItem(OnCrippleExplosion, "OnCrippleExplosion");
                fg.AppendItem(OnCrippleDebris, "OnCrippleDebris");
                fg.AppendItem(OnCrippleImpactDataSet, "OnCrippleImpactDataSet");
                fg.AppendItem(ExplodableSubsegmentExplosion, "ExplodableSubsegmentExplosion");
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.AnimationSound = this.AnimationSound.Combine(rhs.AnimationSound);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.ActorEffect = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.ActorEffect?.Overall, rhs.ActorEffect?.Overall), ExceptionExt.Combine(this.ActorEffect?.Specific, rhs.ActorEffect?.Specific));
                ret.Skin = this.Skin.Combine(rhs.Skin);
                ret.BipedBodyTemplate = this.BipedBodyTemplate.Combine(rhs.BipedBodyTemplate, (l, r) => l.Combine(r));
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Properties = this.Properties.Combine(rhs.Properties, (l, r) => l.Combine(r));
                ret.AttachParentSlots = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.AttachParentSlots?.Overall, rhs.AttachParentSlots?.Overall), ExceptionExt.Combine(this.AttachParentSlots?.Specific, rhs.AttachParentSlots?.Specific));
                ret.Height = new MaskItem<Exception?, GenderedItem<Exception?>?>(ExceptionExt.Combine(this.Height?.Overall, rhs.Height?.Overall), GenderedItem.Combine(this.Height?.Specific, rhs.Height?.Specific));
                ret.DefaultWeight = new MaskItem<Exception?, GenderedItem<Exception?>?>(ExceptionExt.Combine(this.DefaultWeight?.Overall, rhs.DefaultWeight?.Overall), GenderedItem.Combine(this.DefaultWeight?.Specific, rhs.DefaultWeight?.Specific));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.AccelerationRate = this.AccelerationRate.Combine(rhs.AccelerationRate);
                ret.DecelerationRate = this.DecelerationRate.Combine(rhs.DecelerationRate);
                ret.Size = this.Size.Combine(rhs.Size);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.InjuredHealthPercent = this.InjuredHealthPercent.Combine(rhs.InjuredHealthPercent);
                ret.ShieldBipedObject = this.ShieldBipedObject.Combine(rhs.ShieldBipedObject);
                ret.BearddBipedObject = this.BearddBipedObject.Combine(rhs.BearddBipedObject);
                ret.BodyBipedObject = this.BodyBipedObject.Combine(rhs.BodyBipedObject);
                ret.AimAngleTolerance = this.AimAngleTolerance.Combine(rhs.AimAngleTolerance);
                ret.FlightRadius = this.FlightRadius.Combine(rhs.FlightRadius);
                ret.AngularAccelerationRate = this.AngularAccelerationRate.Combine(rhs.AngularAccelerationRate);
                ret.AngularTolerance = this.AngularTolerance.Combine(rhs.AngularTolerance);
                ret.Flags2 = this.Flags2.Combine(rhs.Flags2);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                ret.PipboyBipedObject = this.PipboyBipedObject.Combine(rhs.PipboyBipedObject);
                ret.XPValue = this.XPValue.Combine(rhs.XPValue);
                ret.SeverableDebrisScale = this.SeverableDebrisScale.Combine(rhs.SeverableDebrisScale);
                ret.SeverableDebrisCount = this.SeverableDebrisCount.Combine(rhs.SeverableDebrisCount);
                ret.SeverableDecalCount = this.SeverableDecalCount.Combine(rhs.SeverableDecalCount);
                ret.ExplodableDebrisScale = this.ExplodableDebrisScale.Combine(rhs.ExplodableDebrisScale);
                ret.ExplodableDebrisCount = this.ExplodableDebrisCount.Combine(rhs.ExplodableDebrisCount);
                ret.ExplodableDecalCount = this.ExplodableDecalCount.Combine(rhs.ExplodableDecalCount);
                ret.SeverableExplosion = this.SeverableExplosion.Combine(rhs.SeverableExplosion);
                ret.SeverableDebris = this.SeverableDebris.Combine(rhs.SeverableDebris);
                ret.SeverableImpactDataSet = this.SeverableImpactDataSet.Combine(rhs.SeverableImpactDataSet);
                ret.ExplodableExplosion = this.ExplodableExplosion.Combine(rhs.ExplodableExplosion);
                ret.ExplodableDebris = this.ExplodableDebris.Combine(rhs.ExplodableDebris);
                ret.ExplodableImpactDataSet = this.ExplodableImpactDataSet.Combine(rhs.ExplodableImpactDataSet);
                ret.OnCrippleDebrisCount = this.OnCrippleDebrisCount.Combine(rhs.OnCrippleDebrisCount);
                ret.OnCrippleDecalCount = this.OnCrippleDecalCount.Combine(rhs.OnCrippleDecalCount);
                ret.OnCrippleExplosion = this.OnCrippleExplosion.Combine(rhs.OnCrippleExplosion);
                ret.OnCrippleDebris = this.OnCrippleDebris.Combine(rhs.OnCrippleDebris);
                ret.OnCrippleImpactDataSet = this.OnCrippleImpactDataSet.Combine(rhs.OnCrippleImpactDataSet);
                ret.ExplodableSubsegmentExplosion = this.ExplodableSubsegmentExplosion.Combine(rhs.ExplodableSubsegmentExplosion);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool AnimationSound;
            public bool Name;
            public bool Description;
            public bool ActorEffect;
            public bool Skin;
            public BipedBodyTemplate.TranslationMask? BipedBodyTemplate;
            public bool Keywords;
            public Properties.TranslationMask? Properties;
            public bool AttachParentSlots;
            public GenderedItem<bool>? Height;
            public GenderedItem<bool>? DefaultWeight;
            public bool Flags;
            public bool AccelerationRate;
            public bool DecelerationRate;
            public bool Size;
            public bool Unknown;
            public bool InjuredHealthPercent;
            public bool ShieldBipedObject;
            public bool BearddBipedObject;
            public bool BodyBipedObject;
            public bool AimAngleTolerance;
            public bool FlightRadius;
            public bool AngularAccelerationRate;
            public bool AngularTolerance;
            public bool Flags2;
            public bool Unknown2;
            public bool PipboyBipedObject;
            public bool XPValue;
            public bool SeverableDebrisScale;
            public bool SeverableDebrisCount;
            public bool SeverableDecalCount;
            public bool ExplodableDebrisScale;
            public bool ExplodableDebrisCount;
            public bool ExplodableDecalCount;
            public bool SeverableExplosion;
            public bool SeverableDebris;
            public bool SeverableImpactDataSet;
            public bool ExplodableExplosion;
            public bool ExplodableDebris;
            public bool ExplodableImpactDataSet;
            public bool OnCrippleDebrisCount;
            public bool OnCrippleDecalCount;
            public bool OnCrippleExplosion;
            public bool OnCrippleDebris;
            public bool OnCrippleImpactDataSet;
            public bool ExplodableSubsegmentExplosion;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.AnimationSound = defaultOn;
                this.Name = defaultOn;
                this.Description = defaultOn;
                this.ActorEffect = defaultOn;
                this.Skin = defaultOn;
                this.Keywords = defaultOn;
                this.AttachParentSlots = defaultOn;
                this.Flags = defaultOn;
                this.AccelerationRate = defaultOn;
                this.DecelerationRate = defaultOn;
                this.Size = defaultOn;
                this.Unknown = defaultOn;
                this.InjuredHealthPercent = defaultOn;
                this.ShieldBipedObject = defaultOn;
                this.BearddBipedObject = defaultOn;
                this.BodyBipedObject = defaultOn;
                this.AimAngleTolerance = defaultOn;
                this.FlightRadius = defaultOn;
                this.AngularAccelerationRate = defaultOn;
                this.AngularTolerance = defaultOn;
                this.Flags2 = defaultOn;
                this.Unknown2 = defaultOn;
                this.PipboyBipedObject = defaultOn;
                this.XPValue = defaultOn;
                this.SeverableDebrisScale = defaultOn;
                this.SeverableDebrisCount = defaultOn;
                this.SeverableDecalCount = defaultOn;
                this.ExplodableDebrisScale = defaultOn;
                this.ExplodableDebrisCount = defaultOn;
                this.ExplodableDecalCount = defaultOn;
                this.SeverableExplosion = defaultOn;
                this.SeverableDebris = defaultOn;
                this.SeverableImpactDataSet = defaultOn;
                this.ExplodableExplosion = defaultOn;
                this.ExplodableDebris = defaultOn;
                this.ExplodableImpactDataSet = defaultOn;
                this.OnCrippleDebrisCount = defaultOn;
                this.OnCrippleDecalCount = defaultOn;
                this.OnCrippleExplosion = defaultOn;
                this.OnCrippleDebris = defaultOn;
                this.OnCrippleImpactDataSet = defaultOn;
                this.ExplodableSubsegmentExplosion = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((AnimationSound, null));
                ret.Add((Name, null));
                ret.Add((Description, null));
                ret.Add((ActorEffect, null));
                ret.Add((Skin, null));
                ret.Add((BipedBodyTemplate != null ? BipedBodyTemplate.OnOverall : DefaultOn, BipedBodyTemplate?.GetCrystal()));
                ret.Add((Keywords, null));
                ret.Add((Properties != null ? Properties.OnOverall : DefaultOn, Properties?.GetCrystal()));
                ret.Add((AttachParentSlots, null));
                ret.Add((Height != null || DefaultOn, null));
                ret.Add((DefaultWeight != null || DefaultOn, null));
                ret.Add((Flags, null));
                ret.Add((AccelerationRate, null));
                ret.Add((DecelerationRate, null));
                ret.Add((Size, null));
                ret.Add((Unknown, null));
                ret.Add((InjuredHealthPercent, null));
                ret.Add((ShieldBipedObject, null));
                ret.Add((BearddBipedObject, null));
                ret.Add((BodyBipedObject, null));
                ret.Add((AimAngleTolerance, null));
                ret.Add((FlightRadius, null));
                ret.Add((AngularAccelerationRate, null));
                ret.Add((AngularTolerance, null));
                ret.Add((Flags2, null));
                ret.Add((Unknown2, null));
                ret.Add((PipboyBipedObject, null));
                ret.Add((XPValue, null));
                ret.Add((SeverableDebrisScale, null));
                ret.Add((SeverableDebrisCount, null));
                ret.Add((SeverableDecalCount, null));
                ret.Add((ExplodableDebrisScale, null));
                ret.Add((ExplodableDebrisCount, null));
                ret.Add((ExplodableDecalCount, null));
                ret.Add((SeverableExplosion, null));
                ret.Add((SeverableDebris, null));
                ret.Add((SeverableImpactDataSet, null));
                ret.Add((ExplodableExplosion, null));
                ret.Add((ExplodableDebris, null));
                ret.Add((ExplodableImpactDataSet, null));
                ret.Add((OnCrippleDebrisCount, null));
                ret.Add((OnCrippleDecalCount, null));
                ret.Add((OnCrippleExplosion, null));
                ret.Add((OnCrippleDebris, null));
                ret.Add((OnCrippleImpactDataSet, null));
                ret.Add((ExplodableSubsegmentExplosion, null));
                ret.Add((DATADataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Race_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => RaceCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RaceSetterCommon.Instance.RemapLinks(this, mapping);
        public Race(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private Race(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal Race(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Race(IFallout4Mod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Race(IFallout4Mod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Race>.ToString(this);
        }

        protected override Type LinkType => typeof(IRace);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        [Flags]
        public enum DATADataType
        {
        }
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IRaceGetter rhs) return false;
            return ((RaceCommon)((IRaceGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IRaceGetter? obj)
        {
            return ((RaceCommon)((IRaceGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((RaceCommon)((IRaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => RaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((RaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Race CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new Race();
            ((RaceSetterCommon)((IRaceGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Race item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((RaceSetterCommon)((IRaceGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Race GetNew()
        {
            return new Race();
        }

    }
    #endregion

    #region Interface
    public partial interface IRace :
        IFallout4MajorRecordInternal,
        IFormLinkContainer,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IRaceInternal>,
        INamed,
        INamedRequired,
        IRaceGetter,
        IRelatable
    {
        new IFormLinkNullable<IAnimationSoundTagSetGetter> AnimationSound { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        new String? Name { get; set; }
        new TranslatedString Description { get; set; }
        new ExtendedList<IFormLinkGetter<ISpellRecordGetter>>? ActorEffect { get; set; }
        new IFormLinkNullable<IArmorGetter> Skin { get; set; }
        new BipedBodyTemplate? BipedBodyTemplate { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new Properties? Properties { get; set; }
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? AttachParentSlots { get; set; }
        new IGenderedItem<Single> Height { get; set; }
        new IGenderedItem<Single> DefaultWeight { get; set; }
        new Race.Flag Flags { get; set; }
        new Single AccelerationRate { get; set; }
        new Single DecelerationRate { get; set; }
        new Size Size { get; set; }
        new MemorySlice<Byte> Unknown { get; set; }
        new Single InjuredHealthPercent { get; set; }
        new BipedObject ShieldBipedObject { get; set; }
        new BipedObject BearddBipedObject { get; set; }
        new BipedObject BodyBipedObject { get; set; }
        new Single AimAngleTolerance { get; set; }
        new Single FlightRadius { get; set; }
        new Single AngularAccelerationRate { get; set; }
        new Single AngularTolerance { get; set; }
        new Race.Flag2 Flags2 { get; set; }
        new MemorySlice<Byte> Unknown2 { get; set; }
        new BipedObject PipboyBipedObject { get; set; }
        new Int16 XPValue { get; set; }
        new Single SeverableDebrisScale { get; set; }
        new Byte SeverableDebrisCount { get; set; }
        new Byte SeverableDecalCount { get; set; }
        new Single ExplodableDebrisScale { get; set; }
        new Byte ExplodableDebrisCount { get; set; }
        new Byte ExplodableDecalCount { get; set; }
        new IFormLink<IExplosionGetter> SeverableExplosion { get; set; }
        new IFormLink<IDebrisGetter> SeverableDebris { get; set; }
        new IFormLink<IImpactDataSetGetter> SeverableImpactDataSet { get; set; }
        new IFormLink<IExplosionGetter> ExplodableExplosion { get; set; }
        new IFormLink<IDebrisGetter> ExplodableDebris { get; set; }
        new IFormLink<IImpactDataSetGetter> ExplodableImpactDataSet { get; set; }
        new Byte OnCrippleDebrisCount { get; set; }
        new Byte OnCrippleDecalCount { get; set; }
        new IFormLink<IExplosionGetter> OnCrippleExplosion { get; set; }
        new IFormLink<IDebrisGetter> OnCrippleDebris { get; set; }
        new IFormLink<IImpactDataSetGetter> OnCrippleImpactDataSet { get; set; }
        new IFormLink<IExplosionGetter> ExplodableSubsegmentExplosion { get; set; }
        new Race.DATADataType DATADataTypeState { get; set; }
        #region Mutagen
        new Race.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IRaceInternal :
        IFallout4MajorRecordInternal,
        IRace,
        IRaceGetter
    {
        new IGenderedItem<Single> Height { get; set; }
        new IGenderedItem<Single> DefaultWeight { get; set; }
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.RACE)]
    public partial interface IRaceGetter :
        IFallout4MajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IRaceGetter>,
        IMapsToGetter<IRaceGetter>,
        INamedGetter,
        INamedRequiredGetter,
        IRelatableGetter
    {
        static new ILoquiRegistration StaticRegistration => Race_Registration.Instance;
        IFormLinkNullableGetter<IAnimationSoundTagSetGetter> AnimationSound { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter
        /// </summary>
        String? Name { get; }
        #endregion
        ITranslatedStringGetter Description { get; }
        IReadOnlyList<IFormLinkGetter<ISpellRecordGetter>>? ActorEffect { get; }
        IFormLinkNullableGetter<IArmorGetter> Skin { get; }
        IBipedBodyTemplateGetter? BipedBodyTemplate { get; }
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        IPropertiesGetter? Properties { get; }
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? AttachParentSlots { get; }
        IGenderedItemGetter<Single> Height { get; }
        IGenderedItemGetter<Single> DefaultWeight { get; }
        Race.Flag Flags { get; }
        Single AccelerationRate { get; }
        Single DecelerationRate { get; }
        Size Size { get; }
        ReadOnlyMemorySlice<Byte> Unknown { get; }
        Single InjuredHealthPercent { get; }
        BipedObject ShieldBipedObject { get; }
        BipedObject BearddBipedObject { get; }
        BipedObject BodyBipedObject { get; }
        Single AimAngleTolerance { get; }
        Single FlightRadius { get; }
        Single AngularAccelerationRate { get; }
        Single AngularTolerance { get; }
        Race.Flag2 Flags2 { get; }
        ReadOnlyMemorySlice<Byte> Unknown2 { get; }
        BipedObject PipboyBipedObject { get; }
        Int16 XPValue { get; }
        Single SeverableDebrisScale { get; }
        Byte SeverableDebrisCount { get; }
        Byte SeverableDecalCount { get; }
        Single ExplodableDebrisScale { get; }
        Byte ExplodableDebrisCount { get; }
        Byte ExplodableDecalCount { get; }
        IFormLinkGetter<IExplosionGetter> SeverableExplosion { get; }
        IFormLinkGetter<IDebrisGetter> SeverableDebris { get; }
        IFormLinkGetter<IImpactDataSetGetter> SeverableImpactDataSet { get; }
        IFormLinkGetter<IExplosionGetter> ExplodableExplosion { get; }
        IFormLinkGetter<IDebrisGetter> ExplodableDebris { get; }
        IFormLinkGetter<IImpactDataSetGetter> ExplodableImpactDataSet { get; }
        Byte OnCrippleDebrisCount { get; }
        Byte OnCrippleDecalCount { get; }
        IFormLinkGetter<IExplosionGetter> OnCrippleExplosion { get; }
        IFormLinkGetter<IDebrisGetter> OnCrippleDebris { get; }
        IFormLinkGetter<IImpactDataSetGetter> OnCrippleImpactDataSet { get; }
        IFormLinkGetter<IExplosionGetter> ExplodableSubsegmentExplosion { get; }
        Race.DATADataType DATADataTypeState { get; }

        #region Mutagen
        Race.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class RaceMixIn
    {
        public static void Clear(this IRaceInternal item)
        {
            ((RaceSetterCommon)((IRaceGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Race.Mask<bool> GetEqualsMask(
            this IRaceGetter item,
            IRaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRaceGetter item,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRaceGetter item,
            FileGeneration fg,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            ((RaceCommon)((IRaceGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IRaceGetter item,
            IRaceGetter rhs,
            Race.TranslationMask? equalsMask = null)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IRaceInternal lhs,
            IRaceGetter rhs,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RaceSetterTranslationCommon)((IRaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Race.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRaceInternal lhs,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RaceSetterTranslationCommon)((IRaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Race DeepCopy(
            this IRaceGetter item,
            Race.TranslationMask? copyMask = null)
        {
            return ((RaceSetterTranslationCommon)((IRaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Race DeepCopy(
            this IRaceGetter item,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? copyMask = null)
        {
            return ((RaceSetterTranslationCommon)((IRaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Race DeepCopy(
            this IRaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RaceSetterTranslationCommon)((IRaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Race Duplicate(
            this IRaceGetter item,
            FormKey formKey,
            Race.TranslationMask? copyMask = null)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IRaceInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((RaceSetterCommon)((IRaceGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Race_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        AnimationSound = 6,
        Name = 7,
        Description = 8,
        ActorEffect = 9,
        Skin = 10,
        BipedBodyTemplate = 11,
        Keywords = 12,
        Properties = 13,
        AttachParentSlots = 14,
        Height = 15,
        DefaultWeight = 16,
        Flags = 17,
        AccelerationRate = 18,
        DecelerationRate = 19,
        Size = 20,
        Unknown = 21,
        InjuredHealthPercent = 22,
        ShieldBipedObject = 23,
        BearddBipedObject = 24,
        BodyBipedObject = 25,
        AimAngleTolerance = 26,
        FlightRadius = 27,
        AngularAccelerationRate = 28,
        AngularTolerance = 29,
        Flags2 = 30,
        Unknown2 = 31,
        PipboyBipedObject = 32,
        XPValue = 33,
        SeverableDebrisScale = 34,
        SeverableDebrisCount = 35,
        SeverableDecalCount = 36,
        ExplodableDebrisScale = 37,
        ExplodableDebrisCount = 38,
        ExplodableDecalCount = 39,
        SeverableExplosion = 40,
        SeverableDebris = 41,
        SeverableImpactDataSet = 42,
        ExplodableExplosion = 43,
        ExplodableDebris = 44,
        ExplodableImpactDataSet = 45,
        OnCrippleDebrisCount = 46,
        OnCrippleDecalCount = 47,
        OnCrippleExplosion = 48,
        OnCrippleDebris = 49,
        OnCrippleImpactDataSet = 50,
        ExplodableSubsegmentExplosion = 51,
        DATADataTypeState = 52,
    }
    #endregion

    #region Registration
    public partial class Race_Registration : ILoquiRegistration
    {
        public static readonly Race_Registration Instance = new Race_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 88,
            version: 0);

        public const string GUID = "6aa2e080-6569-4300-86f2-cc15ca14e935";

        public const ushort AdditionalFieldCount = 47;

        public const ushort FieldCount = 53;

        public static readonly Type MaskType = typeof(Race.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Race.ErrorMask);

        public static readonly Type ClassType = typeof(Race);

        public static readonly Type GetterType = typeof(IRaceGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRace);

        public static readonly Type? InternalSetterType = typeof(IRaceInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Race";

        public const string Name = "Race";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.RACE;
        public static readonly Type BinaryWriteTranslation = typeof(RaceBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class RaceSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly RaceSetterCommon Instance = new RaceSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRaceInternal item)
        {
            ClearPartial();
            item.AnimationSound.Clear();
            item.Name = default;
            item.Description.Clear();
            item.ActorEffect = null;
            item.Skin.Clear();
            item.BipedBodyTemplate = null;
            item.Keywords = null;
            item.Properties = null;
            item.AttachParentSlots = null;
            item.Height.Male = default;
            item.Height.Female = default;
            item.DefaultWeight.Male = default;
            item.DefaultWeight.Female = default;
            item.Flags = default;
            item.AccelerationRate = default;
            item.DecelerationRate = default;
            item.Size = default;
            item.Unknown = new byte[16];
            item.InjuredHealthPercent = default;
            item.ShieldBipedObject = Race._ShieldBipedObject_Default;
            item.BearddBipedObject = Race._BearddBipedObject_Default;
            item.BodyBipedObject = Race._BodyBipedObject_Default;
            item.AimAngleTolerance = default;
            item.FlightRadius = default;
            item.AngularAccelerationRate = default;
            item.AngularTolerance = default;
            item.Flags2 = default;
            item.Unknown2 = new byte[72];
            item.PipboyBipedObject = Race._PipboyBipedObject_Default;
            item.XPValue = default;
            item.SeverableDebrisScale = default;
            item.SeverableDebrisCount = default;
            item.SeverableDecalCount = default;
            item.ExplodableDebrisScale = default;
            item.ExplodableDebrisCount = default;
            item.ExplodableDecalCount = default;
            item.SeverableExplosion.Clear();
            item.SeverableDebris.Clear();
            item.SeverableImpactDataSet.Clear();
            item.ExplodableExplosion.Clear();
            item.ExplodableDebris.Clear();
            item.ExplodableImpactDataSet.Clear();
            item.OnCrippleDebrisCount = default;
            item.OnCrippleDecalCount = default;
            item.OnCrippleExplosion.Clear();
            item.OnCrippleDebris.Clear();
            item.OnCrippleImpactDataSet.Clear();
            item.ExplodableSubsegmentExplosion.Clear();
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IRaceInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IRaceInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IRace obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.AnimationSound.Relink(mapping);
            obj.ActorEffect?.RemapLinks(mapping);
            obj.Skin.Relink(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.AttachParentSlots?.RemapLinks(mapping);
            obj.SeverableExplosion.Relink(mapping);
            obj.SeverableDebris.Relink(mapping);
            obj.SeverableImpactDataSet.Relink(mapping);
            obj.ExplodableExplosion.Relink(mapping);
            obj.ExplodableDebris.Relink(mapping);
            obj.ExplodableImpactDataSet.Relink(mapping);
            obj.OnCrippleExplosion.Relink(mapping);
            obj.OnCrippleDebris.Relink(mapping);
            obj.OnCrippleImpactDataSet.Relink(mapping);
            obj.ExplodableSubsegmentExplosion.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IRaceInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.MajorRecordParse<IRaceInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: RaceBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: RaceBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (Race)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (Race)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    public partial class RaceCommon : Fallout4MajorRecordCommon
    {
        public new static readonly RaceCommon Instance = new RaceCommon();

        public Race.Mask<bool> GetEqualsMask(
            IRaceGetter item,
            IRaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Race.Mask<bool>(false);
            ((RaceCommon)((IRaceGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRaceGetter item,
            IRaceGetter rhs,
            Race.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.AnimationSound = item.AnimationSound.Equals(rhs.AnimationSound);
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.ActorEffect = item.ActorEffect.CollectionEqualsHelper(
                rhs.ActorEffect,
                (l, r) => object.Equals(l, r),
                include);
            ret.Skin = item.Skin.Equals(rhs.Skin);
            ret.BipedBodyTemplate = EqualsMaskHelper.EqualsHelper(
                item.BipedBodyTemplate,
                rhs.BipedBodyTemplate,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Properties = EqualsMaskHelper.EqualsHelper(
                item.Properties,
                rhs.Properties,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.AttachParentSlots = item.AttachParentSlots.CollectionEqualsHelper(
                rhs.AttachParentSlots,
                (l, r) => object.Equals(l, r),
                include);
            ret.Height = new GenderedItem<bool>(
                male: item.Height.Male.EqualsWithin(rhs.Height.Male),
                female: item.Height.Female.EqualsWithin(rhs.Height.Female));
            ret.DefaultWeight = new GenderedItem<bool>(
                male: item.DefaultWeight.Male.EqualsWithin(rhs.DefaultWeight.Male),
                female: item.DefaultWeight.Female.EqualsWithin(rhs.DefaultWeight.Female));
            ret.Flags = item.Flags == rhs.Flags;
            ret.AccelerationRate = item.AccelerationRate.EqualsWithin(rhs.AccelerationRate);
            ret.DecelerationRate = item.DecelerationRate.EqualsWithin(rhs.DecelerationRate);
            ret.Size = item.Size == rhs.Size;
            ret.Unknown = MemoryExtensions.SequenceEqual(item.Unknown.Span, rhs.Unknown.Span);
            ret.InjuredHealthPercent = item.InjuredHealthPercent.EqualsWithin(rhs.InjuredHealthPercent);
            ret.ShieldBipedObject = item.ShieldBipedObject == rhs.ShieldBipedObject;
            ret.BearddBipedObject = item.BearddBipedObject == rhs.BearddBipedObject;
            ret.BodyBipedObject = item.BodyBipedObject == rhs.BodyBipedObject;
            ret.AimAngleTolerance = item.AimAngleTolerance.EqualsWithin(rhs.AimAngleTolerance);
            ret.FlightRadius = item.FlightRadius.EqualsWithin(rhs.FlightRadius);
            ret.AngularAccelerationRate = item.AngularAccelerationRate.EqualsWithin(rhs.AngularAccelerationRate);
            ret.AngularTolerance = item.AngularTolerance.EqualsWithin(rhs.AngularTolerance);
            ret.Flags2 = item.Flags2 == rhs.Flags2;
            ret.Unknown2 = MemoryExtensions.SequenceEqual(item.Unknown2.Span, rhs.Unknown2.Span);
            ret.PipboyBipedObject = item.PipboyBipedObject == rhs.PipboyBipedObject;
            ret.XPValue = item.XPValue == rhs.XPValue;
            ret.SeverableDebrisScale = item.SeverableDebrisScale.EqualsWithin(rhs.SeverableDebrisScale);
            ret.SeverableDebrisCount = item.SeverableDebrisCount == rhs.SeverableDebrisCount;
            ret.SeverableDecalCount = item.SeverableDecalCount == rhs.SeverableDecalCount;
            ret.ExplodableDebrisScale = item.ExplodableDebrisScale.EqualsWithin(rhs.ExplodableDebrisScale);
            ret.ExplodableDebrisCount = item.ExplodableDebrisCount == rhs.ExplodableDebrisCount;
            ret.ExplodableDecalCount = item.ExplodableDecalCount == rhs.ExplodableDecalCount;
            ret.SeverableExplosion = item.SeverableExplosion.Equals(rhs.SeverableExplosion);
            ret.SeverableDebris = item.SeverableDebris.Equals(rhs.SeverableDebris);
            ret.SeverableImpactDataSet = item.SeverableImpactDataSet.Equals(rhs.SeverableImpactDataSet);
            ret.ExplodableExplosion = item.ExplodableExplosion.Equals(rhs.ExplodableExplosion);
            ret.ExplodableDebris = item.ExplodableDebris.Equals(rhs.ExplodableDebris);
            ret.ExplodableImpactDataSet = item.ExplodableImpactDataSet.Equals(rhs.ExplodableImpactDataSet);
            ret.OnCrippleDebrisCount = item.OnCrippleDebrisCount == rhs.OnCrippleDebrisCount;
            ret.OnCrippleDecalCount = item.OnCrippleDecalCount == rhs.OnCrippleDecalCount;
            ret.OnCrippleExplosion = item.OnCrippleExplosion.Equals(rhs.OnCrippleExplosion);
            ret.OnCrippleDebris = item.OnCrippleDebris.Equals(rhs.OnCrippleDebris);
            ret.OnCrippleImpactDataSet = item.OnCrippleImpactDataSet.Equals(rhs.OnCrippleImpactDataSet);
            ret.ExplodableSubsegmentExplosion = item.ExplodableSubsegmentExplosion.Equals(rhs.ExplodableSubsegmentExplosion);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IRaceGetter item,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRaceGetter item,
            FileGeneration fg,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Race =>");
            }
            else
            {
                fg.AppendLine($"{name} (Race) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRaceGetter item,
            FileGeneration fg,
            Race.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.AnimationSound ?? true)
            {
                fg.AppendItem(item.AnimationSound.FormKeyNullable, "AnimationSound");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                fg.AppendItem(NameItem, "Name");
            }
            if (printMask?.Description ?? true)
            {
                fg.AppendItem(item.Description, "Description");
            }
            if ((printMask?.ActorEffect?.Overall ?? true)
                && item.ActorEffect is {} ActorEffectItem)
            {
                fg.AppendLine("ActorEffect =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in ActorEffectItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Skin ?? true)
            {
                fg.AppendItem(item.Skin.FormKeyNullable, "Skin");
            }
            if ((printMask?.BipedBodyTemplate?.Overall ?? true)
                && item.BipedBodyTemplate is {} BipedBodyTemplateItem)
            {
                BipedBodyTemplateItem?.ToString(fg, "BipedBodyTemplate");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                fg.AppendLine("Keywords =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Properties?.Overall ?? true)
                && item.Properties is {} PropertiesItem)
            {
                PropertiesItem?.ToString(fg, "Properties");
            }
            if ((printMask?.AttachParentSlots?.Overall ?? true)
                && item.AttachParentSlots is {} AttachParentSlotsItem)
            {
                fg.AppendLine("AttachParentSlots =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in AttachParentSlotsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (true)
            {
                item.Height.ToString(fg, "Height");
            }
            if (true)
            {
                item.DefaultWeight.ToString(fg, "DefaultWeight");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.AccelerationRate ?? true)
            {
                fg.AppendItem(item.AccelerationRate, "AccelerationRate");
            }
            if (printMask?.DecelerationRate ?? true)
            {
                fg.AppendItem(item.DecelerationRate, "DecelerationRate");
            }
            if (printMask?.Size ?? true)
            {
                fg.AppendItem(item.Size, "Size");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendLine($"Unknown => {SpanExt.ToHexString(item.Unknown)}");
            }
            if (printMask?.InjuredHealthPercent ?? true)
            {
                fg.AppendItem(item.InjuredHealthPercent, "InjuredHealthPercent");
            }
            if (printMask?.ShieldBipedObject ?? true)
            {
                fg.AppendItem(item.ShieldBipedObject, "ShieldBipedObject");
            }
            if (printMask?.BearddBipedObject ?? true)
            {
                fg.AppendItem(item.BearddBipedObject, "BearddBipedObject");
            }
            if (printMask?.BodyBipedObject ?? true)
            {
                fg.AppendItem(item.BodyBipedObject, "BodyBipedObject");
            }
            if (printMask?.AimAngleTolerance ?? true)
            {
                fg.AppendItem(item.AimAngleTolerance, "AimAngleTolerance");
            }
            if (printMask?.FlightRadius ?? true)
            {
                fg.AppendItem(item.FlightRadius, "FlightRadius");
            }
            if (printMask?.AngularAccelerationRate ?? true)
            {
                fg.AppendItem(item.AngularAccelerationRate, "AngularAccelerationRate");
            }
            if (printMask?.AngularTolerance ?? true)
            {
                fg.AppendItem(item.AngularTolerance, "AngularTolerance");
            }
            if (printMask?.Flags2 ?? true)
            {
                fg.AppendItem(item.Flags2, "Flags2");
            }
            if (printMask?.Unknown2 ?? true)
            {
                fg.AppendLine($"Unknown2 => {SpanExt.ToHexString(item.Unknown2)}");
            }
            if (printMask?.PipboyBipedObject ?? true)
            {
                fg.AppendItem(item.PipboyBipedObject, "PipboyBipedObject");
            }
            if (printMask?.XPValue ?? true)
            {
                fg.AppendItem(item.XPValue, "XPValue");
            }
            if (printMask?.SeverableDebrisScale ?? true)
            {
                fg.AppendItem(item.SeverableDebrisScale, "SeverableDebrisScale");
            }
            if (printMask?.SeverableDebrisCount ?? true)
            {
                fg.AppendItem(item.SeverableDebrisCount, "SeverableDebrisCount");
            }
            if (printMask?.SeverableDecalCount ?? true)
            {
                fg.AppendItem(item.SeverableDecalCount, "SeverableDecalCount");
            }
            if (printMask?.ExplodableDebrisScale ?? true)
            {
                fg.AppendItem(item.ExplodableDebrisScale, "ExplodableDebrisScale");
            }
            if (printMask?.ExplodableDebrisCount ?? true)
            {
                fg.AppendItem(item.ExplodableDebrisCount, "ExplodableDebrisCount");
            }
            if (printMask?.ExplodableDecalCount ?? true)
            {
                fg.AppendItem(item.ExplodableDecalCount, "ExplodableDecalCount");
            }
            if (printMask?.SeverableExplosion ?? true)
            {
                fg.AppendItem(item.SeverableExplosion.FormKey, "SeverableExplosion");
            }
            if (printMask?.SeverableDebris ?? true)
            {
                fg.AppendItem(item.SeverableDebris.FormKey, "SeverableDebris");
            }
            if (printMask?.SeverableImpactDataSet ?? true)
            {
                fg.AppendItem(item.SeverableImpactDataSet.FormKey, "SeverableImpactDataSet");
            }
            if (printMask?.ExplodableExplosion ?? true)
            {
                fg.AppendItem(item.ExplodableExplosion.FormKey, "ExplodableExplosion");
            }
            if (printMask?.ExplodableDebris ?? true)
            {
                fg.AppendItem(item.ExplodableDebris.FormKey, "ExplodableDebris");
            }
            if (printMask?.ExplodableImpactDataSet ?? true)
            {
                fg.AppendItem(item.ExplodableImpactDataSet.FormKey, "ExplodableImpactDataSet");
            }
            if (printMask?.OnCrippleDebrisCount ?? true)
            {
                fg.AppendItem(item.OnCrippleDebrisCount, "OnCrippleDebrisCount");
            }
            if (printMask?.OnCrippleDecalCount ?? true)
            {
                fg.AppendItem(item.OnCrippleDecalCount, "OnCrippleDecalCount");
            }
            if (printMask?.OnCrippleExplosion ?? true)
            {
                fg.AppendItem(item.OnCrippleExplosion.FormKey, "OnCrippleExplosion");
            }
            if (printMask?.OnCrippleDebris ?? true)
            {
                fg.AppendItem(item.OnCrippleDebris.FormKey, "OnCrippleDebris");
            }
            if (printMask?.OnCrippleImpactDataSet ?? true)
            {
                fg.AppendItem(item.OnCrippleImpactDataSet.FormKey, "OnCrippleImpactDataSet");
            }
            if (printMask?.ExplodableSubsegmentExplosion ?? true)
            {
                fg.AppendItem(item.ExplodableSubsegmentExplosion.FormKey, "ExplodableSubsegmentExplosion");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public static Race_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Race_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Race_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Race_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Race_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Race_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Race_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Race_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Race_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRaceGetter? lhs,
            IRaceGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.AnimationSound) ?? true))
            {
                if (!lhs.AnimationSound.Equals(rhs.AnimationSound)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.Name) ?? true))
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.Description) ?? true))
            {
                if (!object.Equals(lhs.Description, rhs.Description)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.ActorEffect) ?? true))
            {
                if (!lhs.ActorEffect.SequenceEqualNullable(rhs.ActorEffect)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.Skin) ?? true))
            {
                if (!lhs.Skin.Equals(rhs.Skin)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.BipedBodyTemplate) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.BipedBodyTemplate, rhs.BipedBodyTemplate, out var lhsBipedBodyTemplate, out var rhsBipedBodyTemplate, out var isBipedBodyTemplateEqual))
                {
                    if (!((BipedBodyTemplateCommon)((IBipedBodyTemplateGetter)lhsBipedBodyTemplate).CommonInstance()!).Equals(lhsBipedBodyTemplate, rhsBipedBodyTemplate, crystal?.GetSubCrystal((int)Race_FieldIndex.BipedBodyTemplate))) return false;
                }
                else if (!isBipedBodyTemplateEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.Properties) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Properties, rhs.Properties, out var lhsProperties, out var rhsProperties, out var isPropertiesEqual))
                {
                    if (!((PropertiesCommon)((IPropertiesGetter)lhsProperties).CommonInstance()!).Equals(lhsProperties, rhsProperties, crystal?.GetSubCrystal((int)Race_FieldIndex.Properties))) return false;
                }
                else if (!isPropertiesEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.AttachParentSlots) ?? true))
            {
                if (!lhs.AttachParentSlots.SequenceEqualNullable(rhs.AttachParentSlots)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.Height) ?? true))
            {
                if (!Equals(lhs.Height, rhs.Height)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.DefaultWeight) ?? true))
            {
                if (!Equals(lhs.DefaultWeight, rhs.DefaultWeight)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.AccelerationRate) ?? true))
            {
                if (!lhs.AccelerationRate.EqualsWithin(rhs.AccelerationRate)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.DecelerationRate) ?? true))
            {
                if (!lhs.DecelerationRate.EqualsWithin(rhs.DecelerationRate)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.Size) ?? true))
            {
                if (lhs.Size != rhs.Size) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.Unknown) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.Unknown.Span, rhs.Unknown.Span)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.InjuredHealthPercent) ?? true))
            {
                if (!lhs.InjuredHealthPercent.EqualsWithin(rhs.InjuredHealthPercent)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.ShieldBipedObject) ?? true))
            {
                if (lhs.ShieldBipedObject != rhs.ShieldBipedObject) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.BearddBipedObject) ?? true))
            {
                if (lhs.BearddBipedObject != rhs.BearddBipedObject) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.BodyBipedObject) ?? true))
            {
                if (lhs.BodyBipedObject != rhs.BodyBipedObject) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.AimAngleTolerance) ?? true))
            {
                if (!lhs.AimAngleTolerance.EqualsWithin(rhs.AimAngleTolerance)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.FlightRadius) ?? true))
            {
                if (!lhs.FlightRadius.EqualsWithin(rhs.FlightRadius)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.AngularAccelerationRate) ?? true))
            {
                if (!lhs.AngularAccelerationRate.EqualsWithin(rhs.AngularAccelerationRate)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.AngularTolerance) ?? true))
            {
                if (!lhs.AngularTolerance.EqualsWithin(rhs.AngularTolerance)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.Flags2) ?? true))
            {
                if (lhs.Flags2 != rhs.Flags2) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.Unknown2) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.Unknown2.Span, rhs.Unknown2.Span)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.PipboyBipedObject) ?? true))
            {
                if (lhs.PipboyBipedObject != rhs.PipboyBipedObject) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.XPValue) ?? true))
            {
                if (lhs.XPValue != rhs.XPValue) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.SeverableDebrisScale) ?? true))
            {
                if (!lhs.SeverableDebrisScale.EqualsWithin(rhs.SeverableDebrisScale)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.SeverableDebrisCount) ?? true))
            {
                if (lhs.SeverableDebrisCount != rhs.SeverableDebrisCount) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.SeverableDecalCount) ?? true))
            {
                if (lhs.SeverableDecalCount != rhs.SeverableDecalCount) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.ExplodableDebrisScale) ?? true))
            {
                if (!lhs.ExplodableDebrisScale.EqualsWithin(rhs.ExplodableDebrisScale)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.ExplodableDebrisCount) ?? true))
            {
                if (lhs.ExplodableDebrisCount != rhs.ExplodableDebrisCount) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.ExplodableDecalCount) ?? true))
            {
                if (lhs.ExplodableDecalCount != rhs.ExplodableDecalCount) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.SeverableExplosion) ?? true))
            {
                if (!lhs.SeverableExplosion.Equals(rhs.SeverableExplosion)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.SeverableDebris) ?? true))
            {
                if (!lhs.SeverableDebris.Equals(rhs.SeverableDebris)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.SeverableImpactDataSet) ?? true))
            {
                if (!lhs.SeverableImpactDataSet.Equals(rhs.SeverableImpactDataSet)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.ExplodableExplosion) ?? true))
            {
                if (!lhs.ExplodableExplosion.Equals(rhs.ExplodableExplosion)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.ExplodableDebris) ?? true))
            {
                if (!lhs.ExplodableDebris.Equals(rhs.ExplodableDebris)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.ExplodableImpactDataSet) ?? true))
            {
                if (!lhs.ExplodableImpactDataSet.Equals(rhs.ExplodableImpactDataSet)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.OnCrippleDebrisCount) ?? true))
            {
                if (lhs.OnCrippleDebrisCount != rhs.OnCrippleDebrisCount) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.OnCrippleDecalCount) ?? true))
            {
                if (lhs.OnCrippleDecalCount != rhs.OnCrippleDecalCount) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.OnCrippleExplosion) ?? true))
            {
                if (!lhs.OnCrippleExplosion.Equals(rhs.OnCrippleExplosion)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.OnCrippleDebris) ?? true))
            {
                if (!lhs.OnCrippleDebris.Equals(rhs.OnCrippleDebris)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.OnCrippleImpactDataSet) ?? true))
            {
                if (!lhs.OnCrippleImpactDataSet.Equals(rhs.OnCrippleImpactDataSet)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.ExplodableSubsegmentExplosion) ?? true))
            {
                if (!lhs.ExplodableSubsegmentExplosion.Equals(rhs.ExplodableSubsegmentExplosion)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Race_FieldIndex.DATADataTypeState) ?? true))
            {
                if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IRaceGetter?)lhs,
                rhs: rhs as IRaceGetter,
                crystal: crystal);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IRaceGetter?)lhs,
                rhs: rhs as IRaceGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(IRaceGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.AnimationSound);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Description);
            hash.Add(item.ActorEffect);
            hash.Add(item.Skin);
            if (item.BipedBodyTemplate is {} BipedBodyTemplateitem)
            {
                hash.Add(BipedBodyTemplateitem);
            }
            hash.Add(item.Keywords);
            if (item.Properties is {} Propertiesitem)
            {
                hash.Add(Propertiesitem);
            }
            hash.Add(item.AttachParentSlots);
            hash.Add(HashCode.Combine(item.Height.Male, item.Height.Female));
            hash.Add(HashCode.Combine(item.DefaultWeight.Male, item.DefaultWeight.Female));
            hash.Add(item.Flags);
            hash.Add(item.AccelerationRate);
            hash.Add(item.DecelerationRate);
            hash.Add(item.Size);
            hash.Add(item.Unknown);
            hash.Add(item.InjuredHealthPercent);
            hash.Add(item.ShieldBipedObject);
            hash.Add(item.BearddBipedObject);
            hash.Add(item.BodyBipedObject);
            hash.Add(item.AimAngleTolerance);
            hash.Add(item.FlightRadius);
            hash.Add(item.AngularAccelerationRate);
            hash.Add(item.AngularTolerance);
            hash.Add(item.Flags2);
            hash.Add(item.Unknown2);
            hash.Add(item.PipboyBipedObject);
            hash.Add(item.XPValue);
            hash.Add(item.SeverableDebrisScale);
            hash.Add(item.SeverableDebrisCount);
            hash.Add(item.SeverableDecalCount);
            hash.Add(item.ExplodableDebrisScale);
            hash.Add(item.ExplodableDebrisCount);
            hash.Add(item.ExplodableDecalCount);
            hash.Add(item.SeverableExplosion);
            hash.Add(item.SeverableDebris);
            hash.Add(item.SeverableImpactDataSet);
            hash.Add(item.ExplodableExplosion);
            hash.Add(item.ExplodableDebris);
            hash.Add(item.ExplodableImpactDataSet);
            hash.Add(item.OnCrippleDebrisCount);
            hash.Add(item.OnCrippleDecalCount);
            hash.Add(item.OnCrippleExplosion);
            hash.Add(item.OnCrippleDebris);
            hash.Add(item.OnCrippleImpactDataSet);
            hash.Add(item.ExplodableSubsegmentExplosion);
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IRaceGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IRaceGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Race.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IRaceGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.AnimationSound.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.AnimationSound);
            }
            if (obj.ActorEffect is {} ActorEffectItem)
            {
                foreach (var item in ActorEffectItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Skin.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Skin);
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.AttachParentSlots is {} AttachParentSlotsItem)
            {
                foreach (var item in AttachParentSlotsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield return FormLinkInformation.Factory(obj.SeverableExplosion);
            yield return FormLinkInformation.Factory(obj.SeverableDebris);
            yield return FormLinkInformation.Factory(obj.SeverableImpactDataSet);
            yield return FormLinkInformation.Factory(obj.ExplodableExplosion);
            yield return FormLinkInformation.Factory(obj.ExplodableDebris);
            yield return FormLinkInformation.Factory(obj.ExplodableImpactDataSet);
            yield return FormLinkInformation.Factory(obj.OnCrippleExplosion);
            yield return FormLinkInformation.Factory(obj.OnCrippleDebris);
            yield return FormLinkInformation.Factory(obj.OnCrippleImpactDataSet);
            yield return FormLinkInformation.Factory(obj.ExplodableSubsegmentExplosion);
            yield break;
        }
        
        #region Duplicate
        public Race Duplicate(
            IRaceGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Race(formKey);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IRaceGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IRaceGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class RaceSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly RaceSetterTranslationCommon Instance = new RaceSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IRaceInternal item,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IRace item,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.AnimationSound) ?? true))
            {
                item.AnimationSound.SetTo(rhs.AnimationSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ActorEffect) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.ActorEffect);
                try
                {
                    if ((rhs.ActorEffect != null))
                    {
                        item.ActorEffect = 
                            rhs.ActorEffect
                            .Select(r => (IFormLinkGetter<ISpellRecordGetter>)new FormLink<ISpellRecordGetter>(r.FormKey))
                            .ToExtendedList<IFormLinkGetter<ISpellRecordGetter>>();
                    }
                    else
                    {
                        item.ActorEffect = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Skin) ?? true))
            {
                item.Skin.SetTo(rhs.Skin.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BipedBodyTemplate) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.BipedBodyTemplate);
                try
                {
                    if(rhs.BipedBodyTemplate is {} rhsBipedBodyTemplate)
                    {
                        item.BipedBodyTemplate = rhsBipedBodyTemplate.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Race_FieldIndex.BipedBodyTemplate));
                    }
                    else
                    {
                        item.BipedBodyTemplate = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                            .Select(r => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(r.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Properties) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Properties);
                try
                {
                    if(rhs.Properties is {} rhsProperties)
                    {
                        item.Properties = rhsProperties.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Race_FieldIndex.Properties));
                    }
                    else
                    {
                        item.Properties = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.AttachParentSlots) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.AttachParentSlots);
                try
                {
                    if ((rhs.AttachParentSlots != null))
                    {
                        item.AttachParentSlots = 
                            rhs.AttachParentSlots
                            .Select(r => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(r.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.AttachParentSlots = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            item.Height = new GenderedItem<Single>(
                male: rhs.Height.Male,
                female: rhs.Height.Female);
            item.DefaultWeight = new GenderedItem<Single>(
                male: rhs.DefaultWeight.Male,
                female: rhs.DefaultWeight.Female);
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.AccelerationRate) ?? true))
            {
                item.AccelerationRate = rhs.AccelerationRate;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.DecelerationRate) ?? true))
            {
                item.DecelerationRate = rhs.DecelerationRate;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Size) ?? true))
            {
                item.Size = rhs.Size;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.InjuredHealthPercent) ?? true))
            {
                item.InjuredHealthPercent = rhs.InjuredHealthPercent;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ShieldBipedObject) ?? true))
            {
                item.ShieldBipedObject = rhs.ShieldBipedObject;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BearddBipedObject) ?? true))
            {
                item.BearddBipedObject = rhs.BearddBipedObject;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BodyBipedObject) ?? true))
            {
                item.BodyBipedObject = rhs.BodyBipedObject;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.AimAngleTolerance) ?? true))
            {
                item.AimAngleTolerance = rhs.AimAngleTolerance;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FlightRadius) ?? true))
            {
                item.FlightRadius = rhs.FlightRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.AngularAccelerationRate) ?? true))
            {
                item.AngularAccelerationRate = rhs.AngularAccelerationRate;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.AngularTolerance) ?? true))
            {
                item.AngularTolerance = rhs.AngularTolerance;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Flags2) ?? true))
            {
                item.Flags2 = rhs.Flags2;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.PipboyBipedObject) ?? true))
            {
                item.PipboyBipedObject = rhs.PipboyBipedObject;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.XPValue) ?? true))
            {
                item.XPValue = rhs.XPValue;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SeverableDebrisScale) ?? true))
            {
                item.SeverableDebrisScale = rhs.SeverableDebrisScale;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SeverableDebrisCount) ?? true))
            {
                item.SeverableDebrisCount = rhs.SeverableDebrisCount;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SeverableDecalCount) ?? true))
            {
                item.SeverableDecalCount = rhs.SeverableDecalCount;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ExplodableDebrisScale) ?? true))
            {
                item.ExplodableDebrisScale = rhs.ExplodableDebrisScale;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ExplodableDebrisCount) ?? true))
            {
                item.ExplodableDebrisCount = rhs.ExplodableDebrisCount;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ExplodableDecalCount) ?? true))
            {
                item.ExplodableDecalCount = rhs.ExplodableDecalCount;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SeverableExplosion) ?? true))
            {
                item.SeverableExplosion.SetTo(rhs.SeverableExplosion.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SeverableDebris) ?? true))
            {
                item.SeverableDebris.SetTo(rhs.SeverableDebris.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SeverableImpactDataSet) ?? true))
            {
                item.SeverableImpactDataSet.SetTo(rhs.SeverableImpactDataSet.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ExplodableExplosion) ?? true))
            {
                item.ExplodableExplosion.SetTo(rhs.ExplodableExplosion.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ExplodableDebris) ?? true))
            {
                item.ExplodableDebris.SetTo(rhs.ExplodableDebris.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ExplodableImpactDataSet) ?? true))
            {
                item.ExplodableImpactDataSet.SetTo(rhs.ExplodableImpactDataSet.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.OnCrippleDebrisCount) ?? true))
            {
                item.OnCrippleDebrisCount = rhs.OnCrippleDebrisCount;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.OnCrippleDecalCount) ?? true))
            {
                item.OnCrippleDecalCount = rhs.OnCrippleDecalCount;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.OnCrippleExplosion) ?? true))
            {
                item.OnCrippleExplosion.SetTo(rhs.OnCrippleExplosion.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.OnCrippleDebris) ?? true))
            {
                item.OnCrippleDebris.SetTo(rhs.OnCrippleDebris.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.OnCrippleImpactDataSet) ?? true))
            {
                item.OnCrippleImpactDataSet.SetTo(rhs.OnCrippleImpactDataSet.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ExplodableSubsegmentExplosion) ?? true))
            {
                item.ExplodableSubsegmentExplosion.SetTo(rhs.ExplodableSubsegmentExplosion.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IRaceInternal)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IRace)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IRaceInternal)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IRace)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Race DeepCopy(
            IRaceGetter item,
            Race.TranslationMask? copyMask = null)
        {
            Race ret = (Race)((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetNew();
            ((RaceSetterTranslationCommon)((IRaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Race DeepCopy(
            IRaceGetter item,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Race ret = (Race)((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetNew();
            ((RaceSetterTranslationCommon)((IRaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Race.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Race DeepCopy(
            IRaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Race ret = (Race)((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetNew();
            ((RaceSetterTranslationCommon)((IRaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Race
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Race_Registration.Instance;
        public new static Race_Registration StaticRegistration => Race_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => RaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return RaceSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => RaceSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class RaceBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static RaceBinaryWriteTranslation Instance = new RaceBinaryWriteTranslation();

        public static void WriteEmbedded(
            IRaceGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IRaceGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AnimationSound,
                header: translationParams.ConvertToCustom(RecordTypes.STCP));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISpellRecordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.ActorEffect,
                counterType: RecordTypes.SPCT,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.SPLO),
                subRecordPerItem: true,
                transl: (MutagenWriter subWriter, IFormLinkGetter<ISpellRecordGetter> subItem, TypedWriteParams? conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Skin,
                header: translationParams.ConvertToCustom(RecordTypes.WNAM));
            if (item.BipedBodyTemplate is {} BipedBodyTemplateItem)
            {
                ((BipedBodyTemplateBinaryWriteTranslation)((IBinaryItem)BipedBodyTemplateItem).BinaryWriteTranslator).Write(
                    item: BipedBodyTemplateItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams? conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            if (item.Properties is {} PropertiesItem)
            {
                ((PropertiesBinaryWriteTranslation)((IBinaryItem)PropertiesItem).BinaryWriteTranslator).Write(
                    item: PropertiesItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Write(
                writer: writer,
                items: item.AttachParentSlots,
                recordType: translationParams.ConvertToCustom(RecordTypes.APPR),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams? conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DATA)))
            {
                GenderedItemBinaryTranslation.Write(
                    writer: writer,
                    item: item.Height,
                    transl: FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
                GenderedItemBinaryTranslation.Write(
                    writer: writer,
                    item: item.DefaultWeight,
                    transl: FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
                EnumBinaryTranslation<Race.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 4);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AccelerationRate);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.DecelerationRate);
                EnumBinaryTranslation<Size, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Size,
                    length: 4);
                ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Unknown);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.InjuredHealthPercent);
                EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.ShieldBipedObject,
                    length: 4);
                EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.BearddBipedObject,
                    length: 4);
                EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.BodyBipedObject,
                    length: 4);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AimAngleTolerance);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FlightRadius);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AngularAccelerationRate);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AngularTolerance);
                EnumBinaryTranslation<Race.Flag2, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Flags2,
                    length: 4);
                ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Unknown2);
                EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.PipboyBipedObject,
                    length: 4);
                writer.Write(item.XPValue);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.SeverableDebrisScale);
                writer.Write(item.SeverableDebrisCount);
                writer.Write(item.SeverableDecalCount);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ExplodableDebrisScale);
                writer.Write(item.ExplodableDebrisCount);
                writer.Write(item.ExplodableDecalCount);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.SeverableExplosion);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.SeverableDebris);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.SeverableImpactDataSet);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ExplodableExplosion);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ExplodableDebris);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ExplodableImpactDataSet);
                writer.Write(item.OnCrippleDebrisCount);
                writer.Write(item.OnCrippleDecalCount);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.OnCrippleExplosion);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.OnCrippleDebris);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.OnCrippleImpactDataSet);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ExplodableSubsegmentExplosion);
            }
        }

        public void Write(
            MutagenWriter writer,
            IRaceGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Record(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.RACE)))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        translationParams: translationParams);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Enrich(ex, item);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IRaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IRaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IRaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class RaceBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static RaceBinaryCreateTranslation Instance = new RaceBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.RACE;
        public static void FillBinaryStructs(
            IRaceInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IRaceInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.STCP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AnimationSound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.AnimationSound;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Race_FieldIndex.Name;
                }
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Race_FieldIndex.Description;
                }
                case RecordTypeInts.SPLO:
                case RecordTypeInts.SPCT:
                {
                    item.ActorEffect = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISpellRecordGetter>>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.SPCT),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.SPLO),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<ISpellRecordGetter>>();
                    return (int)Race_FieldIndex.ActorEffect;
                }
                case RecordTypeInts.WNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Skin.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.Skin;
                }
                case RecordTypeInts.BOD2:
                {
                    item.BipedBodyTemplate = Mutagen.Bethesda.Fallout4.BipedBodyTemplate.CreateFromBinary(frame: frame);
                    return (int)Race_FieldIndex.BipedBodyTemplate;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Race_FieldIndex.Keywords;
                }
                case RecordTypeInts.PRPS:
                {
                    item.Properties = Mutagen.Bethesda.Fallout4.Properties.CreateFromBinary(frame: frame);
                    return (int)Race_FieldIndex.Properties;
                }
                case RecordTypeInts.APPR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AttachParentSlots = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Race_FieldIndex.AttachParentSlots;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Height = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.Parse<Single>(
                        frame: frame,
                        transl: FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse);
                    item.DefaultWeight = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.Parse<Single>(
                        frame: frame,
                        transl: FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse);
                    item.Flags = EnumBinaryTranslation<Race.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    item.AccelerationRate = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    item.DecelerationRate = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    item.Size = EnumBinaryTranslation<Size, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    item.Unknown = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame.SpawnWithLength(16));
                    item.InjuredHealthPercent = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    item.ShieldBipedObject = EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    item.BearddBipedObject = EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    item.BodyBipedObject = EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    item.AimAngleTolerance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    item.FlightRadius = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    item.AngularAccelerationRate = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    item.AngularTolerance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    item.Flags2 = EnumBinaryTranslation<Race.Flag2, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    item.Unknown2 = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame.SpawnWithLength(72));
                    item.PipboyBipedObject = EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    item.XPValue = dataFrame.ReadInt16();
                    item.SeverableDebrisScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    item.SeverableDebrisCount = dataFrame.ReadUInt8();
                    item.SeverableDecalCount = dataFrame.ReadUInt8();
                    item.ExplodableDebrisScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    item.ExplodableDebrisCount = dataFrame.ReadUInt8();
                    item.ExplodableDecalCount = dataFrame.ReadUInt8();
                    item.SeverableExplosion.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    item.SeverableDebris.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    item.SeverableImpactDataSet.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    item.ExplodableExplosion.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    item.ExplodableDebris.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    item.ExplodableImpactDataSet.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    item.OnCrippleDebrisCount = dataFrame.ReadUInt8();
                    item.OnCrippleDecalCount = dataFrame.ReadUInt8();
                    item.OnCrippleExplosion.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    item.OnCrippleDebris.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    item.OnCrippleImpactDataSet.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    item.ExplodableSubsegmentExplosion.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.ExplodableSubsegmentExplosion;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class RaceBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class RaceBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IRaceGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Race_Registration.Instance;
        public new static Race_Registration StaticRegistration => Race_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => RaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => RaceSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => RaceCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => RaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((RaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IRace);

        public Race.MajorFlag MajorFlags => (Race.MajorFlag)this.MajorRecordFlagsRaw;

        #region AnimationSound
        private int? _AnimationSoundLocation;
        public IFormLinkNullableGetter<IAnimationSoundTagSetGetter> AnimationSound => _AnimationSoundLocation.HasValue ? new FormLinkNullable<IAnimationSoundTagSetGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _AnimationSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IAnimationSoundTagSetGetter>.Null;
        #endregion
        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants)) : default(string?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        #endregion
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.DL, _package.MetaData.StringsLookup) : TranslatedString.Empty;
        #endregion
        public IReadOnlyList<IFormLinkGetter<ISpellRecordGetter>>? ActorEffect { get; private set; }
        #region Skin
        private int? _SkinLocation;
        public IFormLinkNullableGetter<IArmorGetter> Skin => _SkinLocation.HasValue ? new FormLinkNullable<IArmorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _SkinLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IArmorGetter>.Null;
        #endregion
        #region BipedBodyTemplate
        private RangeInt32? _BipedBodyTemplateLocation;
        public IBipedBodyTemplateGetter? BipedBodyTemplate => _BipedBodyTemplateLocation.HasValue ? BipedBodyTemplateBinaryOverlay.BipedBodyTemplateFactory(new OverlayStream(_data.Slice(_BipedBodyTemplateLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #region Properties
        private RangeInt32? _PropertiesLocation;
        public IPropertiesGetter? Properties => _PropertiesLocation.HasValue ? PropertiesBinaryOverlay.PropertiesFactory(new OverlayStream(_data.Slice(_PropertiesLocation!.Value.Min), _package), _package) : default;
        #endregion
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? AttachParentSlots { get; private set; }
        private int? _DATALocation;
        public Race.DATADataType DATADataTypeState { get; private set; }
        #region Height
        private int _HeightLocation => _DATALocation!.Value;
        private bool _Height_IsSet => _DATALocation.HasValue;
        public IGenderedItemGetter<Single> Height
        {
            get
            {
                if (!_Height_IsSet) return new GenderedItem<Single>(default, default);
                var data = _data.Slice(_HeightLocation);
                return new GenderedItem<Single>(
                    data.Float(),
                    data.Slice(4).Float());
            }
        }
        #endregion
        #region DefaultWeight
        private int _DefaultWeightLocation => _DATALocation!.Value + 0x8;
        private bool _DefaultWeight_IsSet => _DATALocation.HasValue;
        public IGenderedItemGetter<Single> DefaultWeight
        {
            get
            {
                if (!_DefaultWeight_IsSet) return new GenderedItem<Single>(default, default);
                var data = _data.Slice(_DefaultWeightLocation);
                return new GenderedItem<Single>(
                    data.Float(),
                    data.Slice(4).Float());
            }
        }
        #endregion
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value + 0x10;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public Race.Flag Flags => _Flags_IsSet ? (Race.Flag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagsLocation, 0x4)) : default;
        #endregion
        #region AccelerationRate
        private int _AccelerationRateLocation => _DATALocation!.Value + 0x14;
        private bool _AccelerationRate_IsSet => _DATALocation.HasValue;
        public Single AccelerationRate => _AccelerationRate_IsSet ? _data.Slice(_AccelerationRateLocation, 4).Float() : default;
        #endregion
        #region DecelerationRate
        private int _DecelerationRateLocation => _DATALocation!.Value + 0x18;
        private bool _DecelerationRate_IsSet => _DATALocation.HasValue;
        public Single DecelerationRate => _DecelerationRate_IsSet ? _data.Slice(_DecelerationRateLocation, 4).Float() : default;
        #endregion
        #region Size
        private int _SizeLocation => _DATALocation!.Value + 0x1C;
        private bool _Size_IsSet => _DATALocation.HasValue;
        public Size Size => _Size_IsSet ? (Size)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_SizeLocation, 0x4)) : default;
        #endregion
        #region Unknown
        private int _UnknownLocation => _DATALocation!.Value + 0x20;
        private bool _Unknown_IsSet => _DATALocation.HasValue;
        public ReadOnlyMemorySlice<Byte> Unknown => _Unknown_IsSet ? _data.Span.Slice(_UnknownLocation, 16).ToArray() : default(ReadOnlyMemorySlice<byte>);
        #endregion
        #region InjuredHealthPercent
        private int _InjuredHealthPercentLocation => _DATALocation!.Value + 0x30;
        private bool _InjuredHealthPercent_IsSet => _DATALocation.HasValue;
        public Single InjuredHealthPercent => _InjuredHealthPercent_IsSet ? _data.Slice(_InjuredHealthPercentLocation, 4).Float() : default;
        #endregion
        #region ShieldBipedObject
        private int _ShieldBipedObjectLocation => _DATALocation!.Value + 0x34;
        private bool _ShieldBipedObject_IsSet => _DATALocation.HasValue;
        public BipedObject ShieldBipedObject => _ShieldBipedObject_IsSet ? (BipedObject)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_ShieldBipedObjectLocation, 0x4)) : default;
        #endregion
        #region BearddBipedObject
        private int _BearddBipedObjectLocation => _DATALocation!.Value + 0x38;
        private bool _BearddBipedObject_IsSet => _DATALocation.HasValue;
        public BipedObject BearddBipedObject => _BearddBipedObject_IsSet ? (BipedObject)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_BearddBipedObjectLocation, 0x4)) : default;
        #endregion
        #region BodyBipedObject
        private int _BodyBipedObjectLocation => _DATALocation!.Value + 0x3C;
        private bool _BodyBipedObject_IsSet => _DATALocation.HasValue;
        public BipedObject BodyBipedObject => _BodyBipedObject_IsSet ? (BipedObject)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_BodyBipedObjectLocation, 0x4)) : default;
        #endregion
        #region AimAngleTolerance
        private int _AimAngleToleranceLocation => _DATALocation!.Value + 0x40;
        private bool _AimAngleTolerance_IsSet => _DATALocation.HasValue;
        public Single AimAngleTolerance => _AimAngleTolerance_IsSet ? _data.Slice(_AimAngleToleranceLocation, 4).Float() : default;
        #endregion
        #region FlightRadius
        private int _FlightRadiusLocation => _DATALocation!.Value + 0x44;
        private bool _FlightRadius_IsSet => _DATALocation.HasValue;
        public Single FlightRadius => _FlightRadius_IsSet ? _data.Slice(_FlightRadiusLocation, 4).Float() : default;
        #endregion
        #region AngularAccelerationRate
        private int _AngularAccelerationRateLocation => _DATALocation!.Value + 0x48;
        private bool _AngularAccelerationRate_IsSet => _DATALocation.HasValue;
        public Single AngularAccelerationRate => _AngularAccelerationRate_IsSet ? _data.Slice(_AngularAccelerationRateLocation, 4).Float() : default;
        #endregion
        #region AngularTolerance
        private int _AngularToleranceLocation => _DATALocation!.Value + 0x4C;
        private bool _AngularTolerance_IsSet => _DATALocation.HasValue;
        public Single AngularTolerance => _AngularTolerance_IsSet ? _data.Slice(_AngularToleranceLocation, 4).Float() : default;
        #endregion
        #region Flags2
        private int _Flags2Location => _DATALocation!.Value + 0x50;
        private bool _Flags2_IsSet => _DATALocation.HasValue;
        public Race.Flag2 Flags2 => _Flags2_IsSet ? (Race.Flag2)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_Flags2Location, 0x4)) : default;
        #endregion
        #region Unknown2
        private int _Unknown2Location => _DATALocation!.Value + 0x54;
        private bool _Unknown2_IsSet => _DATALocation.HasValue;
        public ReadOnlyMemorySlice<Byte> Unknown2 => _Unknown2_IsSet ? _data.Span.Slice(_Unknown2Location, 72).ToArray() : default(ReadOnlyMemorySlice<byte>);
        #endregion
        #region PipboyBipedObject
        private int _PipboyBipedObjectLocation => _DATALocation!.Value + 0x9C;
        private bool _PipboyBipedObject_IsSet => _DATALocation.HasValue;
        public BipedObject PipboyBipedObject => _PipboyBipedObject_IsSet ? (BipedObject)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_PipboyBipedObjectLocation, 0x4)) : default;
        #endregion
        #region XPValue
        private int _XPValueLocation => _DATALocation!.Value + 0xA0;
        private bool _XPValue_IsSet => _DATALocation.HasValue;
        public Int16 XPValue => _XPValue_IsSet ? BinaryPrimitives.ReadInt16LittleEndian(_data.Slice(_XPValueLocation, 2)) : default;
        #endregion
        #region SeverableDebrisScale
        private int _SeverableDebrisScaleLocation => _DATALocation!.Value + 0xA2;
        private bool _SeverableDebrisScale_IsSet => _DATALocation.HasValue;
        public Single SeverableDebrisScale => _SeverableDebrisScale_IsSet ? _data.Slice(_SeverableDebrisScaleLocation, 4).Float() : default;
        #endregion
        #region SeverableDebrisCount
        private int _SeverableDebrisCountLocation => _DATALocation!.Value + 0xA6;
        private bool _SeverableDebrisCount_IsSet => _DATALocation.HasValue;
        public Byte SeverableDebrisCount => _SeverableDebrisCount_IsSet ? _data.Span[_SeverableDebrisCountLocation] : default;
        #endregion
        #region SeverableDecalCount
        private int _SeverableDecalCountLocation => _DATALocation!.Value + 0xA7;
        private bool _SeverableDecalCount_IsSet => _DATALocation.HasValue;
        public Byte SeverableDecalCount => _SeverableDecalCount_IsSet ? _data.Span[_SeverableDecalCountLocation] : default;
        #endregion
        #region ExplodableDebrisScale
        private int _ExplodableDebrisScaleLocation => _DATALocation!.Value + 0xA8;
        private bool _ExplodableDebrisScale_IsSet => _DATALocation.HasValue;
        public Single ExplodableDebrisScale => _ExplodableDebrisScale_IsSet ? _data.Slice(_ExplodableDebrisScaleLocation, 4).Float() : default;
        #endregion
        #region ExplodableDebrisCount
        private int _ExplodableDebrisCountLocation => _DATALocation!.Value + 0xAC;
        private bool _ExplodableDebrisCount_IsSet => _DATALocation.HasValue;
        public Byte ExplodableDebrisCount => _ExplodableDebrisCount_IsSet ? _data.Span[_ExplodableDebrisCountLocation] : default;
        #endregion
        #region ExplodableDecalCount
        private int _ExplodableDecalCountLocation => _DATALocation!.Value + 0xAD;
        private bool _ExplodableDecalCount_IsSet => _DATALocation.HasValue;
        public Byte ExplodableDecalCount => _ExplodableDecalCount_IsSet ? _data.Span[_ExplodableDecalCountLocation] : default;
        #endregion
        #region SeverableExplosion
        private int _SeverableExplosionLocation => _DATALocation!.Value + 0xAE;
        private bool _SeverableExplosion_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IExplosionGetter> SeverableExplosion => _SeverableExplosion_IsSet ? new FormLink<IExplosionGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_SeverableExplosionLocation, 0x4)))) : FormLink<IExplosionGetter>.Null;
        #endregion
        #region SeverableDebris
        private int _SeverableDebrisLocation => _DATALocation!.Value + 0xB2;
        private bool _SeverableDebris_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IDebrisGetter> SeverableDebris => _SeverableDebris_IsSet ? new FormLink<IDebrisGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_SeverableDebrisLocation, 0x4)))) : FormLink<IDebrisGetter>.Null;
        #endregion
        #region SeverableImpactDataSet
        private int _SeverableImpactDataSetLocation => _DATALocation!.Value + 0xB6;
        private bool _SeverableImpactDataSet_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IImpactDataSetGetter> SeverableImpactDataSet => _SeverableImpactDataSet_IsSet ? new FormLink<IImpactDataSetGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_SeverableImpactDataSetLocation, 0x4)))) : FormLink<IImpactDataSetGetter>.Null;
        #endregion
        #region ExplodableExplosion
        private int _ExplodableExplosionLocation => _DATALocation!.Value + 0xBA;
        private bool _ExplodableExplosion_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IExplosionGetter> ExplodableExplosion => _ExplodableExplosion_IsSet ? new FormLink<IExplosionGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_ExplodableExplosionLocation, 0x4)))) : FormLink<IExplosionGetter>.Null;
        #endregion
        #region ExplodableDebris
        private int _ExplodableDebrisLocation => _DATALocation!.Value + 0xBE;
        private bool _ExplodableDebris_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IDebrisGetter> ExplodableDebris => _ExplodableDebris_IsSet ? new FormLink<IDebrisGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_ExplodableDebrisLocation, 0x4)))) : FormLink<IDebrisGetter>.Null;
        #endregion
        #region ExplodableImpactDataSet
        private int _ExplodableImpactDataSetLocation => _DATALocation!.Value + 0xC2;
        private bool _ExplodableImpactDataSet_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IImpactDataSetGetter> ExplodableImpactDataSet => _ExplodableImpactDataSet_IsSet ? new FormLink<IImpactDataSetGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_ExplodableImpactDataSetLocation, 0x4)))) : FormLink<IImpactDataSetGetter>.Null;
        #endregion
        #region OnCrippleDebrisCount
        private int _OnCrippleDebrisCountLocation => _DATALocation!.Value + 0xC6;
        private bool _OnCrippleDebrisCount_IsSet => _DATALocation.HasValue;
        public Byte OnCrippleDebrisCount => _OnCrippleDebrisCount_IsSet ? _data.Span[_OnCrippleDebrisCountLocation] : default;
        #endregion
        #region OnCrippleDecalCount
        private int _OnCrippleDecalCountLocation => _DATALocation!.Value + 0xC7;
        private bool _OnCrippleDecalCount_IsSet => _DATALocation.HasValue;
        public Byte OnCrippleDecalCount => _OnCrippleDecalCount_IsSet ? _data.Span[_OnCrippleDecalCountLocation] : default;
        #endregion
        #region OnCrippleExplosion
        private int _OnCrippleExplosionLocation => _DATALocation!.Value + 0xC8;
        private bool _OnCrippleExplosion_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IExplosionGetter> OnCrippleExplosion => _OnCrippleExplosion_IsSet ? new FormLink<IExplosionGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_OnCrippleExplosionLocation, 0x4)))) : FormLink<IExplosionGetter>.Null;
        #endregion
        #region OnCrippleDebris
        private int _OnCrippleDebrisLocation => _DATALocation!.Value + 0xCC;
        private bool _OnCrippleDebris_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IDebrisGetter> OnCrippleDebris => _OnCrippleDebris_IsSet ? new FormLink<IDebrisGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_OnCrippleDebrisLocation, 0x4)))) : FormLink<IDebrisGetter>.Null;
        #endregion
        #region OnCrippleImpactDataSet
        private int _OnCrippleImpactDataSetLocation => _DATALocation!.Value + 0xD0;
        private bool _OnCrippleImpactDataSet_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IImpactDataSetGetter> OnCrippleImpactDataSet => _OnCrippleImpactDataSet_IsSet ? new FormLink<IImpactDataSetGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_OnCrippleImpactDataSetLocation, 0x4)))) : FormLink<IImpactDataSetGetter>.Null;
        #endregion
        #region ExplodableSubsegmentExplosion
        private int _ExplodableSubsegmentExplosionLocation => _DATALocation!.Value + 0xD4;
        private bool _ExplodableSubsegmentExplosion_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IExplosionGetter> ExplodableSubsegmentExplosion => _ExplodableSubsegmentExplosion_IsSet ? new FormLink<IExplosionGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_ExplodableSubsegmentExplosionLocation, 0x4)))) : FormLink<IExplosionGetter>.Null;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected RaceBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static RaceBinaryOverlay RaceFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            stream = PluginUtilityTranslation.DecompressStream(stream);
            var ret = new RaceBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static RaceBinaryOverlay RaceFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return RaceFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.STCP:
                {
                    _AnimationSoundLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.AnimationSound;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.Name;
                }
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.Description;
                }
                case RecordTypeInts.SPLO:
                case RecordTypeInts.SPCT:
                {
                    this.ActorEffect = BinaryOverlayList.FactoryByCountPerItem<IFormLinkGetter<ISpellRecordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.SPCT,
                        subrecordType: RecordTypes.SPLO,
                        getter: (s, p) => new FormLink<ISpellRecordGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    return (int)Race_FieldIndex.ActorEffect;
                }
                case RecordTypeInts.WNAM:
                {
                    _SkinLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.Skin;
                }
                case RecordTypeInts.BOD2:
                {
                    _BipedBodyTemplateLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Race_FieldIndex.BipedBodyTemplate;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        subrecordType: RecordTypes.KWDA,
                        getter: (s, p) => new FormLink<IKeywordGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    return (int)Race_FieldIndex.Keywords;
                }
                case RecordTypeInts.PRPS:
                {
                    _PropertiesLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Race_FieldIndex.Properties;
                }
                case RecordTypeInts.APPR:
                {
                    var subMeta = stream.ReadSubrecord();
                    var subLen = subMeta.ContentLength;
                    this.AttachParentSlots = BinaryOverlayList.FactoryByStartIndex<IFormLinkGetter<IKeywordGetter>>(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormLink<IKeywordGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return (int)Race_FieldIndex.AttachParentSlots;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)Race_FieldIndex.ExplodableSubsegmentExplosion;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RaceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Race>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IRaceGetter rhs) return false;
            return ((RaceCommon)((IRaceGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IRaceGetter? obj)
        {
            return ((RaceCommon)((IRaceGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((RaceCommon)((IRaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

