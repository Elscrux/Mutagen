/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class DynamicAttentuationValues :
        IDynamicAttentuationValues,
        IEquatable<IDynamicAttentuationValuesGetter>,
        ILoquiObjectSetter<DynamicAttentuationValues>
    {
        #region Ctor
        public DynamicAttentuationValues()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region FadeInDistanceStart
        public Single FadeInDistanceStart { get; set; } = default(Single);
        #endregion
        #region FadeInDistanceEnd
        public Single FadeInDistanceEnd { get; set; } = default(Single);
        #endregion
        #region FadeOutDistanceStart
        public Single FadeOutDistanceStart { get; set; } = default(Single);
        #endregion
        #region FadeOutDistanceEnd
        public Single FadeOutDistanceEnd { get; set; } = default(Single);
        #endregion
        #region FadeInCurveValue1
        public Byte FadeInCurveValue1 { get; set; } = default(Byte);
        #endregion
        #region FadeInCurveValue2
        public Byte FadeInCurveValue2 { get; set; } = default(Byte);
        #endregion
        #region FadeInCurveValue3
        public Byte FadeInCurveValue3 { get; set; } = default(Byte);
        #endregion
        #region FadeInCurveValue4
        public Byte FadeInCurveValue4 { get; set; } = default(Byte);
        #endregion
        #region FadeOutCurveValue1
        public Byte FadeOutCurveValue1 { get; set; } = default(Byte);
        #endregion
        #region FadeOutCurveValue2
        public Byte FadeOutCurveValue2 { get; set; } = default(Byte);
        #endregion
        #region FadeOutCurveValue3
        public Byte FadeOutCurveValue3 { get; set; } = default(Byte);
        #endregion
        #region FadeOutCurveValue4
        public Byte FadeOutCurveValue4 { get; set; } = default(Byte);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DynamicAttentuationValuesMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IDynamicAttentuationValuesGetter rhs) return false;
            return ((DynamicAttentuationValuesCommon)((IDynamicAttentuationValuesGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDynamicAttentuationValuesGetter? obj)
        {
            return ((DynamicAttentuationValuesCommon)((IDynamicAttentuationValuesGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DynamicAttentuationValuesCommon)((IDynamicAttentuationValuesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.FadeInDistanceStart = initialValue;
                this.FadeInDistanceEnd = initialValue;
                this.FadeOutDistanceStart = initialValue;
                this.FadeOutDistanceEnd = initialValue;
                this.FadeInCurveValue1 = initialValue;
                this.FadeInCurveValue2 = initialValue;
                this.FadeInCurveValue3 = initialValue;
                this.FadeInCurveValue4 = initialValue;
                this.FadeOutCurveValue1 = initialValue;
                this.FadeOutCurveValue2 = initialValue;
                this.FadeOutCurveValue3 = initialValue;
                this.FadeOutCurveValue4 = initialValue;
            }

            public Mask(
                TItem FadeInDistanceStart,
                TItem FadeInDistanceEnd,
                TItem FadeOutDistanceStart,
                TItem FadeOutDistanceEnd,
                TItem FadeInCurveValue1,
                TItem FadeInCurveValue2,
                TItem FadeInCurveValue3,
                TItem FadeInCurveValue4,
                TItem FadeOutCurveValue1,
                TItem FadeOutCurveValue2,
                TItem FadeOutCurveValue3,
                TItem FadeOutCurveValue4)
            {
                this.FadeInDistanceStart = FadeInDistanceStart;
                this.FadeInDistanceEnd = FadeInDistanceEnd;
                this.FadeOutDistanceStart = FadeOutDistanceStart;
                this.FadeOutDistanceEnd = FadeOutDistanceEnd;
                this.FadeInCurveValue1 = FadeInCurveValue1;
                this.FadeInCurveValue2 = FadeInCurveValue2;
                this.FadeInCurveValue3 = FadeInCurveValue3;
                this.FadeInCurveValue4 = FadeInCurveValue4;
                this.FadeOutCurveValue1 = FadeOutCurveValue1;
                this.FadeOutCurveValue2 = FadeOutCurveValue2;
                this.FadeOutCurveValue3 = FadeOutCurveValue3;
                this.FadeOutCurveValue4 = FadeOutCurveValue4;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem FadeInDistanceStart;
            public TItem FadeInDistanceEnd;
            public TItem FadeOutDistanceStart;
            public TItem FadeOutDistanceEnd;
            public TItem FadeInCurveValue1;
            public TItem FadeInCurveValue2;
            public TItem FadeInCurveValue3;
            public TItem FadeInCurveValue4;
            public TItem FadeOutCurveValue1;
            public TItem FadeOutCurveValue2;
            public TItem FadeOutCurveValue3;
            public TItem FadeOutCurveValue4;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.FadeInDistanceStart, rhs.FadeInDistanceStart)) return false;
                if (!object.Equals(this.FadeInDistanceEnd, rhs.FadeInDistanceEnd)) return false;
                if (!object.Equals(this.FadeOutDistanceStart, rhs.FadeOutDistanceStart)) return false;
                if (!object.Equals(this.FadeOutDistanceEnd, rhs.FadeOutDistanceEnd)) return false;
                if (!object.Equals(this.FadeInCurveValue1, rhs.FadeInCurveValue1)) return false;
                if (!object.Equals(this.FadeInCurveValue2, rhs.FadeInCurveValue2)) return false;
                if (!object.Equals(this.FadeInCurveValue3, rhs.FadeInCurveValue3)) return false;
                if (!object.Equals(this.FadeInCurveValue4, rhs.FadeInCurveValue4)) return false;
                if (!object.Equals(this.FadeOutCurveValue1, rhs.FadeOutCurveValue1)) return false;
                if (!object.Equals(this.FadeOutCurveValue2, rhs.FadeOutCurveValue2)) return false;
                if (!object.Equals(this.FadeOutCurveValue3, rhs.FadeOutCurveValue3)) return false;
                if (!object.Equals(this.FadeOutCurveValue4, rhs.FadeOutCurveValue4)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.FadeInDistanceStart);
                hash.Add(this.FadeInDistanceEnd);
                hash.Add(this.FadeOutDistanceStart);
                hash.Add(this.FadeOutDistanceEnd);
                hash.Add(this.FadeInCurveValue1);
                hash.Add(this.FadeInCurveValue2);
                hash.Add(this.FadeInCurveValue3);
                hash.Add(this.FadeInCurveValue4);
                hash.Add(this.FadeOutCurveValue1);
                hash.Add(this.FadeOutCurveValue2);
                hash.Add(this.FadeOutCurveValue3);
                hash.Add(this.FadeOutCurveValue4);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.FadeInDistanceStart)) return false;
                if (!eval(this.FadeInDistanceEnd)) return false;
                if (!eval(this.FadeOutDistanceStart)) return false;
                if (!eval(this.FadeOutDistanceEnd)) return false;
                if (!eval(this.FadeInCurveValue1)) return false;
                if (!eval(this.FadeInCurveValue2)) return false;
                if (!eval(this.FadeInCurveValue3)) return false;
                if (!eval(this.FadeInCurveValue4)) return false;
                if (!eval(this.FadeOutCurveValue1)) return false;
                if (!eval(this.FadeOutCurveValue2)) return false;
                if (!eval(this.FadeOutCurveValue3)) return false;
                if (!eval(this.FadeOutCurveValue4)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.FadeInDistanceStart)) return true;
                if (eval(this.FadeInDistanceEnd)) return true;
                if (eval(this.FadeOutDistanceStart)) return true;
                if (eval(this.FadeOutDistanceEnd)) return true;
                if (eval(this.FadeInCurveValue1)) return true;
                if (eval(this.FadeInCurveValue2)) return true;
                if (eval(this.FadeInCurveValue3)) return true;
                if (eval(this.FadeInCurveValue4)) return true;
                if (eval(this.FadeOutCurveValue1)) return true;
                if (eval(this.FadeOutCurveValue2)) return true;
                if (eval(this.FadeOutCurveValue3)) return true;
                if (eval(this.FadeOutCurveValue4)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DynamicAttentuationValues.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.FadeInDistanceStart = eval(this.FadeInDistanceStart);
                obj.FadeInDistanceEnd = eval(this.FadeInDistanceEnd);
                obj.FadeOutDistanceStart = eval(this.FadeOutDistanceStart);
                obj.FadeOutDistanceEnd = eval(this.FadeOutDistanceEnd);
                obj.FadeInCurveValue1 = eval(this.FadeInCurveValue1);
                obj.FadeInCurveValue2 = eval(this.FadeInCurveValue2);
                obj.FadeInCurveValue3 = eval(this.FadeInCurveValue3);
                obj.FadeInCurveValue4 = eval(this.FadeInCurveValue4);
                obj.FadeOutCurveValue1 = eval(this.FadeOutCurveValue1);
                obj.FadeOutCurveValue2 = eval(this.FadeOutCurveValue2);
                obj.FadeOutCurveValue3 = eval(this.FadeOutCurveValue3);
                obj.FadeOutCurveValue4 = eval(this.FadeOutCurveValue4);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(DynamicAttentuationValues.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, DynamicAttentuationValues.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(DynamicAttentuationValues.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.FadeInDistanceStart ?? true)
                    {
                        sb.AppendItem(FadeInDistanceStart, "FadeInDistanceStart");
                    }
                    if (printMask?.FadeInDistanceEnd ?? true)
                    {
                        sb.AppendItem(FadeInDistanceEnd, "FadeInDistanceEnd");
                    }
                    if (printMask?.FadeOutDistanceStart ?? true)
                    {
                        sb.AppendItem(FadeOutDistanceStart, "FadeOutDistanceStart");
                    }
                    if (printMask?.FadeOutDistanceEnd ?? true)
                    {
                        sb.AppendItem(FadeOutDistanceEnd, "FadeOutDistanceEnd");
                    }
                    if (printMask?.FadeInCurveValue1 ?? true)
                    {
                        sb.AppendItem(FadeInCurveValue1, "FadeInCurveValue1");
                    }
                    if (printMask?.FadeInCurveValue2 ?? true)
                    {
                        sb.AppendItem(FadeInCurveValue2, "FadeInCurveValue2");
                    }
                    if (printMask?.FadeInCurveValue3 ?? true)
                    {
                        sb.AppendItem(FadeInCurveValue3, "FadeInCurveValue3");
                    }
                    if (printMask?.FadeInCurveValue4 ?? true)
                    {
                        sb.AppendItem(FadeInCurveValue4, "FadeInCurveValue4");
                    }
                    if (printMask?.FadeOutCurveValue1 ?? true)
                    {
                        sb.AppendItem(FadeOutCurveValue1, "FadeOutCurveValue1");
                    }
                    if (printMask?.FadeOutCurveValue2 ?? true)
                    {
                        sb.AppendItem(FadeOutCurveValue2, "FadeOutCurveValue2");
                    }
                    if (printMask?.FadeOutCurveValue3 ?? true)
                    {
                        sb.AppendItem(FadeOutCurveValue3, "FadeOutCurveValue3");
                    }
                    if (printMask?.FadeOutCurveValue4 ?? true)
                    {
                        sb.AppendItem(FadeOutCurveValue4, "FadeOutCurveValue4");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? FadeInDistanceStart;
            public Exception? FadeInDistanceEnd;
            public Exception? FadeOutDistanceStart;
            public Exception? FadeOutDistanceEnd;
            public Exception? FadeInCurveValue1;
            public Exception? FadeInCurveValue2;
            public Exception? FadeInCurveValue3;
            public Exception? FadeInCurveValue4;
            public Exception? FadeOutCurveValue1;
            public Exception? FadeOutCurveValue2;
            public Exception? FadeOutCurveValue3;
            public Exception? FadeOutCurveValue4;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                DynamicAttentuationValues_FieldIndex enu = (DynamicAttentuationValues_FieldIndex)index;
                switch (enu)
                {
                    case DynamicAttentuationValues_FieldIndex.FadeInDistanceStart:
                        return FadeInDistanceStart;
                    case DynamicAttentuationValues_FieldIndex.FadeInDistanceEnd:
                        return FadeInDistanceEnd;
                    case DynamicAttentuationValues_FieldIndex.FadeOutDistanceStart:
                        return FadeOutDistanceStart;
                    case DynamicAttentuationValues_FieldIndex.FadeOutDistanceEnd:
                        return FadeOutDistanceEnd;
                    case DynamicAttentuationValues_FieldIndex.FadeInCurveValue1:
                        return FadeInCurveValue1;
                    case DynamicAttentuationValues_FieldIndex.FadeInCurveValue2:
                        return FadeInCurveValue2;
                    case DynamicAttentuationValues_FieldIndex.FadeInCurveValue3:
                        return FadeInCurveValue3;
                    case DynamicAttentuationValues_FieldIndex.FadeInCurveValue4:
                        return FadeInCurveValue4;
                    case DynamicAttentuationValues_FieldIndex.FadeOutCurveValue1:
                        return FadeOutCurveValue1;
                    case DynamicAttentuationValues_FieldIndex.FadeOutCurveValue2:
                        return FadeOutCurveValue2;
                    case DynamicAttentuationValues_FieldIndex.FadeOutCurveValue3:
                        return FadeOutCurveValue3;
                    case DynamicAttentuationValues_FieldIndex.FadeOutCurveValue4:
                        return FadeOutCurveValue4;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                DynamicAttentuationValues_FieldIndex enu = (DynamicAttentuationValues_FieldIndex)index;
                switch (enu)
                {
                    case DynamicAttentuationValues_FieldIndex.FadeInDistanceStart:
                        this.FadeInDistanceStart = ex;
                        break;
                    case DynamicAttentuationValues_FieldIndex.FadeInDistanceEnd:
                        this.FadeInDistanceEnd = ex;
                        break;
                    case DynamicAttentuationValues_FieldIndex.FadeOutDistanceStart:
                        this.FadeOutDistanceStart = ex;
                        break;
                    case DynamicAttentuationValues_FieldIndex.FadeOutDistanceEnd:
                        this.FadeOutDistanceEnd = ex;
                        break;
                    case DynamicAttentuationValues_FieldIndex.FadeInCurveValue1:
                        this.FadeInCurveValue1 = ex;
                        break;
                    case DynamicAttentuationValues_FieldIndex.FadeInCurveValue2:
                        this.FadeInCurveValue2 = ex;
                        break;
                    case DynamicAttentuationValues_FieldIndex.FadeInCurveValue3:
                        this.FadeInCurveValue3 = ex;
                        break;
                    case DynamicAttentuationValues_FieldIndex.FadeInCurveValue4:
                        this.FadeInCurveValue4 = ex;
                        break;
                    case DynamicAttentuationValues_FieldIndex.FadeOutCurveValue1:
                        this.FadeOutCurveValue1 = ex;
                        break;
                    case DynamicAttentuationValues_FieldIndex.FadeOutCurveValue2:
                        this.FadeOutCurveValue2 = ex;
                        break;
                    case DynamicAttentuationValues_FieldIndex.FadeOutCurveValue3:
                        this.FadeOutCurveValue3 = ex;
                        break;
                    case DynamicAttentuationValues_FieldIndex.FadeOutCurveValue4:
                        this.FadeOutCurveValue4 = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                DynamicAttentuationValues_FieldIndex enu = (DynamicAttentuationValues_FieldIndex)index;
                switch (enu)
                {
                    case DynamicAttentuationValues_FieldIndex.FadeInDistanceStart:
                        this.FadeInDistanceStart = (Exception?)obj;
                        break;
                    case DynamicAttentuationValues_FieldIndex.FadeInDistanceEnd:
                        this.FadeInDistanceEnd = (Exception?)obj;
                        break;
                    case DynamicAttentuationValues_FieldIndex.FadeOutDistanceStart:
                        this.FadeOutDistanceStart = (Exception?)obj;
                        break;
                    case DynamicAttentuationValues_FieldIndex.FadeOutDistanceEnd:
                        this.FadeOutDistanceEnd = (Exception?)obj;
                        break;
                    case DynamicAttentuationValues_FieldIndex.FadeInCurveValue1:
                        this.FadeInCurveValue1 = (Exception?)obj;
                        break;
                    case DynamicAttentuationValues_FieldIndex.FadeInCurveValue2:
                        this.FadeInCurveValue2 = (Exception?)obj;
                        break;
                    case DynamicAttentuationValues_FieldIndex.FadeInCurveValue3:
                        this.FadeInCurveValue3 = (Exception?)obj;
                        break;
                    case DynamicAttentuationValues_FieldIndex.FadeInCurveValue4:
                        this.FadeInCurveValue4 = (Exception?)obj;
                        break;
                    case DynamicAttentuationValues_FieldIndex.FadeOutCurveValue1:
                        this.FadeOutCurveValue1 = (Exception?)obj;
                        break;
                    case DynamicAttentuationValues_FieldIndex.FadeOutCurveValue2:
                        this.FadeOutCurveValue2 = (Exception?)obj;
                        break;
                    case DynamicAttentuationValues_FieldIndex.FadeOutCurveValue3:
                        this.FadeOutCurveValue3 = (Exception?)obj;
                        break;
                    case DynamicAttentuationValues_FieldIndex.FadeOutCurveValue4:
                        this.FadeOutCurveValue4 = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (FadeInDistanceStart != null) return true;
                if (FadeInDistanceEnd != null) return true;
                if (FadeOutDistanceStart != null) return true;
                if (FadeOutDistanceEnd != null) return true;
                if (FadeInCurveValue1 != null) return true;
                if (FadeInCurveValue2 != null) return true;
                if (FadeInCurveValue3 != null) return true;
                if (FadeInCurveValue4 != null) return true;
                if (FadeOutCurveValue1 != null) return true;
                if (FadeOutCurveValue2 != null) return true;
                if (FadeOutCurveValue3 != null) return true;
                if (FadeOutCurveValue4 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(FadeInDistanceStart, "FadeInDistanceStart");
                }
                {
                    sb.AppendItem(FadeInDistanceEnd, "FadeInDistanceEnd");
                }
                {
                    sb.AppendItem(FadeOutDistanceStart, "FadeOutDistanceStart");
                }
                {
                    sb.AppendItem(FadeOutDistanceEnd, "FadeOutDistanceEnd");
                }
                {
                    sb.AppendItem(FadeInCurveValue1, "FadeInCurveValue1");
                }
                {
                    sb.AppendItem(FadeInCurveValue2, "FadeInCurveValue2");
                }
                {
                    sb.AppendItem(FadeInCurveValue3, "FadeInCurveValue3");
                }
                {
                    sb.AppendItem(FadeInCurveValue4, "FadeInCurveValue4");
                }
                {
                    sb.AppendItem(FadeOutCurveValue1, "FadeOutCurveValue1");
                }
                {
                    sb.AppendItem(FadeOutCurveValue2, "FadeOutCurveValue2");
                }
                {
                    sb.AppendItem(FadeOutCurveValue3, "FadeOutCurveValue3");
                }
                {
                    sb.AppendItem(FadeOutCurveValue4, "FadeOutCurveValue4");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.FadeInDistanceStart = this.FadeInDistanceStart.Combine(rhs.FadeInDistanceStart);
                ret.FadeInDistanceEnd = this.FadeInDistanceEnd.Combine(rhs.FadeInDistanceEnd);
                ret.FadeOutDistanceStart = this.FadeOutDistanceStart.Combine(rhs.FadeOutDistanceStart);
                ret.FadeOutDistanceEnd = this.FadeOutDistanceEnd.Combine(rhs.FadeOutDistanceEnd);
                ret.FadeInCurveValue1 = this.FadeInCurveValue1.Combine(rhs.FadeInCurveValue1);
                ret.FadeInCurveValue2 = this.FadeInCurveValue2.Combine(rhs.FadeInCurveValue2);
                ret.FadeInCurveValue3 = this.FadeInCurveValue3.Combine(rhs.FadeInCurveValue3);
                ret.FadeInCurveValue4 = this.FadeInCurveValue4.Combine(rhs.FadeInCurveValue4);
                ret.FadeOutCurveValue1 = this.FadeOutCurveValue1.Combine(rhs.FadeOutCurveValue1);
                ret.FadeOutCurveValue2 = this.FadeOutCurveValue2.Combine(rhs.FadeOutCurveValue2);
                ret.FadeOutCurveValue3 = this.FadeOutCurveValue3.Combine(rhs.FadeOutCurveValue3);
                ret.FadeOutCurveValue4 = this.FadeOutCurveValue4.Combine(rhs.FadeOutCurveValue4);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool FadeInDistanceStart;
            public bool FadeInDistanceEnd;
            public bool FadeOutDistanceStart;
            public bool FadeOutDistanceEnd;
            public bool FadeInCurveValue1;
            public bool FadeInCurveValue2;
            public bool FadeInCurveValue3;
            public bool FadeInCurveValue4;
            public bool FadeOutCurveValue1;
            public bool FadeOutCurveValue2;
            public bool FadeOutCurveValue3;
            public bool FadeOutCurveValue4;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.FadeInDistanceStart = defaultOn;
                this.FadeInDistanceEnd = defaultOn;
                this.FadeOutDistanceStart = defaultOn;
                this.FadeOutDistanceEnd = defaultOn;
                this.FadeInCurveValue1 = defaultOn;
                this.FadeInCurveValue2 = defaultOn;
                this.FadeInCurveValue3 = defaultOn;
                this.FadeInCurveValue4 = defaultOn;
                this.FadeOutCurveValue1 = defaultOn;
                this.FadeOutCurveValue2 = defaultOn;
                this.FadeOutCurveValue3 = defaultOn;
                this.FadeOutCurveValue4 = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((FadeInDistanceStart, null));
                ret.Add((FadeInDistanceEnd, null));
                ret.Add((FadeOutDistanceStart, null));
                ret.Add((FadeOutDistanceEnd, null));
                ret.Add((FadeInCurveValue1, null));
                ret.Add((FadeInCurveValue2, null));
                ret.Add((FadeInCurveValue3, null));
                ret.Add((FadeInCurveValue4, null));
                ret.Add((FadeOutCurveValue1, null));
                ret.Add((FadeOutCurveValue2, null));
                ret.Add((FadeOutCurveValue3, null));
                ret.Add((FadeOutCurveValue4, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => DynamicAttentuationValuesBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DynamicAttentuationValuesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static DynamicAttentuationValues CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new DynamicAttentuationValues();
            ((DynamicAttentuationValuesSetterCommon)((IDynamicAttentuationValuesGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out DynamicAttentuationValues item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((DynamicAttentuationValuesSetterCommon)((IDynamicAttentuationValuesGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static DynamicAttentuationValues GetNew()
        {
            return new DynamicAttentuationValues();
        }

    }
    #endregion

    #region Interface
    public partial interface IDynamicAttentuationValues :
        IDynamicAttentuationValuesGetter,
        ILoquiObjectSetter<IDynamicAttentuationValues>
    {
        new Single FadeInDistanceStart { get; set; }
        new Single FadeInDistanceEnd { get; set; }
        new Single FadeOutDistanceStart { get; set; }
        new Single FadeOutDistanceEnd { get; set; }
        new Byte FadeInCurveValue1 { get; set; }
        new Byte FadeInCurveValue2 { get; set; }
        new Byte FadeInCurveValue3 { get; set; }
        new Byte FadeInCurveValue4 { get; set; }
        new Byte FadeOutCurveValue1 { get; set; }
        new Byte FadeOutCurveValue2 { get; set; }
        new Byte FadeOutCurveValue3 { get; set; }
        new Byte FadeOutCurveValue4 { get; set; }
    }

    public partial interface IDynamicAttentuationValuesGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IDynamicAttentuationValuesGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => DynamicAttentuationValues_Registration.Instance;
        Single FadeInDistanceStart { get; }
        Single FadeInDistanceEnd { get; }
        Single FadeOutDistanceStart { get; }
        Single FadeOutDistanceEnd { get; }
        Byte FadeInCurveValue1 { get; }
        Byte FadeInCurveValue2 { get; }
        Byte FadeInCurveValue3 { get; }
        Byte FadeInCurveValue4 { get; }
        Byte FadeOutCurveValue1 { get; }
        Byte FadeOutCurveValue2 { get; }
        Byte FadeOutCurveValue3 { get; }
        Byte FadeOutCurveValue4 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class DynamicAttentuationValuesMixIn
    {
        public static void Clear(this IDynamicAttentuationValues item)
        {
            ((DynamicAttentuationValuesSetterCommon)((IDynamicAttentuationValuesGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DynamicAttentuationValues.Mask<bool> GetEqualsMask(
            this IDynamicAttentuationValuesGetter item,
            IDynamicAttentuationValuesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DynamicAttentuationValuesCommon)((IDynamicAttentuationValuesGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IDynamicAttentuationValuesGetter item,
            string? name = null,
            DynamicAttentuationValues.Mask<bool>? printMask = null)
        {
            return ((DynamicAttentuationValuesCommon)((IDynamicAttentuationValuesGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IDynamicAttentuationValuesGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            DynamicAttentuationValues.Mask<bool>? printMask = null)
        {
            ((DynamicAttentuationValuesCommon)((IDynamicAttentuationValuesGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IDynamicAttentuationValuesGetter item,
            IDynamicAttentuationValuesGetter rhs,
            DynamicAttentuationValues.TranslationMask? equalsMask = null)
        {
            return ((DynamicAttentuationValuesCommon)((IDynamicAttentuationValuesGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IDynamicAttentuationValues lhs,
            IDynamicAttentuationValuesGetter rhs)
        {
            ((DynamicAttentuationValuesSetterTranslationCommon)((IDynamicAttentuationValuesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IDynamicAttentuationValues lhs,
            IDynamicAttentuationValuesGetter rhs,
            DynamicAttentuationValues.TranslationMask? copyMask = null)
        {
            ((DynamicAttentuationValuesSetterTranslationCommon)((IDynamicAttentuationValuesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IDynamicAttentuationValues lhs,
            IDynamicAttentuationValuesGetter rhs,
            out DynamicAttentuationValues.ErrorMask errorMask,
            DynamicAttentuationValues.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DynamicAttentuationValuesSetterTranslationCommon)((IDynamicAttentuationValuesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = DynamicAttentuationValues.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDynamicAttentuationValues lhs,
            IDynamicAttentuationValuesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DynamicAttentuationValuesSetterTranslationCommon)((IDynamicAttentuationValuesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static DynamicAttentuationValues DeepCopy(
            this IDynamicAttentuationValuesGetter item,
            DynamicAttentuationValues.TranslationMask? copyMask = null)
        {
            return ((DynamicAttentuationValuesSetterTranslationCommon)((IDynamicAttentuationValuesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DynamicAttentuationValues DeepCopy(
            this IDynamicAttentuationValuesGetter item,
            out DynamicAttentuationValues.ErrorMask errorMask,
            DynamicAttentuationValues.TranslationMask? copyMask = null)
        {
            return ((DynamicAttentuationValuesSetterTranslationCommon)((IDynamicAttentuationValuesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DynamicAttentuationValues DeepCopy(
            this IDynamicAttentuationValuesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DynamicAttentuationValuesSetterTranslationCommon)((IDynamicAttentuationValuesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IDynamicAttentuationValues item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((DynamicAttentuationValuesSetterCommon)((IDynamicAttentuationValuesGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum DynamicAttentuationValues_FieldIndex
    {
        FadeInDistanceStart = 0,
        FadeInDistanceEnd = 1,
        FadeOutDistanceStart = 2,
        FadeOutDistanceEnd = 3,
        FadeInCurveValue1 = 4,
        FadeInCurveValue2 = 5,
        FadeInCurveValue3 = 6,
        FadeInCurveValue4 = 7,
        FadeOutCurveValue1 = 8,
        FadeOutCurveValue2 = 9,
        FadeOutCurveValue3 = 10,
        FadeOutCurveValue4 = 11,
    }
    #endregion

    #region Registration
    internal partial class DynamicAttentuationValues_Registration : ILoquiRegistration
    {
        public static readonly DynamicAttentuationValues_Registration Instance = new DynamicAttentuationValues_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 12;

        public const ushort FieldCount = 12;

        public static readonly Type MaskType = typeof(DynamicAttentuationValues.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DynamicAttentuationValues.ErrorMask);

        public static readonly Type ClassType = typeof(DynamicAttentuationValues);

        public static readonly Type GetterType = typeof(IDynamicAttentuationValuesGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDynamicAttentuationValues);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.DynamicAttentuationValues";

        public const string Name = "DynamicAttentuationValues";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ATTN;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.ATTN);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(DynamicAttentuationValuesBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class DynamicAttentuationValuesSetterCommon
    {
        public static readonly DynamicAttentuationValuesSetterCommon Instance = new DynamicAttentuationValuesSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDynamicAttentuationValues item)
        {
            ClearPartial();
            item.FadeInDistanceStart = default(Single);
            item.FadeInDistanceEnd = default(Single);
            item.FadeOutDistanceStart = default(Single);
            item.FadeOutDistanceEnd = default(Single);
            item.FadeInCurveValue1 = default(Byte);
            item.FadeInCurveValue2 = default(Byte);
            item.FadeInCurveValue3 = default(Byte);
            item.FadeInCurveValue4 = default(Byte);
            item.FadeOutCurveValue1 = default(Byte);
            item.FadeOutCurveValue2 = default(Byte);
            item.FadeOutCurveValue3 = default(Byte);
            item.FadeOutCurveValue4 = default(Byte);
        }
        
        #region Mutagen
        public void RemapLinks(IDynamicAttentuationValues obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IDynamicAttentuationValues item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.ATTN),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: DynamicAttentuationValuesBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class DynamicAttentuationValuesCommon
    {
        public static readonly DynamicAttentuationValuesCommon Instance = new DynamicAttentuationValuesCommon();

        public DynamicAttentuationValues.Mask<bool> GetEqualsMask(
            IDynamicAttentuationValuesGetter item,
            IDynamicAttentuationValuesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DynamicAttentuationValues.Mask<bool>(false);
            ((DynamicAttentuationValuesCommon)((IDynamicAttentuationValuesGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDynamicAttentuationValuesGetter item,
            IDynamicAttentuationValuesGetter rhs,
            DynamicAttentuationValues.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.FadeInDistanceStart = item.FadeInDistanceStart.EqualsWithin(rhs.FadeInDistanceStart);
            ret.FadeInDistanceEnd = item.FadeInDistanceEnd.EqualsWithin(rhs.FadeInDistanceEnd);
            ret.FadeOutDistanceStart = item.FadeOutDistanceStart.EqualsWithin(rhs.FadeOutDistanceStart);
            ret.FadeOutDistanceEnd = item.FadeOutDistanceEnd.EqualsWithin(rhs.FadeOutDistanceEnd);
            ret.FadeInCurveValue1 = item.FadeInCurveValue1 == rhs.FadeInCurveValue1;
            ret.FadeInCurveValue2 = item.FadeInCurveValue2 == rhs.FadeInCurveValue2;
            ret.FadeInCurveValue3 = item.FadeInCurveValue3 == rhs.FadeInCurveValue3;
            ret.FadeInCurveValue4 = item.FadeInCurveValue4 == rhs.FadeInCurveValue4;
            ret.FadeOutCurveValue1 = item.FadeOutCurveValue1 == rhs.FadeOutCurveValue1;
            ret.FadeOutCurveValue2 = item.FadeOutCurveValue2 == rhs.FadeOutCurveValue2;
            ret.FadeOutCurveValue3 = item.FadeOutCurveValue3 == rhs.FadeOutCurveValue3;
            ret.FadeOutCurveValue4 = item.FadeOutCurveValue4 == rhs.FadeOutCurveValue4;
        }
        
        public string Print(
            IDynamicAttentuationValuesGetter item,
            string? name = null,
            DynamicAttentuationValues.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IDynamicAttentuationValuesGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            DynamicAttentuationValues.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"DynamicAttentuationValues =>");
            }
            else
            {
                sb.AppendLine($"{name} (DynamicAttentuationValues) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IDynamicAttentuationValuesGetter item,
            StructuredStringBuilder sb,
            DynamicAttentuationValues.Mask<bool>? printMask = null)
        {
            if (printMask?.FadeInDistanceStart ?? true)
            {
                sb.AppendItem(item.FadeInDistanceStart, "FadeInDistanceStart");
            }
            if (printMask?.FadeInDistanceEnd ?? true)
            {
                sb.AppendItem(item.FadeInDistanceEnd, "FadeInDistanceEnd");
            }
            if (printMask?.FadeOutDistanceStart ?? true)
            {
                sb.AppendItem(item.FadeOutDistanceStart, "FadeOutDistanceStart");
            }
            if (printMask?.FadeOutDistanceEnd ?? true)
            {
                sb.AppendItem(item.FadeOutDistanceEnd, "FadeOutDistanceEnd");
            }
            if (printMask?.FadeInCurveValue1 ?? true)
            {
                sb.AppendItem(item.FadeInCurveValue1, "FadeInCurveValue1");
            }
            if (printMask?.FadeInCurveValue2 ?? true)
            {
                sb.AppendItem(item.FadeInCurveValue2, "FadeInCurveValue2");
            }
            if (printMask?.FadeInCurveValue3 ?? true)
            {
                sb.AppendItem(item.FadeInCurveValue3, "FadeInCurveValue3");
            }
            if (printMask?.FadeInCurveValue4 ?? true)
            {
                sb.AppendItem(item.FadeInCurveValue4, "FadeInCurveValue4");
            }
            if (printMask?.FadeOutCurveValue1 ?? true)
            {
                sb.AppendItem(item.FadeOutCurveValue1, "FadeOutCurveValue1");
            }
            if (printMask?.FadeOutCurveValue2 ?? true)
            {
                sb.AppendItem(item.FadeOutCurveValue2, "FadeOutCurveValue2");
            }
            if (printMask?.FadeOutCurveValue3 ?? true)
            {
                sb.AppendItem(item.FadeOutCurveValue3, "FadeOutCurveValue3");
            }
            if (printMask?.FadeOutCurveValue4 ?? true)
            {
                sb.AppendItem(item.FadeOutCurveValue4, "FadeOutCurveValue4");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDynamicAttentuationValuesGetter? lhs,
            IDynamicAttentuationValuesGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)DynamicAttentuationValues_FieldIndex.FadeInDistanceStart) ?? true))
            {
                if (!lhs.FadeInDistanceStart.EqualsWithin(rhs.FadeInDistanceStart)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DynamicAttentuationValues_FieldIndex.FadeInDistanceEnd) ?? true))
            {
                if (!lhs.FadeInDistanceEnd.EqualsWithin(rhs.FadeInDistanceEnd)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DynamicAttentuationValues_FieldIndex.FadeOutDistanceStart) ?? true))
            {
                if (!lhs.FadeOutDistanceStart.EqualsWithin(rhs.FadeOutDistanceStart)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DynamicAttentuationValues_FieldIndex.FadeOutDistanceEnd) ?? true))
            {
                if (!lhs.FadeOutDistanceEnd.EqualsWithin(rhs.FadeOutDistanceEnd)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DynamicAttentuationValues_FieldIndex.FadeInCurveValue1) ?? true))
            {
                if (lhs.FadeInCurveValue1 != rhs.FadeInCurveValue1) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DynamicAttentuationValues_FieldIndex.FadeInCurveValue2) ?? true))
            {
                if (lhs.FadeInCurveValue2 != rhs.FadeInCurveValue2) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DynamicAttentuationValues_FieldIndex.FadeInCurveValue3) ?? true))
            {
                if (lhs.FadeInCurveValue3 != rhs.FadeInCurveValue3) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DynamicAttentuationValues_FieldIndex.FadeInCurveValue4) ?? true))
            {
                if (lhs.FadeInCurveValue4 != rhs.FadeInCurveValue4) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DynamicAttentuationValues_FieldIndex.FadeOutCurveValue1) ?? true))
            {
                if (lhs.FadeOutCurveValue1 != rhs.FadeOutCurveValue1) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DynamicAttentuationValues_FieldIndex.FadeOutCurveValue2) ?? true))
            {
                if (lhs.FadeOutCurveValue2 != rhs.FadeOutCurveValue2) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DynamicAttentuationValues_FieldIndex.FadeOutCurveValue3) ?? true))
            {
                if (lhs.FadeOutCurveValue3 != rhs.FadeOutCurveValue3) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DynamicAttentuationValues_FieldIndex.FadeOutCurveValue4) ?? true))
            {
                if (lhs.FadeOutCurveValue4 != rhs.FadeOutCurveValue4) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IDynamicAttentuationValuesGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.FadeInDistanceStart);
            hash.Add(item.FadeInDistanceEnd);
            hash.Add(item.FadeOutDistanceStart);
            hash.Add(item.FadeOutDistanceEnd);
            hash.Add(item.FadeInCurveValue1);
            hash.Add(item.FadeInCurveValue2);
            hash.Add(item.FadeInCurveValue3);
            hash.Add(item.FadeInCurveValue4);
            hash.Add(item.FadeOutCurveValue1);
            hash.Add(item.FadeOutCurveValue2);
            hash.Add(item.FadeOutCurveValue3);
            hash.Add(item.FadeOutCurveValue4);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return DynamicAttentuationValues.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IDynamicAttentuationValuesGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class DynamicAttentuationValuesSetterTranslationCommon
    {
        public static readonly DynamicAttentuationValuesSetterTranslationCommon Instance = new DynamicAttentuationValuesSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IDynamicAttentuationValues item,
            IDynamicAttentuationValuesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)DynamicAttentuationValues_FieldIndex.FadeInDistanceStart) ?? true))
            {
                item.FadeInDistanceStart = rhs.FadeInDistanceStart;
            }
            if ((copyMask?.GetShouldTranslate((int)DynamicAttentuationValues_FieldIndex.FadeInDistanceEnd) ?? true))
            {
                item.FadeInDistanceEnd = rhs.FadeInDistanceEnd;
            }
            if ((copyMask?.GetShouldTranslate((int)DynamicAttentuationValues_FieldIndex.FadeOutDistanceStart) ?? true))
            {
                item.FadeOutDistanceStart = rhs.FadeOutDistanceStart;
            }
            if ((copyMask?.GetShouldTranslate((int)DynamicAttentuationValues_FieldIndex.FadeOutDistanceEnd) ?? true))
            {
                item.FadeOutDistanceEnd = rhs.FadeOutDistanceEnd;
            }
            if ((copyMask?.GetShouldTranslate((int)DynamicAttentuationValues_FieldIndex.FadeInCurveValue1) ?? true))
            {
                item.FadeInCurveValue1 = rhs.FadeInCurveValue1;
            }
            if ((copyMask?.GetShouldTranslate((int)DynamicAttentuationValues_FieldIndex.FadeInCurveValue2) ?? true))
            {
                item.FadeInCurveValue2 = rhs.FadeInCurveValue2;
            }
            if ((copyMask?.GetShouldTranslate((int)DynamicAttentuationValues_FieldIndex.FadeInCurveValue3) ?? true))
            {
                item.FadeInCurveValue3 = rhs.FadeInCurveValue3;
            }
            if ((copyMask?.GetShouldTranslate((int)DynamicAttentuationValues_FieldIndex.FadeInCurveValue4) ?? true))
            {
                item.FadeInCurveValue4 = rhs.FadeInCurveValue4;
            }
            if ((copyMask?.GetShouldTranslate((int)DynamicAttentuationValues_FieldIndex.FadeOutCurveValue1) ?? true))
            {
                item.FadeOutCurveValue1 = rhs.FadeOutCurveValue1;
            }
            if ((copyMask?.GetShouldTranslate((int)DynamicAttentuationValues_FieldIndex.FadeOutCurveValue2) ?? true))
            {
                item.FadeOutCurveValue2 = rhs.FadeOutCurveValue2;
            }
            if ((copyMask?.GetShouldTranslate((int)DynamicAttentuationValues_FieldIndex.FadeOutCurveValue3) ?? true))
            {
                item.FadeOutCurveValue3 = rhs.FadeOutCurveValue3;
            }
            if ((copyMask?.GetShouldTranslate((int)DynamicAttentuationValues_FieldIndex.FadeOutCurveValue4) ?? true))
            {
                item.FadeOutCurveValue4 = rhs.FadeOutCurveValue4;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IDynamicAttentuationValues item,
            IDynamicAttentuationValuesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public DynamicAttentuationValues DeepCopy(
            IDynamicAttentuationValuesGetter item,
            DynamicAttentuationValues.TranslationMask? copyMask = null)
        {
            DynamicAttentuationValues ret = (DynamicAttentuationValues)((DynamicAttentuationValuesCommon)((IDynamicAttentuationValuesGetter)item).CommonInstance()!).GetNew();
            ((DynamicAttentuationValuesSetterTranslationCommon)((IDynamicAttentuationValuesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public DynamicAttentuationValues DeepCopy(
            IDynamicAttentuationValuesGetter item,
            out DynamicAttentuationValues.ErrorMask errorMask,
            DynamicAttentuationValues.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DynamicAttentuationValues ret = (DynamicAttentuationValues)((DynamicAttentuationValuesCommon)((IDynamicAttentuationValuesGetter)item).CommonInstance()!).GetNew();
            ((DynamicAttentuationValuesSetterTranslationCommon)((IDynamicAttentuationValuesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = DynamicAttentuationValues.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public DynamicAttentuationValues DeepCopy(
            IDynamicAttentuationValuesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DynamicAttentuationValues ret = (DynamicAttentuationValues)((DynamicAttentuationValuesCommon)((IDynamicAttentuationValuesGetter)item).CommonInstance()!).GetNew();
            ((DynamicAttentuationValuesSetterTranslationCommon)((IDynamicAttentuationValuesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class DynamicAttentuationValues
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DynamicAttentuationValues_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => DynamicAttentuationValues_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => DynamicAttentuationValuesCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return DynamicAttentuationValuesSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => DynamicAttentuationValuesSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IDynamicAttentuationValuesGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IDynamicAttentuationValuesGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IDynamicAttentuationValuesGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class DynamicAttentuationValuesBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly DynamicAttentuationValuesBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IDynamicAttentuationValuesGetter item,
            MutagenWriter writer)
        {
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FadeInDistanceStart);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FadeInDistanceEnd);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FadeOutDistanceStart);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FadeOutDistanceEnd);
            writer.Write(item.FadeInCurveValue1);
            writer.Write(item.FadeInCurveValue2);
            writer.Write(item.FadeInCurveValue3);
            writer.Write(item.FadeInCurveValue4);
            writer.Write(item.FadeOutCurveValue1);
            writer.Write(item.FadeOutCurveValue2);
            writer.Write(item.FadeOutCurveValue3);
            writer.Write(item.FadeOutCurveValue4);
        }

        public void Write(
            MutagenWriter writer,
            IDynamicAttentuationValuesGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.ATTN),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IDynamicAttentuationValuesGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class DynamicAttentuationValuesBinaryCreateTranslation
    {
        public static readonly DynamicAttentuationValuesBinaryCreateTranslation Instance = new DynamicAttentuationValuesBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IDynamicAttentuationValues item,
            MutagenFrame frame)
        {
            item.FadeInDistanceStart = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.FadeInDistanceEnd = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.FadeOutDistanceStart = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.FadeOutDistanceEnd = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.FadeInCurveValue1 = frame.ReadUInt8();
            item.FadeInCurveValue2 = frame.ReadUInt8();
            item.FadeInCurveValue3 = frame.ReadUInt8();
            item.FadeInCurveValue4 = frame.ReadUInt8();
            item.FadeOutCurveValue1 = frame.ReadUInt8();
            item.FadeOutCurveValue2 = frame.ReadUInt8();
            item.FadeOutCurveValue3 = frame.ReadUInt8();
            item.FadeOutCurveValue4 = frame.ReadUInt8();
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class DynamicAttentuationValuesBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IDynamicAttentuationValuesGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DynamicAttentuationValuesBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class DynamicAttentuationValuesBinaryOverlay :
        PluginBinaryOverlay,
        IDynamicAttentuationValuesGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DynamicAttentuationValues_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => DynamicAttentuationValues_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => DynamicAttentuationValuesCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => DynamicAttentuationValuesSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IDynamicAttentuationValuesGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IDynamicAttentuationValuesGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IDynamicAttentuationValuesGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => DynamicAttentuationValuesBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DynamicAttentuationValuesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Single FadeInDistanceStart => _structData.Slice(0x0, 0x4).Float();
        public Single FadeInDistanceEnd => _structData.Slice(0x4, 0x4).Float();
        public Single FadeOutDistanceStart => _structData.Slice(0x8, 0x4).Float();
        public Single FadeOutDistanceEnd => _structData.Slice(0xC, 0x4).Float();
        public Byte FadeInCurveValue1 => _structData.Span[0x10];
        public Byte FadeInCurveValue2 => _structData.Span[0x11];
        public Byte FadeInCurveValue3 => _structData.Span[0x12];
        public Byte FadeInCurveValue4 => _structData.Span[0x13];
        public Byte FadeOutCurveValue1 => _structData.Span[0x14];
        public Byte FadeOutCurveValue2 => _structData.Span[0x15];
        public Byte FadeOutCurveValue3 => _structData.Span[0x16];
        public Byte FadeOutCurveValue4 => _structData.Span[0x17];
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected DynamicAttentuationValuesBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IDynamicAttentuationValuesGetter DynamicAttentuationValuesFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x18,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new DynamicAttentuationValuesBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x18 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IDynamicAttentuationValuesGetter DynamicAttentuationValuesFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return DynamicAttentuationValuesFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DynamicAttentuationValuesMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IDynamicAttentuationValuesGetter rhs) return false;
            return ((DynamicAttentuationValuesCommon)((IDynamicAttentuationValuesGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDynamicAttentuationValuesGetter? obj)
        {
            return ((DynamicAttentuationValuesCommon)((IDynamicAttentuationValuesGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DynamicAttentuationValuesCommon)((IDynamicAttentuationValuesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

