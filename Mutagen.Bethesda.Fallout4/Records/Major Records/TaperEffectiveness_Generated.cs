/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class TaperEffectiveness :
        IEquatable<ITaperEffectivenessGetter>,
        ILoquiObjectSetter<TaperEffectiveness>,
        ITaperEffectiveness
    {
        #region Ctor
        public TaperEffectiveness()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region FullEffectRadius
        public Single FullEffectRadius { get; set; } = default;
        #endregion
        #region TaperWeight
        public Single TaperWeight { get; set; } = default;
        #endregion
        #region TaperCurse
        public Single TaperCurse { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TaperEffectivenessMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ITaperEffectivenessGetter rhs) return false;
            return ((TaperEffectivenessCommon)((ITaperEffectivenessGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(ITaperEffectivenessGetter? obj)
        {
            return ((TaperEffectivenessCommon)((ITaperEffectivenessGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((TaperEffectivenessCommon)((ITaperEffectivenessGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.FullEffectRadius = initialValue;
                this.TaperWeight = initialValue;
                this.TaperCurse = initialValue;
            }

            public Mask(
                TItem FullEffectRadius,
                TItem TaperWeight,
                TItem TaperCurse)
            {
                this.FullEffectRadius = FullEffectRadius;
                this.TaperWeight = TaperWeight;
                this.TaperCurse = TaperCurse;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem FullEffectRadius;
            public TItem TaperWeight;
            public TItem TaperCurse;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.FullEffectRadius, rhs.FullEffectRadius)) return false;
                if (!object.Equals(this.TaperWeight, rhs.TaperWeight)) return false;
                if (!object.Equals(this.TaperCurse, rhs.TaperCurse)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.FullEffectRadius);
                hash.Add(this.TaperWeight);
                hash.Add(this.TaperCurse);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.FullEffectRadius)) return false;
                if (!eval(this.TaperWeight)) return false;
                if (!eval(this.TaperCurse)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.FullEffectRadius)) return true;
                if (eval(this.TaperWeight)) return true;
                if (eval(this.TaperCurse)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new TaperEffectiveness.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.FullEffectRadius = eval(this.FullEffectRadius);
                obj.TaperWeight = eval(this.TaperWeight);
                obj.TaperCurse = eval(this.TaperCurse);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(TaperEffectiveness.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, TaperEffectiveness.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(TaperEffectiveness.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.FullEffectRadius ?? true)
                    {
                        fg.AppendItem(FullEffectRadius, "FullEffectRadius");
                    }
                    if (printMask?.TaperWeight ?? true)
                    {
                        fg.AppendItem(TaperWeight, "TaperWeight");
                    }
                    if (printMask?.TaperCurse ?? true)
                    {
                        fg.AppendItem(TaperCurse, "TaperCurse");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? FullEffectRadius;
            public Exception? TaperWeight;
            public Exception? TaperCurse;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                TaperEffectiveness_FieldIndex enu = (TaperEffectiveness_FieldIndex)index;
                switch (enu)
                {
                    case TaperEffectiveness_FieldIndex.FullEffectRadius:
                        return FullEffectRadius;
                    case TaperEffectiveness_FieldIndex.TaperWeight:
                        return TaperWeight;
                    case TaperEffectiveness_FieldIndex.TaperCurse:
                        return TaperCurse;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                TaperEffectiveness_FieldIndex enu = (TaperEffectiveness_FieldIndex)index;
                switch (enu)
                {
                    case TaperEffectiveness_FieldIndex.FullEffectRadius:
                        this.FullEffectRadius = ex;
                        break;
                    case TaperEffectiveness_FieldIndex.TaperWeight:
                        this.TaperWeight = ex;
                        break;
                    case TaperEffectiveness_FieldIndex.TaperCurse:
                        this.TaperCurse = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                TaperEffectiveness_FieldIndex enu = (TaperEffectiveness_FieldIndex)index;
                switch (enu)
                {
                    case TaperEffectiveness_FieldIndex.FullEffectRadius:
                        this.FullEffectRadius = (Exception?)obj;
                        break;
                    case TaperEffectiveness_FieldIndex.TaperWeight:
                        this.TaperWeight = (Exception?)obj;
                        break;
                    case TaperEffectiveness_FieldIndex.TaperCurse:
                        this.TaperCurse = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (FullEffectRadius != null) return true;
                if (TaperWeight != null) return true;
                if (TaperCurse != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(FullEffectRadius, "FullEffectRadius");
                fg.AppendItem(TaperWeight, "TaperWeight");
                fg.AppendItem(TaperCurse, "TaperCurse");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.FullEffectRadius = this.FullEffectRadius.Combine(rhs.FullEffectRadius);
                ret.TaperWeight = this.TaperWeight.Combine(rhs.TaperWeight);
                ret.TaperCurse = this.TaperCurse.Combine(rhs.TaperCurse);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool FullEffectRadius;
            public bool TaperWeight;
            public bool TaperCurse;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.FullEffectRadius = defaultOn;
                this.TaperWeight = defaultOn;
                this.TaperCurse = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((FullEffectRadius, null));
                ret.Add((TaperWeight, null));
                ret.Add((TaperCurse, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TaperEffectivenessBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((TaperEffectivenessBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static TaperEffectiveness CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new TaperEffectiveness();
            ((TaperEffectivenessSetterCommon)((ITaperEffectivenessGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out TaperEffectiveness item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((TaperEffectivenessSetterCommon)((ITaperEffectivenessGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static TaperEffectiveness GetNew()
        {
            return new TaperEffectiveness();
        }

    }
    #endregion

    #region Interface
    public partial interface ITaperEffectiveness :
        ILoquiObjectSetter<ITaperEffectiveness>,
        ITaperEffectivenessGetter
    {
        new Single FullEffectRadius { get; set; }
        new Single TaperWeight { get; set; }
        new Single TaperCurse { get; set; }
    }

    public partial interface ITaperEffectivenessGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<ITaperEffectivenessGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => TaperEffectiveness_Registration.Instance;
        Single FullEffectRadius { get; }
        Single TaperWeight { get; }
        Single TaperCurse { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class TaperEffectivenessMixIn
    {
        public static void Clear(this ITaperEffectiveness item)
        {
            ((TaperEffectivenessSetterCommon)((ITaperEffectivenessGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static TaperEffectiveness.Mask<bool> GetEqualsMask(
            this ITaperEffectivenessGetter item,
            ITaperEffectivenessGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TaperEffectivenessCommon)((ITaperEffectivenessGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ITaperEffectivenessGetter item,
            string? name = null,
            TaperEffectiveness.Mask<bool>? printMask = null)
        {
            return ((TaperEffectivenessCommon)((ITaperEffectivenessGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ITaperEffectivenessGetter item,
            FileGeneration fg,
            string? name = null,
            TaperEffectiveness.Mask<bool>? printMask = null)
        {
            ((TaperEffectivenessCommon)((ITaperEffectivenessGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ITaperEffectivenessGetter item,
            ITaperEffectivenessGetter rhs,
            TaperEffectiveness.TranslationMask? equalsMask = null)
        {
            return ((TaperEffectivenessCommon)((ITaperEffectivenessGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ITaperEffectiveness lhs,
            ITaperEffectivenessGetter rhs)
        {
            ((TaperEffectivenessSetterTranslationCommon)((ITaperEffectivenessGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ITaperEffectiveness lhs,
            ITaperEffectivenessGetter rhs,
            TaperEffectiveness.TranslationMask? copyMask = null)
        {
            ((TaperEffectivenessSetterTranslationCommon)((ITaperEffectivenessGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ITaperEffectiveness lhs,
            ITaperEffectivenessGetter rhs,
            out TaperEffectiveness.ErrorMask errorMask,
            TaperEffectiveness.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TaperEffectivenessSetterTranslationCommon)((ITaperEffectivenessGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = TaperEffectiveness.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITaperEffectiveness lhs,
            ITaperEffectivenessGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TaperEffectivenessSetterTranslationCommon)((ITaperEffectivenessGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static TaperEffectiveness DeepCopy(
            this ITaperEffectivenessGetter item,
            TaperEffectiveness.TranslationMask? copyMask = null)
        {
            return ((TaperEffectivenessSetterTranslationCommon)((ITaperEffectivenessGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static TaperEffectiveness DeepCopy(
            this ITaperEffectivenessGetter item,
            out TaperEffectiveness.ErrorMask errorMask,
            TaperEffectiveness.TranslationMask? copyMask = null)
        {
            return ((TaperEffectivenessSetterTranslationCommon)((ITaperEffectivenessGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static TaperEffectiveness DeepCopy(
            this ITaperEffectivenessGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TaperEffectivenessSetterTranslationCommon)((ITaperEffectivenessGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ITaperEffectiveness item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((TaperEffectivenessSetterCommon)((ITaperEffectivenessGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum TaperEffectiveness_FieldIndex
    {
        FullEffectRadius = 0,
        TaperWeight = 1,
        TaperCurse = 2,
    }
    #endregion

    #region Registration
    public partial class TaperEffectiveness_Registration : ILoquiRegistration
    {
        public static readonly TaperEffectiveness_Registration Instance = new TaperEffectiveness_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 242,
            version: 0);

        public const string GUID = "41dd1cc5-ce8b-4a71-940d-565dcf46c22a";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(TaperEffectiveness.Mask<>);

        public static readonly Type ErrorMaskType = typeof(TaperEffectiveness.ErrorMask);

        public static readonly Type ClassType = typeof(TaperEffectiveness);

        public static readonly Type GetterType = typeof(ITaperEffectivenessGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITaperEffectiveness);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.TaperEffectiveness";

        public const string Name = "TaperEffectiveness";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(TaperEffectivenessBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class TaperEffectivenessSetterCommon
    {
        public static readonly TaperEffectivenessSetterCommon Instance = new TaperEffectivenessSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITaperEffectiveness item)
        {
            ClearPartial();
            item.FullEffectRadius = default;
            item.TaperWeight = default;
            item.TaperCurse = default;
        }
        
        #region Mutagen
        public void RemapLinks(ITaperEffectiveness obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ITaperEffectiveness item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: TaperEffectivenessBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class TaperEffectivenessCommon
    {
        public static readonly TaperEffectivenessCommon Instance = new TaperEffectivenessCommon();

        public TaperEffectiveness.Mask<bool> GetEqualsMask(
            ITaperEffectivenessGetter item,
            ITaperEffectivenessGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TaperEffectiveness.Mask<bool>(false);
            ((TaperEffectivenessCommon)((ITaperEffectivenessGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITaperEffectivenessGetter item,
            ITaperEffectivenessGetter rhs,
            TaperEffectiveness.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.FullEffectRadius = item.FullEffectRadius.EqualsWithin(rhs.FullEffectRadius);
            ret.TaperWeight = item.TaperWeight.EqualsWithin(rhs.TaperWeight);
            ret.TaperCurse = item.TaperCurse.EqualsWithin(rhs.TaperCurse);
        }
        
        public string ToString(
            ITaperEffectivenessGetter item,
            string? name = null,
            TaperEffectiveness.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ITaperEffectivenessGetter item,
            FileGeneration fg,
            string? name = null,
            TaperEffectiveness.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"TaperEffectiveness =>");
            }
            else
            {
                fg.AppendLine($"{name} (TaperEffectiveness) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ITaperEffectivenessGetter item,
            FileGeneration fg,
            TaperEffectiveness.Mask<bool>? printMask = null)
        {
            if (printMask?.FullEffectRadius ?? true)
            {
                fg.AppendItem(item.FullEffectRadius, "FullEffectRadius");
            }
            if (printMask?.TaperWeight ?? true)
            {
                fg.AppendItem(item.TaperWeight, "TaperWeight");
            }
            if (printMask?.TaperCurse ?? true)
            {
                fg.AppendItem(item.TaperCurse, "TaperCurse");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITaperEffectivenessGetter? lhs,
            ITaperEffectivenessGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)TaperEffectiveness_FieldIndex.FullEffectRadius) ?? true))
            {
                if (!lhs.FullEffectRadius.EqualsWithin(rhs.FullEffectRadius)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)TaperEffectiveness_FieldIndex.TaperWeight) ?? true))
            {
                if (!lhs.TaperWeight.EqualsWithin(rhs.TaperWeight)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)TaperEffectiveness_FieldIndex.TaperCurse) ?? true))
            {
                if (!lhs.TaperCurse.EqualsWithin(rhs.TaperCurse)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ITaperEffectivenessGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.FullEffectRadius);
            hash.Add(item.TaperWeight);
            hash.Add(item.TaperCurse);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return TaperEffectiveness.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(ITaperEffectivenessGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class TaperEffectivenessSetterTranslationCommon
    {
        public static readonly TaperEffectivenessSetterTranslationCommon Instance = new TaperEffectivenessSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ITaperEffectiveness item,
            ITaperEffectivenessGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)TaperEffectiveness_FieldIndex.FullEffectRadius) ?? true))
            {
                item.FullEffectRadius = rhs.FullEffectRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)TaperEffectiveness_FieldIndex.TaperWeight) ?? true))
            {
                item.TaperWeight = rhs.TaperWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)TaperEffectiveness_FieldIndex.TaperCurse) ?? true))
            {
                item.TaperCurse = rhs.TaperCurse;
            }
        }
        
        #endregion
        
        public TaperEffectiveness DeepCopy(
            ITaperEffectivenessGetter item,
            TaperEffectiveness.TranslationMask? copyMask = null)
        {
            TaperEffectiveness ret = (TaperEffectiveness)((TaperEffectivenessCommon)((ITaperEffectivenessGetter)item).CommonInstance()!).GetNew();
            ((TaperEffectivenessSetterTranslationCommon)((ITaperEffectivenessGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public TaperEffectiveness DeepCopy(
            ITaperEffectivenessGetter item,
            out TaperEffectiveness.ErrorMask errorMask,
            TaperEffectiveness.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            TaperEffectiveness ret = (TaperEffectiveness)((TaperEffectivenessCommon)((ITaperEffectivenessGetter)item).CommonInstance()!).GetNew();
            ((TaperEffectivenessSetterTranslationCommon)((ITaperEffectivenessGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = TaperEffectiveness.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public TaperEffectiveness DeepCopy(
            ITaperEffectivenessGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            TaperEffectiveness ret = (TaperEffectiveness)((TaperEffectivenessCommon)((ITaperEffectivenessGetter)item).CommonInstance()!).GetNew();
            ((TaperEffectivenessSetterTranslationCommon)((ITaperEffectivenessGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class TaperEffectiveness
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TaperEffectiveness_Registration.Instance;
        public static TaperEffectiveness_Registration StaticRegistration => TaperEffectiveness_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TaperEffectivenessCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return TaperEffectivenessSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TaperEffectivenessSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITaperEffectivenessGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ITaperEffectivenessGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ITaperEffectivenessGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class TaperEffectivenessBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static TaperEffectivenessBinaryWriteTranslation Instance = new TaperEffectivenessBinaryWriteTranslation();

        public static void WriteEmbedded(
            ITaperEffectivenessGetter item,
            MutagenWriter writer)
        {
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FullEffectRadius);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TaperWeight);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TaperCurse);
        }

        public void Write(
            MutagenWriter writer,
            ITaperEffectivenessGetter item,
            TypedWriteParams? translationParams = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (ITaperEffectivenessGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class TaperEffectivenessBinaryCreateTranslation
    {
        public readonly static TaperEffectivenessBinaryCreateTranslation Instance = new TaperEffectivenessBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ITaperEffectiveness item,
            MutagenFrame frame)
        {
            item.FullEffectRadius = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.TaperWeight = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.TaperCurse = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class TaperEffectivenessBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ITaperEffectivenessGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((TaperEffectivenessBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class TaperEffectivenessBinaryOverlay :
        PluginBinaryOverlay,
        ITaperEffectivenessGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TaperEffectiveness_Registration.Instance;
        public static TaperEffectiveness_Registration StaticRegistration => TaperEffectiveness_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TaperEffectivenessCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TaperEffectivenessSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITaperEffectivenessGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ITaperEffectivenessGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ITaperEffectivenessGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TaperEffectivenessBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((TaperEffectivenessBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Single FullEffectRadius => _data.Slice(0x0, 0x4).Float();
        public Single TaperWeight => _data.Slice(0x4, 0x4).Float();
        public Single TaperCurse => _data.Slice(0x8, 0x4).Float();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected TaperEffectivenessBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static TaperEffectivenessBinaryOverlay TaperEffectivenessFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new TaperEffectivenessBinaryOverlay(
                bytes: stream.RemainingMemory.Slice(0, 0xC),
                package: package);
            int offset = stream.Position;
            stream.Position += 0xC;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static TaperEffectivenessBinaryOverlay TaperEffectivenessFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return TaperEffectivenessFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TaperEffectivenessMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ITaperEffectivenessGetter rhs) return false;
            return ((TaperEffectivenessCommon)((ITaperEffectivenessGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(ITaperEffectivenessGetter? obj)
        {
            return ((TaperEffectivenessCommon)((ITaperEffectivenessGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((TaperEffectivenessCommon)((ITaperEffectivenessGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

