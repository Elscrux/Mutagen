/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class ComponentDisplayIndex :
        IComponentDisplayIndex,
        IEquatable<IComponentDisplayIndexGetter>,
        ILoquiObjectSetter<ComponentDisplayIndex>
    {
        #region Ctor
        public ComponentDisplayIndex()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region DisplayIndex
        public Byte DisplayIndex { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ComponentDisplayIndexMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IComponentDisplayIndexGetter rhs) return false;
            return ((ComponentDisplayIndexCommon)((IComponentDisplayIndexGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IComponentDisplayIndexGetter? obj)
        {
            return ((ComponentDisplayIndexCommon)((IComponentDisplayIndexGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ComponentDisplayIndexCommon)((IComponentDisplayIndexGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem DisplayIndex)
            {
                this.DisplayIndex = DisplayIndex;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem DisplayIndex;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.DisplayIndex, rhs.DisplayIndex)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.DisplayIndex);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.DisplayIndex)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.DisplayIndex)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ComponentDisplayIndex.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.DisplayIndex = eval(this.DisplayIndex);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ComponentDisplayIndex.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ComponentDisplayIndex.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ComponentDisplayIndex.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.DisplayIndex ?? true)
                    {
                        fg.AppendItem(DisplayIndex, "DisplayIndex");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? DisplayIndex;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ComponentDisplayIndex_FieldIndex enu = (ComponentDisplayIndex_FieldIndex)index;
                switch (enu)
                {
                    case ComponentDisplayIndex_FieldIndex.DisplayIndex:
                        return DisplayIndex;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                ComponentDisplayIndex_FieldIndex enu = (ComponentDisplayIndex_FieldIndex)index;
                switch (enu)
                {
                    case ComponentDisplayIndex_FieldIndex.DisplayIndex:
                        this.DisplayIndex = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                ComponentDisplayIndex_FieldIndex enu = (ComponentDisplayIndex_FieldIndex)index;
                switch (enu)
                {
                    case ComponentDisplayIndex_FieldIndex.DisplayIndex:
                        this.DisplayIndex = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (DisplayIndex != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(DisplayIndex, "DisplayIndex");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.DisplayIndex = this.DisplayIndex.Combine(rhs.DisplayIndex);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool DisplayIndex;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.DisplayIndex = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((DisplayIndex, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = ComponentDisplayIndex_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ComponentDisplayIndexBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ComponentDisplayIndexBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static ComponentDisplayIndex CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new ComponentDisplayIndex();
            ((ComponentDisplayIndexSetterCommon)((IComponentDisplayIndexGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ComponentDisplayIndex item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ComponentDisplayIndexSetterCommon)((IComponentDisplayIndexGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ComponentDisplayIndex GetNew()
        {
            return new ComponentDisplayIndex();
        }

    }
    #endregion

    #region Interface
    public partial interface IComponentDisplayIndex :
        IComponentDisplayIndexGetter,
        ILoquiObjectSetter<IComponentDisplayIndex>
    {
        new Byte DisplayIndex { get; set; }
    }

    public partial interface IComponentDisplayIndexGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IComponentDisplayIndexGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => ComponentDisplayIndex_Registration.Instance;
        Byte DisplayIndex { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ComponentDisplayIndexMixIn
    {
        public static void Clear(this IComponentDisplayIndex item)
        {
            ((ComponentDisplayIndexSetterCommon)((IComponentDisplayIndexGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ComponentDisplayIndex.Mask<bool> GetEqualsMask(
            this IComponentDisplayIndexGetter item,
            IComponentDisplayIndexGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ComponentDisplayIndexCommon)((IComponentDisplayIndexGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IComponentDisplayIndexGetter item,
            string? name = null,
            ComponentDisplayIndex.Mask<bool>? printMask = null)
        {
            return ((ComponentDisplayIndexCommon)((IComponentDisplayIndexGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IComponentDisplayIndexGetter item,
            FileGeneration fg,
            string? name = null,
            ComponentDisplayIndex.Mask<bool>? printMask = null)
        {
            ((ComponentDisplayIndexCommon)((IComponentDisplayIndexGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IComponentDisplayIndexGetter item,
            IComponentDisplayIndexGetter rhs,
            ComponentDisplayIndex.TranslationMask? equalsMask = null)
        {
            return ((ComponentDisplayIndexCommon)((IComponentDisplayIndexGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IComponentDisplayIndex lhs,
            IComponentDisplayIndexGetter rhs)
        {
            ((ComponentDisplayIndexSetterTranslationCommon)((IComponentDisplayIndexGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IComponentDisplayIndex lhs,
            IComponentDisplayIndexGetter rhs,
            ComponentDisplayIndex.TranslationMask? copyMask = null)
        {
            ((ComponentDisplayIndexSetterTranslationCommon)((IComponentDisplayIndexGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IComponentDisplayIndex lhs,
            IComponentDisplayIndexGetter rhs,
            out ComponentDisplayIndex.ErrorMask errorMask,
            ComponentDisplayIndex.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ComponentDisplayIndexSetterTranslationCommon)((IComponentDisplayIndexGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ComponentDisplayIndex.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IComponentDisplayIndex lhs,
            IComponentDisplayIndexGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ComponentDisplayIndexSetterTranslationCommon)((IComponentDisplayIndexGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ComponentDisplayIndex DeepCopy(
            this IComponentDisplayIndexGetter item,
            ComponentDisplayIndex.TranslationMask? copyMask = null)
        {
            return ((ComponentDisplayIndexSetterTranslationCommon)((IComponentDisplayIndexGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ComponentDisplayIndex DeepCopy(
            this IComponentDisplayIndexGetter item,
            out ComponentDisplayIndex.ErrorMask errorMask,
            ComponentDisplayIndex.TranslationMask? copyMask = null)
        {
            return ((ComponentDisplayIndexSetterTranslationCommon)((IComponentDisplayIndexGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ComponentDisplayIndex DeepCopy(
            this IComponentDisplayIndexGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ComponentDisplayIndexSetterTranslationCommon)((IComponentDisplayIndexGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IComponentDisplayIndex item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((ComponentDisplayIndexSetterCommon)((IComponentDisplayIndexGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum ComponentDisplayIndex_FieldIndex
    {
        DisplayIndex = 0,
    }
    #endregion

    #region Registration
    public partial class ComponentDisplayIndex_Registration : ILoquiRegistration
    {
        public static readonly ComponentDisplayIndex_Registration Instance = new ComponentDisplayIndex_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 171,
            version: 0);

        public const string GUID = "4fe3d4d9-5b25-4575-bbab-c5c5a95daed9";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(ComponentDisplayIndex.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ComponentDisplayIndex.ErrorMask);

        public static readonly Type ClassType = typeof(ComponentDisplayIndex);

        public static readonly Type GetterType = typeof(IComponentDisplayIndexGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IComponentDisplayIndex);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.ComponentDisplayIndex";

        public const string Name = "ComponentDisplayIndex";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.CDIX;
        public static readonly Type BinaryWriteTranslation = typeof(ComponentDisplayIndexBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ComponentDisplayIndexSetterCommon
    {
        public static readonly ComponentDisplayIndexSetterCommon Instance = new ComponentDisplayIndexSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IComponentDisplayIndex item)
        {
            ClearPartial();
            item.DisplayIndex = default;
        }
        
        #region Mutagen
        public void RemapLinks(IComponentDisplayIndex obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IComponentDisplayIndex item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.CDIX),
                translationParams?.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ComponentDisplayIndexBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class ComponentDisplayIndexCommon
    {
        public static readonly ComponentDisplayIndexCommon Instance = new ComponentDisplayIndexCommon();

        public ComponentDisplayIndex.Mask<bool> GetEqualsMask(
            IComponentDisplayIndexGetter item,
            IComponentDisplayIndexGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ComponentDisplayIndex.Mask<bool>(false);
            ((ComponentDisplayIndexCommon)((IComponentDisplayIndexGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IComponentDisplayIndexGetter item,
            IComponentDisplayIndexGetter rhs,
            ComponentDisplayIndex.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.DisplayIndex = item.DisplayIndex == rhs.DisplayIndex;
        }
        
        public string ToString(
            IComponentDisplayIndexGetter item,
            string? name = null,
            ComponentDisplayIndex.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IComponentDisplayIndexGetter item,
            FileGeneration fg,
            string? name = null,
            ComponentDisplayIndex.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ComponentDisplayIndex =>");
            }
            else
            {
                fg.AppendLine($"{name} (ComponentDisplayIndex) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IComponentDisplayIndexGetter item,
            FileGeneration fg,
            ComponentDisplayIndex.Mask<bool>? printMask = null)
        {
            if (printMask?.DisplayIndex ?? true)
            {
                fg.AppendItem(item.DisplayIndex, "DisplayIndex");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IComponentDisplayIndexGetter? lhs,
            IComponentDisplayIndexGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)ComponentDisplayIndex_FieldIndex.DisplayIndex) ?? true))
            {
                if (lhs.DisplayIndex != rhs.DisplayIndex) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IComponentDisplayIndexGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.DisplayIndex);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ComponentDisplayIndex.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IComponentDisplayIndexGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class ComponentDisplayIndexSetterTranslationCommon
    {
        public static readonly ComponentDisplayIndexSetterTranslationCommon Instance = new ComponentDisplayIndexSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IComponentDisplayIndex item,
            IComponentDisplayIndexGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)ComponentDisplayIndex_FieldIndex.DisplayIndex) ?? true))
            {
                item.DisplayIndex = rhs.DisplayIndex;
            }
        }
        
        #endregion
        
        public ComponentDisplayIndex DeepCopy(
            IComponentDisplayIndexGetter item,
            ComponentDisplayIndex.TranslationMask? copyMask = null)
        {
            ComponentDisplayIndex ret = (ComponentDisplayIndex)((ComponentDisplayIndexCommon)((IComponentDisplayIndexGetter)item).CommonInstance()!).GetNew();
            ((ComponentDisplayIndexSetterTranslationCommon)((IComponentDisplayIndexGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ComponentDisplayIndex DeepCopy(
            IComponentDisplayIndexGetter item,
            out ComponentDisplayIndex.ErrorMask errorMask,
            ComponentDisplayIndex.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ComponentDisplayIndex ret = (ComponentDisplayIndex)((ComponentDisplayIndexCommon)((IComponentDisplayIndexGetter)item).CommonInstance()!).GetNew();
            ((ComponentDisplayIndexSetterTranslationCommon)((IComponentDisplayIndexGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ComponentDisplayIndex.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ComponentDisplayIndex DeepCopy(
            IComponentDisplayIndexGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ComponentDisplayIndex ret = (ComponentDisplayIndex)((ComponentDisplayIndexCommon)((IComponentDisplayIndexGetter)item).CommonInstance()!).GetNew();
            ((ComponentDisplayIndexSetterTranslationCommon)((IComponentDisplayIndexGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class ComponentDisplayIndex
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ComponentDisplayIndex_Registration.Instance;
        public static ComponentDisplayIndex_Registration StaticRegistration => ComponentDisplayIndex_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ComponentDisplayIndexCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ComponentDisplayIndexSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ComponentDisplayIndexSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IComponentDisplayIndexGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IComponentDisplayIndexGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IComponentDisplayIndexGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ComponentDisplayIndexBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ComponentDisplayIndexBinaryWriteTranslation Instance = new ComponentDisplayIndexBinaryWriteTranslation();

        public static void WriteEmbedded(
            IComponentDisplayIndexGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.DisplayIndex);
        }

        public void Write(
            MutagenWriter writer,
            IComponentDisplayIndexGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.CDIX),
                overflowRecord: translationParams?.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IComponentDisplayIndexGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class ComponentDisplayIndexBinaryCreateTranslation
    {
        public readonly static ComponentDisplayIndexBinaryCreateTranslation Instance = new ComponentDisplayIndexBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IComponentDisplayIndex item,
            MutagenFrame frame)
        {
            item.DisplayIndex = frame.ReadUInt8();
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ComponentDisplayIndexBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IComponentDisplayIndexGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ComponentDisplayIndexBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ComponentDisplayIndexBinaryOverlay :
        PluginBinaryOverlay,
        IComponentDisplayIndexGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ComponentDisplayIndex_Registration.Instance;
        public static ComponentDisplayIndex_Registration StaticRegistration => ComponentDisplayIndex_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ComponentDisplayIndexCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ComponentDisplayIndexSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IComponentDisplayIndexGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IComponentDisplayIndexGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IComponentDisplayIndexGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ComponentDisplayIndexBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ComponentDisplayIndexBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Byte DisplayIndex => _data.Span[0x0];
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ComponentDisplayIndexBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ComponentDisplayIndexBinaryOverlay ComponentDisplayIndexFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new ComponentDisplayIndexBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants, parseParams),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0x1 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ComponentDisplayIndexBinaryOverlay ComponentDisplayIndexFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return ComponentDisplayIndexFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ComponentDisplayIndexMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IComponentDisplayIndexGetter rhs) return false;
            return ((ComponentDisplayIndexCommon)((IComponentDisplayIndexGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IComponentDisplayIndexGetter? obj)
        {
            return ((ComponentDisplayIndexCommon)((IComponentDisplayIndexGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ComponentDisplayIndexCommon)((IComponentDisplayIndexGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

