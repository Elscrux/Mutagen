/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class SoundRepeat :
        IEquatable<ISoundRepeatGetter>,
        ILoquiObjectSetter<SoundRepeat>,
        ISoundRepeat
    {
        #region Ctor
        public SoundRepeat()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Versioning
        public SoundRepeat.VersioningBreaks Versioning { get; set; } = default(SoundRepeat.VersioningBreaks);
        #endregion
        #region MinTime
        public Single MinTime { get; set; } = default(Single);
        #endregion
        #region MaxTime
        public Single MaxTime { get; set; } = default(Single);
        #endregion
        #region Stackable
        public Boolean Stackable { get; set; } = default(Boolean);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SoundRepeatMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISoundRepeatGetter rhs) return false;
            return ((SoundRepeatCommon)((ISoundRepeatGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISoundRepeatGetter? obj)
        {
            return ((SoundRepeatCommon)((ISoundRepeatGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SoundRepeatCommon)((ISoundRepeatGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Versioning = initialValue;
                this.MinTime = initialValue;
                this.MaxTime = initialValue;
                this.Stackable = initialValue;
            }

            public Mask(
                TItem Versioning,
                TItem MinTime,
                TItem MaxTime,
                TItem Stackable)
            {
                this.Versioning = Versioning;
                this.MinTime = MinTime;
                this.MaxTime = MaxTime;
                this.Stackable = Stackable;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Versioning;
            public TItem MinTime;
            public TItem MaxTime;
            public TItem Stackable;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Versioning, rhs.Versioning)) return false;
                if (!object.Equals(this.MinTime, rhs.MinTime)) return false;
                if (!object.Equals(this.MaxTime, rhs.MaxTime)) return false;
                if (!object.Equals(this.Stackable, rhs.Stackable)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Versioning);
                hash.Add(this.MinTime);
                hash.Add(this.MaxTime);
                hash.Add(this.Stackable);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Versioning)) return false;
                if (!eval(this.MinTime)) return false;
                if (!eval(this.MaxTime)) return false;
                if (!eval(this.Stackable)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Versioning)) return true;
                if (eval(this.MinTime)) return true;
                if (eval(this.MaxTime)) return true;
                if (eval(this.Stackable)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SoundRepeat.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Versioning = eval(this.Versioning);
                obj.MinTime = eval(this.MinTime);
                obj.MaxTime = eval(this.MaxTime);
                obj.Stackable = eval(this.Stackable);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(SoundRepeat.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, SoundRepeat.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(SoundRepeat.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Versioning ?? true)
                    {
                        sb.AppendItem(Versioning, "Versioning");
                    }
                    if (printMask?.MinTime ?? true)
                    {
                        sb.AppendItem(MinTime, "MinTime");
                    }
                    if (printMask?.MaxTime ?? true)
                    {
                        sb.AppendItem(MaxTime, "MaxTime");
                    }
                    if (printMask?.Stackable ?? true)
                    {
                        sb.AppendItem(Stackable, "Stackable");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Versioning;
            public Exception? MinTime;
            public Exception? MaxTime;
            public Exception? Stackable;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                SoundRepeat_FieldIndex enu = (SoundRepeat_FieldIndex)index;
                switch (enu)
                {
                    case SoundRepeat_FieldIndex.Versioning:
                        return Versioning;
                    case SoundRepeat_FieldIndex.MinTime:
                        return MinTime;
                    case SoundRepeat_FieldIndex.MaxTime:
                        return MaxTime;
                    case SoundRepeat_FieldIndex.Stackable:
                        return Stackable;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                SoundRepeat_FieldIndex enu = (SoundRepeat_FieldIndex)index;
                switch (enu)
                {
                    case SoundRepeat_FieldIndex.Versioning:
                        this.Versioning = ex;
                        break;
                    case SoundRepeat_FieldIndex.MinTime:
                        this.MinTime = ex;
                        break;
                    case SoundRepeat_FieldIndex.MaxTime:
                        this.MaxTime = ex;
                        break;
                    case SoundRepeat_FieldIndex.Stackable:
                        this.Stackable = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                SoundRepeat_FieldIndex enu = (SoundRepeat_FieldIndex)index;
                switch (enu)
                {
                    case SoundRepeat_FieldIndex.Versioning:
                        this.Versioning = (Exception?)obj;
                        break;
                    case SoundRepeat_FieldIndex.MinTime:
                        this.MinTime = (Exception?)obj;
                        break;
                    case SoundRepeat_FieldIndex.MaxTime:
                        this.MaxTime = (Exception?)obj;
                        break;
                    case SoundRepeat_FieldIndex.Stackable:
                        this.Stackable = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Versioning != null) return true;
                if (MinTime != null) return true;
                if (MaxTime != null) return true;
                if (Stackable != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Versioning, "Versioning");
                }
                {
                    sb.AppendItem(MinTime, "MinTime");
                }
                {
                    sb.AppendItem(MaxTime, "MaxTime");
                }
                {
                    sb.AppendItem(Stackable, "Stackable");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Versioning = this.Versioning.Combine(rhs.Versioning);
                ret.MinTime = this.MinTime.Combine(rhs.MinTime);
                ret.MaxTime = this.MaxTime.Combine(rhs.MaxTime);
                ret.Stackable = this.Stackable.Combine(rhs.Stackable);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Versioning;
            public bool MinTime;
            public bool MaxTime;
            public bool Stackable;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Versioning = defaultOn;
                this.MinTime = defaultOn;
                this.MaxTime = defaultOn;
                this.Stackable = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Versioning, null));
                ret.Add((MinTime, null));
                ret.Add((MaxTime, null));
                ret.Add((Stackable, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        [Flags]
        public enum VersioningBreaks
        {
            Break0 = 1
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => SoundRepeatBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SoundRepeatBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static SoundRepeat CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new SoundRepeat();
            ((SoundRepeatSetterCommon)((ISoundRepeatGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SoundRepeat item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SoundRepeatSetterCommon)((ISoundRepeatGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static SoundRepeat GetNew()
        {
            return new SoundRepeat();
        }

    }
    #endregion

    #region Interface
    public partial interface ISoundRepeat :
        ILoquiObjectSetter<ISoundRepeat>,
        ISoundRepeatGetter
    {
        new SoundRepeat.VersioningBreaks Versioning { get; set; }
        new Single MinTime { get; set; }
        new Single MaxTime { get; set; }
        new Boolean Stackable { get; set; }
    }

    public partial interface ISoundRepeatGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<ISoundRepeatGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => SoundRepeat_Registration.Instance;
        SoundRepeat.VersioningBreaks Versioning { get; }
        Single MinTime { get; }
        Single MaxTime { get; }
        Boolean Stackable { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SoundRepeatMixIn
    {
        public static void Clear(this ISoundRepeat item)
        {
            ((SoundRepeatSetterCommon)((ISoundRepeatGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SoundRepeat.Mask<bool> GetEqualsMask(
            this ISoundRepeatGetter item,
            ISoundRepeatGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SoundRepeatCommon)((ISoundRepeatGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ISoundRepeatGetter item,
            string? name = null,
            SoundRepeat.Mask<bool>? printMask = null)
        {
            return ((SoundRepeatCommon)((ISoundRepeatGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ISoundRepeatGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SoundRepeat.Mask<bool>? printMask = null)
        {
            ((SoundRepeatCommon)((ISoundRepeatGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISoundRepeatGetter item,
            ISoundRepeatGetter rhs,
            SoundRepeat.TranslationMask? equalsMask = null)
        {
            return ((SoundRepeatCommon)((ISoundRepeatGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISoundRepeat lhs,
            ISoundRepeatGetter rhs)
        {
            ((SoundRepeatSetterTranslationCommon)((ISoundRepeatGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ISoundRepeat lhs,
            ISoundRepeatGetter rhs,
            SoundRepeat.TranslationMask? copyMask = null)
        {
            ((SoundRepeatSetterTranslationCommon)((ISoundRepeatGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ISoundRepeat lhs,
            ISoundRepeatGetter rhs,
            out SoundRepeat.ErrorMask errorMask,
            SoundRepeat.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SoundRepeatSetterTranslationCommon)((ISoundRepeatGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SoundRepeat.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISoundRepeat lhs,
            ISoundRepeatGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SoundRepeatSetterTranslationCommon)((ISoundRepeatGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SoundRepeat DeepCopy(
            this ISoundRepeatGetter item,
            SoundRepeat.TranslationMask? copyMask = null)
        {
            return ((SoundRepeatSetterTranslationCommon)((ISoundRepeatGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SoundRepeat DeepCopy(
            this ISoundRepeatGetter item,
            out SoundRepeat.ErrorMask errorMask,
            SoundRepeat.TranslationMask? copyMask = null)
        {
            return ((SoundRepeatSetterTranslationCommon)((ISoundRepeatGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SoundRepeat DeepCopy(
            this ISoundRepeatGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SoundRepeatSetterTranslationCommon)((ISoundRepeatGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISoundRepeat item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((SoundRepeatSetterCommon)((ISoundRepeatGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum SoundRepeat_FieldIndex
    {
        Versioning = 0,
        MinTime = 1,
        MaxTime = 2,
        Stackable = 3,
    }
    #endregion

    #region Registration
    internal partial class SoundRepeat_Registration : ILoquiRegistration
    {
        public static readonly SoundRepeat_Registration Instance = new SoundRepeat_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(SoundRepeat.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SoundRepeat.ErrorMask);

        public static readonly Type ClassType = typeof(SoundRepeat);

        public static readonly Type GetterType = typeof(ISoundRepeatGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISoundRepeat);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.SoundRepeat";

        public const string Name = "SoundRepeat";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.REPT;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.REPT);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(SoundRepeatBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class SoundRepeatSetterCommon
    {
        public static readonly SoundRepeatSetterCommon Instance = new SoundRepeatSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISoundRepeat item)
        {
            ClearPartial();
            item.Versioning = default(SoundRepeat.VersioningBreaks);
            item.MinTime = default(Single);
            item.MaxTime = default(Single);
            item.Stackable = default(Boolean);
        }
        
        #region Mutagen
        public void RemapLinks(ISoundRepeat obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISoundRepeat item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.REPT),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: SoundRepeatBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class SoundRepeatCommon
    {
        public static readonly SoundRepeatCommon Instance = new SoundRepeatCommon();

        public SoundRepeat.Mask<bool> GetEqualsMask(
            ISoundRepeatGetter item,
            ISoundRepeatGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SoundRepeat.Mask<bool>(false);
            ((SoundRepeatCommon)((ISoundRepeatGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISoundRepeatGetter item,
            ISoundRepeatGetter rhs,
            SoundRepeat.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Versioning = item.Versioning == rhs.Versioning;
            ret.MinTime = item.MinTime.EqualsWithin(rhs.MinTime);
            ret.MaxTime = item.MaxTime.EqualsWithin(rhs.MaxTime);
            ret.Stackable = item.Stackable == rhs.Stackable;
        }
        
        public string Print(
            ISoundRepeatGetter item,
            string? name = null,
            SoundRepeat.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISoundRepeatGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SoundRepeat.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"SoundRepeat =>");
            }
            else
            {
                sb.AppendLine($"{name} (SoundRepeat) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISoundRepeatGetter item,
            StructuredStringBuilder sb,
            SoundRepeat.Mask<bool>? printMask = null)
        {
            if (printMask?.Versioning ?? true)
            {
                sb.AppendItem(item.Versioning, "Versioning");
            }
            if (printMask?.MinTime ?? true)
            {
                sb.AppendItem(item.MinTime, "MinTime");
            }
            if (printMask?.MaxTime ?? true)
            {
                sb.AppendItem(item.MaxTime, "MaxTime");
            }
            if (printMask?.Stackable ?? true)
            {
                sb.AppendItem(item.Stackable, "Stackable");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISoundRepeatGetter? lhs,
            ISoundRepeatGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)SoundRepeat_FieldIndex.Versioning) ?? true))
            {
                if (lhs.Versioning != rhs.Versioning) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundRepeat_FieldIndex.MinTime) ?? true))
            {
                if (!lhs.MinTime.EqualsWithin(rhs.MinTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundRepeat_FieldIndex.MaxTime) ?? true))
            {
                if (!lhs.MaxTime.EqualsWithin(rhs.MaxTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundRepeat_FieldIndex.Stackable) ?? true))
            {
                if (lhs.Stackable != rhs.Stackable) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ISoundRepeatGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Versioning);
            hash.Add(item.MinTime);
            hash.Add(item.MaxTime);
            hash.Add(item.Stackable);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return SoundRepeat.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISoundRepeatGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class SoundRepeatSetterTranslationCommon
    {
        public static readonly SoundRepeatSetterTranslationCommon Instance = new SoundRepeatSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISoundRepeat item,
            ISoundRepeatGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)SoundRepeat_FieldIndex.Versioning) ?? true))
            {
                item.Versioning = rhs.Versioning;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundRepeat_FieldIndex.MinTime) ?? true))
            {
                item.MinTime = rhs.MinTime;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundRepeat_FieldIndex.MaxTime) ?? true))
            {
                item.MaxTime = rhs.MaxTime;
            }
            if (rhs.Versioning.HasFlag(SoundRepeat.VersioningBreaks.Break0)) return;
            if ((copyMask?.GetShouldTranslate((int)SoundRepeat_FieldIndex.Stackable) ?? true))
            {
                item.Stackable = rhs.Stackable;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ISoundRepeat item,
            ISoundRepeatGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public SoundRepeat DeepCopy(
            ISoundRepeatGetter item,
            SoundRepeat.TranslationMask? copyMask = null)
        {
            SoundRepeat ret = (SoundRepeat)((SoundRepeatCommon)((ISoundRepeatGetter)item).CommonInstance()!).GetNew();
            ((SoundRepeatSetterTranslationCommon)((ISoundRepeatGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SoundRepeat DeepCopy(
            ISoundRepeatGetter item,
            out SoundRepeat.ErrorMask errorMask,
            SoundRepeat.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SoundRepeat ret = (SoundRepeat)((SoundRepeatCommon)((ISoundRepeatGetter)item).CommonInstance()!).GetNew();
            ((SoundRepeatSetterTranslationCommon)((ISoundRepeatGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SoundRepeat.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SoundRepeat DeepCopy(
            ISoundRepeatGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SoundRepeat ret = (SoundRepeat)((SoundRepeatCommon)((ISoundRepeatGetter)item).CommonInstance()!).GetNew();
            ((SoundRepeatSetterTranslationCommon)((ISoundRepeatGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class SoundRepeat
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundRepeat_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => SoundRepeat_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SoundRepeatCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return SoundRepeatSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SoundRepeatSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISoundRepeatGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ISoundRepeatGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ISoundRepeatGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class SoundRepeatBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly SoundRepeatBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ISoundRepeatGetter item,
            MutagenWriter writer)
        {
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.MinTime);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.MaxTime);
            if (!item.Versioning.HasFlag(SoundRepeat.VersioningBreaks.Break0))
            {
                writer.Write(item.Stackable);
            }
        }

        public void Write(
            MutagenWriter writer,
            ISoundRepeatGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.REPT),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ISoundRepeatGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class SoundRepeatBinaryCreateTranslation
    {
        public static readonly SoundRepeatBinaryCreateTranslation Instance = new SoundRepeatBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ISoundRepeat item,
            MutagenFrame frame)
        {
            item.MinTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.MaxTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            if (frame.Complete)
            {
                item.Versioning |= SoundRepeat.VersioningBreaks.Break0;
                return;
            }
            item.Stackable = frame.ReadBoolean();
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class SoundRepeatBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ISoundRepeatGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SoundRepeatBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class SoundRepeatBinaryOverlay :
        PluginBinaryOverlay,
        ISoundRepeatGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundRepeat_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => SoundRepeat_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SoundRepeatCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SoundRepeatSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISoundRepeatGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ISoundRepeatGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ISoundRepeatGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => SoundRepeatBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SoundRepeatBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public SoundRepeat.VersioningBreaks Versioning { get; private set; }
        public Single MinTime => _structData.Slice(0x0, 0x4).Float();
        public Single MaxTime => _structData.Slice(0x4, 0x4).Float();
        public Boolean Stackable => _structData.Length <= 0x8 ? default : _structData.Slice(0x8, 0x1)[0] >= 1;
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SoundRepeatBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ISoundRepeatGetter SoundRepeatFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x9,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new SoundRepeatBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            if (ret._structData.Length <= 0x8)
            {
                ret.Versioning |= SoundRepeat.VersioningBreaks.Break0;
            }
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ISoundRepeatGetter SoundRepeatFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return SoundRepeatFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SoundRepeatMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISoundRepeatGetter rhs) return false;
            return ((SoundRepeatCommon)((ISoundRepeatGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISoundRepeatGetter? obj)
        {
            return ((SoundRepeatCommon)((ISoundRepeatGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SoundRepeatCommon)((ISoundRepeatGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

