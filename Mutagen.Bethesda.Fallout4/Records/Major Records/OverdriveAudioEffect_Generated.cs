/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class OverdriveAudioEffect :
        AAudioEffect,
        IEquatable<IOverdriveAudioEffectGetter>,
        ILoquiObjectSetter<OverdriveAudioEffect>,
        IOverdriveAudioEffect
    {
        #region Ctor
        public OverdriveAudioEffect()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region InputGain
        public Single InputGain { get; set; } = default(Single);
        #endregion
        #region OutputGain
        public Single OutputGain { get; set; } = default(Single);
        #endregion
        #region UpperThreshold
        public Single UpperThreshold { get; set; } = default(Single);
        #endregion
        #region LowerThreshold
        public Single LowerThreshold { get; set; } = default(Single);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            OverdriveAudioEffectMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IOverdriveAudioEffectGetter rhs) return false;
            return ((OverdriveAudioEffectCommon)((IOverdriveAudioEffectGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IOverdriveAudioEffectGetter? obj)
        {
            return ((OverdriveAudioEffectCommon)((IOverdriveAudioEffectGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((OverdriveAudioEffectCommon)((IOverdriveAudioEffectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AAudioEffect.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.InputGain = initialValue;
                this.OutputGain = initialValue;
                this.UpperThreshold = initialValue;
                this.LowerThreshold = initialValue;
            }

            public Mask(
                TItem Enabled,
                TItem InputGain,
                TItem OutputGain,
                TItem UpperThreshold,
                TItem LowerThreshold)
            : base(Enabled: Enabled)
            {
                this.InputGain = InputGain;
                this.OutputGain = OutputGain;
                this.UpperThreshold = UpperThreshold;
                this.LowerThreshold = LowerThreshold;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem InputGain;
            public TItem OutputGain;
            public TItem UpperThreshold;
            public TItem LowerThreshold;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.InputGain, rhs.InputGain)) return false;
                if (!object.Equals(this.OutputGain, rhs.OutputGain)) return false;
                if (!object.Equals(this.UpperThreshold, rhs.UpperThreshold)) return false;
                if (!object.Equals(this.LowerThreshold, rhs.LowerThreshold)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.InputGain);
                hash.Add(this.OutputGain);
                hash.Add(this.UpperThreshold);
                hash.Add(this.LowerThreshold);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.InputGain)) return false;
                if (!eval(this.OutputGain)) return false;
                if (!eval(this.UpperThreshold)) return false;
                if (!eval(this.LowerThreshold)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.InputGain)) return true;
                if (eval(this.OutputGain)) return true;
                if (eval(this.UpperThreshold)) return true;
                if (eval(this.LowerThreshold)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new OverdriveAudioEffect.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.InputGain = eval(this.InputGain);
                obj.OutputGain = eval(this.OutputGain);
                obj.UpperThreshold = eval(this.UpperThreshold);
                obj.LowerThreshold = eval(this.LowerThreshold);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(OverdriveAudioEffect.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, OverdriveAudioEffect.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(OverdriveAudioEffect.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.InputGain ?? true)
                    {
                        sb.AppendItem(InputGain, "InputGain");
                    }
                    if (printMask?.OutputGain ?? true)
                    {
                        sb.AppendItem(OutputGain, "OutputGain");
                    }
                    if (printMask?.UpperThreshold ?? true)
                    {
                        sb.AppendItem(UpperThreshold, "UpperThreshold");
                    }
                    if (printMask?.LowerThreshold ?? true)
                    {
                        sb.AppendItem(LowerThreshold, "LowerThreshold");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            AAudioEffect.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? InputGain;
            public Exception? OutputGain;
            public Exception? UpperThreshold;
            public Exception? LowerThreshold;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                OverdriveAudioEffect_FieldIndex enu = (OverdriveAudioEffect_FieldIndex)index;
                switch (enu)
                {
                    case OverdriveAudioEffect_FieldIndex.InputGain:
                        return InputGain;
                    case OverdriveAudioEffect_FieldIndex.OutputGain:
                        return OutputGain;
                    case OverdriveAudioEffect_FieldIndex.UpperThreshold:
                        return UpperThreshold;
                    case OverdriveAudioEffect_FieldIndex.LowerThreshold:
                        return LowerThreshold;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                OverdriveAudioEffect_FieldIndex enu = (OverdriveAudioEffect_FieldIndex)index;
                switch (enu)
                {
                    case OverdriveAudioEffect_FieldIndex.InputGain:
                        this.InputGain = ex;
                        break;
                    case OverdriveAudioEffect_FieldIndex.OutputGain:
                        this.OutputGain = ex;
                        break;
                    case OverdriveAudioEffect_FieldIndex.UpperThreshold:
                        this.UpperThreshold = ex;
                        break;
                    case OverdriveAudioEffect_FieldIndex.LowerThreshold:
                        this.LowerThreshold = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                OverdriveAudioEffect_FieldIndex enu = (OverdriveAudioEffect_FieldIndex)index;
                switch (enu)
                {
                    case OverdriveAudioEffect_FieldIndex.InputGain:
                        this.InputGain = (Exception?)obj;
                        break;
                    case OverdriveAudioEffect_FieldIndex.OutputGain:
                        this.OutputGain = (Exception?)obj;
                        break;
                    case OverdriveAudioEffect_FieldIndex.UpperThreshold:
                        this.UpperThreshold = (Exception?)obj;
                        break;
                    case OverdriveAudioEffect_FieldIndex.LowerThreshold:
                        this.LowerThreshold = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (InputGain != null) return true;
                if (OutputGain != null) return true;
                if (UpperThreshold != null) return true;
                if (LowerThreshold != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(InputGain, "InputGain");
                }
                {
                    sb.AppendItem(OutputGain, "OutputGain");
                }
                {
                    sb.AppendItem(UpperThreshold, "UpperThreshold");
                }
                {
                    sb.AppendItem(LowerThreshold, "LowerThreshold");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.InputGain = this.InputGain.Combine(rhs.InputGain);
                ret.OutputGain = this.OutputGain.Combine(rhs.OutputGain);
                ret.UpperThreshold = this.UpperThreshold.Combine(rhs.UpperThreshold);
                ret.LowerThreshold = this.LowerThreshold.Combine(rhs.LowerThreshold);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AAudioEffect.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool InputGain;
            public bool OutputGain;
            public bool UpperThreshold;
            public bool LowerThreshold;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.InputGain = defaultOn;
                this.OutputGain = defaultOn;
                this.UpperThreshold = defaultOn;
                this.LowerThreshold = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((InputGain, null));
                ret.Add((OutputGain, null));
                ret.Add((UpperThreshold, null));
                ret.Add((LowerThreshold, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => OverdriveAudioEffectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((OverdriveAudioEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static OverdriveAudioEffect CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new OverdriveAudioEffect();
            ((OverdriveAudioEffectSetterCommon)((IOverdriveAudioEffectGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out OverdriveAudioEffect item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((OverdriveAudioEffectSetterCommon)((IOverdriveAudioEffectGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new OverdriveAudioEffect GetNew()
        {
            return new OverdriveAudioEffect();
        }

    }
    #endregion

    #region Interface
    public partial interface IOverdriveAudioEffect :
        IAAudioEffect,
        ILoquiObjectSetter<IOverdriveAudioEffect>,
        IOverdriveAudioEffectGetter
    {
        new Single InputGain { get; set; }
        new Single OutputGain { get; set; }
        new Single UpperThreshold { get; set; }
        new Single LowerThreshold { get; set; }
    }

    public partial interface IOverdriveAudioEffectGetter :
        IAAudioEffectGetter,
        IBinaryItem,
        ILoquiObject<IOverdriveAudioEffectGetter>
    {
        static new ILoquiRegistration StaticRegistration => OverdriveAudioEffect_Registration.Instance;
        Single InputGain { get; }
        Single OutputGain { get; }
        Single UpperThreshold { get; }
        Single LowerThreshold { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class OverdriveAudioEffectMixIn
    {
        public static void Clear(this IOverdriveAudioEffect item)
        {
            ((OverdriveAudioEffectSetterCommon)((IOverdriveAudioEffectGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static OverdriveAudioEffect.Mask<bool> GetEqualsMask(
            this IOverdriveAudioEffectGetter item,
            IOverdriveAudioEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((OverdriveAudioEffectCommon)((IOverdriveAudioEffectGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IOverdriveAudioEffectGetter item,
            string? name = null,
            OverdriveAudioEffect.Mask<bool>? printMask = null)
        {
            return ((OverdriveAudioEffectCommon)((IOverdriveAudioEffectGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IOverdriveAudioEffectGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            OverdriveAudioEffect.Mask<bool>? printMask = null)
        {
            ((OverdriveAudioEffectCommon)((IOverdriveAudioEffectGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IOverdriveAudioEffectGetter item,
            IOverdriveAudioEffectGetter rhs,
            OverdriveAudioEffect.TranslationMask? equalsMask = null)
        {
            return ((OverdriveAudioEffectCommon)((IOverdriveAudioEffectGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IOverdriveAudioEffect lhs,
            IOverdriveAudioEffectGetter rhs,
            out OverdriveAudioEffect.ErrorMask errorMask,
            OverdriveAudioEffect.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((OverdriveAudioEffectSetterTranslationCommon)((IOverdriveAudioEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = OverdriveAudioEffect.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IOverdriveAudioEffect lhs,
            IOverdriveAudioEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((OverdriveAudioEffectSetterTranslationCommon)((IOverdriveAudioEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static OverdriveAudioEffect DeepCopy(
            this IOverdriveAudioEffectGetter item,
            OverdriveAudioEffect.TranslationMask? copyMask = null)
        {
            return ((OverdriveAudioEffectSetterTranslationCommon)((IOverdriveAudioEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static OverdriveAudioEffect DeepCopy(
            this IOverdriveAudioEffectGetter item,
            out OverdriveAudioEffect.ErrorMask errorMask,
            OverdriveAudioEffect.TranslationMask? copyMask = null)
        {
            return ((OverdriveAudioEffectSetterTranslationCommon)((IOverdriveAudioEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static OverdriveAudioEffect DeepCopy(
            this IOverdriveAudioEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((OverdriveAudioEffectSetterTranslationCommon)((IOverdriveAudioEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IOverdriveAudioEffect item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((OverdriveAudioEffectSetterCommon)((IOverdriveAudioEffectGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum OverdriveAudioEffect_FieldIndex
    {
        Enabled = 0,
        InputGain = 1,
        OutputGain = 2,
        UpperThreshold = 3,
        LowerThreshold = 4,
    }
    #endregion

    #region Registration
    internal partial class OverdriveAudioEffect_Registration : ILoquiRegistration
    {
        public static readonly OverdriveAudioEffect_Registration Instance = new OverdriveAudioEffect_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(OverdriveAudioEffect.Mask<>);

        public static readonly Type ErrorMaskType = typeof(OverdriveAudioEffect.ErrorMask);

        public static readonly Type ClassType = typeof(OverdriveAudioEffect);

        public static readonly Type GetterType = typeof(IOverdriveAudioEffectGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IOverdriveAudioEffect);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.OverdriveAudioEffect";

        public const string Name = "OverdriveAudioEffect";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(OverdriveAudioEffectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class OverdriveAudioEffectSetterCommon : AAudioEffectSetterCommon
    {
        public new static readonly OverdriveAudioEffectSetterCommon Instance = new OverdriveAudioEffectSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IOverdriveAudioEffect item)
        {
            ClearPartial();
            item.InputGain = default(Single);
            item.OutputGain = default(Single);
            item.UpperThreshold = default(Single);
            item.LowerThreshold = default(Single);
            base.Clear(item);
        }
        
        public override void Clear(IAAudioEffect item)
        {
            Clear(item: (IOverdriveAudioEffect)item);
        }
        
        #region Mutagen
        public void RemapLinks(IOverdriveAudioEffect obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IOverdriveAudioEffect item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: OverdriveAudioEffectBinaryCreateTranslation.FillBinaryStructs);
        }
        
        public override void CopyInFromBinary(
            IAAudioEffect item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (OverdriveAudioEffect)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class OverdriveAudioEffectCommon : AAudioEffectCommon
    {
        public new static readonly OverdriveAudioEffectCommon Instance = new OverdriveAudioEffectCommon();

        public OverdriveAudioEffect.Mask<bool> GetEqualsMask(
            IOverdriveAudioEffectGetter item,
            IOverdriveAudioEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new OverdriveAudioEffect.Mask<bool>(false);
            ((OverdriveAudioEffectCommon)((IOverdriveAudioEffectGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IOverdriveAudioEffectGetter item,
            IOverdriveAudioEffectGetter rhs,
            OverdriveAudioEffect.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.InputGain = item.InputGain.EqualsWithin(rhs.InputGain);
            ret.OutputGain = item.OutputGain.EqualsWithin(rhs.OutputGain);
            ret.UpperThreshold = item.UpperThreshold.EqualsWithin(rhs.UpperThreshold);
            ret.LowerThreshold = item.LowerThreshold.EqualsWithin(rhs.LowerThreshold);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IOverdriveAudioEffectGetter item,
            string? name = null,
            OverdriveAudioEffect.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IOverdriveAudioEffectGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            OverdriveAudioEffect.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"OverdriveAudioEffect =>");
            }
            else
            {
                sb.AppendLine($"{name} (OverdriveAudioEffect) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IOverdriveAudioEffectGetter item,
            StructuredStringBuilder sb,
            OverdriveAudioEffect.Mask<bool>? printMask = null)
        {
            AAudioEffectCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.InputGain ?? true)
            {
                sb.AppendItem(item.InputGain, "InputGain");
            }
            if (printMask?.OutputGain ?? true)
            {
                sb.AppendItem(item.OutputGain, "OutputGain");
            }
            if (printMask?.UpperThreshold ?? true)
            {
                sb.AppendItem(item.UpperThreshold, "UpperThreshold");
            }
            if (printMask?.LowerThreshold ?? true)
            {
                sb.AppendItem(item.LowerThreshold, "LowerThreshold");
            }
        }
        
        public static OverdriveAudioEffect_FieldIndex ConvertFieldIndex(AAudioEffect_FieldIndex index)
        {
            switch (index)
            {
                case AAudioEffect_FieldIndex.Enabled:
                    return (OverdriveAudioEffect_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IOverdriveAudioEffectGetter? lhs,
            IOverdriveAudioEffectGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAAudioEffectGetter)lhs, (IAAudioEffectGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)OverdriveAudioEffect_FieldIndex.InputGain) ?? true))
            {
                if (!lhs.InputGain.EqualsWithin(rhs.InputGain)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OverdriveAudioEffect_FieldIndex.OutputGain) ?? true))
            {
                if (!lhs.OutputGain.EqualsWithin(rhs.OutputGain)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OverdriveAudioEffect_FieldIndex.UpperThreshold) ?? true))
            {
                if (!lhs.UpperThreshold.EqualsWithin(rhs.UpperThreshold)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OverdriveAudioEffect_FieldIndex.LowerThreshold) ?? true))
            {
                if (!lhs.LowerThreshold.EqualsWithin(rhs.LowerThreshold)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAAudioEffectGetter? lhs,
            IAAudioEffectGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IOverdriveAudioEffectGetter?)lhs,
                rhs: rhs as IOverdriveAudioEffectGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IOverdriveAudioEffectGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.InputGain);
            hash.Add(item.OutputGain);
            hash.Add(item.UpperThreshold);
            hash.Add(item.LowerThreshold);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAAudioEffectGetter item)
        {
            return GetHashCode(item: (IOverdriveAudioEffectGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return OverdriveAudioEffect.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IOverdriveAudioEffectGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class OverdriveAudioEffectSetterTranslationCommon : AAudioEffectSetterTranslationCommon
    {
        public new static readonly OverdriveAudioEffectSetterTranslationCommon Instance = new OverdriveAudioEffectSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IOverdriveAudioEffect item,
            IOverdriveAudioEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAAudioEffect)item,
                (IAAudioEffectGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)OverdriveAudioEffect_FieldIndex.InputGain) ?? true))
            {
                item.InputGain = rhs.InputGain;
            }
            if ((copyMask?.GetShouldTranslate((int)OverdriveAudioEffect_FieldIndex.OutputGain) ?? true))
            {
                item.OutputGain = rhs.OutputGain;
            }
            if ((copyMask?.GetShouldTranslate((int)OverdriveAudioEffect_FieldIndex.UpperThreshold) ?? true))
            {
                item.UpperThreshold = rhs.UpperThreshold;
            }
            if ((copyMask?.GetShouldTranslate((int)OverdriveAudioEffect_FieldIndex.LowerThreshold) ?? true))
            {
                item.LowerThreshold = rhs.LowerThreshold;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IOverdriveAudioEffect item,
            IOverdriveAudioEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        
        public override void DeepCopyIn(
            IAAudioEffect item,
            IAAudioEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IOverdriveAudioEffect)item,
                rhs: (IOverdriveAudioEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public OverdriveAudioEffect DeepCopy(
            IOverdriveAudioEffectGetter item,
            OverdriveAudioEffect.TranslationMask? copyMask = null)
        {
            OverdriveAudioEffect ret = (OverdriveAudioEffect)((OverdriveAudioEffectCommon)((IOverdriveAudioEffectGetter)item).CommonInstance()!).GetNew();
            ((OverdriveAudioEffectSetterTranslationCommon)((IOverdriveAudioEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public OverdriveAudioEffect DeepCopy(
            IOverdriveAudioEffectGetter item,
            out OverdriveAudioEffect.ErrorMask errorMask,
            OverdriveAudioEffect.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            OverdriveAudioEffect ret = (OverdriveAudioEffect)((OverdriveAudioEffectCommon)((IOverdriveAudioEffectGetter)item).CommonInstance()!).GetNew();
            ((OverdriveAudioEffectSetterTranslationCommon)((IOverdriveAudioEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = OverdriveAudioEffect.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public OverdriveAudioEffect DeepCopy(
            IOverdriveAudioEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            OverdriveAudioEffect ret = (OverdriveAudioEffect)((OverdriveAudioEffectCommon)((IOverdriveAudioEffectGetter)item).CommonInstance()!).GetNew();
            ((OverdriveAudioEffectSetterTranslationCommon)((IOverdriveAudioEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class OverdriveAudioEffect
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => OverdriveAudioEffect_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => OverdriveAudioEffect_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => OverdriveAudioEffectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return OverdriveAudioEffectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => OverdriveAudioEffectSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class OverdriveAudioEffectBinaryWriteTranslation :
        AAudioEffectBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly OverdriveAudioEffectBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IOverdriveAudioEffectGetter item,
            MutagenWriter writer)
        {
            AAudioEffectBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.InputGain);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.OutputGain);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.UpperThreshold);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.LowerThreshold);
        }

        public void Write(
            MutagenWriter writer,
            IOverdriveAudioEffectGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IOverdriveAudioEffectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IAAudioEffectGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IOverdriveAudioEffectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class OverdriveAudioEffectBinaryCreateTranslation : AAudioEffectBinaryCreateTranslation
    {
        public new static readonly OverdriveAudioEffectBinaryCreateTranslation Instance = new OverdriveAudioEffectBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IOverdriveAudioEffect item,
            MutagenFrame frame)
        {
            AAudioEffectBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            item.InputGain = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.OutputGain = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.UpperThreshold = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.LowerThreshold = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class OverdriveAudioEffectBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class OverdriveAudioEffectBinaryOverlay :
        AAudioEffectBinaryOverlay,
        IOverdriveAudioEffectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => OverdriveAudioEffect_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => OverdriveAudioEffect_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => OverdriveAudioEffectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => OverdriveAudioEffectSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => OverdriveAudioEffectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((OverdriveAudioEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Single InputGain => _structData.Slice(0x4, 0x4).Float();
        public Single OutputGain => _structData.Slice(0x8, 0x4).Float();
        public Single UpperThreshold => _structData.Slice(0xC, 0x4).Float();
        public Single LowerThreshold => _structData.Slice(0x10, 0x4).Float();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected OverdriveAudioEffectBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IOverdriveAudioEffectGetter OverdriveAudioEffectFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x14,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new OverdriveAudioEffectBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x14;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IOverdriveAudioEffectGetter OverdriveAudioEffectFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return OverdriveAudioEffectFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            OverdriveAudioEffectMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IOverdriveAudioEffectGetter rhs) return false;
            return ((OverdriveAudioEffectCommon)((IOverdriveAudioEffectGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IOverdriveAudioEffectGetter? obj)
        {
            return ((OverdriveAudioEffectCommon)((IOverdriveAudioEffectGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((OverdriveAudioEffectCommon)((IOverdriveAudioEffectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

