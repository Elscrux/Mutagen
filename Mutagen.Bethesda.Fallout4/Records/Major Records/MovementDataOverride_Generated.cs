/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class MovementDataOverride :
        IEquatable<IMovementDataOverrideGetter>,
        ILoquiObjectSetter<MovementDataOverride>,
        IMovementDataOverride
    {
        #region Ctor
        public MovementDataOverride()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MovementType
        private readonly IFormLinkNullable<IMovementTypeGetter> _MovementType = new FormLinkNullable<IMovementTypeGetter>();
        public IFormLinkNullable<IMovementTypeGetter> MovementType
        {
            get => _MovementType;
            set => _MovementType.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMovementTypeGetter> IMovementDataOverrideGetter.MovementType => this.MovementType;
        #endregion
        #region MovementData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MovementData? _MovementData;
        public MovementData? MovementData
        {
            get => _MovementData;
            set => _MovementData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMovementDataGetter? IMovementDataOverrideGetter.MovementData => this.MovementData;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            MovementDataOverrideMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IMovementDataOverrideGetter rhs) return false;
            return ((MovementDataOverrideCommon)((IMovementDataOverrideGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IMovementDataOverrideGetter? obj)
        {
            return ((MovementDataOverrideCommon)((IMovementDataOverrideGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((MovementDataOverrideCommon)((IMovementDataOverrideGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.MovementType = initialValue;
                this.MovementData = new MaskItem<TItem, MovementData.Mask<TItem>?>(initialValue, new MovementData.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MovementType,
                TItem MovementData)
            {
                this.MovementType = MovementType;
                this.MovementData = new MaskItem<TItem, MovementData.Mask<TItem>?>(MovementData, new MovementData.Mask<TItem>(MovementData));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem MovementType;
            public MaskItem<TItem, MovementData.Mask<TItem>?>? MovementData { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.MovementType, rhs.MovementType)) return false;
                if (!object.Equals(this.MovementData, rhs.MovementData)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.MovementType);
                hash.Add(this.MovementData);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.MovementType)) return false;
                if (MovementData != null)
                {
                    if (!eval(this.MovementData.Overall)) return false;
                    if (this.MovementData.Specific != null && !this.MovementData.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.MovementType)) return true;
                if (MovementData != null)
                {
                    if (eval(this.MovementData.Overall)) return true;
                    if (this.MovementData.Specific != null && this.MovementData.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new MovementDataOverride.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.MovementType = eval(this.MovementType);
                obj.MovementData = this.MovementData == null ? null : new MaskItem<R, MovementData.Mask<R>?>(eval(this.MovementData.Overall), this.MovementData.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(MovementDataOverride.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, MovementDataOverride.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(MovementDataOverride.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.MovementType ?? true)
                    {
                        sb.AppendItem(MovementType, "MovementType");
                    }
                    if (printMask?.MovementData?.Overall ?? true)
                    {
                        MovementData?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? MovementType;
            public MaskItem<Exception?, MovementData.ErrorMask?>? MovementData;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                MovementDataOverride_FieldIndex enu = (MovementDataOverride_FieldIndex)index;
                switch (enu)
                {
                    case MovementDataOverride_FieldIndex.MovementType:
                        return MovementType;
                    case MovementDataOverride_FieldIndex.MovementData:
                        return MovementData;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                MovementDataOverride_FieldIndex enu = (MovementDataOverride_FieldIndex)index;
                switch (enu)
                {
                    case MovementDataOverride_FieldIndex.MovementType:
                        this.MovementType = ex;
                        break;
                    case MovementDataOverride_FieldIndex.MovementData:
                        this.MovementData = new MaskItem<Exception?, MovementData.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                MovementDataOverride_FieldIndex enu = (MovementDataOverride_FieldIndex)index;
                switch (enu)
                {
                    case MovementDataOverride_FieldIndex.MovementType:
                        this.MovementType = (Exception?)obj;
                        break;
                    case MovementDataOverride_FieldIndex.MovementData:
                        this.MovementData = (MaskItem<Exception?, MovementData.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (MovementType != null) return true;
                if (MovementData != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(MovementType, "MovementType");
                }
                MovementData?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.MovementType = this.MovementType.Combine(rhs.MovementType);
                ret.MovementData = this.MovementData.Combine(rhs.MovementData, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool MovementType;
            public MovementData.TranslationMask? MovementData;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.MovementType = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((MovementType, null));
                ret.Add((MovementData != null ? MovementData.OnOverall : DefaultOn, MovementData?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => MovementDataOverrideCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => MovementDataOverrideSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => MovementDataOverrideBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MovementDataOverrideBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static MovementDataOverride CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new MovementDataOverride();
            ((MovementDataOverrideSetterCommon)((IMovementDataOverrideGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out MovementDataOverride item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((MovementDataOverrideSetterCommon)((IMovementDataOverrideGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static MovementDataOverride GetNew()
        {
            return new MovementDataOverride();
        }

    }
    #endregion

    #region Interface
    public partial interface IMovementDataOverride :
        IFormLinkContainer,
        ILoquiObjectSetter<IMovementDataOverride>,
        IMovementDataOverrideGetter
    {
        new IFormLinkNullable<IMovementTypeGetter> MovementType { get; set; }
        new MovementData? MovementData { get; set; }
    }

    public partial interface IMovementDataOverrideGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IMovementDataOverrideGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => MovementDataOverride_Registration.Instance;
        IFormLinkNullableGetter<IMovementTypeGetter> MovementType { get; }
        IMovementDataGetter? MovementData { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class MovementDataOverrideMixIn
    {
        public static void Clear(this IMovementDataOverride item)
        {
            ((MovementDataOverrideSetterCommon)((IMovementDataOverrideGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static MovementDataOverride.Mask<bool> GetEqualsMask(
            this IMovementDataOverrideGetter item,
            IMovementDataOverrideGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MovementDataOverrideCommon)((IMovementDataOverrideGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IMovementDataOverrideGetter item,
            string? name = null,
            MovementDataOverride.Mask<bool>? printMask = null)
        {
            return ((MovementDataOverrideCommon)((IMovementDataOverrideGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IMovementDataOverrideGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            MovementDataOverride.Mask<bool>? printMask = null)
        {
            ((MovementDataOverrideCommon)((IMovementDataOverrideGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IMovementDataOverrideGetter item,
            IMovementDataOverrideGetter rhs,
            MovementDataOverride.TranslationMask? equalsMask = null)
        {
            return ((MovementDataOverrideCommon)((IMovementDataOverrideGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IMovementDataOverride lhs,
            IMovementDataOverrideGetter rhs)
        {
            ((MovementDataOverrideSetterTranslationCommon)((IMovementDataOverrideGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IMovementDataOverride lhs,
            IMovementDataOverrideGetter rhs,
            MovementDataOverride.TranslationMask? copyMask = null)
        {
            ((MovementDataOverrideSetterTranslationCommon)((IMovementDataOverrideGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IMovementDataOverride lhs,
            IMovementDataOverrideGetter rhs,
            out MovementDataOverride.ErrorMask errorMask,
            MovementDataOverride.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((MovementDataOverrideSetterTranslationCommon)((IMovementDataOverrideGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = MovementDataOverride.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IMovementDataOverride lhs,
            IMovementDataOverrideGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((MovementDataOverrideSetterTranslationCommon)((IMovementDataOverrideGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static MovementDataOverride DeepCopy(
            this IMovementDataOverrideGetter item,
            MovementDataOverride.TranslationMask? copyMask = null)
        {
            return ((MovementDataOverrideSetterTranslationCommon)((IMovementDataOverrideGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static MovementDataOverride DeepCopy(
            this IMovementDataOverrideGetter item,
            out MovementDataOverride.ErrorMask errorMask,
            MovementDataOverride.TranslationMask? copyMask = null)
        {
            return ((MovementDataOverrideSetterTranslationCommon)((IMovementDataOverrideGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static MovementDataOverride DeepCopy(
            this IMovementDataOverrideGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((MovementDataOverrideSetterTranslationCommon)((IMovementDataOverrideGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IMovementDataOverride item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((MovementDataOverrideSetterCommon)((IMovementDataOverrideGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum MovementDataOverride_FieldIndex
    {
        MovementType = 0,
        MovementData = 1,
    }
    #endregion

    #region Registration
    internal partial class MovementDataOverride_Registration : ILoquiRegistration
    {
        public static readonly MovementDataOverride_Registration Instance = new MovementDataOverride_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(MovementDataOverride.Mask<>);

        public static readonly Type ErrorMaskType = typeof(MovementDataOverride.ErrorMask);

        public static readonly Type ClassType = typeof(MovementDataOverride);

        public static readonly Type GetterType = typeof(IMovementDataOverrideGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMovementDataOverride);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.MovementDataOverride";

        public const string Name = "MovementDataOverride";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(
                RecordTypes.MTYP,
                RecordTypes.SPED);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(MovementDataOverrideBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class MovementDataOverrideSetterCommon
    {
        public static readonly MovementDataOverrideSetterCommon Instance = new MovementDataOverrideSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IMovementDataOverride item)
        {
            ClearPartial();
            item.MovementType.Clear();
            item.MovementData = null;
        }
        
        #region Mutagen
        public void RemapLinks(IMovementDataOverride obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.MovementType.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IMovementDataOverride item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: MovementDataOverrideBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class MovementDataOverrideCommon
    {
        public static readonly MovementDataOverrideCommon Instance = new MovementDataOverrideCommon();

        public MovementDataOverride.Mask<bool> GetEqualsMask(
            IMovementDataOverrideGetter item,
            IMovementDataOverrideGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MovementDataOverride.Mask<bool>(false);
            ((MovementDataOverrideCommon)((IMovementDataOverrideGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMovementDataOverrideGetter item,
            IMovementDataOverrideGetter rhs,
            MovementDataOverride.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.MovementType = item.MovementType.Equals(rhs.MovementType);
            ret.MovementData = EqualsMaskHelper.EqualsHelper(
                item.MovementData,
                rhs.MovementData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string Print(
            IMovementDataOverrideGetter item,
            string? name = null,
            MovementDataOverride.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IMovementDataOverrideGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            MovementDataOverride.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"MovementDataOverride =>");
            }
            else
            {
                sb.AppendLine($"{name} (MovementDataOverride) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IMovementDataOverrideGetter item,
            StructuredStringBuilder sb,
            MovementDataOverride.Mask<bool>? printMask = null)
        {
            if (printMask?.MovementType ?? true)
            {
                sb.AppendItem(item.MovementType.FormKeyNullable, "MovementType");
            }
            if ((printMask?.MovementData?.Overall ?? true)
                && item.MovementData is {} MovementDataItem)
            {
                MovementDataItem?.Print(sb, "MovementData");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMovementDataOverrideGetter? lhs,
            IMovementDataOverrideGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)MovementDataOverride_FieldIndex.MovementType) ?? true))
            {
                if (!lhs.MovementType.Equals(rhs.MovementType)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MovementDataOverride_FieldIndex.MovementData) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MovementData, rhs.MovementData, out var lhsMovementData, out var rhsMovementData, out var isMovementDataEqual))
                {
                    if (!((MovementDataCommon)((IMovementDataGetter)lhsMovementData).CommonInstance()!).Equals(lhsMovementData, rhsMovementData, equalsMask?.GetSubCrystal((int)MovementDataOverride_FieldIndex.MovementData))) return false;
                }
                else if (!isMovementDataEqual) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IMovementDataOverrideGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.MovementType);
            if (item.MovementData is {} MovementDataitem)
            {
                hash.Add(MovementDataitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return MovementDataOverride.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IMovementDataOverrideGetter obj)
        {
            if (FormLinkInformation.TryFactory(obj.MovementType, out var MovementTypeInfo))
            {
                yield return MovementTypeInfo;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class MovementDataOverrideSetterTranslationCommon
    {
        public static readonly MovementDataOverrideSetterTranslationCommon Instance = new MovementDataOverrideSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IMovementDataOverride item,
            IMovementDataOverrideGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)MovementDataOverride_FieldIndex.MovementType) ?? true))
            {
                item.MovementType.SetTo(rhs.MovementType.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)MovementDataOverride_FieldIndex.MovementData) ?? true))
            {
                errorMask?.PushIndex((int)MovementDataOverride_FieldIndex.MovementData);
                try
                {
                    if(rhs.MovementData is {} rhsMovementData)
                    {
                        item.MovementData = rhsMovementData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)MovementDataOverride_FieldIndex.MovementData));
                    }
                    else
                    {
                        item.MovementData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public MovementDataOverride DeepCopy(
            IMovementDataOverrideGetter item,
            MovementDataOverride.TranslationMask? copyMask = null)
        {
            MovementDataOverride ret = (MovementDataOverride)((MovementDataOverrideCommon)((IMovementDataOverrideGetter)item).CommonInstance()!).GetNew();
            ((MovementDataOverrideSetterTranslationCommon)((IMovementDataOverrideGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public MovementDataOverride DeepCopy(
            IMovementDataOverrideGetter item,
            out MovementDataOverride.ErrorMask errorMask,
            MovementDataOverride.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            MovementDataOverride ret = (MovementDataOverride)((MovementDataOverrideCommon)((IMovementDataOverrideGetter)item).CommonInstance()!).GetNew();
            ((MovementDataOverrideSetterTranslationCommon)((IMovementDataOverrideGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = MovementDataOverride.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public MovementDataOverride DeepCopy(
            IMovementDataOverrideGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            MovementDataOverride ret = (MovementDataOverride)((MovementDataOverrideCommon)((IMovementDataOverrideGetter)item).CommonInstance()!).GetNew();
            ((MovementDataOverrideSetterTranslationCommon)((IMovementDataOverrideGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class MovementDataOverride
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MovementDataOverride_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => MovementDataOverride_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => MovementDataOverrideCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return MovementDataOverrideSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => MovementDataOverrideSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IMovementDataOverrideGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IMovementDataOverrideGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IMovementDataOverrideGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class MovementDataOverrideBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly MovementDataOverrideBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IMovementDataOverrideGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MovementType,
                header: translationParams.ConvertToCustom(RecordTypes.MTYP));
            if (item.MovementData is {} MovementDataItem)
            {
                ((MovementDataBinaryWriteTranslation)((IBinaryItem)MovementDataItem).BinaryWriteTranslator).Write(
                    item: MovementDataItem,
                    writer: writer,
                    translationParams: translationParams);
            }
        }

        public void Write(
            MutagenWriter writer,
            IMovementDataOverrideGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IMovementDataOverrideGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class MovementDataOverrideBinaryCreateTranslation
    {
        public static readonly MovementDataOverrideBinaryCreateTranslation Instance = new MovementDataOverrideBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IMovementDataOverride item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.MTYP:
                {
                    if (lastParsed.ShortCircuit((int)MovementDataOverride_FieldIndex.MovementType, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MovementType.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)MovementDataOverride_FieldIndex.MovementType;
                }
                case RecordTypeInts.SPED:
                {
                    if (lastParsed.ShortCircuit((int)MovementDataOverride_FieldIndex.MovementData, translationParams)) return ParseResult.Stop;
                    item.MovementData = Mutagen.Bethesda.Fallout4.MovementData.CreateFromBinary(frame: frame);
                    return (int)MovementDataOverride_FieldIndex.MovementData;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class MovementDataOverrideBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IMovementDataOverrideGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MovementDataOverrideBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class MovementDataOverrideBinaryOverlay :
        PluginBinaryOverlay,
        IMovementDataOverrideGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MovementDataOverride_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => MovementDataOverride_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => MovementDataOverrideCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => MovementDataOverrideSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IMovementDataOverrideGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IMovementDataOverrideGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IMovementDataOverrideGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => MovementDataOverrideCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => MovementDataOverrideBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MovementDataOverrideBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region MovementType
        private int? _MovementTypeLocation;
        public IFormLinkNullableGetter<IMovementTypeGetter> MovementType => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMovementTypeGetter>(_package, _recordData, _MovementTypeLocation);
        #endregion
        #region MovementData
        private RangeInt32? _MovementDataLocation;
        public IMovementDataGetter? MovementData => _MovementDataLocation.HasValue ? MovementDataBinaryOverlay.MovementDataFactory(_recordData.Slice(_MovementDataLocation!.Value.Min), _package) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected MovementDataOverrideBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IMovementDataOverrideGetter MovementDataOverrideFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new MovementDataOverrideBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IMovementDataOverrideGetter MovementDataOverrideFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return MovementDataOverrideFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.MTYP:
                {
                    if (lastParsed.ShortCircuit((int)MovementDataOverride_FieldIndex.MovementType, translationParams)) return ParseResult.Stop;
                    _MovementTypeLocation = (stream.Position - offset);
                    return (int)MovementDataOverride_FieldIndex.MovementType;
                }
                case RecordTypeInts.SPED:
                {
                    if (lastParsed.ShortCircuit((int)MovementDataOverride_FieldIndex.MovementData, translationParams)) return ParseResult.Stop;
                    _MovementDataLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)MovementDataOverride_FieldIndex.MovementData;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            MovementDataOverrideMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IMovementDataOverrideGetter rhs) return false;
            return ((MovementDataOverrideCommon)((IMovementDataOverrideGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IMovementDataOverrideGetter? obj)
        {
            return ((MovementDataOverrideCommon)((IMovementDataOverrideGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((MovementDataOverrideCommon)((IMovementDataOverrideGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

