/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.RecordTypeMapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Component :
        Fallout4MajorRecord,
        IComponentInternal,
        IEquatable<IComponentGetter>,
        ILoquiObjectSetter<Component>
    {
        #region Ctor
        protected Component()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded, IObjectBoundedOptional
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IComponentGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IComponentGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region CraftingSound
        private readonly IFormLinkNullable<ISoundDescriptorGetter> _CraftingSound = new FormLinkNullable<ISoundDescriptorGetter>();
        public IFormLinkNullable<ISoundDescriptorGetter> CraftingSound
        {
            get => _CraftingSound;
            set => _CraftingSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> IComponentGetter.CraftingSound => this.CraftingSound;
        #endregion
        #region AutoCalcValue
        public UInt32? AutoCalcValue { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IComponentGetter.AutoCalcValue => this.AutoCalcValue;
        #endregion
        #region ScrapItem
        private readonly IFormLinkNullable<IMiscItemGetter> _ScrapItem = new FormLinkNullable<IMiscItemGetter>();
        public IFormLinkNullable<IMiscItemGetter> ScrapItem
        {
            get => _ScrapItem;
            set => _ScrapItem.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMiscItemGetter> IComponentGetter.ScrapItem => this.ScrapItem;
        #endregion
        #region ModScrapScalar
        private readonly IFormLinkNullable<IGlobalGetter> _ModScrapScalar = new FormLinkNullable<IGlobalGetter>();
        public IFormLinkNullable<IGlobalGetter> ModScrapScalar
        {
            get => _ModScrapScalar;
            set => _ModScrapScalar.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IGlobalGetter> IComponentGetter.ModScrapScalar => this.ModScrapScalar;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ComponentMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.CraftingSound = initialValue;
                this.AutoCalcValue = initialValue;
                this.ScrapItem = initialValue;
                this.ModScrapScalar = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem ObjectBounds,
                TItem Name,
                TItem CraftingSound,
                TItem AutoCalcValue,
                TItem ScrapItem,
                TItem ModScrapScalar)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Name = Name;
                this.CraftingSound = CraftingSound;
                this.AutoCalcValue = AutoCalcValue;
                this.ScrapItem = ScrapItem;
                this.ModScrapScalar = ModScrapScalar;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Name;
            public TItem CraftingSound;
            public TItem AutoCalcValue;
            public TItem ScrapItem;
            public TItem ModScrapScalar;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.CraftingSound, rhs.CraftingSound)) return false;
                if (!object.Equals(this.AutoCalcValue, rhs.AutoCalcValue)) return false;
                if (!object.Equals(this.ScrapItem, rhs.ScrapItem)) return false;
                if (!object.Equals(this.ModScrapScalar, rhs.ModScrapScalar)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.Name);
                hash.Add(this.CraftingSound);
                hash.Add(this.AutoCalcValue);
                hash.Add(this.ScrapItem);
                hash.Add(this.ModScrapScalar);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (!eval(this.CraftingSound)) return false;
                if (!eval(this.AutoCalcValue)) return false;
                if (!eval(this.ScrapItem)) return false;
                if (!eval(this.ModScrapScalar)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (eval(this.CraftingSound)) return true;
                if (eval(this.AutoCalcValue)) return true;
                if (eval(this.ScrapItem)) return true;
                if (eval(this.ModScrapScalar)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Component.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.CraftingSound = eval(this.CraftingSound);
                obj.AutoCalcValue = eval(this.AutoCalcValue);
                obj.ScrapItem = eval(this.ScrapItem);
                obj.ModScrapScalar = eval(this.ModScrapScalar);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Component.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Component.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Component.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.CraftingSound ?? true)
                    {
                        fg.AppendItem(CraftingSound, "CraftingSound");
                    }
                    if (printMask?.AutoCalcValue ?? true)
                    {
                        fg.AppendItem(AutoCalcValue, "AutoCalcValue");
                    }
                    if (printMask?.ScrapItem ?? true)
                    {
                        fg.AppendItem(ScrapItem, "ScrapItem");
                    }
                    if (printMask?.ModScrapScalar ?? true)
                    {
                        fg.AppendItem(ModScrapScalar, "ModScrapScalar");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Name;
            public Exception? CraftingSound;
            public Exception? AutoCalcValue;
            public Exception? ScrapItem;
            public Exception? ModScrapScalar;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Component_FieldIndex enu = (Component_FieldIndex)index;
                switch (enu)
                {
                    case Component_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Component_FieldIndex.Name:
                        return Name;
                    case Component_FieldIndex.CraftingSound:
                        return CraftingSound;
                    case Component_FieldIndex.AutoCalcValue:
                        return AutoCalcValue;
                    case Component_FieldIndex.ScrapItem:
                        return ScrapItem;
                    case Component_FieldIndex.ModScrapScalar:
                        return ModScrapScalar;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Component_FieldIndex enu = (Component_FieldIndex)index;
                switch (enu)
                {
                    case Component_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Component_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Component_FieldIndex.CraftingSound:
                        this.CraftingSound = ex;
                        break;
                    case Component_FieldIndex.AutoCalcValue:
                        this.AutoCalcValue = ex;
                        break;
                    case Component_FieldIndex.ScrapItem:
                        this.ScrapItem = ex;
                        break;
                    case Component_FieldIndex.ModScrapScalar:
                        this.ModScrapScalar = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Component_FieldIndex enu = (Component_FieldIndex)index;
                switch (enu)
                {
                    case Component_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Component_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Component_FieldIndex.CraftingSound:
                        this.CraftingSound = (Exception?)obj;
                        break;
                    case Component_FieldIndex.AutoCalcValue:
                        this.AutoCalcValue = (Exception?)obj;
                        break;
                    case Component_FieldIndex.ScrapItem:
                        this.ScrapItem = (Exception?)obj;
                        break;
                    case Component_FieldIndex.ModScrapScalar:
                        this.ModScrapScalar = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (Name != null) return true;
                if (CraftingSound != null) return true;
                if (AutoCalcValue != null) return true;
                if (ScrapItem != null) return true;
                if (ModScrapScalar != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                ObjectBounds?.ToString(fg);
                fg.AppendItem(Name, "Name");
                fg.AppendItem(CraftingSound, "CraftingSound");
                fg.AppendItem(AutoCalcValue, "AutoCalcValue");
                fg.AppendItem(ScrapItem, "ScrapItem");
                fg.AppendItem(ModScrapScalar, "ModScrapScalar");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.CraftingSound = this.CraftingSound.Combine(rhs.CraftingSound);
                ret.AutoCalcValue = this.AutoCalcValue.Combine(rhs.AutoCalcValue);
                ret.ScrapItem = this.ScrapItem.Combine(rhs.ScrapItem);
                ret.ModScrapScalar = this.ModScrapScalar.Combine(rhs.ModScrapScalar);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool Name;
            public bool CraftingSound;
            public bool AutoCalcValue;
            public bool ScrapItem;
            public bool ModScrapScalar;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.CraftingSound = defaultOn;
                this.AutoCalcValue = defaultOn;
                this.ScrapItem = defaultOn;
                this.ModScrapScalar = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((CraftingSound, null));
                ret.Add((AutoCalcValue, null));
                ret.Add((ScrapItem, null));
                ret.Add((ModScrapScalar, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Component_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => ComponentCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ComponentSetterCommon.Instance.RemapLinks(this, mapping);
        public Component(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private Component(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal Component(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Component(IFallout4Mod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Component(IFallout4Mod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Component>.ToString(this);
        }

        protected override Type LinkType => typeof(IComponent);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IComponentGetter rhs) return false;
            return ((ComponentCommon)((IComponentGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IComponentGetter? obj)
        {
            return ((ComponentCommon)((IComponentGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ComponentCommon)((IComponentGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ComponentBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ComponentBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Component CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new Component();
            ((ComponentSetterCommon)((IComponentGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Component item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ComponentSetterCommon)((IComponentGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Component GetNew()
        {
            return new Component();
        }

    }
    #endregion

    #region Interface
    public partial interface IComponent :
        IComponentGetter,
        IFallout4MajorRecordInternal,
        IFormLinkContainer,
        ILoquiObjectSetter<IComponentInternal>,
        INamed,
        INamedRequired,
        IObjectBounded,
        IObjectBoundedOptional
    {
        /// <summary>
        /// Aspects: IObjectBounded, IObjectBoundedOptional
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        new String? Name { get; set; }
        new IFormLinkNullable<ISoundDescriptorGetter> CraftingSound { get; set; }
        new UInt32? AutoCalcValue { get; set; }
        new IFormLinkNullable<IMiscItemGetter> ScrapItem { get; set; }
        new IFormLinkNullable<IGlobalGetter> ModScrapScalar { get; set; }
    }

    public partial interface IComponentInternal :
        IFallout4MajorRecordInternal,
        IComponent,
        IComponentGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.CMPO)]
    public partial interface IComponentGetter :
        IFallout4MajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IComponentGetter>,
        IMapsToGetter<IComponentGetter>,
        INamedGetter,
        INamedRequiredGetter,
        IObjectBoundedGetter,
        IObjectBoundedOptionalGetter
    {
        static new ILoquiRegistration StaticRegistration => Component_Registration.Instance;
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter, IObjectBoundedOptionalGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter
        /// </summary>
        String? Name { get; }
        #endregion
        IFormLinkNullableGetter<ISoundDescriptorGetter> CraftingSound { get; }
        UInt32? AutoCalcValue { get; }
        IFormLinkNullableGetter<IMiscItemGetter> ScrapItem { get; }
        IFormLinkNullableGetter<IGlobalGetter> ModScrapScalar { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ComponentMixIn
    {
        public static void Clear(this IComponentInternal item)
        {
            ((ComponentSetterCommon)((IComponentGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Component.Mask<bool> GetEqualsMask(
            this IComponentGetter item,
            IComponentGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ComponentCommon)((IComponentGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IComponentGetter item,
            string? name = null,
            Component.Mask<bool>? printMask = null)
        {
            return ((ComponentCommon)((IComponentGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IComponentGetter item,
            FileGeneration fg,
            string? name = null,
            Component.Mask<bool>? printMask = null)
        {
            ((ComponentCommon)((IComponentGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IComponentGetter item,
            IComponentGetter rhs,
            Component.TranslationMask? equalsMask = null)
        {
            return ((ComponentCommon)((IComponentGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IComponentInternal lhs,
            IComponentGetter rhs,
            out Component.ErrorMask errorMask,
            Component.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ComponentSetterTranslationCommon)((IComponentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Component.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IComponentInternal lhs,
            IComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ComponentSetterTranslationCommon)((IComponentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Component DeepCopy(
            this IComponentGetter item,
            Component.TranslationMask? copyMask = null)
        {
            return ((ComponentSetterTranslationCommon)((IComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Component DeepCopy(
            this IComponentGetter item,
            out Component.ErrorMask errorMask,
            Component.TranslationMask? copyMask = null)
        {
            return ((ComponentSetterTranslationCommon)((IComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Component DeepCopy(
            this IComponentGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ComponentSetterTranslationCommon)((IComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Component Duplicate(
            this IComponentGetter item,
            FormKey formKey,
            Component.TranslationMask? copyMask = null)
        {
            return ((ComponentCommon)((IComponentGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IComponentInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((ComponentSetterCommon)((IComponentGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Component_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        ObjectBounds = 6,
        Name = 7,
        CraftingSound = 8,
        AutoCalcValue = 9,
        ScrapItem = 10,
        ModScrapScalar = 11,
    }
    #endregion

    #region Registration
    public partial class Component_Registration : ILoquiRegistration
    {
        public static readonly Component_Registration Instance = new Component_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 37,
            version: 0);

        public const string GUID = "e43c4f0e-2b13-48e6-bf24-396a30d48a02";

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 12;

        public static readonly Type MaskType = typeof(Component.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Component.ErrorMask);

        public static readonly Type ClassType = typeof(Component);

        public static readonly Type GetterType = typeof(IComponentGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IComponent);

        public static readonly Type? InternalSetterType = typeof(IComponentInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Component";

        public const string Name = "Component";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.CMPO;
        public static readonly Type BinaryWriteTranslation = typeof(ComponentBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ComponentSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly ComponentSetterCommon Instance = new ComponentSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IComponentInternal item)
        {
            ClearPartial();
            item.ObjectBounds.Clear();
            item.Name = default;
            item.CraftingSound.Clear();
            item.AutoCalcValue = default;
            item.ScrapItem.Clear();
            item.ModScrapScalar.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IComponentInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IComponentInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IComponent obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.CraftingSound.Relink(mapping);
            obj.ScrapItem.Relink(mapping);
            obj.ModScrapScalar.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IComponentInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.MajorRecordParse<IComponentInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ComponentBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ComponentBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (Component)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (Component)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    public partial class ComponentCommon : Fallout4MajorRecordCommon
    {
        public new static readonly ComponentCommon Instance = new ComponentCommon();

        public Component.Mask<bool> GetEqualsMask(
            IComponentGetter item,
            IComponentGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Component.Mask<bool>(false);
            ((ComponentCommon)((IComponentGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IComponentGetter item,
            IComponentGetter rhs,
            Component.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.CraftingSound = item.CraftingSound.Equals(rhs.CraftingSound);
            ret.AutoCalcValue = item.AutoCalcValue == rhs.AutoCalcValue;
            ret.ScrapItem = item.ScrapItem.Equals(rhs.ScrapItem);
            ret.ModScrapScalar = item.ModScrapScalar.Equals(rhs.ModScrapScalar);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IComponentGetter item,
            string? name = null,
            Component.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IComponentGetter item,
            FileGeneration fg,
            string? name = null,
            Component.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Component =>");
            }
            else
            {
                fg.AppendLine($"{name} (Component) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IComponentGetter item,
            FileGeneration fg,
            Component.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                fg.AppendItem(NameItem, "Name");
            }
            if (printMask?.CraftingSound ?? true)
            {
                fg.AppendItem(item.CraftingSound.FormKeyNullable, "CraftingSound");
            }
            if ((printMask?.AutoCalcValue ?? true)
                && item.AutoCalcValue is {} AutoCalcValueItem)
            {
                fg.AppendItem(AutoCalcValueItem, "AutoCalcValue");
            }
            if (printMask?.ScrapItem ?? true)
            {
                fg.AppendItem(item.ScrapItem.FormKeyNullable, "ScrapItem");
            }
            if (printMask?.ModScrapScalar ?? true)
            {
                fg.AppendItem(item.ModScrapScalar.FormKeyNullable, "ModScrapScalar");
            }
        }
        
        public static Component_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Component_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Component_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Component_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Component_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Component_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Component_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Component_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Component_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Component_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Component_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Component_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IComponentGetter? lhs,
            IComponentGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)Component_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, crystal?.GetSubCrystal((int)Component_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Component_FieldIndex.Name) ?? true))
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Component_FieldIndex.CraftingSound) ?? true))
            {
                if (!lhs.CraftingSound.Equals(rhs.CraftingSound)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Component_FieldIndex.AutoCalcValue) ?? true))
            {
                if (lhs.AutoCalcValue != rhs.AutoCalcValue) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Component_FieldIndex.ScrapItem) ?? true))
            {
                if (!lhs.ScrapItem.Equals(rhs.ScrapItem)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Component_FieldIndex.ModScrapScalar) ?? true))
            {
                if (!lhs.ModScrapScalar.Equals(rhs.ModScrapScalar)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IComponentGetter?)lhs,
                rhs: rhs as IComponentGetter,
                crystal: crystal);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IComponentGetter?)lhs,
                rhs: rhs as IComponentGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(IComponentGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.CraftingSound);
            if (item.AutoCalcValue is {} AutoCalcValueitem)
            {
                hash.Add(AutoCalcValueitem);
            }
            hash.Add(item.ScrapItem);
            hash.Add(item.ModScrapScalar);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IComponentGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IComponentGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Component.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IComponentGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.CraftingSound.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.CraftingSound);
            }
            if (obj.ScrapItem.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.ScrapItem);
            }
            if (obj.ModScrapScalar.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.ModScrapScalar);
            }
            yield break;
        }
        
        #region Duplicate
        public Component Duplicate(
            IComponentGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Component(formKey);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IComponentGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IComponentGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class ComponentSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly ComponentSetterTranslationCommon Instance = new ComponentSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IComponentInternal item,
            IComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IComponent item,
            IComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Component_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Component_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Component_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Component_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Component_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Component_FieldIndex.CraftingSound) ?? true))
            {
                item.CraftingSound.SetTo(rhs.CraftingSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Component_FieldIndex.AutoCalcValue) ?? true))
            {
                item.AutoCalcValue = rhs.AutoCalcValue;
            }
            if ((copyMask?.GetShouldTranslate((int)Component_FieldIndex.ScrapItem) ?? true))
            {
                item.ScrapItem.SetTo(rhs.ScrapItem.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Component_FieldIndex.ModScrapScalar) ?? true))
            {
                item.ModScrapScalar.SetTo(rhs.ModScrapScalar.FormKeyNullable);
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IComponentInternal)item,
                rhs: (IComponentGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IComponent)item,
                rhs: (IComponentGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IComponentInternal)item,
                rhs: (IComponentGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IComponent)item,
                rhs: (IComponentGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Component DeepCopy(
            IComponentGetter item,
            Component.TranslationMask? copyMask = null)
        {
            Component ret = (Component)((ComponentCommon)((IComponentGetter)item).CommonInstance()!).GetNew();
            ((ComponentSetterTranslationCommon)((IComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Component DeepCopy(
            IComponentGetter item,
            out Component.ErrorMask errorMask,
            Component.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Component ret = (Component)((ComponentCommon)((IComponentGetter)item).CommonInstance()!).GetNew();
            ((ComponentSetterTranslationCommon)((IComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Component.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Component DeepCopy(
            IComponentGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Component ret = (Component)((ComponentCommon)((IComponentGetter)item).CommonInstance()!).GetNew();
            ((ComponentSetterTranslationCommon)((IComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Component
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Component_Registration.Instance;
        public new static Component_Registration StaticRegistration => Component_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ComponentCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ComponentSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ComponentSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ComponentBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ComponentBinaryWriteTranslation Instance = new ComponentBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IComponentGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CraftingSound,
                header: translationParams.ConvertToCustom(RecordTypes.CUSD));
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.AutoCalcValue,
                header: translationParams.ConvertToCustom(RecordTypes.DATA));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ScrapItem,
                header: translationParams.ConvertToCustom(RecordTypes.MNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ModScrapScalar,
                header: translationParams.ConvertToCustom(RecordTypes.GNAM));
        }

        public void Write(
            MutagenWriter writer,
            IComponentGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Record(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.CMPO)))
            {
                try
                {
                    Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        translationParams: translationParams);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Enrich(ex, item);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IComponentGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IComponentGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IComponentGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class ComponentBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static ComponentBinaryCreateTranslation Instance = new ComponentBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.CMPO;
        public static void FillBinaryStructs(
            IComponentInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IComponentInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Fallout4.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Component_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Component_FieldIndex.Name;
                }
                case RecordTypeInts.CUSD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CraftingSound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Component_FieldIndex.CraftingSound;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AutoCalcValue = frame.ReadUInt32();
                    return (int)Component_FieldIndex.AutoCalcValue;
                }
                case RecordTypeInts.MNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ScrapItem.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Component_FieldIndex.ScrapItem;
                }
                case RecordTypeInts.GNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ModScrapScalar.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Component_FieldIndex.ModScrapScalar;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ComponentBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ComponentBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IComponentGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Component_Registration.Instance;
        public new static Component_Registration StaticRegistration => Component_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ComponentCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ComponentSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => ComponentCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ComponentBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ComponentBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IComponent);


        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new OverlayStream(_data.Slice(_ObjectBoundsLocation!.Value.Min), _package), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants)) : default(string?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        #endregion
        #endregion
        #region CraftingSound
        private int? _CraftingSoundLocation;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> CraftingSound => _CraftingSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _CraftingSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        #region AutoCalcValue
        private int? _AutoCalcValueLocation;
        public UInt32? AutoCalcValue => _AutoCalcValueLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _AutoCalcValueLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region ScrapItem
        private int? _ScrapItemLocation;
        public IFormLinkNullableGetter<IMiscItemGetter> ScrapItem => _ScrapItemLocation.HasValue ? new FormLinkNullable<IMiscItemGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ScrapItemLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IMiscItemGetter>.Null;
        #endregion
        #region ModScrapScalar
        private int? _ModScrapScalarLocation;
        public IFormLinkNullableGetter<IGlobalGetter> ModScrapScalar => _ModScrapScalarLocation.HasValue ? new FormLinkNullable<IGlobalGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ModScrapScalarLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IGlobalGetter>.Null;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ComponentBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ComponentBinaryOverlay ComponentFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            stream = PluginUtilityTranslation.DecompressStream(stream);
            var ret = new ComponentBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ComponentBinaryOverlay ComponentFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return ComponentFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Component_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Component_FieldIndex.Name;
                }
                case RecordTypeInts.CUSD:
                {
                    _CraftingSoundLocation = (stream.Position - offset);
                    return (int)Component_FieldIndex.CraftingSound;
                }
                case RecordTypeInts.DATA:
                {
                    _AutoCalcValueLocation = (stream.Position - offset);
                    return (int)Component_FieldIndex.AutoCalcValue;
                }
                case RecordTypeInts.MNAM:
                {
                    _ScrapItemLocation = (stream.Position - offset);
                    return (int)Component_FieldIndex.ScrapItem;
                }
                case RecordTypeInts.GNAM:
                {
                    _ModScrapScalarLocation = (stream.Position - offset);
                    return (int)Component_FieldIndex.ModScrapScalar;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ComponentMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Component>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IComponentGetter rhs) return false;
            return ((ComponentCommon)((IComponentGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IComponentGetter? obj)
        {
            return ((ComponentCommon)((IComponentGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ComponentCommon)((IComponentGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

