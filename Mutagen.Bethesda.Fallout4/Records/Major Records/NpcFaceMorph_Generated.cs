/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class NpcFaceMorph :
        IEquatable<INpcFaceMorphGetter>,
        ILoquiObjectSetter<NpcFaceMorph>,
        INpcFaceMorph
    {
        #region Ctor
        public NpcFaceMorph()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Index
        public UInt32? Index { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? INpcFaceMorphGetter.Index => this.Index;
        #endregion
        #region Position
        public P3Float Position { get; set; } = default(P3Float);
        #endregion
        #region Rotation
        public P3Float Rotation { get; set; } = default(P3Float);
        #endregion
        #region Scale
        public Single Scale { get; set; } = default(Single);
        #endregion
        #region Unknown1
        public Single Unknown1 { get; set; } = default(Single);
        #endregion
        #region Unknown2
        public Single Unknown2 { get; set; } = default(Single);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NpcFaceMorphMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INpcFaceMorphGetter rhs) return false;
            return ((NpcFaceMorphCommon)((INpcFaceMorphGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INpcFaceMorphGetter? obj)
        {
            return ((NpcFaceMorphCommon)((INpcFaceMorphGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NpcFaceMorphCommon)((INpcFaceMorphGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Index = initialValue;
                this.Position = initialValue;
                this.Rotation = initialValue;
                this.Scale = initialValue;
                this.Unknown1 = initialValue;
                this.Unknown2 = initialValue;
            }

            public Mask(
                TItem Index,
                TItem Position,
                TItem Rotation,
                TItem Scale,
                TItem Unknown1,
                TItem Unknown2)
            {
                this.Index = Index;
                this.Position = Position;
                this.Rotation = Rotation;
                this.Scale = Scale;
                this.Unknown1 = Unknown1;
                this.Unknown2 = Unknown2;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Index;
            public TItem Position;
            public TItem Rotation;
            public TItem Scale;
            public TItem Unknown1;
            public TItem Unknown2;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Index, rhs.Index)) return false;
                if (!object.Equals(this.Position, rhs.Position)) return false;
                if (!object.Equals(this.Rotation, rhs.Rotation)) return false;
                if (!object.Equals(this.Scale, rhs.Scale)) return false;
                if (!object.Equals(this.Unknown1, rhs.Unknown1)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Index);
                hash.Add(this.Position);
                hash.Add(this.Rotation);
                hash.Add(this.Scale);
                hash.Add(this.Unknown1);
                hash.Add(this.Unknown2);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Index)) return false;
                if (!eval(this.Position)) return false;
                if (!eval(this.Rotation)) return false;
                if (!eval(this.Scale)) return false;
                if (!eval(this.Unknown1)) return false;
                if (!eval(this.Unknown2)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Index)) return true;
                if (eval(this.Position)) return true;
                if (eval(this.Rotation)) return true;
                if (eval(this.Scale)) return true;
                if (eval(this.Unknown1)) return true;
                if (eval(this.Unknown2)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new NpcFaceMorph.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Index = eval(this.Index);
                obj.Position = eval(this.Position);
                obj.Rotation = eval(this.Rotation);
                obj.Scale = eval(this.Scale);
                obj.Unknown1 = eval(this.Unknown1);
                obj.Unknown2 = eval(this.Unknown2);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(NpcFaceMorph.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, NpcFaceMorph.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(NpcFaceMorph.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Index ?? true)
                    {
                        sb.AppendItem(Index, "Index");
                    }
                    if (printMask?.Position ?? true)
                    {
                        sb.AppendItem(Position, "Position");
                    }
                    if (printMask?.Rotation ?? true)
                    {
                        sb.AppendItem(Rotation, "Rotation");
                    }
                    if (printMask?.Scale ?? true)
                    {
                        sb.AppendItem(Scale, "Scale");
                    }
                    if (printMask?.Unknown1 ?? true)
                    {
                        sb.AppendItem(Unknown1, "Unknown1");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        sb.AppendItem(Unknown2, "Unknown2");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Index;
            public Exception? Position;
            public Exception? Rotation;
            public Exception? Scale;
            public Exception? Unknown1;
            public Exception? Unknown2;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                NpcFaceMorph_FieldIndex enu = (NpcFaceMorph_FieldIndex)index;
                switch (enu)
                {
                    case NpcFaceMorph_FieldIndex.Index:
                        return Index;
                    case NpcFaceMorph_FieldIndex.Position:
                        return Position;
                    case NpcFaceMorph_FieldIndex.Rotation:
                        return Rotation;
                    case NpcFaceMorph_FieldIndex.Scale:
                        return Scale;
                    case NpcFaceMorph_FieldIndex.Unknown1:
                        return Unknown1;
                    case NpcFaceMorph_FieldIndex.Unknown2:
                        return Unknown2;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                NpcFaceMorph_FieldIndex enu = (NpcFaceMorph_FieldIndex)index;
                switch (enu)
                {
                    case NpcFaceMorph_FieldIndex.Index:
                        this.Index = ex;
                        break;
                    case NpcFaceMorph_FieldIndex.Position:
                        this.Position = ex;
                        break;
                    case NpcFaceMorph_FieldIndex.Rotation:
                        this.Rotation = ex;
                        break;
                    case NpcFaceMorph_FieldIndex.Scale:
                        this.Scale = ex;
                        break;
                    case NpcFaceMorph_FieldIndex.Unknown1:
                        this.Unknown1 = ex;
                        break;
                    case NpcFaceMorph_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                NpcFaceMorph_FieldIndex enu = (NpcFaceMorph_FieldIndex)index;
                switch (enu)
                {
                    case NpcFaceMorph_FieldIndex.Index:
                        this.Index = (Exception?)obj;
                        break;
                    case NpcFaceMorph_FieldIndex.Position:
                        this.Position = (Exception?)obj;
                        break;
                    case NpcFaceMorph_FieldIndex.Rotation:
                        this.Rotation = (Exception?)obj;
                        break;
                    case NpcFaceMorph_FieldIndex.Scale:
                        this.Scale = (Exception?)obj;
                        break;
                    case NpcFaceMorph_FieldIndex.Unknown1:
                        this.Unknown1 = (Exception?)obj;
                        break;
                    case NpcFaceMorph_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Index != null) return true;
                if (Position != null) return true;
                if (Rotation != null) return true;
                if (Scale != null) return true;
                if (Unknown1 != null) return true;
                if (Unknown2 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Index, "Index");
                }
                {
                    sb.AppendItem(Position, "Position");
                }
                {
                    sb.AppendItem(Rotation, "Rotation");
                }
                {
                    sb.AppendItem(Scale, "Scale");
                }
                {
                    sb.AppendItem(Unknown1, "Unknown1");
                }
                {
                    sb.AppendItem(Unknown2, "Unknown2");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Index = this.Index.Combine(rhs.Index);
                ret.Position = this.Position.Combine(rhs.Position);
                ret.Rotation = this.Rotation.Combine(rhs.Rotation);
                ret.Scale = this.Scale.Combine(rhs.Scale);
                ret.Unknown1 = this.Unknown1.Combine(rhs.Unknown1);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Index;
            public bool Position;
            public bool Rotation;
            public bool Scale;
            public bool Unknown1;
            public bool Unknown2;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Index = defaultOn;
                this.Position = defaultOn;
                this.Rotation = defaultOn;
                this.Scale = defaultOn;
                this.Unknown1 = defaultOn;
                this.Unknown2 = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Index, null));
                ret.Add((Position, null));
                ret.Add((Rotation, null));
                ret.Add((Scale, null));
                ret.Add((Unknown1, null));
                ret.Add((Unknown2, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NpcFaceMorphBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcFaceMorphBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static NpcFaceMorph CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new NpcFaceMorph();
            ((NpcFaceMorphSetterCommon)((INpcFaceMorphGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out NpcFaceMorph item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((NpcFaceMorphSetterCommon)((INpcFaceMorphGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static NpcFaceMorph GetNew()
        {
            return new NpcFaceMorph();
        }

    }
    #endregion

    #region Interface
    public partial interface INpcFaceMorph :
        ILoquiObjectSetter<INpcFaceMorph>,
        INpcFaceMorphGetter,
        IPositionRotation
    {
        new UInt32? Index { get; set; }
        new P3Float Position { get; set; }
        new P3Float Rotation { get; set; }
        new Single Scale { get; set; }
        new Single Unknown1 { get; set; }
        new Single Unknown2 { get; set; }
    }

    public partial interface INpcFaceMorphGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<INpcFaceMorphGetter>,
        IPositionRotationGetter
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => NpcFaceMorph_Registration.Instance;
        UInt32? Index { get; }
        P3Float Position { get; }
        P3Float Rotation { get; }
        Single Scale { get; }
        Single Unknown1 { get; }
        Single Unknown2 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class NpcFaceMorphMixIn
    {
        public static void Clear(this INpcFaceMorph item)
        {
            ((NpcFaceMorphSetterCommon)((INpcFaceMorphGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static NpcFaceMorph.Mask<bool> GetEqualsMask(
            this INpcFaceMorphGetter item,
            INpcFaceMorphGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NpcFaceMorphCommon)((INpcFaceMorphGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this INpcFaceMorphGetter item,
            string? name = null,
            NpcFaceMorph.Mask<bool>? printMask = null)
        {
            return ((NpcFaceMorphCommon)((INpcFaceMorphGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this INpcFaceMorphGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NpcFaceMorph.Mask<bool>? printMask = null)
        {
            ((NpcFaceMorphCommon)((INpcFaceMorphGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INpcFaceMorphGetter item,
            INpcFaceMorphGetter rhs,
            NpcFaceMorph.TranslationMask? equalsMask = null)
        {
            return ((NpcFaceMorphCommon)((INpcFaceMorphGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this INpcFaceMorph lhs,
            INpcFaceMorphGetter rhs)
        {
            ((NpcFaceMorphSetterTranslationCommon)((INpcFaceMorphGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INpcFaceMorph lhs,
            INpcFaceMorphGetter rhs,
            NpcFaceMorph.TranslationMask? copyMask = null)
        {
            ((NpcFaceMorphSetterTranslationCommon)((INpcFaceMorphGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INpcFaceMorph lhs,
            INpcFaceMorphGetter rhs,
            out NpcFaceMorph.ErrorMask errorMask,
            NpcFaceMorph.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NpcFaceMorphSetterTranslationCommon)((INpcFaceMorphGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = NpcFaceMorph.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INpcFaceMorph lhs,
            INpcFaceMorphGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NpcFaceMorphSetterTranslationCommon)((INpcFaceMorphGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static NpcFaceMorph DeepCopy(
            this INpcFaceMorphGetter item,
            NpcFaceMorph.TranslationMask? copyMask = null)
        {
            return ((NpcFaceMorphSetterTranslationCommon)((INpcFaceMorphGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NpcFaceMorph DeepCopy(
            this INpcFaceMorphGetter item,
            out NpcFaceMorph.ErrorMask errorMask,
            NpcFaceMorph.TranslationMask? copyMask = null)
        {
            return ((NpcFaceMorphSetterTranslationCommon)((INpcFaceMorphGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NpcFaceMorph DeepCopy(
            this INpcFaceMorphGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NpcFaceMorphSetterTranslationCommon)((INpcFaceMorphGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this INpcFaceMorph item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((NpcFaceMorphSetterCommon)((INpcFaceMorphGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum NpcFaceMorph_FieldIndex
    {
        Index = 0,
        Position = 1,
        Rotation = 2,
        Scale = 3,
        Unknown1 = 4,
        Unknown2 = 5,
    }
    #endregion

    #region Registration
    internal partial class NpcFaceMorph_Registration : ILoquiRegistration
    {
        public static readonly NpcFaceMorph_Registration Instance = new NpcFaceMorph_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(NpcFaceMorph.Mask<>);

        public static readonly Type ErrorMaskType = typeof(NpcFaceMorph.ErrorMask);

        public static readonly Type ClassType = typeof(NpcFaceMorph);

        public static readonly Type GetterType = typeof(INpcFaceMorphGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INpcFaceMorph);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.NpcFaceMorph";

        public const string Name = "NpcFaceMorph";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(
                RecordTypes.FMRI,
                RecordTypes.FMRS);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(NpcFaceMorphBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class NpcFaceMorphSetterCommon
    {
        public static readonly NpcFaceMorphSetterCommon Instance = new NpcFaceMorphSetterCommon();

        partial void ClearPartial();
        
        public void Clear(INpcFaceMorph item)
        {
            ClearPartial();
            item.Index = default;
            item.Position = default(P3Float);
            item.Rotation = default(P3Float);
            item.Scale = default(Single);
            item.Unknown1 = default(Single);
            item.Unknown2 = default(Single);
        }
        
        #region Mutagen
        public void RemapLinks(INpcFaceMorph obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INpcFaceMorph item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: NpcFaceMorphBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class NpcFaceMorphCommon
    {
        public static readonly NpcFaceMorphCommon Instance = new NpcFaceMorphCommon();

        public NpcFaceMorph.Mask<bool> GetEqualsMask(
            INpcFaceMorphGetter item,
            INpcFaceMorphGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NpcFaceMorph.Mask<bool>(false);
            ((NpcFaceMorphCommon)((INpcFaceMorphGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INpcFaceMorphGetter item,
            INpcFaceMorphGetter rhs,
            NpcFaceMorph.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Index = item.Index == rhs.Index;
            ret.Position = item.Position.Equals(rhs.Position);
            ret.Rotation = item.Rotation.Equals(rhs.Rotation);
            ret.Scale = item.Scale.EqualsWithin(rhs.Scale);
            ret.Unknown1 = item.Unknown1.EqualsWithin(rhs.Unknown1);
            ret.Unknown2 = item.Unknown2.EqualsWithin(rhs.Unknown2);
        }
        
        public string Print(
            INpcFaceMorphGetter item,
            string? name = null,
            NpcFaceMorph.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            INpcFaceMorphGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NpcFaceMorph.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"NpcFaceMorph =>");
            }
            else
            {
                sb.AppendLine($"{name} (NpcFaceMorph) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            INpcFaceMorphGetter item,
            StructuredStringBuilder sb,
            NpcFaceMorph.Mask<bool>? printMask = null)
        {
            if ((printMask?.Index ?? true)
                && item.Index is {} IndexItem)
            {
                sb.AppendItem(IndexItem, "Index");
            }
            if (printMask?.Position ?? true)
            {
                sb.AppendItem(item.Position, "Position");
            }
            if (printMask?.Rotation ?? true)
            {
                sb.AppendItem(item.Rotation, "Rotation");
            }
            if (printMask?.Scale ?? true)
            {
                sb.AppendItem(item.Scale, "Scale");
            }
            if (printMask?.Unknown1 ?? true)
            {
                sb.AppendItem(item.Unknown1, "Unknown1");
            }
            if (printMask?.Unknown2 ?? true)
            {
                sb.AppendItem(item.Unknown2, "Unknown2");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INpcFaceMorphGetter? lhs,
            INpcFaceMorphGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.Index) ?? true))
            {
                if (lhs.Index != rhs.Index) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.Position) ?? true))
            {
                if (!lhs.Position.Equals(rhs.Position)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.Rotation) ?? true))
            {
                if (!lhs.Rotation.Equals(rhs.Rotation)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.Scale) ?? true))
            {
                if (!lhs.Scale.EqualsWithin(rhs.Scale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.Unknown1) ?? true))
            {
                if (!lhs.Unknown1.EqualsWithin(rhs.Unknown1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.Unknown2) ?? true))
            {
                if (!lhs.Unknown2.EqualsWithin(rhs.Unknown2)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(INpcFaceMorphGetter item)
        {
            var hash = new HashCode();
            if (item.Index is {} Indexitem)
            {
                hash.Add(Indexitem);
            }
            hash.Add(item.Position);
            hash.Add(item.Rotation);
            hash.Add(item.Scale);
            hash.Add(item.Unknown1);
            hash.Add(item.Unknown2);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return NpcFaceMorph.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(INpcFaceMorphGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class NpcFaceMorphSetterTranslationCommon
    {
        public static readonly NpcFaceMorphSetterTranslationCommon Instance = new NpcFaceMorphSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            INpcFaceMorph item,
            INpcFaceMorphGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.Index) ?? true))
            {
                item.Index = rhs.Index;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.Position) ?? true))
            {
                item.Position = rhs.Position;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.Rotation) ?? true))
            {
                item.Rotation = rhs.Rotation;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.Scale) ?? true))
            {
                item.Scale = rhs.Scale;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.Unknown1) ?? true))
            {
                item.Unknown1 = rhs.Unknown1;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
        }
        
        #endregion
        
        public NpcFaceMorph DeepCopy(
            INpcFaceMorphGetter item,
            NpcFaceMorph.TranslationMask? copyMask = null)
        {
            NpcFaceMorph ret = (NpcFaceMorph)((NpcFaceMorphCommon)((INpcFaceMorphGetter)item).CommonInstance()!).GetNew();
            ((NpcFaceMorphSetterTranslationCommon)((INpcFaceMorphGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public NpcFaceMorph DeepCopy(
            INpcFaceMorphGetter item,
            out NpcFaceMorph.ErrorMask errorMask,
            NpcFaceMorph.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            NpcFaceMorph ret = (NpcFaceMorph)((NpcFaceMorphCommon)((INpcFaceMorphGetter)item).CommonInstance()!).GetNew();
            ((NpcFaceMorphSetterTranslationCommon)((INpcFaceMorphGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = NpcFaceMorph.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public NpcFaceMorph DeepCopy(
            INpcFaceMorphGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            NpcFaceMorph ret = (NpcFaceMorph)((NpcFaceMorphCommon)((INpcFaceMorphGetter)item).CommonInstance()!).GetNew();
            ((NpcFaceMorphSetterTranslationCommon)((INpcFaceMorphGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class NpcFaceMorph
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NpcFaceMorph_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => NpcFaceMorph_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NpcFaceMorphCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return NpcFaceMorphSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NpcFaceMorphSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INpcFaceMorphGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object INpcFaceMorphGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object INpcFaceMorphGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class NpcFaceMorphBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly NpcFaceMorphBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            INpcFaceMorphGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Index,
                header: translationParams.ConvertToCustom(RecordTypes.FMRI));
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.FMRS)))
            {
                P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Position);
                P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Rotation);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Scale);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Unknown1);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Unknown2);
            }
        }

        public void Write(
            MutagenWriter writer,
            INpcFaceMorphGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (INpcFaceMorphGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class NpcFaceMorphBinaryCreateTranslation
    {
        public static readonly NpcFaceMorphBinaryCreateTranslation Instance = new NpcFaceMorphBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            INpcFaceMorph item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FMRI:
                {
                    if (lastParsed.ShortCircuit((int)NpcFaceMorph_FieldIndex.Index, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Index = frame.ReadUInt32();
                    return (int)NpcFaceMorph_FieldIndex.Index;
                }
                case RecordTypeInts.FMRS:
                {
                    if (lastParsed.ShortCircuit((int)NpcFaceMorph_FieldIndex.Unknown2, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 12) return null;
                    item.Position = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 12) return null;
                    item.Rotation = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.Scale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.Unknown1 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.Unknown2 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)NpcFaceMorph_FieldIndex.Unknown2;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class NpcFaceMorphBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this INpcFaceMorphGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcFaceMorphBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class NpcFaceMorphBinaryOverlay :
        PluginBinaryOverlay,
        INpcFaceMorphGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NpcFaceMorph_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => NpcFaceMorph_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NpcFaceMorphCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NpcFaceMorphSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INpcFaceMorphGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? INpcFaceMorphGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object INpcFaceMorphGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NpcFaceMorphBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcFaceMorphBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Index
        private int? _IndexLocation;
        public UInt32? Index => _IndexLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _IndexLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        private RangeInt32? _FMRSLocation;
        #region Position
        private int _PositionLocation => _FMRSLocation!.Value.Min;
        private bool _Position_IsSet => _FMRSLocation.HasValue;
        public P3Float Position => _Position_IsSet ? P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_recordData.Slice(_PositionLocation, 12)) : default(P3Float);
        #endregion
        #region Rotation
        private int _RotationLocation => _FMRSLocation!.Value.Min + 0xC;
        private bool _Rotation_IsSet => _FMRSLocation.HasValue;
        public P3Float Rotation => _Rotation_IsSet ? P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_recordData.Slice(_RotationLocation, 12)) : default(P3Float);
        #endregion
        #region Scale
        private int _ScaleLocation => _FMRSLocation!.Value.Min + 0x18;
        private bool _Scale_IsSet => _FMRSLocation.HasValue;
        public Single Scale => _Scale_IsSet ? _recordData.Slice(_ScaleLocation, 4).Float() : default(Single);
        #endregion
        #region Unknown1
        private int _Unknown1Location => _FMRSLocation!.Value.Min + 0x1C;
        private bool _Unknown1_IsSet => _FMRSLocation.HasValue;
        public Single Unknown1 => _Unknown1_IsSet ? _recordData.Slice(_Unknown1Location, 4).Float() : default(Single);
        #endregion
        #region Unknown2
        private int _Unknown2Location => _FMRSLocation!.Value.Min + 0x20;
        private bool _Unknown2_IsSet => _FMRSLocation.HasValue;
        public Single Unknown2 => _Unknown2_IsSet ? _recordData.Slice(_Unknown2Location, 4).Float() : default(Single);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NpcFaceMorphBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static INpcFaceMorphGetter NpcFaceMorphFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new NpcFaceMorphBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static INpcFaceMorphGetter NpcFaceMorphFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return NpcFaceMorphFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FMRI:
                {
                    if (lastParsed.ShortCircuit((int)NpcFaceMorph_FieldIndex.Index, translationParams)) return ParseResult.Stop;
                    _IndexLocation = (stream.Position - offset);
                    return (int)NpcFaceMorph_FieldIndex.Index;
                }
                case RecordTypeInts.FMRS:
                {
                    if (lastParsed.ShortCircuit((int)NpcFaceMorph_FieldIndex.Unknown2, translationParams)) return ParseResult.Stop;
                    _FMRSLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)NpcFaceMorph_FieldIndex.Unknown2;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NpcFaceMorphMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INpcFaceMorphGetter rhs) return false;
            return ((NpcFaceMorphCommon)((INpcFaceMorphGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INpcFaceMorphGetter? obj)
        {
            return ((NpcFaceMorphCommon)((INpcFaceMorphGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NpcFaceMorphCommon)((INpcFaceMorphGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

