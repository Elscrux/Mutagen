/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.RecordTypeMapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Activator :
        Fallout4MajorRecord,
        IActivatorInternal,
        IEquatable<IActivatorGetter>,
        ILoquiObjectSetter<Activator>
    {
        #region Ctor
        protected Activator()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        /// <summary>
        /// Aspects: IScripted
        /// </summary>
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IActivatorGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IScriptedGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded, IObjectBoundedOptional
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IActivatorGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region PreviewTransform
        public PreviewTransform PreviewTransform { get; set; } = new PreviewTransform();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPreviewTransformGetter IActivatorGetter.PreviewTransform => PreviewTransform;
        #endregion
        #region AnimationSound
        private readonly IFormLinkNullable<IAnimationSoundTagSetGetter> _AnimationSound = new FormLinkNullable<IAnimationSoundTagSetGetter>();
        public IFormLinkNullable<IAnimationSoundTagSetGetter> AnimationSound
        {
            get => _AnimationSound;
            set => _AnimationSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IAnimationSoundTagSetGetter> IActivatorGetter.AnimationSound => this.AnimationSound;
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IActivatorGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IActivatorGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region Destructible
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Destructible? _Destructible;
        public Destructible? Destructible
        {
            get => _Destructible;
            set => _Destructible = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? IActivatorGetter.Destructible => this.Destructible;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IActivatorGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region Properties
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Properties? _Properties;
        public Properties? Properties
        {
            get => _Properties;
            set => _Properties = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPropertiesGetter? IActivatorGetter.Properties => this.Properties;
        #endregion
        #region NativeTerminal
        private readonly IFormLinkNullable<ITerminalGetter> _NativeTerminal = new FormLinkNullable<ITerminalGetter>();
        public IFormLinkNullable<ITerminalGetter> NativeTerminal
        {
            get => _NativeTerminal;
            set => _NativeTerminal.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ITerminalGetter> IActivatorGetter.NativeTerminal => this.NativeTerminal;
        #endregion
        #region ForcedLocRefType
        private readonly IFormLinkNullable<ILocationReferenceTypeGetter> _ForcedLocRefType = new FormLinkNullable<ILocationReferenceTypeGetter>();
        public IFormLinkNullable<ILocationReferenceTypeGetter> ForcedLocRefType
        {
            get => _ForcedLocRefType;
            set => _ForcedLocRefType.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ILocationReferenceTypeGetter> IActivatorGetter.ForcedLocRefType => this.ForcedLocRefType;
        #endregion
        #region MarkerColor
        public Color? MarkerColor { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Color? IActivatorGetter.MarkerColor => this.MarkerColor;
        #endregion
        #region LoopingSound
        private readonly IFormLinkNullable<ISoundDescriptorGetter> _LoopingSound = new FormLinkNullable<ISoundDescriptorGetter>();
        public IFormLinkNullable<ISoundDescriptorGetter> LoopingSound
        {
            get => _LoopingSound;
            set => _LoopingSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> IActivatorGetter.LoopingSound => this.LoopingSound;
        #endregion
        #region ActivationSound
        private readonly IFormLinkNullable<ISoundDescriptorGetter> _ActivationSound = new FormLinkNullable<ISoundDescriptorGetter>();
        public IFormLinkNullable<ISoundDescriptorGetter> ActivationSound
        {
            get => _ActivationSound;
            set => _ActivationSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> IActivatorGetter.ActivationSound => this.ActivationSound;
        #endregion
        #region WaterType
        private readonly IFormLinkNullable<IWaterGetter> _WaterType = new FormLinkNullable<IWaterGetter>();
        public IFormLinkNullable<IWaterGetter> WaterType
        {
            get => _WaterType;
            set => _WaterType.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IWaterGetter> IActivatorGetter.WaterType => this.WaterType;
        #endregion
        #region ActivateTextOverride
        public TranslatedString? ActivateTextOverride { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IActivatorGetter.ActivateTextOverride => this.ActivateTextOverride;
        #endregion
        #region Flags
        public Activator.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Activator.Flag? IActivatorGetter.Flags => this.Flags;
        #endregion
        #region InteractionKeyword
        private readonly IFormLinkNullable<IKeywordGetter> _InteractionKeyword = new FormLinkNullable<IKeywordGetter>();
        public IFormLinkNullable<IKeywordGetter> InteractionKeyword
        {
            get => _InteractionKeyword;
            set => _InteractionKeyword.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IKeywordGetter> IActivatorGetter.InteractionKeyword => this.InteractionKeyword;
        #endregion
        #region RadioReceiver
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private RadioReceiver? _RadioReceiver;
        public RadioReceiver? RadioReceiver
        {
            get => _RadioReceiver;
            set => _RadioReceiver = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRadioReceiverGetter? IActivatorGetter.RadioReceiver => this.RadioReceiver;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition>? _Conditions;
        public ExtendedList<Condition>? Conditions
        {
            get => this._Conditions;
            set => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter>? IActivatorGetter.Conditions => _Conditions;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ActivatorMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.PreviewTransform = new MaskItem<TItem, PreviewTransform.Mask<TItem>?>(initialValue, new PreviewTransform.Mask<TItem>(initialValue));
                this.AnimationSound = initialValue;
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(initialValue, new Destructible.Mask<TItem>(initialValue));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Properties = new MaskItem<TItem, Properties.Mask<TItem>?>(initialValue, new Properties.Mask<TItem>(initialValue));
                this.NativeTerminal = initialValue;
                this.ForcedLocRefType = initialValue;
                this.MarkerColor = initialValue;
                this.LoopingSound = initialValue;
                this.ActivationSound = initialValue;
                this.WaterType = initialValue;
                this.ActivateTextOverride = initialValue;
                this.Flags = initialValue;
                this.InteractionKeyword = initialValue;
                this.RadioReceiver = new MaskItem<TItem, RadioReceiver.Mask<TItem>?>(initialValue, new RadioReceiver.Mask<TItem>(initialValue));
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem ObjectBounds,
                TItem PreviewTransform,
                TItem AnimationSound,
                TItem Name,
                TItem Model,
                TItem Destructible,
                TItem Keywords,
                TItem Properties,
                TItem NativeTerminal,
                TItem ForcedLocRefType,
                TItem MarkerColor,
                TItem LoopingSound,
                TItem ActivationSound,
                TItem WaterType,
                TItem ActivateTextOverride,
                TItem Flags,
                TItem InteractionKeyword,
                TItem RadioReceiver,
                TItem Conditions)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.PreviewTransform = new MaskItem<TItem, PreviewTransform.Mask<TItem>?>(PreviewTransform, new PreviewTransform.Mask<TItem>(PreviewTransform));
                this.AnimationSound = AnimationSound;
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(Destructible, new Destructible.Mask<TItem>(Destructible));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Properties = new MaskItem<TItem, Properties.Mask<TItem>?>(Properties, new Properties.Mask<TItem>(Properties));
                this.NativeTerminal = NativeTerminal;
                this.ForcedLocRefType = ForcedLocRefType;
                this.MarkerColor = MarkerColor;
                this.LoopingSound = LoopingSound;
                this.ActivationSound = ActivationSound;
                this.WaterType = WaterType;
                this.ActivateTextOverride = ActivateTextOverride;
                this.Flags = Flags;
                this.InteractionKeyword = InteractionKeyword;
                this.RadioReceiver = new MaskItem<TItem, RadioReceiver.Mask<TItem>?>(RadioReceiver, new RadioReceiver.Mask<TItem>(RadioReceiver));
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public MaskItem<TItem, PreviewTransform.Mask<TItem>?>? PreviewTransform { get; set; }
            public TItem AnimationSound;
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, Destructible.Mask<TItem>?>? Destructible { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public MaskItem<TItem, Properties.Mask<TItem>?>? Properties { get; set; }
            public TItem NativeTerminal;
            public TItem ForcedLocRefType;
            public TItem MarkerColor;
            public TItem LoopingSound;
            public TItem ActivationSound;
            public TItem WaterType;
            public TItem ActivateTextOverride;
            public TItem Flags;
            public TItem InteractionKeyword;
            public MaskItem<TItem, RadioReceiver.Mask<TItem>?>? RadioReceiver { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.PreviewTransform, rhs.PreviewTransform)) return false;
                if (!object.Equals(this.AnimationSound, rhs.AnimationSound)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Destructible, rhs.Destructible)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Properties, rhs.Properties)) return false;
                if (!object.Equals(this.NativeTerminal, rhs.NativeTerminal)) return false;
                if (!object.Equals(this.ForcedLocRefType, rhs.ForcedLocRefType)) return false;
                if (!object.Equals(this.MarkerColor, rhs.MarkerColor)) return false;
                if (!object.Equals(this.LoopingSound, rhs.LoopingSound)) return false;
                if (!object.Equals(this.ActivationSound, rhs.ActivationSound)) return false;
                if (!object.Equals(this.WaterType, rhs.WaterType)) return false;
                if (!object.Equals(this.ActivateTextOverride, rhs.ActivateTextOverride)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.InteractionKeyword, rhs.InteractionKeyword)) return false;
                if (!object.Equals(this.RadioReceiver, rhs.RadioReceiver)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.ObjectBounds);
                hash.Add(this.PreviewTransform);
                hash.Add(this.AnimationSound);
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.Destructible);
                hash.Add(this.Keywords);
                hash.Add(this.Properties);
                hash.Add(this.NativeTerminal);
                hash.Add(this.ForcedLocRefType);
                hash.Add(this.MarkerColor);
                hash.Add(this.LoopingSound);
                hash.Add(this.ActivationSound);
                hash.Add(this.WaterType);
                hash.Add(this.ActivateTextOverride);
                hash.Add(this.Flags);
                hash.Add(this.InteractionKeyword);
                hash.Add(this.RadioReceiver);
                hash.Add(this.Conditions);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (PreviewTransform != null)
                {
                    if (!eval(this.PreviewTransform.Overall)) return false;
                    if (this.PreviewTransform.Specific != null && !this.PreviewTransform.Specific.All(eval)) return false;
                }
                if (!eval(this.AnimationSound)) return false;
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (Destructible != null)
                {
                    if (!eval(this.Destructible.Overall)) return false;
                    if (this.Destructible.Specific != null && !this.Destructible.Specific.All(eval)) return false;
                }
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Properties != null)
                {
                    if (!eval(this.Properties.Overall)) return false;
                    if (this.Properties.Specific != null && !this.Properties.Specific.All(eval)) return false;
                }
                if (!eval(this.NativeTerminal)) return false;
                if (!eval(this.ForcedLocRefType)) return false;
                if (!eval(this.MarkerColor)) return false;
                if (!eval(this.LoopingSound)) return false;
                if (!eval(this.ActivationSound)) return false;
                if (!eval(this.WaterType)) return false;
                if (!eval(this.ActivateTextOverride)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.InteractionKeyword)) return false;
                if (RadioReceiver != null)
                {
                    if (!eval(this.RadioReceiver.Overall)) return false;
                    if (this.RadioReceiver.Specific != null && !this.RadioReceiver.Specific.All(eval)) return false;
                }
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (PreviewTransform != null)
                {
                    if (eval(this.PreviewTransform.Overall)) return true;
                    if (this.PreviewTransform.Specific != null && this.PreviewTransform.Specific.Any(eval)) return true;
                }
                if (eval(this.AnimationSound)) return true;
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (Destructible != null)
                {
                    if (eval(this.Destructible.Overall)) return true;
                    if (this.Destructible.Specific != null && this.Destructible.Specific.Any(eval)) return true;
                }
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Properties != null)
                {
                    if (eval(this.Properties.Overall)) return true;
                    if (this.Properties.Specific != null && this.Properties.Specific.Any(eval)) return true;
                }
                if (eval(this.NativeTerminal)) return true;
                if (eval(this.ForcedLocRefType)) return true;
                if (eval(this.MarkerColor)) return true;
                if (eval(this.LoopingSound)) return true;
                if (eval(this.ActivationSound)) return true;
                if (eval(this.WaterType)) return true;
                if (eval(this.ActivateTextOverride)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.InteractionKeyword)) return true;
                if (RadioReceiver != null)
                {
                    if (eval(this.RadioReceiver.Overall)) return true;
                    if (this.RadioReceiver.Specific != null && this.RadioReceiver.Specific.Any(eval)) return true;
                }
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Activator.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.PreviewTransform = this.PreviewTransform == null ? null : new MaskItem<R, PreviewTransform.Mask<R>?>(eval(this.PreviewTransform.Overall), this.PreviewTransform.Specific?.Translate(eval));
                obj.AnimationSound = eval(this.AnimationSound);
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Destructible = this.Destructible == null ? null : new MaskItem<R, Destructible.Mask<R>?>(eval(this.Destructible.Overall), this.Destructible.Specific?.Translate(eval));
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Properties = this.Properties == null ? null : new MaskItem<R, Properties.Mask<R>?>(eval(this.Properties.Overall), this.Properties.Specific?.Translate(eval));
                obj.NativeTerminal = eval(this.NativeTerminal);
                obj.ForcedLocRefType = eval(this.ForcedLocRefType);
                obj.MarkerColor = eval(this.MarkerColor);
                obj.LoopingSound = eval(this.LoopingSound);
                obj.ActivationSound = eval(this.ActivationSound);
                obj.WaterType = eval(this.WaterType);
                obj.ActivateTextOverride = eval(this.ActivateTextOverride);
                obj.Flags = eval(this.Flags);
                obj.InteractionKeyword = eval(this.InteractionKeyword);
                obj.RadioReceiver = this.RadioReceiver == null ? null : new MaskItem<R, RadioReceiver.Mask<R>?>(eval(this.RadioReceiver.Overall), this.RadioReceiver.Specific?.Translate(eval));
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Activator.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Activator.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Activator.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.ToString(fg);
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.PreviewTransform?.Overall ?? true)
                    {
                        PreviewTransform?.ToString(fg);
                    }
                    if (printMask?.AnimationSound ?? true)
                    {
                        fg.AppendItem(AnimationSound, "AnimationSound");
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Destructible?.Overall ?? true)
                    {
                        Destructible?.ToString(fg);
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        fg.AppendLine("Keywords =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Properties?.Overall ?? true)
                    {
                        Properties?.ToString(fg);
                    }
                    if (printMask?.NativeTerminal ?? true)
                    {
                        fg.AppendItem(NativeTerminal, "NativeTerminal");
                    }
                    if (printMask?.ForcedLocRefType ?? true)
                    {
                        fg.AppendItem(ForcedLocRefType, "ForcedLocRefType");
                    }
                    if (printMask?.MarkerColor ?? true)
                    {
                        fg.AppendItem(MarkerColor, "MarkerColor");
                    }
                    if (printMask?.LoopingSound ?? true)
                    {
                        fg.AppendItem(LoopingSound, "LoopingSound");
                    }
                    if (printMask?.ActivationSound ?? true)
                    {
                        fg.AppendItem(ActivationSound, "ActivationSound");
                    }
                    if (printMask?.WaterType ?? true)
                    {
                        fg.AppendItem(WaterType, "WaterType");
                    }
                    if (printMask?.ActivateTextOverride ?? true)
                    {
                        fg.AppendItem(ActivateTextOverride, "ActivateTextOverride");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.InteractionKeyword ?? true)
                    {
                        fg.AppendItem(InteractionKeyword, "InteractionKeyword");
                    }
                    if (printMask?.RadioReceiver?.Overall ?? true)
                    {
                        RadioReceiver?.ToString(fg);
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public MaskItem<Exception?, PreviewTransform.ErrorMask?>? PreviewTransform;
            public Exception? AnimationSound;
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, Destructible.ErrorMask?>? Destructible;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public MaskItem<Exception?, Properties.ErrorMask?>? Properties;
            public Exception? NativeTerminal;
            public Exception? ForcedLocRefType;
            public Exception? MarkerColor;
            public Exception? LoopingSound;
            public Exception? ActivationSound;
            public Exception? WaterType;
            public Exception? ActivateTextOverride;
            public Exception? Flags;
            public Exception? InteractionKeyword;
            public MaskItem<Exception?, RadioReceiver.ErrorMask?>? RadioReceiver;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Activator_FieldIndex enu = (Activator_FieldIndex)index;
                switch (enu)
                {
                    case Activator_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Activator_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Activator_FieldIndex.PreviewTransform:
                        return PreviewTransform;
                    case Activator_FieldIndex.AnimationSound:
                        return AnimationSound;
                    case Activator_FieldIndex.Name:
                        return Name;
                    case Activator_FieldIndex.Model:
                        return Model;
                    case Activator_FieldIndex.Destructible:
                        return Destructible;
                    case Activator_FieldIndex.Keywords:
                        return Keywords;
                    case Activator_FieldIndex.Properties:
                        return Properties;
                    case Activator_FieldIndex.NativeTerminal:
                        return NativeTerminal;
                    case Activator_FieldIndex.ForcedLocRefType:
                        return ForcedLocRefType;
                    case Activator_FieldIndex.MarkerColor:
                        return MarkerColor;
                    case Activator_FieldIndex.LoopingSound:
                        return LoopingSound;
                    case Activator_FieldIndex.ActivationSound:
                        return ActivationSound;
                    case Activator_FieldIndex.WaterType:
                        return WaterType;
                    case Activator_FieldIndex.ActivateTextOverride:
                        return ActivateTextOverride;
                    case Activator_FieldIndex.Flags:
                        return Flags;
                    case Activator_FieldIndex.InteractionKeyword:
                        return InteractionKeyword;
                    case Activator_FieldIndex.RadioReceiver:
                        return RadioReceiver;
                    case Activator_FieldIndex.Conditions:
                        return Conditions;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Activator_FieldIndex enu = (Activator_FieldIndex)index;
                switch (enu)
                {
                    case Activator_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case Activator_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Activator_FieldIndex.PreviewTransform:
                        this.PreviewTransform = new MaskItem<Exception?, PreviewTransform.ErrorMask?>(ex, null);
                        break;
                    case Activator_FieldIndex.AnimationSound:
                        this.AnimationSound = ex;
                        break;
                    case Activator_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Activator_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Activator_FieldIndex.Destructible:
                        this.Destructible = new MaskItem<Exception?, Destructible.ErrorMask?>(ex, null);
                        break;
                    case Activator_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Activator_FieldIndex.Properties:
                        this.Properties = new MaskItem<Exception?, Properties.ErrorMask?>(ex, null);
                        break;
                    case Activator_FieldIndex.NativeTerminal:
                        this.NativeTerminal = ex;
                        break;
                    case Activator_FieldIndex.ForcedLocRefType:
                        this.ForcedLocRefType = ex;
                        break;
                    case Activator_FieldIndex.MarkerColor:
                        this.MarkerColor = ex;
                        break;
                    case Activator_FieldIndex.LoopingSound:
                        this.LoopingSound = ex;
                        break;
                    case Activator_FieldIndex.ActivationSound:
                        this.ActivationSound = ex;
                        break;
                    case Activator_FieldIndex.WaterType:
                        this.WaterType = ex;
                        break;
                    case Activator_FieldIndex.ActivateTextOverride:
                        this.ActivateTextOverride = ex;
                        break;
                    case Activator_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Activator_FieldIndex.InteractionKeyword:
                        this.InteractionKeyword = ex;
                        break;
                    case Activator_FieldIndex.RadioReceiver:
                        this.RadioReceiver = new MaskItem<Exception?, RadioReceiver.ErrorMask?>(ex, null);
                        break;
                    case Activator_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Activator_FieldIndex enu = (Activator_FieldIndex)index;
                switch (enu)
                {
                    case Activator_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case Activator_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Activator_FieldIndex.PreviewTransform:
                        this.PreviewTransform = (MaskItem<Exception?, PreviewTransform.ErrorMask?>?)obj;
                        break;
                    case Activator_FieldIndex.AnimationSound:
                        this.AnimationSound = (Exception?)obj;
                        break;
                    case Activator_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Activator_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Activator_FieldIndex.Destructible:
                        this.Destructible = (MaskItem<Exception?, Destructible.ErrorMask?>?)obj;
                        break;
                    case Activator_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Activator_FieldIndex.Properties:
                        this.Properties = (MaskItem<Exception?, Properties.ErrorMask?>?)obj;
                        break;
                    case Activator_FieldIndex.NativeTerminal:
                        this.NativeTerminal = (Exception?)obj;
                        break;
                    case Activator_FieldIndex.ForcedLocRefType:
                        this.ForcedLocRefType = (Exception?)obj;
                        break;
                    case Activator_FieldIndex.MarkerColor:
                        this.MarkerColor = (Exception?)obj;
                        break;
                    case Activator_FieldIndex.LoopingSound:
                        this.LoopingSound = (Exception?)obj;
                        break;
                    case Activator_FieldIndex.ActivationSound:
                        this.ActivationSound = (Exception?)obj;
                        break;
                    case Activator_FieldIndex.WaterType:
                        this.WaterType = (Exception?)obj;
                        break;
                    case Activator_FieldIndex.ActivateTextOverride:
                        this.ActivateTextOverride = (Exception?)obj;
                        break;
                    case Activator_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Activator_FieldIndex.InteractionKeyword:
                        this.InteractionKeyword = (Exception?)obj;
                        break;
                    case Activator_FieldIndex.RadioReceiver:
                        this.RadioReceiver = (MaskItem<Exception?, RadioReceiver.ErrorMask?>?)obj;
                        break;
                    case Activator_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (ObjectBounds != null) return true;
                if (PreviewTransform != null) return true;
                if (AnimationSound != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Destructible != null) return true;
                if (Keywords != null) return true;
                if (Properties != null) return true;
                if (NativeTerminal != null) return true;
                if (ForcedLocRefType != null) return true;
                if (MarkerColor != null) return true;
                if (LoopingSound != null) return true;
                if (ActivationSound != null) return true;
                if (WaterType != null) return true;
                if (ActivateTextOverride != null) return true;
                if (Flags != null) return true;
                if (InteractionKeyword != null) return true;
                if (RadioReceiver != null) return true;
                if (Conditions != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                VirtualMachineAdapter?.ToString(fg);
                ObjectBounds?.ToString(fg);
                PreviewTransform?.ToString(fg);
                fg.AppendItem(AnimationSound, "AnimationSound");
                fg.AppendItem(Name, "Name");
                Model?.ToString(fg);
                Destructible?.ToString(fg);
                if (Keywords is {} KeywordsItem)
                {
                    fg.AppendLine("Keywords =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                Properties?.ToString(fg);
                fg.AppendItem(NativeTerminal, "NativeTerminal");
                fg.AppendItem(ForcedLocRefType, "ForcedLocRefType");
                fg.AppendItem(MarkerColor, "MarkerColor");
                fg.AppendItem(LoopingSound, "LoopingSound");
                fg.AppendItem(ActivationSound, "ActivationSound");
                fg.AppendItem(WaterType, "WaterType");
                fg.AppendItem(ActivateTextOverride, "ActivateTextOverride");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(InteractionKeyword, "InteractionKeyword");
                RadioReceiver?.ToString(fg);
                if (Conditions is {} ConditionsItem)
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.PreviewTransform = this.PreviewTransform.Combine(rhs.PreviewTransform, (l, r) => l.Combine(r));
                ret.AnimationSound = this.AnimationSound.Combine(rhs.AnimationSound);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Destructible = this.Destructible.Combine(rhs.Destructible, (l, r) => l.Combine(r));
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Properties = this.Properties.Combine(rhs.Properties, (l, r) => l.Combine(r));
                ret.NativeTerminal = this.NativeTerminal.Combine(rhs.NativeTerminal);
                ret.ForcedLocRefType = this.ForcedLocRefType.Combine(rhs.ForcedLocRefType);
                ret.MarkerColor = this.MarkerColor.Combine(rhs.MarkerColor);
                ret.LoopingSound = this.LoopingSound.Combine(rhs.LoopingSound);
                ret.ActivationSound = this.ActivationSound.Combine(rhs.ActivationSound);
                ret.WaterType = this.WaterType.Combine(rhs.WaterType);
                ret.ActivateTextOverride = this.ActivateTextOverride.Combine(rhs.ActivateTextOverride);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.InteractionKeyword = this.InteractionKeyword.Combine(rhs.InteractionKeyword);
                ret.RadioReceiver = this.RadioReceiver.Combine(rhs.RadioReceiver, (l, r) => l.Combine(r));
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public ObjectBounds.TranslationMask? ObjectBounds;
            public PreviewTransform.TranslationMask? PreviewTransform;
            public bool AnimationSound;
            public bool Name;
            public Model.TranslationMask? Model;
            public Destructible.TranslationMask? Destructible;
            public bool Keywords;
            public Properties.TranslationMask? Properties;
            public bool NativeTerminal;
            public bool ForcedLocRefType;
            public bool MarkerColor;
            public bool LoopingSound;
            public bool ActivationSound;
            public bool WaterType;
            public bool ActivateTextOverride;
            public bool Flags;
            public bool InteractionKeyword;
            public RadioReceiver.TranslationMask? RadioReceiver;
            public Condition.TranslationMask? Conditions;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.AnimationSound = defaultOn;
                this.Name = defaultOn;
                this.Keywords = defaultOn;
                this.NativeTerminal = defaultOn;
                this.ForcedLocRefType = defaultOn;
                this.MarkerColor = defaultOn;
                this.LoopingSound = defaultOn;
                this.ActivationSound = defaultOn;
                this.WaterType = defaultOn;
                this.ActivateTextOverride = defaultOn;
                this.Flags = defaultOn;
                this.InteractionKeyword = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((PreviewTransform != null ? PreviewTransform.OnOverall : DefaultOn, PreviewTransform?.GetCrystal()));
                ret.Add((AnimationSound, null));
                ret.Add((Name, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((Destructible != null ? Destructible.OnOverall : DefaultOn, Destructible?.GetCrystal()));
                ret.Add((Keywords, null));
                ret.Add((Properties != null ? Properties.OnOverall : DefaultOn, Properties?.GetCrystal()));
                ret.Add((NativeTerminal, null));
                ret.Add((ForcedLocRefType, null));
                ret.Add((MarkerColor, null));
                ret.Add((LoopingSound, null));
                ret.Add((ActivationSound, null));
                ret.Add((WaterType, null));
                ret.Add((ActivateTextOverride, null));
                ret.Add((Flags, null));
                ret.Add((InteractionKeyword, null));
                ret.Add((RadioReceiver != null ? RadioReceiver.OnOverall : DefaultOn, RadioReceiver?.GetCrystal()));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Activator_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => ActivatorCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ActivatorSetterCommon.Instance.RemapLinks(this, mapping);
        public Activator(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private Activator(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal Activator(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Activator(IFallout4Mod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Activator(IFallout4Mod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Activator>.ToString(this);
        }

        protected override Type LinkType => typeof(IActivator);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IActivatorGetter rhs) return false;
            return ((ActivatorCommon)((IActivatorGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IActivatorGetter? obj)
        {
            return ((ActivatorCommon)((IActivatorGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ActivatorCommon)((IActivatorGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ActivatorBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ActivatorBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Activator CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new Activator();
            ((ActivatorSetterCommon)((IActivatorGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Activator item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ActivatorSetterCommon)((IActivatorGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Activator GetNew()
        {
            return new Activator();
        }

    }
    #endregion

    #region Interface
    public partial interface IActivator :
        IActivatorGetter,
        IFallout4MajorRecordInternal,
        IFormLinkContainer,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IActivatorInternal>,
        IModeled,
        INamed,
        INamedRequired,
        IObjectBounded,
        IObjectBoundedOptional,
        IObjectId,
        IScripted,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: IScripted
        /// </summary>
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        /// <summary>
        /// Aspects: IObjectBounded, IObjectBoundedOptional
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        new PreviewTransform PreviewTransform { get; set; }
        new IFormLinkNullable<IAnimationSoundTagSetGetter> AnimationSound { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        new Destructible? Destructible { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new Properties? Properties { get; set; }
        new IFormLinkNullable<ITerminalGetter> NativeTerminal { get; set; }
        new IFormLinkNullable<ILocationReferenceTypeGetter> ForcedLocRefType { get; set; }
        new Color? MarkerColor { get; set; }
        new IFormLinkNullable<ISoundDescriptorGetter> LoopingSound { get; set; }
        new IFormLinkNullable<ISoundDescriptorGetter> ActivationSound { get; set; }
        new IFormLinkNullable<IWaterGetter> WaterType { get; set; }
        new TranslatedString? ActivateTextOverride { get; set; }
        new Activator.Flag? Flags { get; set; }
        new IFormLinkNullable<IKeywordGetter> InteractionKeyword { get; set; }
        new RadioReceiver? RadioReceiver { get; set; }
        new ExtendedList<Condition>? Conditions { get; set; }
        #region Mutagen
        new Activator.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IActivatorInternal :
        IFallout4MajorRecordInternal,
        IActivator,
        IActivatorGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.ACTI)]
    public partial interface IActivatorGetter :
        IFallout4MajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IActivatorGetter>,
        IMapsToGetter<IActivatorGetter>,
        IModeledGetter,
        INamedGetter,
        INamedRequiredGetter,
        IObjectBoundedGetter,
        IObjectBoundedOptionalGetter,
        IObjectIdGetter,
        IScriptedGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Activator_Registration.Instance;
        #region VirtualMachineAdapter
        /// <summary>
        /// Aspects: IScriptedGetter
        /// </summary>
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter, IObjectBoundedOptionalGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        IPreviewTransformGetter PreviewTransform { get; }
        IFormLinkNullableGetter<IAnimationSoundTagSetGetter> AnimationSound { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        IDestructibleGetter? Destructible { get; }
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        IPropertiesGetter? Properties { get; }
        IFormLinkNullableGetter<ITerminalGetter> NativeTerminal { get; }
        IFormLinkNullableGetter<ILocationReferenceTypeGetter> ForcedLocRefType { get; }
        Color? MarkerColor { get; }
        IFormLinkNullableGetter<ISoundDescriptorGetter> LoopingSound { get; }
        IFormLinkNullableGetter<ISoundDescriptorGetter> ActivationSound { get; }
        IFormLinkNullableGetter<IWaterGetter> WaterType { get; }
        ITranslatedStringGetter? ActivateTextOverride { get; }
        Activator.Flag? Flags { get; }
        IFormLinkNullableGetter<IKeywordGetter> InteractionKeyword { get; }
        IRadioReceiverGetter? RadioReceiver { get; }
        IReadOnlyList<IConditionGetter>? Conditions { get; }

        #region Mutagen
        Activator.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class ActivatorMixIn
    {
        public static void Clear(this IActivatorInternal item)
        {
            ((ActivatorSetterCommon)((IActivatorGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Activator.Mask<bool> GetEqualsMask(
            this IActivatorGetter item,
            IActivatorGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ActivatorCommon)((IActivatorGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IActivatorGetter item,
            string? name = null,
            Activator.Mask<bool>? printMask = null)
        {
            return ((ActivatorCommon)((IActivatorGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IActivatorGetter item,
            FileGeneration fg,
            string? name = null,
            Activator.Mask<bool>? printMask = null)
        {
            ((ActivatorCommon)((IActivatorGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IActivatorGetter item,
            IActivatorGetter rhs,
            Activator.TranslationMask? equalsMask = null)
        {
            return ((ActivatorCommon)((IActivatorGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IActivatorInternal lhs,
            IActivatorGetter rhs,
            out Activator.ErrorMask errorMask,
            Activator.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ActivatorSetterTranslationCommon)((IActivatorGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Activator.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IActivatorInternal lhs,
            IActivatorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ActivatorSetterTranslationCommon)((IActivatorGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Activator DeepCopy(
            this IActivatorGetter item,
            Activator.TranslationMask? copyMask = null)
        {
            return ((ActivatorSetterTranslationCommon)((IActivatorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Activator DeepCopy(
            this IActivatorGetter item,
            out Activator.ErrorMask errorMask,
            Activator.TranslationMask? copyMask = null)
        {
            return ((ActivatorSetterTranslationCommon)((IActivatorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Activator DeepCopy(
            this IActivatorGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ActivatorSetterTranslationCommon)((IActivatorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Activator Duplicate(
            this IActivatorGetter item,
            FormKey formKey,
            Activator.TranslationMask? copyMask = null)
        {
            return ((ActivatorCommon)((IActivatorGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IActivatorInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((ActivatorSetterCommon)((IActivatorGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Activator_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        ObjectBounds = 7,
        PreviewTransform = 8,
        AnimationSound = 9,
        Name = 10,
        Model = 11,
        Destructible = 12,
        Keywords = 13,
        Properties = 14,
        NativeTerminal = 15,
        ForcedLocRefType = 16,
        MarkerColor = 17,
        LoopingSound = 18,
        ActivationSound = 19,
        WaterType = 20,
        ActivateTextOverride = 21,
        Flags = 22,
        InteractionKeyword = 23,
        RadioReceiver = 24,
        Conditions = 25,
    }
    #endregion

    #region Registration
    public partial class Activator_Registration : ILoquiRegistration
    {
        public static readonly Activator_Registration Instance = new Activator_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 127,
            version: 0);

        public const string GUID = "e5dd8417-9b46-4754-bfe1-1db51332bfa4";

        public const ushort AdditionalFieldCount = 20;

        public const ushort FieldCount = 26;

        public static readonly Type MaskType = typeof(Activator.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Activator.ErrorMask);

        public static readonly Type ClassType = typeof(Activator);

        public static readonly Type GetterType = typeof(IActivatorGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IActivator);

        public static readonly Type? InternalSetterType = typeof(IActivatorInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Activator";

        public const string Name = "Activator";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ACTI;
        public static readonly Type BinaryWriteTranslation = typeof(ActivatorBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ActivatorSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly ActivatorSetterCommon Instance = new ActivatorSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IActivatorInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.ObjectBounds.Clear();
            item.PreviewTransform.Clear();
            item.AnimationSound.Clear();
            item.Name = default;
            item.Model = null;
            item.Destructible = null;
            item.Keywords = null;
            item.Properties = null;
            item.NativeTerminal.Clear();
            item.ForcedLocRefType.Clear();
            item.MarkerColor = default;
            item.LoopingSound.Clear();
            item.ActivationSound.Clear();
            item.WaterType.Clear();
            item.ActivateTextOverride = default;
            item.Flags = default;
            item.InteractionKeyword.Clear();
            item.RadioReceiver = null;
            item.Conditions = null;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IActivatorInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IActivatorInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IActivator obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.PreviewTransform.RemapLinks(mapping);
            obj.AnimationSound.Relink(mapping);
            obj.Model?.RemapLinks(mapping);
            obj.Destructible?.RemapLinks(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.NativeTerminal.Relink(mapping);
            obj.ForcedLocRefType.Relink(mapping);
            obj.LoopingSound.Relink(mapping);
            obj.ActivationSound.Relink(mapping);
            obj.WaterType.Relink(mapping);
            obj.InteractionKeyword.Relink(mapping);
            obj.RadioReceiver?.RemapLinks(mapping);
            obj.Conditions?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IActivatorInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.MajorRecordParse<IActivatorInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ActivatorBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ActivatorBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (Activator)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (Activator)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    public partial class ActivatorCommon : Fallout4MajorRecordCommon
    {
        public new static readonly ActivatorCommon Instance = new ActivatorCommon();

        public Activator.Mask<bool> GetEqualsMask(
            IActivatorGetter item,
            IActivatorGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Activator.Mask<bool>(false);
            ((ActivatorCommon)((IActivatorGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IActivatorGetter item,
            IActivatorGetter rhs,
            Activator.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.PreviewTransform = MaskItemExt.Factory(item.PreviewTransform.GetEqualsMask(rhs.PreviewTransform, include), include);
            ret.AnimationSound = item.AnimationSound.Equals(rhs.AnimationSound);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Destructible = EqualsMaskHelper.EqualsHelper(
                item.Destructible,
                rhs.Destructible,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Properties = EqualsMaskHelper.EqualsHelper(
                item.Properties,
                rhs.Properties,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.NativeTerminal = item.NativeTerminal.Equals(rhs.NativeTerminal);
            ret.ForcedLocRefType = item.ForcedLocRefType.Equals(rhs.ForcedLocRefType);
            ret.MarkerColor = item.MarkerColor.ColorOnlyEquals(rhs.MarkerColor);
            ret.LoopingSound = item.LoopingSound.Equals(rhs.LoopingSound);
            ret.ActivationSound = item.ActivationSound.Equals(rhs.ActivationSound);
            ret.WaterType = item.WaterType.Equals(rhs.WaterType);
            ret.ActivateTextOverride = object.Equals(item.ActivateTextOverride, rhs.ActivateTextOverride);
            ret.Flags = item.Flags == rhs.Flags;
            ret.InteractionKeyword = item.InteractionKeyword.Equals(rhs.InteractionKeyword);
            ret.RadioReceiver = EqualsMaskHelper.EqualsHelper(
                item.RadioReceiver,
                rhs.RadioReceiver,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IActivatorGetter item,
            string? name = null,
            Activator.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IActivatorGetter item,
            FileGeneration fg,
            string? name = null,
            Activator.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Activator =>");
            }
            else
            {
                fg.AppendLine($"{name} (Activator) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IActivatorGetter item,
            FileGeneration fg,
            Activator.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                VirtualMachineAdapterItem?.ToString(fg, "VirtualMachineAdapter");
            }
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if (printMask?.PreviewTransform?.Overall ?? true)
            {
                item.PreviewTransform?.ToString(fg, "PreviewTransform");
            }
            if (printMask?.AnimationSound ?? true)
            {
                fg.AppendItem(item.AnimationSound.FormKeyNullable, "AnimationSound");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.ToString(fg, "Model");
            }
            if ((printMask?.Destructible?.Overall ?? true)
                && item.Destructible is {} DestructibleItem)
            {
                DestructibleItem?.ToString(fg, "Destructible");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                fg.AppendLine("Keywords =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Properties?.Overall ?? true)
                && item.Properties is {} PropertiesItem)
            {
                PropertiesItem?.ToString(fg, "Properties");
            }
            if (printMask?.NativeTerminal ?? true)
            {
                fg.AppendItem(item.NativeTerminal.FormKeyNullable, "NativeTerminal");
            }
            if (printMask?.ForcedLocRefType ?? true)
            {
                fg.AppendItem(item.ForcedLocRefType.FormKeyNullable, "ForcedLocRefType");
            }
            if ((printMask?.MarkerColor ?? true)
                && item.MarkerColor is {} MarkerColorItem)
            {
                fg.AppendItem(MarkerColorItem, "MarkerColor");
            }
            if (printMask?.LoopingSound ?? true)
            {
                fg.AppendItem(item.LoopingSound.FormKeyNullable, "LoopingSound");
            }
            if (printMask?.ActivationSound ?? true)
            {
                fg.AppendItem(item.ActivationSound.FormKeyNullable, "ActivationSound");
            }
            if (printMask?.WaterType ?? true)
            {
                fg.AppendItem(item.WaterType.FormKeyNullable, "WaterType");
            }
            if ((printMask?.ActivateTextOverride ?? true)
                && item.ActivateTextOverride is {} ActivateTextOverrideItem)
            {
                fg.AppendItem(ActivateTextOverrideItem, "ActivateTextOverride");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags is {} FlagsItem)
            {
                fg.AppendItem(FlagsItem, "Flags");
            }
            if (printMask?.InteractionKeyword ?? true)
            {
                fg.AppendItem(item.InteractionKeyword.FormKeyNullable, "InteractionKeyword");
            }
            if ((printMask?.RadioReceiver?.Overall ?? true)
                && item.RadioReceiver is {} RadioReceiverItem)
            {
                RadioReceiverItem?.ToString(fg, "RadioReceiver");
            }
            if ((printMask?.Conditions?.Overall ?? true)
                && item.Conditions is {} ConditionsItem)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in ConditionsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public static Activator_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Activator_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Activator_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Activator_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Activator_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Activator_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Activator_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Activator_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Activator_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Activator_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Activator_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Activator_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IActivatorGetter? lhs,
            IActivatorGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)Activator_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter, out var lhsVirtualMachineAdapter, out var rhsVirtualMachineAdapter, out var isVirtualMachineAdapterEqual))
                {
                    if (!((VirtualMachineAdapterCommon)((IVirtualMachineAdapterGetter)lhsVirtualMachineAdapter).CommonInstance()!).Equals(lhsVirtualMachineAdapter, rhsVirtualMachineAdapter, crystal?.GetSubCrystal((int)Activator_FieldIndex.VirtualMachineAdapter))) return false;
                }
                else if (!isVirtualMachineAdapterEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Activator_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, crystal?.GetSubCrystal((int)Activator_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Activator_FieldIndex.PreviewTransform) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.PreviewTransform, rhs.PreviewTransform, out var lhsPreviewTransform, out var rhsPreviewTransform, out var isPreviewTransformEqual))
                {
                    if (!((PreviewTransformCommon)((IPreviewTransformGetter)lhsPreviewTransform).CommonInstance()!).Equals(lhsPreviewTransform, rhsPreviewTransform, crystal?.GetSubCrystal((int)Activator_FieldIndex.PreviewTransform))) return false;
                }
                else if (!isPreviewTransformEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Activator_FieldIndex.AnimationSound) ?? true))
            {
                if (!lhs.AnimationSound.Equals(rhs.AnimationSound)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Activator_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Activator_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, crystal?.GetSubCrystal((int)Activator_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Activator_FieldIndex.Destructible) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Destructible, rhs.Destructible, out var lhsDestructible, out var rhsDestructible, out var isDestructibleEqual))
                {
                    if (!((DestructibleCommon)((IDestructibleGetter)lhsDestructible).CommonInstance()!).Equals(lhsDestructible, rhsDestructible, crystal?.GetSubCrystal((int)Activator_FieldIndex.Destructible))) return false;
                }
                else if (!isDestructibleEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Activator_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Activator_FieldIndex.Properties) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Properties, rhs.Properties, out var lhsProperties, out var rhsProperties, out var isPropertiesEqual))
                {
                    if (!((PropertiesCommon)((IPropertiesGetter)lhsProperties).CommonInstance()!).Equals(lhsProperties, rhsProperties, crystal?.GetSubCrystal((int)Activator_FieldIndex.Properties))) return false;
                }
                else if (!isPropertiesEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Activator_FieldIndex.NativeTerminal) ?? true))
            {
                if (!lhs.NativeTerminal.Equals(rhs.NativeTerminal)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Activator_FieldIndex.ForcedLocRefType) ?? true))
            {
                if (!lhs.ForcedLocRefType.Equals(rhs.ForcedLocRefType)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Activator_FieldIndex.MarkerColor) ?? true))
            {
                if (!lhs.MarkerColor.ColorOnlyEquals(rhs.MarkerColor)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Activator_FieldIndex.LoopingSound) ?? true))
            {
                if (!lhs.LoopingSound.Equals(rhs.LoopingSound)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Activator_FieldIndex.ActivationSound) ?? true))
            {
                if (!lhs.ActivationSound.Equals(rhs.ActivationSound)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Activator_FieldIndex.WaterType) ?? true))
            {
                if (!lhs.WaterType.Equals(rhs.WaterType)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Activator_FieldIndex.ActivateTextOverride) ?? true))
            {
                if (!object.Equals(lhs.ActivateTextOverride, rhs.ActivateTextOverride)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Activator_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Activator_FieldIndex.InteractionKeyword) ?? true))
            {
                if (!lhs.InteractionKeyword.Equals(rhs.InteractionKeyword)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Activator_FieldIndex.RadioReceiver) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.RadioReceiver, rhs.RadioReceiver, out var lhsRadioReceiver, out var rhsRadioReceiver, out var isRadioReceiverEqual))
                {
                    if (!((RadioReceiverCommon)((IRadioReceiverGetter)lhsRadioReceiver).CommonInstance()!).Equals(lhsRadioReceiver, rhsRadioReceiver, crystal?.GetSubCrystal((int)Activator_FieldIndex.RadioReceiver))) return false;
                }
                else if (!isRadioReceiverEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Activator_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqualNullable(rhs.Conditions)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IActivatorGetter?)lhs,
                rhs: rhs as IActivatorGetter,
                crystal: crystal);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IActivatorGetter?)lhs,
                rhs: rhs as IActivatorGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(IActivatorGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapteritem)
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.ObjectBounds);
            hash.Add(item.PreviewTransform);
            hash.Add(item.AnimationSound);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            if (item.Destructible is {} Destructibleitem)
            {
                hash.Add(Destructibleitem);
            }
            hash.Add(item.Keywords);
            if (item.Properties is {} Propertiesitem)
            {
                hash.Add(Propertiesitem);
            }
            hash.Add(item.NativeTerminal);
            hash.Add(item.ForcedLocRefType);
            if (item.MarkerColor is {} MarkerColoritem)
            {
                hash.Add(MarkerColoritem);
            }
            hash.Add(item.LoopingSound);
            hash.Add(item.ActivationSound);
            hash.Add(item.WaterType);
            if (item.ActivateTextOverride is {} ActivateTextOverrideitem)
            {
                hash.Add(ActivateTextOverrideitem);
            }
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            hash.Add(item.InteractionKeyword);
            if (item.RadioReceiver is {} RadioReceiveritem)
            {
                hash.Add(RadioReceiveritem);
            }
            hash.Add(item.Conditions);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IActivatorGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IActivatorGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Activator.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IActivatorGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            foreach (var item in obj.PreviewTransform.ContainedFormLinks)
            {
                yield return item;
            }
            if (obj.AnimationSound.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.AnimationSound);
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Destructible is {} DestructibleItems)
            {
                foreach (var item in DestructibleItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.NativeTerminal.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.NativeTerminal);
            }
            if (obj.ForcedLocRefType.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.ForcedLocRefType);
            }
            if (obj.LoopingSound.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.LoopingSound);
            }
            if (obj.ActivationSound.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.ActivationSound);
            }
            if (obj.WaterType.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.WaterType);
            }
            if (obj.InteractionKeyword.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.InteractionKeyword);
            }
            if (obj.RadioReceiver is {} RadioReceiverItems)
            {
                foreach (var item in RadioReceiverItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Conditions is {} ConditionsItem)
            {
                foreach (var item in ConditionsItem.WhereCastable<IConditionGetter, IFormLinkContainerGetter>()
                    .SelectMany((f) => f.ContainedFormLinks))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Activator Duplicate(
            IActivatorGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Activator(formKey);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IActivatorGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IActivatorGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class ActivatorSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly ActivatorSetterTranslationCommon Instance = new ActivatorSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IActivatorInternal item,
            IActivatorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IActivator item,
            IActivatorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Activator_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Activator_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter is {} rhsVirtualMachineAdapter)
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Activator_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Activator_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Activator_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Activator_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Activator_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Activator_FieldIndex.PreviewTransform) ?? true))
            {
                errorMask?.PushIndex((int)Activator_FieldIndex.PreviewTransform);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Activator_FieldIndex.PreviewTransform) ?? true))
                    {
                        item.PreviewTransform = rhs.PreviewTransform.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Activator_FieldIndex.PreviewTransform),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Activator_FieldIndex.AnimationSound) ?? true))
            {
                item.AnimationSound.SetTo(rhs.AnimationSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Activator_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Activator_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Activator_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Activator_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Activator_FieldIndex.Destructible) ?? true))
            {
                errorMask?.PushIndex((int)Activator_FieldIndex.Destructible);
                try
                {
                    if(rhs.Destructible is {} rhsDestructible)
                    {
                        item.Destructible = rhsDestructible.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Activator_FieldIndex.Destructible));
                    }
                    else
                    {
                        item.Destructible = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Activator_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Activator_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                            .Select(r => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(r.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Activator_FieldIndex.Properties) ?? true))
            {
                errorMask?.PushIndex((int)Activator_FieldIndex.Properties);
                try
                {
                    if(rhs.Properties is {} rhsProperties)
                    {
                        item.Properties = rhsProperties.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Activator_FieldIndex.Properties));
                    }
                    else
                    {
                        item.Properties = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Activator_FieldIndex.NativeTerminal) ?? true))
            {
                item.NativeTerminal.SetTo(rhs.NativeTerminal.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Activator_FieldIndex.ForcedLocRefType) ?? true))
            {
                item.ForcedLocRefType.SetTo(rhs.ForcedLocRefType.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Activator_FieldIndex.MarkerColor) ?? true))
            {
                item.MarkerColor = rhs.MarkerColor;
            }
            if ((copyMask?.GetShouldTranslate((int)Activator_FieldIndex.LoopingSound) ?? true))
            {
                item.LoopingSound.SetTo(rhs.LoopingSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Activator_FieldIndex.ActivationSound) ?? true))
            {
                item.ActivationSound.SetTo(rhs.ActivationSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Activator_FieldIndex.WaterType) ?? true))
            {
                item.WaterType.SetTo(rhs.WaterType.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Activator_FieldIndex.ActivateTextOverride) ?? true))
            {
                item.ActivateTextOverride = rhs.ActivateTextOverride?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Activator_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Activator_FieldIndex.InteractionKeyword) ?? true))
            {
                item.InteractionKeyword.SetTo(rhs.InteractionKeyword.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Activator_FieldIndex.RadioReceiver) ?? true))
            {
                errorMask?.PushIndex((int)Activator_FieldIndex.RadioReceiver);
                try
                {
                    if(rhs.RadioReceiver is {} rhsRadioReceiver)
                    {
                        item.RadioReceiver = rhsRadioReceiver.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Activator_FieldIndex.RadioReceiver));
                    }
                    else
                    {
                        item.RadioReceiver = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Activator_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)Activator_FieldIndex.Conditions);
                try
                {
                    if ((rhs.Conditions != null))
                    {
                        item.Conditions = 
                            rhs.Conditions
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<Condition>();
                    }
                    else
                    {
                        item.Conditions = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IActivatorInternal)item,
                rhs: (IActivatorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IActivator)item,
                rhs: (IActivatorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IActivatorInternal)item,
                rhs: (IActivatorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IActivator)item,
                rhs: (IActivatorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Activator DeepCopy(
            IActivatorGetter item,
            Activator.TranslationMask? copyMask = null)
        {
            Activator ret = (Activator)((ActivatorCommon)((IActivatorGetter)item).CommonInstance()!).GetNew();
            ((ActivatorSetterTranslationCommon)((IActivatorGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Activator DeepCopy(
            IActivatorGetter item,
            out Activator.ErrorMask errorMask,
            Activator.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Activator ret = (Activator)((ActivatorCommon)((IActivatorGetter)item).CommonInstance()!).GetNew();
            ((ActivatorSetterTranslationCommon)((IActivatorGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Activator.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Activator DeepCopy(
            IActivatorGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Activator ret = (Activator)((ActivatorCommon)((IActivatorGetter)item).CommonInstance()!).GetNew();
            ((ActivatorSetterTranslationCommon)((IActivatorGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Activator
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Activator_Registration.Instance;
        public new static Activator_Registration StaticRegistration => Activator_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ActivatorCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ActivatorSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ActivatorSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ActivatorBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ActivatorBinaryWriteTranslation Instance = new ActivatorBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IActivatorGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            var PreviewTransformItem = item.PreviewTransform;
            ((PreviewTransformBinaryWriteTranslation)((IBinaryItem)PreviewTransformItem).BinaryWriteTranslator).Write(
                item: PreviewTransformItem,
                writer: writer,
                translationParams: translationParams);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AnimationSound,
                header: translationParams.ConvertToCustom(RecordTypes.STCP));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.Destructible is {} DestructibleItem)
            {
                ((DestructibleBinaryWriteTranslation)((IBinaryItem)DestructibleItem).BinaryWriteTranslator).Write(
                    item: DestructibleItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams? conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            if (item.Properties is {} PropertiesItem)
            {
                ((PropertiesBinaryWriteTranslation)((IBinaryItem)PropertiesItem).BinaryWriteTranslator).Write(
                    item: PropertiesItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.NativeTerminal,
                header: translationParams.ConvertToCustom(RecordTypes.NTRM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ForcedLocRefType,
                header: translationParams.ConvertToCustom(RecordTypes.FTYP));
            ColorBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MarkerColor,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.LoopingSound,
                header: translationParams.ConvertToCustom(RecordTypes.SNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ActivationSound,
                header: translationParams.ConvertToCustom(RecordTypes.VNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.WaterType,
                header: translationParams.ConvertToCustom(RecordTypes.WNAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ActivateTextOverride,
                header: translationParams.ConvertToCustom(RecordTypes.ATTX),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            EnumBinaryTranslation<Activator.Flag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 2,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.InteractionKeyword,
                header: translationParams.ConvertToCustom(RecordTypes.KNAM));
            if (item.RadioReceiver is {} RadioReceiverItem)
            {
                ((RadioReceiverBinaryWriteTranslation)((IBinaryItem)RadioReceiverItem).BinaryWriteTranslator).Write(
                    item: RadioReceiverItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Conditions,
                counterType: RecordTypes.CITC,
                counterLength: 4,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams? conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IActivatorGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Record(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.ACTI)))
            {
                try
                {
                    Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        translationParams: translationParams);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Enrich(ex, item);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IActivatorGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IActivatorGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IActivatorGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class ActivatorBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static ActivatorBinaryCreateTranslation Instance = new ActivatorBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.ACTI;
        public static void FillBinaryStructs(
            IActivatorInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IActivatorInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Fallout4.VirtualMachineAdapter.CreateFromBinary(frame: frame);
                    return (int)Activator_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Fallout4.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Activator_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.PTRN:
                {
                    item.PreviewTransform = Mutagen.Bethesda.Fallout4.PreviewTransform.CreateFromBinary(frame: frame);
                    return (int)Activator_FieldIndex.PreviewTransform;
                }
                case RecordTypeInts.STCP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AnimationSound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Activator_FieldIndex.AnimationSound;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Activator_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Fallout4.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams);
                    return (int)Activator_FieldIndex.Model;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DAMC:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DSTA:
                case RecordTypeInts.DMDL:
                {
                    item.Destructible = Mutagen.Bethesda.Fallout4.Destructible.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams);
                    return (int)Activator_FieldIndex.Destructible;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Activator_FieldIndex.Keywords;
                }
                case RecordTypeInts.PRPS:
                {
                    item.Properties = Mutagen.Bethesda.Fallout4.Properties.CreateFromBinary(frame: frame);
                    return (int)Activator_FieldIndex.Properties;
                }
                case RecordTypeInts.NTRM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NativeTerminal.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Activator_FieldIndex.NativeTerminal;
                }
                case RecordTypeInts.FTYP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ForcedLocRefType.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Activator_FieldIndex.ForcedLocRefType;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MarkerColor = frame.ReadColor(ColorBinaryType.Alpha);
                    return (int)Activator_FieldIndex.MarkerColor;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LoopingSound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Activator_FieldIndex.LoopingSound;
                }
                case RecordTypeInts.VNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ActivationSound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Activator_FieldIndex.ActivationSound;
                }
                case RecordTypeInts.WNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WaterType.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Activator_FieldIndex.WaterType;
                }
                case RecordTypeInts.ATTX:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ActivateTextOverride = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Activator_FieldIndex.ActivateTextOverride;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<Activator.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)Activator_FieldIndex.Flags;
                }
                case RecordTypeInts.KNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.InteractionKeyword.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Activator_FieldIndex.InteractionKeyword;
                }
                case RecordTypeInts.RADR:
                {
                    item.RadioReceiver = Mutagen.Bethesda.Fallout4.RadioReceiver.CreateFromBinary(frame: frame);
                    return (int)Activator_FieldIndex.RadioReceiver;
                }
                case RecordTypeInts.CTDA:
                case RecordTypeInts.CITC:
                {
                    item.Conditions = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.CITC,
                            triggeringRecord: Condition_Registration.TriggeringRecordTypes,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary)
                        .CastExtendedList<Condition>();
                    return (int)Activator_FieldIndex.Conditions;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ActivatorBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ActivatorBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IActivatorGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Activator_Registration.Instance;
        public new static Activator_Registration StaticRegistration => Activator_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ActivatorCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ActivatorSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => ActivatorCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ActivatorBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ActivatorBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IActivator);

        public Activator.MajorFlag MajorFlags => (Activator.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(new OverlayStream(_data.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new OverlayStream(_data.Slice(_ObjectBoundsLocation!.Value.Min), _package), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region PreviewTransform
        private RangeInt32? _PreviewTransformLocation;
        private IPreviewTransformGetter? _PreviewTransform => _PreviewTransformLocation.HasValue ? PreviewTransformBinaryOverlay.PreviewTransformFactory(new OverlayStream(_data.Slice(_PreviewTransformLocation!.Value.Min), _package), _package) : default;
        public IPreviewTransformGetter PreviewTransform => _PreviewTransform ?? new PreviewTransform();
        #endregion
        #region AnimationSound
        private int? _AnimationSoundLocation;
        public IFormLinkNullableGetter<IAnimationSoundTagSetGetter> AnimationSound => _AnimationSoundLocation.HasValue ? new FormLinkNullable<IAnimationSoundTagSetGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _AnimationSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IAnimationSoundTagSetGetter>.Null;
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        public IModelGetter? Model { get; private set; }
        public IDestructibleGetter? Destructible { get; private set; }
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #region Properties
        private RangeInt32? _PropertiesLocation;
        public IPropertiesGetter? Properties => _PropertiesLocation.HasValue ? PropertiesBinaryOverlay.PropertiesFactory(new OverlayStream(_data.Slice(_PropertiesLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region NativeTerminal
        private int? _NativeTerminalLocation;
        public IFormLinkNullableGetter<ITerminalGetter> NativeTerminal => _NativeTerminalLocation.HasValue ? new FormLinkNullable<ITerminalGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _NativeTerminalLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ITerminalGetter>.Null;
        #endregion
        #region ForcedLocRefType
        private int? _ForcedLocRefTypeLocation;
        public IFormLinkNullableGetter<ILocationReferenceTypeGetter> ForcedLocRefType => _ForcedLocRefTypeLocation.HasValue ? new FormLinkNullable<ILocationReferenceTypeGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ForcedLocRefTypeLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ILocationReferenceTypeGetter>.Null;
        #endregion
        #region MarkerColor
        private int? _MarkerColorLocation;
        public Color? MarkerColor => _MarkerColorLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _MarkerColorLocation.Value, _package.MetaData.Constants).ReadColor(ColorBinaryType.Alpha) : default(Color?);
        #endregion
        #region LoopingSound
        private int? _LoopingSoundLocation;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> LoopingSound => _LoopingSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _LoopingSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        #region ActivationSound
        private int? _ActivationSoundLocation;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> ActivationSound => _ActivationSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ActivationSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        #region WaterType
        private int? _WaterTypeLocation;
        public IFormLinkNullableGetter<IWaterGetter> WaterType => _WaterTypeLocation.HasValue ? new FormLinkNullable<IWaterGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _WaterTypeLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IWaterGetter>.Null;
        #endregion
        #region ActivateTextOverride
        private int? _ActivateTextOverrideLocation;
        public ITranslatedStringGetter? ActivateTextOverride => _ActivateTextOverrideLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _ActivateTextOverrideLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public Activator.Flag? Flags => _FlagsLocation.HasValue ? (Activator.Flag)BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(Activator.Flag?);
        #endregion
        #region InteractionKeyword
        private int? _InteractionKeywordLocation;
        public IFormLinkNullableGetter<IKeywordGetter> InteractionKeyword => _InteractionKeywordLocation.HasValue ? new FormLinkNullable<IKeywordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _InteractionKeywordLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IKeywordGetter>.Null;
        #endregion
        #region RadioReceiver
        private RangeInt32? _RadioReceiverLocation;
        public IRadioReceiverGetter? RadioReceiver => _RadioReceiverLocation.HasValue ? RadioReceiverBinaryOverlay.RadioReceiverFactory(new OverlayStream(_data.Slice(_RadioReceiverLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region Conditions
        partial void ConditionsCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ActivatorBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ActivatorBinaryOverlay ActivatorFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            stream = PluginUtilityTranslation.DecompressStream(stream);
            var ret = new ActivatorBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ActivatorBinaryOverlay ActivatorFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return ActivatorFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Activator_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Activator_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.PTRN:
                {
                    _PreviewTransformLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Activator_FieldIndex.PreviewTransform;
                }
                case RecordTypeInts.STCP:
                {
                    _AnimationSoundLocation = (stream.Position - offset);
                    return (int)Activator_FieldIndex.AnimationSound;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Activator_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        parseParams: parseParams);
                    return (int)Activator_FieldIndex.Model;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DAMC:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DSTA:
                case RecordTypeInts.DMDL:
                {
                    this.Destructible = DestructibleBinaryOverlay.DestructibleFactory(
                        stream: stream,
                        package: _package,
                        parseParams: parseParams);
                    return (int)Activator_FieldIndex.Destructible;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        subrecordType: RecordTypes.KWDA,
                        getter: (s, p) => new FormLink<IKeywordGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    return (int)Activator_FieldIndex.Keywords;
                }
                case RecordTypeInts.PRPS:
                {
                    _PropertiesLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Activator_FieldIndex.Properties;
                }
                case RecordTypeInts.NTRM:
                {
                    _NativeTerminalLocation = (stream.Position - offset);
                    return (int)Activator_FieldIndex.NativeTerminal;
                }
                case RecordTypeInts.FTYP:
                {
                    _ForcedLocRefTypeLocation = (stream.Position - offset);
                    return (int)Activator_FieldIndex.ForcedLocRefType;
                }
                case RecordTypeInts.PNAM:
                {
                    _MarkerColorLocation = (stream.Position - offset);
                    return (int)Activator_FieldIndex.MarkerColor;
                }
                case RecordTypeInts.SNAM:
                {
                    _LoopingSoundLocation = (stream.Position - offset);
                    return (int)Activator_FieldIndex.LoopingSound;
                }
                case RecordTypeInts.VNAM:
                {
                    _ActivationSoundLocation = (stream.Position - offset);
                    return (int)Activator_FieldIndex.ActivationSound;
                }
                case RecordTypeInts.WNAM:
                {
                    _WaterTypeLocation = (stream.Position - offset);
                    return (int)Activator_FieldIndex.WaterType;
                }
                case RecordTypeInts.ATTX:
                {
                    _ActivateTextOverrideLocation = (stream.Position - offset);
                    return (int)Activator_FieldIndex.ActivateTextOverride;
                }
                case RecordTypeInts.FNAM:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)Activator_FieldIndex.Flags;
                }
                case RecordTypeInts.KNAM:
                {
                    _InteractionKeywordLocation = (stream.Position - offset);
                    return (int)Activator_FieldIndex.InteractionKeyword;
                }
                case RecordTypeInts.RADR:
                {
                    _RadioReceiverLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Activator_FieldIndex.RadioReceiver;
                }
                case RecordTypeInts.CTDA:
                case RecordTypeInts.CITC:
                {
                    ConditionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)Activator_FieldIndex.Conditions;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ActivatorMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Activator>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IActivatorGetter rhs) return false;
            return ((ActivatorCommon)((IActivatorGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IActivatorGetter? obj)
        {
            return ((ActivatorCommon)((IActivatorGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ActivatorCommon)((IActivatorGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

