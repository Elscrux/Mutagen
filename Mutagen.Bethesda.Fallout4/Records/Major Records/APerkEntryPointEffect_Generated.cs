/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    /// <summary>
    /// Implemented by: [PerkEntryPointModifyValue, PerkEntryPointModifyValues, PerkEntryPointAddRangeToValue, PerkEntryPointModifyActorValue, PerkEntryPointAbsoluteValue, PerkEntryPointAddLeveledItem, PerkEntryPointAddActivateChoice, PerkEntryPointSelectSpell, PerkEntryPointSelectText, PerkEntryPointSetText]
    /// </summary>
    public abstract partial class APerkEntryPointEffect :
        APerkEffect,
        IAPerkEntryPointEffect,
        IEquatable<IAPerkEntryPointEffectGetter>,
        ILoquiObjectSetter<APerkEntryPointEffect>
    {
        #region Ctor
        public APerkEntryPointEffect()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region EntryPoint
        public APerkEntryPointEffect.EntryType EntryPoint { get; set; } = default(APerkEntryPointEffect.EntryType);
        #endregion
        #region PerkConditionTabCount
        public Byte PerkConditionTabCount { get; set; } = default(Byte);
        #endregion
        #region PerkEntryID
        public UInt16? PerkEntryID { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt16? IAPerkEntryPointEffectGetter.PerkEntryID => this.PerkEntryID;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            APerkEntryPointEffectMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IAPerkEntryPointEffectGetter rhs) return false;
            return ((APerkEntryPointEffectCommon)((IAPerkEntryPointEffectGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAPerkEntryPointEffectGetter? obj)
        {
            return ((APerkEntryPointEffectCommon)((IAPerkEntryPointEffectGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((APerkEntryPointEffectCommon)((IAPerkEntryPointEffectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            APerkEffect.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.EntryPoint = initialValue;
                this.PerkConditionTabCount = initialValue;
                this.PerkEntryID = initialValue;
            }

            public Mask(
                TItem Rank,
                TItem Priority,
                TItem Conditions,
                TItem EntryPoint,
                TItem PerkConditionTabCount,
                TItem PerkEntryID)
            : base(
                Rank: Rank,
                Priority: Priority,
                Conditions: Conditions)
            {
                this.EntryPoint = EntryPoint;
                this.PerkConditionTabCount = PerkConditionTabCount;
                this.PerkEntryID = PerkEntryID;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem EntryPoint;
            public TItem PerkConditionTabCount;
            public TItem PerkEntryID;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.EntryPoint, rhs.EntryPoint)) return false;
                if (!object.Equals(this.PerkConditionTabCount, rhs.PerkConditionTabCount)) return false;
                if (!object.Equals(this.PerkEntryID, rhs.PerkEntryID)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.EntryPoint);
                hash.Add(this.PerkConditionTabCount);
                hash.Add(this.PerkEntryID);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.EntryPoint)) return false;
                if (!eval(this.PerkConditionTabCount)) return false;
                if (!eval(this.PerkEntryID)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.EntryPoint)) return true;
                if (eval(this.PerkConditionTabCount)) return true;
                if (eval(this.PerkEntryID)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new APerkEntryPointEffect.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.EntryPoint = eval(this.EntryPoint);
                obj.PerkConditionTabCount = eval(this.PerkConditionTabCount);
                obj.PerkEntryID = eval(this.PerkEntryID);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(APerkEntryPointEffect.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, APerkEntryPointEffect.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(APerkEntryPointEffect.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.EntryPoint ?? true)
                    {
                        sb.AppendItem(EntryPoint, "EntryPoint");
                    }
                    if (printMask?.PerkConditionTabCount ?? true)
                    {
                        sb.AppendItem(PerkConditionTabCount, "PerkConditionTabCount");
                    }
                    if (printMask?.PerkEntryID ?? true)
                    {
                        sb.AppendItem(PerkEntryID, "PerkEntryID");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            APerkEffect.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? EntryPoint;
            public Exception? PerkConditionTabCount;
            public Exception? PerkEntryID;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                APerkEntryPointEffect_FieldIndex enu = (APerkEntryPointEffect_FieldIndex)index;
                switch (enu)
                {
                    case APerkEntryPointEffect_FieldIndex.EntryPoint:
                        return EntryPoint;
                    case APerkEntryPointEffect_FieldIndex.PerkConditionTabCount:
                        return PerkConditionTabCount;
                    case APerkEntryPointEffect_FieldIndex.PerkEntryID:
                        return PerkEntryID;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                APerkEntryPointEffect_FieldIndex enu = (APerkEntryPointEffect_FieldIndex)index;
                switch (enu)
                {
                    case APerkEntryPointEffect_FieldIndex.EntryPoint:
                        this.EntryPoint = ex;
                        break;
                    case APerkEntryPointEffect_FieldIndex.PerkConditionTabCount:
                        this.PerkConditionTabCount = ex;
                        break;
                    case APerkEntryPointEffect_FieldIndex.PerkEntryID:
                        this.PerkEntryID = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                APerkEntryPointEffect_FieldIndex enu = (APerkEntryPointEffect_FieldIndex)index;
                switch (enu)
                {
                    case APerkEntryPointEffect_FieldIndex.EntryPoint:
                        this.EntryPoint = (Exception?)obj;
                        break;
                    case APerkEntryPointEffect_FieldIndex.PerkConditionTabCount:
                        this.PerkConditionTabCount = (Exception?)obj;
                        break;
                    case APerkEntryPointEffect_FieldIndex.PerkEntryID:
                        this.PerkEntryID = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (EntryPoint != null) return true;
                if (PerkConditionTabCount != null) return true;
                if (PerkEntryID != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(EntryPoint, "EntryPoint");
                }
                {
                    sb.AppendItem(PerkConditionTabCount, "PerkConditionTabCount");
                }
                {
                    sb.AppendItem(PerkEntryID, "PerkEntryID");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.EntryPoint = this.EntryPoint.Combine(rhs.EntryPoint);
                ret.PerkConditionTabCount = this.PerkConditionTabCount.Combine(rhs.PerkConditionTabCount);
                ret.PerkEntryID = this.PerkEntryID.Combine(rhs.PerkEntryID);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            APerkEffect.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool EntryPoint;
            public bool PerkConditionTabCount;
            public bool PerkEntryID;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.EntryPoint = defaultOn;
                this.PerkConditionTabCount = defaultOn;
                this.PerkEntryID = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((EntryPoint, null));
                ret.Add((PerkConditionTabCount, null));
                ret.Add((PerkEntryID, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => APerkEntryPointEffectCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => APerkEntryPointEffectSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => APerkEntryPointEffectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((APerkEntryPointEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((APerkEntryPointEffectSetterCommon)((IAPerkEntryPointEffectGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new APerkEntryPointEffect GetNew()
        {
            throw new ArgumentException("New called on an abstract class.");
        }

    }
    #endregion

    #region Interface
    /// <summary>
    /// Implemented by: [PerkEntryPointModifyValue, PerkEntryPointModifyValues, PerkEntryPointAddRangeToValue, PerkEntryPointModifyActorValue, PerkEntryPointAbsoluteValue, PerkEntryPointAddLeveledItem, PerkEntryPointAddActivateChoice, PerkEntryPointSelectSpell, PerkEntryPointSelectText, PerkEntryPointSetText]
    /// </summary>
    public partial interface IAPerkEntryPointEffect :
        IAPerkEffect,
        IAPerkEntryPointEffectGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IAPerkEntryPointEffect>
    {
        new APerkEntryPointEffect.EntryType EntryPoint { get; set; }
        new Byte PerkConditionTabCount { get; set; }
        new UInt16? PerkEntryID { get; set; }
    }

    /// <summary>
    /// Implemented by: [PerkEntryPointModifyValue, PerkEntryPointModifyValues, PerkEntryPointAddRangeToValue, PerkEntryPointModifyActorValue, PerkEntryPointAbsoluteValue, PerkEntryPointAddLeveledItem, PerkEntryPointAddActivateChoice, PerkEntryPointSelectSpell, PerkEntryPointSelectText, PerkEntryPointSetText]
    /// </summary>
    public partial interface IAPerkEntryPointEffectGetter :
        IAPerkEffectGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IAPerkEntryPointEffectGetter>
    {
        static new ILoquiRegistration StaticRegistration => APerkEntryPointEffect_Registration.Instance;
        APerkEntryPointEffect.EntryType EntryPoint { get; }
        Byte PerkConditionTabCount { get; }
        UInt16? PerkEntryID { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class APerkEntryPointEffectMixIn
    {
        public static void Clear(this IAPerkEntryPointEffect item)
        {
            ((APerkEntryPointEffectSetterCommon)((IAPerkEntryPointEffectGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static APerkEntryPointEffect.Mask<bool> GetEqualsMask(
            this IAPerkEntryPointEffectGetter item,
            IAPerkEntryPointEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((APerkEntryPointEffectCommon)((IAPerkEntryPointEffectGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IAPerkEntryPointEffectGetter item,
            string? name = null,
            APerkEntryPointEffect.Mask<bool>? printMask = null)
        {
            return ((APerkEntryPointEffectCommon)((IAPerkEntryPointEffectGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IAPerkEntryPointEffectGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            APerkEntryPointEffect.Mask<bool>? printMask = null)
        {
            ((APerkEntryPointEffectCommon)((IAPerkEntryPointEffectGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IAPerkEntryPointEffectGetter item,
            IAPerkEntryPointEffectGetter rhs,
            APerkEntryPointEffect.TranslationMask? equalsMask = null)
        {
            return ((APerkEntryPointEffectCommon)((IAPerkEntryPointEffectGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IAPerkEntryPointEffect lhs,
            IAPerkEntryPointEffectGetter rhs,
            out APerkEntryPointEffect.ErrorMask errorMask,
            APerkEntryPointEffect.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((APerkEntryPointEffectSetterTranslationCommon)((IAPerkEntryPointEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = APerkEntryPointEffect.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAPerkEntryPointEffect lhs,
            IAPerkEntryPointEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((APerkEntryPointEffectSetterTranslationCommon)((IAPerkEntryPointEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static APerkEntryPointEffect DeepCopy(
            this IAPerkEntryPointEffectGetter item,
            APerkEntryPointEffect.TranslationMask? copyMask = null)
        {
            return ((APerkEntryPointEffectSetterTranslationCommon)((IAPerkEntryPointEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static APerkEntryPointEffect DeepCopy(
            this IAPerkEntryPointEffectGetter item,
            out APerkEntryPointEffect.ErrorMask errorMask,
            APerkEntryPointEffect.TranslationMask? copyMask = null)
        {
            return ((APerkEntryPointEffectSetterTranslationCommon)((IAPerkEntryPointEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static APerkEntryPointEffect DeepCopy(
            this IAPerkEntryPointEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((APerkEntryPointEffectSetterTranslationCommon)((IAPerkEntryPointEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IAPerkEntryPointEffect item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((APerkEntryPointEffectSetterCommon)((IAPerkEntryPointEffectGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum APerkEntryPointEffect_FieldIndex
    {
        Rank = 0,
        Priority = 1,
        Conditions = 2,
        EntryPoint = 3,
        PerkConditionTabCount = 4,
        PerkEntryID = 5,
    }
    #endregion

    #region Registration
    internal partial class APerkEntryPointEffect_Registration : ILoquiRegistration
    {
        public static readonly APerkEntryPointEffect_Registration Instance = new APerkEntryPointEffect_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(APerkEntryPointEffect.Mask<>);

        public static readonly Type ErrorMaskType = typeof(APerkEntryPointEffect.ErrorMask);

        public static readonly Type ClassType = typeof(APerkEntryPointEffect);

        public static readonly Type GetterType = typeof(IAPerkEntryPointEffectGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAPerkEntryPointEffect);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.APerkEntryPointEffect";

        public const string Name = "APerkEntryPointEffect";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.PRKE;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.PRKE);
            var all = RecordCollection.Factory(
                RecordTypes.PRKE,
                RecordTypes.EPFB,
                RecordTypes.EPFT);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(APerkEntryPointEffectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class APerkEntryPointEffectSetterCommon : APerkEffectSetterCommon
    {
        public new static readonly APerkEntryPointEffectSetterCommon Instance = new APerkEntryPointEffectSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IAPerkEntryPointEffect item)
        {
            ClearPartial();
            item.EntryPoint = default(APerkEntryPointEffect.EntryType);
            item.PerkConditionTabCount = default(Byte);
            item.PerkEntryID = default;
            base.Clear(item);
        }
        
        public override void Clear(IAPerkEffect item)
        {
            Clear(item: (IAPerkEntryPointEffect)item);
        }
        
        #region Mutagen
        public void RemapLinks(IAPerkEntryPointEffect obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAPerkEntryPointEffect item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: APerkEntryPointEffectBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: APerkEntryPointEffectBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAPerkEffect item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (APerkEntryPointEffect)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class APerkEntryPointEffectCommon : APerkEffectCommon
    {
        public new static readonly APerkEntryPointEffectCommon Instance = new APerkEntryPointEffectCommon();

        public APerkEntryPointEffect.Mask<bool> GetEqualsMask(
            IAPerkEntryPointEffectGetter item,
            IAPerkEntryPointEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new APerkEntryPointEffect.Mask<bool>(false);
            ((APerkEntryPointEffectCommon)((IAPerkEntryPointEffectGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAPerkEntryPointEffectGetter item,
            IAPerkEntryPointEffectGetter rhs,
            APerkEntryPointEffect.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.EntryPoint = item.EntryPoint == rhs.EntryPoint;
            ret.PerkConditionTabCount = item.PerkConditionTabCount == rhs.PerkConditionTabCount;
            ret.PerkEntryID = item.PerkEntryID == rhs.PerkEntryID;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IAPerkEntryPointEffectGetter item,
            string? name = null,
            APerkEntryPointEffect.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IAPerkEntryPointEffectGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            APerkEntryPointEffect.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"APerkEntryPointEffect =>");
            }
            else
            {
                sb.AppendLine($"{name} (APerkEntryPointEffect) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IAPerkEntryPointEffectGetter item,
            StructuredStringBuilder sb,
            APerkEntryPointEffect.Mask<bool>? printMask = null)
        {
            APerkEffectCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.EntryPoint ?? true)
            {
                sb.AppendItem(item.EntryPoint, "EntryPoint");
            }
            if (printMask?.PerkConditionTabCount ?? true)
            {
                sb.AppendItem(item.PerkConditionTabCount, "PerkConditionTabCount");
            }
            if ((printMask?.PerkEntryID ?? true)
                && item.PerkEntryID is {} PerkEntryIDItem)
            {
                sb.AppendItem(PerkEntryIDItem, "PerkEntryID");
            }
        }
        
        public static APerkEntryPointEffect_FieldIndex ConvertFieldIndex(APerkEffect_FieldIndex index)
        {
            switch (index)
            {
                case APerkEffect_FieldIndex.Rank:
                    return (APerkEntryPointEffect_FieldIndex)((int)index);
                case APerkEffect_FieldIndex.Priority:
                    return (APerkEntryPointEffect_FieldIndex)((int)index);
                case APerkEffect_FieldIndex.Conditions:
                    return (APerkEntryPointEffect_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAPerkEntryPointEffectGetter? lhs,
            IAPerkEntryPointEffectGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAPerkEffectGetter)lhs, (IAPerkEffectGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)APerkEntryPointEffect_FieldIndex.EntryPoint) ?? true))
            {
                if (lhs.EntryPoint != rhs.EntryPoint) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)APerkEntryPointEffect_FieldIndex.PerkConditionTabCount) ?? true))
            {
                if (lhs.PerkConditionTabCount != rhs.PerkConditionTabCount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)APerkEntryPointEffect_FieldIndex.PerkEntryID) ?? true))
            {
                if (lhs.PerkEntryID != rhs.PerkEntryID) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAPerkEffectGetter? lhs,
            IAPerkEffectGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IAPerkEntryPointEffectGetter?)lhs,
                rhs: rhs as IAPerkEntryPointEffectGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IAPerkEntryPointEffectGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.EntryPoint);
            hash.Add(item.PerkConditionTabCount);
            if (item.PerkEntryID is {} PerkEntryIDitem)
            {
                hash.Add(PerkEntryIDitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAPerkEffectGetter item)
        {
            return GetHashCode(item: (IAPerkEntryPointEffectGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return APerkEntryPointEffect.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IAPerkEntryPointEffectGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class APerkEntryPointEffectSetterTranslationCommon : APerkEffectSetterTranslationCommon
    {
        public new static readonly APerkEntryPointEffectSetterTranslationCommon Instance = new APerkEntryPointEffectSetterTranslationCommon();

        #region DeepCopyIn
        public virtual void DeepCopyIn(
            IAPerkEntryPointEffect item,
            IAPerkEntryPointEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAPerkEffect)item,
                (IAPerkEffectGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)APerkEntryPointEffect_FieldIndex.EntryPoint) ?? true))
            {
                item.EntryPoint = rhs.EntryPoint;
            }
            if ((copyMask?.GetShouldTranslate((int)APerkEntryPointEffect_FieldIndex.PerkConditionTabCount) ?? true))
            {
                item.PerkConditionTabCount = rhs.PerkConditionTabCount;
            }
            if ((copyMask?.GetShouldTranslate((int)APerkEntryPointEffect_FieldIndex.PerkEntryID) ?? true))
            {
                item.PerkEntryID = rhs.PerkEntryID;
            }
        }
        
        
        public override void DeepCopyIn(
            IAPerkEffect item,
            IAPerkEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAPerkEntryPointEffect)item,
                rhs: (IAPerkEntryPointEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public APerkEntryPointEffect DeepCopy(
            IAPerkEntryPointEffectGetter item,
            APerkEntryPointEffect.TranslationMask? copyMask = null)
        {
            APerkEntryPointEffect ret = (APerkEntryPointEffect)((APerkEntryPointEffectCommon)((IAPerkEntryPointEffectGetter)item).CommonInstance()!).GetNew();
            ((APerkEntryPointEffectSetterTranslationCommon)((IAPerkEntryPointEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public APerkEntryPointEffect DeepCopy(
            IAPerkEntryPointEffectGetter item,
            out APerkEntryPointEffect.ErrorMask errorMask,
            APerkEntryPointEffect.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            APerkEntryPointEffect ret = (APerkEntryPointEffect)((APerkEntryPointEffectCommon)((IAPerkEntryPointEffectGetter)item).CommonInstance()!).GetNew();
            ((APerkEntryPointEffectSetterTranslationCommon)((IAPerkEntryPointEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = APerkEntryPointEffect.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public APerkEntryPointEffect DeepCopy(
            IAPerkEntryPointEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            APerkEntryPointEffect ret = (APerkEntryPointEffect)((APerkEntryPointEffectCommon)((IAPerkEntryPointEffectGetter)item).CommonInstance()!).GetNew();
            ((APerkEntryPointEffectSetterTranslationCommon)((IAPerkEntryPointEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class APerkEntryPointEffect
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => APerkEntryPointEffect_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => APerkEntryPointEffect_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => APerkEntryPointEffectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return APerkEntryPointEffectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => APerkEntryPointEffectSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class APerkEntryPointEffectBinaryWriteTranslation :
        APerkEffectBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly APerkEntryPointEffectBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IAPerkEntryPointEffectGetter item,
            MutagenWriter writer)
        {
            EnumBinaryTranslation<APerkEntryPointEffect.EntryType, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.EntryPoint,
                length: 1);
            writer.Write(item.PerkConditionTabCount);
        }

        public static void WriteRecordTypes(
            IAPerkEntryPointEffectGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            APerkEffectBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            UInt16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.PerkEntryID,
                header: translationParams.ConvertToCustom(RecordTypes.EPFB));
            APerkEntryPointEffectBinaryWriteTranslation.WriteBinaryFunctionParameters(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryFunctionParametersCustom(
            MutagenWriter writer,
            IAPerkEntryPointEffectGetter item);

        public static void WriteBinaryFunctionParameters(
            MutagenWriter writer,
            IAPerkEntryPointEffectGetter item)
        {
            WriteBinaryFunctionParametersCustom(
                writer: writer,
                item: item);
        }

        public virtual void Write(
            MutagenWriter writer,
            IAPerkEntryPointEffectGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, RecordTypes.PRKF)) { } // End Marker
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IAPerkEntryPointEffectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IAPerkEffectGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IAPerkEntryPointEffectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class APerkEntryPointEffectBinaryCreateTranslation : APerkEffectBinaryCreateTranslation
    {
        public new static readonly APerkEntryPointEffectBinaryCreateTranslation Instance = new APerkEntryPointEffectBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IAPerkEntryPointEffect item,
            MutagenFrame frame)
        {
            item.EntryPoint = EnumBinaryTranslation<APerkEntryPointEffect.EntryType, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 1);
            item.PerkConditionTabCount = frame.ReadUInt8();
        }

        public static ParseResult FillBinaryRecordTypes(
            IAPerkEntryPointEffect item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.EPFB:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PerkEntryID = frame.ReadUInt16();
                    return (int)APerkEntryPointEffect_FieldIndex.PerkEntryID;
                }
                case RecordTypeInts.EPFT:
                {
                    return APerkEntryPointEffectBinaryCreateTranslation.FillBinaryFunctionParametersCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                }
                default:
                    return APerkEffectBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

        public static partial ParseResult FillBinaryFunctionParametersCustom(
            MutagenFrame frame,
            IAPerkEntryPointEffect item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class APerkEntryPointEffectBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal abstract partial class APerkEntryPointEffectBinaryOverlay :
        APerkEffectBinaryOverlay,
        IAPerkEntryPointEffectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => APerkEntryPointEffect_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => APerkEntryPointEffect_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => APerkEntryPointEffectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => APerkEntryPointEffectSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => APerkEntryPointEffectCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => APerkEntryPointEffectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((APerkEntryPointEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public APerkEntryPointEffect.EntryType EntryPoint => (APerkEntryPointEffect.EntryType)_structData.Span.Slice(0x0, 0x1)[0];
        public Byte PerkConditionTabCount => _structData.Span[0x1];
        #region PerkEntryID
        private int? _PerkEntryIDLocation;
        public UInt16? PerkEntryID => _PerkEntryIDLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _PerkEntryIDLocation.Value, _package.MetaData.Constants)) : default(UInt16?);
        #endregion
        #region FunctionParameters
        public partial ParseResult FunctionParametersCustomParse(
            OverlayStream stream,
            int offset,
            PreviousParse lastParsed);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected APerkEntryPointEffectBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }


        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.EPFB:
                {
                    _PerkEntryIDLocation = (stream.Position - offset);
                    return (int)APerkEntryPointEffect_FieldIndex.PerkEntryID;
                }
                case RecordTypeInts.EPFT:
                {
                    return FunctionParametersCustomParse(
                        stream,
                        offset,
                        lastParsed: lastParsed);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            APerkEntryPointEffectMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IAPerkEntryPointEffectGetter rhs) return false;
            return ((APerkEntryPointEffectCommon)((IAPerkEntryPointEffectGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAPerkEntryPointEffectGetter? obj)
        {
            return ((APerkEntryPointEffectCommon)((IAPerkEntryPointEffectGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((APerkEntryPointEffectCommon)((IAPerkEntryPointEffectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

