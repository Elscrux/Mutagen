/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class ArmorObjectModBoolProperty :
        AArmorObjectModProperty,
        IArmorObjectModBoolProperty,
        IEquatable<IArmorObjectModBoolPropertyGetter>,
        ILoquiObjectSetter<ArmorObjectModBoolProperty>
    {
        #region Ctor
        public ArmorObjectModBoolProperty()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Value
        public Boolean Value { get; set; } = default;
        #endregion
        #region Value2
        public Boolean Value2 { get; set; } = default;
        #endregion
        #region FunctionType
        public ObjectModProperty.BoolFunctionType FunctionType { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ArmorObjectModBoolPropertyMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IArmorObjectModBoolPropertyGetter rhs) return false;
            return ((ArmorObjectModBoolPropertyCommon)((IArmorObjectModBoolPropertyGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IArmorObjectModBoolPropertyGetter? obj)
        {
            return ((ArmorObjectModBoolPropertyCommon)((IArmorObjectModBoolPropertyGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ArmorObjectModBoolPropertyCommon)((IArmorObjectModBoolPropertyGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AArmorObjectModProperty.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Value = initialValue;
                this.Value2 = initialValue;
                this.FunctionType = initialValue;
            }

            public Mask(
                TItem Property,
                TItem Step,
                TItem Value,
                TItem Value2,
                TItem FunctionType)
            : base(
                Property: Property,
                Step: Step)
            {
                this.Value = Value;
                this.Value2 = Value2;
                this.FunctionType = FunctionType;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Value;
            public TItem Value2;
            public TItem FunctionType;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Value, rhs.Value)) return false;
                if (!object.Equals(this.Value2, rhs.Value2)) return false;
                if (!object.Equals(this.FunctionType, rhs.FunctionType)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Value);
                hash.Add(this.Value2);
                hash.Add(this.FunctionType);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Value)) return false;
                if (!eval(this.Value2)) return false;
                if (!eval(this.FunctionType)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Value)) return true;
                if (eval(this.Value2)) return true;
                if (eval(this.FunctionType)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ArmorObjectModBoolProperty.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Value = eval(this.Value);
                obj.Value2 = eval(this.Value2);
                obj.FunctionType = eval(this.FunctionType);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ArmorObjectModBoolProperty.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ArmorObjectModBoolProperty.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ArmorObjectModBoolProperty.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Value ?? true)
                    {
                        fg.AppendItem(Value, "Value");
                    }
                    if (printMask?.Value2 ?? true)
                    {
                        fg.AppendItem(Value2, "Value2");
                    }
                    if (printMask?.FunctionType ?? true)
                    {
                        fg.AppendItem(FunctionType, "FunctionType");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            AArmorObjectModProperty.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Value;
            public Exception? Value2;
            public Exception? FunctionType;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ArmorObjectModBoolProperty_FieldIndex enu = (ArmorObjectModBoolProperty_FieldIndex)index;
                switch (enu)
                {
                    case ArmorObjectModBoolProperty_FieldIndex.Value:
                        return Value;
                    case ArmorObjectModBoolProperty_FieldIndex.Value2:
                        return Value2;
                    case ArmorObjectModBoolProperty_FieldIndex.FunctionType:
                        return FunctionType;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ArmorObjectModBoolProperty_FieldIndex enu = (ArmorObjectModBoolProperty_FieldIndex)index;
                switch (enu)
                {
                    case ArmorObjectModBoolProperty_FieldIndex.Value:
                        this.Value = ex;
                        break;
                    case ArmorObjectModBoolProperty_FieldIndex.Value2:
                        this.Value2 = ex;
                        break;
                    case ArmorObjectModBoolProperty_FieldIndex.FunctionType:
                        this.FunctionType = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ArmorObjectModBoolProperty_FieldIndex enu = (ArmorObjectModBoolProperty_FieldIndex)index;
                switch (enu)
                {
                    case ArmorObjectModBoolProperty_FieldIndex.Value:
                        this.Value = (Exception?)obj;
                        break;
                    case ArmorObjectModBoolProperty_FieldIndex.Value2:
                        this.Value2 = (Exception?)obj;
                        break;
                    case ArmorObjectModBoolProperty_FieldIndex.FunctionType:
                        this.FunctionType = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Value != null) return true;
                if (Value2 != null) return true;
                if (FunctionType != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Value, "Value");
                fg.AppendItem(Value2, "Value2");
                fg.AppendItem(FunctionType, "FunctionType");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Value = this.Value.Combine(rhs.Value);
                ret.Value2 = this.Value2.Combine(rhs.Value2);
                ret.FunctionType = this.FunctionType.Combine(rhs.FunctionType);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AArmorObjectModProperty.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Value;
            public bool Value2;
            public bool FunctionType;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Value = defaultOn;
                this.Value2 = defaultOn;
                this.FunctionType = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Value, null));
                ret.Add((Value2, null));
                ret.Add((FunctionType, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ArmorObjectModBoolPropertyBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ArmorObjectModBoolPropertyBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static ArmorObjectModBoolProperty CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new ArmorObjectModBoolProperty();
            ((ArmorObjectModBoolPropertySetterCommon)((IArmorObjectModBoolPropertyGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ArmorObjectModBoolProperty item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ArmorObjectModBoolPropertySetterCommon)((IArmorObjectModBoolPropertyGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ArmorObjectModBoolProperty GetNew()
        {
            return new ArmorObjectModBoolProperty();
        }

    }
    #endregion

    #region Interface
    public partial interface IArmorObjectModBoolProperty :
        IAArmorObjectModProperty,
        IArmorObjectModBoolPropertyGetter,
        ILoquiObjectSetter<IArmorObjectModBoolProperty>
    {
        new Boolean Value { get; set; }
        new Boolean Value2 { get; set; }
        new ObjectModProperty.BoolFunctionType FunctionType { get; set; }
    }

    public partial interface IArmorObjectModBoolPropertyGetter :
        IAArmorObjectModPropertyGetter,
        IBinaryItem,
        ILoquiObject<IArmorObjectModBoolPropertyGetter>
    {
        static new ILoquiRegistration StaticRegistration => ArmorObjectModBoolProperty_Registration.Instance;
        Boolean Value { get; }
        Boolean Value2 { get; }
        ObjectModProperty.BoolFunctionType FunctionType { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ArmorObjectModBoolPropertyMixIn
    {
        public static void Clear(this IArmorObjectModBoolProperty item)
        {
            ((ArmorObjectModBoolPropertySetterCommon)((IArmorObjectModBoolPropertyGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ArmorObjectModBoolProperty.Mask<bool> GetEqualsMask(
            this IArmorObjectModBoolPropertyGetter item,
            IArmorObjectModBoolPropertyGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ArmorObjectModBoolPropertyCommon)((IArmorObjectModBoolPropertyGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IArmorObjectModBoolPropertyGetter item,
            string? name = null,
            ArmorObjectModBoolProperty.Mask<bool>? printMask = null)
        {
            return ((ArmorObjectModBoolPropertyCommon)((IArmorObjectModBoolPropertyGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IArmorObjectModBoolPropertyGetter item,
            FileGeneration fg,
            string? name = null,
            ArmorObjectModBoolProperty.Mask<bool>? printMask = null)
        {
            ((ArmorObjectModBoolPropertyCommon)((IArmorObjectModBoolPropertyGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IArmorObjectModBoolPropertyGetter item,
            IArmorObjectModBoolPropertyGetter rhs,
            ArmorObjectModBoolProperty.TranslationMask? equalsMask = null)
        {
            return ((ArmorObjectModBoolPropertyCommon)((IArmorObjectModBoolPropertyGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IArmorObjectModBoolProperty lhs,
            IArmorObjectModBoolPropertyGetter rhs,
            out ArmorObjectModBoolProperty.ErrorMask errorMask,
            ArmorObjectModBoolProperty.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ArmorObjectModBoolPropertySetterTranslationCommon)((IArmorObjectModBoolPropertyGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ArmorObjectModBoolProperty.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IArmorObjectModBoolProperty lhs,
            IArmorObjectModBoolPropertyGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ArmorObjectModBoolPropertySetterTranslationCommon)((IArmorObjectModBoolPropertyGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ArmorObjectModBoolProperty DeepCopy(
            this IArmorObjectModBoolPropertyGetter item,
            ArmorObjectModBoolProperty.TranslationMask? copyMask = null)
        {
            return ((ArmorObjectModBoolPropertySetterTranslationCommon)((IArmorObjectModBoolPropertyGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ArmorObjectModBoolProperty DeepCopy(
            this IArmorObjectModBoolPropertyGetter item,
            out ArmorObjectModBoolProperty.ErrorMask errorMask,
            ArmorObjectModBoolProperty.TranslationMask? copyMask = null)
        {
            return ((ArmorObjectModBoolPropertySetterTranslationCommon)((IArmorObjectModBoolPropertyGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ArmorObjectModBoolProperty DeepCopy(
            this IArmorObjectModBoolPropertyGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ArmorObjectModBoolPropertySetterTranslationCommon)((IArmorObjectModBoolPropertyGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IArmorObjectModBoolProperty item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((ArmorObjectModBoolPropertySetterCommon)((IArmorObjectModBoolPropertyGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum ArmorObjectModBoolProperty_FieldIndex
    {
        Property = 0,
        Step = 1,
        Value = 2,
        Value2 = 3,
        FunctionType = 4,
    }
    #endregion

    #region Registration
    public partial class ArmorObjectModBoolProperty_Registration : ILoquiRegistration
    {
        public static readonly ArmorObjectModBoolProperty_Registration Instance = new ArmorObjectModBoolProperty_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 298,
            version: 0);

        public const string GUID = "2d4e8ba9-e227-400f-8e4e-2068b6f2ca01";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(ArmorObjectModBoolProperty.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ArmorObjectModBoolProperty.ErrorMask);

        public static readonly Type ClassType = typeof(ArmorObjectModBoolProperty);

        public static readonly Type GetterType = typeof(IArmorObjectModBoolPropertyGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IArmorObjectModBoolProperty);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.ArmorObjectModBoolProperty";

        public const string Name = "ArmorObjectModBoolProperty";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(ArmorObjectModBoolPropertyBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ArmorObjectModBoolPropertySetterCommon : AArmorObjectModPropertySetterCommon
    {
        public new static readonly ArmorObjectModBoolPropertySetterCommon Instance = new ArmorObjectModBoolPropertySetterCommon();

        partial void ClearPartial();
        
        public void Clear(IArmorObjectModBoolProperty item)
        {
            ClearPartial();
            item.Value = default;
            item.Value2 = default;
            item.FunctionType = default;
            base.Clear(item);
        }
        
        public override void Clear(IAArmorObjectModProperty item)
        {
            Clear(item: (IArmorObjectModBoolProperty)item);
        }
        
        #region Mutagen
        public void RemapLinks(IArmorObjectModBoolProperty obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IArmorObjectModBoolProperty item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ArmorObjectModBoolPropertyBinaryCreateTranslation.FillBinaryStructs);
        }
        
        public override void CopyInFromBinary(
            IAArmorObjectModProperty item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (ArmorObjectModBoolProperty)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    public partial class ArmorObjectModBoolPropertyCommon : AArmorObjectModPropertyCommon
    {
        public new static readonly ArmorObjectModBoolPropertyCommon Instance = new ArmorObjectModBoolPropertyCommon();

        public ArmorObjectModBoolProperty.Mask<bool> GetEqualsMask(
            IArmorObjectModBoolPropertyGetter item,
            IArmorObjectModBoolPropertyGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ArmorObjectModBoolProperty.Mask<bool>(false);
            ((ArmorObjectModBoolPropertyCommon)((IArmorObjectModBoolPropertyGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IArmorObjectModBoolPropertyGetter item,
            IArmorObjectModBoolPropertyGetter rhs,
            ArmorObjectModBoolProperty.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Value = item.Value == rhs.Value;
            ret.Value2 = item.Value2 == rhs.Value2;
            ret.FunctionType = item.FunctionType == rhs.FunctionType;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IArmorObjectModBoolPropertyGetter item,
            string? name = null,
            ArmorObjectModBoolProperty.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IArmorObjectModBoolPropertyGetter item,
            FileGeneration fg,
            string? name = null,
            ArmorObjectModBoolProperty.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ArmorObjectModBoolProperty =>");
            }
            else
            {
                fg.AppendLine($"{name} (ArmorObjectModBoolProperty) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IArmorObjectModBoolPropertyGetter item,
            FileGeneration fg,
            ArmorObjectModBoolProperty.Mask<bool>? printMask = null)
        {
            AArmorObjectModPropertyCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Value ?? true)
            {
                fg.AppendItem(item.Value, "Value");
            }
            if (printMask?.Value2 ?? true)
            {
                fg.AppendItem(item.Value2, "Value2");
            }
            if (printMask?.FunctionType ?? true)
            {
                fg.AppendItem(item.FunctionType, "FunctionType");
            }
        }
        
        public static ArmorObjectModBoolProperty_FieldIndex ConvertFieldIndex(AArmorObjectModProperty_FieldIndex index)
        {
            switch (index)
            {
                case AArmorObjectModProperty_FieldIndex.Property:
                    return (ArmorObjectModBoolProperty_FieldIndex)((int)index);
                case AArmorObjectModProperty_FieldIndex.Step:
                    return (ArmorObjectModBoolProperty_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IArmorObjectModBoolPropertyGetter? lhs,
            IArmorObjectModBoolPropertyGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAArmorObjectModPropertyGetter)lhs, (IAArmorObjectModPropertyGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)ArmorObjectModBoolProperty_FieldIndex.Value) ?? true))
            {
                if (lhs.Value != rhs.Value) return false;
            }
            if ((crystal?.GetShouldTranslate((int)ArmorObjectModBoolProperty_FieldIndex.Value2) ?? true))
            {
                if (lhs.Value2 != rhs.Value2) return false;
            }
            if ((crystal?.GetShouldTranslate((int)ArmorObjectModBoolProperty_FieldIndex.FunctionType) ?? true))
            {
                if (lhs.FunctionType != rhs.FunctionType) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAArmorObjectModPropertyGetter? lhs,
            IAArmorObjectModPropertyGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IArmorObjectModBoolPropertyGetter?)lhs,
                rhs: rhs as IArmorObjectModBoolPropertyGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(IArmorObjectModBoolPropertyGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Value);
            hash.Add(item.Value2);
            hash.Add(item.FunctionType);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAArmorObjectModPropertyGetter item)
        {
            return GetHashCode(item: (IArmorObjectModBoolPropertyGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ArmorObjectModBoolProperty.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IArmorObjectModBoolPropertyGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class ArmorObjectModBoolPropertySetterTranslationCommon : AArmorObjectModPropertySetterTranslationCommon
    {
        public new static readonly ArmorObjectModBoolPropertySetterTranslationCommon Instance = new ArmorObjectModBoolPropertySetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IArmorObjectModBoolProperty item,
            IArmorObjectModBoolPropertyGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAArmorObjectModProperty)item,
                (IAArmorObjectModPropertyGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)ArmorObjectModBoolProperty_FieldIndex.Value) ?? true))
            {
                item.Value = rhs.Value;
            }
            if ((copyMask?.GetShouldTranslate((int)ArmorObjectModBoolProperty_FieldIndex.Value2) ?? true))
            {
                item.Value2 = rhs.Value2;
            }
            if ((copyMask?.GetShouldTranslate((int)ArmorObjectModBoolProperty_FieldIndex.FunctionType) ?? true))
            {
                item.FunctionType = rhs.FunctionType;
            }
        }
        
        
        public override void DeepCopyIn(
            IAArmorObjectModProperty item,
            IAArmorObjectModPropertyGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IArmorObjectModBoolProperty)item,
                rhs: (IArmorObjectModBoolPropertyGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public ArmorObjectModBoolProperty DeepCopy(
            IArmorObjectModBoolPropertyGetter item,
            ArmorObjectModBoolProperty.TranslationMask? copyMask = null)
        {
            ArmorObjectModBoolProperty ret = (ArmorObjectModBoolProperty)((ArmorObjectModBoolPropertyCommon)((IArmorObjectModBoolPropertyGetter)item).CommonInstance()!).GetNew();
            ((ArmorObjectModBoolPropertySetterTranslationCommon)((IArmorObjectModBoolPropertyGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ArmorObjectModBoolProperty DeepCopy(
            IArmorObjectModBoolPropertyGetter item,
            out ArmorObjectModBoolProperty.ErrorMask errorMask,
            ArmorObjectModBoolProperty.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ArmorObjectModBoolProperty ret = (ArmorObjectModBoolProperty)((ArmorObjectModBoolPropertyCommon)((IArmorObjectModBoolPropertyGetter)item).CommonInstance()!).GetNew();
            ((ArmorObjectModBoolPropertySetterTranslationCommon)((IArmorObjectModBoolPropertyGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ArmorObjectModBoolProperty.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ArmorObjectModBoolProperty DeepCopy(
            IArmorObjectModBoolPropertyGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ArmorObjectModBoolProperty ret = (ArmorObjectModBoolProperty)((ArmorObjectModBoolPropertyCommon)((IArmorObjectModBoolPropertyGetter)item).CommonInstance()!).GetNew();
            ((ArmorObjectModBoolPropertySetterTranslationCommon)((IArmorObjectModBoolPropertyGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class ArmorObjectModBoolProperty
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ArmorObjectModBoolProperty_Registration.Instance;
        public new static ArmorObjectModBoolProperty_Registration StaticRegistration => ArmorObjectModBoolProperty_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ArmorObjectModBoolPropertyCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ArmorObjectModBoolPropertySetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ArmorObjectModBoolPropertySetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ArmorObjectModBoolPropertyBinaryWriteTranslation :
        AArmorObjectModPropertyBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ArmorObjectModBoolPropertyBinaryWriteTranslation Instance = new ArmorObjectModBoolPropertyBinaryWriteTranslation();

        public static void WriteEmbedded(
            IArmorObjectModBoolPropertyGetter item,
            MutagenWriter writer)
        {
            AArmorObjectModPropertyBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            writer.Write(item.Value);
            writer.Write(item.Value2);
            EnumBinaryTranslation<ObjectModProperty.BoolFunctionType, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.FunctionType,
                length: 4);
        }

        public void Write(
            MutagenWriter writer,
            IArmorObjectModBoolPropertyGetter item,
            TypedWriteParams? translationParams = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IArmorObjectModBoolPropertyGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IAArmorObjectModPropertyGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IArmorObjectModBoolPropertyGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class ArmorObjectModBoolPropertyBinaryCreateTranslation : AArmorObjectModPropertyBinaryCreateTranslation
    {
        public new readonly static ArmorObjectModBoolPropertyBinaryCreateTranslation Instance = new ArmorObjectModBoolPropertyBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IArmorObjectModBoolProperty item,
            MutagenFrame frame)
        {
            AArmorObjectModPropertyBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            item.Value = frame.ReadBoolean();
            item.Value2 = frame.ReadBoolean();
            item.FunctionType = EnumBinaryTranslation<ObjectModProperty.BoolFunctionType, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ArmorObjectModBoolPropertyBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ArmorObjectModBoolPropertyBinaryOverlay :
        AArmorObjectModPropertyBinaryOverlay,
        IArmorObjectModBoolPropertyGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ArmorObjectModBoolProperty_Registration.Instance;
        public new static ArmorObjectModBoolProperty_Registration StaticRegistration => ArmorObjectModBoolProperty_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ArmorObjectModBoolPropertyCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ArmorObjectModBoolPropertySetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ArmorObjectModBoolPropertyBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ArmorObjectModBoolPropertyBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Boolean Value => _data.Slice(0x5, 0x1)[0] == 1;
        public Boolean Value2 => _data.Slice(0x6, 0x1)[0] == 1;
        public ObjectModProperty.BoolFunctionType FunctionType => (ObjectModProperty.BoolFunctionType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x7, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ArmorObjectModBoolPropertyBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ArmorObjectModBoolPropertyBinaryOverlay ArmorObjectModBoolPropertyFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new ArmorObjectModBoolPropertyBinaryOverlay(
                bytes: stream.RemainingMemory.Slice(0, 0xB),
                package: package);
            int offset = stream.Position;
            stream.Position += 0xB;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ArmorObjectModBoolPropertyBinaryOverlay ArmorObjectModBoolPropertyFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return ArmorObjectModBoolPropertyFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ArmorObjectModBoolPropertyMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IArmorObjectModBoolPropertyGetter rhs) return false;
            return ((ArmorObjectModBoolPropertyCommon)((IArmorObjectModBoolPropertyGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IArmorObjectModBoolPropertyGetter? obj)
        {
            return ((ArmorObjectModBoolPropertyCommon)((IArmorObjectModBoolPropertyGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ArmorObjectModBoolPropertyCommon)((IArmorObjectModBoolPropertyGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

