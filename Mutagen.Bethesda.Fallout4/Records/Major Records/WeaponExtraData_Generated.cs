/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class WeaponExtraData :
        IEquatable<IWeaponExtraDataGetter>,
        ILoquiObjectSetter<WeaponExtraData>,
        IWeaponExtraData
    {
        #region Ctor
        public WeaponExtraData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region AnimationFireSeconds
        public Single AnimationFireSeconds { get; set; } = default(Single);
        #endregion
        #region RumbleLeftMotorStrength
        public Single RumbleLeftMotorStrength { get; set; } = default(Single);
        #endregion
        #region RumbleRightMotorStrength
        public Single RumbleRightMotorStrength { get; set; } = default(Single);
        #endregion
        #region RumbleDuration
        public Single RumbleDuration { get; set; } = default(Single);
        #endregion
        #region AnimationReloadSeconds
        public Single AnimationReloadSeconds { get; set; } = default(Single);
        #endregion
        #region BoltAnimSeconds
        public Single BoltAnimSeconds { get; set; } = default(Single);
        #endregion
        #region SightedTransitionSeconds
        public Single SightedTransitionSeconds { get; set; } = default(Single);
        #endregion
        #region NumProjectiles
        public Byte NumProjectiles { get; set; } = default(Byte);
        #endregion
        #region ProjectileOverride
        private readonly IFormLink<IProjectileGetter> _ProjectileOverride = new FormLink<IProjectileGetter>();
        public IFormLink<IProjectileGetter> ProjectileOverride
        {
            get => _ProjectileOverride;
            set => _ProjectileOverride.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IProjectileGetter> IWeaponExtraDataGetter.ProjectileOverride => this.ProjectileOverride;
        #endregion
        #region Pattern
        public Weapon.PatternType Pattern { get; set; } = default(Weapon.PatternType);
        #endregion
        #region RumblePeriodMs
        public UInt32 RumblePeriodMs { get; set; } = default(UInt32);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            WeaponExtraDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IWeaponExtraDataGetter rhs) return false;
            return ((WeaponExtraDataCommon)((IWeaponExtraDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IWeaponExtraDataGetter? obj)
        {
            return ((WeaponExtraDataCommon)((IWeaponExtraDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((WeaponExtraDataCommon)((IWeaponExtraDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.AnimationFireSeconds = initialValue;
                this.RumbleLeftMotorStrength = initialValue;
                this.RumbleRightMotorStrength = initialValue;
                this.RumbleDuration = initialValue;
                this.AnimationReloadSeconds = initialValue;
                this.BoltAnimSeconds = initialValue;
                this.SightedTransitionSeconds = initialValue;
                this.NumProjectiles = initialValue;
                this.ProjectileOverride = initialValue;
                this.Pattern = initialValue;
                this.RumblePeriodMs = initialValue;
            }

            public Mask(
                TItem AnimationFireSeconds,
                TItem RumbleLeftMotorStrength,
                TItem RumbleRightMotorStrength,
                TItem RumbleDuration,
                TItem AnimationReloadSeconds,
                TItem BoltAnimSeconds,
                TItem SightedTransitionSeconds,
                TItem NumProjectiles,
                TItem ProjectileOverride,
                TItem Pattern,
                TItem RumblePeriodMs)
            {
                this.AnimationFireSeconds = AnimationFireSeconds;
                this.RumbleLeftMotorStrength = RumbleLeftMotorStrength;
                this.RumbleRightMotorStrength = RumbleRightMotorStrength;
                this.RumbleDuration = RumbleDuration;
                this.AnimationReloadSeconds = AnimationReloadSeconds;
                this.BoltAnimSeconds = BoltAnimSeconds;
                this.SightedTransitionSeconds = SightedTransitionSeconds;
                this.NumProjectiles = NumProjectiles;
                this.ProjectileOverride = ProjectileOverride;
                this.Pattern = Pattern;
                this.RumblePeriodMs = RumblePeriodMs;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem AnimationFireSeconds;
            public TItem RumbleLeftMotorStrength;
            public TItem RumbleRightMotorStrength;
            public TItem RumbleDuration;
            public TItem AnimationReloadSeconds;
            public TItem BoltAnimSeconds;
            public TItem SightedTransitionSeconds;
            public TItem NumProjectiles;
            public TItem ProjectileOverride;
            public TItem Pattern;
            public TItem RumblePeriodMs;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.AnimationFireSeconds, rhs.AnimationFireSeconds)) return false;
                if (!object.Equals(this.RumbleLeftMotorStrength, rhs.RumbleLeftMotorStrength)) return false;
                if (!object.Equals(this.RumbleRightMotorStrength, rhs.RumbleRightMotorStrength)) return false;
                if (!object.Equals(this.RumbleDuration, rhs.RumbleDuration)) return false;
                if (!object.Equals(this.AnimationReloadSeconds, rhs.AnimationReloadSeconds)) return false;
                if (!object.Equals(this.BoltAnimSeconds, rhs.BoltAnimSeconds)) return false;
                if (!object.Equals(this.SightedTransitionSeconds, rhs.SightedTransitionSeconds)) return false;
                if (!object.Equals(this.NumProjectiles, rhs.NumProjectiles)) return false;
                if (!object.Equals(this.ProjectileOverride, rhs.ProjectileOverride)) return false;
                if (!object.Equals(this.Pattern, rhs.Pattern)) return false;
                if (!object.Equals(this.RumblePeriodMs, rhs.RumblePeriodMs)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.AnimationFireSeconds);
                hash.Add(this.RumbleLeftMotorStrength);
                hash.Add(this.RumbleRightMotorStrength);
                hash.Add(this.RumbleDuration);
                hash.Add(this.AnimationReloadSeconds);
                hash.Add(this.BoltAnimSeconds);
                hash.Add(this.SightedTransitionSeconds);
                hash.Add(this.NumProjectiles);
                hash.Add(this.ProjectileOverride);
                hash.Add(this.Pattern);
                hash.Add(this.RumblePeriodMs);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.AnimationFireSeconds)) return false;
                if (!eval(this.RumbleLeftMotorStrength)) return false;
                if (!eval(this.RumbleRightMotorStrength)) return false;
                if (!eval(this.RumbleDuration)) return false;
                if (!eval(this.AnimationReloadSeconds)) return false;
                if (!eval(this.BoltAnimSeconds)) return false;
                if (!eval(this.SightedTransitionSeconds)) return false;
                if (!eval(this.NumProjectiles)) return false;
                if (!eval(this.ProjectileOverride)) return false;
                if (!eval(this.Pattern)) return false;
                if (!eval(this.RumblePeriodMs)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.AnimationFireSeconds)) return true;
                if (eval(this.RumbleLeftMotorStrength)) return true;
                if (eval(this.RumbleRightMotorStrength)) return true;
                if (eval(this.RumbleDuration)) return true;
                if (eval(this.AnimationReloadSeconds)) return true;
                if (eval(this.BoltAnimSeconds)) return true;
                if (eval(this.SightedTransitionSeconds)) return true;
                if (eval(this.NumProjectiles)) return true;
                if (eval(this.ProjectileOverride)) return true;
                if (eval(this.Pattern)) return true;
                if (eval(this.RumblePeriodMs)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new WeaponExtraData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.AnimationFireSeconds = eval(this.AnimationFireSeconds);
                obj.RumbleLeftMotorStrength = eval(this.RumbleLeftMotorStrength);
                obj.RumbleRightMotorStrength = eval(this.RumbleRightMotorStrength);
                obj.RumbleDuration = eval(this.RumbleDuration);
                obj.AnimationReloadSeconds = eval(this.AnimationReloadSeconds);
                obj.BoltAnimSeconds = eval(this.BoltAnimSeconds);
                obj.SightedTransitionSeconds = eval(this.SightedTransitionSeconds);
                obj.NumProjectiles = eval(this.NumProjectiles);
                obj.ProjectileOverride = eval(this.ProjectileOverride);
                obj.Pattern = eval(this.Pattern);
                obj.RumblePeriodMs = eval(this.RumblePeriodMs);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(WeaponExtraData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, WeaponExtraData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(WeaponExtraData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.AnimationFireSeconds ?? true)
                    {
                        sb.AppendItem(AnimationFireSeconds, "AnimationFireSeconds");
                    }
                    if (printMask?.RumbleLeftMotorStrength ?? true)
                    {
                        sb.AppendItem(RumbleLeftMotorStrength, "RumbleLeftMotorStrength");
                    }
                    if (printMask?.RumbleRightMotorStrength ?? true)
                    {
                        sb.AppendItem(RumbleRightMotorStrength, "RumbleRightMotorStrength");
                    }
                    if (printMask?.RumbleDuration ?? true)
                    {
                        sb.AppendItem(RumbleDuration, "RumbleDuration");
                    }
                    if (printMask?.AnimationReloadSeconds ?? true)
                    {
                        sb.AppendItem(AnimationReloadSeconds, "AnimationReloadSeconds");
                    }
                    if (printMask?.BoltAnimSeconds ?? true)
                    {
                        sb.AppendItem(BoltAnimSeconds, "BoltAnimSeconds");
                    }
                    if (printMask?.SightedTransitionSeconds ?? true)
                    {
                        sb.AppendItem(SightedTransitionSeconds, "SightedTransitionSeconds");
                    }
                    if (printMask?.NumProjectiles ?? true)
                    {
                        sb.AppendItem(NumProjectiles, "NumProjectiles");
                    }
                    if (printMask?.ProjectileOverride ?? true)
                    {
                        sb.AppendItem(ProjectileOverride, "ProjectileOverride");
                    }
                    if (printMask?.Pattern ?? true)
                    {
                        sb.AppendItem(Pattern, "Pattern");
                    }
                    if (printMask?.RumblePeriodMs ?? true)
                    {
                        sb.AppendItem(RumblePeriodMs, "RumblePeriodMs");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? AnimationFireSeconds;
            public Exception? RumbleLeftMotorStrength;
            public Exception? RumbleRightMotorStrength;
            public Exception? RumbleDuration;
            public Exception? AnimationReloadSeconds;
            public Exception? BoltAnimSeconds;
            public Exception? SightedTransitionSeconds;
            public Exception? NumProjectiles;
            public Exception? ProjectileOverride;
            public Exception? Pattern;
            public Exception? RumblePeriodMs;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                WeaponExtraData_FieldIndex enu = (WeaponExtraData_FieldIndex)index;
                switch (enu)
                {
                    case WeaponExtraData_FieldIndex.AnimationFireSeconds:
                        return AnimationFireSeconds;
                    case WeaponExtraData_FieldIndex.RumbleLeftMotorStrength:
                        return RumbleLeftMotorStrength;
                    case WeaponExtraData_FieldIndex.RumbleRightMotorStrength:
                        return RumbleRightMotorStrength;
                    case WeaponExtraData_FieldIndex.RumbleDuration:
                        return RumbleDuration;
                    case WeaponExtraData_FieldIndex.AnimationReloadSeconds:
                        return AnimationReloadSeconds;
                    case WeaponExtraData_FieldIndex.BoltAnimSeconds:
                        return BoltAnimSeconds;
                    case WeaponExtraData_FieldIndex.SightedTransitionSeconds:
                        return SightedTransitionSeconds;
                    case WeaponExtraData_FieldIndex.NumProjectiles:
                        return NumProjectiles;
                    case WeaponExtraData_FieldIndex.ProjectileOverride:
                        return ProjectileOverride;
                    case WeaponExtraData_FieldIndex.Pattern:
                        return Pattern;
                    case WeaponExtraData_FieldIndex.RumblePeriodMs:
                        return RumblePeriodMs;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                WeaponExtraData_FieldIndex enu = (WeaponExtraData_FieldIndex)index;
                switch (enu)
                {
                    case WeaponExtraData_FieldIndex.AnimationFireSeconds:
                        this.AnimationFireSeconds = ex;
                        break;
                    case WeaponExtraData_FieldIndex.RumbleLeftMotorStrength:
                        this.RumbleLeftMotorStrength = ex;
                        break;
                    case WeaponExtraData_FieldIndex.RumbleRightMotorStrength:
                        this.RumbleRightMotorStrength = ex;
                        break;
                    case WeaponExtraData_FieldIndex.RumbleDuration:
                        this.RumbleDuration = ex;
                        break;
                    case WeaponExtraData_FieldIndex.AnimationReloadSeconds:
                        this.AnimationReloadSeconds = ex;
                        break;
                    case WeaponExtraData_FieldIndex.BoltAnimSeconds:
                        this.BoltAnimSeconds = ex;
                        break;
                    case WeaponExtraData_FieldIndex.SightedTransitionSeconds:
                        this.SightedTransitionSeconds = ex;
                        break;
                    case WeaponExtraData_FieldIndex.NumProjectiles:
                        this.NumProjectiles = ex;
                        break;
                    case WeaponExtraData_FieldIndex.ProjectileOverride:
                        this.ProjectileOverride = ex;
                        break;
                    case WeaponExtraData_FieldIndex.Pattern:
                        this.Pattern = ex;
                        break;
                    case WeaponExtraData_FieldIndex.RumblePeriodMs:
                        this.RumblePeriodMs = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                WeaponExtraData_FieldIndex enu = (WeaponExtraData_FieldIndex)index;
                switch (enu)
                {
                    case WeaponExtraData_FieldIndex.AnimationFireSeconds:
                        this.AnimationFireSeconds = (Exception?)obj;
                        break;
                    case WeaponExtraData_FieldIndex.RumbleLeftMotorStrength:
                        this.RumbleLeftMotorStrength = (Exception?)obj;
                        break;
                    case WeaponExtraData_FieldIndex.RumbleRightMotorStrength:
                        this.RumbleRightMotorStrength = (Exception?)obj;
                        break;
                    case WeaponExtraData_FieldIndex.RumbleDuration:
                        this.RumbleDuration = (Exception?)obj;
                        break;
                    case WeaponExtraData_FieldIndex.AnimationReloadSeconds:
                        this.AnimationReloadSeconds = (Exception?)obj;
                        break;
                    case WeaponExtraData_FieldIndex.BoltAnimSeconds:
                        this.BoltAnimSeconds = (Exception?)obj;
                        break;
                    case WeaponExtraData_FieldIndex.SightedTransitionSeconds:
                        this.SightedTransitionSeconds = (Exception?)obj;
                        break;
                    case WeaponExtraData_FieldIndex.NumProjectiles:
                        this.NumProjectiles = (Exception?)obj;
                        break;
                    case WeaponExtraData_FieldIndex.ProjectileOverride:
                        this.ProjectileOverride = (Exception?)obj;
                        break;
                    case WeaponExtraData_FieldIndex.Pattern:
                        this.Pattern = (Exception?)obj;
                        break;
                    case WeaponExtraData_FieldIndex.RumblePeriodMs:
                        this.RumblePeriodMs = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (AnimationFireSeconds != null) return true;
                if (RumbleLeftMotorStrength != null) return true;
                if (RumbleRightMotorStrength != null) return true;
                if (RumbleDuration != null) return true;
                if (AnimationReloadSeconds != null) return true;
                if (BoltAnimSeconds != null) return true;
                if (SightedTransitionSeconds != null) return true;
                if (NumProjectiles != null) return true;
                if (ProjectileOverride != null) return true;
                if (Pattern != null) return true;
                if (RumblePeriodMs != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(AnimationFireSeconds, "AnimationFireSeconds");
                }
                {
                    sb.AppendItem(RumbleLeftMotorStrength, "RumbleLeftMotorStrength");
                }
                {
                    sb.AppendItem(RumbleRightMotorStrength, "RumbleRightMotorStrength");
                }
                {
                    sb.AppendItem(RumbleDuration, "RumbleDuration");
                }
                {
                    sb.AppendItem(AnimationReloadSeconds, "AnimationReloadSeconds");
                }
                {
                    sb.AppendItem(BoltAnimSeconds, "BoltAnimSeconds");
                }
                {
                    sb.AppendItem(SightedTransitionSeconds, "SightedTransitionSeconds");
                }
                {
                    sb.AppendItem(NumProjectiles, "NumProjectiles");
                }
                {
                    sb.AppendItem(ProjectileOverride, "ProjectileOverride");
                }
                {
                    sb.AppendItem(Pattern, "Pattern");
                }
                {
                    sb.AppendItem(RumblePeriodMs, "RumblePeriodMs");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.AnimationFireSeconds = this.AnimationFireSeconds.Combine(rhs.AnimationFireSeconds);
                ret.RumbleLeftMotorStrength = this.RumbleLeftMotorStrength.Combine(rhs.RumbleLeftMotorStrength);
                ret.RumbleRightMotorStrength = this.RumbleRightMotorStrength.Combine(rhs.RumbleRightMotorStrength);
                ret.RumbleDuration = this.RumbleDuration.Combine(rhs.RumbleDuration);
                ret.AnimationReloadSeconds = this.AnimationReloadSeconds.Combine(rhs.AnimationReloadSeconds);
                ret.BoltAnimSeconds = this.BoltAnimSeconds.Combine(rhs.BoltAnimSeconds);
                ret.SightedTransitionSeconds = this.SightedTransitionSeconds.Combine(rhs.SightedTransitionSeconds);
                ret.NumProjectiles = this.NumProjectiles.Combine(rhs.NumProjectiles);
                ret.ProjectileOverride = this.ProjectileOverride.Combine(rhs.ProjectileOverride);
                ret.Pattern = this.Pattern.Combine(rhs.Pattern);
                ret.RumblePeriodMs = this.RumblePeriodMs.Combine(rhs.RumblePeriodMs);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool AnimationFireSeconds;
            public bool RumbleLeftMotorStrength;
            public bool RumbleRightMotorStrength;
            public bool RumbleDuration;
            public bool AnimationReloadSeconds;
            public bool BoltAnimSeconds;
            public bool SightedTransitionSeconds;
            public bool NumProjectiles;
            public bool ProjectileOverride;
            public bool Pattern;
            public bool RumblePeriodMs;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.AnimationFireSeconds = defaultOn;
                this.RumbleLeftMotorStrength = defaultOn;
                this.RumbleRightMotorStrength = defaultOn;
                this.RumbleDuration = defaultOn;
                this.AnimationReloadSeconds = defaultOn;
                this.BoltAnimSeconds = defaultOn;
                this.SightedTransitionSeconds = defaultOn;
                this.NumProjectiles = defaultOn;
                this.ProjectileOverride = defaultOn;
                this.Pattern = defaultOn;
                this.RumblePeriodMs = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((AnimationFireSeconds, null));
                ret.Add((RumbleLeftMotorStrength, null));
                ret.Add((RumbleRightMotorStrength, null));
                ret.Add((RumbleDuration, null));
                ret.Add((AnimationReloadSeconds, null));
                ret.Add((BoltAnimSeconds, null));
                ret.Add((SightedTransitionSeconds, null));
                ret.Add((NumProjectiles, null));
                ret.Add((ProjectileOverride, null));
                ret.Add((Pattern, null));
                ret.Add((RumblePeriodMs, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => WeaponExtraDataCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WeaponExtraDataSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => WeaponExtraDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((WeaponExtraDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static WeaponExtraData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new WeaponExtraData();
            ((WeaponExtraDataSetterCommon)((IWeaponExtraDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out WeaponExtraData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((WeaponExtraDataSetterCommon)((IWeaponExtraDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static WeaponExtraData GetNew()
        {
            return new WeaponExtraData();
        }

    }
    #endregion

    #region Interface
    public partial interface IWeaponExtraData :
        IFormLinkContainer,
        ILoquiObjectSetter<IWeaponExtraData>,
        IWeaponExtraDataGetter
    {
        new Single AnimationFireSeconds { get; set; }
        new Single RumbleLeftMotorStrength { get; set; }
        new Single RumbleRightMotorStrength { get; set; }
        new Single RumbleDuration { get; set; }
        new Single AnimationReloadSeconds { get; set; }
        new Single BoltAnimSeconds { get; set; }
        new Single SightedTransitionSeconds { get; set; }
        new Byte NumProjectiles { get; set; }
        new IFormLink<IProjectileGetter> ProjectileOverride { get; set; }
        new Weapon.PatternType Pattern { get; set; }
        new UInt32 RumblePeriodMs { get; set; }
    }

    public partial interface IWeaponExtraDataGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IWeaponExtraDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => WeaponExtraData_Registration.Instance;
        Single AnimationFireSeconds { get; }
        Single RumbleLeftMotorStrength { get; }
        Single RumbleRightMotorStrength { get; }
        Single RumbleDuration { get; }
        Single AnimationReloadSeconds { get; }
        Single BoltAnimSeconds { get; }
        Single SightedTransitionSeconds { get; }
        Byte NumProjectiles { get; }
        IFormLinkGetter<IProjectileGetter> ProjectileOverride { get; }
        Weapon.PatternType Pattern { get; }
        UInt32 RumblePeriodMs { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class WeaponExtraDataMixIn
    {
        public static void Clear(this IWeaponExtraData item)
        {
            ((WeaponExtraDataSetterCommon)((IWeaponExtraDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static WeaponExtraData.Mask<bool> GetEqualsMask(
            this IWeaponExtraDataGetter item,
            IWeaponExtraDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WeaponExtraDataCommon)((IWeaponExtraDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IWeaponExtraDataGetter item,
            string? name = null,
            WeaponExtraData.Mask<bool>? printMask = null)
        {
            return ((WeaponExtraDataCommon)((IWeaponExtraDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IWeaponExtraDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            WeaponExtraData.Mask<bool>? printMask = null)
        {
            ((WeaponExtraDataCommon)((IWeaponExtraDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IWeaponExtraDataGetter item,
            IWeaponExtraDataGetter rhs,
            WeaponExtraData.TranslationMask? equalsMask = null)
        {
            return ((WeaponExtraDataCommon)((IWeaponExtraDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IWeaponExtraData lhs,
            IWeaponExtraDataGetter rhs)
        {
            ((WeaponExtraDataSetterTranslationCommon)((IWeaponExtraDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IWeaponExtraData lhs,
            IWeaponExtraDataGetter rhs,
            WeaponExtraData.TranslationMask? copyMask = null)
        {
            ((WeaponExtraDataSetterTranslationCommon)((IWeaponExtraDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IWeaponExtraData lhs,
            IWeaponExtraDataGetter rhs,
            out WeaponExtraData.ErrorMask errorMask,
            WeaponExtraData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((WeaponExtraDataSetterTranslationCommon)((IWeaponExtraDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = WeaponExtraData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IWeaponExtraData lhs,
            IWeaponExtraDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((WeaponExtraDataSetterTranslationCommon)((IWeaponExtraDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static WeaponExtraData DeepCopy(
            this IWeaponExtraDataGetter item,
            WeaponExtraData.TranslationMask? copyMask = null)
        {
            return ((WeaponExtraDataSetterTranslationCommon)((IWeaponExtraDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static WeaponExtraData DeepCopy(
            this IWeaponExtraDataGetter item,
            out WeaponExtraData.ErrorMask errorMask,
            WeaponExtraData.TranslationMask? copyMask = null)
        {
            return ((WeaponExtraDataSetterTranslationCommon)((IWeaponExtraDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static WeaponExtraData DeepCopy(
            this IWeaponExtraDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((WeaponExtraDataSetterTranslationCommon)((IWeaponExtraDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IWeaponExtraData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((WeaponExtraDataSetterCommon)((IWeaponExtraDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum WeaponExtraData_FieldIndex
    {
        AnimationFireSeconds = 0,
        RumbleLeftMotorStrength = 1,
        RumbleRightMotorStrength = 2,
        RumbleDuration = 3,
        AnimationReloadSeconds = 4,
        BoltAnimSeconds = 5,
        SightedTransitionSeconds = 6,
        NumProjectiles = 7,
        ProjectileOverride = 8,
        Pattern = 9,
        RumblePeriodMs = 10,
    }
    #endregion

    #region Registration
    internal partial class WeaponExtraData_Registration : ILoquiRegistration
    {
        public static readonly WeaponExtraData_Registration Instance = new WeaponExtraData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 11;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(WeaponExtraData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(WeaponExtraData.ErrorMask);

        public static readonly Type ClassType = typeof(WeaponExtraData);

        public static readonly Type GetterType = typeof(IWeaponExtraDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWeaponExtraData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.WeaponExtraData";

        public const string Name = "WeaponExtraData";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.FNAM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.FNAM);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(WeaponExtraDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class WeaponExtraDataSetterCommon
    {
        public static readonly WeaponExtraDataSetterCommon Instance = new WeaponExtraDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IWeaponExtraData item)
        {
            ClearPartial();
            item.AnimationFireSeconds = default(Single);
            item.RumbleLeftMotorStrength = default(Single);
            item.RumbleRightMotorStrength = default(Single);
            item.RumbleDuration = default(Single);
            item.AnimationReloadSeconds = default(Single);
            item.BoltAnimSeconds = default(Single);
            item.SightedTransitionSeconds = default(Single);
            item.NumProjectiles = default(Byte);
            item.ProjectileOverride.Clear();
            item.Pattern = default(Weapon.PatternType);
            item.RumblePeriodMs = default(UInt32);
        }
        
        #region Mutagen
        public void RemapLinks(IWeaponExtraData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.ProjectileOverride.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IWeaponExtraData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.FNAM),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: WeaponExtraDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class WeaponExtraDataCommon
    {
        public static readonly WeaponExtraDataCommon Instance = new WeaponExtraDataCommon();

        public WeaponExtraData.Mask<bool> GetEqualsMask(
            IWeaponExtraDataGetter item,
            IWeaponExtraDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new WeaponExtraData.Mask<bool>(false);
            ((WeaponExtraDataCommon)((IWeaponExtraDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWeaponExtraDataGetter item,
            IWeaponExtraDataGetter rhs,
            WeaponExtraData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.AnimationFireSeconds = item.AnimationFireSeconds.EqualsWithin(rhs.AnimationFireSeconds);
            ret.RumbleLeftMotorStrength = item.RumbleLeftMotorStrength.EqualsWithin(rhs.RumbleLeftMotorStrength);
            ret.RumbleRightMotorStrength = item.RumbleRightMotorStrength.EqualsWithin(rhs.RumbleRightMotorStrength);
            ret.RumbleDuration = item.RumbleDuration.EqualsWithin(rhs.RumbleDuration);
            ret.AnimationReloadSeconds = item.AnimationReloadSeconds.EqualsWithin(rhs.AnimationReloadSeconds);
            ret.BoltAnimSeconds = item.BoltAnimSeconds.EqualsWithin(rhs.BoltAnimSeconds);
            ret.SightedTransitionSeconds = item.SightedTransitionSeconds.EqualsWithin(rhs.SightedTransitionSeconds);
            ret.NumProjectiles = item.NumProjectiles == rhs.NumProjectiles;
            ret.ProjectileOverride = item.ProjectileOverride.Equals(rhs.ProjectileOverride);
            ret.Pattern = item.Pattern == rhs.Pattern;
            ret.RumblePeriodMs = item.RumblePeriodMs == rhs.RumblePeriodMs;
        }
        
        public string Print(
            IWeaponExtraDataGetter item,
            string? name = null,
            WeaponExtraData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IWeaponExtraDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            WeaponExtraData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"WeaponExtraData =>");
            }
            else
            {
                sb.AppendLine($"{name} (WeaponExtraData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IWeaponExtraDataGetter item,
            StructuredStringBuilder sb,
            WeaponExtraData.Mask<bool>? printMask = null)
        {
            if (printMask?.AnimationFireSeconds ?? true)
            {
                sb.AppendItem(item.AnimationFireSeconds, "AnimationFireSeconds");
            }
            if (printMask?.RumbleLeftMotorStrength ?? true)
            {
                sb.AppendItem(item.RumbleLeftMotorStrength, "RumbleLeftMotorStrength");
            }
            if (printMask?.RumbleRightMotorStrength ?? true)
            {
                sb.AppendItem(item.RumbleRightMotorStrength, "RumbleRightMotorStrength");
            }
            if (printMask?.RumbleDuration ?? true)
            {
                sb.AppendItem(item.RumbleDuration, "RumbleDuration");
            }
            if (printMask?.AnimationReloadSeconds ?? true)
            {
                sb.AppendItem(item.AnimationReloadSeconds, "AnimationReloadSeconds");
            }
            if (printMask?.BoltAnimSeconds ?? true)
            {
                sb.AppendItem(item.BoltAnimSeconds, "BoltAnimSeconds");
            }
            if (printMask?.SightedTransitionSeconds ?? true)
            {
                sb.AppendItem(item.SightedTransitionSeconds, "SightedTransitionSeconds");
            }
            if (printMask?.NumProjectiles ?? true)
            {
                sb.AppendItem(item.NumProjectiles, "NumProjectiles");
            }
            if (printMask?.ProjectileOverride ?? true)
            {
                sb.AppendItem(item.ProjectileOverride.FormKey, "ProjectileOverride");
            }
            if (printMask?.Pattern ?? true)
            {
                sb.AppendItem(item.Pattern, "Pattern");
            }
            if (printMask?.RumblePeriodMs ?? true)
            {
                sb.AppendItem(item.RumblePeriodMs, "RumblePeriodMs");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWeaponExtraDataGetter? lhs,
            IWeaponExtraDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)WeaponExtraData_FieldIndex.AnimationFireSeconds) ?? true))
            {
                if (!lhs.AnimationFireSeconds.EqualsWithin(rhs.AnimationFireSeconds)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)WeaponExtraData_FieldIndex.RumbleLeftMotorStrength) ?? true))
            {
                if (!lhs.RumbleLeftMotorStrength.EqualsWithin(rhs.RumbleLeftMotorStrength)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)WeaponExtraData_FieldIndex.RumbleRightMotorStrength) ?? true))
            {
                if (!lhs.RumbleRightMotorStrength.EqualsWithin(rhs.RumbleRightMotorStrength)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)WeaponExtraData_FieldIndex.RumbleDuration) ?? true))
            {
                if (!lhs.RumbleDuration.EqualsWithin(rhs.RumbleDuration)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)WeaponExtraData_FieldIndex.AnimationReloadSeconds) ?? true))
            {
                if (!lhs.AnimationReloadSeconds.EqualsWithin(rhs.AnimationReloadSeconds)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)WeaponExtraData_FieldIndex.BoltAnimSeconds) ?? true))
            {
                if (!lhs.BoltAnimSeconds.EqualsWithin(rhs.BoltAnimSeconds)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)WeaponExtraData_FieldIndex.SightedTransitionSeconds) ?? true))
            {
                if (!lhs.SightedTransitionSeconds.EqualsWithin(rhs.SightedTransitionSeconds)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)WeaponExtraData_FieldIndex.NumProjectiles) ?? true))
            {
                if (lhs.NumProjectiles != rhs.NumProjectiles) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)WeaponExtraData_FieldIndex.ProjectileOverride) ?? true))
            {
                if (!lhs.ProjectileOverride.Equals(rhs.ProjectileOverride)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)WeaponExtraData_FieldIndex.Pattern) ?? true))
            {
                if (lhs.Pattern != rhs.Pattern) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)WeaponExtraData_FieldIndex.RumblePeriodMs) ?? true))
            {
                if (lhs.RumblePeriodMs != rhs.RumblePeriodMs) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IWeaponExtraDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.AnimationFireSeconds);
            hash.Add(item.RumbleLeftMotorStrength);
            hash.Add(item.RumbleRightMotorStrength);
            hash.Add(item.RumbleDuration);
            hash.Add(item.AnimationReloadSeconds);
            hash.Add(item.BoltAnimSeconds);
            hash.Add(item.SightedTransitionSeconds);
            hash.Add(item.NumProjectiles);
            hash.Add(item.ProjectileOverride);
            hash.Add(item.Pattern);
            hash.Add(item.RumblePeriodMs);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return WeaponExtraData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IWeaponExtraDataGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.ProjectileOverride);
            yield break;
        }
        
        #endregion
        
    }
    internal partial class WeaponExtraDataSetterTranslationCommon
    {
        public static readonly WeaponExtraDataSetterTranslationCommon Instance = new WeaponExtraDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IWeaponExtraData item,
            IWeaponExtraDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)WeaponExtraData_FieldIndex.AnimationFireSeconds) ?? true))
            {
                item.AnimationFireSeconds = rhs.AnimationFireSeconds;
            }
            if ((copyMask?.GetShouldTranslate((int)WeaponExtraData_FieldIndex.RumbleLeftMotorStrength) ?? true))
            {
                item.RumbleLeftMotorStrength = rhs.RumbleLeftMotorStrength;
            }
            if ((copyMask?.GetShouldTranslate((int)WeaponExtraData_FieldIndex.RumbleRightMotorStrength) ?? true))
            {
                item.RumbleRightMotorStrength = rhs.RumbleRightMotorStrength;
            }
            if ((copyMask?.GetShouldTranslate((int)WeaponExtraData_FieldIndex.RumbleDuration) ?? true))
            {
                item.RumbleDuration = rhs.RumbleDuration;
            }
            if ((copyMask?.GetShouldTranslate((int)WeaponExtraData_FieldIndex.AnimationReloadSeconds) ?? true))
            {
                item.AnimationReloadSeconds = rhs.AnimationReloadSeconds;
            }
            if ((copyMask?.GetShouldTranslate((int)WeaponExtraData_FieldIndex.BoltAnimSeconds) ?? true))
            {
                item.BoltAnimSeconds = rhs.BoltAnimSeconds;
            }
            if ((copyMask?.GetShouldTranslate((int)WeaponExtraData_FieldIndex.SightedTransitionSeconds) ?? true))
            {
                item.SightedTransitionSeconds = rhs.SightedTransitionSeconds;
            }
            if ((copyMask?.GetShouldTranslate((int)WeaponExtraData_FieldIndex.NumProjectiles) ?? true))
            {
                item.NumProjectiles = rhs.NumProjectiles;
            }
            if ((copyMask?.GetShouldTranslate((int)WeaponExtraData_FieldIndex.ProjectileOverride) ?? true))
            {
                item.ProjectileOverride.SetTo(rhs.ProjectileOverride.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)WeaponExtraData_FieldIndex.Pattern) ?? true))
            {
                item.Pattern = rhs.Pattern;
            }
            if ((copyMask?.GetShouldTranslate((int)WeaponExtraData_FieldIndex.RumblePeriodMs) ?? true))
            {
                item.RumblePeriodMs = rhs.RumblePeriodMs;
            }
        }
        
        #endregion
        
        public WeaponExtraData DeepCopy(
            IWeaponExtraDataGetter item,
            WeaponExtraData.TranslationMask? copyMask = null)
        {
            WeaponExtraData ret = (WeaponExtraData)((WeaponExtraDataCommon)((IWeaponExtraDataGetter)item).CommonInstance()!).GetNew();
            ((WeaponExtraDataSetterTranslationCommon)((IWeaponExtraDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public WeaponExtraData DeepCopy(
            IWeaponExtraDataGetter item,
            out WeaponExtraData.ErrorMask errorMask,
            WeaponExtraData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            WeaponExtraData ret = (WeaponExtraData)((WeaponExtraDataCommon)((IWeaponExtraDataGetter)item).CommonInstance()!).GetNew();
            ((WeaponExtraDataSetterTranslationCommon)((IWeaponExtraDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = WeaponExtraData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public WeaponExtraData DeepCopy(
            IWeaponExtraDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            WeaponExtraData ret = (WeaponExtraData)((WeaponExtraDataCommon)((IWeaponExtraDataGetter)item).CommonInstance()!).GetNew();
            ((WeaponExtraDataSetterTranslationCommon)((IWeaponExtraDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class WeaponExtraData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WeaponExtraData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => WeaponExtraData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => WeaponExtraDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return WeaponExtraDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => WeaponExtraDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IWeaponExtraDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IWeaponExtraDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IWeaponExtraDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class WeaponExtraDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly WeaponExtraDataBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IWeaponExtraDataGetter item,
            MutagenWriter writer)
        {
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AnimationFireSeconds);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.RumbleLeftMotorStrength);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.RumbleRightMotorStrength);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.RumbleDuration);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AnimationReloadSeconds);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BoltAnimSeconds);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SightedTransitionSeconds);
            writer.Write(item.NumProjectiles);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ProjectileOverride);
            EnumBinaryTranslation<Weapon.PatternType, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Pattern,
                length: 4);
            writer.Write(item.RumblePeriodMs);
        }

        public void Write(
            MutagenWriter writer,
            IWeaponExtraDataGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.FNAM),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IWeaponExtraDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class WeaponExtraDataBinaryCreateTranslation
    {
        public static readonly WeaponExtraDataBinaryCreateTranslation Instance = new WeaponExtraDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IWeaponExtraData item,
            MutagenFrame frame)
        {
            item.AnimationFireSeconds = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.RumbleLeftMotorStrength = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.RumbleRightMotorStrength = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.RumbleDuration = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.AnimationReloadSeconds = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.BoltAnimSeconds = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.SightedTransitionSeconds = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.NumProjectiles = frame.ReadUInt8();
            item.ProjectileOverride.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.Pattern = EnumBinaryTranslation<Weapon.PatternType, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
            item.RumblePeriodMs = frame.ReadUInt32();
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class WeaponExtraDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IWeaponExtraDataGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((WeaponExtraDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class WeaponExtraDataBinaryOverlay :
        PluginBinaryOverlay,
        IWeaponExtraDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WeaponExtraData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => WeaponExtraData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => WeaponExtraDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => WeaponExtraDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IWeaponExtraDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IWeaponExtraDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IWeaponExtraDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => WeaponExtraDataCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => WeaponExtraDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((WeaponExtraDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Single AnimationFireSeconds => _structData.Slice(0x0, 0x4).Float();
        public Single RumbleLeftMotorStrength => _structData.Slice(0x4, 0x4).Float();
        public Single RumbleRightMotorStrength => _structData.Slice(0x8, 0x4).Float();
        public Single RumbleDuration => _structData.Slice(0xC, 0x4).Float();
        public Single AnimationReloadSeconds => _structData.Slice(0x10, 0x4).Float();
        public Single BoltAnimSeconds => _structData.Slice(0x14, 0x4).Float();
        public Single SightedTransitionSeconds => _structData.Slice(0x18, 0x4).Float();
        public Byte NumProjectiles => _structData.Span[0x1C];
        public IFormLinkGetter<IProjectileGetter> ProjectileOverride => FormLinkBinaryTranslation.Instance.OverlayFactory<IProjectileGetter>(_package, _structData.Span.Slice(0x1D, 0x4));
        public Weapon.PatternType Pattern => (Weapon.PatternType)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0x21, 0x4));
        public UInt32 RumblePeriodMs => BinaryPrimitives.ReadUInt32LittleEndian(_structData.Slice(0x25, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected WeaponExtraDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IWeaponExtraDataGetter WeaponExtraDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x29,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new WeaponExtraDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x29 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IWeaponExtraDataGetter WeaponExtraDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return WeaponExtraDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            WeaponExtraDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IWeaponExtraDataGetter rhs) return false;
            return ((WeaponExtraDataCommon)((IWeaponExtraDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IWeaponExtraDataGetter? obj)
        {
            return ((WeaponExtraDataCommon)((IWeaponExtraDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((WeaponExtraDataCommon)((IWeaponExtraDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

