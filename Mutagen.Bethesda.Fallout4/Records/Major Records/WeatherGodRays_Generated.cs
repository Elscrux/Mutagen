/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class WeatherGodRays :
        IEquatable<IWeatherGodRaysGetter>,
        ILoquiObjectSetter<WeatherGodRays>,
        IWeatherGodRays
    {
        #region Ctor
        public WeatherGodRays()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region GodRaySunrise
        private readonly IFormLink<IGodRaysGetter> _GodRaySunrise = new FormLink<IGodRaysGetter>();
        public IFormLink<IGodRaysGetter> GodRaySunrise
        {
            get => _GodRaySunrise;
            set => _GodRaySunrise.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IGodRaysGetter> IWeatherGodRaysGetter.GodRaySunrise => this.GodRaySunrise;
        #endregion
        #region GodRayDay
        private readonly IFormLink<IGodRaysGetter> _GodRayDay = new FormLink<IGodRaysGetter>();
        public IFormLink<IGodRaysGetter> GodRayDay
        {
            get => _GodRayDay;
            set => _GodRayDay.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IGodRaysGetter> IWeatherGodRaysGetter.GodRayDay => this.GodRayDay;
        #endregion
        #region GodRaySunset
        private readonly IFormLink<IGodRaysGetter> _GodRaySunset = new FormLink<IGodRaysGetter>();
        public IFormLink<IGodRaysGetter> GodRaySunset
        {
            get => _GodRaySunset;
            set => _GodRaySunset.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IGodRaysGetter> IWeatherGodRaysGetter.GodRaySunset => this.GodRaySunset;
        #endregion
        #region GodRayNight
        private readonly IFormLink<IGodRaysGetter> _GodRayNight = new FormLink<IGodRaysGetter>();
        public IFormLink<IGodRaysGetter> GodRayNight
        {
            get => _GodRayNight;
            set => _GodRayNight.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IGodRaysGetter> IWeatherGodRaysGetter.GodRayNight => this.GodRayNight;
        #endregion
        #region GodRayEarlySunrise
        private readonly IFormLink<IGodRaysGetter> _GodRayEarlySunrise = new FormLink<IGodRaysGetter>();
        public IFormLink<IGodRaysGetter> GodRayEarlySunrise
        {
            get => _GodRayEarlySunrise;
            set => _GodRayEarlySunrise.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IGodRaysGetter> IWeatherGodRaysGetter.GodRayEarlySunrise => this.GodRayEarlySunrise;
        #endregion
        #region GodRayLateSunrise
        private readonly IFormLink<IGodRaysGetter> _GodRayLateSunrise = new FormLink<IGodRaysGetter>();
        public IFormLink<IGodRaysGetter> GodRayLateSunrise
        {
            get => _GodRayLateSunrise;
            set => _GodRayLateSunrise.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IGodRaysGetter> IWeatherGodRaysGetter.GodRayLateSunrise => this.GodRayLateSunrise;
        #endregion
        #region GodRayEarlySunset
        private readonly IFormLink<IGodRaysGetter> _GodRayEarlySunset = new FormLink<IGodRaysGetter>();
        public IFormLink<IGodRaysGetter> GodRayEarlySunset
        {
            get => _GodRayEarlySunset;
            set => _GodRayEarlySunset.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IGodRaysGetter> IWeatherGodRaysGetter.GodRayEarlySunset => this.GodRayEarlySunset;
        #endregion
        #region GodRayLateSunset
        private readonly IFormLink<IGodRaysGetter> _GodRayLateSunset = new FormLink<IGodRaysGetter>();
        public IFormLink<IGodRaysGetter> GodRayLateSunset
        {
            get => _GodRayLateSunset;
            set => _GodRayLateSunset.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IGodRaysGetter> IWeatherGodRaysGetter.GodRayLateSunset => this.GodRayLateSunset;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            WeatherGodRaysMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IWeatherGodRaysGetter rhs) return false;
            return ((WeatherGodRaysCommon)((IWeatherGodRaysGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IWeatherGodRaysGetter? obj)
        {
            return ((WeatherGodRaysCommon)((IWeatherGodRaysGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((WeatherGodRaysCommon)((IWeatherGodRaysGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.GodRaySunrise = initialValue;
                this.GodRayDay = initialValue;
                this.GodRaySunset = initialValue;
                this.GodRayNight = initialValue;
                this.GodRayEarlySunrise = initialValue;
                this.GodRayLateSunrise = initialValue;
                this.GodRayEarlySunset = initialValue;
                this.GodRayLateSunset = initialValue;
            }

            public Mask(
                TItem GodRaySunrise,
                TItem GodRayDay,
                TItem GodRaySunset,
                TItem GodRayNight,
                TItem GodRayEarlySunrise,
                TItem GodRayLateSunrise,
                TItem GodRayEarlySunset,
                TItem GodRayLateSunset)
            {
                this.GodRaySunrise = GodRaySunrise;
                this.GodRayDay = GodRayDay;
                this.GodRaySunset = GodRaySunset;
                this.GodRayNight = GodRayNight;
                this.GodRayEarlySunrise = GodRayEarlySunrise;
                this.GodRayLateSunrise = GodRayLateSunrise;
                this.GodRayEarlySunset = GodRayEarlySunset;
                this.GodRayLateSunset = GodRayLateSunset;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem GodRaySunrise;
            public TItem GodRayDay;
            public TItem GodRaySunset;
            public TItem GodRayNight;
            public TItem GodRayEarlySunrise;
            public TItem GodRayLateSunrise;
            public TItem GodRayEarlySunset;
            public TItem GodRayLateSunset;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.GodRaySunrise, rhs.GodRaySunrise)) return false;
                if (!object.Equals(this.GodRayDay, rhs.GodRayDay)) return false;
                if (!object.Equals(this.GodRaySunset, rhs.GodRaySunset)) return false;
                if (!object.Equals(this.GodRayNight, rhs.GodRayNight)) return false;
                if (!object.Equals(this.GodRayEarlySunrise, rhs.GodRayEarlySunrise)) return false;
                if (!object.Equals(this.GodRayLateSunrise, rhs.GodRayLateSunrise)) return false;
                if (!object.Equals(this.GodRayEarlySunset, rhs.GodRayEarlySunset)) return false;
                if (!object.Equals(this.GodRayLateSunset, rhs.GodRayLateSunset)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.GodRaySunrise);
                hash.Add(this.GodRayDay);
                hash.Add(this.GodRaySunset);
                hash.Add(this.GodRayNight);
                hash.Add(this.GodRayEarlySunrise);
                hash.Add(this.GodRayLateSunrise);
                hash.Add(this.GodRayEarlySunset);
                hash.Add(this.GodRayLateSunset);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.GodRaySunrise)) return false;
                if (!eval(this.GodRayDay)) return false;
                if (!eval(this.GodRaySunset)) return false;
                if (!eval(this.GodRayNight)) return false;
                if (!eval(this.GodRayEarlySunrise)) return false;
                if (!eval(this.GodRayLateSunrise)) return false;
                if (!eval(this.GodRayEarlySunset)) return false;
                if (!eval(this.GodRayLateSunset)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.GodRaySunrise)) return true;
                if (eval(this.GodRayDay)) return true;
                if (eval(this.GodRaySunset)) return true;
                if (eval(this.GodRayNight)) return true;
                if (eval(this.GodRayEarlySunrise)) return true;
                if (eval(this.GodRayLateSunrise)) return true;
                if (eval(this.GodRayEarlySunset)) return true;
                if (eval(this.GodRayLateSunset)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new WeatherGodRays.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.GodRaySunrise = eval(this.GodRaySunrise);
                obj.GodRayDay = eval(this.GodRayDay);
                obj.GodRaySunset = eval(this.GodRaySunset);
                obj.GodRayNight = eval(this.GodRayNight);
                obj.GodRayEarlySunrise = eval(this.GodRayEarlySunrise);
                obj.GodRayLateSunrise = eval(this.GodRayLateSunrise);
                obj.GodRayEarlySunset = eval(this.GodRayEarlySunset);
                obj.GodRayLateSunset = eval(this.GodRayLateSunset);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(WeatherGodRays.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, WeatherGodRays.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(WeatherGodRays.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.GodRaySunrise ?? true)
                    {
                        sb.AppendItem(GodRaySunrise, "GodRaySunrise");
                    }
                    if (printMask?.GodRayDay ?? true)
                    {
                        sb.AppendItem(GodRayDay, "GodRayDay");
                    }
                    if (printMask?.GodRaySunset ?? true)
                    {
                        sb.AppendItem(GodRaySunset, "GodRaySunset");
                    }
                    if (printMask?.GodRayNight ?? true)
                    {
                        sb.AppendItem(GodRayNight, "GodRayNight");
                    }
                    if (printMask?.GodRayEarlySunrise ?? true)
                    {
                        sb.AppendItem(GodRayEarlySunrise, "GodRayEarlySunrise");
                    }
                    if (printMask?.GodRayLateSunrise ?? true)
                    {
                        sb.AppendItem(GodRayLateSunrise, "GodRayLateSunrise");
                    }
                    if (printMask?.GodRayEarlySunset ?? true)
                    {
                        sb.AppendItem(GodRayEarlySunset, "GodRayEarlySunset");
                    }
                    if (printMask?.GodRayLateSunset ?? true)
                    {
                        sb.AppendItem(GodRayLateSunset, "GodRayLateSunset");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? GodRaySunrise;
            public Exception? GodRayDay;
            public Exception? GodRaySunset;
            public Exception? GodRayNight;
            public Exception? GodRayEarlySunrise;
            public Exception? GodRayLateSunrise;
            public Exception? GodRayEarlySunset;
            public Exception? GodRayLateSunset;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                WeatherGodRays_FieldIndex enu = (WeatherGodRays_FieldIndex)index;
                switch (enu)
                {
                    case WeatherGodRays_FieldIndex.GodRaySunrise:
                        return GodRaySunrise;
                    case WeatherGodRays_FieldIndex.GodRayDay:
                        return GodRayDay;
                    case WeatherGodRays_FieldIndex.GodRaySunset:
                        return GodRaySunset;
                    case WeatherGodRays_FieldIndex.GodRayNight:
                        return GodRayNight;
                    case WeatherGodRays_FieldIndex.GodRayEarlySunrise:
                        return GodRayEarlySunrise;
                    case WeatherGodRays_FieldIndex.GodRayLateSunrise:
                        return GodRayLateSunrise;
                    case WeatherGodRays_FieldIndex.GodRayEarlySunset:
                        return GodRayEarlySunset;
                    case WeatherGodRays_FieldIndex.GodRayLateSunset:
                        return GodRayLateSunset;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                WeatherGodRays_FieldIndex enu = (WeatherGodRays_FieldIndex)index;
                switch (enu)
                {
                    case WeatherGodRays_FieldIndex.GodRaySunrise:
                        this.GodRaySunrise = ex;
                        break;
                    case WeatherGodRays_FieldIndex.GodRayDay:
                        this.GodRayDay = ex;
                        break;
                    case WeatherGodRays_FieldIndex.GodRaySunset:
                        this.GodRaySunset = ex;
                        break;
                    case WeatherGodRays_FieldIndex.GodRayNight:
                        this.GodRayNight = ex;
                        break;
                    case WeatherGodRays_FieldIndex.GodRayEarlySunrise:
                        this.GodRayEarlySunrise = ex;
                        break;
                    case WeatherGodRays_FieldIndex.GodRayLateSunrise:
                        this.GodRayLateSunrise = ex;
                        break;
                    case WeatherGodRays_FieldIndex.GodRayEarlySunset:
                        this.GodRayEarlySunset = ex;
                        break;
                    case WeatherGodRays_FieldIndex.GodRayLateSunset:
                        this.GodRayLateSunset = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                WeatherGodRays_FieldIndex enu = (WeatherGodRays_FieldIndex)index;
                switch (enu)
                {
                    case WeatherGodRays_FieldIndex.GodRaySunrise:
                        this.GodRaySunrise = (Exception?)obj;
                        break;
                    case WeatherGodRays_FieldIndex.GodRayDay:
                        this.GodRayDay = (Exception?)obj;
                        break;
                    case WeatherGodRays_FieldIndex.GodRaySunset:
                        this.GodRaySunset = (Exception?)obj;
                        break;
                    case WeatherGodRays_FieldIndex.GodRayNight:
                        this.GodRayNight = (Exception?)obj;
                        break;
                    case WeatherGodRays_FieldIndex.GodRayEarlySunrise:
                        this.GodRayEarlySunrise = (Exception?)obj;
                        break;
                    case WeatherGodRays_FieldIndex.GodRayLateSunrise:
                        this.GodRayLateSunrise = (Exception?)obj;
                        break;
                    case WeatherGodRays_FieldIndex.GodRayEarlySunset:
                        this.GodRayEarlySunset = (Exception?)obj;
                        break;
                    case WeatherGodRays_FieldIndex.GodRayLateSunset:
                        this.GodRayLateSunset = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (GodRaySunrise != null) return true;
                if (GodRayDay != null) return true;
                if (GodRaySunset != null) return true;
                if (GodRayNight != null) return true;
                if (GodRayEarlySunrise != null) return true;
                if (GodRayLateSunrise != null) return true;
                if (GodRayEarlySunset != null) return true;
                if (GodRayLateSunset != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(GodRaySunrise, "GodRaySunrise");
                }
                {
                    sb.AppendItem(GodRayDay, "GodRayDay");
                }
                {
                    sb.AppendItem(GodRaySunset, "GodRaySunset");
                }
                {
                    sb.AppendItem(GodRayNight, "GodRayNight");
                }
                {
                    sb.AppendItem(GodRayEarlySunrise, "GodRayEarlySunrise");
                }
                {
                    sb.AppendItem(GodRayLateSunrise, "GodRayLateSunrise");
                }
                {
                    sb.AppendItem(GodRayEarlySunset, "GodRayEarlySunset");
                }
                {
                    sb.AppendItem(GodRayLateSunset, "GodRayLateSunset");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.GodRaySunrise = this.GodRaySunrise.Combine(rhs.GodRaySunrise);
                ret.GodRayDay = this.GodRayDay.Combine(rhs.GodRayDay);
                ret.GodRaySunset = this.GodRaySunset.Combine(rhs.GodRaySunset);
                ret.GodRayNight = this.GodRayNight.Combine(rhs.GodRayNight);
                ret.GodRayEarlySunrise = this.GodRayEarlySunrise.Combine(rhs.GodRayEarlySunrise);
                ret.GodRayLateSunrise = this.GodRayLateSunrise.Combine(rhs.GodRayLateSunrise);
                ret.GodRayEarlySunset = this.GodRayEarlySunset.Combine(rhs.GodRayEarlySunset);
                ret.GodRayLateSunset = this.GodRayLateSunset.Combine(rhs.GodRayLateSunset);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool GodRaySunrise;
            public bool GodRayDay;
            public bool GodRaySunset;
            public bool GodRayNight;
            public bool GodRayEarlySunrise;
            public bool GodRayLateSunrise;
            public bool GodRayEarlySunset;
            public bool GodRayLateSunset;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.GodRaySunrise = defaultOn;
                this.GodRayDay = defaultOn;
                this.GodRaySunset = defaultOn;
                this.GodRayNight = defaultOn;
                this.GodRayEarlySunrise = defaultOn;
                this.GodRayLateSunrise = defaultOn;
                this.GodRayEarlySunset = defaultOn;
                this.GodRayLateSunset = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((GodRaySunrise, null));
                ret.Add((GodRayDay, null));
                ret.Add((GodRaySunset, null));
                ret.Add((GodRayNight, null));
                ret.Add((GodRayEarlySunrise, null));
                ret.Add((GodRayLateSunrise, null));
                ret.Add((GodRayEarlySunset, null));
                ret.Add((GodRayLateSunset, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => WeatherGodRaysCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WeatherGodRaysSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => WeatherGodRaysBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((WeatherGodRaysBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static WeatherGodRays CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new WeatherGodRays();
            ((WeatherGodRaysSetterCommon)((IWeatherGodRaysGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out WeatherGodRays item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((WeatherGodRaysSetterCommon)((IWeatherGodRaysGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static WeatherGodRays GetNew()
        {
            return new WeatherGodRays();
        }

    }
    #endregion

    #region Interface
    public partial interface IWeatherGodRays :
        IFormLinkContainer,
        ILoquiObjectSetter<IWeatherGodRays>,
        IWeatherGodRaysGetter
    {
        new IFormLink<IGodRaysGetter> GodRaySunrise { get; set; }
        new IFormLink<IGodRaysGetter> GodRayDay { get; set; }
        new IFormLink<IGodRaysGetter> GodRaySunset { get; set; }
        new IFormLink<IGodRaysGetter> GodRayNight { get; set; }
        new IFormLink<IGodRaysGetter> GodRayEarlySunrise { get; set; }
        new IFormLink<IGodRaysGetter> GodRayLateSunrise { get; set; }
        new IFormLink<IGodRaysGetter> GodRayEarlySunset { get; set; }
        new IFormLink<IGodRaysGetter> GodRayLateSunset { get; set; }
    }

    public partial interface IWeatherGodRaysGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IWeatherGodRaysGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => WeatherGodRays_Registration.Instance;
        IFormLinkGetter<IGodRaysGetter> GodRaySunrise { get; }
        IFormLinkGetter<IGodRaysGetter> GodRayDay { get; }
        IFormLinkGetter<IGodRaysGetter> GodRaySunset { get; }
        IFormLinkGetter<IGodRaysGetter> GodRayNight { get; }
        IFormLinkGetter<IGodRaysGetter> GodRayEarlySunrise { get; }
        IFormLinkGetter<IGodRaysGetter> GodRayLateSunrise { get; }
        IFormLinkGetter<IGodRaysGetter> GodRayEarlySunset { get; }
        IFormLinkGetter<IGodRaysGetter> GodRayLateSunset { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class WeatherGodRaysMixIn
    {
        public static void Clear(this IWeatherGodRays item)
        {
            ((WeatherGodRaysSetterCommon)((IWeatherGodRaysGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static WeatherGodRays.Mask<bool> GetEqualsMask(
            this IWeatherGodRaysGetter item,
            IWeatherGodRaysGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WeatherGodRaysCommon)((IWeatherGodRaysGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IWeatherGodRaysGetter item,
            string? name = null,
            WeatherGodRays.Mask<bool>? printMask = null)
        {
            return ((WeatherGodRaysCommon)((IWeatherGodRaysGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IWeatherGodRaysGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            WeatherGodRays.Mask<bool>? printMask = null)
        {
            ((WeatherGodRaysCommon)((IWeatherGodRaysGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IWeatherGodRaysGetter item,
            IWeatherGodRaysGetter rhs,
            WeatherGodRays.TranslationMask? equalsMask = null)
        {
            return ((WeatherGodRaysCommon)((IWeatherGodRaysGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IWeatherGodRays lhs,
            IWeatherGodRaysGetter rhs)
        {
            ((WeatherGodRaysSetterTranslationCommon)((IWeatherGodRaysGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IWeatherGodRays lhs,
            IWeatherGodRaysGetter rhs,
            WeatherGodRays.TranslationMask? copyMask = null)
        {
            ((WeatherGodRaysSetterTranslationCommon)((IWeatherGodRaysGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IWeatherGodRays lhs,
            IWeatherGodRaysGetter rhs,
            out WeatherGodRays.ErrorMask errorMask,
            WeatherGodRays.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((WeatherGodRaysSetterTranslationCommon)((IWeatherGodRaysGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = WeatherGodRays.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IWeatherGodRays lhs,
            IWeatherGodRaysGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((WeatherGodRaysSetterTranslationCommon)((IWeatherGodRaysGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static WeatherGodRays DeepCopy(
            this IWeatherGodRaysGetter item,
            WeatherGodRays.TranslationMask? copyMask = null)
        {
            return ((WeatherGodRaysSetterTranslationCommon)((IWeatherGodRaysGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static WeatherGodRays DeepCopy(
            this IWeatherGodRaysGetter item,
            out WeatherGodRays.ErrorMask errorMask,
            WeatherGodRays.TranslationMask? copyMask = null)
        {
            return ((WeatherGodRaysSetterTranslationCommon)((IWeatherGodRaysGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static WeatherGodRays DeepCopy(
            this IWeatherGodRaysGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((WeatherGodRaysSetterTranslationCommon)((IWeatherGodRaysGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IWeatherGodRays item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((WeatherGodRaysSetterCommon)((IWeatherGodRaysGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum WeatherGodRays_FieldIndex
    {
        GodRaySunrise = 0,
        GodRayDay = 1,
        GodRaySunset = 2,
        GodRayNight = 3,
        GodRayEarlySunrise = 4,
        GodRayLateSunrise = 5,
        GodRayEarlySunset = 6,
        GodRayLateSunset = 7,
    }
    #endregion

    #region Registration
    internal partial class WeatherGodRays_Registration : ILoquiRegistration
    {
        public static readonly WeatherGodRays_Registration Instance = new WeatherGodRays_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(WeatherGodRays.Mask<>);

        public static readonly Type ErrorMaskType = typeof(WeatherGodRays.ErrorMask);

        public static readonly Type ClassType = typeof(WeatherGodRays);

        public static readonly Type GetterType = typeof(IWeatherGodRaysGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWeatherGodRays);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.WeatherGodRays";

        public const string Name = "WeatherGodRays";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.WGDR;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.WGDR);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(WeatherGodRaysBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class WeatherGodRaysSetterCommon
    {
        public static readonly WeatherGodRaysSetterCommon Instance = new WeatherGodRaysSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IWeatherGodRays item)
        {
            ClearPartial();
            item.GodRaySunrise.Clear();
            item.GodRayDay.Clear();
            item.GodRaySunset.Clear();
            item.GodRayNight.Clear();
            item.GodRayEarlySunrise.Clear();
            item.GodRayLateSunrise.Clear();
            item.GodRayEarlySunset.Clear();
            item.GodRayLateSunset.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IWeatherGodRays obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.GodRaySunrise.Relink(mapping);
            obj.GodRayDay.Relink(mapping);
            obj.GodRaySunset.Relink(mapping);
            obj.GodRayNight.Relink(mapping);
            obj.GodRayEarlySunrise.Relink(mapping);
            obj.GodRayLateSunrise.Relink(mapping);
            obj.GodRayEarlySunset.Relink(mapping);
            obj.GodRayLateSunset.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IWeatherGodRays item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.WGDR),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: WeatherGodRaysBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class WeatherGodRaysCommon
    {
        public static readonly WeatherGodRaysCommon Instance = new WeatherGodRaysCommon();

        public WeatherGodRays.Mask<bool> GetEqualsMask(
            IWeatherGodRaysGetter item,
            IWeatherGodRaysGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new WeatherGodRays.Mask<bool>(false);
            ((WeatherGodRaysCommon)((IWeatherGodRaysGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWeatherGodRaysGetter item,
            IWeatherGodRaysGetter rhs,
            WeatherGodRays.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.GodRaySunrise = item.GodRaySunrise.Equals(rhs.GodRaySunrise);
            ret.GodRayDay = item.GodRayDay.Equals(rhs.GodRayDay);
            ret.GodRaySunset = item.GodRaySunset.Equals(rhs.GodRaySunset);
            ret.GodRayNight = item.GodRayNight.Equals(rhs.GodRayNight);
            ret.GodRayEarlySunrise = item.GodRayEarlySunrise.Equals(rhs.GodRayEarlySunrise);
            ret.GodRayLateSunrise = item.GodRayLateSunrise.Equals(rhs.GodRayLateSunrise);
            ret.GodRayEarlySunset = item.GodRayEarlySunset.Equals(rhs.GodRayEarlySunset);
            ret.GodRayLateSunset = item.GodRayLateSunset.Equals(rhs.GodRayLateSunset);
        }
        
        public string Print(
            IWeatherGodRaysGetter item,
            string? name = null,
            WeatherGodRays.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IWeatherGodRaysGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            WeatherGodRays.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"WeatherGodRays =>");
            }
            else
            {
                sb.AppendLine($"{name} (WeatherGodRays) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IWeatherGodRaysGetter item,
            StructuredStringBuilder sb,
            WeatherGodRays.Mask<bool>? printMask = null)
        {
            if (printMask?.GodRaySunrise ?? true)
            {
                sb.AppendItem(item.GodRaySunrise.FormKey, "GodRaySunrise");
            }
            if (printMask?.GodRayDay ?? true)
            {
                sb.AppendItem(item.GodRayDay.FormKey, "GodRayDay");
            }
            if (printMask?.GodRaySunset ?? true)
            {
                sb.AppendItem(item.GodRaySunset.FormKey, "GodRaySunset");
            }
            if (printMask?.GodRayNight ?? true)
            {
                sb.AppendItem(item.GodRayNight.FormKey, "GodRayNight");
            }
            if (printMask?.GodRayEarlySunrise ?? true)
            {
                sb.AppendItem(item.GodRayEarlySunrise.FormKey, "GodRayEarlySunrise");
            }
            if (printMask?.GodRayLateSunrise ?? true)
            {
                sb.AppendItem(item.GodRayLateSunrise.FormKey, "GodRayLateSunrise");
            }
            if (printMask?.GodRayEarlySunset ?? true)
            {
                sb.AppendItem(item.GodRayEarlySunset.FormKey, "GodRayEarlySunset");
            }
            if (printMask?.GodRayLateSunset ?? true)
            {
                sb.AppendItem(item.GodRayLateSunset.FormKey, "GodRayLateSunset");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWeatherGodRaysGetter? lhs,
            IWeatherGodRaysGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)WeatherGodRays_FieldIndex.GodRaySunrise) ?? true))
            {
                if (!lhs.GodRaySunrise.Equals(rhs.GodRaySunrise)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)WeatherGodRays_FieldIndex.GodRayDay) ?? true))
            {
                if (!lhs.GodRayDay.Equals(rhs.GodRayDay)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)WeatherGodRays_FieldIndex.GodRaySunset) ?? true))
            {
                if (!lhs.GodRaySunset.Equals(rhs.GodRaySunset)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)WeatherGodRays_FieldIndex.GodRayNight) ?? true))
            {
                if (!lhs.GodRayNight.Equals(rhs.GodRayNight)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)WeatherGodRays_FieldIndex.GodRayEarlySunrise) ?? true))
            {
                if (!lhs.GodRayEarlySunrise.Equals(rhs.GodRayEarlySunrise)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)WeatherGodRays_FieldIndex.GodRayLateSunrise) ?? true))
            {
                if (!lhs.GodRayLateSunrise.Equals(rhs.GodRayLateSunrise)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)WeatherGodRays_FieldIndex.GodRayEarlySunset) ?? true))
            {
                if (!lhs.GodRayEarlySunset.Equals(rhs.GodRayEarlySunset)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)WeatherGodRays_FieldIndex.GodRayLateSunset) ?? true))
            {
                if (!lhs.GodRayLateSunset.Equals(rhs.GodRayLateSunset)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IWeatherGodRaysGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.GodRaySunrise);
            hash.Add(item.GodRayDay);
            hash.Add(item.GodRaySunset);
            hash.Add(item.GodRayNight);
            hash.Add(item.GodRayEarlySunrise);
            hash.Add(item.GodRayLateSunrise);
            hash.Add(item.GodRayEarlySunset);
            hash.Add(item.GodRayLateSunset);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return WeatherGodRays.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IWeatherGodRaysGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.GodRaySunrise);
            yield return FormLinkInformation.Factory(obj.GodRayDay);
            yield return FormLinkInformation.Factory(obj.GodRaySunset);
            yield return FormLinkInformation.Factory(obj.GodRayNight);
            yield return FormLinkInformation.Factory(obj.GodRayEarlySunrise);
            yield return FormLinkInformation.Factory(obj.GodRayLateSunrise);
            yield return FormLinkInformation.Factory(obj.GodRayEarlySunset);
            yield return FormLinkInformation.Factory(obj.GodRayLateSunset);
            yield break;
        }
        
        #endregion
        
    }
    internal partial class WeatherGodRaysSetterTranslationCommon
    {
        public static readonly WeatherGodRaysSetterTranslationCommon Instance = new WeatherGodRaysSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IWeatherGodRays item,
            IWeatherGodRaysGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)WeatherGodRays_FieldIndex.GodRaySunrise) ?? true))
            {
                item.GodRaySunrise.SetTo(rhs.GodRaySunrise.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)WeatherGodRays_FieldIndex.GodRayDay) ?? true))
            {
                item.GodRayDay.SetTo(rhs.GodRayDay.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)WeatherGodRays_FieldIndex.GodRaySunset) ?? true))
            {
                item.GodRaySunset.SetTo(rhs.GodRaySunset.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)WeatherGodRays_FieldIndex.GodRayNight) ?? true))
            {
                item.GodRayNight.SetTo(rhs.GodRayNight.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)WeatherGodRays_FieldIndex.GodRayEarlySunrise) ?? true))
            {
                item.GodRayEarlySunrise.SetTo(rhs.GodRayEarlySunrise.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)WeatherGodRays_FieldIndex.GodRayLateSunrise) ?? true))
            {
                item.GodRayLateSunrise.SetTo(rhs.GodRayLateSunrise.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)WeatherGodRays_FieldIndex.GodRayEarlySunset) ?? true))
            {
                item.GodRayEarlySunset.SetTo(rhs.GodRayEarlySunset.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)WeatherGodRays_FieldIndex.GodRayLateSunset) ?? true))
            {
                item.GodRayLateSunset.SetTo(rhs.GodRayLateSunset.FormKey);
            }
        }
        
        #endregion
        
        public WeatherGodRays DeepCopy(
            IWeatherGodRaysGetter item,
            WeatherGodRays.TranslationMask? copyMask = null)
        {
            WeatherGodRays ret = (WeatherGodRays)((WeatherGodRaysCommon)((IWeatherGodRaysGetter)item).CommonInstance()!).GetNew();
            ((WeatherGodRaysSetterTranslationCommon)((IWeatherGodRaysGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public WeatherGodRays DeepCopy(
            IWeatherGodRaysGetter item,
            out WeatherGodRays.ErrorMask errorMask,
            WeatherGodRays.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            WeatherGodRays ret = (WeatherGodRays)((WeatherGodRaysCommon)((IWeatherGodRaysGetter)item).CommonInstance()!).GetNew();
            ((WeatherGodRaysSetterTranslationCommon)((IWeatherGodRaysGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = WeatherGodRays.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public WeatherGodRays DeepCopy(
            IWeatherGodRaysGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            WeatherGodRays ret = (WeatherGodRays)((WeatherGodRaysCommon)((IWeatherGodRaysGetter)item).CommonInstance()!).GetNew();
            ((WeatherGodRaysSetterTranslationCommon)((IWeatherGodRaysGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class WeatherGodRays
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WeatherGodRays_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => WeatherGodRays_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => WeatherGodRaysCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return WeatherGodRaysSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => WeatherGodRaysSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IWeatherGodRaysGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IWeatherGodRaysGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IWeatherGodRaysGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class WeatherGodRaysBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly WeatherGodRaysBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IWeatherGodRaysGetter item,
            MutagenWriter writer)
        {
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.GodRaySunrise);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.GodRayDay);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.GodRaySunset);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.GodRayNight);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.GodRayEarlySunrise);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.GodRayLateSunrise);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.GodRayEarlySunset);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.GodRayLateSunset);
        }

        public void Write(
            MutagenWriter writer,
            IWeatherGodRaysGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.WGDR),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IWeatherGodRaysGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class WeatherGodRaysBinaryCreateTranslation
    {
        public static readonly WeatherGodRaysBinaryCreateTranslation Instance = new WeatherGodRaysBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IWeatherGodRays item,
            MutagenFrame frame)
        {
            item.GodRaySunrise.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.GodRayDay.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.GodRaySunset.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.GodRayNight.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.GodRayEarlySunrise.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.GodRayLateSunrise.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.GodRayEarlySunset.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.GodRayLateSunset.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class WeatherGodRaysBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IWeatherGodRaysGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((WeatherGodRaysBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class WeatherGodRaysBinaryOverlay :
        PluginBinaryOverlay,
        IWeatherGodRaysGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WeatherGodRays_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => WeatherGodRays_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => WeatherGodRaysCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => WeatherGodRaysSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IWeatherGodRaysGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IWeatherGodRaysGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IWeatherGodRaysGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => WeatherGodRaysCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => WeatherGodRaysBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((WeatherGodRaysBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public IFormLinkGetter<IGodRaysGetter> GodRaySunrise => new FormLink<IGodRaysGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_structData.Span.Slice(0x0, 0x4))));
        public IFormLinkGetter<IGodRaysGetter> GodRayDay => new FormLink<IGodRaysGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_structData.Span.Slice(0x4, 0x4))));
        public IFormLinkGetter<IGodRaysGetter> GodRaySunset => new FormLink<IGodRaysGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_structData.Span.Slice(0x8, 0x4))));
        public IFormLinkGetter<IGodRaysGetter> GodRayNight => new FormLink<IGodRaysGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_structData.Span.Slice(0xC, 0x4))));
        public IFormLinkGetter<IGodRaysGetter> GodRayEarlySunrise => new FormLink<IGodRaysGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_structData.Span.Slice(0x10, 0x4))));
        public IFormLinkGetter<IGodRaysGetter> GodRayLateSunrise => new FormLink<IGodRaysGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_structData.Span.Slice(0x14, 0x4))));
        public IFormLinkGetter<IGodRaysGetter> GodRayEarlySunset => new FormLink<IGodRaysGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_structData.Span.Slice(0x18, 0x4))));
        public IFormLinkGetter<IGodRaysGetter> GodRayLateSunset => new FormLink<IGodRaysGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_structData.Span.Slice(0x1C, 0x4))));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected WeatherGodRaysBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IWeatherGodRaysGetter WeatherGodRaysFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x20,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new WeatherGodRaysBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x20 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IWeatherGodRaysGetter WeatherGodRaysFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return WeatherGodRaysFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            WeatherGodRaysMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IWeatherGodRaysGetter rhs) return false;
            return ((WeatherGodRaysCommon)((IWeatherGodRaysGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IWeatherGodRaysGetter? obj)
        {
            return ((WeatherGodRaysCommon)((IWeatherGodRaysGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((WeatherGodRaysCommon)((IWeatherGodRaysGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

