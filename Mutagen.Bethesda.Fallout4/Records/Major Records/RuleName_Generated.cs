/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class RuleName :
        IEquatable<IRuleNameGetter>,
        ILoquiObjectSetter<RuleName>,
        IRuleName
    {
        #region Ctor
        public RuleName()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Text
        public TranslatedString? Text { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IRuleNameGetter.Text => this.Text;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IRuleNameGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region Value
        public Single Value { get; set; } = default;
        #endregion
        #region PropertyEnum
        public InstanceNamingRule.PropertyEnum PropertyEnum { get; set; } = default;
        #endregion
        #region OpEnum
        public InstanceNamingRule.OpEnum OpEnum { get; set; } = default;
        #endregion
        #region Index
        public UInt16? Index { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt16? IRuleNameGetter.Index => this.Index;
        #endregion
        #region XNAMDataTypeState
        public RuleName.XNAMDataType XNAMDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RuleNameMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IRuleNameGetter rhs) return false;
            return ((RuleNameCommon)((IRuleNameGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IRuleNameGetter? obj)
        {
            return ((RuleNameCommon)((IRuleNameGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((RuleNameCommon)((IRuleNameGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Text = initialValue;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Value = initialValue;
                this.PropertyEnum = initialValue;
                this.OpEnum = initialValue;
                this.Index = initialValue;
                this.XNAMDataTypeState = initialValue;
            }

            public Mask(
                TItem Text,
                TItem Keywords,
                TItem Value,
                TItem PropertyEnum,
                TItem OpEnum,
                TItem Index,
                TItem XNAMDataTypeState)
            {
                this.Text = Text;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Value = Value;
                this.PropertyEnum = PropertyEnum;
                this.OpEnum = OpEnum;
                this.Index = Index;
                this.XNAMDataTypeState = XNAMDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Text;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public TItem Value;
            public TItem PropertyEnum;
            public TItem OpEnum;
            public TItem Index;
            public TItem XNAMDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Text, rhs.Text)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Value, rhs.Value)) return false;
                if (!object.Equals(this.PropertyEnum, rhs.PropertyEnum)) return false;
                if (!object.Equals(this.OpEnum, rhs.OpEnum)) return false;
                if (!object.Equals(this.Index, rhs.Index)) return false;
                if (!object.Equals(this.XNAMDataTypeState, rhs.XNAMDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Text);
                hash.Add(this.Keywords);
                hash.Add(this.Value);
                hash.Add(this.PropertyEnum);
                hash.Add(this.OpEnum);
                hash.Add(this.Index);
                hash.Add(this.XNAMDataTypeState);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Text)) return false;
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Value)) return false;
                if (!eval(this.PropertyEnum)) return false;
                if (!eval(this.OpEnum)) return false;
                if (!eval(this.Index)) return false;
                if (!eval(this.XNAMDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Text)) return true;
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Value)) return true;
                if (eval(this.PropertyEnum)) return true;
                if (eval(this.OpEnum)) return true;
                if (eval(this.Index)) return true;
                if (eval(this.XNAMDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new RuleName.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Text = eval(this.Text);
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Value = eval(this.Value);
                obj.PropertyEnum = eval(this.PropertyEnum);
                obj.OpEnum = eval(this.OpEnum);
                obj.Index = eval(this.Index);
                obj.XNAMDataTypeState = eval(this.XNAMDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(RuleName.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, RuleName.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(RuleName.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Text ?? true)
                    {
                        fg.AppendItem(Text, "Text");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        fg.AppendLine("Keywords =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Value ?? true)
                    {
                        fg.AppendItem(Value, "Value");
                    }
                    if (printMask?.PropertyEnum ?? true)
                    {
                        fg.AppendItem(PropertyEnum, "PropertyEnum");
                    }
                    if (printMask?.OpEnum ?? true)
                    {
                        fg.AppendItem(OpEnum, "OpEnum");
                    }
                    if (printMask?.Index ?? true)
                    {
                        fg.AppendItem(Index, "Index");
                    }
                    if (printMask?.XNAMDataTypeState ?? true)
                    {
                        fg.AppendItem(XNAMDataTypeState, "XNAMDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Text;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public Exception? Value;
            public Exception? PropertyEnum;
            public Exception? OpEnum;
            public Exception? Index;
            public Exception? XNAMDataTypeState;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                RuleName_FieldIndex enu = (RuleName_FieldIndex)index;
                switch (enu)
                {
                    case RuleName_FieldIndex.Text:
                        return Text;
                    case RuleName_FieldIndex.Keywords:
                        return Keywords;
                    case RuleName_FieldIndex.Value:
                        return Value;
                    case RuleName_FieldIndex.PropertyEnum:
                        return PropertyEnum;
                    case RuleName_FieldIndex.OpEnum:
                        return OpEnum;
                    case RuleName_FieldIndex.Index:
                        return Index;
                    case RuleName_FieldIndex.XNAMDataTypeState:
                        return XNAMDataTypeState;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                RuleName_FieldIndex enu = (RuleName_FieldIndex)index;
                switch (enu)
                {
                    case RuleName_FieldIndex.Text:
                        this.Text = ex;
                        break;
                    case RuleName_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case RuleName_FieldIndex.Value:
                        this.Value = ex;
                        break;
                    case RuleName_FieldIndex.PropertyEnum:
                        this.PropertyEnum = ex;
                        break;
                    case RuleName_FieldIndex.OpEnum:
                        this.OpEnum = ex;
                        break;
                    case RuleName_FieldIndex.Index:
                        this.Index = ex;
                        break;
                    case RuleName_FieldIndex.XNAMDataTypeState:
                        this.XNAMDataTypeState = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                RuleName_FieldIndex enu = (RuleName_FieldIndex)index;
                switch (enu)
                {
                    case RuleName_FieldIndex.Text:
                        this.Text = (Exception?)obj;
                        break;
                    case RuleName_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case RuleName_FieldIndex.Value:
                        this.Value = (Exception?)obj;
                        break;
                    case RuleName_FieldIndex.PropertyEnum:
                        this.PropertyEnum = (Exception?)obj;
                        break;
                    case RuleName_FieldIndex.OpEnum:
                        this.OpEnum = (Exception?)obj;
                        break;
                    case RuleName_FieldIndex.Index:
                        this.Index = (Exception?)obj;
                        break;
                    case RuleName_FieldIndex.XNAMDataTypeState:
                        this.XNAMDataTypeState = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Text != null) return true;
                if (Keywords != null) return true;
                if (Value != null) return true;
                if (PropertyEnum != null) return true;
                if (OpEnum != null) return true;
                if (Index != null) return true;
                if (XNAMDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Text, "Text");
                if (Keywords is {} KeywordsItem)
                {
                    fg.AppendLine("Keywords =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Value, "Value");
                fg.AppendItem(PropertyEnum, "PropertyEnum");
                fg.AppendItem(OpEnum, "OpEnum");
                fg.AppendItem(Index, "Index");
                fg.AppendItem(XNAMDataTypeState, "XNAMDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Text = this.Text.Combine(rhs.Text);
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Value = this.Value.Combine(rhs.Value);
                ret.PropertyEnum = this.PropertyEnum.Combine(rhs.PropertyEnum);
                ret.OpEnum = this.OpEnum.Combine(rhs.OpEnum);
                ret.Index = this.Index.Combine(rhs.Index);
                ret.XNAMDataTypeState = this.XNAMDataTypeState.Combine(rhs.XNAMDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Text;
            public bool Keywords;
            public bool Value;
            public bool PropertyEnum;
            public bool OpEnum;
            public bool Index;
            public bool XNAMDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Text = defaultOn;
                this.Keywords = defaultOn;
                this.Value = defaultOn;
                this.PropertyEnum = defaultOn;
                this.OpEnum = defaultOn;
                this.Index = defaultOn;
                this.XNAMDataTypeState = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Text, null));
                ret.Add((Keywords, null));
                ret.Add((Value, null));
                ret.Add((PropertyEnum, null));
                ret.Add((OpEnum, null));
                ret.Add((Index, null));
                ret.Add((XNAMDataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> ContainedFormLinks => RuleNameCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RuleNameSetterCommon.Instance.RemapLinks(this, mapping);
        [Flags]
        public enum XNAMDataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => RuleNameBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((RuleNameBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static RuleName CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new RuleName();
            ((RuleNameSetterCommon)((IRuleNameGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out RuleName item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((RuleNameSetterCommon)((IRuleNameGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static RuleName GetNew()
        {
            return new RuleName();
        }

    }
    #endregion

    #region Interface
    public partial interface IRuleName :
        IFormLinkContainer,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IRuleName>,
        IRuleNameGetter
    {
        new TranslatedString? Text { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new Single Value { get; set; }
        new InstanceNamingRule.PropertyEnum PropertyEnum { get; set; }
        new InstanceNamingRule.OpEnum OpEnum { get; set; }
        new UInt16? Index { get; set; }
        new RuleName.XNAMDataType XNAMDataTypeState { get; set; }
    }

    public partial interface IRuleNameGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IRuleNameGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => RuleName_Registration.Instance;
        ITranslatedStringGetter? Text { get; }
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        Single Value { get; }
        InstanceNamingRule.PropertyEnum PropertyEnum { get; }
        InstanceNamingRule.OpEnum OpEnum { get; }
        UInt16? Index { get; }
        RuleName.XNAMDataType XNAMDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class RuleNameMixIn
    {
        public static void Clear(this IRuleName item)
        {
            ((RuleNameSetterCommon)((IRuleNameGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static RuleName.Mask<bool> GetEqualsMask(
            this IRuleNameGetter item,
            IRuleNameGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RuleNameCommon)((IRuleNameGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRuleNameGetter item,
            string? name = null,
            RuleName.Mask<bool>? printMask = null)
        {
            return ((RuleNameCommon)((IRuleNameGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRuleNameGetter item,
            FileGeneration fg,
            string? name = null,
            RuleName.Mask<bool>? printMask = null)
        {
            ((RuleNameCommon)((IRuleNameGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IRuleNameGetter item,
            IRuleNameGetter rhs,
            RuleName.TranslationMask? equalsMask = null)
        {
            return ((RuleNameCommon)((IRuleNameGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IRuleName lhs,
            IRuleNameGetter rhs)
        {
            ((RuleNameSetterTranslationCommon)((IRuleNameGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IRuleName lhs,
            IRuleNameGetter rhs,
            RuleName.TranslationMask? copyMask = null)
        {
            ((RuleNameSetterTranslationCommon)((IRuleNameGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IRuleName lhs,
            IRuleNameGetter rhs,
            out RuleName.ErrorMask errorMask,
            RuleName.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RuleNameSetterTranslationCommon)((IRuleNameGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = RuleName.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRuleName lhs,
            IRuleNameGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RuleNameSetterTranslationCommon)((IRuleNameGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static RuleName DeepCopy(
            this IRuleNameGetter item,
            RuleName.TranslationMask? copyMask = null)
        {
            return ((RuleNameSetterTranslationCommon)((IRuleNameGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static RuleName DeepCopy(
            this IRuleNameGetter item,
            out RuleName.ErrorMask errorMask,
            RuleName.TranslationMask? copyMask = null)
        {
            return ((RuleNameSetterTranslationCommon)((IRuleNameGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static RuleName DeepCopy(
            this IRuleNameGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RuleNameSetterTranslationCommon)((IRuleNameGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IRuleName item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((RuleNameSetterCommon)((IRuleNameGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum RuleName_FieldIndex
    {
        Text = 0,
        Keywords = 1,
        Value = 2,
        PropertyEnum = 3,
        OpEnum = 4,
        Index = 5,
        XNAMDataTypeState = 6,
    }
    #endregion

    #region Registration
    public partial class RuleName_Registration : ILoquiRegistration
    {
        public static readonly RuleName_Registration Instance = new RuleName_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 227,
            version: 0);

        public const string GUID = "35cded28-9557-4403-89cc-2a1779d1e97d";

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(RuleName.Mask<>);

        public static readonly Type ErrorMaskType = typeof(RuleName.ErrorMask);

        public static readonly Type ClassType = typeof(RuleName);

        public static readonly Type GetterType = typeof(IRuleNameGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRuleName);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.RuleName";

        public const string Name = "RuleName";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RecordTypes.WNAM,
                        RecordTypes.KWDA,
                        RecordTypes.KSIZ,
                        RecordTypes.XNAM
                    })
            );
        });
        public static readonly Type BinaryWriteTranslation = typeof(RuleNameBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class RuleNameSetterCommon
    {
        public static readonly RuleNameSetterCommon Instance = new RuleNameSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRuleName item)
        {
            ClearPartial();
            item.Text = default;
            item.Keywords = null;
            item.Value = default;
            item.PropertyEnum = default;
            item.OpEnum = default;
            item.Index = default;
            item.XNAMDataTypeState = default;
        }
        
        #region Mutagen
        public void RemapLinks(IRuleName obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Keywords?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IRuleName item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: RuleNameBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: RuleNameBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class RuleNameCommon
    {
        public static readonly RuleNameCommon Instance = new RuleNameCommon();

        public RuleName.Mask<bool> GetEqualsMask(
            IRuleNameGetter item,
            IRuleNameGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RuleName.Mask<bool>(false);
            ((RuleNameCommon)((IRuleNameGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRuleNameGetter item,
            IRuleNameGetter rhs,
            RuleName.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Text = object.Equals(item.Text, rhs.Text);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Value = item.Value.EqualsWithin(rhs.Value);
            ret.PropertyEnum = item.PropertyEnum == rhs.PropertyEnum;
            ret.OpEnum = item.OpEnum == rhs.OpEnum;
            ret.Index = item.Index == rhs.Index;
            ret.XNAMDataTypeState = item.XNAMDataTypeState == rhs.XNAMDataTypeState;
        }
        
        public string ToString(
            IRuleNameGetter item,
            string? name = null,
            RuleName.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRuleNameGetter item,
            FileGeneration fg,
            string? name = null,
            RuleName.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"RuleName =>");
            }
            else
            {
                fg.AppendLine($"{name} (RuleName) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRuleNameGetter item,
            FileGeneration fg,
            RuleName.Mask<bool>? printMask = null)
        {
            if ((printMask?.Text ?? true)
                && item.Text is {} TextItem)
            {
                fg.AppendItem(TextItem, "Text");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                fg.AppendLine("Keywords =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Value ?? true)
            {
                fg.AppendItem(item.Value, "Value");
            }
            if (printMask?.PropertyEnum ?? true)
            {
                fg.AppendItem(item.PropertyEnum, "PropertyEnum");
            }
            if (printMask?.OpEnum ?? true)
            {
                fg.AppendItem(item.OpEnum, "OpEnum");
            }
            if ((printMask?.Index ?? true)
                && item.Index is {} IndexItem)
            {
                fg.AppendItem(IndexItem, "Index");
            }
            if (printMask?.XNAMDataTypeState ?? true)
            {
                fg.AppendItem(item.XNAMDataTypeState, "XNAMDataTypeState");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRuleNameGetter? lhs,
            IRuleNameGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)RuleName_FieldIndex.Text) ?? true))
            {
                if (!object.Equals(lhs.Text, rhs.Text)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)RuleName_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)RuleName_FieldIndex.Value) ?? true))
            {
                if (!lhs.Value.EqualsWithin(rhs.Value)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)RuleName_FieldIndex.PropertyEnum) ?? true))
            {
                if (lhs.PropertyEnum != rhs.PropertyEnum) return false;
            }
            if ((crystal?.GetShouldTranslate((int)RuleName_FieldIndex.OpEnum) ?? true))
            {
                if (lhs.OpEnum != rhs.OpEnum) return false;
            }
            if ((crystal?.GetShouldTranslate((int)RuleName_FieldIndex.Index) ?? true))
            {
                if (lhs.Index != rhs.Index) return false;
            }
            if ((crystal?.GetShouldTranslate((int)RuleName_FieldIndex.XNAMDataTypeState) ?? true))
            {
                if (lhs.XNAMDataTypeState != rhs.XNAMDataTypeState) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IRuleNameGetter item)
        {
            var hash = new HashCode();
            if (item.Text is {} Textitem)
            {
                hash.Add(Textitem);
            }
            hash.Add(item.Keywords);
            hash.Add(item.Value);
            hash.Add(item.PropertyEnum);
            hash.Add(item.OpEnum);
            if (item.Index is {} Indexitem)
            {
                hash.Add(Indexitem);
            }
            hash.Add(item.XNAMDataTypeState);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return RuleName.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IRuleNameGetter obj)
        {
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class RuleNameSetterTranslationCommon
    {
        public static readonly RuleNameSetterTranslationCommon Instance = new RuleNameSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IRuleName item,
            IRuleNameGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)RuleName_FieldIndex.Text) ?? true))
            {
                item.Text = rhs.Text?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)RuleName_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)RuleName_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                            .Select(r => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(r.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)RuleName_FieldIndex.Value) ?? true))
            {
                item.Value = rhs.Value;
            }
            if ((copyMask?.GetShouldTranslate((int)RuleName_FieldIndex.PropertyEnum) ?? true))
            {
                item.PropertyEnum = rhs.PropertyEnum;
            }
            if ((copyMask?.GetShouldTranslate((int)RuleName_FieldIndex.OpEnum) ?? true))
            {
                item.OpEnum = rhs.OpEnum;
            }
            if ((copyMask?.GetShouldTranslate((int)RuleName_FieldIndex.Index) ?? true))
            {
                item.Index = rhs.Index;
            }
            if ((copyMask?.GetShouldTranslate((int)RuleName_FieldIndex.XNAMDataTypeState) ?? true))
            {
                item.XNAMDataTypeState = rhs.XNAMDataTypeState;
            }
        }
        
        #endregion
        
        public RuleName DeepCopy(
            IRuleNameGetter item,
            RuleName.TranslationMask? copyMask = null)
        {
            RuleName ret = (RuleName)((RuleNameCommon)((IRuleNameGetter)item).CommonInstance()!).GetNew();
            ((RuleNameSetterTranslationCommon)((IRuleNameGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public RuleName DeepCopy(
            IRuleNameGetter item,
            out RuleName.ErrorMask errorMask,
            RuleName.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RuleName ret = (RuleName)((RuleNameCommon)((IRuleNameGetter)item).CommonInstance()!).GetNew();
            ((RuleNameSetterTranslationCommon)((IRuleNameGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = RuleName.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public RuleName DeepCopy(
            IRuleNameGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            RuleName ret = (RuleName)((RuleNameCommon)((IRuleNameGetter)item).CommonInstance()!).GetNew();
            ((RuleNameSetterTranslationCommon)((IRuleNameGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class RuleName
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RuleName_Registration.Instance;
        public static RuleName_Registration StaticRegistration => RuleName_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => RuleNameCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return RuleNameSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => RuleNameSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRuleNameGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IRuleNameGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IRuleNameGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class RuleNameBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static RuleNameBinaryWriteTranslation Instance = new RuleNameBinaryWriteTranslation();

        public static void WriteEmbedded(
            IRuleNameGetter item,
            MutagenWriter writer)
        {
        }

        public static void WriteRecordTypes(
            IRuleNameGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Text,
                header: translationParams.ConvertToCustom(RecordTypes.WNAM),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams? conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.XNAM)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Value);
                EnumBinaryTranslation<InstanceNamingRule.PropertyEnum, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.PropertyEnum,
                    length: 1);
                EnumBinaryTranslation<InstanceNamingRule.OpEnum, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.OpEnum,
                    length: 1);
            }
            UInt16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Index,
                header: translationParams.ConvertToCustom(RecordTypes.YNAM));
        }

        public void Write(
            MutagenWriter writer,
            IRuleNameGetter item,
            TypedWriteParams? translationParams = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IRuleNameGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class RuleNameBinaryCreateTranslation
    {
        public readonly static RuleNameBinaryCreateTranslation Instance = new RuleNameBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IRuleName item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IRuleName item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.WNAM:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)RuleName_FieldIndex.Text) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Text = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)RuleName_FieldIndex.Text;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)RuleName_FieldIndex.Keywords) return ParseResult.Stop;
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)RuleName_FieldIndex.Keywords;
                }
                case RecordTypeInts.XNAM:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)RuleName_FieldIndex.OpEnum) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Value = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    item.PropertyEnum = EnumBinaryTranslation<InstanceNamingRule.PropertyEnum, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    item.OpEnum = EnumBinaryTranslation<InstanceNamingRule.OpEnum, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    return (int)RuleName_FieldIndex.OpEnum;
                }
                case RecordTypeInts.YNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Index = frame.ReadUInt16();
                    return (int)RuleName_FieldIndex.Index;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class RuleNameBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRuleNameGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((RuleNameBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class RuleNameBinaryOverlay :
        PluginBinaryOverlay,
        IRuleNameGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RuleName_Registration.Instance;
        public static RuleName_Registration StaticRegistration => RuleName_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => RuleNameCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => RuleNameSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRuleNameGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IRuleNameGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IRuleNameGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public IEnumerable<IFormLinkGetter> ContainedFormLinks => RuleNameCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => RuleNameBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((RuleNameBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Text
        private int? _TextLocation;
        public ITranslatedStringGetter? Text => _TextLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _TextLocation.Value, _package.MetaData.Constants), StringsSource.DL, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        private int? _XNAMLocation;
        public RuleName.XNAMDataType XNAMDataTypeState { get; private set; }
        #region Value
        private int _ValueLocation => _XNAMLocation!.Value;
        private bool _Value_IsSet => _XNAMLocation.HasValue;
        public Single Value => _Value_IsSet ? _data.Slice(_ValueLocation, 4).Float() : default;
        #endregion
        #region PropertyEnum
        private int _PropertyEnumLocation => _XNAMLocation!.Value + 0x4;
        private bool _PropertyEnum_IsSet => _XNAMLocation.HasValue;
        public InstanceNamingRule.PropertyEnum PropertyEnum => _PropertyEnum_IsSet ? (InstanceNamingRule.PropertyEnum)_data.Span.Slice(_PropertyEnumLocation, 0x1)[0] : default;
        #endregion
        #region OpEnum
        private int _OpEnumLocation => _XNAMLocation!.Value + 0x5;
        private bool _OpEnum_IsSet => _XNAMLocation.HasValue;
        public InstanceNamingRule.OpEnum OpEnum => _OpEnum_IsSet ? (InstanceNamingRule.OpEnum)_data.Span.Slice(_OpEnumLocation, 0x1)[0] : default;
        #endregion
        #region Index
        private int? _IndexLocation;
        public UInt16? Index => _IndexLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _IndexLocation.Value, _package.MetaData.Constants)) : default(UInt16?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected RuleNameBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static RuleNameBinaryOverlay RuleNameFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new RuleNameBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static RuleNameBinaryOverlay RuleNameFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return RuleNameFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.WNAM:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)RuleName_FieldIndex.Text) return ParseResult.Stop;
                    _TextLocation = (stream.Position - offset);
                    return (int)RuleName_FieldIndex.Text;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)RuleName_FieldIndex.Keywords) return ParseResult.Stop;
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        subrecordType: RecordTypes.KWDA,
                        getter: (s, p) => new FormLink<IKeywordGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    return (int)RuleName_FieldIndex.Keywords;
                }
                case RecordTypeInts.XNAM:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)RuleName_FieldIndex.OpEnum) return ParseResult.Stop;
                    _XNAMLocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)RuleName_FieldIndex.OpEnum;
                }
                case RecordTypeInts.YNAM:
                {
                    _IndexLocation = (stream.Position - offset);
                    return (int)RuleName_FieldIndex.Index;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RuleNameMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IRuleNameGetter rhs) return false;
            return ((RuleNameCommon)((IRuleNameGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IRuleNameGetter? obj)
        {
            return ((RuleNameCommon)((IRuleNameGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((RuleNameCommon)((IRuleNameGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

