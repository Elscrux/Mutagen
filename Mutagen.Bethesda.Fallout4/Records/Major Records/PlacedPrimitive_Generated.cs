/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class PlacedPrimitive :
        IEquatable<IPlacedPrimitiveGetter>,
        ILoquiObjectSetter<PlacedPrimitive>,
        IPlacedPrimitive
    {
        #region Ctor
        public PlacedPrimitive()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Bounds
        public P3Float Bounds { get; set; } = default(P3Float);
        #endregion
        #region Color
        public Color Color { get; set; } = default(Color);
        #endregion
        #region Unknown
        public Single Unknown { get; set; } = default(Single);
        #endregion
        #region Type
        public PlacedPrimitive.TypeEnum Type { get; set; } = default(PlacedPrimitive.TypeEnum);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlacedPrimitiveMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPlacedPrimitiveGetter rhs) return false;
            return ((PlacedPrimitiveCommon)((IPlacedPrimitiveGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlacedPrimitiveGetter? obj)
        {
            return ((PlacedPrimitiveCommon)((IPlacedPrimitiveGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlacedPrimitiveCommon)((IPlacedPrimitiveGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Bounds = initialValue;
                this.Color = initialValue;
                this.Unknown = initialValue;
                this.Type = initialValue;
            }

            public Mask(
                TItem Bounds,
                TItem Color,
                TItem Unknown,
                TItem Type)
            {
                this.Bounds = Bounds;
                this.Color = Color;
                this.Unknown = Unknown;
                this.Type = Type;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Bounds;
            public TItem Color;
            public TItem Unknown;
            public TItem Type;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Bounds, rhs.Bounds)) return false;
                if (!object.Equals(this.Color, rhs.Color)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Bounds);
                hash.Add(this.Color);
                hash.Add(this.Unknown);
                hash.Add(this.Type);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Bounds)) return false;
                if (!eval(this.Color)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.Type)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Bounds)) return true;
                if (eval(this.Color)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.Type)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PlacedPrimitive.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Bounds = eval(this.Bounds);
                obj.Color = eval(this.Color);
                obj.Unknown = eval(this.Unknown);
                obj.Type = eval(this.Type);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(PlacedPrimitive.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, PlacedPrimitive.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(PlacedPrimitive.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Bounds ?? true)
                    {
                        sb.AppendItem(Bounds, "Bounds");
                    }
                    if (printMask?.Color ?? true)
                    {
                        sb.AppendItem(Color, "Color");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.Type ?? true)
                    {
                        sb.AppendItem(Type, "Type");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Bounds;
            public Exception? Color;
            public Exception? Unknown;
            public Exception? Type;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                PlacedPrimitive_FieldIndex enu = (PlacedPrimitive_FieldIndex)index;
                switch (enu)
                {
                    case PlacedPrimitive_FieldIndex.Bounds:
                        return Bounds;
                    case PlacedPrimitive_FieldIndex.Color:
                        return Color;
                    case PlacedPrimitive_FieldIndex.Unknown:
                        return Unknown;
                    case PlacedPrimitive_FieldIndex.Type:
                        return Type;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                PlacedPrimitive_FieldIndex enu = (PlacedPrimitive_FieldIndex)index;
                switch (enu)
                {
                    case PlacedPrimitive_FieldIndex.Bounds:
                        this.Bounds = ex;
                        break;
                    case PlacedPrimitive_FieldIndex.Color:
                        this.Color = ex;
                        break;
                    case PlacedPrimitive_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case PlacedPrimitive_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                PlacedPrimitive_FieldIndex enu = (PlacedPrimitive_FieldIndex)index;
                switch (enu)
                {
                    case PlacedPrimitive_FieldIndex.Bounds:
                        this.Bounds = (Exception?)obj;
                        break;
                    case PlacedPrimitive_FieldIndex.Color:
                        this.Color = (Exception?)obj;
                        break;
                    case PlacedPrimitive_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case PlacedPrimitive_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Bounds != null) return true;
                if (Color != null) return true;
                if (Unknown != null) return true;
                if (Type != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Bounds, "Bounds");
                }
                {
                    sb.AppendItem(Color, "Color");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                {
                    sb.AppendItem(Type, "Type");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Bounds = this.Bounds.Combine(rhs.Bounds);
                ret.Color = this.Color.Combine(rhs.Color);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Type = this.Type.Combine(rhs.Type);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Bounds;
            public bool Color;
            public bool Unknown;
            public bool Type;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Bounds = defaultOn;
                this.Color = defaultOn;
                this.Unknown = defaultOn;
                this.Type = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Bounds, null));
                ret.Add((Color, null));
                ret.Add((Unknown, null));
                ret.Add((Type, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PlacedPrimitiveBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlacedPrimitiveBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static PlacedPrimitive CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new PlacedPrimitive();
            ((PlacedPrimitiveSetterCommon)((IPlacedPrimitiveGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PlacedPrimitive item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((PlacedPrimitiveSetterCommon)((IPlacedPrimitiveGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static PlacedPrimitive GetNew()
        {
            return new PlacedPrimitive();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlacedPrimitive :
        ILoquiObjectSetter<IPlacedPrimitive>,
        IPlacedPrimitiveGetter
    {
        new P3Float Bounds { get; set; }
        new Color Color { get; set; }
        new Single Unknown { get; set; }
        new PlacedPrimitive.TypeEnum Type { get; set; }
    }

    public partial interface IPlacedPrimitiveGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IPlacedPrimitiveGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => PlacedPrimitive_Registration.Instance;
        P3Float Bounds { get; }
        Color Color { get; }
        Single Unknown { get; }
        PlacedPrimitive.TypeEnum Type { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PlacedPrimitiveMixIn
    {
        public static void Clear(this IPlacedPrimitive item)
        {
            ((PlacedPrimitiveSetterCommon)((IPlacedPrimitiveGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PlacedPrimitive.Mask<bool> GetEqualsMask(
            this IPlacedPrimitiveGetter item,
            IPlacedPrimitiveGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlacedPrimitiveCommon)((IPlacedPrimitiveGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IPlacedPrimitiveGetter item,
            string? name = null,
            PlacedPrimitive.Mask<bool>? printMask = null)
        {
            return ((PlacedPrimitiveCommon)((IPlacedPrimitiveGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IPlacedPrimitiveGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlacedPrimitive.Mask<bool>? printMask = null)
        {
            ((PlacedPrimitiveCommon)((IPlacedPrimitiveGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPlacedPrimitiveGetter item,
            IPlacedPrimitiveGetter rhs,
            PlacedPrimitive.TranslationMask? equalsMask = null)
        {
            return ((PlacedPrimitiveCommon)((IPlacedPrimitiveGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPlacedPrimitive lhs,
            IPlacedPrimitiveGetter rhs)
        {
            ((PlacedPrimitiveSetterTranslationCommon)((IPlacedPrimitiveGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPlacedPrimitive lhs,
            IPlacedPrimitiveGetter rhs,
            PlacedPrimitive.TranslationMask? copyMask = null)
        {
            ((PlacedPrimitiveSetterTranslationCommon)((IPlacedPrimitiveGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPlacedPrimitive lhs,
            IPlacedPrimitiveGetter rhs,
            out PlacedPrimitive.ErrorMask errorMask,
            PlacedPrimitive.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PlacedPrimitiveSetterTranslationCommon)((IPlacedPrimitiveGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PlacedPrimitive.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPlacedPrimitive lhs,
            IPlacedPrimitiveGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PlacedPrimitiveSetterTranslationCommon)((IPlacedPrimitiveGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PlacedPrimitive DeepCopy(
            this IPlacedPrimitiveGetter item,
            PlacedPrimitive.TranslationMask? copyMask = null)
        {
            return ((PlacedPrimitiveSetterTranslationCommon)((IPlacedPrimitiveGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PlacedPrimitive DeepCopy(
            this IPlacedPrimitiveGetter item,
            out PlacedPrimitive.ErrorMask errorMask,
            PlacedPrimitive.TranslationMask? copyMask = null)
        {
            return ((PlacedPrimitiveSetterTranslationCommon)((IPlacedPrimitiveGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PlacedPrimitive DeepCopy(
            this IPlacedPrimitiveGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PlacedPrimitiveSetterTranslationCommon)((IPlacedPrimitiveGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPlacedPrimitive item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((PlacedPrimitiveSetterCommon)((IPlacedPrimitiveGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum PlacedPrimitive_FieldIndex
    {
        Bounds = 0,
        Color = 1,
        Unknown = 2,
        Type = 3,
    }
    #endregion

    #region Registration
    internal partial class PlacedPrimitive_Registration : ILoquiRegistration
    {
        public static readonly PlacedPrimitive_Registration Instance = new PlacedPrimitive_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(PlacedPrimitive.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlacedPrimitive.ErrorMask);

        public static readonly Type ClassType = typeof(PlacedPrimitive);

        public static readonly Type GetterType = typeof(IPlacedPrimitiveGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlacedPrimitive);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.PlacedPrimitive";

        public const string Name = "PlacedPrimitive";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.XPRM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.XPRM);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(PlacedPrimitiveBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class PlacedPrimitiveSetterCommon
    {
        public static readonly PlacedPrimitiveSetterCommon Instance = new PlacedPrimitiveSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlacedPrimitive item)
        {
            ClearPartial();
            item.Bounds = default(P3Float);
            item.Color = default(Color);
            item.Unknown = default(Single);
            item.Type = default(PlacedPrimitive.TypeEnum);
        }
        
        #region Mutagen
        public void RemapLinks(IPlacedPrimitive obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPlacedPrimitive item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.XPRM),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: PlacedPrimitiveBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class PlacedPrimitiveCommon
    {
        public static readonly PlacedPrimitiveCommon Instance = new PlacedPrimitiveCommon();

        public PlacedPrimitive.Mask<bool> GetEqualsMask(
            IPlacedPrimitiveGetter item,
            IPlacedPrimitiveGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlacedPrimitive.Mask<bool>(false);
            ((PlacedPrimitiveCommon)((IPlacedPrimitiveGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlacedPrimitiveGetter item,
            IPlacedPrimitiveGetter rhs,
            PlacedPrimitive.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Bounds = item.Bounds.Equals(rhs.Bounds);
            ret.Color = item.Color.ColorOnlyEquals(rhs.Color);
            ret.Unknown = item.Unknown.EqualsWithin(rhs.Unknown);
            ret.Type = item.Type == rhs.Type;
        }
        
        public string Print(
            IPlacedPrimitiveGetter item,
            string? name = null,
            PlacedPrimitive.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IPlacedPrimitiveGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlacedPrimitive.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"PlacedPrimitive =>");
            }
            else
            {
                sb.AppendLine($"{name} (PlacedPrimitive) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IPlacedPrimitiveGetter item,
            StructuredStringBuilder sb,
            PlacedPrimitive.Mask<bool>? printMask = null)
        {
            if (printMask?.Bounds ?? true)
            {
                sb.AppendItem(item.Bounds, "Bounds");
            }
            if (printMask?.Color ?? true)
            {
                sb.AppendItem(item.Color, "Color");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.Type ?? true)
            {
                sb.AppendItem(item.Type, "Type");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlacedPrimitiveGetter? lhs,
            IPlacedPrimitiveGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)PlacedPrimitive_FieldIndex.Bounds) ?? true))
            {
                if (!lhs.Bounds.Equals(rhs.Bounds)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedPrimitive_FieldIndex.Color) ?? true))
            {
                if (!lhs.Color.ColorOnlyEquals(rhs.Color)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedPrimitive_FieldIndex.Unknown) ?? true))
            {
                if (!lhs.Unknown.EqualsWithin(rhs.Unknown)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedPrimitive_FieldIndex.Type) ?? true))
            {
                if (lhs.Type != rhs.Type) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IPlacedPrimitiveGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Bounds);
            hash.Add(item.Color);
            hash.Add(item.Unknown);
            hash.Add(item.Type);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return PlacedPrimitive.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IPlacedPrimitiveGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class PlacedPrimitiveSetterTranslationCommon
    {
        public static readonly PlacedPrimitiveSetterTranslationCommon Instance = new PlacedPrimitiveSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPlacedPrimitive item,
            IPlacedPrimitiveGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)PlacedPrimitive_FieldIndex.Bounds) ?? true))
            {
                item.Bounds = rhs.Bounds;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedPrimitive_FieldIndex.Color) ?? true))
            {
                item.Color = rhs.Color;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedPrimitive_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedPrimitive_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IPlacedPrimitive item,
            IPlacedPrimitiveGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public PlacedPrimitive DeepCopy(
            IPlacedPrimitiveGetter item,
            PlacedPrimitive.TranslationMask? copyMask = null)
        {
            PlacedPrimitive ret = (PlacedPrimitive)((PlacedPrimitiveCommon)((IPlacedPrimitiveGetter)item).CommonInstance()!).GetNew();
            ((PlacedPrimitiveSetterTranslationCommon)((IPlacedPrimitiveGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PlacedPrimitive DeepCopy(
            IPlacedPrimitiveGetter item,
            out PlacedPrimitive.ErrorMask errorMask,
            PlacedPrimitive.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PlacedPrimitive ret = (PlacedPrimitive)((PlacedPrimitiveCommon)((IPlacedPrimitiveGetter)item).CommonInstance()!).GetNew();
            ((PlacedPrimitiveSetterTranslationCommon)((IPlacedPrimitiveGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PlacedPrimitive.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PlacedPrimitive DeepCopy(
            IPlacedPrimitiveGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PlacedPrimitive ret = (PlacedPrimitive)((PlacedPrimitiveCommon)((IPlacedPrimitiveGetter)item).CommonInstance()!).GetNew();
            ((PlacedPrimitiveSetterTranslationCommon)((IPlacedPrimitiveGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class PlacedPrimitive
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedPrimitive_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => PlacedPrimitive_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PlacedPrimitiveCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return PlacedPrimitiveSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PlacedPrimitiveSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPlacedPrimitiveGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IPlacedPrimitiveGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IPlacedPrimitiveGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class PlacedPrimitiveBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly PlacedPrimitiveBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IPlacedPrimitiveGetter item,
            MutagenWriter writer)
        {
            PlacedPrimitiveBinaryWriteTranslation.WriteBinaryBounds(
                writer: writer,
                item: item);
            ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Color,
                binaryType: ColorBinaryType.NoAlphaFloat);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unknown);
            EnumBinaryTranslation<PlacedPrimitive.TypeEnum, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Type,
                length: 4);
        }

        public static partial void WriteBinaryBoundsCustom(
            MutagenWriter writer,
            IPlacedPrimitiveGetter item);

        public static void WriteBinaryBounds(
            MutagenWriter writer,
            IPlacedPrimitiveGetter item)
        {
            WriteBinaryBoundsCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IPlacedPrimitiveGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.XPRM),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IPlacedPrimitiveGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class PlacedPrimitiveBinaryCreateTranslation
    {
        public static readonly PlacedPrimitiveBinaryCreateTranslation Instance = new PlacedPrimitiveBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IPlacedPrimitive item,
            MutagenFrame frame)
        {
            PlacedPrimitiveBinaryCreateTranslation.FillBinaryBoundsCustom(
                frame: frame,
                item: item);
            item.Color = frame.ReadColor(ColorBinaryType.NoAlphaFloat);
            item.Unknown = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Type = EnumBinaryTranslation<PlacedPrimitive.TypeEnum, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
        }

        public static partial void FillBinaryBoundsCustom(
            MutagenFrame frame,
            IPlacedPrimitive item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class PlacedPrimitiveBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IPlacedPrimitiveGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlacedPrimitiveBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class PlacedPrimitiveBinaryOverlay :
        PluginBinaryOverlay,
        IPlacedPrimitiveGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedPrimitive_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => PlacedPrimitive_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PlacedPrimitiveCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PlacedPrimitiveSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPlacedPrimitiveGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IPlacedPrimitiveGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IPlacedPrimitiveGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PlacedPrimitiveBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlacedPrimitiveBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Bounds
        public partial P3Float GetBoundsCustom(int location);
        public P3Float Bounds => GetBoundsCustom(location: 0x0);
        #endregion
        public Color Color => _structData.Slice(0xC, 0xC).ReadColor(ColorBinaryType.NoAlphaFloat);
        public Single Unknown => _structData.Slice(0x18, 0x4).Float();
        public PlacedPrimitive.TypeEnum Type => (PlacedPrimitive.TypeEnum)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0x1C, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PlacedPrimitiveBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IPlacedPrimitiveGetter PlacedPrimitiveFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x20,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new PlacedPrimitiveBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x20 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IPlacedPrimitiveGetter PlacedPrimitiveFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return PlacedPrimitiveFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlacedPrimitiveMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPlacedPrimitiveGetter rhs) return false;
            return ((PlacedPrimitiveCommon)((IPlacedPrimitiveGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlacedPrimitiveGetter? obj)
        {
            return ((PlacedPrimitiveCommon)((IPlacedPrimitiveGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlacedPrimitiveCommon)((IPlacedPrimitiveGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

