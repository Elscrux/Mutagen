/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class PackageFlagsOverride :
        IEquatable<IPackageFlagsOverrideGetter>,
        ILoquiObjectSetter<PackageFlagsOverride>,
        IPackageFlagsOverride
    {
        #region Ctor
        public PackageFlagsOverride()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region SetFlags
        public Package.Flag SetFlags { get; set; } = default(Package.Flag);
        #endregion
        #region ClearFlags
        public Package.Flag ClearFlags { get; set; } = default(Package.Flag);
        #endregion
        #region SetInterruptFlags
        public Package.InterruptFlag SetInterruptFlags { get; set; } = default(Package.InterruptFlag);
        #endregion
        #region ClearInterruptFlags
        public Package.InterruptFlag ClearInterruptFlags { get; set; } = default(Package.InterruptFlag);
        #endregion
        #region PreferredSpeed
        public Package.Speed PreferredSpeed { get; set; } = default(Package.Speed);
        #endregion
        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unknown = new byte[3];
        public MemorySlice<Byte> Unknown
        {
            get => _Unknown;
            set => this._Unknown = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IPackageFlagsOverrideGetter.Unknown => this.Unknown;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PackageFlagsOverrideMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPackageFlagsOverrideGetter rhs) return false;
            return ((PackageFlagsOverrideCommon)((IPackageFlagsOverrideGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPackageFlagsOverrideGetter? obj)
        {
            return ((PackageFlagsOverrideCommon)((IPackageFlagsOverrideGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PackageFlagsOverrideCommon)((IPackageFlagsOverrideGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.SetFlags = initialValue;
                this.ClearFlags = initialValue;
                this.SetInterruptFlags = initialValue;
                this.ClearInterruptFlags = initialValue;
                this.PreferredSpeed = initialValue;
                this.Unknown = initialValue;
            }

            public Mask(
                TItem SetFlags,
                TItem ClearFlags,
                TItem SetInterruptFlags,
                TItem ClearInterruptFlags,
                TItem PreferredSpeed,
                TItem Unknown)
            {
                this.SetFlags = SetFlags;
                this.ClearFlags = ClearFlags;
                this.SetInterruptFlags = SetInterruptFlags;
                this.ClearInterruptFlags = ClearInterruptFlags;
                this.PreferredSpeed = PreferredSpeed;
                this.Unknown = Unknown;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem SetFlags;
            public TItem ClearFlags;
            public TItem SetInterruptFlags;
            public TItem ClearInterruptFlags;
            public TItem PreferredSpeed;
            public TItem Unknown;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.SetFlags, rhs.SetFlags)) return false;
                if (!object.Equals(this.ClearFlags, rhs.ClearFlags)) return false;
                if (!object.Equals(this.SetInterruptFlags, rhs.SetInterruptFlags)) return false;
                if (!object.Equals(this.ClearInterruptFlags, rhs.ClearInterruptFlags)) return false;
                if (!object.Equals(this.PreferredSpeed, rhs.PreferredSpeed)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.SetFlags);
                hash.Add(this.ClearFlags);
                hash.Add(this.SetInterruptFlags);
                hash.Add(this.ClearInterruptFlags);
                hash.Add(this.PreferredSpeed);
                hash.Add(this.Unknown);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.SetFlags)) return false;
                if (!eval(this.ClearFlags)) return false;
                if (!eval(this.SetInterruptFlags)) return false;
                if (!eval(this.ClearInterruptFlags)) return false;
                if (!eval(this.PreferredSpeed)) return false;
                if (!eval(this.Unknown)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.SetFlags)) return true;
                if (eval(this.ClearFlags)) return true;
                if (eval(this.SetInterruptFlags)) return true;
                if (eval(this.ClearInterruptFlags)) return true;
                if (eval(this.PreferredSpeed)) return true;
                if (eval(this.Unknown)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PackageFlagsOverride.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.SetFlags = eval(this.SetFlags);
                obj.ClearFlags = eval(this.ClearFlags);
                obj.SetInterruptFlags = eval(this.SetInterruptFlags);
                obj.ClearInterruptFlags = eval(this.ClearInterruptFlags);
                obj.PreferredSpeed = eval(this.PreferredSpeed);
                obj.Unknown = eval(this.Unknown);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(PackageFlagsOverride.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, PackageFlagsOverride.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(PackageFlagsOverride.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.SetFlags ?? true)
                    {
                        sb.AppendItem(SetFlags, "SetFlags");
                    }
                    if (printMask?.ClearFlags ?? true)
                    {
                        sb.AppendItem(ClearFlags, "ClearFlags");
                    }
                    if (printMask?.SetInterruptFlags ?? true)
                    {
                        sb.AppendItem(SetInterruptFlags, "SetInterruptFlags");
                    }
                    if (printMask?.ClearInterruptFlags ?? true)
                    {
                        sb.AppendItem(ClearInterruptFlags, "ClearInterruptFlags");
                    }
                    if (printMask?.PreferredSpeed ?? true)
                    {
                        sb.AppendItem(PreferredSpeed, "PreferredSpeed");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? SetFlags;
            public Exception? ClearFlags;
            public Exception? SetInterruptFlags;
            public Exception? ClearInterruptFlags;
            public Exception? PreferredSpeed;
            public Exception? Unknown;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                PackageFlagsOverride_FieldIndex enu = (PackageFlagsOverride_FieldIndex)index;
                switch (enu)
                {
                    case PackageFlagsOverride_FieldIndex.SetFlags:
                        return SetFlags;
                    case PackageFlagsOverride_FieldIndex.ClearFlags:
                        return ClearFlags;
                    case PackageFlagsOverride_FieldIndex.SetInterruptFlags:
                        return SetInterruptFlags;
                    case PackageFlagsOverride_FieldIndex.ClearInterruptFlags:
                        return ClearInterruptFlags;
                    case PackageFlagsOverride_FieldIndex.PreferredSpeed:
                        return PreferredSpeed;
                    case PackageFlagsOverride_FieldIndex.Unknown:
                        return Unknown;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                PackageFlagsOverride_FieldIndex enu = (PackageFlagsOverride_FieldIndex)index;
                switch (enu)
                {
                    case PackageFlagsOverride_FieldIndex.SetFlags:
                        this.SetFlags = ex;
                        break;
                    case PackageFlagsOverride_FieldIndex.ClearFlags:
                        this.ClearFlags = ex;
                        break;
                    case PackageFlagsOverride_FieldIndex.SetInterruptFlags:
                        this.SetInterruptFlags = ex;
                        break;
                    case PackageFlagsOverride_FieldIndex.ClearInterruptFlags:
                        this.ClearInterruptFlags = ex;
                        break;
                    case PackageFlagsOverride_FieldIndex.PreferredSpeed:
                        this.PreferredSpeed = ex;
                        break;
                    case PackageFlagsOverride_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                PackageFlagsOverride_FieldIndex enu = (PackageFlagsOverride_FieldIndex)index;
                switch (enu)
                {
                    case PackageFlagsOverride_FieldIndex.SetFlags:
                        this.SetFlags = (Exception?)obj;
                        break;
                    case PackageFlagsOverride_FieldIndex.ClearFlags:
                        this.ClearFlags = (Exception?)obj;
                        break;
                    case PackageFlagsOverride_FieldIndex.SetInterruptFlags:
                        this.SetInterruptFlags = (Exception?)obj;
                        break;
                    case PackageFlagsOverride_FieldIndex.ClearInterruptFlags:
                        this.ClearInterruptFlags = (Exception?)obj;
                        break;
                    case PackageFlagsOverride_FieldIndex.PreferredSpeed:
                        this.PreferredSpeed = (Exception?)obj;
                        break;
                    case PackageFlagsOverride_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (SetFlags != null) return true;
                if (ClearFlags != null) return true;
                if (SetInterruptFlags != null) return true;
                if (ClearInterruptFlags != null) return true;
                if (PreferredSpeed != null) return true;
                if (Unknown != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(SetFlags, "SetFlags");
                }
                {
                    sb.AppendItem(ClearFlags, "ClearFlags");
                }
                {
                    sb.AppendItem(SetInterruptFlags, "SetInterruptFlags");
                }
                {
                    sb.AppendItem(ClearInterruptFlags, "ClearInterruptFlags");
                }
                {
                    sb.AppendItem(PreferredSpeed, "PreferredSpeed");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.SetFlags = this.SetFlags.Combine(rhs.SetFlags);
                ret.ClearFlags = this.ClearFlags.Combine(rhs.ClearFlags);
                ret.SetInterruptFlags = this.SetInterruptFlags.Combine(rhs.SetInterruptFlags);
                ret.ClearInterruptFlags = this.ClearInterruptFlags.Combine(rhs.ClearInterruptFlags);
                ret.PreferredSpeed = this.PreferredSpeed.Combine(rhs.PreferredSpeed);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool SetFlags;
            public bool ClearFlags;
            public bool SetInterruptFlags;
            public bool ClearInterruptFlags;
            public bool PreferredSpeed;
            public bool Unknown;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.SetFlags = defaultOn;
                this.ClearFlags = defaultOn;
                this.SetInterruptFlags = defaultOn;
                this.ClearInterruptFlags = defaultOn;
                this.PreferredSpeed = defaultOn;
                this.Unknown = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((SetFlags, null));
                ret.Add((ClearFlags, null));
                ret.Add((SetInterruptFlags, null));
                ret.Add((ClearInterruptFlags, null));
                ret.Add((PreferredSpeed, null));
                ret.Add((Unknown, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PackageFlagsOverrideBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PackageFlagsOverrideBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static PackageFlagsOverride CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new PackageFlagsOverride();
            ((PackageFlagsOverrideSetterCommon)((IPackageFlagsOverrideGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PackageFlagsOverride item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((PackageFlagsOverrideSetterCommon)((IPackageFlagsOverrideGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static PackageFlagsOverride GetNew()
        {
            return new PackageFlagsOverride();
        }

    }
    #endregion

    #region Interface
    public partial interface IPackageFlagsOverride :
        ILoquiObjectSetter<IPackageFlagsOverride>,
        IPackageFlagsOverrideGetter
    {
        new Package.Flag SetFlags { get; set; }
        new Package.Flag ClearFlags { get; set; }
        new Package.InterruptFlag SetInterruptFlags { get; set; }
        new Package.InterruptFlag ClearInterruptFlags { get; set; }
        new Package.Speed PreferredSpeed { get; set; }
        new MemorySlice<Byte> Unknown { get; set; }
    }

    public partial interface IPackageFlagsOverrideGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IPackageFlagsOverrideGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => PackageFlagsOverride_Registration.Instance;
        Package.Flag SetFlags { get; }
        Package.Flag ClearFlags { get; }
        Package.InterruptFlag SetInterruptFlags { get; }
        Package.InterruptFlag ClearInterruptFlags { get; }
        Package.Speed PreferredSpeed { get; }
        ReadOnlyMemorySlice<Byte> Unknown { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PackageFlagsOverrideMixIn
    {
        public static void Clear(this IPackageFlagsOverride item)
        {
            ((PackageFlagsOverrideSetterCommon)((IPackageFlagsOverrideGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PackageFlagsOverride.Mask<bool> GetEqualsMask(
            this IPackageFlagsOverrideGetter item,
            IPackageFlagsOverrideGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PackageFlagsOverrideCommon)((IPackageFlagsOverrideGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IPackageFlagsOverrideGetter item,
            string? name = null,
            PackageFlagsOverride.Mask<bool>? printMask = null)
        {
            return ((PackageFlagsOverrideCommon)((IPackageFlagsOverrideGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IPackageFlagsOverrideGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PackageFlagsOverride.Mask<bool>? printMask = null)
        {
            ((PackageFlagsOverrideCommon)((IPackageFlagsOverrideGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPackageFlagsOverrideGetter item,
            IPackageFlagsOverrideGetter rhs,
            PackageFlagsOverride.TranslationMask? equalsMask = null)
        {
            return ((PackageFlagsOverrideCommon)((IPackageFlagsOverrideGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPackageFlagsOverride lhs,
            IPackageFlagsOverrideGetter rhs)
        {
            ((PackageFlagsOverrideSetterTranslationCommon)((IPackageFlagsOverrideGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPackageFlagsOverride lhs,
            IPackageFlagsOverrideGetter rhs,
            PackageFlagsOverride.TranslationMask? copyMask = null)
        {
            ((PackageFlagsOverrideSetterTranslationCommon)((IPackageFlagsOverrideGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPackageFlagsOverride lhs,
            IPackageFlagsOverrideGetter rhs,
            out PackageFlagsOverride.ErrorMask errorMask,
            PackageFlagsOverride.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PackageFlagsOverrideSetterTranslationCommon)((IPackageFlagsOverrideGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PackageFlagsOverride.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPackageFlagsOverride lhs,
            IPackageFlagsOverrideGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PackageFlagsOverrideSetterTranslationCommon)((IPackageFlagsOverrideGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PackageFlagsOverride DeepCopy(
            this IPackageFlagsOverrideGetter item,
            PackageFlagsOverride.TranslationMask? copyMask = null)
        {
            return ((PackageFlagsOverrideSetterTranslationCommon)((IPackageFlagsOverrideGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PackageFlagsOverride DeepCopy(
            this IPackageFlagsOverrideGetter item,
            out PackageFlagsOverride.ErrorMask errorMask,
            PackageFlagsOverride.TranslationMask? copyMask = null)
        {
            return ((PackageFlagsOverrideSetterTranslationCommon)((IPackageFlagsOverrideGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PackageFlagsOverride DeepCopy(
            this IPackageFlagsOverrideGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PackageFlagsOverrideSetterTranslationCommon)((IPackageFlagsOverrideGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPackageFlagsOverride item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((PackageFlagsOverrideSetterCommon)((IPackageFlagsOverrideGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum PackageFlagsOverride_FieldIndex
    {
        SetFlags = 0,
        ClearFlags = 1,
        SetInterruptFlags = 2,
        ClearInterruptFlags = 3,
        PreferredSpeed = 4,
        Unknown = 5,
    }
    #endregion

    #region Registration
    internal partial class PackageFlagsOverride_Registration : ILoquiRegistration
    {
        public static readonly PackageFlagsOverride_Registration Instance = new PackageFlagsOverride_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(PackageFlagsOverride.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PackageFlagsOverride.ErrorMask);

        public static readonly Type ClassType = typeof(PackageFlagsOverride);

        public static readonly Type GetterType = typeof(IPackageFlagsOverrideGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPackageFlagsOverride);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.PackageFlagsOverride";

        public const string Name = "PackageFlagsOverride";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.PFO2;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.PFO2);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(PackageFlagsOverrideBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class PackageFlagsOverrideSetterCommon
    {
        public static readonly PackageFlagsOverrideSetterCommon Instance = new PackageFlagsOverrideSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPackageFlagsOverride item)
        {
            ClearPartial();
            item.SetFlags = default(Package.Flag);
            item.ClearFlags = default(Package.Flag);
            item.SetInterruptFlags = default(Package.InterruptFlag);
            item.ClearInterruptFlags = default(Package.InterruptFlag);
            item.PreferredSpeed = default(Package.Speed);
            item.Unknown = new byte[3];
        }
        
        #region Mutagen
        public void RemapLinks(IPackageFlagsOverride obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPackageFlagsOverride item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.PFO2),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: PackageFlagsOverrideBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class PackageFlagsOverrideCommon
    {
        public static readonly PackageFlagsOverrideCommon Instance = new PackageFlagsOverrideCommon();

        public PackageFlagsOverride.Mask<bool> GetEqualsMask(
            IPackageFlagsOverrideGetter item,
            IPackageFlagsOverrideGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PackageFlagsOverride.Mask<bool>(false);
            ((PackageFlagsOverrideCommon)((IPackageFlagsOverrideGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPackageFlagsOverrideGetter item,
            IPackageFlagsOverrideGetter rhs,
            PackageFlagsOverride.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.SetFlags = item.SetFlags == rhs.SetFlags;
            ret.ClearFlags = item.ClearFlags == rhs.ClearFlags;
            ret.SetInterruptFlags = item.SetInterruptFlags == rhs.SetInterruptFlags;
            ret.ClearInterruptFlags = item.ClearInterruptFlags == rhs.ClearInterruptFlags;
            ret.PreferredSpeed = item.PreferredSpeed == rhs.PreferredSpeed;
            ret.Unknown = MemoryExtensions.SequenceEqual(item.Unknown.Span, rhs.Unknown.Span);
        }
        
        public string Print(
            IPackageFlagsOverrideGetter item,
            string? name = null,
            PackageFlagsOverride.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IPackageFlagsOverrideGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PackageFlagsOverride.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"PackageFlagsOverride =>");
            }
            else
            {
                sb.AppendLine($"{name} (PackageFlagsOverride) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IPackageFlagsOverrideGetter item,
            StructuredStringBuilder sb,
            PackageFlagsOverride.Mask<bool>? printMask = null)
        {
            if (printMask?.SetFlags ?? true)
            {
                sb.AppendItem(item.SetFlags, "SetFlags");
            }
            if (printMask?.ClearFlags ?? true)
            {
                sb.AppendItem(item.ClearFlags, "ClearFlags");
            }
            if (printMask?.SetInterruptFlags ?? true)
            {
                sb.AppendItem(item.SetInterruptFlags, "SetInterruptFlags");
            }
            if (printMask?.ClearInterruptFlags ?? true)
            {
                sb.AppendItem(item.ClearInterruptFlags, "ClearInterruptFlags");
            }
            if (printMask?.PreferredSpeed ?? true)
            {
                sb.AppendItem(item.PreferredSpeed, "PreferredSpeed");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendLine($"Unknown => {SpanExt.ToHexString(item.Unknown)}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPackageFlagsOverrideGetter? lhs,
            IPackageFlagsOverrideGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)PackageFlagsOverride_FieldIndex.SetFlags) ?? true))
            {
                if (lhs.SetFlags != rhs.SetFlags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PackageFlagsOverride_FieldIndex.ClearFlags) ?? true))
            {
                if (lhs.ClearFlags != rhs.ClearFlags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PackageFlagsOverride_FieldIndex.SetInterruptFlags) ?? true))
            {
                if (lhs.SetInterruptFlags != rhs.SetInterruptFlags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PackageFlagsOverride_FieldIndex.ClearInterruptFlags) ?? true))
            {
                if (lhs.ClearInterruptFlags != rhs.ClearInterruptFlags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PackageFlagsOverride_FieldIndex.PreferredSpeed) ?? true))
            {
                if (lhs.PreferredSpeed != rhs.PreferredSpeed) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PackageFlagsOverride_FieldIndex.Unknown) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.Unknown.Span, rhs.Unknown.Span)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IPackageFlagsOverrideGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.SetFlags);
            hash.Add(item.ClearFlags);
            hash.Add(item.SetInterruptFlags);
            hash.Add(item.ClearInterruptFlags);
            hash.Add(item.PreferredSpeed);
            hash.Add(item.Unknown);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return PackageFlagsOverride.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IPackageFlagsOverrideGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class PackageFlagsOverrideSetterTranslationCommon
    {
        public static readonly PackageFlagsOverrideSetterTranslationCommon Instance = new PackageFlagsOverrideSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPackageFlagsOverride item,
            IPackageFlagsOverrideGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)PackageFlagsOverride_FieldIndex.SetFlags) ?? true))
            {
                item.SetFlags = rhs.SetFlags;
            }
            if ((copyMask?.GetShouldTranslate((int)PackageFlagsOverride_FieldIndex.ClearFlags) ?? true))
            {
                item.ClearFlags = rhs.ClearFlags;
            }
            if ((copyMask?.GetShouldTranslate((int)PackageFlagsOverride_FieldIndex.SetInterruptFlags) ?? true))
            {
                item.SetInterruptFlags = rhs.SetInterruptFlags;
            }
            if ((copyMask?.GetShouldTranslate((int)PackageFlagsOverride_FieldIndex.ClearInterruptFlags) ?? true))
            {
                item.ClearInterruptFlags = rhs.ClearInterruptFlags;
            }
            if ((copyMask?.GetShouldTranslate((int)PackageFlagsOverride_FieldIndex.PreferredSpeed) ?? true))
            {
                item.PreferredSpeed = rhs.PreferredSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)PackageFlagsOverride_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown.ToArray();
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IPackageFlagsOverride item,
            IPackageFlagsOverrideGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public PackageFlagsOverride DeepCopy(
            IPackageFlagsOverrideGetter item,
            PackageFlagsOverride.TranslationMask? copyMask = null)
        {
            PackageFlagsOverride ret = (PackageFlagsOverride)((PackageFlagsOverrideCommon)((IPackageFlagsOverrideGetter)item).CommonInstance()!).GetNew();
            ((PackageFlagsOverrideSetterTranslationCommon)((IPackageFlagsOverrideGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PackageFlagsOverride DeepCopy(
            IPackageFlagsOverrideGetter item,
            out PackageFlagsOverride.ErrorMask errorMask,
            PackageFlagsOverride.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PackageFlagsOverride ret = (PackageFlagsOverride)((PackageFlagsOverrideCommon)((IPackageFlagsOverrideGetter)item).CommonInstance()!).GetNew();
            ((PackageFlagsOverrideSetterTranslationCommon)((IPackageFlagsOverrideGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PackageFlagsOverride.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PackageFlagsOverride DeepCopy(
            IPackageFlagsOverrideGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PackageFlagsOverride ret = (PackageFlagsOverride)((PackageFlagsOverrideCommon)((IPackageFlagsOverrideGetter)item).CommonInstance()!).GetNew();
            ((PackageFlagsOverrideSetterTranslationCommon)((IPackageFlagsOverrideGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class PackageFlagsOverride
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PackageFlagsOverride_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => PackageFlagsOverride_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PackageFlagsOverrideCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return PackageFlagsOverrideSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PackageFlagsOverrideSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPackageFlagsOverrideGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IPackageFlagsOverrideGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IPackageFlagsOverrideGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class PackageFlagsOverrideBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly PackageFlagsOverrideBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IPackageFlagsOverrideGetter item,
            MutagenWriter writer)
        {
            EnumBinaryTranslation<Package.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.SetFlags,
                length: 4);
            EnumBinaryTranslation<Package.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.ClearFlags,
                length: 4);
            EnumBinaryTranslation<Package.InterruptFlag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.SetInterruptFlags,
                length: 2);
            EnumBinaryTranslation<Package.InterruptFlag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.ClearInterruptFlags,
                length: 2);
            EnumBinaryTranslation<Package.Speed, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.PreferredSpeed,
                length: 1);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unknown);
        }

        public void Write(
            MutagenWriter writer,
            IPackageFlagsOverrideGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.PFO2),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IPackageFlagsOverrideGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class PackageFlagsOverrideBinaryCreateTranslation
    {
        public static readonly PackageFlagsOverrideBinaryCreateTranslation Instance = new PackageFlagsOverrideBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IPackageFlagsOverride item,
            MutagenFrame frame)
        {
            item.SetFlags = EnumBinaryTranslation<Package.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
            item.ClearFlags = EnumBinaryTranslation<Package.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
            item.SetInterruptFlags = EnumBinaryTranslation<Package.InterruptFlag, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 2);
            item.ClearInterruptFlags = EnumBinaryTranslation<Package.InterruptFlag, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 2);
            item.PreferredSpeed = EnumBinaryTranslation<Package.Speed, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 1);
            item.Unknown = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(3));
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class PackageFlagsOverrideBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IPackageFlagsOverrideGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PackageFlagsOverrideBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class PackageFlagsOverrideBinaryOverlay :
        PluginBinaryOverlay,
        IPackageFlagsOverrideGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PackageFlagsOverride_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => PackageFlagsOverride_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PackageFlagsOverrideCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PackageFlagsOverrideSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPackageFlagsOverrideGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IPackageFlagsOverrideGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IPackageFlagsOverrideGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PackageFlagsOverrideBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PackageFlagsOverrideBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Package.Flag SetFlags => (Package.Flag)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0x0, 0x4));
        public Package.Flag ClearFlags => (Package.Flag)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0x4, 0x4));
        public Package.InterruptFlag SetInterruptFlags => (Package.InterruptFlag)BinaryPrimitives.ReadUInt16LittleEndian(_structData.Span.Slice(0x8, 0x2));
        public Package.InterruptFlag ClearInterruptFlags => (Package.InterruptFlag)BinaryPrimitives.ReadUInt16LittleEndian(_structData.Span.Slice(0xA, 0x2));
        public Package.Speed PreferredSpeed => (Package.Speed)_structData.Span.Slice(0xC, 0x1)[0];
        public ReadOnlyMemorySlice<Byte> Unknown => _structData.Span.Slice(0xD, 0x3).ToArray();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PackageFlagsOverrideBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IPackageFlagsOverrideGetter PackageFlagsOverrideFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x10,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new PackageFlagsOverrideBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x10 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IPackageFlagsOverrideGetter PackageFlagsOverrideFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return PackageFlagsOverrideFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PackageFlagsOverrideMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPackageFlagsOverrideGetter rhs) return false;
            return ((PackageFlagsOverrideCommon)((IPackageFlagsOverrideGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPackageFlagsOverrideGetter? obj)
        {
            return ((PackageFlagsOverrideCommon)((IPackageFlagsOverrideGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PackageFlagsOverrideCommon)((IPackageFlagsOverrideGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

