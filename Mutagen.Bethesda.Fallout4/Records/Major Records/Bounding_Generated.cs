/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Bounding :
        IBounding,
        IEquatable<IBoundingGetter>,
        ILoquiObjectSetter<Bounding>
    {
        #region Ctor
        public Bounding()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Width
        public Single Width { get; set; } = default(Single);
        #endregion
        #region Height
        public Single Height { get; set; } = default(Single);
        #endregion
        #region Position
        public P3Float Position { get; set; } = default(P3Float);
        #endregion
        #region RotationQ1
        public Single RotationQ1 { get; set; } = default(Single);
        #endregion
        #region RotationQ2
        public Single RotationQ2 { get; set; } = default(Single);
        #endregion
        #region RotationQ3
        public Single RotationQ3 { get; set; } = default(Single);
        #endregion
        #region RotationQ4
        public Single RotationQ4 { get; set; } = default(Single);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BoundingMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBoundingGetter rhs) return false;
            return ((BoundingCommon)((IBoundingGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBoundingGetter? obj)
        {
            return ((BoundingCommon)((IBoundingGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BoundingCommon)((IBoundingGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Width = initialValue;
                this.Height = initialValue;
                this.Position = initialValue;
                this.RotationQ1 = initialValue;
                this.RotationQ2 = initialValue;
                this.RotationQ3 = initialValue;
                this.RotationQ4 = initialValue;
            }

            public Mask(
                TItem Width,
                TItem Height,
                TItem Position,
                TItem RotationQ1,
                TItem RotationQ2,
                TItem RotationQ3,
                TItem RotationQ4)
            {
                this.Width = Width;
                this.Height = Height;
                this.Position = Position;
                this.RotationQ1 = RotationQ1;
                this.RotationQ2 = RotationQ2;
                this.RotationQ3 = RotationQ3;
                this.RotationQ4 = RotationQ4;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Width;
            public TItem Height;
            public TItem Position;
            public TItem RotationQ1;
            public TItem RotationQ2;
            public TItem RotationQ3;
            public TItem RotationQ4;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Width, rhs.Width)) return false;
                if (!object.Equals(this.Height, rhs.Height)) return false;
                if (!object.Equals(this.Position, rhs.Position)) return false;
                if (!object.Equals(this.RotationQ1, rhs.RotationQ1)) return false;
                if (!object.Equals(this.RotationQ2, rhs.RotationQ2)) return false;
                if (!object.Equals(this.RotationQ3, rhs.RotationQ3)) return false;
                if (!object.Equals(this.RotationQ4, rhs.RotationQ4)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Width);
                hash.Add(this.Height);
                hash.Add(this.Position);
                hash.Add(this.RotationQ1);
                hash.Add(this.RotationQ2);
                hash.Add(this.RotationQ3);
                hash.Add(this.RotationQ4);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Width)) return false;
                if (!eval(this.Height)) return false;
                if (!eval(this.Position)) return false;
                if (!eval(this.RotationQ1)) return false;
                if (!eval(this.RotationQ2)) return false;
                if (!eval(this.RotationQ3)) return false;
                if (!eval(this.RotationQ4)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Width)) return true;
                if (eval(this.Height)) return true;
                if (eval(this.Position)) return true;
                if (eval(this.RotationQ1)) return true;
                if (eval(this.RotationQ2)) return true;
                if (eval(this.RotationQ3)) return true;
                if (eval(this.RotationQ4)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Bounding.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Width = eval(this.Width);
                obj.Height = eval(this.Height);
                obj.Position = eval(this.Position);
                obj.RotationQ1 = eval(this.RotationQ1);
                obj.RotationQ2 = eval(this.RotationQ2);
                obj.RotationQ3 = eval(this.RotationQ3);
                obj.RotationQ4 = eval(this.RotationQ4);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Bounding.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Bounding.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Bounding.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Width ?? true)
                    {
                        sb.AppendItem(Width, "Width");
                    }
                    if (printMask?.Height ?? true)
                    {
                        sb.AppendItem(Height, "Height");
                    }
                    if (printMask?.Position ?? true)
                    {
                        sb.AppendItem(Position, "Position");
                    }
                    if (printMask?.RotationQ1 ?? true)
                    {
                        sb.AppendItem(RotationQ1, "RotationQ1");
                    }
                    if (printMask?.RotationQ2 ?? true)
                    {
                        sb.AppendItem(RotationQ2, "RotationQ2");
                    }
                    if (printMask?.RotationQ3 ?? true)
                    {
                        sb.AppendItem(RotationQ3, "RotationQ3");
                    }
                    if (printMask?.RotationQ4 ?? true)
                    {
                        sb.AppendItem(RotationQ4, "RotationQ4");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Width;
            public Exception? Height;
            public Exception? Position;
            public Exception? RotationQ1;
            public Exception? RotationQ2;
            public Exception? RotationQ3;
            public Exception? RotationQ4;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Bounding_FieldIndex enu = (Bounding_FieldIndex)index;
                switch (enu)
                {
                    case Bounding_FieldIndex.Width:
                        return Width;
                    case Bounding_FieldIndex.Height:
                        return Height;
                    case Bounding_FieldIndex.Position:
                        return Position;
                    case Bounding_FieldIndex.RotationQ1:
                        return RotationQ1;
                    case Bounding_FieldIndex.RotationQ2:
                        return RotationQ2;
                    case Bounding_FieldIndex.RotationQ3:
                        return RotationQ3;
                    case Bounding_FieldIndex.RotationQ4:
                        return RotationQ4;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Bounding_FieldIndex enu = (Bounding_FieldIndex)index;
                switch (enu)
                {
                    case Bounding_FieldIndex.Width:
                        this.Width = ex;
                        break;
                    case Bounding_FieldIndex.Height:
                        this.Height = ex;
                        break;
                    case Bounding_FieldIndex.Position:
                        this.Position = ex;
                        break;
                    case Bounding_FieldIndex.RotationQ1:
                        this.RotationQ1 = ex;
                        break;
                    case Bounding_FieldIndex.RotationQ2:
                        this.RotationQ2 = ex;
                        break;
                    case Bounding_FieldIndex.RotationQ3:
                        this.RotationQ3 = ex;
                        break;
                    case Bounding_FieldIndex.RotationQ4:
                        this.RotationQ4 = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Bounding_FieldIndex enu = (Bounding_FieldIndex)index;
                switch (enu)
                {
                    case Bounding_FieldIndex.Width:
                        this.Width = (Exception?)obj;
                        break;
                    case Bounding_FieldIndex.Height:
                        this.Height = (Exception?)obj;
                        break;
                    case Bounding_FieldIndex.Position:
                        this.Position = (Exception?)obj;
                        break;
                    case Bounding_FieldIndex.RotationQ1:
                        this.RotationQ1 = (Exception?)obj;
                        break;
                    case Bounding_FieldIndex.RotationQ2:
                        this.RotationQ2 = (Exception?)obj;
                        break;
                    case Bounding_FieldIndex.RotationQ3:
                        this.RotationQ3 = (Exception?)obj;
                        break;
                    case Bounding_FieldIndex.RotationQ4:
                        this.RotationQ4 = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Width != null) return true;
                if (Height != null) return true;
                if (Position != null) return true;
                if (RotationQ1 != null) return true;
                if (RotationQ2 != null) return true;
                if (RotationQ3 != null) return true;
                if (RotationQ4 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Width, "Width");
                }
                {
                    sb.AppendItem(Height, "Height");
                }
                {
                    sb.AppendItem(Position, "Position");
                }
                {
                    sb.AppendItem(RotationQ1, "RotationQ1");
                }
                {
                    sb.AppendItem(RotationQ2, "RotationQ2");
                }
                {
                    sb.AppendItem(RotationQ3, "RotationQ3");
                }
                {
                    sb.AppendItem(RotationQ4, "RotationQ4");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Width = this.Width.Combine(rhs.Width);
                ret.Height = this.Height.Combine(rhs.Height);
                ret.Position = this.Position.Combine(rhs.Position);
                ret.RotationQ1 = this.RotationQ1.Combine(rhs.RotationQ1);
                ret.RotationQ2 = this.RotationQ2.Combine(rhs.RotationQ2);
                ret.RotationQ3 = this.RotationQ3.Combine(rhs.RotationQ3);
                ret.RotationQ4 = this.RotationQ4.Combine(rhs.RotationQ4);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Width;
            public bool Height;
            public bool Position;
            public bool RotationQ1;
            public bool RotationQ2;
            public bool RotationQ3;
            public bool RotationQ4;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Width = defaultOn;
                this.Height = defaultOn;
                this.Position = defaultOn;
                this.RotationQ1 = defaultOn;
                this.RotationQ2 = defaultOn;
                this.RotationQ3 = defaultOn;
                this.RotationQ4 = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Width, null));
                ret.Add((Height, null));
                ret.Add((Position, null));
                ret.Add((RotationQ1, null));
                ret.Add((RotationQ2, null));
                ret.Add((RotationQ3, null));
                ret.Add((RotationQ4, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BoundingBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BoundingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static Bounding CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Bounding();
            ((BoundingSetterCommon)((IBoundingGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Bounding item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((BoundingSetterCommon)((IBoundingGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Bounding GetNew()
        {
            return new Bounding();
        }

    }
    #endregion

    #region Interface
    public partial interface IBounding :
        IBoundingGetter,
        ILoquiObjectSetter<IBounding>
    {
        new Single Width { get; set; }
        new Single Height { get; set; }
        new P3Float Position { get; set; }
        new Single RotationQ1 { get; set; }
        new Single RotationQ2 { get; set; }
        new Single RotationQ3 { get; set; }
        new Single RotationQ4 { get; set; }
    }

    public partial interface IBoundingGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IBoundingGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => Bounding_Registration.Instance;
        Single Width { get; }
        Single Height { get; }
        P3Float Position { get; }
        Single RotationQ1 { get; }
        Single RotationQ2 { get; }
        Single RotationQ3 { get; }
        Single RotationQ4 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class BoundingMixIn
    {
        public static void Clear(this IBounding item)
        {
            ((BoundingSetterCommon)((IBoundingGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Bounding.Mask<bool> GetEqualsMask(
            this IBoundingGetter item,
            IBoundingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BoundingCommon)((IBoundingGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IBoundingGetter item,
            string? name = null,
            Bounding.Mask<bool>? printMask = null)
        {
            return ((BoundingCommon)((IBoundingGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IBoundingGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Bounding.Mask<bool>? printMask = null)
        {
            ((BoundingCommon)((IBoundingGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IBoundingGetter item,
            IBoundingGetter rhs,
            Bounding.TranslationMask? equalsMask = null)
        {
            return ((BoundingCommon)((IBoundingGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IBounding lhs,
            IBoundingGetter rhs)
        {
            ((BoundingSetterTranslationCommon)((IBoundingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IBounding lhs,
            IBoundingGetter rhs,
            Bounding.TranslationMask? copyMask = null)
        {
            ((BoundingSetterTranslationCommon)((IBoundingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IBounding lhs,
            IBoundingGetter rhs,
            out Bounding.ErrorMask errorMask,
            Bounding.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((BoundingSetterTranslationCommon)((IBoundingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Bounding.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IBounding lhs,
            IBoundingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((BoundingSetterTranslationCommon)((IBoundingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Bounding DeepCopy(
            this IBoundingGetter item,
            Bounding.TranslationMask? copyMask = null)
        {
            return ((BoundingSetterTranslationCommon)((IBoundingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Bounding DeepCopy(
            this IBoundingGetter item,
            out Bounding.ErrorMask errorMask,
            Bounding.TranslationMask? copyMask = null)
        {
            return ((BoundingSetterTranslationCommon)((IBoundingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Bounding DeepCopy(
            this IBoundingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((BoundingSetterTranslationCommon)((IBoundingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IBounding item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((BoundingSetterCommon)((IBoundingGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum Bounding_FieldIndex
    {
        Width = 0,
        Height = 1,
        Position = 2,
        RotationQ1 = 3,
        RotationQ2 = 4,
        RotationQ3 = 5,
        RotationQ4 = 6,
    }
    #endregion

    #region Registration
    internal partial class Bounding_Registration : ILoquiRegistration
    {
        public static readonly Bounding_Registration Instance = new Bounding_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(Bounding.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Bounding.ErrorMask);

        public static readonly Type ClassType = typeof(Bounding);

        public static readonly Type GetterType = typeof(IBoundingGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IBounding);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.Bounding";

        public const string Name = "Bounding";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(BoundingBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class BoundingSetterCommon
    {
        public static readonly BoundingSetterCommon Instance = new BoundingSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IBounding item)
        {
            ClearPartial();
            item.Width = default(Single);
            item.Height = default(Single);
            item.Position = default(P3Float);
            item.RotationQ1 = default(Single);
            item.RotationQ2 = default(Single);
            item.RotationQ3 = default(Single);
            item.RotationQ4 = default(Single);
        }
        
        #region Mutagen
        public void RemapLinks(IBounding obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IBounding item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: BoundingBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class BoundingCommon
    {
        public static readonly BoundingCommon Instance = new BoundingCommon();

        public Bounding.Mask<bool> GetEqualsMask(
            IBoundingGetter item,
            IBoundingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Bounding.Mask<bool>(false);
            ((BoundingCommon)((IBoundingGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IBoundingGetter item,
            IBoundingGetter rhs,
            Bounding.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Width = item.Width.EqualsWithin(rhs.Width);
            ret.Height = item.Height.EqualsWithin(rhs.Height);
            ret.Position = item.Position.Equals(rhs.Position);
            ret.RotationQ1 = item.RotationQ1.EqualsWithin(rhs.RotationQ1);
            ret.RotationQ2 = item.RotationQ2.EqualsWithin(rhs.RotationQ2);
            ret.RotationQ3 = item.RotationQ3.EqualsWithin(rhs.RotationQ3);
            ret.RotationQ4 = item.RotationQ4.EqualsWithin(rhs.RotationQ4);
        }
        
        public string Print(
            IBoundingGetter item,
            string? name = null,
            Bounding.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IBoundingGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Bounding.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Bounding =>");
            }
            else
            {
                sb.AppendLine($"{name} (Bounding) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IBoundingGetter item,
            StructuredStringBuilder sb,
            Bounding.Mask<bool>? printMask = null)
        {
            if (printMask?.Width ?? true)
            {
                sb.AppendItem(item.Width, "Width");
            }
            if (printMask?.Height ?? true)
            {
                sb.AppendItem(item.Height, "Height");
            }
            if (printMask?.Position ?? true)
            {
                sb.AppendItem(item.Position, "Position");
            }
            if (printMask?.RotationQ1 ?? true)
            {
                sb.AppendItem(item.RotationQ1, "RotationQ1");
            }
            if (printMask?.RotationQ2 ?? true)
            {
                sb.AppendItem(item.RotationQ2, "RotationQ2");
            }
            if (printMask?.RotationQ3 ?? true)
            {
                sb.AppendItem(item.RotationQ3, "RotationQ3");
            }
            if (printMask?.RotationQ4 ?? true)
            {
                sb.AppendItem(item.RotationQ4, "RotationQ4");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IBoundingGetter? lhs,
            IBoundingGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)Bounding_FieldIndex.Width) ?? true))
            {
                if (!lhs.Width.EqualsWithin(rhs.Width)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Bounding_FieldIndex.Height) ?? true))
            {
                if (!lhs.Height.EqualsWithin(rhs.Height)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Bounding_FieldIndex.Position) ?? true))
            {
                if (!lhs.Position.Equals(rhs.Position)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Bounding_FieldIndex.RotationQ1) ?? true))
            {
                if (!lhs.RotationQ1.EqualsWithin(rhs.RotationQ1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Bounding_FieldIndex.RotationQ2) ?? true))
            {
                if (!lhs.RotationQ2.EqualsWithin(rhs.RotationQ2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Bounding_FieldIndex.RotationQ3) ?? true))
            {
                if (!lhs.RotationQ3.EqualsWithin(rhs.RotationQ3)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Bounding_FieldIndex.RotationQ4) ?? true))
            {
                if (!lhs.RotationQ4.EqualsWithin(rhs.RotationQ4)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IBoundingGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Width);
            hash.Add(item.Height);
            hash.Add(item.Position);
            hash.Add(item.RotationQ1);
            hash.Add(item.RotationQ2);
            hash.Add(item.RotationQ3);
            hash.Add(item.RotationQ4);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Bounding.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IBoundingGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class BoundingSetterTranslationCommon
    {
        public static readonly BoundingSetterTranslationCommon Instance = new BoundingSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IBounding item,
            IBoundingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)Bounding_FieldIndex.Width) ?? true))
            {
                item.Width = rhs.Width;
            }
            if ((copyMask?.GetShouldTranslate((int)Bounding_FieldIndex.Height) ?? true))
            {
                item.Height = rhs.Height;
            }
            if ((copyMask?.GetShouldTranslate((int)Bounding_FieldIndex.Position) ?? true))
            {
                item.Position = rhs.Position;
            }
            if ((copyMask?.GetShouldTranslate((int)Bounding_FieldIndex.RotationQ1) ?? true))
            {
                item.RotationQ1 = rhs.RotationQ1;
            }
            if ((copyMask?.GetShouldTranslate((int)Bounding_FieldIndex.RotationQ2) ?? true))
            {
                item.RotationQ2 = rhs.RotationQ2;
            }
            if ((copyMask?.GetShouldTranslate((int)Bounding_FieldIndex.RotationQ3) ?? true))
            {
                item.RotationQ3 = rhs.RotationQ3;
            }
            if ((copyMask?.GetShouldTranslate((int)Bounding_FieldIndex.RotationQ4) ?? true))
            {
                item.RotationQ4 = rhs.RotationQ4;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IBounding item,
            IBoundingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public Bounding DeepCopy(
            IBoundingGetter item,
            Bounding.TranslationMask? copyMask = null)
        {
            Bounding ret = (Bounding)((BoundingCommon)((IBoundingGetter)item).CommonInstance()!).GetNew();
            ((BoundingSetterTranslationCommon)((IBoundingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Bounding DeepCopy(
            IBoundingGetter item,
            out Bounding.ErrorMask errorMask,
            Bounding.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Bounding ret = (Bounding)((BoundingCommon)((IBoundingGetter)item).CommonInstance()!).GetNew();
            ((BoundingSetterTranslationCommon)((IBoundingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Bounding.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Bounding DeepCopy(
            IBoundingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Bounding ret = (Bounding)((BoundingCommon)((IBoundingGetter)item).CommonInstance()!).GetNew();
            ((BoundingSetterTranslationCommon)((IBoundingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Bounding
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Bounding_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => Bounding_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BoundingCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return BoundingSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BoundingSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBoundingGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IBoundingGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IBoundingGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class BoundingBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly BoundingBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IBoundingGetter item,
            MutagenWriter writer)
        {
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Width);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Height);
            P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Position);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.RotationQ1);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.RotationQ2);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.RotationQ3);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.RotationQ4);
        }

        public void Write(
            MutagenWriter writer,
            IBoundingGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IBoundingGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class BoundingBinaryCreateTranslation
    {
        public static readonly BoundingBinaryCreateTranslation Instance = new BoundingBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IBounding item,
            MutagenFrame frame)
        {
            item.Width = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Height = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Position = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.RotationQ1 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.RotationQ2 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.RotationQ3 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.RotationQ4 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class BoundingBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IBoundingGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BoundingBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class BoundingBinaryOverlay :
        PluginBinaryOverlay,
        IBoundingGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Bounding_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => Bounding_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BoundingCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BoundingSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBoundingGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IBoundingGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IBoundingGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BoundingBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BoundingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Single Width => _structData.Slice(0x0, 0x4).Float();
        public Single Height => _structData.Slice(0x4, 0x4).Float();
        public P3Float Position => P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_structData.Slice(0x8, 0xC));
        public Single RotationQ1 => _structData.Slice(0x14, 0x4).Float();
        public Single RotationQ2 => _structData.Slice(0x18, 0x4).Float();
        public Single RotationQ3 => _structData.Slice(0x1C, 0x4).Float();
        public Single RotationQ4 => _structData.Slice(0x20, 0x4).Float();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected BoundingBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IBoundingGetter BoundingFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x24,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new BoundingBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x24;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IBoundingGetter BoundingFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return BoundingFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BoundingMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBoundingGetter rhs) return false;
            return ((BoundingCommon)((IBoundingGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBoundingGetter? obj)
        {
            return ((BoundingCommon)((IBoundingGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BoundingCommon)((IBoundingGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

