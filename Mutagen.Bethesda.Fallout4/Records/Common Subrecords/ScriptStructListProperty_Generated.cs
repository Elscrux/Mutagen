/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class ScriptStructListProperty :
        ScriptProperty,
        IEquatable<IScriptStructListPropertyGetter>,
        ILoquiObjectSetter<ScriptStructListProperty>,
        IScriptStructListProperty
    {
        #region Ctor
        public ScriptStructListProperty()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Structs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ScriptStructProperty> _Structs = new ExtendedList<ScriptStructProperty>();
        public ExtendedList<ScriptStructProperty> Structs
        {
            get => this._Structs;
            init => this._Structs = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IScriptStructPropertyGetter> IScriptStructListPropertyGetter.Structs => _Structs;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ScriptStructListPropertyMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IScriptStructListPropertyGetter rhs) return false;
            return ((ScriptStructListPropertyCommon)((IScriptStructListPropertyGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IScriptStructListPropertyGetter? obj)
        {
            return ((ScriptStructListPropertyCommon)((IScriptStructListPropertyGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ScriptStructListPropertyCommon)((IScriptStructListPropertyGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            ScriptProperty.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Structs = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ScriptStructProperty.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ScriptStructProperty.Mask<TItem>?>>());
            }

            public Mask(
                TItem Name,
                TItem Flags,
                TItem Structs)
            : base(
                Name: Name,
                Flags: Flags)
            {
                this.Structs = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ScriptStructProperty.Mask<TItem>?>>?>(Structs, Enumerable.Empty<MaskItemIndexed<TItem, ScriptStructProperty.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ScriptStructProperty.Mask<TItem>?>>?>? Structs;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Structs, rhs.Structs)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Structs);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Structs != null)
                {
                    if (!eval(this.Structs.Overall)) return false;
                    if (this.Structs.Specific != null)
                    {
                        foreach (var item in this.Structs.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Structs != null)
                {
                    if (eval(this.Structs.Overall)) return true;
                    if (this.Structs.Specific != null)
                    {
                        foreach (var item in this.Structs.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ScriptStructListProperty.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Structs != null)
                {
                    obj.Structs = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ScriptStructProperty.Mask<R>?>>?>(eval(this.Structs.Overall), Enumerable.Empty<MaskItemIndexed<R, ScriptStructProperty.Mask<R>?>>());
                    if (Structs.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ScriptStructProperty.Mask<R>?>>();
                        obj.Structs.Specific = l;
                        foreach (var item in Structs.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, ScriptStructProperty.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, ScriptStructProperty.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ScriptStructListProperty.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ScriptStructListProperty.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ScriptStructListProperty.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if ((printMask?.Structs?.Overall ?? true)
                        && Structs is {} StructsItem)
                    {
                        fg.AppendLine("Structs =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(StructsItem.Overall);
                            if (StructsItem.Specific != null)
                            {
                                foreach (var subItem in StructsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            ScriptProperty.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ScriptStructProperty.ErrorMask?>>?>? Structs;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ScriptStructListProperty_FieldIndex enu = (ScriptStructListProperty_FieldIndex)index;
                switch (enu)
                {
                    case ScriptStructListProperty_FieldIndex.Structs:
                        return Structs;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ScriptStructListProperty_FieldIndex enu = (ScriptStructListProperty_FieldIndex)index;
                switch (enu)
                {
                    case ScriptStructListProperty_FieldIndex.Structs:
                        this.Structs = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ScriptStructProperty.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ScriptStructListProperty_FieldIndex enu = (ScriptStructListProperty_FieldIndex)index;
                switch (enu)
                {
                    case ScriptStructListProperty_FieldIndex.Structs:
                        this.Structs = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ScriptStructProperty.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Structs != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                if (Structs is {} StructsItem)
                {
                    fg.AppendLine("Structs =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(StructsItem.Overall);
                        if (StructsItem.Specific != null)
                        {
                            foreach (var subItem in StructsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Structs = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ScriptStructProperty.ErrorMask?>>?>(ExceptionExt.Combine(this.Structs?.Overall, rhs.Structs?.Overall), ExceptionExt.Combine(this.Structs?.Specific, rhs.Structs?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ScriptProperty.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ScriptStructProperty.TranslationMask? Structs;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Structs == null ? DefaultOn : !Structs.GetCrystal().CopyNothing, Structs?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ScriptStructListPropertyBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ScriptStructListPropertyBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static ScriptStructListProperty CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new ScriptStructListProperty();
            ((ScriptStructListPropertySetterCommon)((IScriptStructListPropertyGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ScriptStructListProperty item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ScriptStructListPropertySetterCommon)((IScriptStructListPropertyGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ScriptStructListProperty GetNew()
        {
            return new ScriptStructListProperty();
        }

    }
    #endregion

    #region Interface
    public partial interface IScriptStructListProperty :
        ILoquiObjectSetter<IScriptStructListProperty>,
        INamedRequired,
        IScriptProperty,
        IScriptStructListPropertyGetter
    {
        new ExtendedList<ScriptStructProperty> Structs { get; }
    }

    public partial interface IScriptStructListPropertyGetter :
        IScriptPropertyGetter,
        IBinaryItem,
        ILoquiObject<IScriptStructListPropertyGetter>,
        INamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => ScriptStructListProperty_Registration.Instance;
        IReadOnlyList<IScriptStructPropertyGetter> Structs { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ScriptStructListPropertyMixIn
    {
        public static void Clear(this IScriptStructListProperty item)
        {
            ((ScriptStructListPropertySetterCommon)((IScriptStructListPropertyGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ScriptStructListProperty.Mask<bool> GetEqualsMask(
            this IScriptStructListPropertyGetter item,
            IScriptStructListPropertyGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ScriptStructListPropertyCommon)((IScriptStructListPropertyGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IScriptStructListPropertyGetter item,
            string? name = null,
            ScriptStructListProperty.Mask<bool>? printMask = null)
        {
            return ((ScriptStructListPropertyCommon)((IScriptStructListPropertyGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IScriptStructListPropertyGetter item,
            FileGeneration fg,
            string? name = null,
            ScriptStructListProperty.Mask<bool>? printMask = null)
        {
            ((ScriptStructListPropertyCommon)((IScriptStructListPropertyGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IScriptStructListPropertyGetter item,
            IScriptStructListPropertyGetter rhs,
            ScriptStructListProperty.TranslationMask? equalsMask = null)
        {
            return ((ScriptStructListPropertyCommon)((IScriptStructListPropertyGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IScriptStructListProperty lhs,
            IScriptStructListPropertyGetter rhs,
            out ScriptStructListProperty.ErrorMask errorMask,
            ScriptStructListProperty.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ScriptStructListPropertySetterTranslationCommon)((IScriptStructListPropertyGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ScriptStructListProperty.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IScriptStructListProperty lhs,
            IScriptStructListPropertyGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ScriptStructListPropertySetterTranslationCommon)((IScriptStructListPropertyGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ScriptStructListProperty DeepCopy(
            this IScriptStructListPropertyGetter item,
            ScriptStructListProperty.TranslationMask? copyMask = null)
        {
            return ((ScriptStructListPropertySetterTranslationCommon)((IScriptStructListPropertyGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ScriptStructListProperty DeepCopy(
            this IScriptStructListPropertyGetter item,
            out ScriptStructListProperty.ErrorMask errorMask,
            ScriptStructListProperty.TranslationMask? copyMask = null)
        {
            return ((ScriptStructListPropertySetterTranslationCommon)((IScriptStructListPropertyGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ScriptStructListProperty DeepCopy(
            this IScriptStructListPropertyGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ScriptStructListPropertySetterTranslationCommon)((IScriptStructListPropertyGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IScriptStructListProperty item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((ScriptStructListPropertySetterCommon)((IScriptStructListPropertyGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum ScriptStructListProperty_FieldIndex
    {
        Name = 0,
        Flags = 1,
        Structs = 2,
    }
    #endregion

    #region Registration
    public partial class ScriptStructListProperty_Registration : ILoquiRegistration
    {
        public static readonly ScriptStructListProperty_Registration Instance = new ScriptStructListProperty_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 212,
            version: 0);

        public const string GUID = "06a4db94-b0bb-42fd-bfdf-18343fc53a61";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(ScriptStructListProperty.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ScriptStructListProperty.ErrorMask);

        public static readonly Type ClassType = typeof(ScriptStructListProperty);

        public static readonly Type GetterType = typeof(IScriptStructListPropertyGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IScriptStructListProperty);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.ScriptStructListProperty";

        public const string Name = "ScriptStructListProperty";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(ScriptStructListPropertyBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ScriptStructListPropertySetterCommon : ScriptPropertySetterCommon
    {
        public new static readonly ScriptStructListPropertySetterCommon Instance = new ScriptStructListPropertySetterCommon();

        partial void ClearPartial();
        
        public void Clear(IScriptStructListProperty item)
        {
            ClearPartial();
            item.Structs.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IScriptProperty item)
        {
            Clear(item: (IScriptStructListProperty)item);
        }
        
        #region Mutagen
        public void RemapLinks(IScriptStructListProperty obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IScriptStructListProperty item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ScriptStructListPropertyBinaryCreateTranslation.FillBinaryStructs);
        }
        
        public override void CopyInFromBinary(
            IScriptProperty item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (ScriptStructListProperty)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    public partial class ScriptStructListPropertyCommon : ScriptPropertyCommon
    {
        public new static readonly ScriptStructListPropertyCommon Instance = new ScriptStructListPropertyCommon();

        public ScriptStructListProperty.Mask<bool> GetEqualsMask(
            IScriptStructListPropertyGetter item,
            IScriptStructListPropertyGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ScriptStructListProperty.Mask<bool>(false);
            ((ScriptStructListPropertyCommon)((IScriptStructListPropertyGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IScriptStructListPropertyGetter item,
            IScriptStructListPropertyGetter rhs,
            ScriptStructListProperty.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Structs = item.Structs.CollectionEqualsHelper(
                rhs.Structs,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IScriptStructListPropertyGetter item,
            string? name = null,
            ScriptStructListProperty.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IScriptStructListPropertyGetter item,
            FileGeneration fg,
            string? name = null,
            ScriptStructListProperty.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ScriptStructListProperty =>");
            }
            else
            {
                fg.AppendLine($"{name} (ScriptStructListProperty) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IScriptStructListPropertyGetter item,
            FileGeneration fg,
            ScriptStructListProperty.Mask<bool>? printMask = null)
        {
            ScriptPropertyCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Structs?.Overall ?? true)
            {
                fg.AppendLine("Structs =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Structs)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public static ScriptStructListProperty_FieldIndex ConvertFieldIndex(ScriptProperty_FieldIndex index)
        {
            switch (index)
            {
                case ScriptProperty_FieldIndex.Name:
                    return (ScriptStructListProperty_FieldIndex)((int)index);
                case ScriptProperty_FieldIndex.Flags:
                    return (ScriptStructListProperty_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IScriptStructListPropertyGetter? lhs,
            IScriptStructListPropertyGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IScriptPropertyGetter)lhs, (IScriptPropertyGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)ScriptStructListProperty_FieldIndex.Structs) ?? true))
            {
                if (!lhs.Structs.SequenceEqualNullable(rhs.Structs)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IScriptPropertyGetter? lhs,
            IScriptPropertyGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IScriptStructListPropertyGetter?)lhs,
                rhs: rhs as IScriptStructListPropertyGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(IScriptStructListPropertyGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Structs);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IScriptPropertyGetter item)
        {
            return GetHashCode(item: (IScriptStructListPropertyGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ScriptStructListProperty.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IScriptStructListPropertyGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class ScriptStructListPropertySetterTranslationCommon : ScriptPropertySetterTranslationCommon
    {
        public new static readonly ScriptStructListPropertySetterTranslationCommon Instance = new ScriptStructListPropertySetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IScriptStructListProperty item,
            IScriptStructListPropertyGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IScriptProperty)item,
                (IScriptPropertyGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)ScriptStructListProperty_FieldIndex.Structs) ?? true))
            {
                errorMask?.PushIndex((int)ScriptStructListProperty_FieldIndex.Structs);
                try
                {
                    item.Structs.SetTo(
                        rhs.Structs
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        
        public override void DeepCopyIn(
            IScriptProperty item,
            IScriptPropertyGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IScriptStructListProperty)item,
                rhs: (IScriptStructListPropertyGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public ScriptStructListProperty DeepCopy(
            IScriptStructListPropertyGetter item,
            ScriptStructListProperty.TranslationMask? copyMask = null)
        {
            ScriptStructListProperty ret = (ScriptStructListProperty)((ScriptStructListPropertyCommon)((IScriptStructListPropertyGetter)item).CommonInstance()!).GetNew();
            ((ScriptStructListPropertySetterTranslationCommon)((IScriptStructListPropertyGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ScriptStructListProperty DeepCopy(
            IScriptStructListPropertyGetter item,
            out ScriptStructListProperty.ErrorMask errorMask,
            ScriptStructListProperty.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ScriptStructListProperty ret = (ScriptStructListProperty)((ScriptStructListPropertyCommon)((IScriptStructListPropertyGetter)item).CommonInstance()!).GetNew();
            ((ScriptStructListPropertySetterTranslationCommon)((IScriptStructListPropertyGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ScriptStructListProperty.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ScriptStructListProperty DeepCopy(
            IScriptStructListPropertyGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ScriptStructListProperty ret = (ScriptStructListProperty)((ScriptStructListPropertyCommon)((IScriptStructListPropertyGetter)item).CommonInstance()!).GetNew();
            ((ScriptStructListPropertySetterTranslationCommon)((IScriptStructListPropertyGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class ScriptStructListProperty
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptStructListProperty_Registration.Instance;
        public new static ScriptStructListProperty_Registration StaticRegistration => ScriptStructListProperty_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ScriptStructListPropertyCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ScriptStructListPropertySetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ScriptStructListPropertySetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ScriptStructListPropertyBinaryWriteTranslation :
        ScriptPropertyBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ScriptStructListPropertyBinaryWriteTranslation Instance = new ScriptStructListPropertyBinaryWriteTranslation();

        public static void WriteEmbedded(
            IScriptStructListPropertyGetter item,
            MutagenWriter writer)
        {
            ScriptPropertyBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IScriptStructPropertyGetter>.Instance.Write(
                writer: writer,
                items: item.Structs,
                countLengthLength: 4,
                transl: (MutagenWriter subWriter, IScriptStructPropertyGetter subItem, TypedWriteParams? conv) =>
                {
                    var Item = subItem;
                    ((ScriptStructPropertyBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IScriptStructListPropertyGetter item,
            TypedWriteParams? translationParams = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IScriptStructListPropertyGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IScriptPropertyGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IScriptStructListPropertyGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class ScriptStructListPropertyBinaryCreateTranslation : ScriptPropertyBinaryCreateTranslation
    {
        public new readonly static ScriptStructListPropertyBinaryCreateTranslation Instance = new ScriptStructListPropertyBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IScriptStructListProperty item,
            MutagenFrame frame)
        {
            ScriptPropertyBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            item.Structs.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ScriptStructProperty>.Instance.Parse(
                    amount: frame.ReadInt32(),
                    reader: frame,
                    transl: ScriptStructProperty.TryCreateFromBinary));
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ScriptStructListPropertyBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ScriptStructListPropertyBinaryOverlay :
        ScriptPropertyBinaryOverlay,
        IScriptStructListPropertyGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptStructListProperty_Registration.Instance;
        public new static ScriptStructListProperty_Registration StaticRegistration => ScriptStructListProperty_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ScriptStructListPropertyCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ScriptStructListPropertySetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ScriptStructListPropertyBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ScriptStructListPropertyBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Structs
        public IReadOnlyList<IScriptStructPropertyGetter> Structs => BinaryOverlayList.FactoryByLazyParse<ScriptStructPropertyBinaryOverlay>(_data, _package, countLength: 4, (s, p) => ScriptStructPropertyBinaryOverlay.ScriptStructPropertyFactory(s, p));
        protected int StructsEndingPos;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ScriptStructListPropertyBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ScriptStructListPropertyBinaryOverlay ScriptStructListPropertyFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new ScriptStructListPropertyBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            stream.Position += ret.StructsEndingPos;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ScriptStructListPropertyBinaryOverlay ScriptStructListPropertyFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return ScriptStructListPropertyFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ScriptStructListPropertyMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IScriptStructListPropertyGetter rhs) return false;
            return ((ScriptStructListPropertyCommon)((IScriptStructListPropertyGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IScriptStructListPropertyGetter? obj)
        {
            return ((ScriptStructListPropertyCommon)((IScriptStructListPropertyGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ScriptStructListPropertyCommon)((IScriptStructListPropertyGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

