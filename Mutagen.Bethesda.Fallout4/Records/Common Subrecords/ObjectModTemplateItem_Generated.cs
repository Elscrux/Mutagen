/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class ObjectModTemplateItem :
        IEquatable<IObjectModTemplateItemGetter>,
        ILoquiObjectSetter<ObjectModTemplateItem>,
        IObjectModTemplateItem
    {
        #region Ctor
        public ObjectModTemplateItem()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region IncludeCount
        public UInt32 IncludeCount { get; set; } = default;
        #endregion
        #region PropertyCount
        public UInt32 PropertyCount { get; set; } = default;
        #endregion
        #region LevelMin
        public Byte LevelMin { get; set; } = default;
        #endregion
        #region Unused1
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unused1 = new byte[1];
        public MemorySlice<Byte> Unused1
        {
            get => _Unused1;
            set => this._Unused1 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IObjectModTemplateItemGetter.Unused1 => this.Unused1;
        #endregion
        #region LevelMax
        public Byte LevelMax { get; set; } = default;
        #endregion
        #region Unused2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unused2 = new byte[1];
        public MemorySlice<Byte> Unused2
        {
            get => _Unused2;
            set => this._Unused2 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IObjectModTemplateItemGetter.Unused2 => this.Unused2;
        #endregion
        #region AddonIndex
        public Int16 AddonIndex { get; set; } = default;
        #endregion
        #region Default
        public Boolean Default { get; set; } = default;
        #endregion
        #region OKeywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>> _OKeywords = new ExtendedList<IFormLinkGetter<IKeywordGetter>>();
        public ExtendedList<IFormLinkGetter<IKeywordGetter>> OKeywords
        {
            get => this._OKeywords;
            init => this._OKeywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>> IObjectModTemplateItemGetter.OKeywords => _OKeywords;
        #endregion

        #endregion
        #region MinLevelForRanks
        public Byte MinLevelForRanks { get; set; } = default;
        #endregion
        #region AltLevelsPerTier
        public Byte AltLevelsPerTier { get; set; } = default;
        #endregion
        #region Includes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ObjectTemplateInclude> _Includes = new ExtendedList<ObjectTemplateInclude>();
        public ExtendedList<ObjectTemplateInclude> Includes
        {
            get => this._Includes;
            init => this._Includes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IObjectTemplateIncludeGetter> IObjectModTemplateItemGetter.Includes => _Includes;
        #endregion

        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ObjectModTemplateItemMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IObjectModTemplateItemGetter rhs) return false;
            return ((ObjectModTemplateItemCommon)((IObjectModTemplateItemGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IObjectModTemplateItemGetter? obj)
        {
            return ((ObjectModTemplateItemCommon)((IObjectModTemplateItemGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ObjectModTemplateItemCommon)((IObjectModTemplateItemGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.IncludeCount = initialValue;
                this.PropertyCount = initialValue;
                this.LevelMin = initialValue;
                this.Unused1 = initialValue;
                this.LevelMax = initialValue;
                this.Unused2 = initialValue;
                this.AddonIndex = initialValue;
                this.Default = initialValue;
                this.OKeywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.MinLevelForRanks = initialValue;
                this.AltLevelsPerTier = initialValue;
                this.Includes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectTemplateInclude.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ObjectTemplateInclude.Mask<TItem>?>>());
            }

            public Mask(
                TItem IncludeCount,
                TItem PropertyCount,
                TItem LevelMin,
                TItem Unused1,
                TItem LevelMax,
                TItem Unused2,
                TItem AddonIndex,
                TItem Default,
                TItem OKeywords,
                TItem MinLevelForRanks,
                TItem AltLevelsPerTier,
                TItem Includes)
            {
                this.IncludeCount = IncludeCount;
                this.PropertyCount = PropertyCount;
                this.LevelMin = LevelMin;
                this.Unused1 = Unused1;
                this.LevelMax = LevelMax;
                this.Unused2 = Unused2;
                this.AddonIndex = AddonIndex;
                this.Default = Default;
                this.OKeywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(OKeywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.MinLevelForRanks = MinLevelForRanks;
                this.AltLevelsPerTier = AltLevelsPerTier;
                this.Includes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectTemplateInclude.Mask<TItem>?>>?>(Includes, Enumerable.Empty<MaskItemIndexed<TItem, ObjectTemplateInclude.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem IncludeCount;
            public TItem PropertyCount;
            public TItem LevelMin;
            public TItem Unused1;
            public TItem LevelMax;
            public TItem Unused2;
            public TItem AddonIndex;
            public TItem Default;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? OKeywords;
            public TItem MinLevelForRanks;
            public TItem AltLevelsPerTier;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectTemplateInclude.Mask<TItem>?>>?>? Includes;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.IncludeCount, rhs.IncludeCount)) return false;
                if (!object.Equals(this.PropertyCount, rhs.PropertyCount)) return false;
                if (!object.Equals(this.LevelMin, rhs.LevelMin)) return false;
                if (!object.Equals(this.Unused1, rhs.Unused1)) return false;
                if (!object.Equals(this.LevelMax, rhs.LevelMax)) return false;
                if (!object.Equals(this.Unused2, rhs.Unused2)) return false;
                if (!object.Equals(this.AddonIndex, rhs.AddonIndex)) return false;
                if (!object.Equals(this.Default, rhs.Default)) return false;
                if (!object.Equals(this.OKeywords, rhs.OKeywords)) return false;
                if (!object.Equals(this.MinLevelForRanks, rhs.MinLevelForRanks)) return false;
                if (!object.Equals(this.AltLevelsPerTier, rhs.AltLevelsPerTier)) return false;
                if (!object.Equals(this.Includes, rhs.Includes)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.IncludeCount);
                hash.Add(this.PropertyCount);
                hash.Add(this.LevelMin);
                hash.Add(this.Unused1);
                hash.Add(this.LevelMax);
                hash.Add(this.Unused2);
                hash.Add(this.AddonIndex);
                hash.Add(this.Default);
                hash.Add(this.OKeywords);
                hash.Add(this.MinLevelForRanks);
                hash.Add(this.AltLevelsPerTier);
                hash.Add(this.Includes);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.IncludeCount)) return false;
                if (!eval(this.PropertyCount)) return false;
                if (!eval(this.LevelMin)) return false;
                if (!eval(this.Unused1)) return false;
                if (!eval(this.LevelMax)) return false;
                if (!eval(this.Unused2)) return false;
                if (!eval(this.AddonIndex)) return false;
                if (!eval(this.Default)) return false;
                if (this.OKeywords != null)
                {
                    if (!eval(this.OKeywords.Overall)) return false;
                    if (this.OKeywords.Specific != null)
                    {
                        foreach (var item in this.OKeywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.MinLevelForRanks)) return false;
                if (!eval(this.AltLevelsPerTier)) return false;
                if (this.Includes != null)
                {
                    if (!eval(this.Includes.Overall)) return false;
                    if (this.Includes.Specific != null)
                    {
                        foreach (var item in this.Includes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.IncludeCount)) return true;
                if (eval(this.PropertyCount)) return true;
                if (eval(this.LevelMin)) return true;
                if (eval(this.Unused1)) return true;
                if (eval(this.LevelMax)) return true;
                if (eval(this.Unused2)) return true;
                if (eval(this.AddonIndex)) return true;
                if (eval(this.Default)) return true;
                if (this.OKeywords != null)
                {
                    if (eval(this.OKeywords.Overall)) return true;
                    if (this.OKeywords.Specific != null)
                    {
                        foreach (var item in this.OKeywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.MinLevelForRanks)) return true;
                if (eval(this.AltLevelsPerTier)) return true;
                if (this.Includes != null)
                {
                    if (eval(this.Includes.Overall)) return true;
                    if (this.Includes.Specific != null)
                    {
                        foreach (var item in this.Includes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ObjectModTemplateItem.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.IncludeCount = eval(this.IncludeCount);
                obj.PropertyCount = eval(this.PropertyCount);
                obj.LevelMin = eval(this.LevelMin);
                obj.Unused1 = eval(this.Unused1);
                obj.LevelMax = eval(this.LevelMax);
                obj.Unused2 = eval(this.Unused2);
                obj.AddonIndex = eval(this.AddonIndex);
                obj.Default = eval(this.Default);
                if (OKeywords != null)
                {
                    obj.OKeywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.OKeywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (OKeywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.OKeywords.Specific = l;
                        foreach (var item in OKeywords.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.MinLevelForRanks = eval(this.MinLevelForRanks);
                obj.AltLevelsPerTier = eval(this.AltLevelsPerTier);
                if (Includes != null)
                {
                    obj.Includes = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ObjectTemplateInclude.Mask<R>?>>?>(eval(this.Includes.Overall), Enumerable.Empty<MaskItemIndexed<R, ObjectTemplateInclude.Mask<R>?>>());
                    if (Includes.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ObjectTemplateInclude.Mask<R>?>>();
                        obj.Includes.Specific = l;
                        foreach (var item in Includes.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, ObjectTemplateInclude.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, ObjectTemplateInclude.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ObjectModTemplateItem.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ObjectModTemplateItem.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ObjectModTemplateItem.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.IncludeCount ?? true)
                    {
                        fg.AppendItem(IncludeCount, "IncludeCount");
                    }
                    if (printMask?.PropertyCount ?? true)
                    {
                        fg.AppendItem(PropertyCount, "PropertyCount");
                    }
                    if (printMask?.LevelMin ?? true)
                    {
                        fg.AppendItem(LevelMin, "LevelMin");
                    }
                    if (printMask?.Unused1 ?? true)
                    {
                        fg.AppendItem(Unused1, "Unused1");
                    }
                    if (printMask?.LevelMax ?? true)
                    {
                        fg.AppendItem(LevelMax, "LevelMax");
                    }
                    if (printMask?.Unused2 ?? true)
                    {
                        fg.AppendItem(Unused2, "Unused2");
                    }
                    if (printMask?.AddonIndex ?? true)
                    {
                        fg.AppendItem(AddonIndex, "AddonIndex");
                    }
                    if (printMask?.Default ?? true)
                    {
                        fg.AppendItem(Default, "Default");
                    }
                    if ((printMask?.OKeywords?.Overall ?? true)
                        && OKeywords is {} OKeywordsItem)
                    {
                        fg.AppendLine("OKeywords =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(OKeywordsItem.Overall);
                            if (OKeywordsItem.Specific != null)
                            {
                                foreach (var subItem in OKeywordsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.MinLevelForRanks ?? true)
                    {
                        fg.AppendItem(MinLevelForRanks, "MinLevelForRanks");
                    }
                    if (printMask?.AltLevelsPerTier ?? true)
                    {
                        fg.AppendItem(AltLevelsPerTier, "AltLevelsPerTier");
                    }
                    if ((printMask?.Includes?.Overall ?? true)
                        && Includes is {} IncludesItem)
                    {
                        fg.AppendLine("Includes =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(IncludesItem.Overall);
                            if (IncludesItem.Specific != null)
                            {
                                foreach (var subItem in IncludesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? IncludeCount;
            public Exception? PropertyCount;
            public Exception? LevelMin;
            public Exception? Unused1;
            public Exception? LevelMax;
            public Exception? Unused2;
            public Exception? AddonIndex;
            public Exception? Default;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? OKeywords;
            public Exception? MinLevelForRanks;
            public Exception? AltLevelsPerTier;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectTemplateInclude.ErrorMask?>>?>? Includes;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ObjectModTemplateItem_FieldIndex enu = (ObjectModTemplateItem_FieldIndex)index;
                switch (enu)
                {
                    case ObjectModTemplateItem_FieldIndex.IncludeCount:
                        return IncludeCount;
                    case ObjectModTemplateItem_FieldIndex.PropertyCount:
                        return PropertyCount;
                    case ObjectModTemplateItem_FieldIndex.LevelMin:
                        return LevelMin;
                    case ObjectModTemplateItem_FieldIndex.Unused1:
                        return Unused1;
                    case ObjectModTemplateItem_FieldIndex.LevelMax:
                        return LevelMax;
                    case ObjectModTemplateItem_FieldIndex.Unused2:
                        return Unused2;
                    case ObjectModTemplateItem_FieldIndex.AddonIndex:
                        return AddonIndex;
                    case ObjectModTemplateItem_FieldIndex.Default:
                        return Default;
                    case ObjectModTemplateItem_FieldIndex.OKeywords:
                        return OKeywords;
                    case ObjectModTemplateItem_FieldIndex.MinLevelForRanks:
                        return MinLevelForRanks;
                    case ObjectModTemplateItem_FieldIndex.AltLevelsPerTier:
                        return AltLevelsPerTier;
                    case ObjectModTemplateItem_FieldIndex.Includes:
                        return Includes;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                ObjectModTemplateItem_FieldIndex enu = (ObjectModTemplateItem_FieldIndex)index;
                switch (enu)
                {
                    case ObjectModTemplateItem_FieldIndex.IncludeCount:
                        this.IncludeCount = ex;
                        break;
                    case ObjectModTemplateItem_FieldIndex.PropertyCount:
                        this.PropertyCount = ex;
                        break;
                    case ObjectModTemplateItem_FieldIndex.LevelMin:
                        this.LevelMin = ex;
                        break;
                    case ObjectModTemplateItem_FieldIndex.Unused1:
                        this.Unused1 = ex;
                        break;
                    case ObjectModTemplateItem_FieldIndex.LevelMax:
                        this.LevelMax = ex;
                        break;
                    case ObjectModTemplateItem_FieldIndex.Unused2:
                        this.Unused2 = ex;
                        break;
                    case ObjectModTemplateItem_FieldIndex.AddonIndex:
                        this.AddonIndex = ex;
                        break;
                    case ObjectModTemplateItem_FieldIndex.Default:
                        this.Default = ex;
                        break;
                    case ObjectModTemplateItem_FieldIndex.OKeywords:
                        this.OKeywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case ObjectModTemplateItem_FieldIndex.MinLevelForRanks:
                        this.MinLevelForRanks = ex;
                        break;
                    case ObjectModTemplateItem_FieldIndex.AltLevelsPerTier:
                        this.AltLevelsPerTier = ex;
                        break;
                    case ObjectModTemplateItem_FieldIndex.Includes:
                        this.Includes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectTemplateInclude.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                ObjectModTemplateItem_FieldIndex enu = (ObjectModTemplateItem_FieldIndex)index;
                switch (enu)
                {
                    case ObjectModTemplateItem_FieldIndex.IncludeCount:
                        this.IncludeCount = (Exception?)obj;
                        break;
                    case ObjectModTemplateItem_FieldIndex.PropertyCount:
                        this.PropertyCount = (Exception?)obj;
                        break;
                    case ObjectModTemplateItem_FieldIndex.LevelMin:
                        this.LevelMin = (Exception?)obj;
                        break;
                    case ObjectModTemplateItem_FieldIndex.Unused1:
                        this.Unused1 = (Exception?)obj;
                        break;
                    case ObjectModTemplateItem_FieldIndex.LevelMax:
                        this.LevelMax = (Exception?)obj;
                        break;
                    case ObjectModTemplateItem_FieldIndex.Unused2:
                        this.Unused2 = (Exception?)obj;
                        break;
                    case ObjectModTemplateItem_FieldIndex.AddonIndex:
                        this.AddonIndex = (Exception?)obj;
                        break;
                    case ObjectModTemplateItem_FieldIndex.Default:
                        this.Default = (Exception?)obj;
                        break;
                    case ObjectModTemplateItem_FieldIndex.OKeywords:
                        this.OKeywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case ObjectModTemplateItem_FieldIndex.MinLevelForRanks:
                        this.MinLevelForRanks = (Exception?)obj;
                        break;
                    case ObjectModTemplateItem_FieldIndex.AltLevelsPerTier:
                        this.AltLevelsPerTier = (Exception?)obj;
                        break;
                    case ObjectModTemplateItem_FieldIndex.Includes:
                        this.Includes = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectTemplateInclude.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (IncludeCount != null) return true;
                if (PropertyCount != null) return true;
                if (LevelMin != null) return true;
                if (Unused1 != null) return true;
                if (LevelMax != null) return true;
                if (Unused2 != null) return true;
                if (AddonIndex != null) return true;
                if (Default != null) return true;
                if (OKeywords != null) return true;
                if (MinLevelForRanks != null) return true;
                if (AltLevelsPerTier != null) return true;
                if (Includes != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(IncludeCount, "IncludeCount");
                fg.AppendItem(PropertyCount, "PropertyCount");
                fg.AppendItem(LevelMin, "LevelMin");
                fg.AppendItem(Unused1, "Unused1");
                fg.AppendItem(LevelMax, "LevelMax");
                fg.AppendItem(Unused2, "Unused2");
                fg.AppendItem(AddonIndex, "AddonIndex");
                fg.AppendItem(Default, "Default");
                if (OKeywords is {} OKeywordsItem)
                {
                    fg.AppendLine("OKeywords =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(OKeywordsItem.Overall);
                        if (OKeywordsItem.Specific != null)
                        {
                            foreach (var subItem in OKeywordsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(MinLevelForRanks, "MinLevelForRanks");
                fg.AppendItem(AltLevelsPerTier, "AltLevelsPerTier");
                if (Includes is {} IncludesItem)
                {
                    fg.AppendLine("Includes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(IncludesItem.Overall);
                        if (IncludesItem.Specific != null)
                        {
                            foreach (var subItem in IncludesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.IncludeCount = this.IncludeCount.Combine(rhs.IncludeCount);
                ret.PropertyCount = this.PropertyCount.Combine(rhs.PropertyCount);
                ret.LevelMin = this.LevelMin.Combine(rhs.LevelMin);
                ret.Unused1 = this.Unused1.Combine(rhs.Unused1);
                ret.LevelMax = this.LevelMax.Combine(rhs.LevelMax);
                ret.Unused2 = this.Unused2.Combine(rhs.Unused2);
                ret.AddonIndex = this.AddonIndex.Combine(rhs.AddonIndex);
                ret.Default = this.Default.Combine(rhs.Default);
                ret.OKeywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.OKeywords?.Overall, rhs.OKeywords?.Overall), ExceptionExt.Combine(this.OKeywords?.Specific, rhs.OKeywords?.Specific));
                ret.MinLevelForRanks = this.MinLevelForRanks.Combine(rhs.MinLevelForRanks);
                ret.AltLevelsPerTier = this.AltLevelsPerTier.Combine(rhs.AltLevelsPerTier);
                ret.Includes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectTemplateInclude.ErrorMask?>>?>(ExceptionExt.Combine(this.Includes?.Overall, rhs.Includes?.Overall), ExceptionExt.Combine(this.Includes?.Specific, rhs.Includes?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool IncludeCount;
            public bool PropertyCount;
            public bool LevelMin;
            public bool Unused1;
            public bool LevelMax;
            public bool Unused2;
            public bool AddonIndex;
            public bool Default;
            public bool OKeywords;
            public bool MinLevelForRanks;
            public bool AltLevelsPerTier;
            public ObjectTemplateInclude.TranslationMask? Includes;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.IncludeCount = defaultOn;
                this.PropertyCount = defaultOn;
                this.LevelMin = defaultOn;
                this.Unused1 = defaultOn;
                this.LevelMax = defaultOn;
                this.Unused2 = defaultOn;
                this.AddonIndex = defaultOn;
                this.Default = defaultOn;
                this.OKeywords = defaultOn;
                this.MinLevelForRanks = defaultOn;
                this.AltLevelsPerTier = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((IncludeCount, null));
                ret.Add((PropertyCount, null));
                ret.Add((LevelMin, null));
                ret.Add((Unused1, null));
                ret.Add((LevelMax, null));
                ret.Add((Unused2, null));
                ret.Add((AddonIndex, null));
                ret.Add((Default, null));
                ret.Add((OKeywords, null));
                ret.Add((MinLevelForRanks, null));
                ret.Add((AltLevelsPerTier, null));
                ret.Add((Includes == null ? DefaultOn : !Includes.GetCrystal().CopyNothing, Includes?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = ObjectModTemplateItem_Registration.TriggeringRecordType;
        public IEnumerable<IFormLinkGetter> ContainedFormLinks => ObjectModTemplateItemCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ObjectModTemplateItemSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ObjectModTemplateItemBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ObjectModTemplateItemBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static ObjectModTemplateItem CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new ObjectModTemplateItem();
            ((ObjectModTemplateItemSetterCommon)((IObjectModTemplateItemGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ObjectModTemplateItem item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ObjectModTemplateItemSetterCommon)((IObjectModTemplateItemGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ObjectModTemplateItem GetNew()
        {
            return new ObjectModTemplateItem();
        }

    }
    #endregion

    #region Interface
    public partial interface IObjectModTemplateItem :
        IFormLinkContainer,
        ILoquiObjectSetter<IObjectModTemplateItem>,
        IObjectModTemplateItemGetter
    {
        new UInt32 IncludeCount { get; set; }
        new UInt32 PropertyCount { get; set; }
        new Byte LevelMin { get; set; }
        new MemorySlice<Byte> Unused1 { get; set; }
        new Byte LevelMax { get; set; }
        new MemorySlice<Byte> Unused2 { get; set; }
        new Int16 AddonIndex { get; set; }
        new Boolean Default { get; set; }
        new ExtendedList<IFormLinkGetter<IKeywordGetter>> OKeywords { get; }
        new Byte MinLevelForRanks { get; set; }
        new Byte AltLevelsPerTier { get; set; }
        new ExtendedList<ObjectTemplateInclude> Includes { get; }
    }

    public partial interface IObjectModTemplateItemGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IObjectModTemplateItemGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => ObjectModTemplateItem_Registration.Instance;
        UInt32 IncludeCount { get; }
        UInt32 PropertyCount { get; }
        Byte LevelMin { get; }
        ReadOnlyMemorySlice<Byte> Unused1 { get; }
        Byte LevelMax { get; }
        ReadOnlyMemorySlice<Byte> Unused2 { get; }
        Int16 AddonIndex { get; }
        Boolean Default { get; }
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>> OKeywords { get; }
        Byte MinLevelForRanks { get; }
        Byte AltLevelsPerTier { get; }
        IReadOnlyList<IObjectTemplateIncludeGetter> Includes { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ObjectModTemplateItemMixIn
    {
        public static void Clear(this IObjectModTemplateItem item)
        {
            ((ObjectModTemplateItemSetterCommon)((IObjectModTemplateItemGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ObjectModTemplateItem.Mask<bool> GetEqualsMask(
            this IObjectModTemplateItemGetter item,
            IObjectModTemplateItemGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ObjectModTemplateItemCommon)((IObjectModTemplateItemGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IObjectModTemplateItemGetter item,
            string? name = null,
            ObjectModTemplateItem.Mask<bool>? printMask = null)
        {
            return ((ObjectModTemplateItemCommon)((IObjectModTemplateItemGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IObjectModTemplateItemGetter item,
            FileGeneration fg,
            string? name = null,
            ObjectModTemplateItem.Mask<bool>? printMask = null)
        {
            ((ObjectModTemplateItemCommon)((IObjectModTemplateItemGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IObjectModTemplateItemGetter item,
            IObjectModTemplateItemGetter rhs,
            ObjectModTemplateItem.TranslationMask? equalsMask = null)
        {
            return ((ObjectModTemplateItemCommon)((IObjectModTemplateItemGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IObjectModTemplateItem lhs,
            IObjectModTemplateItemGetter rhs)
        {
            ((ObjectModTemplateItemSetterTranslationCommon)((IObjectModTemplateItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IObjectModTemplateItem lhs,
            IObjectModTemplateItemGetter rhs,
            ObjectModTemplateItem.TranslationMask? copyMask = null)
        {
            ((ObjectModTemplateItemSetterTranslationCommon)((IObjectModTemplateItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IObjectModTemplateItem lhs,
            IObjectModTemplateItemGetter rhs,
            out ObjectModTemplateItem.ErrorMask errorMask,
            ObjectModTemplateItem.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ObjectModTemplateItemSetterTranslationCommon)((IObjectModTemplateItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ObjectModTemplateItem.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IObjectModTemplateItem lhs,
            IObjectModTemplateItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ObjectModTemplateItemSetterTranslationCommon)((IObjectModTemplateItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ObjectModTemplateItem DeepCopy(
            this IObjectModTemplateItemGetter item,
            ObjectModTemplateItem.TranslationMask? copyMask = null)
        {
            return ((ObjectModTemplateItemSetterTranslationCommon)((IObjectModTemplateItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ObjectModTemplateItem DeepCopy(
            this IObjectModTemplateItemGetter item,
            out ObjectModTemplateItem.ErrorMask errorMask,
            ObjectModTemplateItem.TranslationMask? copyMask = null)
        {
            return ((ObjectModTemplateItemSetterTranslationCommon)((IObjectModTemplateItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ObjectModTemplateItem DeepCopy(
            this IObjectModTemplateItemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ObjectModTemplateItemSetterTranslationCommon)((IObjectModTemplateItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IObjectModTemplateItem item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((ObjectModTemplateItemSetterCommon)((IObjectModTemplateItemGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum ObjectModTemplateItem_FieldIndex
    {
        IncludeCount = 0,
        PropertyCount = 1,
        LevelMin = 2,
        Unused1 = 3,
        LevelMax = 4,
        Unused2 = 5,
        AddonIndex = 6,
        Default = 7,
        OKeywords = 8,
        MinLevelForRanks = 9,
        AltLevelsPerTier = 10,
        Includes = 11,
    }
    #endregion

    #region Registration
    public partial class ObjectModTemplateItem_Registration : ILoquiRegistration
    {
        public static readonly ObjectModTemplateItem_Registration Instance = new ObjectModTemplateItem_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 229,
            version: 0);

        public const string GUID = "13525862-b1e0-4407-81b0-b40056f537cf";

        public const ushort AdditionalFieldCount = 12;

        public const ushort FieldCount = 12;

        public static readonly Type MaskType = typeof(ObjectModTemplateItem.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ObjectModTemplateItem.ErrorMask);

        public static readonly Type ClassType = typeof(ObjectModTemplateItem);

        public static readonly Type GetterType = typeof(IObjectModTemplateItemGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IObjectModTemplateItem);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.ObjectModTemplateItem";

        public const string Name = "ObjectModTemplateItem";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.OBTS;
        public static readonly Type BinaryWriteTranslation = typeof(ObjectModTemplateItemBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ObjectModTemplateItemSetterCommon
    {
        public static readonly ObjectModTemplateItemSetterCommon Instance = new ObjectModTemplateItemSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IObjectModTemplateItem item)
        {
            ClearPartial();
            item.IncludeCount = default;
            item.PropertyCount = default;
            item.LevelMin = default;
            item.Unused1 = new byte[1];
            item.LevelMax = default;
            item.Unused2 = new byte[1];
            item.AddonIndex = default;
            item.Default = default;
            item.OKeywords.Clear();
            item.MinLevelForRanks = default;
            item.AltLevelsPerTier = default;
            item.Includes.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IObjectModTemplateItem obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.OKeywords.RemapLinks(mapping);
            obj.Includes.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IObjectModTemplateItem item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.OBTS),
                translationParams?.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ObjectModTemplateItemBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class ObjectModTemplateItemCommon
    {
        public static readonly ObjectModTemplateItemCommon Instance = new ObjectModTemplateItemCommon();

        public ObjectModTemplateItem.Mask<bool> GetEqualsMask(
            IObjectModTemplateItemGetter item,
            IObjectModTemplateItemGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ObjectModTemplateItem.Mask<bool>(false);
            ((ObjectModTemplateItemCommon)((IObjectModTemplateItemGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IObjectModTemplateItemGetter item,
            IObjectModTemplateItemGetter rhs,
            ObjectModTemplateItem.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.IncludeCount = item.IncludeCount == rhs.IncludeCount;
            ret.PropertyCount = item.PropertyCount == rhs.PropertyCount;
            ret.LevelMin = item.LevelMin == rhs.LevelMin;
            ret.Unused1 = MemoryExtensions.SequenceEqual(item.Unused1.Span, rhs.Unused1.Span);
            ret.LevelMax = item.LevelMax == rhs.LevelMax;
            ret.Unused2 = MemoryExtensions.SequenceEqual(item.Unused2.Span, rhs.Unused2.Span);
            ret.AddonIndex = item.AddonIndex == rhs.AddonIndex;
            ret.Default = item.Default == rhs.Default;
            ret.OKeywords = item.OKeywords.CollectionEqualsHelper(
                rhs.OKeywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.MinLevelForRanks = item.MinLevelForRanks == rhs.MinLevelForRanks;
            ret.AltLevelsPerTier = item.AltLevelsPerTier == rhs.AltLevelsPerTier;
            ret.Includes = item.Includes.CollectionEqualsHelper(
                rhs.Includes,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string ToString(
            IObjectModTemplateItemGetter item,
            string? name = null,
            ObjectModTemplateItem.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IObjectModTemplateItemGetter item,
            FileGeneration fg,
            string? name = null,
            ObjectModTemplateItem.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ObjectModTemplateItem =>");
            }
            else
            {
                fg.AppendLine($"{name} (ObjectModTemplateItem) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IObjectModTemplateItemGetter item,
            FileGeneration fg,
            ObjectModTemplateItem.Mask<bool>? printMask = null)
        {
            if (printMask?.IncludeCount ?? true)
            {
                fg.AppendItem(item.IncludeCount, "IncludeCount");
            }
            if (printMask?.PropertyCount ?? true)
            {
                fg.AppendItem(item.PropertyCount, "PropertyCount");
            }
            if (printMask?.LevelMin ?? true)
            {
                fg.AppendItem(item.LevelMin, "LevelMin");
            }
            if (printMask?.Unused1 ?? true)
            {
                fg.AppendLine($"Unused1 => {SpanExt.ToHexString(item.Unused1)}");
            }
            if (printMask?.LevelMax ?? true)
            {
                fg.AppendItem(item.LevelMax, "LevelMax");
            }
            if (printMask?.Unused2 ?? true)
            {
                fg.AppendLine($"Unused2 => {SpanExt.ToHexString(item.Unused2)}");
            }
            if (printMask?.AddonIndex ?? true)
            {
                fg.AppendItem(item.AddonIndex, "AddonIndex");
            }
            if (printMask?.Default ?? true)
            {
                fg.AppendItem(item.Default, "Default");
            }
            if (printMask?.OKeywords?.Overall ?? true)
            {
                fg.AppendLine("OKeywords =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.OKeywords)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.MinLevelForRanks ?? true)
            {
                fg.AppendItem(item.MinLevelForRanks, "MinLevelForRanks");
            }
            if (printMask?.AltLevelsPerTier ?? true)
            {
                fg.AppendItem(item.AltLevelsPerTier, "AltLevelsPerTier");
            }
            if (printMask?.Includes?.Overall ?? true)
            {
                fg.AppendLine("Includes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Includes)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IObjectModTemplateItemGetter? lhs,
            IObjectModTemplateItemGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)ObjectModTemplateItem_FieldIndex.IncludeCount) ?? true))
            {
                if (lhs.IncludeCount != rhs.IncludeCount) return false;
            }
            if ((crystal?.GetShouldTranslate((int)ObjectModTemplateItem_FieldIndex.PropertyCount) ?? true))
            {
                if (lhs.PropertyCount != rhs.PropertyCount) return false;
            }
            if ((crystal?.GetShouldTranslate((int)ObjectModTemplateItem_FieldIndex.LevelMin) ?? true))
            {
                if (lhs.LevelMin != rhs.LevelMin) return false;
            }
            if ((crystal?.GetShouldTranslate((int)ObjectModTemplateItem_FieldIndex.Unused1) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.Unused1.Span, rhs.Unused1.Span)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)ObjectModTemplateItem_FieldIndex.LevelMax) ?? true))
            {
                if (lhs.LevelMax != rhs.LevelMax) return false;
            }
            if ((crystal?.GetShouldTranslate((int)ObjectModTemplateItem_FieldIndex.Unused2) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.Unused2.Span, rhs.Unused2.Span)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)ObjectModTemplateItem_FieldIndex.AddonIndex) ?? true))
            {
                if (lhs.AddonIndex != rhs.AddonIndex) return false;
            }
            if ((crystal?.GetShouldTranslate((int)ObjectModTemplateItem_FieldIndex.Default) ?? true))
            {
                if (lhs.Default != rhs.Default) return false;
            }
            if ((crystal?.GetShouldTranslate((int)ObjectModTemplateItem_FieldIndex.OKeywords) ?? true))
            {
                if (!lhs.OKeywords.SequenceEqualNullable(rhs.OKeywords)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)ObjectModTemplateItem_FieldIndex.MinLevelForRanks) ?? true))
            {
                if (lhs.MinLevelForRanks != rhs.MinLevelForRanks) return false;
            }
            if ((crystal?.GetShouldTranslate((int)ObjectModTemplateItem_FieldIndex.AltLevelsPerTier) ?? true))
            {
                if (lhs.AltLevelsPerTier != rhs.AltLevelsPerTier) return false;
            }
            if ((crystal?.GetShouldTranslate((int)ObjectModTemplateItem_FieldIndex.Includes) ?? true))
            {
                if (!lhs.Includes.SequenceEqualNullable(rhs.Includes)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IObjectModTemplateItemGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.IncludeCount);
            hash.Add(item.PropertyCount);
            hash.Add(item.LevelMin);
            hash.Add(item.Unused1);
            hash.Add(item.LevelMax);
            hash.Add(item.Unused2);
            hash.Add(item.AddonIndex);
            hash.Add(item.Default);
            hash.Add(item.OKeywords);
            hash.Add(item.MinLevelForRanks);
            hash.Add(item.AltLevelsPerTier);
            hash.Add(item.Includes);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ObjectModTemplateItem.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IObjectModTemplateItemGetter obj)
        {
            foreach (var item in obj.OKeywords)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Includes.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class ObjectModTemplateItemSetterTranslationCommon
    {
        public static readonly ObjectModTemplateItemSetterTranslationCommon Instance = new ObjectModTemplateItemSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IObjectModTemplateItem item,
            IObjectModTemplateItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)ObjectModTemplateItem_FieldIndex.IncludeCount) ?? true))
            {
                item.IncludeCount = rhs.IncludeCount;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectModTemplateItem_FieldIndex.PropertyCount) ?? true))
            {
                item.PropertyCount = rhs.PropertyCount;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectModTemplateItem_FieldIndex.LevelMin) ?? true))
            {
                item.LevelMin = rhs.LevelMin;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectModTemplateItem_FieldIndex.Unused1) ?? true))
            {
                item.Unused1 = rhs.Unused1.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectModTemplateItem_FieldIndex.LevelMax) ?? true))
            {
                item.LevelMax = rhs.LevelMax;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectModTemplateItem_FieldIndex.Unused2) ?? true))
            {
                item.Unused2 = rhs.Unused2.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectModTemplateItem_FieldIndex.AddonIndex) ?? true))
            {
                item.AddonIndex = rhs.AddonIndex;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectModTemplateItem_FieldIndex.Default) ?? true))
            {
                item.Default = rhs.Default;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectModTemplateItem_FieldIndex.OKeywords) ?? true))
            {
                errorMask?.PushIndex((int)ObjectModTemplateItem_FieldIndex.OKeywords);
                try
                {
                    item.OKeywords.SetTo(
                        rhs.OKeywords
                        .Select(r => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectModTemplateItem_FieldIndex.MinLevelForRanks) ?? true))
            {
                item.MinLevelForRanks = rhs.MinLevelForRanks;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectModTemplateItem_FieldIndex.AltLevelsPerTier) ?? true))
            {
                item.AltLevelsPerTier = rhs.AltLevelsPerTier;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectModTemplateItem_FieldIndex.Includes) ?? true))
            {
                errorMask?.PushIndex((int)ObjectModTemplateItem_FieldIndex.Includes);
                try
                {
                    item.Includes.SetTo(
                        rhs.Includes
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public ObjectModTemplateItem DeepCopy(
            IObjectModTemplateItemGetter item,
            ObjectModTemplateItem.TranslationMask? copyMask = null)
        {
            ObjectModTemplateItem ret = (ObjectModTemplateItem)((ObjectModTemplateItemCommon)((IObjectModTemplateItemGetter)item).CommonInstance()!).GetNew();
            ((ObjectModTemplateItemSetterTranslationCommon)((IObjectModTemplateItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ObjectModTemplateItem DeepCopy(
            IObjectModTemplateItemGetter item,
            out ObjectModTemplateItem.ErrorMask errorMask,
            ObjectModTemplateItem.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ObjectModTemplateItem ret = (ObjectModTemplateItem)((ObjectModTemplateItemCommon)((IObjectModTemplateItemGetter)item).CommonInstance()!).GetNew();
            ((ObjectModTemplateItemSetterTranslationCommon)((IObjectModTemplateItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ObjectModTemplateItem.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ObjectModTemplateItem DeepCopy(
            IObjectModTemplateItemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ObjectModTemplateItem ret = (ObjectModTemplateItem)((ObjectModTemplateItemCommon)((IObjectModTemplateItemGetter)item).CommonInstance()!).GetNew();
            ((ObjectModTemplateItemSetterTranslationCommon)((IObjectModTemplateItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class ObjectModTemplateItem
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ObjectModTemplateItem_Registration.Instance;
        public static ObjectModTemplateItem_Registration StaticRegistration => ObjectModTemplateItem_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ObjectModTemplateItemCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ObjectModTemplateItemSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ObjectModTemplateItemSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IObjectModTemplateItemGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IObjectModTemplateItemGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IObjectModTemplateItemGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ObjectModTemplateItemBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ObjectModTemplateItemBinaryWriteTranslation Instance = new ObjectModTemplateItemBinaryWriteTranslation();

        public static void WriteEmbedded(
            IObjectModTemplateItemGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.IncludeCount);
            writer.Write(item.PropertyCount);
            writer.Write(item.LevelMin);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unused1);
            writer.Write(item.LevelMax);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unused2);
            writer.Write(item.AddonIndex);
            writer.Write(item.Default);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Write(
                writer: writer,
                items: item.OKeywords,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams? conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            writer.Write(item.MinLevelForRanks);
            writer.Write(item.AltLevelsPerTier);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IObjectTemplateIncludeGetter>.Instance.Write(
                writer: writer,
                items: item.Includes,
                transl: (MutagenWriter subWriter, IObjectTemplateIncludeGetter subItem, TypedWriteParams? conv) =>
                {
                    var Item = subItem;
                    ((ObjectTemplateIncludeBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IObjectModTemplateItemGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.OBTS),
                overflowRecord: translationParams?.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IObjectModTemplateItemGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class ObjectModTemplateItemBinaryCreateTranslation
    {
        public readonly static ObjectModTemplateItemBinaryCreateTranslation Instance = new ObjectModTemplateItemBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IObjectModTemplateItem item,
            MutagenFrame frame)
        {
            item.IncludeCount = frame.ReadUInt32();
            item.PropertyCount = frame.ReadUInt32();
            item.LevelMin = frame.ReadUInt8();
            item.Unused1 = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(1));
            item.LevelMax = frame.ReadUInt8();
            item.Unused2 = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(1));
            item.AddonIndex = frame.ReadInt16();
            item.Default = frame.ReadBoolean();
            item.OKeywords.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                    reader: frame,
                    transl: FormLinkBinaryTranslation.Instance.Parse));
            item.MinLevelForRanks = frame.ReadUInt8();
            item.AltLevelsPerTier = frame.ReadUInt8();
            item.Includes.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ObjectTemplateInclude>.Instance.Parse(
                    reader: frame,
                    transl: ObjectTemplateInclude.TryCreateFromBinary));
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ObjectModTemplateItemBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IObjectModTemplateItemGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ObjectModTemplateItemBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ObjectModTemplateItemBinaryOverlay :
        PluginBinaryOverlay,
        IObjectModTemplateItemGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ObjectModTemplateItem_Registration.Instance;
        public static ObjectModTemplateItem_Registration StaticRegistration => ObjectModTemplateItem_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ObjectModTemplateItemCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ObjectModTemplateItemSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IObjectModTemplateItemGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IObjectModTemplateItemGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IObjectModTemplateItemGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public IEnumerable<IFormLinkGetter> ContainedFormLinks => ObjectModTemplateItemCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ObjectModTemplateItemBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ObjectModTemplateItemBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public UInt32 IncludeCount => BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(0x0, 0x4));
        public UInt32 PropertyCount => BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(0x4, 0x4));
        public Byte LevelMin => _data.Span[0x8];
        public ReadOnlyMemorySlice<Byte> Unused1 => _data.Span.Slice(0x9, 0x1).ToArray();
        public Byte LevelMax => _data.Span[0xA];
        public ReadOnlyMemorySlice<Byte> Unused2 => _data.Span.Slice(0xB, 0x1).ToArray();
        public Int16 AddonIndex => BinaryPrimitives.ReadInt16LittleEndian(_data.Slice(0xC, 0x2));
        public Boolean Default => _data.Slice(0xE, 0x1)[0] == 1;
        #region OKeywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>> OKeywords => BinaryOverlayList.FactoryByStartIndex<IFormLinkGetter<IKeywordGetter>>(_data.Slice(0xF), _package, 4, (s, p) => new FormLink<IKeywordGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
        protected int OKeywordsEndingPos;
        #endregion
        public Byte MinLevelForRanks => _data.Span[OKeywordsEndingPos];
        public Byte AltLevelsPerTier => _data.Span[OKeywordsEndingPos + 0x1];
        #region Includes
        public IReadOnlyList<IObjectTemplateIncludeGetter> Includes => BinaryOverlayList.FactoryByLazyParse<ObjectTemplateIncludeBinaryOverlay>(_data.Slice(OKeywordsEndingPos + 0x2), _package, (s, p) => ObjectTemplateIncludeBinaryOverlay.ObjectTemplateIncludeFactory(s, p));
        protected int IncludesEndingPos;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ObjectModTemplateItemBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ObjectModTemplateItemBinaryOverlay ObjectModTemplateItemFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new ObjectModTemplateItemBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants, parseParams),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            ret.OKeywordsEndingPos = ret._data.Length;
            ret.IncludesEndingPos = ret._data.Length;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ObjectModTemplateItemBinaryOverlay ObjectModTemplateItemFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return ObjectModTemplateItemFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ObjectModTemplateItemMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IObjectModTemplateItemGetter rhs) return false;
            return ((ObjectModTemplateItemCommon)((IObjectModTemplateItemGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IObjectModTemplateItemGetter? obj)
        {
            return ((ObjectModTemplateItemCommon)((IObjectModTemplateItemGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ObjectModTemplateItemCommon)((IObjectModTemplateItemGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

