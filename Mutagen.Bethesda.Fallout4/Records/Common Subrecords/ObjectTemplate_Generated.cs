/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class ObjectTemplate :
        IEquatable<IObjectTemplateGetter>,
        ILoquiObjectSetter<ObjectTemplate>,
        IObjectTemplate
    {
        #region Ctor
        public ObjectTemplate()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region EditorOnly
        public String? EditorOnly { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IObjectTemplateGetter.EditorOnly => this.EditorOnly;
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IObjectTemplateGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region ObjectModTemplateItem
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ObjectModTemplateItem? _ObjectModTemplateItem;
        public ObjectModTemplateItem? ObjectModTemplateItem
        {
            get => _ObjectModTemplateItem;
            set => _ObjectModTemplateItem = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectModTemplateItemGetter? IObjectTemplateGetter.ObjectModTemplateItem => this.ObjectModTemplateItem;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ObjectTemplateMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IObjectTemplateGetter rhs) return false;
            return ((ObjectTemplateCommon)((IObjectTemplateGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IObjectTemplateGetter? obj)
        {
            return ((ObjectTemplateCommon)((IObjectTemplateGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ObjectTemplateCommon)((IObjectTemplateGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.EditorOnly = initialValue;
                this.Name = initialValue;
                this.ObjectModTemplateItem = new MaskItem<TItem, ObjectModTemplateItem.Mask<TItem>?>(initialValue, new ObjectModTemplateItem.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem EditorOnly,
                TItem Name,
                TItem ObjectModTemplateItem)
            {
                this.EditorOnly = EditorOnly;
                this.Name = Name;
                this.ObjectModTemplateItem = new MaskItem<TItem, ObjectModTemplateItem.Mask<TItem>?>(ObjectModTemplateItem, new ObjectModTemplateItem.Mask<TItem>(ObjectModTemplateItem));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem EditorOnly;
            public TItem Name;
            public MaskItem<TItem, ObjectModTemplateItem.Mask<TItem>?>? ObjectModTemplateItem { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.EditorOnly, rhs.EditorOnly)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.ObjectModTemplateItem, rhs.ObjectModTemplateItem)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.EditorOnly);
                hash.Add(this.Name);
                hash.Add(this.ObjectModTemplateItem);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.EditorOnly)) return false;
                if (!eval(this.Name)) return false;
                if (ObjectModTemplateItem != null)
                {
                    if (!eval(this.ObjectModTemplateItem.Overall)) return false;
                    if (this.ObjectModTemplateItem.Specific != null && !this.ObjectModTemplateItem.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.EditorOnly)) return true;
                if (eval(this.Name)) return true;
                if (ObjectModTemplateItem != null)
                {
                    if (eval(this.ObjectModTemplateItem.Overall)) return true;
                    if (this.ObjectModTemplateItem.Specific != null && this.ObjectModTemplateItem.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ObjectTemplate.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.EditorOnly = eval(this.EditorOnly);
                obj.Name = eval(this.Name);
                obj.ObjectModTemplateItem = this.ObjectModTemplateItem == null ? null : new MaskItem<R, ObjectModTemplateItem.Mask<R>?>(eval(this.ObjectModTemplateItem.Overall), this.ObjectModTemplateItem.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ObjectTemplate.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ObjectTemplate.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ObjectTemplate.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.EditorOnly ?? true)
                    {
                        fg.AppendItem(EditorOnly, "EditorOnly");
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.ObjectModTemplateItem?.Overall ?? true)
                    {
                        ObjectModTemplateItem?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? EditorOnly;
            public Exception? Name;
            public MaskItem<Exception?, ObjectModTemplateItem.ErrorMask?>? ObjectModTemplateItem;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ObjectTemplate_FieldIndex enu = (ObjectTemplate_FieldIndex)index;
                switch (enu)
                {
                    case ObjectTemplate_FieldIndex.EditorOnly:
                        return EditorOnly;
                    case ObjectTemplate_FieldIndex.Name:
                        return Name;
                    case ObjectTemplate_FieldIndex.ObjectModTemplateItem:
                        return ObjectModTemplateItem;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                ObjectTemplate_FieldIndex enu = (ObjectTemplate_FieldIndex)index;
                switch (enu)
                {
                    case ObjectTemplate_FieldIndex.EditorOnly:
                        this.EditorOnly = ex;
                        break;
                    case ObjectTemplate_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case ObjectTemplate_FieldIndex.ObjectModTemplateItem:
                        this.ObjectModTemplateItem = new MaskItem<Exception?, ObjectModTemplateItem.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                ObjectTemplate_FieldIndex enu = (ObjectTemplate_FieldIndex)index;
                switch (enu)
                {
                    case ObjectTemplate_FieldIndex.EditorOnly:
                        this.EditorOnly = (Exception?)obj;
                        break;
                    case ObjectTemplate_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case ObjectTemplate_FieldIndex.ObjectModTemplateItem:
                        this.ObjectModTemplateItem = (MaskItem<Exception?, ObjectModTemplateItem.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (EditorOnly != null) return true;
                if (Name != null) return true;
                if (ObjectModTemplateItem != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(EditorOnly, "EditorOnly");
                fg.AppendItem(Name, "Name");
                ObjectModTemplateItem?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.EditorOnly = this.EditorOnly.Combine(rhs.EditorOnly);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.ObjectModTemplateItem = this.ObjectModTemplateItem.Combine(rhs.ObjectModTemplateItem, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool EditorOnly;
            public bool Name;
            public ObjectModTemplateItem.TranslationMask? ObjectModTemplateItem;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.EditorOnly = defaultOn;
                this.Name = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((EditorOnly, null));
                ret.Add((Name, null));
                ret.Add((ObjectModTemplateItem != null ? ObjectModTemplateItem.OnOverall : DefaultOn, ObjectModTemplateItem?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> ContainedFormLinks => ObjectTemplateCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ObjectTemplateSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ObjectTemplateBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ObjectTemplateBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static ObjectTemplate CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new ObjectTemplate();
            ((ObjectTemplateSetterCommon)((IObjectTemplateGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ObjectTemplate item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ObjectTemplateSetterCommon)((IObjectTemplateGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ObjectTemplate GetNew()
        {
            return new ObjectTemplate();
        }

    }
    #endregion

    #region Interface
    public partial interface IObjectTemplate :
        IFormLinkContainer,
        ILoquiObjectSetter<IObjectTemplate>,
        INamed,
        INamedRequired,
        IObjectTemplateGetter,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        new String? EditorOnly { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new ObjectModTemplateItem? ObjectModTemplateItem { get; set; }
    }

    public partial interface IObjectTemplateGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IObjectTemplateGetter>,
        INamedGetter,
        INamedRequiredGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => ObjectTemplate_Registration.Instance;
        String? EditorOnly { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        IObjectModTemplateItemGetter? ObjectModTemplateItem { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ObjectTemplateMixIn
    {
        public static void Clear(this IObjectTemplate item)
        {
            ((ObjectTemplateSetterCommon)((IObjectTemplateGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ObjectTemplate.Mask<bool> GetEqualsMask(
            this IObjectTemplateGetter item,
            IObjectTemplateGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ObjectTemplateCommon)((IObjectTemplateGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IObjectTemplateGetter item,
            string? name = null,
            ObjectTemplate.Mask<bool>? printMask = null)
        {
            return ((ObjectTemplateCommon)((IObjectTemplateGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IObjectTemplateGetter item,
            FileGeneration fg,
            string? name = null,
            ObjectTemplate.Mask<bool>? printMask = null)
        {
            ((ObjectTemplateCommon)((IObjectTemplateGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IObjectTemplateGetter item,
            IObjectTemplateGetter rhs,
            ObjectTemplate.TranslationMask? equalsMask = null)
        {
            return ((ObjectTemplateCommon)((IObjectTemplateGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IObjectTemplate lhs,
            IObjectTemplateGetter rhs)
        {
            ((ObjectTemplateSetterTranslationCommon)((IObjectTemplateGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IObjectTemplate lhs,
            IObjectTemplateGetter rhs,
            ObjectTemplate.TranslationMask? copyMask = null)
        {
            ((ObjectTemplateSetterTranslationCommon)((IObjectTemplateGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IObjectTemplate lhs,
            IObjectTemplateGetter rhs,
            out ObjectTemplate.ErrorMask errorMask,
            ObjectTemplate.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ObjectTemplateSetterTranslationCommon)((IObjectTemplateGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ObjectTemplate.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IObjectTemplate lhs,
            IObjectTemplateGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ObjectTemplateSetterTranslationCommon)((IObjectTemplateGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ObjectTemplate DeepCopy(
            this IObjectTemplateGetter item,
            ObjectTemplate.TranslationMask? copyMask = null)
        {
            return ((ObjectTemplateSetterTranslationCommon)((IObjectTemplateGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ObjectTemplate DeepCopy(
            this IObjectTemplateGetter item,
            out ObjectTemplate.ErrorMask errorMask,
            ObjectTemplate.TranslationMask? copyMask = null)
        {
            return ((ObjectTemplateSetterTranslationCommon)((IObjectTemplateGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ObjectTemplate DeepCopy(
            this IObjectTemplateGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ObjectTemplateSetterTranslationCommon)((IObjectTemplateGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IObjectTemplate item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((ObjectTemplateSetterCommon)((IObjectTemplateGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum ObjectTemplate_FieldIndex
    {
        EditorOnly = 0,
        Name = 1,
        ObjectModTemplateItem = 2,
    }
    #endregion

    #region Registration
    public partial class ObjectTemplate_Registration : ILoquiRegistration
    {
        public static readonly ObjectTemplate_Registration Instance = new ObjectTemplate_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 228,
            version: 0);

        public const string GUID = "12f3b2da-acbc-44d1-b314-70bd38de7be0";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(ObjectTemplate.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ObjectTemplate.ErrorMask);

        public static readonly Type ClassType = typeof(ObjectTemplate);

        public static readonly Type GetterType = typeof(IObjectTemplateGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IObjectTemplate);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.ObjectTemplate";

        public const string Name = "ObjectTemplate";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RecordTypes.OBTF,
                        RecordTypes.FULL,
                        RecordTypes.OBTS
                    })
            );
        });
        public static readonly Type BinaryWriteTranslation = typeof(ObjectTemplateBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ObjectTemplateSetterCommon
    {
        public static readonly ObjectTemplateSetterCommon Instance = new ObjectTemplateSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IObjectTemplate item)
        {
            ClearPartial();
            item.EditorOnly = default;
            item.Name = default;
            item.ObjectModTemplateItem = null;
        }
        
        #region Mutagen
        public void RemapLinks(IObjectTemplate obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.ObjectModTemplateItem?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IObjectTemplate item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ObjectTemplateBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ObjectTemplateBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class ObjectTemplateCommon
    {
        public static readonly ObjectTemplateCommon Instance = new ObjectTemplateCommon();

        public ObjectTemplate.Mask<bool> GetEqualsMask(
            IObjectTemplateGetter item,
            IObjectTemplateGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ObjectTemplate.Mask<bool>(false);
            ((ObjectTemplateCommon)((IObjectTemplateGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IObjectTemplateGetter item,
            IObjectTemplateGetter rhs,
            ObjectTemplate.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.EditorOnly = string.Equals(item.EditorOnly, rhs.EditorOnly);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.ObjectModTemplateItem = EqualsMaskHelper.EqualsHelper(
                item.ObjectModTemplateItem,
                rhs.ObjectModTemplateItem,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string ToString(
            IObjectTemplateGetter item,
            string? name = null,
            ObjectTemplate.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IObjectTemplateGetter item,
            FileGeneration fg,
            string? name = null,
            ObjectTemplate.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ObjectTemplate =>");
            }
            else
            {
                fg.AppendLine($"{name} (ObjectTemplate) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IObjectTemplateGetter item,
            FileGeneration fg,
            ObjectTemplate.Mask<bool>? printMask = null)
        {
            if ((printMask?.EditorOnly ?? true)
                && item.EditorOnly is {} EditorOnlyItem)
            {
                fg.AppendItem(EditorOnlyItem, "EditorOnly");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.ObjectModTemplateItem?.Overall ?? true)
                && item.ObjectModTemplateItem is {} ObjectModTemplateItemItem)
            {
                ObjectModTemplateItemItem?.ToString(fg, "ObjectModTemplateItem");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IObjectTemplateGetter? lhs,
            IObjectTemplateGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)ObjectTemplate_FieldIndex.EditorOnly) ?? true))
            {
                if (!string.Equals(lhs.EditorOnly, rhs.EditorOnly)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)ObjectTemplate_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)ObjectTemplate_FieldIndex.ObjectModTemplateItem) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectModTemplateItem, rhs.ObjectModTemplateItem, out var lhsObjectModTemplateItem, out var rhsObjectModTemplateItem, out var isObjectModTemplateItemEqual))
                {
                    if (!((ObjectModTemplateItemCommon)((IObjectModTemplateItemGetter)lhsObjectModTemplateItem).CommonInstance()!).Equals(lhsObjectModTemplateItem, rhsObjectModTemplateItem, crystal?.GetSubCrystal((int)ObjectTemplate_FieldIndex.ObjectModTemplateItem))) return false;
                }
                else if (!isObjectModTemplateItemEqual) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IObjectTemplateGetter item)
        {
            var hash = new HashCode();
            if (item.EditorOnly is {} EditorOnlyitem)
            {
                hash.Add(EditorOnlyitem);
            }
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.ObjectModTemplateItem is {} ObjectModTemplateItemitem)
            {
                hash.Add(ObjectModTemplateItemitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ObjectTemplate.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IObjectTemplateGetter obj)
        {
            if (obj.ObjectModTemplateItem is {} ObjectModTemplateItemItems)
            {
                foreach (var item in ObjectModTemplateItemItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class ObjectTemplateSetterTranslationCommon
    {
        public static readonly ObjectTemplateSetterTranslationCommon Instance = new ObjectTemplateSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IObjectTemplate item,
            IObjectTemplateGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)ObjectTemplate_FieldIndex.EditorOnly) ?? true))
            {
                item.EditorOnly = rhs.EditorOnly;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectTemplate_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectTemplate_FieldIndex.ObjectModTemplateItem) ?? true))
            {
                errorMask?.PushIndex((int)ObjectTemplate_FieldIndex.ObjectModTemplateItem);
                try
                {
                    if(rhs.ObjectModTemplateItem is {} rhsObjectModTemplateItem)
                    {
                        item.ObjectModTemplateItem = rhsObjectModTemplateItem.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)ObjectTemplate_FieldIndex.ObjectModTemplateItem));
                    }
                    else
                    {
                        item.ObjectModTemplateItem = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public ObjectTemplate DeepCopy(
            IObjectTemplateGetter item,
            ObjectTemplate.TranslationMask? copyMask = null)
        {
            ObjectTemplate ret = (ObjectTemplate)((ObjectTemplateCommon)((IObjectTemplateGetter)item).CommonInstance()!).GetNew();
            ((ObjectTemplateSetterTranslationCommon)((IObjectTemplateGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ObjectTemplate DeepCopy(
            IObjectTemplateGetter item,
            out ObjectTemplate.ErrorMask errorMask,
            ObjectTemplate.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ObjectTemplate ret = (ObjectTemplate)((ObjectTemplateCommon)((IObjectTemplateGetter)item).CommonInstance()!).GetNew();
            ((ObjectTemplateSetterTranslationCommon)((IObjectTemplateGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ObjectTemplate.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ObjectTemplate DeepCopy(
            IObjectTemplateGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ObjectTemplate ret = (ObjectTemplate)((ObjectTemplateCommon)((IObjectTemplateGetter)item).CommonInstance()!).GetNew();
            ((ObjectTemplateSetterTranslationCommon)((IObjectTemplateGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class ObjectTemplate
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ObjectTemplate_Registration.Instance;
        public static ObjectTemplate_Registration StaticRegistration => ObjectTemplate_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ObjectTemplateCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ObjectTemplateSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ObjectTemplateSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IObjectTemplateGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IObjectTemplateGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IObjectTemplateGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ObjectTemplateBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ObjectTemplateBinaryWriteTranslation Instance = new ObjectTemplateBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IObjectTemplateGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EditorOnly,
                header: translationParams.ConvertToCustom(RecordTypes.OBTF),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            if (item.ObjectModTemplateItem is {} ObjectModTemplateItemItem)
            {
                ((ObjectModTemplateItemBinaryWriteTranslation)((IBinaryItem)ObjectModTemplateItemItem).BinaryWriteTranslator).Write(
                    item: ObjectModTemplateItemItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            using (HeaderExport.Subrecord(writer, RecordTypes.STOP)) { } // End Marker
        }

        public void Write(
            MutagenWriter writer,
            IObjectTemplateGetter item,
            TypedWriteParams? translationParams = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IObjectTemplateGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class ObjectTemplateBinaryCreateTranslation
    {
        public readonly static ObjectTemplateBinaryCreateTranslation Instance = new ObjectTemplateBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IObjectTemplate item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IObjectTemplate item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.OBTF:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)ObjectTemplate_FieldIndex.EditorOnly) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EditorOnly = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)ObjectTemplate_FieldIndex.EditorOnly;
                }
                case RecordTypeInts.FULL:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)ObjectTemplate_FieldIndex.Name) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)ObjectTemplate_FieldIndex.Name;
                }
                case RecordTypeInts.OBTS:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)ObjectTemplate_FieldIndex.ObjectModTemplateItem) return ParseResult.Stop;
                    item.ObjectModTemplateItem = Mutagen.Bethesda.Fallout4.ObjectModTemplateItem.CreateFromBinary(frame: frame);
                    return (int)ObjectTemplate_FieldIndex.ObjectModTemplateItem;
                }
                case RecordTypeInts.STOP: // End Marker
                {
                    frame.ReadSubrecordFrame();
                    return ParseResult.Stop;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ObjectTemplateBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IObjectTemplateGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ObjectTemplateBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ObjectTemplateBinaryOverlay :
        PluginBinaryOverlay,
        IObjectTemplateGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ObjectTemplate_Registration.Instance;
        public static ObjectTemplate_Registration StaticRegistration => ObjectTemplate_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ObjectTemplateCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ObjectTemplateSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IObjectTemplateGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IObjectTemplateGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IObjectTemplateGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public IEnumerable<IFormLinkGetter> ContainedFormLinks => ObjectTemplateCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ObjectTemplateBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ObjectTemplateBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region EditorOnly
        private int? _EditorOnlyLocation;
        public String? EditorOnly => _EditorOnlyLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _EditorOnlyLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region ObjectModTemplateItem
        private RangeInt32? _ObjectModTemplateItemLocation;
        public IObjectModTemplateItemGetter? ObjectModTemplateItem => _ObjectModTemplateItemLocation.HasValue ? ObjectModTemplateItemBinaryOverlay.ObjectModTemplateItemFactory(new OverlayStream(_data.Slice(_ObjectModTemplateItemLocation!.Value.Min), _package), _package) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ObjectTemplateBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ObjectTemplateBinaryOverlay ObjectTemplateFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new ObjectTemplateBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ObjectTemplateBinaryOverlay ObjectTemplateFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return ObjectTemplateFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.OBTF:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)ObjectTemplate_FieldIndex.EditorOnly) return ParseResult.Stop;
                    _EditorOnlyLocation = (stream.Position - offset);
                    return (int)ObjectTemplate_FieldIndex.EditorOnly;
                }
                case RecordTypeInts.FULL:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)ObjectTemplate_FieldIndex.Name) return ParseResult.Stop;
                    _NameLocation = (stream.Position - offset);
                    return (int)ObjectTemplate_FieldIndex.Name;
                }
                case RecordTypeInts.OBTS:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)ObjectTemplate_FieldIndex.ObjectModTemplateItem) return ParseResult.Stop;
                    _ObjectModTemplateItemLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)ObjectTemplate_FieldIndex.ObjectModTemplateItem;
                }
                case RecordTypeInts.STOP: // End Marker
                {
                    stream.ReadSubrecordFrame();
                    return ParseResult.Stop;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ObjectTemplateMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IObjectTemplateGetter rhs) return false;
            return ((ObjectTemplateCommon)((IObjectTemplateGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IObjectTemplateGetter? obj)
        {
            return ((ObjectTemplateCommon)((IObjectTemplateGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ObjectTemplateCommon)((IObjectTemplateGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

