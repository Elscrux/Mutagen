/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class ObjectModIntProperty<T> :
        AObjectModProperty<T>,
        IEquatable<IObjectModIntPropertyGetter<T>>,
        ILoquiObjectSetter<ObjectModIntProperty<T>>,
        IObjectModIntProperty<T>
        where T : struct, Enum
    {
        #region Ctor
        public ObjectModIntProperty()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Value
        public UInt32 Value { get; set; } = default(UInt32);
        #endregion
        #region Value2
        public UInt32 Value2 { get; set; } = default(UInt32);
        #endregion
        #region FunctionType
        public ObjectModProperty.FloatFunctionType FunctionType { get; set; } = default(ObjectModProperty.FloatFunctionType);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ObjectModIntPropertyMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IObjectModIntPropertyGetter<T> rhs) return false;
            return ((ObjectModIntPropertyCommon<T>)((IObjectModIntPropertyGetter<T>)this).CommonInstance(typeof(T))!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IObjectModIntPropertyGetter<T>? obj)
        {
            return ((ObjectModIntPropertyCommon<T>)((IObjectModIntPropertyGetter<T>)this).CommonInstance(typeof(T))!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ObjectModIntPropertyCommon<T>)((IObjectModIntPropertyGetter<T>)this).CommonInstance(typeof(T))!).GetHashCode(this);

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ObjectModIntPropertyBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ObjectModIntPropertyBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static ObjectModIntProperty<T> CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new ObjectModIntProperty<T>();
            ((ObjectModIntPropertySetterCommon<T>)((IObjectModIntPropertyGetter<T>)ret).CommonSetterInstance(typeof(T))!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ObjectModIntProperty<T> item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ObjectModIntPropertySetterCommon<T>)((IObjectModIntPropertyGetter<T>)this).CommonSetterInstance(typeof(T))!).Clear(this);
        }

        internal static new ObjectModIntProperty<T> GetNew()
        {
            return new ObjectModIntProperty<T>();
        }

    }
    #endregion

    #region Interface
    public partial interface IObjectModIntProperty<T> :
        IAObjectModProperty<T>,
        ILoquiObjectSetter<IObjectModIntProperty<T>>,
        IObjectModIntPropertyGetter<T>
        where T : struct, Enum
    {
        new UInt32 Value { get; set; }
        new UInt32 Value2 { get; set; }
        new ObjectModProperty.FloatFunctionType FunctionType { get; set; }
    }

    public partial interface IObjectModIntPropertyGetter<out T> :
        IAObjectModPropertyGetter<T>,
        IBinaryItem,
        ILoquiObject<IObjectModIntPropertyGetter<T>>
        where T : struct, Enum
    {
        static new ILoquiRegistration StaticRegistration => ObjectModIntProperty_Registration.Instance;
        UInt32 Value { get; }
        UInt32 Value2 { get; }
        ObjectModProperty.FloatFunctionType FunctionType { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ObjectModIntPropertyMixIn
    {
        public static void Clear<T>(this IObjectModIntProperty<T> item)
            where T : struct, Enum
        {
            ((ObjectModIntPropertySetterCommon<T>)((IObjectModIntPropertyGetter<T>)item).CommonSetterInstance(typeof(T))!).Clear(item: item);
        }

        public static ObjectModIntProperty.Mask<bool> GetEqualsMask<T>(
            this IObjectModIntPropertyGetter<T> item,
            IObjectModIntPropertyGetter<T> rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
            where T : struct, Enum
        {
            return ((ObjectModIntPropertyCommon<T>)((IObjectModIntPropertyGetter<T>)item).CommonInstance(typeof(T))!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print<T>(
            this IObjectModIntPropertyGetter<T> item,
            string? name = null,
            ObjectModIntProperty.Mask<bool>? printMask = null)
            where T : struct, Enum
        {
            return ((ObjectModIntPropertyCommon<T>)((IObjectModIntPropertyGetter<T>)item).CommonInstance(typeof(T))!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print<T>(
            this IObjectModIntPropertyGetter<T> item,
            StructuredStringBuilder sb,
            string? name = null,
            ObjectModIntProperty.Mask<bool>? printMask = null)
            where T : struct, Enum
        {
            ((ObjectModIntPropertyCommon<T>)((IObjectModIntPropertyGetter<T>)item).CommonInstance(typeof(T))!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals<T>(
            this IObjectModIntPropertyGetter<T> item,
            IObjectModIntPropertyGetter<T> rhs)
            where T : struct, Enum
        {
            return ((ObjectModIntPropertyCommon<T>)((IObjectModIntPropertyGetter<T>)item).CommonInstance(typeof(T))!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: null);
        }

        public static bool Equals<T>(
            this IObjectModIntPropertyGetter<T> item,
            IObjectModIntPropertyGetter<T> rhs,
            ObjectModIntProperty.TranslationMask equalsMask)
            where T : struct, Enum
        {
            return ((ObjectModIntPropertyCommon<T>)((IObjectModIntPropertyGetter<T>)item).CommonInstance(typeof(T))!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask.GetCrystal());
        }

        public static void DeepCopyIn<T>(
            this IObjectModIntProperty<T> lhs,
            IObjectModIntPropertyGetter<T> rhs,
            out ObjectModIntProperty.ErrorMask errorMask,
            ObjectModIntProperty.TranslationMask? copyMask = null)
            where T : struct, Enum
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ObjectModIntPropertySetterTranslationCommon)((IObjectModIntPropertyGetter<T>)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ObjectModIntProperty.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn<T>(
            this IObjectModIntProperty<T> lhs,
            IObjectModIntPropertyGetter<T> rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
            where T : struct, Enum
        {
            ((ObjectModIntPropertySetterTranslationCommon)((IObjectModIntPropertyGetter<T>)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ObjectModIntProperty<T> DeepCopy<T>(
            this IObjectModIntPropertyGetter<T> item,
            ObjectModIntProperty.TranslationMask? copyMask = null)
            where T : struct, Enum
        {
            return ((ObjectModIntPropertySetterTranslationCommon)((IObjectModIntPropertyGetter<T>)item).CommonSetterTranslationInstance()!).DeepCopy<T>(
                item: item,
                copyMask: copyMask);
        }

        public static ObjectModIntProperty<T> DeepCopy<T>(
            this IObjectModIntPropertyGetter<T> item,
            out ObjectModIntProperty.ErrorMask errorMask,
            ObjectModIntProperty.TranslationMask? copyMask = null)
            where T : struct, Enum
        {
            return ((ObjectModIntPropertySetterTranslationCommon)((IObjectModIntPropertyGetter<T>)item).CommonSetterTranslationInstance()!).DeepCopy<T>(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ObjectModIntProperty<T> DeepCopy<T>(
            this IObjectModIntPropertyGetter<T> item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
            where T : struct, Enum
        {
            return ((ObjectModIntPropertySetterTranslationCommon)((IObjectModIntPropertyGetter<T>)item).CommonSetterTranslationInstance()!).DeepCopy<T>(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary<T>(
            this IObjectModIntProperty<T> item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
            where T : struct, Enum
        {
            ((ObjectModIntPropertySetterCommon<T>)((IObjectModIntPropertyGetter<T>)item).CommonSetterInstance(typeof(T))!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum ObjectModIntProperty_FieldIndex
    {
        Property = 0,
        Step = 1,
        Value = 2,
        Value2 = 3,
        FunctionType = 4,
    }
    #endregion

    #region Registration
    internal partial class ObjectModIntProperty_Registration : ILoquiRegistration
    {
        public static readonly ObjectModIntProperty_Registration Instance = new ObjectModIntProperty_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(ObjectModIntProperty.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ObjectModIntProperty.ErrorMask);

        public static readonly Type ClassType = typeof(ObjectModIntProperty<>);

        public static readonly Type GetterType = typeof(IObjectModIntPropertyGetter<>);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IObjectModIntProperty<>);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.ObjectModIntProperty";

        public const string Name = "ObjectModIntProperty";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 1;

        public static readonly Type? GenericRegistrationType = typeof(ObjectModIntProperty_Registration<>);

        public static readonly Type BinaryWriteTranslation = typeof(ObjectModIntPropertyBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }

    internal class ObjectModIntProperty_Registration<T> : ObjectModIntProperty_Registration
        where T : struct, Enum
    {
        public static readonly ObjectModIntProperty_Registration<T> GenericInstance = new ObjectModIntProperty_Registration<T>();

    }
    #endregion

    #region Common
    internal partial class ObjectModIntPropertySetterCommon<T> : AObjectModPropertySetterCommon<T>
        where T : struct, Enum
    {
        public new static readonly ObjectModIntPropertySetterCommon<T> Instance = new ObjectModIntPropertySetterCommon<T>();

        partial void ClearPartial();
        
        public void Clear(IObjectModIntProperty<T> item)
        {
            ClearPartial();
            item.Value = default(UInt32);
            item.Value2 = default(UInt32);
            item.FunctionType = default(ObjectModProperty.FloatFunctionType);
            base.Clear(item);
        }
        
        public override void Clear(IAObjectModProperty<T> item)
        {
            Clear(item: (IObjectModIntProperty<T>)item);
        }
        
        #region Mutagen
        public void RemapLinks(IObjectModIntProperty<T> obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IObjectModIntProperty<T> item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ObjectModIntPropertyBinaryCreateTranslation<T>.FillBinaryStructs);
        }
        
        public override void CopyInFromBinary(
            IAObjectModProperty<T> item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ObjectModIntProperty<T>)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class ObjectModIntPropertyCommon<T> : AObjectModPropertyCommon<T>
        where T : struct, Enum
    {
        public new static readonly ObjectModIntPropertyCommon<T> Instance = new ObjectModIntPropertyCommon<T>();

        public ObjectModIntProperty.Mask<bool> GetEqualsMask(
            IObjectModIntPropertyGetter<T> item,
            IObjectModIntPropertyGetter<T> rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ObjectModIntProperty.Mask<bool>(false);
            ((ObjectModIntPropertyCommon<T>)((IObjectModIntPropertyGetter<T>)item).CommonInstance(typeof(T))!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IObjectModIntPropertyGetter<T> item,
            IObjectModIntPropertyGetter<T> rhs,
            ObjectModIntProperty.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Value = item.Value == rhs.Value;
            ret.Value2 = item.Value2 == rhs.Value2;
            ret.FunctionType = item.FunctionType == rhs.FunctionType;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IObjectModIntPropertyGetter<T> item,
            string? name = null,
            ObjectModIntProperty.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IObjectModIntPropertyGetter<T> item,
            StructuredStringBuilder sb,
            string? name = null,
            ObjectModIntProperty.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"ObjectModIntProperty<{typeof(T).Name}> =>");
            }
            else
            {
                sb.AppendLine($"{name} (ObjectModIntProperty<{typeof(T).Name}>) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IObjectModIntPropertyGetter<T> item,
            StructuredStringBuilder sb,
            ObjectModIntProperty.Mask<bool>? printMask = null)
        {
            AObjectModPropertyCommon<T>.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Value ?? true)
            {
                sb.AppendItem(item.Value, "Value");
            }
            if (printMask?.Value2 ?? true)
            {
                sb.AppendItem(item.Value2, "Value2");
            }
            if (printMask?.FunctionType ?? true)
            {
                sb.AppendItem(item.FunctionType, "FunctionType");
            }
        }
        
        public static ObjectModIntProperty_FieldIndex ConvertFieldIndex(AObjectModProperty_FieldIndex index)
        {
            switch (index)
            {
                case AObjectModProperty_FieldIndex.Property:
                    return (ObjectModIntProperty_FieldIndex)((int)index);
                case AObjectModProperty_FieldIndex.Step:
                    return (ObjectModIntProperty_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IObjectModIntPropertyGetter<T>? lhs,
            IObjectModIntPropertyGetter<T>? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAObjectModPropertyGetter<T>)lhs, (IAObjectModPropertyGetter<T>)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)ObjectModIntProperty_FieldIndex.Value) ?? true))
            {
                if (lhs.Value != rhs.Value) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectModIntProperty_FieldIndex.Value2) ?? true))
            {
                if (lhs.Value2 != rhs.Value2) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectModIntProperty_FieldIndex.FunctionType) ?? true))
            {
                if (lhs.FunctionType != rhs.FunctionType) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAObjectModPropertyGetter<T>? lhs,
            IAObjectModPropertyGetter<T>? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IObjectModIntPropertyGetter<T>?)lhs,
                rhs: rhs as IObjectModIntPropertyGetter<T>,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IObjectModIntPropertyGetter<T> item)
        {
            var hash = new HashCode();
            hash.Add(item.Value);
            hash.Add(item.Value2);
            hash.Add(item.FunctionType);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAObjectModPropertyGetter<T> item)
        {
            return GetHashCode(item: (IObjectModIntPropertyGetter<T>)item);
        }
        
        #endregion
        
        
        public override object GetNew<T_Setter>()
        {
            return ObjectModIntProperty<T_Setter>.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IObjectModIntPropertyGetter<T> obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class ObjectModIntPropertySetterTranslationCommon : AObjectModPropertySetterTranslationCommon
    {
        public new static readonly ObjectModIntPropertySetterTranslationCommon Instance = new ObjectModIntPropertySetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn<T>(
            IObjectModIntProperty<T> item,
            IObjectModIntPropertyGetter<T> rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
            where T : struct, Enum
        {
            base.DeepCopyIn<T>(
                (IAObjectModProperty<T>)item,
                (IAObjectModPropertyGetter<T>)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)ObjectModIntProperty_FieldIndex.Value) ?? true))
            {
                item.Value = rhs.Value;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectModIntProperty_FieldIndex.Value2) ?? true))
            {
                item.Value2 = rhs.Value2;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectModIntProperty_FieldIndex.FunctionType) ?? true))
            {
                item.FunctionType = rhs.FunctionType;
            }
        }
        
        
        public override void DeepCopyIn<T>(
            IAObjectModProperty<T> item,
            IAObjectModPropertyGetter<T> rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IObjectModIntProperty<T>)item,
                rhs: (IObjectModIntPropertyGetter<T>)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public ObjectModIntProperty<T> DeepCopy<T>(
            IObjectModIntPropertyGetter<T> item,
            ObjectModIntProperty.TranslationMask? copyMask = null)
            where T : struct, Enum
        {
            ObjectModIntProperty<T> ret = (ObjectModIntProperty<T>)((ObjectModIntPropertyCommon<T>)((IObjectModIntPropertyGetter<T>)item).CommonInstance(typeof(T))!).GetNew<T>();
            ((ObjectModIntPropertySetterTranslationCommon)((IObjectModIntPropertyGetter<T>)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ObjectModIntProperty<T> DeepCopy<T>(
            IObjectModIntPropertyGetter<T> item,
            out ObjectModIntProperty.ErrorMask errorMask,
            ObjectModIntProperty.TranslationMask? copyMask = null)
            where T : struct, Enum
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ObjectModIntProperty<T> ret = (ObjectModIntProperty<T>)((ObjectModIntPropertyCommon<T>)((IObjectModIntPropertyGetter<T>)item).CommonInstance(typeof(T))!).GetNew<T>();
            ((ObjectModIntPropertySetterTranslationCommon)((IObjectModIntPropertyGetter<T>)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ObjectModIntProperty.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ObjectModIntProperty<T> DeepCopy<T>(
            IObjectModIntPropertyGetter<T> item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
            where T : struct, Enum
        {
            ObjectModIntProperty<T> ret = (ObjectModIntProperty<T>)((ObjectModIntPropertyCommon<T>)((IObjectModIntPropertyGetter<T>)item).CommonInstance(typeof(T))!).GetNew<T>();
            ((ObjectModIntPropertySetterTranslationCommon)((IObjectModIntPropertyGetter<T>)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class ObjectModIntProperty<T>
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ObjectModIntProperty_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ObjectModIntProperty_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance(Type type0) => GenericCommonInstanceGetter.Get(ObjectModIntPropertyCommon<T>.Instance, typeof(T), type0);
        [DebuggerStepThrough]
        protected override object CommonSetterInstance(Type type0)
        {
            return GenericCommonInstanceGetter.Get(ObjectModIntPropertySetterCommon<T>.Instance, typeof(T), type0);
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ObjectModIntPropertySetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class ObjectModIntPropertyBinaryWriteTranslation :
        AObjectModPropertyBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly ObjectModIntPropertyBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded<T>(
            IObjectModIntPropertyGetter<T> item,
            MutagenWriter writer)
            where T : struct, Enum
        {
            AObjectModPropertyBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            writer.Write(item.Value);
            writer.Write(item.Value2);
            EnumBinaryTranslation<ObjectModProperty.FloatFunctionType, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.FunctionType,
                length: 4);
        }

        public void Write<T>(
            MutagenWriter writer,
            IObjectModIntPropertyGetter<T> item,
            TypedWriteParams translationParams)
            where T : struct, Enum
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            throw new NotImplementedException();
        }

        public override void Write<T>(
            MutagenWriter writer,
            IAObjectModPropertyGetter<T> item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IObjectModIntPropertyGetter<T>)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ObjectModIntPropertyBinaryCreateTranslation<T> : AObjectModPropertyBinaryCreateTranslation<T>
        where T : struct, Enum
    {
        public new static readonly ObjectModIntPropertyBinaryCreateTranslation<T> Instance = new ObjectModIntPropertyBinaryCreateTranslation<T>();

        public static void FillBinaryStructs(
            IObjectModIntProperty<T> item,
            MutagenFrame frame)
        {
            AObjectModPropertyBinaryCreateTranslation<T>.FillBinaryStructs(
                item: item,
                frame: frame);
            item.Value = frame.ReadUInt32();
            item.Value2 = frame.ReadUInt32();
            item.FunctionType = EnumBinaryTranslation<ObjectModProperty.FloatFunctionType, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ObjectModIntPropertyBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class ObjectModIntPropertyBinaryOverlay<T> :
        AObjectModPropertyBinaryOverlay<T>,
        IObjectModIntPropertyGetter<T>
        where T : struct, Enum
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ObjectModIntProperty_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ObjectModIntProperty_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance(Type type0) => GenericCommonInstanceGetter.Get(ObjectModIntPropertyCommon<T>.Instance, typeof(T), type0);
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ObjectModIntPropertySetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ObjectModIntPropertyBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ObjectModIntPropertyBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public UInt32 Value => BinaryPrimitives.ReadUInt32LittleEndian(_structData.Slice(0x5, 0x4));
        public UInt32 Value2 => BinaryPrimitives.ReadUInt32LittleEndian(_structData.Slice(0x9, 0x4));
        public ObjectModProperty.FloatFunctionType FunctionType => (ObjectModProperty.FloatFunctionType)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0xD, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ObjectModIntPropertyBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IObjectModIntPropertyGetter<T> ObjectModIntPropertyFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x11,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new ObjectModIntPropertyBinaryOverlay<T>(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x11;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IObjectModIntPropertyGetter<T> ObjectModIntPropertyFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ObjectModIntPropertyFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ObjectModIntPropertyMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IObjectModIntPropertyGetter<T> rhs) return false;
            return ((ObjectModIntPropertyCommon<T>)((IObjectModIntPropertyGetter<T>)this).CommonInstance(typeof(T))!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IObjectModIntPropertyGetter<T>? obj)
        {
            return ((ObjectModIntPropertyCommon<T>)((IObjectModIntPropertyGetter<T>)this).CommonInstance(typeof(T))!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ObjectModIntPropertyCommon<T>)((IObjectModIntPropertyGetter<T>)this).CommonInstance(typeof(T))!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

namespace Mutagen.Bethesda.Fallout4
{
    public static class ObjectModIntProperty
    {
        public new class Mask<TItem> :
            AObjectModProperty.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Value = initialValue;
                this.Value2 = initialValue;
                this.FunctionType = initialValue;
            }
        
            public Mask(
                TItem Property,
                TItem Step,
                TItem Value,
                TItem Value2,
                TItem FunctionType)
            : base(
                Property: Property,
                Step: Step)
            {
                this.Value = Value;
                this.Value2 = Value2;
                this.FunctionType = FunctionType;
            }
        
            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618
        
            #endregion
        
            #region Members
            public TItem Value;
            public TItem Value2;
            public TItem FunctionType;
            #endregion
        
            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }
        
            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Value, rhs.Value)) return false;
                if (!object.Equals(this.Value2, rhs.Value2)) return false;
                if (!object.Equals(this.FunctionType, rhs.FunctionType)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Value);
                hash.Add(this.Value2);
                hash.Add(this.FunctionType);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }
        
            #endregion
        
            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Value)) return false;
                if (!eval(this.Value2)) return false;
                if (!eval(this.FunctionType)) return false;
                return true;
            }
            #endregion
        
            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Value)) return true;
                if (eval(this.Value2)) return true;
                if (eval(this.FunctionType)) return true;
                return false;
            }
            #endregion
        
            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ObjectModIntProperty.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }
        
            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Value = eval(this.Value);
                obj.Value2 = eval(this.Value2);
                obj.FunctionType = eval(this.FunctionType);
            }
            #endregion
        
            #region To String
            public override string ToString() => this.Print();
        
            public string Print(ObjectModIntProperty.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }
        
            public void Print(StructuredStringBuilder sb, ObjectModIntProperty.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(ObjectModIntProperty.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Value ?? true)
                    {
                        sb.AppendItem(Value, "Value");
                    }
                    if (printMask?.Value2 ?? true)
                    {
                        sb.AppendItem(Value2, "Value2");
                    }
                    if (printMask?.FunctionType ?? true)
                    {
                        sb.AppendItem(FunctionType, "FunctionType");
                    }
                }
            }
            #endregion
        
        }
        
        public new class ErrorMask :
            AObjectModProperty.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Value;
            public Exception? Value2;
            public Exception? FunctionType;
            #endregion
        
            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ObjectModIntProperty_FieldIndex enu = (ObjectModIntProperty_FieldIndex)index;
                switch (enu)
                {
                    case ObjectModIntProperty_FieldIndex.Value:
                        return Value;
                    case ObjectModIntProperty_FieldIndex.Value2:
                        return Value2;
                    case ObjectModIntProperty_FieldIndex.FunctionType:
                        return FunctionType;
                    default:
                        return base.GetNthMask(index);
                }
            }
        
            public override void SetNthException(int index, Exception ex)
            {
                ObjectModIntProperty_FieldIndex enu = (ObjectModIntProperty_FieldIndex)index;
                switch (enu)
                {
                    case ObjectModIntProperty_FieldIndex.Value:
                        this.Value = ex;
                        break;
                    case ObjectModIntProperty_FieldIndex.Value2:
                        this.Value2 = ex;
                        break;
                    case ObjectModIntProperty_FieldIndex.FunctionType:
                        this.FunctionType = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }
        
            public override void SetNthMask(int index, object obj)
            {
                ObjectModIntProperty_FieldIndex enu = (ObjectModIntProperty_FieldIndex)index;
                switch (enu)
                {
                    case ObjectModIntProperty_FieldIndex.Value:
                        this.Value = (Exception?)obj;
                        break;
                    case ObjectModIntProperty_FieldIndex.Value2:
                        this.Value2 = (Exception?)obj;
                        break;
                    case ObjectModIntProperty_FieldIndex.FunctionType:
                        this.FunctionType = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }
        
            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Value != null) return true;
                if (Value2 != null) return true;
                if (FunctionType != null) return true;
                return false;
            }
            #endregion
        
            #region To String
            public override string ToString() => this.Print();
        
            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Value, "Value");
                }
                {
                    sb.AppendItem(Value2, "Value2");
                }
                {
                    sb.AppendItem(FunctionType, "FunctionType");
                }
            }
            #endregion
        
            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Value = this.Value.Combine(rhs.Value);
                ret.Value2 = this.Value2.Combine(rhs.Value2);
                ret.FunctionType = this.FunctionType.Combine(rhs.FunctionType);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion
        
            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion
        
        }
        public new class TranslationMask :
            AObjectModProperty.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Value;
            public bool Value2;
            public bool FunctionType;
            #endregion
        
            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Value = defaultOn;
                this.Value2 = defaultOn;
                this.FunctionType = defaultOn;
            }
        
            #endregion
        
            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Value, null));
                ret.Add((Value2, null));
                ret.Add((FunctionType, null));
            }
        
            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }
        
        }
    }
}
