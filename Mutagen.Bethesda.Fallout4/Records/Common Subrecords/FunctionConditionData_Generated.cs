/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class FunctionConditionData :
        ConditionData,
        IEquatable<IFunctionConditionDataGetter>,
        IFunctionConditionData,
        ILoquiObjectSetter<FunctionConditionData>
    {
        #region Ctor
        public FunctionConditionData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Function
        public Condition.Function Function { get; set; } = default;
        #endregion
        #region Unknown2
        public UInt16 Unknown2 { get; set; } = default;
        #endregion
        #region ParameterOneRecord
        private readonly IFormLink<IFallout4MajorRecordGetter> _ParameterOneRecord = new FormLink<IFallout4MajorRecordGetter>();
        public IFormLink<IFallout4MajorRecordGetter> ParameterOneRecord
        {
            get => _ParameterOneRecord;
            set => _ParameterOneRecord.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IFallout4MajorRecordGetter> IFunctionConditionDataGetter.ParameterOneRecord => this.ParameterOneRecord;
        #endregion
        #region ParameterOneNumber
        public Int32 ParameterOneNumber { get; set; } = default;
        #endregion
        #region ParameterOneString
        public String? ParameterOneString { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IFunctionConditionDataGetter.ParameterOneString => this.ParameterOneString;
        #endregion
        #region ParameterTwoRecord
        private readonly IFormLink<IFallout4MajorRecordGetter> _ParameterTwoRecord = new FormLink<IFallout4MajorRecordGetter>();
        public IFormLink<IFallout4MajorRecordGetter> ParameterTwoRecord
        {
            get => _ParameterTwoRecord;
            set => _ParameterTwoRecord.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IFallout4MajorRecordGetter> IFunctionConditionDataGetter.ParameterTwoRecord => this.ParameterTwoRecord;
        #endregion
        #region ParameterTwoNumber
        public Int32 ParameterTwoNumber { get; set; } = default;
        #endregion
        #region ParameterTwoString
        public String? ParameterTwoString { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IFunctionConditionDataGetter.ParameterTwoString => this.ParameterTwoString;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FunctionConditionDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IFunctionConditionDataGetter rhs) return false;
            return ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IFunctionConditionDataGetter? obj)
        {
            return ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            ConditionData.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Function = initialValue;
                this.Unknown2 = initialValue;
                this.ParameterOneRecord = initialValue;
                this.ParameterOneNumber = initialValue;
                this.ParameterOneString = initialValue;
                this.ParameterTwoRecord = initialValue;
                this.ParameterTwoNumber = initialValue;
                this.ParameterTwoString = initialValue;
            }

            public Mask(
                TItem RunOnType,
                TItem Reference,
                TItem Unknown3,
                TItem Function,
                TItem Unknown2,
                TItem ParameterOneRecord,
                TItem ParameterOneNumber,
                TItem ParameterOneString,
                TItem ParameterTwoRecord,
                TItem ParameterTwoNumber,
                TItem ParameterTwoString)
            : base(
                RunOnType: RunOnType,
                Reference: Reference,
                Unknown3: Unknown3)
            {
                this.Function = Function;
                this.Unknown2 = Unknown2;
                this.ParameterOneRecord = ParameterOneRecord;
                this.ParameterOneNumber = ParameterOneNumber;
                this.ParameterOneString = ParameterOneString;
                this.ParameterTwoRecord = ParameterTwoRecord;
                this.ParameterTwoNumber = ParameterTwoNumber;
                this.ParameterTwoString = ParameterTwoString;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Function;
            public TItem Unknown2;
            public TItem ParameterOneRecord;
            public TItem ParameterOneNumber;
            public TItem ParameterOneString;
            public TItem ParameterTwoRecord;
            public TItem ParameterTwoNumber;
            public TItem ParameterTwoString;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Function, rhs.Function)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.ParameterOneRecord, rhs.ParameterOneRecord)) return false;
                if (!object.Equals(this.ParameterOneNumber, rhs.ParameterOneNumber)) return false;
                if (!object.Equals(this.ParameterOneString, rhs.ParameterOneString)) return false;
                if (!object.Equals(this.ParameterTwoRecord, rhs.ParameterTwoRecord)) return false;
                if (!object.Equals(this.ParameterTwoNumber, rhs.ParameterTwoNumber)) return false;
                if (!object.Equals(this.ParameterTwoString, rhs.ParameterTwoString)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Function);
                hash.Add(this.Unknown2);
                hash.Add(this.ParameterOneRecord);
                hash.Add(this.ParameterOneNumber);
                hash.Add(this.ParameterOneString);
                hash.Add(this.ParameterTwoRecord);
                hash.Add(this.ParameterTwoNumber);
                hash.Add(this.ParameterTwoString);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Function)) return false;
                if (!eval(this.Unknown2)) return false;
                if (!eval(this.ParameterOneRecord)) return false;
                if (!eval(this.ParameterOneNumber)) return false;
                if (!eval(this.ParameterOneString)) return false;
                if (!eval(this.ParameterTwoRecord)) return false;
                if (!eval(this.ParameterTwoNumber)) return false;
                if (!eval(this.ParameterTwoString)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Function)) return true;
                if (eval(this.Unknown2)) return true;
                if (eval(this.ParameterOneRecord)) return true;
                if (eval(this.ParameterOneNumber)) return true;
                if (eval(this.ParameterOneString)) return true;
                if (eval(this.ParameterTwoRecord)) return true;
                if (eval(this.ParameterTwoNumber)) return true;
                if (eval(this.ParameterTwoString)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new FunctionConditionData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Function = eval(this.Function);
                obj.Unknown2 = eval(this.Unknown2);
                obj.ParameterOneRecord = eval(this.ParameterOneRecord);
                obj.ParameterOneNumber = eval(this.ParameterOneNumber);
                obj.ParameterOneString = eval(this.ParameterOneString);
                obj.ParameterTwoRecord = eval(this.ParameterTwoRecord);
                obj.ParameterTwoNumber = eval(this.ParameterTwoNumber);
                obj.ParameterTwoString = eval(this.ParameterTwoString);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(FunctionConditionData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, FunctionConditionData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(FunctionConditionData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Function ?? true)
                    {
                        fg.AppendItem(Function, "Function");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        fg.AppendItem(Unknown2, "Unknown2");
                    }
                    if (printMask?.ParameterOneRecord ?? true)
                    {
                        fg.AppendItem(ParameterOneRecord, "ParameterOneRecord");
                    }
                    if (printMask?.ParameterOneNumber ?? true)
                    {
                        fg.AppendItem(ParameterOneNumber, "ParameterOneNumber");
                    }
                    if (printMask?.ParameterOneString ?? true)
                    {
                        fg.AppendItem(ParameterOneString, "ParameterOneString");
                    }
                    if (printMask?.ParameterTwoRecord ?? true)
                    {
                        fg.AppendItem(ParameterTwoRecord, "ParameterTwoRecord");
                    }
                    if (printMask?.ParameterTwoNumber ?? true)
                    {
                        fg.AppendItem(ParameterTwoNumber, "ParameterTwoNumber");
                    }
                    if (printMask?.ParameterTwoString ?? true)
                    {
                        fg.AppendItem(ParameterTwoString, "ParameterTwoString");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            ConditionData.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Function;
            public Exception? Unknown2;
            public Exception? ParameterOneRecord;
            public Exception? ParameterOneNumber;
            public Exception? ParameterOneString;
            public Exception? ParameterTwoRecord;
            public Exception? ParameterTwoNumber;
            public Exception? ParameterTwoString;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                FunctionConditionData_FieldIndex enu = (FunctionConditionData_FieldIndex)index;
                switch (enu)
                {
                    case FunctionConditionData_FieldIndex.Function:
                        return Function;
                    case FunctionConditionData_FieldIndex.Unknown2:
                        return Unknown2;
                    case FunctionConditionData_FieldIndex.ParameterOneRecord:
                        return ParameterOneRecord;
                    case FunctionConditionData_FieldIndex.ParameterOneNumber:
                        return ParameterOneNumber;
                    case FunctionConditionData_FieldIndex.ParameterOneString:
                        return ParameterOneString;
                    case FunctionConditionData_FieldIndex.ParameterTwoRecord:
                        return ParameterTwoRecord;
                    case FunctionConditionData_FieldIndex.ParameterTwoNumber:
                        return ParameterTwoNumber;
                    case FunctionConditionData_FieldIndex.ParameterTwoString:
                        return ParameterTwoString;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                FunctionConditionData_FieldIndex enu = (FunctionConditionData_FieldIndex)index;
                switch (enu)
                {
                    case FunctionConditionData_FieldIndex.Function:
                        this.Function = ex;
                        break;
                    case FunctionConditionData_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    case FunctionConditionData_FieldIndex.ParameterOneRecord:
                        this.ParameterOneRecord = ex;
                        break;
                    case FunctionConditionData_FieldIndex.ParameterOneNumber:
                        this.ParameterOneNumber = ex;
                        break;
                    case FunctionConditionData_FieldIndex.ParameterOneString:
                        this.ParameterOneString = ex;
                        break;
                    case FunctionConditionData_FieldIndex.ParameterTwoRecord:
                        this.ParameterTwoRecord = ex;
                        break;
                    case FunctionConditionData_FieldIndex.ParameterTwoNumber:
                        this.ParameterTwoNumber = ex;
                        break;
                    case FunctionConditionData_FieldIndex.ParameterTwoString:
                        this.ParameterTwoString = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                FunctionConditionData_FieldIndex enu = (FunctionConditionData_FieldIndex)index;
                switch (enu)
                {
                    case FunctionConditionData_FieldIndex.Function:
                        this.Function = (Exception?)obj;
                        break;
                    case FunctionConditionData_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    case FunctionConditionData_FieldIndex.ParameterOneRecord:
                        this.ParameterOneRecord = (Exception?)obj;
                        break;
                    case FunctionConditionData_FieldIndex.ParameterOneNumber:
                        this.ParameterOneNumber = (Exception?)obj;
                        break;
                    case FunctionConditionData_FieldIndex.ParameterOneString:
                        this.ParameterOneString = (Exception?)obj;
                        break;
                    case FunctionConditionData_FieldIndex.ParameterTwoRecord:
                        this.ParameterTwoRecord = (Exception?)obj;
                        break;
                    case FunctionConditionData_FieldIndex.ParameterTwoNumber:
                        this.ParameterTwoNumber = (Exception?)obj;
                        break;
                    case FunctionConditionData_FieldIndex.ParameterTwoString:
                        this.ParameterTwoString = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Function != null) return true;
                if (Unknown2 != null) return true;
                if (ParameterOneRecord != null) return true;
                if (ParameterOneNumber != null) return true;
                if (ParameterOneString != null) return true;
                if (ParameterTwoRecord != null) return true;
                if (ParameterTwoNumber != null) return true;
                if (ParameterTwoString != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Function, "Function");
                fg.AppendItem(Unknown2, "Unknown2");
                fg.AppendItem(ParameterOneRecord, "ParameterOneRecord");
                fg.AppendItem(ParameterOneNumber, "ParameterOneNumber");
                fg.AppendItem(ParameterOneString, "ParameterOneString");
                fg.AppendItem(ParameterTwoRecord, "ParameterTwoRecord");
                fg.AppendItem(ParameterTwoNumber, "ParameterTwoNumber");
                fg.AppendItem(ParameterTwoString, "ParameterTwoString");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Function = this.Function.Combine(rhs.Function);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                ret.ParameterOneRecord = this.ParameterOneRecord.Combine(rhs.ParameterOneRecord);
                ret.ParameterOneNumber = this.ParameterOneNumber.Combine(rhs.ParameterOneNumber);
                ret.ParameterOneString = this.ParameterOneString.Combine(rhs.ParameterOneString);
                ret.ParameterTwoRecord = this.ParameterTwoRecord.Combine(rhs.ParameterTwoRecord);
                ret.ParameterTwoNumber = this.ParameterTwoNumber.Combine(rhs.ParameterTwoNumber);
                ret.ParameterTwoString = this.ParameterTwoString.Combine(rhs.ParameterTwoString);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ConditionData.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Function;
            public bool Unknown2;
            public bool ParameterOneRecord;
            public bool ParameterOneNumber;
            public bool ParameterOneString;
            public bool ParameterTwoRecord;
            public bool ParameterTwoNumber;
            public bool ParameterTwoString;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Function = defaultOn;
                this.Unknown2 = defaultOn;
                this.ParameterOneRecord = defaultOn;
                this.ParameterOneNumber = defaultOn;
                this.ParameterOneString = defaultOn;
                this.ParameterTwoRecord = defaultOn;
                this.ParameterTwoNumber = defaultOn;
                this.ParameterTwoString = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Function, null));
                ret.Add((Unknown2, null));
                ret.Add((ParameterOneRecord, null));
                ret.Add((ParameterOneNumber, null));
                ret.Add((ParameterOneString, null));
                ret.Add((ParameterTwoRecord, null));
                ret.Add((ParameterTwoNumber, null));
                ret.Add((ParameterTwoString, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => FunctionConditionDataCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FunctionConditionDataSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FunctionConditionDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((FunctionConditionDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static FunctionConditionData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new FunctionConditionData();
            ((FunctionConditionDataSetterCommon)((IFunctionConditionDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out FunctionConditionData item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((FunctionConditionDataSetterCommon)((IFunctionConditionDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new FunctionConditionData GetNew()
        {
            return new FunctionConditionData();
        }

    }
    #endregion

    #region Interface
    public partial interface IFunctionConditionData :
        IConditionData,
        IFormLinkContainer,
        IFunctionConditionDataGetter,
        ILoquiObjectSetter<IFunctionConditionData>
    {
        new Condition.Function Function { get; set; }
        new UInt16 Unknown2 { get; set; }
        new IFormLink<IFallout4MajorRecordGetter> ParameterOneRecord { get; set; }
        new Int32 ParameterOneNumber { get; set; }
        new String? ParameterOneString { get; set; }
        new IFormLink<IFallout4MajorRecordGetter> ParameterTwoRecord { get; set; }
        new Int32 ParameterTwoNumber { get; set; }
        new String? ParameterTwoString { get; set; }
    }

    public partial interface IFunctionConditionDataGetter :
        IConditionDataGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IFunctionConditionDataGetter>
    {
        static new ILoquiRegistration StaticRegistration => FunctionConditionData_Registration.Instance;
        Condition.Function Function { get; }
        UInt16 Unknown2 { get; }
        IFormLinkGetter<IFallout4MajorRecordGetter> ParameterOneRecord { get; }
        Int32 ParameterOneNumber { get; }
        String? ParameterOneString { get; }
        IFormLinkGetter<IFallout4MajorRecordGetter> ParameterTwoRecord { get; }
        Int32 ParameterTwoNumber { get; }
        String? ParameterTwoString { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class FunctionConditionDataMixIn
    {
        public static void Clear(this IFunctionConditionData item)
        {
            ((FunctionConditionDataSetterCommon)((IFunctionConditionDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static FunctionConditionData.Mask<bool> GetEqualsMask(
            this IFunctionConditionDataGetter item,
            IFunctionConditionDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IFunctionConditionDataGetter item,
            string? name = null,
            FunctionConditionData.Mask<bool>? printMask = null)
        {
            return ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IFunctionConditionDataGetter item,
            FileGeneration fg,
            string? name = null,
            FunctionConditionData.Mask<bool>? printMask = null)
        {
            ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IFunctionConditionDataGetter item,
            IFunctionConditionDataGetter rhs,
            FunctionConditionData.TranslationMask? equalsMask = null)
        {
            return ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IFunctionConditionData lhs,
            IFunctionConditionDataGetter rhs,
            out FunctionConditionData.ErrorMask errorMask,
            FunctionConditionData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FunctionConditionDataSetterTranslationCommon)((IFunctionConditionDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = FunctionConditionData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFunctionConditionData lhs,
            IFunctionConditionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FunctionConditionDataSetterTranslationCommon)((IFunctionConditionDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static FunctionConditionData DeepCopy(
            this IFunctionConditionDataGetter item,
            FunctionConditionData.TranslationMask? copyMask = null)
        {
            return ((FunctionConditionDataSetterTranslationCommon)((IFunctionConditionDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static FunctionConditionData DeepCopy(
            this IFunctionConditionDataGetter item,
            out FunctionConditionData.ErrorMask errorMask,
            FunctionConditionData.TranslationMask? copyMask = null)
        {
            return ((FunctionConditionDataSetterTranslationCommon)((IFunctionConditionDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static FunctionConditionData DeepCopy(
            this IFunctionConditionDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FunctionConditionDataSetterTranslationCommon)((IFunctionConditionDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IFunctionConditionData item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((FunctionConditionDataSetterCommon)((IFunctionConditionDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum FunctionConditionData_FieldIndex
    {
        RunOnType = 0,
        Reference = 1,
        Unknown3 = 2,
        Function = 3,
        Unknown2 = 4,
        ParameterOneRecord = 5,
        ParameterOneNumber = 6,
        ParameterOneString = 7,
        ParameterTwoRecord = 8,
        ParameterTwoNumber = 9,
        ParameterTwoString = 10,
    }
    #endregion

    #region Registration
    public partial class FunctionConditionData_Registration : ILoquiRegistration
    {
        public static readonly FunctionConditionData_Registration Instance = new FunctionConditionData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 292,
            version: 0);

        public const string GUID = "48451500-fe33-46bd-b637-8988397ec6f8";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(FunctionConditionData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(FunctionConditionData.ErrorMask);

        public static readonly Type ClassType = typeof(FunctionConditionData);

        public static readonly Type GetterType = typeof(IFunctionConditionDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFunctionConditionData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.FunctionConditionData";

        public const string Name = "FunctionConditionData";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(FunctionConditionDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class FunctionConditionDataSetterCommon : ConditionDataSetterCommon
    {
        public new static readonly FunctionConditionDataSetterCommon Instance = new FunctionConditionDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFunctionConditionData item)
        {
            ClearPartial();
            item.Function = default;
            item.Unknown2 = default;
            item.ParameterOneRecord.Clear();
            item.ParameterOneNumber = default;
            item.ParameterOneString = default;
            item.ParameterTwoRecord.Clear();
            item.ParameterTwoNumber = default;
            item.ParameterTwoString = default;
            base.Clear(item);
        }
        
        public override void Clear(IConditionData item)
        {
            Clear(item: (IFunctionConditionData)item);
        }
        
        #region Mutagen
        public void RemapLinks(IFunctionConditionData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.ParameterOneRecord.Relink(mapping);
            obj.ParameterTwoRecord.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IFunctionConditionData item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: FunctionConditionDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        public override void CopyInFromBinary(
            IConditionData item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (FunctionConditionData)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    public partial class FunctionConditionDataCommon : ConditionDataCommon
    {
        public new static readonly FunctionConditionDataCommon Instance = new FunctionConditionDataCommon();

        public FunctionConditionData.Mask<bool> GetEqualsMask(
            IFunctionConditionDataGetter item,
            IFunctionConditionDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new FunctionConditionData.Mask<bool>(false);
            ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFunctionConditionDataGetter item,
            IFunctionConditionDataGetter rhs,
            FunctionConditionData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Function = item.Function == rhs.Function;
            ret.Unknown2 = item.Unknown2 == rhs.Unknown2;
            ret.ParameterOneRecord = item.ParameterOneRecord.Equals(rhs.ParameterOneRecord);
            ret.ParameterOneNumber = item.ParameterOneNumber == rhs.ParameterOneNumber;
            ret.ParameterOneString = string.Equals(item.ParameterOneString, rhs.ParameterOneString);
            ret.ParameterTwoRecord = item.ParameterTwoRecord.Equals(rhs.ParameterTwoRecord);
            ret.ParameterTwoNumber = item.ParameterTwoNumber == rhs.ParameterTwoNumber;
            ret.ParameterTwoString = string.Equals(item.ParameterTwoString, rhs.ParameterTwoString);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IFunctionConditionDataGetter item,
            string? name = null,
            FunctionConditionData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IFunctionConditionDataGetter item,
            FileGeneration fg,
            string? name = null,
            FunctionConditionData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"FunctionConditionData =>");
            }
            else
            {
                fg.AppendLine($"{name} (FunctionConditionData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IFunctionConditionDataGetter item,
            FileGeneration fg,
            FunctionConditionData.Mask<bool>? printMask = null)
        {
            ConditionDataCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Function ?? true)
            {
                fg.AppendItem(item.Function, "Function");
            }
            if (printMask?.Unknown2 ?? true)
            {
                fg.AppendItem(item.Unknown2, "Unknown2");
            }
            if (printMask?.ParameterOneRecord ?? true)
            {
                fg.AppendItem(item.ParameterOneRecord.FormKey, "ParameterOneRecord");
            }
            if (printMask?.ParameterOneNumber ?? true)
            {
                fg.AppendItem(item.ParameterOneNumber, "ParameterOneNumber");
            }
            if ((printMask?.ParameterOneString ?? true)
                && item.ParameterOneString is {} ParameterOneStringItem)
            {
                fg.AppendItem(ParameterOneStringItem, "ParameterOneString");
            }
            if (printMask?.ParameterTwoRecord ?? true)
            {
                fg.AppendItem(item.ParameterTwoRecord.FormKey, "ParameterTwoRecord");
            }
            if (printMask?.ParameterTwoNumber ?? true)
            {
                fg.AppendItem(item.ParameterTwoNumber, "ParameterTwoNumber");
            }
            if ((printMask?.ParameterTwoString ?? true)
                && item.ParameterTwoString is {} ParameterTwoStringItem)
            {
                fg.AppendItem(ParameterTwoStringItem, "ParameterTwoString");
            }
        }
        
        public static FunctionConditionData_FieldIndex ConvertFieldIndex(ConditionData_FieldIndex index)
        {
            switch (index)
            {
                case ConditionData_FieldIndex.RunOnType:
                    return (FunctionConditionData_FieldIndex)((int)index);
                case ConditionData_FieldIndex.Reference:
                    return (FunctionConditionData_FieldIndex)((int)index);
                case ConditionData_FieldIndex.Unknown3:
                    return (FunctionConditionData_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFunctionConditionDataGetter? lhs,
            IFunctionConditionDataGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IConditionDataGetter)lhs, (IConditionDataGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.Function) ?? true))
            {
                if (lhs.Function != rhs.Function) return false;
            }
            if ((crystal?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.Unknown2) ?? true))
            {
                if (lhs.Unknown2 != rhs.Unknown2) return false;
            }
            if ((crystal?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterOneRecord) ?? true))
            {
                if (!lhs.ParameterOneRecord.Equals(rhs.ParameterOneRecord)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterOneNumber) ?? true))
            {
                if (lhs.ParameterOneNumber != rhs.ParameterOneNumber) return false;
            }
            if ((crystal?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterOneString) ?? true))
            {
                if (!string.Equals(lhs.ParameterOneString, rhs.ParameterOneString)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterTwoRecord) ?? true))
            {
                if (!lhs.ParameterTwoRecord.Equals(rhs.ParameterTwoRecord)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterTwoNumber) ?? true))
            {
                if (lhs.ParameterTwoNumber != rhs.ParameterTwoNumber) return false;
            }
            if ((crystal?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterTwoString) ?? true))
            {
                if (!string.Equals(lhs.ParameterTwoString, rhs.ParameterTwoString)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IConditionDataGetter? lhs,
            IConditionDataGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IFunctionConditionDataGetter?)lhs,
                rhs: rhs as IFunctionConditionDataGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(IFunctionConditionDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Function);
            hash.Add(item.Unknown2);
            hash.Add(item.ParameterOneRecord);
            hash.Add(item.ParameterOneNumber);
            if (item.ParameterOneString is {} ParameterOneStringitem)
            {
                hash.Add(ParameterOneStringitem);
            }
            hash.Add(item.ParameterTwoRecord);
            hash.Add(item.ParameterTwoNumber);
            if (item.ParameterTwoString is {} ParameterTwoStringitem)
            {
                hash.Add(ParameterTwoStringitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IConditionDataGetter item)
        {
            return GetHashCode(item: (IFunctionConditionDataGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return FunctionConditionData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IFunctionConditionDataGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            yield return FormLinkInformation.Factory(obj.ParameterOneRecord);
            yield return FormLinkInformation.Factory(obj.ParameterTwoRecord);
            yield break;
        }
        
        #endregion
        
    }
    public partial class FunctionConditionDataSetterTranslationCommon : ConditionDataSetterTranslationCommon
    {
        public new static readonly FunctionConditionDataSetterTranslationCommon Instance = new FunctionConditionDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IFunctionConditionData item,
            IFunctionConditionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IConditionData)item,
                (IConditionDataGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.Function) ?? true))
            {
                item.Function = rhs.Function;
            }
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterOneRecord) ?? true))
            {
                item.ParameterOneRecord.SetTo(rhs.ParameterOneRecord.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterOneNumber) ?? true))
            {
                item.ParameterOneNumber = rhs.ParameterOneNumber;
            }
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterOneString) ?? true))
            {
                item.ParameterOneString = rhs.ParameterOneString;
            }
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterTwoRecord) ?? true))
            {
                item.ParameterTwoRecord.SetTo(rhs.ParameterTwoRecord.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterTwoNumber) ?? true))
            {
                item.ParameterTwoNumber = rhs.ParameterTwoNumber;
            }
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterTwoString) ?? true))
            {
                item.ParameterTwoString = rhs.ParameterTwoString;
            }
        }
        
        
        public override void DeepCopyIn(
            IConditionData item,
            IConditionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFunctionConditionData)item,
                rhs: (IFunctionConditionDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public FunctionConditionData DeepCopy(
            IFunctionConditionDataGetter item,
            FunctionConditionData.TranslationMask? copyMask = null)
        {
            FunctionConditionData ret = (FunctionConditionData)((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()!).GetNew();
            ((FunctionConditionDataSetterTranslationCommon)((IFunctionConditionDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public FunctionConditionData DeepCopy(
            IFunctionConditionDataGetter item,
            out FunctionConditionData.ErrorMask errorMask,
            FunctionConditionData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            FunctionConditionData ret = (FunctionConditionData)((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()!).GetNew();
            ((FunctionConditionDataSetterTranslationCommon)((IFunctionConditionDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = FunctionConditionData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public FunctionConditionData DeepCopy(
            IFunctionConditionDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            FunctionConditionData ret = (FunctionConditionData)((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()!).GetNew();
            ((FunctionConditionDataSetterTranslationCommon)((IFunctionConditionDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class FunctionConditionData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FunctionConditionData_Registration.Instance;
        public new static FunctionConditionData_Registration StaticRegistration => FunctionConditionData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FunctionConditionDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return FunctionConditionDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FunctionConditionDataSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class FunctionConditionDataBinaryWriteTranslation :
        ConditionDataBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static FunctionConditionDataBinaryWriteTranslation Instance = new FunctionConditionDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            IFunctionConditionDataGetter item,
            MutagenWriter writer)
        {
            ConditionDataBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            EnumBinaryTranslation<Condition.Function, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Function,
                length: 2);
            writer.Write(item.Unknown2);
            FunctionConditionDataBinaryWriteTranslation.WriteBinaryParameterParsing(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryParameterParsingCustom(
            MutagenWriter writer,
            IFunctionConditionDataGetter item);

        public static void WriteBinaryParameterParsing(
            MutagenWriter writer,
            IFunctionConditionDataGetter item)
        {
            WriteBinaryParameterParsingCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IFunctionConditionDataGetter item,
            TypedWriteParams? translationParams = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IFunctionConditionDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IConditionDataGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IFunctionConditionDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class FunctionConditionDataBinaryCreateTranslation : ConditionDataBinaryCreateTranslation
    {
        public new readonly static FunctionConditionDataBinaryCreateTranslation Instance = new FunctionConditionDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IFunctionConditionData item,
            MutagenFrame frame)
        {
            ConditionDataBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            item.Function = EnumBinaryTranslation<Condition.Function, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 2);
            item.Unknown2 = frame.ReadUInt16();
            FunctionConditionDataBinaryCreateTranslation.FillBinaryParameterParsingCustom(
                frame: frame,
                item: item);
        }

        public static partial void FillBinaryParameterParsingCustom(
            MutagenFrame frame,
            IFunctionConditionData item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class FunctionConditionDataBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class FunctionConditionDataBinaryOverlay :
        ConditionDataBinaryOverlay,
        IFunctionConditionDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FunctionConditionData_Registration.Instance;
        public new static FunctionConditionData_Registration StaticRegistration => FunctionConditionData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FunctionConditionDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FunctionConditionDataSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => FunctionConditionDataCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FunctionConditionDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((FunctionConditionDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Condition.Function Function => (Condition.Function)BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(0x0, 0x2));
        public UInt16 Unknown2 => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(0x2, 0x2));
        #region ParameterParsing
        partial void ParameterParsingCustomParse(
            OverlayStream stream,
            int offset);
        protected int ParameterParsingEndingPos;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected FunctionConditionDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static FunctionConditionDataBinaryOverlay FunctionConditionDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new FunctionConditionDataBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            stream.Position += 0x4;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static FunctionConditionDataBinaryOverlay FunctionConditionDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return FunctionConditionDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FunctionConditionDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IFunctionConditionDataGetter rhs) return false;
            return ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IFunctionConditionDataGetter? obj)
        {
            return ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

