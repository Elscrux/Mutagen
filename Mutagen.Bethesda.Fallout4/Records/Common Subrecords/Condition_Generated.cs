/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    /// <summary>
    /// Implemented by: [ConditionGlobal, ConditionFloat]
    /// </summary>
    public abstract partial class Condition :
        ICondition,
        IEquatable<IConditionGetter>,
        ILoquiObjectSetter<Condition>
    {
        #region Ctor
        public Condition()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region CompareOperator
        public CompareOperator CompareOperator { get; set; } = default(CompareOperator);
        #endregion
        #region Flags
        public Condition.Flag Flags { get; set; } = default(Condition.Flag);
        #endregion
        #region Unknown1
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unknown1 = new byte[3];
        public MemorySlice<Byte> Unknown1
        {
            get => _Unknown1;
            set => this._Unknown1 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IConditionGetter.Unknown1 => this.Unknown1;
        #endregion

        #region To String

        public virtual void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ConditionMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IConditionGetter rhs) return false;
            return ((ConditionCommon)((IConditionGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IConditionGetter? obj)
        {
            return ((ConditionCommon)((IConditionGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ConditionCommon)((IConditionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.CompareOperator = initialValue;
                this.Flags = initialValue;
                this.Unknown1 = initialValue;
            }

            public Mask(
                TItem CompareOperator,
                TItem Flags,
                TItem Unknown1)
            {
                this.CompareOperator = CompareOperator;
                this.Flags = Flags;
                this.Unknown1 = Unknown1;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem CompareOperator;
            public TItem Flags;
            public TItem Unknown1;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.CompareOperator, rhs.CompareOperator)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Unknown1, rhs.Unknown1)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.CompareOperator);
                hash.Add(this.Flags);
                hash.Add(this.Unknown1);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public virtual bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.CompareOperator)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Unknown1)) return false;
                return true;
            }
            #endregion

            #region Any
            public virtual bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.CompareOperator)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Unknown1)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Condition.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.CompareOperator = eval(this.CompareOperator);
                obj.Flags = eval(this.Flags);
                obj.Unknown1 = eval(this.Unknown1);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Condition.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Condition.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Condition.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.CompareOperator ?? true)
                    {
                        sb.AppendItem(CompareOperator, "CompareOperator");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Unknown1 ?? true)
                    {
                        sb.AppendItem(Unknown1, "Unknown1");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? CompareOperator;
            public Exception? Flags;
            public Exception? Unknown1;
            #endregion

            #region IErrorMask
            public virtual object? GetNthMask(int index)
            {
                Condition_FieldIndex enu = (Condition_FieldIndex)index;
                switch (enu)
                {
                    case Condition_FieldIndex.CompareOperator:
                        return CompareOperator;
                    case Condition_FieldIndex.Flags:
                        return Flags;
                    case Condition_FieldIndex.Unknown1:
                        return Unknown1;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual void SetNthException(int index, Exception ex)
            {
                Condition_FieldIndex enu = (Condition_FieldIndex)index;
                switch (enu)
                {
                    case Condition_FieldIndex.CompareOperator:
                        this.CompareOperator = ex;
                        break;
                    case Condition_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Condition_FieldIndex.Unknown1:
                        this.Unknown1 = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual void SetNthMask(int index, object obj)
            {
                Condition_FieldIndex enu = (Condition_FieldIndex)index;
                switch (enu)
                {
                    case Condition_FieldIndex.CompareOperator:
                        this.CompareOperator = (Exception?)obj;
                        break;
                    case Condition_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Condition_FieldIndex.Unknown1:
                        this.Unknown1 = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual bool IsInError()
            {
                if (Overall != null) return true;
                if (CompareOperator != null) return true;
                if (Flags != null) return true;
                if (Unknown1 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public virtual void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected virtual void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(CompareOperator, "CompareOperator");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(Unknown1, "Unknown1");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.CompareOperator = this.CompareOperator.Combine(rhs.CompareOperator);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Unknown1 = this.Unknown1.Combine(rhs.Unknown1);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool CompareOperator;
            public bool Flags;
            public bool Unknown1;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.CompareOperator = defaultOn;
                this.Flags = defaultOn;
                this.Unknown1 = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected virtual void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((CompareOperator, null));
                ret.Add((Flags, null));
                ret.Add((Unknown1, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public virtual IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ConditionCommon.Instance.EnumerateFormLinks(this);
        public virtual void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ConditionSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object BinaryWriteTranslator => ConditionBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ConditionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ConditionSetterCommon)((IConditionGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Condition GetNew()
        {
            throw new ArgumentException("New called on an abstract class.");
        }

    }
    #endregion

    #region Interface
    /// <summary>
    /// Implemented by: [ConditionGlobal, ConditionFloat]
    /// </summary>
    public partial interface ICondition :
        IConditionGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<ICondition>
    {
        new CompareOperator CompareOperator { get; set; }
        new Condition.Flag Flags { get; set; }
        new MemorySlice<Byte> Unknown1 { get; set; }
    }

    /// <summary>
    /// Implemented by: [ConditionGlobal, ConditionFloat]
    /// </summary>
    public partial interface IConditionGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IConditionGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => Condition_Registration.Instance;
        CompareOperator CompareOperator { get; }
        Condition.Flag Flags { get; }
        ReadOnlyMemorySlice<Byte> Unknown1 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ConditionMixIn
    {
        public static void Clear(this ICondition item)
        {
            ((ConditionSetterCommon)((IConditionGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Condition.Mask<bool> GetEqualsMask(
            this IConditionGetter item,
            IConditionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ConditionCommon)((IConditionGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IConditionGetter item,
            string? name = null,
            Condition.Mask<bool>? printMask = null)
        {
            return ((ConditionCommon)((IConditionGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IConditionGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Condition.Mask<bool>? printMask = null)
        {
            ((ConditionCommon)((IConditionGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IConditionGetter item,
            IConditionGetter rhs,
            Condition.TranslationMask? equalsMask = null)
        {
            return ((ConditionCommon)((IConditionGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ICondition lhs,
            IConditionGetter rhs)
        {
            ((ConditionSetterTranslationCommon)((IConditionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICondition lhs,
            IConditionGetter rhs,
            Condition.TranslationMask? copyMask = null)
        {
            ((ConditionSetterTranslationCommon)((IConditionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICondition lhs,
            IConditionGetter rhs,
            out Condition.ErrorMask errorMask,
            Condition.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ConditionSetterTranslationCommon)((IConditionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Condition.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICondition lhs,
            IConditionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ConditionSetterTranslationCommon)((IConditionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Condition DeepCopy(
            this IConditionGetter item,
            Condition.TranslationMask? copyMask = null)
        {
            return ((ConditionSetterTranslationCommon)((IConditionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Condition DeepCopy(
            this IConditionGetter item,
            out Condition.ErrorMask errorMask,
            Condition.TranslationMask? copyMask = null)
        {
            return ((ConditionSetterTranslationCommon)((IConditionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Condition DeepCopy(
            this IConditionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ConditionSetterTranslationCommon)((IConditionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICondition item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ConditionSetterCommon)((IConditionGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum Condition_FieldIndex
    {
        CompareOperator = 0,
        Flags = 1,
        Unknown1 = 2,
    }
    #endregion

    #region Registration
    internal partial class Condition_Registration : ILoquiRegistration
    {
        public static readonly Condition_Registration Instance = new Condition_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(Condition.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Condition.ErrorMask);

        public static readonly Type ClassType = typeof(Condition);

        public static readonly Type GetterType = typeof(IConditionGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICondition);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.Condition";

        public const string Name = "Condition";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.CTDA;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.CTDA);
            var all = RecordCollection.Factory(
                RecordTypes.CTDA,
                RecordTypes.CIS1,
                RecordTypes.CIS2);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ConditionBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ConditionSetterCommon
    {
        public static readonly ConditionSetterCommon Instance = new ConditionSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(ICondition item)
        {
            ClearPartial();
            item.CompareOperator = default(CompareOperator);
            item.Flags = default(Condition.Flag);
            item.Unknown1 = new byte[3];
        }
        
        #region Mutagen
        public void RemapLinks(ICondition obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICondition item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.CTDA),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ConditionBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class ConditionCommon
    {
        public static readonly ConditionCommon Instance = new ConditionCommon();

        public Condition.Mask<bool> GetEqualsMask(
            IConditionGetter item,
            IConditionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Condition.Mask<bool>(false);
            ((ConditionCommon)((IConditionGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IConditionGetter item,
            IConditionGetter rhs,
            Condition.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.CompareOperator = item.CompareOperator == rhs.CompareOperator;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Unknown1 = MemoryExtensions.SequenceEqual(item.Unknown1.Span, rhs.Unknown1.Span);
        }
        
        public string Print(
            IConditionGetter item,
            string? name = null,
            Condition.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IConditionGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Condition.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Condition =>");
            }
            else
            {
                sb.AppendLine($"{name} (Condition) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IConditionGetter item,
            StructuredStringBuilder sb,
            Condition.Mask<bool>? printMask = null)
        {
            if (printMask?.CompareOperator ?? true)
            {
                sb.AppendItem(item.CompareOperator, "CompareOperator");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Unknown1 ?? true)
            {
                sb.AppendLine($"Unknown1 => {SpanExt.ToHexString(item.Unknown1)}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IConditionGetter? lhs,
            IConditionGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)Condition_FieldIndex.CompareOperator) ?? true))
            {
                if (lhs.CompareOperator != rhs.CompareOperator) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Condition_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Condition_FieldIndex.Unknown1) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.Unknown1.Span, rhs.Unknown1.Span)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IConditionGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.CompareOperator);
            hash.Add(item.Flags);
            hash.Add(item.Unknown1);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public virtual object GetNew()
        {
            return Condition.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IConditionGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class ConditionSetterTranslationCommon
    {
        public static readonly ConditionSetterTranslationCommon Instance = new ConditionSetterTranslationCommon();

        #region DeepCopyIn
        public virtual void DeepCopyIn(
            ICondition item,
            IConditionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)Condition_FieldIndex.CompareOperator) ?? true))
            {
                item.CompareOperator = rhs.CompareOperator;
            }
            if ((copyMask?.GetShouldTranslate((int)Condition_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Condition_FieldIndex.Unknown1) ?? true))
            {
                item.Unknown1 = rhs.Unknown1.ToArray();
            }
        }
        
        #endregion
        
        public Condition DeepCopy(
            IConditionGetter item,
            Condition.TranslationMask? copyMask = null)
        {
            Condition ret = (Condition)((ConditionCommon)((IConditionGetter)item).CommonInstance()!).GetNew();
            ((ConditionSetterTranslationCommon)((IConditionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Condition DeepCopy(
            IConditionGetter item,
            out Condition.ErrorMask errorMask,
            Condition.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Condition ret = (Condition)((ConditionCommon)((IConditionGetter)item).CommonInstance()!).GetNew();
            ((ConditionSetterTranslationCommon)((IConditionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Condition.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Condition DeepCopy(
            IConditionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Condition ret = (Condition)((ConditionCommon)((IConditionGetter)item).CommonInstance()!).GetNew();
            ((ConditionSetterTranslationCommon)((IConditionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Condition
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Condition_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => Condition_Registration.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonInstance() => ConditionCommon.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonSetterInstance()
        {
            return ConditionSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected virtual object CommonSetterTranslationInstance() => ConditionSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IConditionGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IConditionGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IConditionGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class ConditionBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly ConditionBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IConditionGetter item,
            MutagenWriter writer)
        {
            ConditionBinaryWriteTranslation.WriteBinaryFlags(
                writer: writer,
                item: item);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unknown1);
        }

        public static partial void WriteBinaryFlagsCustom(
            MutagenWriter writer,
            IConditionGetter item);

        public static void WriteBinaryFlags(
            MutagenWriter writer,
            IConditionGetter item)
        {
            WriteBinaryFlagsCustom(
                writer: writer,
                item: item);
        }

        public virtual void Write(
            MutagenWriter writer,
            IConditionGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.CTDA),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public virtual void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IConditionGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ConditionBinaryCreateTranslation
    {
        public static readonly ConditionBinaryCreateTranslation Instance = new ConditionBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ICondition item,
            MutagenFrame frame)
        {
            ConditionBinaryCreateTranslation.FillBinaryFlagsCustom(
                frame: frame,
                item: item);
            item.Unknown1 = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(3));
        }

        public static partial void FillBinaryFlagsCustom(
            MutagenFrame frame,
            ICondition item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ConditionBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IConditionGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ConditionBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal abstract partial class ConditionBinaryOverlay :
        PluginBinaryOverlay,
        IConditionGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Condition_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => Condition_Registration.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonInstance() => ConditionCommon.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonSetterTranslationInstance() => ConditionSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IConditionGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IConditionGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IConditionGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public virtual IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ConditionCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object BinaryWriteTranslator => ConditionBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ConditionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Flags
        public partial Condition.Flag GetFlagsCustom(int location);
        public Condition.Flag Flags => GetFlagsCustom(location: 0x0);
        #endregion
        public ReadOnlyMemorySlice<Byte> Unknown1 => _structData.Span.Slice(0x1, 0x3).ToArray();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ConditionBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }


        #region To String

        public virtual void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ConditionMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IConditionGetter rhs) return false;
            return ((ConditionCommon)((IConditionGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IConditionGetter? obj)
        {
            return ((ConditionCommon)((IConditionGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ConditionCommon)((IConditionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

