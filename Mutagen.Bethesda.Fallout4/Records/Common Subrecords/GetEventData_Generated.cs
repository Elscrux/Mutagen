/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class GetEventData :
        ConditionData,
        IEquatable<IGetEventDataGetter>,
        IGetEventData,
        ILoquiObjectSetter<GetEventData>
    {
        #region Ctor
        public GetEventData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region EventFunction
        public UInt16 EventFunction { get; set; } = default(UInt16);
        #endregion
        #region EventMember
        public UInt16 EventMember { get; set; } = default(UInt16);
        #endregion
        #region Parameter3
        private readonly IFormLink<IFallout4MajorRecordGetter> _Parameter3 = new FormLink<IFallout4MajorRecordGetter>();
        public IFormLink<IFallout4MajorRecordGetter> Parameter3
        {
            get => _Parameter3;
            set => _Parameter3.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IFallout4MajorRecordGetter> IGetEventDataGetter.Parameter3 => this.Parameter3;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            GetEventDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IGetEventDataGetter rhs) return false;
            return ((GetEventDataCommon)((IGetEventDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IGetEventDataGetter? obj)
        {
            return ((GetEventDataCommon)((IGetEventDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((GetEventDataCommon)((IGetEventDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            ConditionData.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.EventFunction = initialValue;
                this.EventMember = initialValue;
                this.Parameter3 = initialValue;
            }

            public Mask(
                TItem RunOnType,
                TItem Reference,
                TItem Unknown3,
                TItem EventFunction,
                TItem EventMember,
                TItem Parameter3)
            : base(
                RunOnType: RunOnType,
                Reference: Reference,
                Unknown3: Unknown3)
            {
                this.EventFunction = EventFunction;
                this.EventMember = EventMember;
                this.Parameter3 = Parameter3;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem EventFunction;
            public TItem EventMember;
            public TItem Parameter3;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.EventFunction, rhs.EventFunction)) return false;
                if (!object.Equals(this.EventMember, rhs.EventMember)) return false;
                if (!object.Equals(this.Parameter3, rhs.Parameter3)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.EventFunction);
                hash.Add(this.EventMember);
                hash.Add(this.Parameter3);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.EventFunction)) return false;
                if (!eval(this.EventMember)) return false;
                if (!eval(this.Parameter3)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.EventFunction)) return true;
                if (eval(this.EventMember)) return true;
                if (eval(this.Parameter3)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new GetEventData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.EventFunction = eval(this.EventFunction);
                obj.EventMember = eval(this.EventMember);
                obj.Parameter3 = eval(this.Parameter3);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(GetEventData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, GetEventData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(GetEventData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.EventFunction ?? true)
                    {
                        sb.AppendItem(EventFunction, "EventFunction");
                    }
                    if (printMask?.EventMember ?? true)
                    {
                        sb.AppendItem(EventMember, "EventMember");
                    }
                    if (printMask?.Parameter3 ?? true)
                    {
                        sb.AppendItem(Parameter3, "Parameter3");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            ConditionData.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? EventFunction;
            public Exception? EventMember;
            public Exception? Parameter3;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                GetEventData_FieldIndex enu = (GetEventData_FieldIndex)index;
                switch (enu)
                {
                    case GetEventData_FieldIndex.EventFunction:
                        return EventFunction;
                    case GetEventData_FieldIndex.EventMember:
                        return EventMember;
                    case GetEventData_FieldIndex.Parameter3:
                        return Parameter3;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                GetEventData_FieldIndex enu = (GetEventData_FieldIndex)index;
                switch (enu)
                {
                    case GetEventData_FieldIndex.EventFunction:
                        this.EventFunction = ex;
                        break;
                    case GetEventData_FieldIndex.EventMember:
                        this.EventMember = ex;
                        break;
                    case GetEventData_FieldIndex.Parameter3:
                        this.Parameter3 = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                GetEventData_FieldIndex enu = (GetEventData_FieldIndex)index;
                switch (enu)
                {
                    case GetEventData_FieldIndex.EventFunction:
                        this.EventFunction = (Exception?)obj;
                        break;
                    case GetEventData_FieldIndex.EventMember:
                        this.EventMember = (Exception?)obj;
                        break;
                    case GetEventData_FieldIndex.Parameter3:
                        this.Parameter3 = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (EventFunction != null) return true;
                if (EventMember != null) return true;
                if (Parameter3 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(EventFunction, "EventFunction");
                }
                {
                    sb.AppendItem(EventMember, "EventMember");
                }
                {
                    sb.AppendItem(Parameter3, "Parameter3");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.EventFunction = this.EventFunction.Combine(rhs.EventFunction);
                ret.EventMember = this.EventMember.Combine(rhs.EventMember);
                ret.Parameter3 = this.Parameter3.Combine(rhs.Parameter3);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ConditionData.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool EventFunction;
            public bool EventMember;
            public bool Parameter3;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.EventFunction = defaultOn;
                this.EventMember = defaultOn;
                this.Parameter3 = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((EventFunction, null));
                ret.Add((EventMember, null));
                ret.Add((Parameter3, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => GetEventDataCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => GetEventDataSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => GetEventDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((GetEventDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static GetEventData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new GetEventData();
            ((GetEventDataSetterCommon)((IGetEventDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out GetEventData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((GetEventDataSetterCommon)((IGetEventDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new GetEventData GetNew()
        {
            return new GetEventData();
        }

    }
    #endregion

    #region Interface
    public partial interface IGetEventData :
        IConditionData,
        IFormLinkContainer,
        IGetEventDataGetter,
        ILoquiObjectSetter<IGetEventData>
    {
        new UInt16 EventFunction { get; set; }
        new UInt16 EventMember { get; set; }
        new IFormLink<IFallout4MajorRecordGetter> Parameter3 { get; set; }
    }

    public partial interface IGetEventDataGetter :
        IConditionDataGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IGetEventDataGetter>
    {
        static new ILoquiRegistration StaticRegistration => GetEventData_Registration.Instance;
        UInt16 EventFunction { get; }
        UInt16 EventMember { get; }
        IFormLinkGetter<IFallout4MajorRecordGetter> Parameter3 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class GetEventDataMixIn
    {
        public static void Clear(this IGetEventData item)
        {
            ((GetEventDataSetterCommon)((IGetEventDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static GetEventData.Mask<bool> GetEqualsMask(
            this IGetEventDataGetter item,
            IGetEventDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((GetEventDataCommon)((IGetEventDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IGetEventDataGetter item,
            string? name = null,
            GetEventData.Mask<bool>? printMask = null)
        {
            return ((GetEventDataCommon)((IGetEventDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IGetEventDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            GetEventData.Mask<bool>? printMask = null)
        {
            ((GetEventDataCommon)((IGetEventDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IGetEventDataGetter item,
            IGetEventDataGetter rhs,
            GetEventData.TranslationMask? equalsMask = null)
        {
            return ((GetEventDataCommon)((IGetEventDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IGetEventData lhs,
            IGetEventDataGetter rhs,
            out GetEventData.ErrorMask errorMask,
            GetEventData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((GetEventDataSetterTranslationCommon)((IGetEventDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = GetEventData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IGetEventData lhs,
            IGetEventDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((GetEventDataSetterTranslationCommon)((IGetEventDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static GetEventData DeepCopy(
            this IGetEventDataGetter item,
            GetEventData.TranslationMask? copyMask = null)
        {
            return ((GetEventDataSetterTranslationCommon)((IGetEventDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static GetEventData DeepCopy(
            this IGetEventDataGetter item,
            out GetEventData.ErrorMask errorMask,
            GetEventData.TranslationMask? copyMask = null)
        {
            return ((GetEventDataSetterTranslationCommon)((IGetEventDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static GetEventData DeepCopy(
            this IGetEventDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((GetEventDataSetterTranslationCommon)((IGetEventDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IGetEventData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((GetEventDataSetterCommon)((IGetEventDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum GetEventData_FieldIndex
    {
        RunOnType = 0,
        Reference = 1,
        Unknown3 = 2,
        EventFunction = 3,
        EventMember = 4,
        Parameter3 = 5,
    }
    #endregion

    #region Registration
    internal partial class GetEventData_Registration : ILoquiRegistration
    {
        public static readonly GetEventData_Registration Instance = new GetEventData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(GetEventData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(GetEventData.ErrorMask);

        public static readonly Type ClassType = typeof(GetEventData);

        public static readonly Type GetterType = typeof(IGetEventDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IGetEventData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.GetEventData";

        public const string Name = "GetEventData";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(GetEventDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class GetEventDataSetterCommon : ConditionDataSetterCommon
    {
        public new static readonly GetEventDataSetterCommon Instance = new GetEventDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IGetEventData item)
        {
            ClearPartial();
            item.EventFunction = default(UInt16);
            item.EventMember = default(UInt16);
            item.Parameter3.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IConditionData item)
        {
            Clear(item: (IGetEventData)item);
        }
        
        #region Mutagen
        public void RemapLinks(IGetEventData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Parameter3.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IGetEventData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: GetEventDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        public override void CopyInFromBinary(
            IConditionData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (GetEventData)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class GetEventDataCommon : ConditionDataCommon
    {
        public new static readonly GetEventDataCommon Instance = new GetEventDataCommon();

        public GetEventData.Mask<bool> GetEqualsMask(
            IGetEventDataGetter item,
            IGetEventDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new GetEventData.Mask<bool>(false);
            ((GetEventDataCommon)((IGetEventDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IGetEventDataGetter item,
            IGetEventDataGetter rhs,
            GetEventData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.EventFunction = item.EventFunction == rhs.EventFunction;
            ret.EventMember = item.EventMember == rhs.EventMember;
            ret.Parameter3 = item.Parameter3.Equals(rhs.Parameter3);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IGetEventDataGetter item,
            string? name = null,
            GetEventData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IGetEventDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            GetEventData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"GetEventData =>");
            }
            else
            {
                sb.AppendLine($"{name} (GetEventData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IGetEventDataGetter item,
            StructuredStringBuilder sb,
            GetEventData.Mask<bool>? printMask = null)
        {
            ConditionDataCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.EventFunction ?? true)
            {
                sb.AppendItem(item.EventFunction, "EventFunction");
            }
            if (printMask?.EventMember ?? true)
            {
                sb.AppendItem(item.EventMember, "EventMember");
            }
            if (printMask?.Parameter3 ?? true)
            {
                sb.AppendItem(item.Parameter3.FormKey, "Parameter3");
            }
        }
        
        public static GetEventData_FieldIndex ConvertFieldIndex(ConditionData_FieldIndex index)
        {
            switch (index)
            {
                case ConditionData_FieldIndex.RunOnType:
                    return (GetEventData_FieldIndex)((int)index);
                case ConditionData_FieldIndex.Reference:
                    return (GetEventData_FieldIndex)((int)index);
                case ConditionData_FieldIndex.Unknown3:
                    return (GetEventData_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IGetEventDataGetter? lhs,
            IGetEventDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IConditionDataGetter)lhs, (IConditionDataGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)GetEventData_FieldIndex.EventFunction) ?? true))
            {
                if (lhs.EventFunction != rhs.EventFunction) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GetEventData_FieldIndex.EventMember) ?? true))
            {
                if (lhs.EventMember != rhs.EventMember) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GetEventData_FieldIndex.Parameter3) ?? true))
            {
                if (!lhs.Parameter3.Equals(rhs.Parameter3)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IConditionDataGetter? lhs,
            IConditionDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IGetEventDataGetter?)lhs,
                rhs: rhs as IGetEventDataGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IGetEventDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.EventFunction);
            hash.Add(item.EventMember);
            hash.Add(item.Parameter3);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IConditionDataGetter item)
        {
            return GetHashCode(item: (IGetEventDataGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return GetEventData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IGetEventDataGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield return FormLinkInformation.Factory(obj.Parameter3);
            yield break;
        }
        
        #endregion
        
    }
    internal partial class GetEventDataSetterTranslationCommon : ConditionDataSetterTranslationCommon
    {
        public new static readonly GetEventDataSetterTranslationCommon Instance = new GetEventDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IGetEventData item,
            IGetEventDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IConditionData)item,
                (IConditionDataGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)GetEventData_FieldIndex.EventFunction) ?? true))
            {
                item.EventFunction = rhs.EventFunction;
            }
            if ((copyMask?.GetShouldTranslate((int)GetEventData_FieldIndex.EventMember) ?? true))
            {
                item.EventMember = rhs.EventMember;
            }
            if ((copyMask?.GetShouldTranslate((int)GetEventData_FieldIndex.Parameter3) ?? true))
            {
                item.Parameter3.SetTo(rhs.Parameter3.FormKey);
            }
        }
        
        
        public override void DeepCopyIn(
            IConditionData item,
            IConditionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGetEventData)item,
                rhs: (IGetEventDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public GetEventData DeepCopy(
            IGetEventDataGetter item,
            GetEventData.TranslationMask? copyMask = null)
        {
            GetEventData ret = (GetEventData)((GetEventDataCommon)((IGetEventDataGetter)item).CommonInstance()!).GetNew();
            ((GetEventDataSetterTranslationCommon)((IGetEventDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public GetEventData DeepCopy(
            IGetEventDataGetter item,
            out GetEventData.ErrorMask errorMask,
            GetEventData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            GetEventData ret = (GetEventData)((GetEventDataCommon)((IGetEventDataGetter)item).CommonInstance()!).GetNew();
            ((GetEventDataSetterTranslationCommon)((IGetEventDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = GetEventData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public GetEventData DeepCopy(
            IGetEventDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            GetEventData ret = (GetEventData)((GetEventDataCommon)((IGetEventDataGetter)item).CommonInstance()!).GetNew();
            ((GetEventDataSetterTranslationCommon)((IGetEventDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class GetEventData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GetEventData_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => GetEventData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => GetEventDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return GetEventDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => GetEventDataSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class GetEventDataBinaryWriteTranslation :
        ConditionDataBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly GetEventDataBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IGetEventDataGetter item,
            MutagenWriter writer)
        {
            ConditionDataBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            writer.Write(item.EventFunction);
            writer.Write(item.EventMember);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Parameter3);
            GetEventDataBinaryWriteTranslation.WriteBinaryParameterParsing(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryParameterParsingCustom(
            MutagenWriter writer,
            IGetEventDataGetter item);

        public static void WriteBinaryParameterParsing(
            MutagenWriter writer,
            IGetEventDataGetter item)
        {
            WriteBinaryParameterParsingCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IGetEventDataGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IGetEventDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IConditionDataGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IGetEventDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class GetEventDataBinaryCreateTranslation : ConditionDataBinaryCreateTranslation
    {
        public new static readonly GetEventDataBinaryCreateTranslation Instance = new GetEventDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IGetEventData item,
            MutagenFrame frame)
        {
            ConditionDataBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            item.EventFunction = frame.ReadUInt16();
            item.EventMember = frame.ReadUInt16();
            item.Parameter3.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            GetEventDataBinaryCreateTranslation.FillBinaryParameterParsingCustom(
                frame: frame,
                item: item);
        }

        public static partial void FillBinaryParameterParsingCustom(
            MutagenFrame frame,
            IGetEventData item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class GetEventDataBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class GetEventDataBinaryOverlay :
        ConditionDataBinaryOverlay,
        IGetEventDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GetEventData_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => GetEventData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => GetEventDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => GetEventDataSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => GetEventDataCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => GetEventDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((GetEventDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public UInt16 EventFunction => BinaryPrimitives.ReadUInt16LittleEndian(_structData.Slice(0x0, 0x2));
        public UInt16 EventMember => BinaryPrimitives.ReadUInt16LittleEndian(_structData.Slice(0x2, 0x2));
        public IFormLinkGetter<IFallout4MajorRecordGetter> Parameter3 => new FormLink<IFallout4MajorRecordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_structData.Span.Slice(0x4, 0x4))));
        #region ParameterParsing
        partial void ParameterParsingCustomParse(
            OverlayStream stream,
            int offset);
        protected int ParameterParsingEndingPos;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected GetEventDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IGetEventDataGetter GetEventDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new GetEventDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x8;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IGetEventDataGetter GetEventDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return GetEventDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            GetEventDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IGetEventDataGetter rhs) return false;
            return ((GetEventDataCommon)((IGetEventDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IGetEventDataGetter? obj)
        {
            return ((GetEventDataCommon)((IGetEventDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((GetEventDataCommon)((IGetEventDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

