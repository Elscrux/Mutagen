/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Icons :
        IEquatable<IIconsGetter>,
        IIcons,
        ILoquiObjectSetter<Icons>
    {
        #region Ctor
        public Icons()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region InventoryImage
        public String? InventoryImage { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IIconsGetter.InventoryImage => this.InventoryImage;
        #endregion
        #region MessageIcon
        public String? MessageIcon { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IIconsGetter.MessageIcon => this.MessageIcon;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            IconsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IIconsGetter rhs) return false;
            return ((IconsCommon)((IIconsGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IIconsGetter? obj)
        {
            return ((IconsCommon)((IIconsGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((IconsCommon)((IIconsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.InventoryImage = initialValue;
                this.MessageIcon = initialValue;
            }

            public Mask(
                TItem InventoryImage,
                TItem MessageIcon)
            {
                this.InventoryImage = InventoryImage;
                this.MessageIcon = MessageIcon;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem InventoryImage;
            public TItem MessageIcon;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.InventoryImage, rhs.InventoryImage)) return false;
                if (!object.Equals(this.MessageIcon, rhs.MessageIcon)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.InventoryImage);
                hash.Add(this.MessageIcon);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.InventoryImage)) return false;
                if (!eval(this.MessageIcon)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.InventoryImage)) return true;
                if (eval(this.MessageIcon)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Icons.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.InventoryImage = eval(this.InventoryImage);
                obj.MessageIcon = eval(this.MessageIcon);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Icons.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Icons.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Icons.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.InventoryImage ?? true)
                    {
                        fg.AppendItem(InventoryImage, "InventoryImage");
                    }
                    if (printMask?.MessageIcon ?? true)
                    {
                        fg.AppendItem(MessageIcon, "MessageIcon");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? InventoryImage;
            public Exception? MessageIcon;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Icons_FieldIndex enu = (Icons_FieldIndex)index;
                switch (enu)
                {
                    case Icons_FieldIndex.InventoryImage:
                        return InventoryImage;
                    case Icons_FieldIndex.MessageIcon:
                        return MessageIcon;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Icons_FieldIndex enu = (Icons_FieldIndex)index;
                switch (enu)
                {
                    case Icons_FieldIndex.InventoryImage:
                        this.InventoryImage = ex;
                        break;
                    case Icons_FieldIndex.MessageIcon:
                        this.MessageIcon = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Icons_FieldIndex enu = (Icons_FieldIndex)index;
                switch (enu)
                {
                    case Icons_FieldIndex.InventoryImage:
                        this.InventoryImage = (Exception?)obj;
                        break;
                    case Icons_FieldIndex.MessageIcon:
                        this.MessageIcon = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (InventoryImage != null) return true;
                if (MessageIcon != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(InventoryImage, "InventoryImage");
                fg.AppendItem(MessageIcon, "MessageIcon");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.InventoryImage = this.InventoryImage.Combine(rhs.InventoryImage);
                ret.MessageIcon = this.MessageIcon.Combine(rhs.MessageIcon);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool InventoryImage;
            public bool MessageIcon;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.InventoryImage = defaultOn;
                this.MessageIcon = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((InventoryImage, null));
                ret.Add((MessageIcon, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => IconsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((IconsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static Icons CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new Icons();
            ((IconsSetterCommon)((IIconsGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Icons item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((IconsSetterCommon)((IIconsGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Icons GetNew()
        {
            return new Icons();
        }

    }
    #endregion

    #region Interface
    public partial interface IIcons :
        IIconsGetter,
        ILoquiObjectSetter<IIcons>
    {
        new String? InventoryImage { get; set; }
        new String? MessageIcon { get; set; }
    }

    public partial interface IIconsGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IIconsGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => Icons_Registration.Instance;
        String? InventoryImage { get; }
        String? MessageIcon { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class IconsMixIn
    {
        public static void Clear(this IIcons item)
        {
            ((IconsSetterCommon)((IIconsGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Icons.Mask<bool> GetEqualsMask(
            this IIconsGetter item,
            IIconsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((IconsCommon)((IIconsGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IIconsGetter item,
            string? name = null,
            Icons.Mask<bool>? printMask = null)
        {
            return ((IconsCommon)((IIconsGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IIconsGetter item,
            FileGeneration fg,
            string? name = null,
            Icons.Mask<bool>? printMask = null)
        {
            ((IconsCommon)((IIconsGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IIconsGetter item,
            IIconsGetter rhs,
            Icons.TranslationMask? equalsMask = null)
        {
            return ((IconsCommon)((IIconsGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IIcons lhs,
            IIconsGetter rhs)
        {
            ((IconsSetterTranslationCommon)((IIconsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IIcons lhs,
            IIconsGetter rhs,
            Icons.TranslationMask? copyMask = null)
        {
            ((IconsSetterTranslationCommon)((IIconsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IIcons lhs,
            IIconsGetter rhs,
            out Icons.ErrorMask errorMask,
            Icons.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((IconsSetterTranslationCommon)((IIconsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Icons.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IIcons lhs,
            IIconsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((IconsSetterTranslationCommon)((IIconsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Icons DeepCopy(
            this IIconsGetter item,
            Icons.TranslationMask? copyMask = null)
        {
            return ((IconsSetterTranslationCommon)((IIconsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Icons DeepCopy(
            this IIconsGetter item,
            out Icons.ErrorMask errorMask,
            Icons.TranslationMask? copyMask = null)
        {
            return ((IconsSetterTranslationCommon)((IIconsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Icons DeepCopy(
            this IIconsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((IconsSetterTranslationCommon)((IIconsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IIcons item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((IconsSetterCommon)((IIconsGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Icons_FieldIndex
    {
        InventoryImage = 0,
        MessageIcon = 1,
    }
    #endregion

    #region Registration
    public partial class Icons_Registration : ILoquiRegistration
    {
        public static readonly Icons_Registration Instance = new Icons_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 135,
            version: 0);

        public const string GUID = "58282664-d0f5-4e85-9513-b5079cb9bd12";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(Icons.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Icons.ErrorMask);

        public static readonly Type ClassType = typeof(Icons);

        public static readonly Type GetterType = typeof(IIconsGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IIcons);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.Icons";

        public const string Name = "Icons";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static TriggeringRecordCollection TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<TriggeringRecordCollection> _TriggeringRecordTypes = new Lazy<TriggeringRecordCollection>(() =>
        {
            return new TriggeringRecordCollection(
                RecordTypes.ICON,
                RecordTypes.MICO);
        });
        public static readonly Type BinaryWriteTranslation = typeof(IconsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class IconsSetterCommon
    {
        public static readonly IconsSetterCommon Instance = new IconsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IIcons item)
        {
            ClearPartial();
            item.InventoryImage = default;
            item.MessageIcon = default;
        }
        
        #region Mutagen
        public void RemapLinks(IIcons obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IIcons item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: IconsBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: IconsBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class IconsCommon
    {
        public static readonly IconsCommon Instance = new IconsCommon();

        public Icons.Mask<bool> GetEqualsMask(
            IIconsGetter item,
            IIconsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Icons.Mask<bool>(false);
            ((IconsCommon)((IIconsGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IIconsGetter item,
            IIconsGetter rhs,
            Icons.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.InventoryImage = string.Equals(item.InventoryImage, rhs.InventoryImage);
            ret.MessageIcon = string.Equals(item.MessageIcon, rhs.MessageIcon);
        }
        
        public string ToString(
            IIconsGetter item,
            string? name = null,
            Icons.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IIconsGetter item,
            FileGeneration fg,
            string? name = null,
            Icons.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Icons =>");
            }
            else
            {
                fg.AppendLine($"{name} (Icons) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IIconsGetter item,
            FileGeneration fg,
            Icons.Mask<bool>? printMask = null)
        {
            if ((printMask?.InventoryImage ?? true)
                && item.InventoryImage is {} InventoryImageItem)
            {
                fg.AppendItem(InventoryImageItem, "InventoryImage");
            }
            if ((printMask?.MessageIcon ?? true)
                && item.MessageIcon is {} MessageIconItem)
            {
                fg.AppendItem(MessageIconItem, "MessageIcon");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IIconsGetter? lhs,
            IIconsGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)Icons_FieldIndex.InventoryImage) ?? true))
            {
                if (!string.Equals(lhs.InventoryImage, rhs.InventoryImage)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Icons_FieldIndex.MessageIcon) ?? true))
            {
                if (!string.Equals(lhs.MessageIcon, rhs.MessageIcon)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IIconsGetter item)
        {
            var hash = new HashCode();
            if (item.InventoryImage is {} InventoryImageitem)
            {
                hash.Add(InventoryImageitem);
            }
            if (item.MessageIcon is {} MessageIconitem)
            {
                hash.Add(MessageIconitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Icons.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IIconsGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class IconsSetterTranslationCommon
    {
        public static readonly IconsSetterTranslationCommon Instance = new IconsSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IIcons item,
            IIconsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)Icons_FieldIndex.InventoryImage) ?? true))
            {
                item.InventoryImage = rhs.InventoryImage;
            }
            if ((copyMask?.GetShouldTranslate((int)Icons_FieldIndex.MessageIcon) ?? true))
            {
                item.MessageIcon = rhs.MessageIcon;
            }
        }
        
        #endregion
        
        public Icons DeepCopy(
            IIconsGetter item,
            Icons.TranslationMask? copyMask = null)
        {
            Icons ret = (Icons)((IconsCommon)((IIconsGetter)item).CommonInstance()!).GetNew();
            ((IconsSetterTranslationCommon)((IIconsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Icons DeepCopy(
            IIconsGetter item,
            out Icons.ErrorMask errorMask,
            Icons.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Icons ret = (Icons)((IconsCommon)((IIconsGetter)item).CommonInstance()!).GetNew();
            ((IconsSetterTranslationCommon)((IIconsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Icons.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Icons DeepCopy(
            IIconsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Icons ret = (Icons)((IconsCommon)((IIconsGetter)item).CommonInstance()!).GetNew();
            ((IconsSetterTranslationCommon)((IIconsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Icons
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Icons_Registration.Instance;
        public static Icons_Registration StaticRegistration => Icons_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => IconsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return IconsSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => IconsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IIconsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IIconsGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IIconsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class IconsBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static IconsBinaryWriteTranslation Instance = new IconsBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IIconsGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.InventoryImage,
                header: translationParams.ConvertToCustom(RecordTypes.ICON),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MessageIcon,
                header: translationParams.ConvertToCustom(RecordTypes.MICO),
                binaryType: StringBinaryType.NullTerminate);
        }

        public void Write(
            MutagenWriter writer,
            IIconsGetter item,
            TypedWriteParams? translationParams = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IIconsGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class IconsBinaryCreateTranslation
    {
        public readonly static IconsBinaryCreateTranslation Instance = new IconsBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IIcons item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IIcons item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.ICON:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)Icons_FieldIndex.InventoryImage) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.InventoryImage = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Icons_FieldIndex.InventoryImage;
                }
                case RecordTypeInts.MICO:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)Icons_FieldIndex.MessageIcon) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MessageIcon = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Icons_FieldIndex.MessageIcon;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class IconsBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IIconsGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((IconsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class IconsBinaryOverlay :
        PluginBinaryOverlay,
        IIconsGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Icons_Registration.Instance;
        public static Icons_Registration StaticRegistration => Icons_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => IconsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => IconsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IIconsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IIconsGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IIconsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => IconsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((IconsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region InventoryImage
        private int? _InventoryImageLocation;
        public String? InventoryImage => _InventoryImageLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _InventoryImageLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region MessageIcon
        private int? _MessageIconLocation;
        public String? MessageIcon => _MessageIconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _MessageIconLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected IconsBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static IconsBinaryOverlay IconsFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new IconsBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IconsBinaryOverlay IconsFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return IconsFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.ICON:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)Icons_FieldIndex.InventoryImage) return ParseResult.Stop;
                    _InventoryImageLocation = (stream.Position - offset);
                    return (int)Icons_FieldIndex.InventoryImage;
                }
                case RecordTypeInts.MICO:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)Icons_FieldIndex.MessageIcon) return ParseResult.Stop;
                    _MessageIconLocation = (stream.Position - offset);
                    return (int)Icons_FieldIndex.MessageIcon;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            IconsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IIconsGetter rhs) return false;
            return ((IconsCommon)((IIconsGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IIconsGetter? obj)
        {
            return ((IconsCommon)((IIconsGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((IconsCommon)((IIconsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

