/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Bone :
        IBone,
        IEquatable<IBoneGetter>,
        ILoquiObjectSetter<Bone>
    {
        #region Ctor
        public Bone()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IBoneGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Values
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Single>? _Values;
        public ExtendedList<Single>? Values
        {
            get => this._Values;
            set => this._Values = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<Single>? IBoneGetter.Values => _Values;
        #endregion

        #endregion
        #region BMMP
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _BMMP;
        public MemorySlice<Byte>? BMMP
        {
            get => this._BMMP;
            set => this._BMMP = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IBoneGetter.BMMP => this.BMMP;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            BoneMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBoneGetter rhs) return false;
            return ((BoneCommon)((IBoneGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IBoneGetter? obj)
        {
            return ((BoneCommon)((IBoneGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((BoneCommon)((IBoneGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Name = initialValue;
                this.Values = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.BMMP = initialValue;
            }

            public Mask(
                TItem Name,
                TItem Values,
                TItem BMMP)
            {
                this.Name = Name;
                this.Values = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Values, Enumerable.Empty<(int Index, TItem Value)>());
                this.BMMP = BMMP;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Values;
            public TItem BMMP;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Values, rhs.Values)) return false;
                if (!object.Equals(this.BMMP, rhs.BMMP)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Values);
                hash.Add(this.BMMP);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Name)) return false;
                if (this.Values != null)
                {
                    if (!eval(this.Values.Overall)) return false;
                    if (this.Values.Specific != null)
                    {
                        foreach (var item in this.Values.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.BMMP)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Name)) return true;
                if (this.Values != null)
                {
                    if (eval(this.Values.Overall)) return true;
                    if (this.Values.Specific != null)
                    {
                        foreach (var item in this.Values.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.BMMP)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Bone.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Name = eval(this.Name);
                if (Values != null)
                {
                    obj.Values = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Values.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Values.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Values.Specific = l;
                        foreach (var item in Values.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.BMMP = eval(this.BMMP);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Bone.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Bone.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Bone.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if ((printMask?.Values?.Overall ?? true)
                        && Values is {} ValuesItem)
                    {
                        fg.AppendLine("Values =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ValuesItem.Overall);
                            if (ValuesItem.Specific != null)
                            {
                                foreach (var subItem in ValuesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.BMMP ?? true)
                    {
                        fg.AppendItem(BMMP, "BMMP");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Name;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Values;
            public Exception? BMMP;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Bone_FieldIndex enu = (Bone_FieldIndex)index;
                switch (enu)
                {
                    case Bone_FieldIndex.Name:
                        return Name;
                    case Bone_FieldIndex.Values:
                        return Values;
                    case Bone_FieldIndex.BMMP:
                        return BMMP;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Bone_FieldIndex enu = (Bone_FieldIndex)index;
                switch (enu)
                {
                    case Bone_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Bone_FieldIndex.Values:
                        this.Values = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Bone_FieldIndex.BMMP:
                        this.BMMP = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Bone_FieldIndex enu = (Bone_FieldIndex)index;
                switch (enu)
                {
                    case Bone_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Bone_FieldIndex.Values:
                        this.Values = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Bone_FieldIndex.BMMP:
                        this.BMMP = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Values != null) return true;
                if (BMMP != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Name, "Name");
                if (Values is {} ValuesItem)
                {
                    fg.AppendLine("Values =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ValuesItem.Overall);
                        if (ValuesItem.Specific != null)
                        {
                            foreach (var subItem in ValuesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(BMMP, "BMMP");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Values = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Values?.Overall, rhs.Values?.Overall), ExceptionExt.Combine(this.Values?.Specific, rhs.Values?.Specific));
                ret.BMMP = this.BMMP.Combine(rhs.BMMP);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Name;
            public bool Values;
            public bool BMMP;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Name = defaultOn;
                this.Values = defaultOn;
                this.BMMP = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Name, null));
                ret.Add((Values, null));
                ret.Add((BMMP, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BoneBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((BoneBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static Bone CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new Bone();
            ((BoneSetterCommon)((IBoneGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Bone item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((BoneSetterCommon)((IBoneGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Bone GetNew()
        {
            return new Bone();
        }

    }
    #endregion

    #region Interface
    public partial interface IBone :
        IBoneGetter,
        ILoquiObjectSetter<IBone>,
        INamed,
        INamedRequired
    {
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        new String? Name { get; set; }
        new ExtendedList<Single>? Values { get; set; }
        new MemorySlice<Byte>? BMMP { get; set; }
    }

    public partial interface IBoneGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IBoneGetter>,
        INamedGetter,
        INamedRequiredGetter
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => Bone_Registration.Instance;
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter
        /// </summary>
        String? Name { get; }
        #endregion
        IReadOnlyList<Single>? Values { get; }
        ReadOnlyMemorySlice<Byte>? BMMP { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class BoneMixIn
    {
        public static void Clear(this IBone item)
        {
            ((BoneSetterCommon)((IBoneGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Bone.Mask<bool> GetEqualsMask(
            this IBoneGetter item,
            IBoneGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BoneCommon)((IBoneGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IBoneGetter item,
            string? name = null,
            Bone.Mask<bool>? printMask = null)
        {
            return ((BoneCommon)((IBoneGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IBoneGetter item,
            FileGeneration fg,
            string? name = null,
            Bone.Mask<bool>? printMask = null)
        {
            ((BoneCommon)((IBoneGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IBoneGetter item,
            IBoneGetter rhs,
            Bone.TranslationMask? equalsMask = null)
        {
            return ((BoneCommon)((IBoneGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IBone lhs,
            IBoneGetter rhs)
        {
            ((BoneSetterTranslationCommon)((IBoneGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IBone lhs,
            IBoneGetter rhs,
            Bone.TranslationMask? copyMask = null)
        {
            ((BoneSetterTranslationCommon)((IBoneGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IBone lhs,
            IBoneGetter rhs,
            out Bone.ErrorMask errorMask,
            Bone.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((BoneSetterTranslationCommon)((IBoneGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Bone.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IBone lhs,
            IBoneGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((BoneSetterTranslationCommon)((IBoneGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Bone DeepCopy(
            this IBoneGetter item,
            Bone.TranslationMask? copyMask = null)
        {
            return ((BoneSetterTranslationCommon)((IBoneGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Bone DeepCopy(
            this IBoneGetter item,
            out Bone.ErrorMask errorMask,
            Bone.TranslationMask? copyMask = null)
        {
            return ((BoneSetterTranslationCommon)((IBoneGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Bone DeepCopy(
            this IBoneGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((BoneSetterTranslationCommon)((IBoneGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IBone item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((BoneSetterCommon)((IBoneGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Bone_FieldIndex
    {
        Name = 0,
        Values = 1,
        BMMP = 2,
    }
    #endregion

    #region Registration
    public partial class Bone_Registration : ILoquiRegistration
    {
        public static readonly Bone_Registration Instance = new Bone_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 206,
            version: 0);

        public const string GUID = "963d0a50-740b-45d5-aa41-3687b5df251c";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(Bone.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Bone.ErrorMask);

        public static readonly Type ClassType = typeof(Bone);

        public static readonly Type GetterType = typeof(IBoneGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IBone);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.Bone";

        public const string Name = "Bone";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RecordTypes.BSMB,
                        RecordTypes.BSMS,
                        RecordTypes.BMMP
                    })
            );
        });
        public static readonly Type BinaryWriteTranslation = typeof(BoneBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class BoneSetterCommon
    {
        public static readonly BoneSetterCommon Instance = new BoneSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IBone item)
        {
            ClearPartial();
            item.Name = default;
            item.Values = null;
            item.BMMP = default;
        }
        
        #region Mutagen
        public void RemapLinks(IBone obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IBone item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: BoneBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: BoneBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class BoneCommon
    {
        public static readonly BoneCommon Instance = new BoneCommon();

        public Bone.Mask<bool> GetEqualsMask(
            IBoneGetter item,
            IBoneGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Bone.Mask<bool>(false);
            ((BoneCommon)((IBoneGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IBoneGetter item,
            IBoneGetter rhs,
            Bone.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Values = item.Values.CollectionEqualsHelper(
                rhs.Values,
                (l, r) => l.EqualsWithin(r),
                include);
            ret.BMMP = MemorySliceExt.Equal(item.BMMP, rhs.BMMP);
        }
        
        public string ToString(
            IBoneGetter item,
            string? name = null,
            Bone.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IBoneGetter item,
            FileGeneration fg,
            string? name = null,
            Bone.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Bone =>");
            }
            else
            {
                fg.AppendLine($"{name} (Bone) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IBoneGetter item,
            FileGeneration fg,
            Bone.Mask<bool>? printMask = null)
        {
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Values?.Overall ?? true)
                && item.Values is {} ValuesItem)
            {
                fg.AppendLine("Values =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in ValuesItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.BMMP ?? true)
                && item.BMMP is {} BMMPItem)
            {
                fg.AppendLine($"BMMP => {SpanExt.ToHexString(BMMPItem)}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IBoneGetter? lhs,
            IBoneGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)Bone_FieldIndex.Name) ?? true))
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Bone_FieldIndex.Values) ?? true))
            {
                if (!lhs.Values.SequenceEqualNullable(rhs.Values)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Bone_FieldIndex.BMMP) ?? true))
            {
                if (!MemorySliceExt.Equal(lhs.BMMP, rhs.BMMP)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IBoneGetter item)
        {
            var hash = new HashCode();
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Values);
            if (item.BMMP is {} BMMPItem)
            {
                hash.Add(BMMPItem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Bone.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IBoneGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class BoneSetterTranslationCommon
    {
        public static readonly BoneSetterTranslationCommon Instance = new BoneSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IBone item,
            IBoneGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)Bone_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Bone_FieldIndex.Values) ?? true))
            {
                errorMask?.PushIndex((int)Bone_FieldIndex.Values);
                try
                {
                    if ((rhs.Values != null))
                    {
                        item.Values = 
                            rhs.Values
                            .ToExtendedList<Single>();
                    }
                    else
                    {
                        item.Values = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Bone_FieldIndex.BMMP) ?? true))
            {
                if(rhs.BMMP is {} BMMPrhs)
                {
                    item.BMMP = BMMPrhs.ToArray();
                }
                else
                {
                    item.BMMP = default;
                }
            }
        }
        
        #endregion
        
        public Bone DeepCopy(
            IBoneGetter item,
            Bone.TranslationMask? copyMask = null)
        {
            Bone ret = (Bone)((BoneCommon)((IBoneGetter)item).CommonInstance()!).GetNew();
            ((BoneSetterTranslationCommon)((IBoneGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Bone DeepCopy(
            IBoneGetter item,
            out Bone.ErrorMask errorMask,
            Bone.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Bone ret = (Bone)((BoneCommon)((IBoneGetter)item).CommonInstance()!).GetNew();
            ((BoneSetterTranslationCommon)((IBoneGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Bone.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Bone DeepCopy(
            IBoneGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Bone ret = (Bone)((BoneCommon)((IBoneGetter)item).CommonInstance()!).GetNew();
            ((BoneSetterTranslationCommon)((IBoneGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Bone
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Bone_Registration.Instance;
        public static Bone_Registration StaticRegistration => Bone_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BoneCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return BoneSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BoneSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBoneGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IBoneGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IBoneGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class BoneBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static BoneBinaryWriteTranslation Instance = new BoneBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IBoneGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.BSMB),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Single>.Instance.Write(
                writer: writer,
                items: item.Values,
                recordType: translationParams.ConvertToCustom(RecordTypes.BSMS),
                transl: FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BMMP,
                header: translationParams.ConvertToCustom(RecordTypes.BMMP));
        }

        public void Write(
            MutagenWriter writer,
            IBoneGetter item,
            TypedWriteParams? translationParams = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IBoneGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class BoneBinaryCreateTranslation
    {
        public readonly static BoneBinaryCreateTranslation Instance = new BoneBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IBone item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IBone item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.BSMB:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)Bone_FieldIndex.Name) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Bone_FieldIndex.Name;
                }
                case RecordTypeInts.BSMS:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)Bone_FieldIndex.Values) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Values = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Single>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse)
                        .CastExtendedList<Single>();
                    return (int)Bone_FieldIndex.Values;
                }
                case RecordTypeInts.BMMP:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)Bone_FieldIndex.BMMP) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BMMP = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Bone_FieldIndex.BMMP;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class BoneBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IBoneGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((BoneBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class BoneBinaryOverlay :
        PluginBinaryOverlay,
        IBoneGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Bone_Registration.Instance;
        public static Bone_Registration StaticRegistration => Bone_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BoneCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BoneSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBoneGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IBoneGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IBoneGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BoneBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((BoneBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        #endregion
        #endregion
        public IReadOnlyList<Single>? Values { get; private set; }
        #region BMMP
        private int? _BMMPLocation;
        public ReadOnlyMemorySlice<Byte>? BMMP => _BMMPLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _BMMPLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected BoneBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static BoneBinaryOverlay BoneFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new BoneBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static BoneBinaryOverlay BoneFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return BoneFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.BSMB:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)Bone_FieldIndex.Name) return ParseResult.Stop;
                    _NameLocation = (stream.Position - offset);
                    return (int)Bone_FieldIndex.Name;
                }
                case RecordTypeInts.BSMS:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)Bone_FieldIndex.Values) return ParseResult.Stop;
                    var subMeta = stream.ReadSubrecord();
                    var subLen = subMeta.ContentLength;
                    this.Values = BinaryOverlayList.FactoryByStartIndex<Single>(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => s.Float());
                    stream.Position += subLen;
                    return (int)Bone_FieldIndex.Values;
                }
                case RecordTypeInts.BMMP:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)Bone_FieldIndex.BMMP) return ParseResult.Stop;
                    _BMMPLocation = (stream.Position - offset);
                    return (int)Bone_FieldIndex.BMMP;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            BoneMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBoneGetter rhs) return false;
            return ((BoneCommon)((IBoneGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IBoneGetter? obj)
        {
            return ((BoneCommon)((IBoneGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((BoneCommon)((IBoneGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

