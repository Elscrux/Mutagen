/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Oblivion.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class ScriptEffectData :
        IEquatable<IScriptEffectDataGetter>,
        ILoquiObjectSetter<ScriptEffectData>,
        IScriptEffectData
    {
        #region Ctor
        public ScriptEffectData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Versioning
        public ScriptEffectData.VersioningBreaks Versioning { get; set; } = default(ScriptEffectData.VersioningBreaks);
        #endregion
        #region Script
        private readonly IFormLink<IScriptGetter> _Script = new FormLink<IScriptGetter>();
        public IFormLink<IScriptGetter> Script
        {
            get => _Script;
            set => _Script.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IScriptGetter> IScriptEffectDataGetter.Script => this.Script;
        #endregion
        #region MagicSchool
        public MagicSchool MagicSchool { get; set; } = default(MagicSchool);
        #endregion
        #region VisualEffect
        private readonly IEDIDLink<IMagicEffectGetter> _VisualEffect = new EDIDLink<IMagicEffectGetter>();
        public IEDIDLink<IMagicEffectGetter> VisualEffect
        {
            get => _VisualEffect;
            set => _VisualEffect.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEDIDLinkGetter<IMagicEffectGetter> IScriptEffectDataGetter.VisualEffect => this.VisualEffect;
        #endregion
        #region Flags
        public ScriptEffect.Flag Flags { get; set; } = default(ScriptEffect.Flag);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ScriptEffectDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IScriptEffectDataGetter rhs) return false;
            return ((ScriptEffectDataCommon)((IScriptEffectDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IScriptEffectDataGetter? obj)
        {
            return ((ScriptEffectDataCommon)((IScriptEffectDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ScriptEffectDataCommon)((IScriptEffectDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Versioning = initialValue;
                this.Script = initialValue;
                this.MagicSchool = initialValue;
                this.VisualEffect = initialValue;
                this.Flags = initialValue;
            }

            public Mask(
                TItem Versioning,
                TItem Script,
                TItem MagicSchool,
                TItem VisualEffect,
                TItem Flags)
            {
                this.Versioning = Versioning;
                this.Script = Script;
                this.MagicSchool = MagicSchool;
                this.VisualEffect = VisualEffect;
                this.Flags = Flags;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Versioning;
            public TItem Script;
            public TItem MagicSchool;
            public TItem VisualEffect;
            public TItem Flags;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Versioning, rhs.Versioning)) return false;
                if (!object.Equals(this.Script, rhs.Script)) return false;
                if (!object.Equals(this.MagicSchool, rhs.MagicSchool)) return false;
                if (!object.Equals(this.VisualEffect, rhs.VisualEffect)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Versioning);
                hash.Add(this.Script);
                hash.Add(this.MagicSchool);
                hash.Add(this.VisualEffect);
                hash.Add(this.Flags);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Versioning)) return false;
                if (!eval(this.Script)) return false;
                if (!eval(this.MagicSchool)) return false;
                if (!eval(this.VisualEffect)) return false;
                if (!eval(this.Flags)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Versioning)) return true;
                if (eval(this.Script)) return true;
                if (eval(this.MagicSchool)) return true;
                if (eval(this.VisualEffect)) return true;
                if (eval(this.Flags)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ScriptEffectData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Versioning = eval(this.Versioning);
                obj.Script = eval(this.Script);
                obj.MagicSchool = eval(this.MagicSchool);
                obj.VisualEffect = eval(this.VisualEffect);
                obj.Flags = eval(this.Flags);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(ScriptEffectData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, ScriptEffectData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(ScriptEffectData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Versioning ?? true)
                    {
                        sb.AppendItem(Versioning, "Versioning");
                    }
                    if (printMask?.Script ?? true)
                    {
                        sb.AppendItem(Script, "Script");
                    }
                    if (printMask?.MagicSchool ?? true)
                    {
                        sb.AppendItem(MagicSchool, "MagicSchool");
                    }
                    if (printMask?.VisualEffect ?? true)
                    {
                        sb.AppendItem(VisualEffect, "VisualEffect");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Versioning;
            public Exception? Script;
            public Exception? MagicSchool;
            public Exception? VisualEffect;
            public Exception? Flags;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ScriptEffectData_FieldIndex enu = (ScriptEffectData_FieldIndex)index;
                switch (enu)
                {
                    case ScriptEffectData_FieldIndex.Versioning:
                        return Versioning;
                    case ScriptEffectData_FieldIndex.Script:
                        return Script;
                    case ScriptEffectData_FieldIndex.MagicSchool:
                        return MagicSchool;
                    case ScriptEffectData_FieldIndex.VisualEffect:
                        return VisualEffect;
                    case ScriptEffectData_FieldIndex.Flags:
                        return Flags;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                ScriptEffectData_FieldIndex enu = (ScriptEffectData_FieldIndex)index;
                switch (enu)
                {
                    case ScriptEffectData_FieldIndex.Versioning:
                        this.Versioning = ex;
                        break;
                    case ScriptEffectData_FieldIndex.Script:
                        this.Script = ex;
                        break;
                    case ScriptEffectData_FieldIndex.MagicSchool:
                        this.MagicSchool = ex;
                        break;
                    case ScriptEffectData_FieldIndex.VisualEffect:
                        this.VisualEffect = ex;
                        break;
                    case ScriptEffectData_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                ScriptEffectData_FieldIndex enu = (ScriptEffectData_FieldIndex)index;
                switch (enu)
                {
                    case ScriptEffectData_FieldIndex.Versioning:
                        this.Versioning = (Exception?)obj;
                        break;
                    case ScriptEffectData_FieldIndex.Script:
                        this.Script = (Exception?)obj;
                        break;
                    case ScriptEffectData_FieldIndex.MagicSchool:
                        this.MagicSchool = (Exception?)obj;
                        break;
                    case ScriptEffectData_FieldIndex.VisualEffect:
                        this.VisualEffect = (Exception?)obj;
                        break;
                    case ScriptEffectData_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Versioning != null) return true;
                if (Script != null) return true;
                if (MagicSchool != null) return true;
                if (VisualEffect != null) return true;
                if (Flags != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Versioning, "Versioning");
                }
                {
                    sb.AppendItem(Script, "Script");
                }
                {
                    sb.AppendItem(MagicSchool, "MagicSchool");
                }
                {
                    sb.AppendItem(VisualEffect, "VisualEffect");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Versioning = this.Versioning.Combine(rhs.Versioning);
                ret.Script = this.Script.Combine(rhs.Script);
                ret.MagicSchool = this.MagicSchool.Combine(rhs.MagicSchool);
                ret.VisualEffect = this.VisualEffect.Combine(rhs.VisualEffect);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Versioning;
            public bool Script;
            public bool MagicSchool;
            public bool VisualEffect;
            public bool Flags;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Versioning = defaultOn;
                this.Script = defaultOn;
                this.MagicSchool = defaultOn;
                this.VisualEffect = defaultOn;
                this.Flags = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Versioning, null));
                ret.Add((Script, null));
                ret.Add((MagicSchool, null));
                ret.Add((VisualEffect, null));
                ret.Add((Flags, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        [Flags]
        public enum VersioningBreaks
        {
            Break0 = 1,
            Break1 = 2
        }
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ScriptEffectDataCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ScriptEffectDataSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ScriptEffectDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ScriptEffectDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static ScriptEffectData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new ScriptEffectData();
            ((ScriptEffectDataSetterCommon)((IScriptEffectDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ScriptEffectData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ScriptEffectDataSetterCommon)((IScriptEffectDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ScriptEffectData GetNew()
        {
            return new ScriptEffectData();
        }

    }
    #endregion

    #region Interface
    public partial interface IScriptEffectData :
        IFormLinkContainer,
        ILoquiObjectSetter<IScriptEffectData>,
        IScriptEffectDataGetter
    {
        new ScriptEffectData.VersioningBreaks Versioning { get; set; }
        new IFormLink<IScriptGetter> Script { get; set; }
        new MagicSchool MagicSchool { get; set; }
        new IEDIDLink<IMagicEffectGetter> VisualEffect { get; set; }
        new ScriptEffect.Flag Flags { get; set; }
    }

    public partial interface IScriptEffectDataGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IScriptEffectDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => ScriptEffectData_Registration.Instance;
        ScriptEffectData.VersioningBreaks Versioning { get; }
        IFormLinkGetter<IScriptGetter> Script { get; }
        MagicSchool MagicSchool { get; }
        IEDIDLinkGetter<IMagicEffectGetter> VisualEffect { get; }
        ScriptEffect.Flag Flags { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ScriptEffectDataMixIn
    {
        public static void Clear(this IScriptEffectData item)
        {
            ((ScriptEffectDataSetterCommon)((IScriptEffectDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ScriptEffectData.Mask<bool> GetEqualsMask(
            this IScriptEffectDataGetter item,
            IScriptEffectDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ScriptEffectDataCommon)((IScriptEffectDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IScriptEffectDataGetter item,
            string? name = null,
            ScriptEffectData.Mask<bool>? printMask = null)
        {
            return ((ScriptEffectDataCommon)((IScriptEffectDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IScriptEffectDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ScriptEffectData.Mask<bool>? printMask = null)
        {
            ((ScriptEffectDataCommon)((IScriptEffectDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IScriptEffectDataGetter item,
            IScriptEffectDataGetter rhs,
            ScriptEffectData.TranslationMask? equalsMask = null)
        {
            return ((ScriptEffectDataCommon)((IScriptEffectDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IScriptEffectData lhs,
            IScriptEffectDataGetter rhs)
        {
            ((ScriptEffectDataSetterTranslationCommon)((IScriptEffectDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IScriptEffectData lhs,
            IScriptEffectDataGetter rhs,
            ScriptEffectData.TranslationMask? copyMask = null)
        {
            ((ScriptEffectDataSetterTranslationCommon)((IScriptEffectDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IScriptEffectData lhs,
            IScriptEffectDataGetter rhs,
            out ScriptEffectData.ErrorMask errorMask,
            ScriptEffectData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ScriptEffectDataSetterTranslationCommon)((IScriptEffectDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ScriptEffectData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IScriptEffectData lhs,
            IScriptEffectDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ScriptEffectDataSetterTranslationCommon)((IScriptEffectDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ScriptEffectData DeepCopy(
            this IScriptEffectDataGetter item,
            ScriptEffectData.TranslationMask? copyMask = null)
        {
            return ((ScriptEffectDataSetterTranslationCommon)((IScriptEffectDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ScriptEffectData DeepCopy(
            this IScriptEffectDataGetter item,
            out ScriptEffectData.ErrorMask errorMask,
            ScriptEffectData.TranslationMask? copyMask = null)
        {
            return ((ScriptEffectDataSetterTranslationCommon)((IScriptEffectDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ScriptEffectData DeepCopy(
            this IScriptEffectDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ScriptEffectDataSetterTranslationCommon)((IScriptEffectDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IScriptEffectData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ScriptEffectDataSetterCommon)((IScriptEffectDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    #region Field Index
    internal enum ScriptEffectData_FieldIndex
    {
        Versioning = 0,
        Script = 1,
        MagicSchool = 2,
        VisualEffect = 3,
        Flags = 4,
    }
    #endregion

    #region Registration
    internal partial class ScriptEffectData_Registration : ILoquiRegistration
    {
        public static readonly ScriptEffectData_Registration Instance = new ScriptEffectData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(ScriptEffectData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ScriptEffectData.ErrorMask);

        public static readonly Type ClassType = typeof(ScriptEffectData);

        public static readonly Type GetterType = typeof(IScriptEffectDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IScriptEffectData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.ScriptEffectData";

        public const string Name = "ScriptEffectData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.SCIT;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.SCIT);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ScriptEffectDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ScriptEffectDataSetterCommon
    {
        public static readonly ScriptEffectDataSetterCommon Instance = new ScriptEffectDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IScriptEffectData item)
        {
            ClearPartial();
            item.Versioning = default(ScriptEffectData.VersioningBreaks);
            item.Script.Clear();
            item.MagicSchool = default(MagicSchool);
            item.VisualEffect.Clear();
            item.Flags = default(ScriptEffect.Flag);
        }
        
        #region Mutagen
        public void RemapLinks(IScriptEffectData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Script.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IScriptEffectData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.SCIT),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ScriptEffectDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class ScriptEffectDataCommon
    {
        public static readonly ScriptEffectDataCommon Instance = new ScriptEffectDataCommon();

        public ScriptEffectData.Mask<bool> GetEqualsMask(
            IScriptEffectDataGetter item,
            IScriptEffectDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ScriptEffectData.Mask<bool>(false);
            ((ScriptEffectDataCommon)((IScriptEffectDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IScriptEffectDataGetter item,
            IScriptEffectDataGetter rhs,
            ScriptEffectData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Versioning = item.Versioning == rhs.Versioning;
            ret.Script = item.Script.Equals(rhs.Script);
            ret.MagicSchool = item.MagicSchool == rhs.MagicSchool;
            ret.VisualEffect = item.VisualEffect.Equals(rhs.VisualEffect);
            ret.Flags = item.Flags == rhs.Flags;
        }
        
        public string Print(
            IScriptEffectDataGetter item,
            string? name = null,
            ScriptEffectData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IScriptEffectDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ScriptEffectData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"ScriptEffectData =>");
            }
            else
            {
                sb.AppendLine($"{name} (ScriptEffectData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IScriptEffectDataGetter item,
            StructuredStringBuilder sb,
            ScriptEffectData.Mask<bool>? printMask = null)
        {
            if (printMask?.Versioning ?? true)
            {
                sb.AppendItem(item.Versioning, "Versioning");
            }
            if (printMask?.Script ?? true)
            {
                sb.AppendItem(item.Script.FormKey, "Script");
            }
            if (printMask?.MagicSchool ?? true)
            {
                sb.AppendItem(item.MagicSchool, "MagicSchool");
            }
            if (printMask?.VisualEffect ?? true)
            {
                sb.AppendItem(item.VisualEffect.EDID, "VisualEffect");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IScriptEffectDataGetter? lhs,
            IScriptEffectDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)ScriptEffectData_FieldIndex.Versioning) ?? true))
            {
                if (lhs.Versioning != rhs.Versioning) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ScriptEffectData_FieldIndex.Script) ?? true))
            {
                if (!lhs.Script.Equals(rhs.Script)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ScriptEffectData_FieldIndex.MagicSchool) ?? true))
            {
                if (lhs.MagicSchool != rhs.MagicSchool) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ScriptEffectData_FieldIndex.VisualEffect) ?? true))
            {
                if (!lhs.VisualEffect.Equals(rhs.VisualEffect)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ScriptEffectData_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IScriptEffectDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Versioning);
            hash.Add(item.Script);
            hash.Add(item.MagicSchool);
            hash.Add(item.VisualEffect);
            hash.Add(item.Flags);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ScriptEffectData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IScriptEffectDataGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.Script);
            yield break;
        }
        
        #endregion
        
    }
    internal partial class ScriptEffectDataSetterTranslationCommon
    {
        public static readonly ScriptEffectDataSetterTranslationCommon Instance = new ScriptEffectDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IScriptEffectData item,
            IScriptEffectDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)ScriptEffectData_FieldIndex.Versioning) ?? true))
            {
                item.Versioning = rhs.Versioning;
            }
            if ((copyMask?.GetShouldTranslate((int)ScriptEffectData_FieldIndex.Script) ?? true))
            {
                item.Script.SetTo(rhs.Script.FormKey);
            }
            if (rhs.Versioning.HasFlag(ScriptEffectData.VersioningBreaks.Break0)) return;
            if ((copyMask?.GetShouldTranslate((int)ScriptEffectData_FieldIndex.MagicSchool) ?? true))
            {
                item.MagicSchool = rhs.MagicSchool;
            }
            if ((copyMask?.GetShouldTranslate((int)ScriptEffectData_FieldIndex.VisualEffect) ?? true))
            {
                item.VisualEffect.SetTo(rhs.VisualEffect.EDID);
            }
            if (rhs.Versioning.HasFlag(ScriptEffectData.VersioningBreaks.Break1)) return;
            if ((copyMask?.GetShouldTranslate((int)ScriptEffectData_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
        }
        
        #endregion
        
        public ScriptEffectData DeepCopy(
            IScriptEffectDataGetter item,
            ScriptEffectData.TranslationMask? copyMask = null)
        {
            ScriptEffectData ret = (ScriptEffectData)((ScriptEffectDataCommon)((IScriptEffectDataGetter)item).CommonInstance()!).GetNew();
            ((ScriptEffectDataSetterTranslationCommon)((IScriptEffectDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ScriptEffectData DeepCopy(
            IScriptEffectDataGetter item,
            out ScriptEffectData.ErrorMask errorMask,
            ScriptEffectData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ScriptEffectData ret = (ScriptEffectData)((ScriptEffectDataCommon)((IScriptEffectDataGetter)item).CommonInstance()!).GetNew();
            ((ScriptEffectDataSetterTranslationCommon)((IScriptEffectDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ScriptEffectData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ScriptEffectData DeepCopy(
            IScriptEffectDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ScriptEffectData ret = (ScriptEffectData)((ScriptEffectDataCommon)((IScriptEffectDataGetter)item).CommonInstance()!).GetNew();
            ((ScriptEffectDataSetterTranslationCommon)((IScriptEffectDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class ScriptEffectData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptEffectData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => ScriptEffectData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ScriptEffectDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ScriptEffectDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ScriptEffectDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IScriptEffectDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IScriptEffectDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IScriptEffectDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion
{
    public partial class ScriptEffectDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly ScriptEffectDataBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IScriptEffectDataGetter item,
            MutagenWriter writer)
        {
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Script);
            if (!item.Versioning.HasFlag(ScriptEffectData.VersioningBreaks.Break0))
            {
                EnumBinaryTranslation<MagicSchool, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.MagicSchool,
                    length: 4);
                RecordTypeBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.VisualEffect);
                if (!item.Versioning.HasFlag(ScriptEffectData.VersioningBreaks.Break1))
                {
                    EnumBinaryTranslation<ScriptEffect.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 4);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IScriptEffectDataGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.SCIT),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IScriptEffectDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ScriptEffectDataBinaryCreateTranslation
    {
        public static readonly ScriptEffectDataBinaryCreateTranslation Instance = new ScriptEffectDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IScriptEffectData item,
            MutagenFrame frame)
        {
            item.Script.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            if (frame.Complete)
            {
                item.Versioning |= ScriptEffectData.VersioningBreaks.Break0;
                return;
            }
            item.MagicSchool = EnumBinaryTranslation<MagicSchool, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
            item.VisualEffect.SetTo(RecordTypeBinaryTranslation.Instance.Parse(reader: frame));
            if (frame.Complete)
            {
                item.Versioning |= ScriptEffectData.VersioningBreaks.Break1;
                return;
            }
            item.Flags = EnumBinaryTranslation<ScriptEffect.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ScriptEffectDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IScriptEffectDataGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ScriptEffectDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion
{
    internal partial class ScriptEffectDataBinaryOverlay :
        PluginBinaryOverlay,
        IScriptEffectDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptEffectData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => ScriptEffectData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ScriptEffectDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ScriptEffectDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IScriptEffectDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IScriptEffectDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IScriptEffectDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ScriptEffectDataCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ScriptEffectDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ScriptEffectDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public ScriptEffectData.VersioningBreaks Versioning { get; private set; }
        public IFormLinkGetter<IScriptGetter> Script => new FormLink<IScriptGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_structData.Span.Slice(0x0, 0x4))));
        public MagicSchool MagicSchool => _structData.Span.Length <= 0x4 ? default : (MagicSchool)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0x4, 0x4));
        public IEDIDLinkGetter<IMagicEffectGetter> VisualEffect => _structData.Length <= 0x8 ? EDIDLink<IMagicEffectGetter>.Null : new EDIDLink<IMagicEffectGetter>(new RecordType(BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0x8, 0x4))));
        public ScriptEffect.Flag Flags => _structData.Span.Length <= 0xC ? default : (ScriptEffect.Flag)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0xC, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ScriptEffectDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IScriptEffectDataGetter ScriptEffectDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x10,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new ScriptEffectDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            if (ret._structData.Length <= 0x4)
            {
                ret.Versioning |= ScriptEffectData.VersioningBreaks.Break0;
            }
            if (ret._structData.Length <= 0xC)
            {
                ret.Versioning |= ScriptEffectData.VersioningBreaks.Break1;
            }
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IScriptEffectDataGetter ScriptEffectDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ScriptEffectDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ScriptEffectDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IScriptEffectDataGetter rhs) return false;
            return ((ScriptEffectDataCommon)((IScriptEffectDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IScriptEffectDataGetter? obj)
        {
            return ((ScriptEffectDataCommon)((IScriptEffectDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ScriptEffectDataCommon)((IScriptEffectDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

