/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Model :
        IEquatable<IModelGetter>,
        ILoquiObjectSetter<Model>,
        IModel
    {
        #region Ctor
        public Model()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region File
        public String File { get; set; } = string.Empty;
        #endregion
        #region BoundRadius
        public Single BoundRadius { get; set; } = default;
        #endregion
        #region Hashes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _Hashes;
        public MemorySlice<Byte>? Hashes
        {
            get => this._Hashes;
            set => this._Hashes = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IModelGetter.Hashes => this.Hashes;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ModelMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IModelGetter rhs) return false;
            return ((ModelCommon)((IModelGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IModelGetter? obj)
        {
            return ((ModelCommon)((IModelGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ModelCommon)((IModelGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.File = initialValue;
                this.BoundRadius = initialValue;
                this.Hashes = initialValue;
            }

            public Mask(
                TItem File,
                TItem BoundRadius,
                TItem Hashes)
            {
                this.File = File;
                this.BoundRadius = BoundRadius;
                this.Hashes = Hashes;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem File;
            public TItem BoundRadius;
            public TItem Hashes;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.File, rhs.File)) return false;
                if (!object.Equals(this.BoundRadius, rhs.BoundRadius)) return false;
                if (!object.Equals(this.Hashes, rhs.Hashes)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.File);
                hash.Add(this.BoundRadius);
                hash.Add(this.Hashes);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.File)) return false;
                if (!eval(this.BoundRadius)) return false;
                if (!eval(this.Hashes)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.File)) return true;
                if (eval(this.BoundRadius)) return true;
                if (eval(this.Hashes)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Model.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.File = eval(this.File);
                obj.BoundRadius = eval(this.BoundRadius);
                obj.Hashes = eval(this.Hashes);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Model.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Model.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Model.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.File ?? true)
                    {
                        fg.AppendItem(File, "File");
                    }
                    if (printMask?.BoundRadius ?? true)
                    {
                        fg.AppendItem(BoundRadius, "BoundRadius");
                    }
                    if (printMask?.Hashes ?? true)
                    {
                        fg.AppendItem(Hashes, "Hashes");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? File;
            public Exception? BoundRadius;
            public Exception? Hashes;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Model_FieldIndex enu = (Model_FieldIndex)index;
                switch (enu)
                {
                    case Model_FieldIndex.File:
                        return File;
                    case Model_FieldIndex.BoundRadius:
                        return BoundRadius;
                    case Model_FieldIndex.Hashes:
                        return Hashes;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Model_FieldIndex enu = (Model_FieldIndex)index;
                switch (enu)
                {
                    case Model_FieldIndex.File:
                        this.File = ex;
                        break;
                    case Model_FieldIndex.BoundRadius:
                        this.BoundRadius = ex;
                        break;
                    case Model_FieldIndex.Hashes:
                        this.Hashes = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Model_FieldIndex enu = (Model_FieldIndex)index;
                switch (enu)
                {
                    case Model_FieldIndex.File:
                        this.File = (Exception?)obj;
                        break;
                    case Model_FieldIndex.BoundRadius:
                        this.BoundRadius = (Exception?)obj;
                        break;
                    case Model_FieldIndex.Hashes:
                        this.Hashes = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (File != null) return true;
                if (BoundRadius != null) return true;
                if (Hashes != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(File, "File");
                fg.AppendItem(BoundRadius, "BoundRadius");
                fg.AppendItem(Hashes, "Hashes");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.File = this.File.Combine(rhs.File);
                ret.BoundRadius = this.BoundRadius.Combine(rhs.BoundRadius);
                ret.Hashes = this.Hashes.Combine(rhs.Hashes);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool File;
            public bool BoundRadius;
            public bool Hashes;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.File = defaultOn;
                this.BoundRadius = defaultOn;
                this.Hashes = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((File, null));
                ret.Add((BoundRadius, null));
                ret.Add((Hashes, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Model_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ModelBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ModelBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static Model CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new Model();
            ((ModelSetterCommon)((IModelGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Model item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ModelSetterCommon)((IModelGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Model GetNew()
        {
            return new Model();
        }

    }
    #endregion

    #region Interface
    public partial interface IModel :
        ILoquiObjectSetter<IModel>,
        IModelGetter
    {
        new String File { get; set; }
        new Single BoundRadius { get; set; }
        new MemorySlice<Byte>? Hashes { get; set; }
    }

    public partial interface IModelGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IModelGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => Model_Registration.Instance;
        String File { get; }
        Single BoundRadius { get; }
        ReadOnlyMemorySlice<Byte>? Hashes { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ModelMixIn
    {
        public static void Clear(this IModel item)
        {
            ((ModelSetterCommon)((IModelGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Model.Mask<bool> GetEqualsMask(
            this IModelGetter item,
            IModelGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ModelCommon)((IModelGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IModelGetter item,
            string? name = null,
            Model.Mask<bool>? printMask = null)
        {
            return ((ModelCommon)((IModelGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IModelGetter item,
            FileGeneration fg,
            string? name = null,
            Model.Mask<bool>? printMask = null)
        {
            ((ModelCommon)((IModelGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IModelGetter item,
            IModelGetter rhs,
            Model.TranslationMask? equalsMask = null)
        {
            return ((ModelCommon)((IModelGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IModel lhs,
            IModelGetter rhs)
        {
            ((ModelSetterTranslationCommon)((IModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IModel lhs,
            IModelGetter rhs,
            Model.TranslationMask? copyMask = null)
        {
            ((ModelSetterTranslationCommon)((IModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IModel lhs,
            IModelGetter rhs,
            out Model.ErrorMask errorMask,
            Model.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ModelSetterTranslationCommon)((IModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Model.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IModel lhs,
            IModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ModelSetterTranslationCommon)((IModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Model DeepCopy(
            this IModelGetter item,
            Model.TranslationMask? copyMask = null)
        {
            return ((ModelSetterTranslationCommon)((IModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Model DeepCopy(
            this IModelGetter item,
            out Model.ErrorMask errorMask,
            Model.TranslationMask? copyMask = null)
        {
            return ((ModelSetterTranslationCommon)((IModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Model DeepCopy(
            this IModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ModelSetterTranslationCommon)((IModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IModel item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((ModelSetterCommon)((IModelGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Model_FieldIndex
    {
        File = 0,
        BoundRadius = 1,
        Hashes = 2,
    }
    #endregion

    #region Registration
    public partial class Model_Registration : ILoquiRegistration
    {
        public static readonly Model_Registration Instance = new Model_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 20,
            version: 0);

        public const string GUID = "b989dfe1-feb4-4492-9a94-897f6be0c20a";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(Model.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Model.ErrorMask);

        public static readonly Type ClassType = typeof(Model);

        public static readonly Type GetterType = typeof(IModelGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IModel);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.Model";

        public const string Name = "Model";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.MODL;
        public static readonly Type BinaryWriteTranslation = typeof(ModelBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ModelSetterCommon
    {
        public static readonly ModelSetterCommon Instance = new ModelSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IModel item)
        {
            ClearPartial();
            item.File = string.Empty;
            item.BoundRadius = default;
            item.Hashes = default;
        }
        
        #region Mutagen
        public void RemapLinks(IModel obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IModel item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ModelBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ModelBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class ModelCommon
    {
        public static readonly ModelCommon Instance = new ModelCommon();

        public Model.Mask<bool> GetEqualsMask(
            IModelGetter item,
            IModelGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Model.Mask<bool>(false);
            ((ModelCommon)((IModelGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IModelGetter item,
            IModelGetter rhs,
            Model.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.File = string.Equals(item.File, rhs.File);
            ret.BoundRadius = item.BoundRadius.EqualsWithin(rhs.BoundRadius);
            ret.Hashes = MemorySliceExt.Equal(item.Hashes, rhs.Hashes);
        }
        
        public string ToString(
            IModelGetter item,
            string? name = null,
            Model.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IModelGetter item,
            FileGeneration fg,
            string? name = null,
            Model.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Model =>");
            }
            else
            {
                fg.AppendLine($"{name} (Model) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IModelGetter item,
            FileGeneration fg,
            Model.Mask<bool>? printMask = null)
        {
            if (printMask?.File ?? true)
            {
                fg.AppendItem(item.File, "File");
            }
            if (printMask?.BoundRadius ?? true)
            {
                fg.AppendItem(item.BoundRadius, "BoundRadius");
            }
            if ((printMask?.Hashes ?? true)
                && item.Hashes is {} HashesItem)
            {
                fg.AppendLine($"Hashes => {SpanExt.ToHexString(HashesItem)}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IModelGetter? lhs,
            IModelGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)Model_FieldIndex.File) ?? true))
            {
                if (!string.Equals(lhs.File, rhs.File)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Model_FieldIndex.BoundRadius) ?? true))
            {
                if (!lhs.BoundRadius.EqualsWithin(rhs.BoundRadius)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Model_FieldIndex.Hashes) ?? true))
            {
                if (!MemorySliceExt.Equal(lhs.Hashes, rhs.Hashes)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IModelGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.File);
            hash.Add(item.BoundRadius);
            if (item.Hashes is {} HashesItem)
            {
                hash.Add(HashesItem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Model.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IModelGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class ModelSetterTranslationCommon
    {
        public static readonly ModelSetterTranslationCommon Instance = new ModelSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IModel item,
            IModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)Model_FieldIndex.File) ?? true))
            {
                item.File = rhs.File;
            }
            if ((copyMask?.GetShouldTranslate((int)Model_FieldIndex.BoundRadius) ?? true))
            {
                item.BoundRadius = rhs.BoundRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)Model_FieldIndex.Hashes) ?? true))
            {
                if(rhs.Hashes is {} Hashesrhs)
                {
                    item.Hashes = Hashesrhs.ToArray();
                }
                else
                {
                    item.Hashes = default;
                }
            }
        }
        
        #endregion
        
        public Model DeepCopy(
            IModelGetter item,
            Model.TranslationMask? copyMask = null)
        {
            Model ret = (Model)((ModelCommon)((IModelGetter)item).CommonInstance()!).GetNew();
            ((ModelSetterTranslationCommon)((IModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Model DeepCopy(
            IModelGetter item,
            out Model.ErrorMask errorMask,
            Model.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Model ret = (Model)((ModelCommon)((IModelGetter)item).CommonInstance()!).GetNew();
            ((ModelSetterTranslationCommon)((IModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Model.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Model DeepCopy(
            IModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Model ret = (Model)((ModelCommon)((IModelGetter)item).CommonInstance()!).GetNew();
            ((ModelSetterTranslationCommon)((IModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Model
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Model_Registration.Instance;
        public static Model_Registration StaticRegistration => Model_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ModelCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ModelSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ModelSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IModelGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IModelGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IModelGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ModelBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ModelBinaryWriteTranslation Instance = new ModelBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IModelGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.File,
                header: translationParams.ConvertToCustom(RecordTypes.MODL),
                binaryType: StringBinaryType.NullTerminate);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BoundRadius,
                header: translationParams.ConvertToCustom(RecordTypes.MODB));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Hashes,
                header: translationParams.ConvertToCustom(RecordTypes.MODT));
        }

        public void Write(
            MutagenWriter writer,
            IModelGetter item,
            TypedWriteParams? translationParams = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IModelGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class ModelBinaryCreateTranslation
    {
        public readonly static ModelBinaryCreateTranslation Instance = new ModelBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IModel item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IModel item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.MODL:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)Model_FieldIndex.File) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.File = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Model_FieldIndex.File;
                }
                case RecordTypeInts.MODB:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BoundRadius = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Model_FieldIndex.BoundRadius;
                }
                case RecordTypeInts.MODT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Hashes = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Model_FieldIndex.Hashes;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ModelBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IModelGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ModelBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ModelBinaryOverlay :
        PluginBinaryOverlay,
        IModelGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Model_Registration.Instance;
        public static Model_Registration StaticRegistration => Model_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ModelCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ModelSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IModelGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IModelGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IModelGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ModelBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ModelBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region File
        private int? _FileLocation;
        public String File => _FileLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _FileLocation.Value, _package.MetaData.Constants)) : string.Empty;
        #endregion
        #region BoundRadius
        private int? _BoundRadiusLocation;
        public Single BoundRadius => _BoundRadiusLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _BoundRadiusLocation.Value, _package.MetaData.Constants).Float() : default;
        #endregion
        #region Hashes
        private int? _HashesLocation;
        public ReadOnlyMemorySlice<Byte>? Hashes => _HashesLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _HashesLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ModelBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ModelBinaryOverlay ModelFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new ModelBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ModelBinaryOverlay ModelFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return ModelFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.MODL:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)Model_FieldIndex.File) return ParseResult.Stop;
                    _FileLocation = (stream.Position - offset);
                    return (int)Model_FieldIndex.File;
                }
                case RecordTypeInts.MODB:
                {
                    _BoundRadiusLocation = (stream.Position - offset);
                    return (int)Model_FieldIndex.BoundRadius;
                }
                case RecordTypeInts.MODT:
                {
                    _HashesLocation = (stream.Position - offset);
                    return (int)Model_FieldIndex.Hashes;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ModelMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IModelGetter rhs) return false;
            return ((ModelCommon)((IModelGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IModelGetter? obj)
        {
            return ((ModelCommon)((IModelGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ModelCommon)((IModelGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

