/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class NpcData :
        IEquatable<INpcDataGetter>,
        ILoquiObjectSetter<NpcData>,
        INpcData
    {
        #region Ctor
        public NpcData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Armorer
        public Byte Armorer { get; set; } = default;
        #endregion
        #region Athletics
        public Byte Athletics { get; set; } = default;
        #endregion
        #region Blade
        public Byte Blade { get; set; } = default;
        #endregion
        #region Block
        public Byte Block { get; set; } = default;
        #endregion
        #region Blunt
        public Byte Blunt { get; set; } = default;
        #endregion
        #region HandToHand
        public Byte HandToHand { get; set; } = default;
        #endregion
        #region HeavyArmor
        public Byte HeavyArmor { get; set; } = default;
        #endregion
        #region Alchemy
        public Byte Alchemy { get; set; } = default;
        #endregion
        #region Alteration
        public Byte Alteration { get; set; } = default;
        #endregion
        #region Conjuration
        public Byte Conjuration { get; set; } = default;
        #endregion
        #region Destruction
        public Byte Destruction { get; set; } = default;
        #endregion
        #region Illusion
        public Byte Illusion { get; set; } = default;
        #endregion
        #region Mysticism
        public Byte Mysticism { get; set; } = default;
        #endregion
        #region Restoration
        public Byte Restoration { get; set; } = default;
        #endregion
        #region Acrobatics
        public Byte Acrobatics { get; set; } = default;
        #endregion
        #region LightArmor
        public Byte LightArmor { get; set; } = default;
        #endregion
        #region Marksman
        public Byte Marksman { get; set; } = default;
        #endregion
        #region Mercantile
        public Byte Mercantile { get; set; } = default;
        #endregion
        #region Security
        public Byte Security { get; set; } = default;
        #endregion
        #region Sneak
        public Byte Sneak { get; set; } = default;
        #endregion
        #region Speechcraft
        public Byte Speechcraft { get; set; } = default;
        #endregion
        #region Health
        public UInt32 Health { get; set; } = default;
        #endregion
        #region Strength
        public Byte Strength { get; set; } = default;
        #endregion
        #region Intelligence
        public Byte Intelligence { get; set; } = default;
        #endregion
        #region Willpower
        public Byte Willpower { get; set; } = default;
        #endregion
        #region Agility
        public Byte Agility { get; set; } = default;
        #endregion
        #region Speed
        public Byte Speed { get; set; } = default;
        #endregion
        #region Endurance
        public Byte Endurance { get; set; } = default;
        #endregion
        #region Personality
        public Byte Personality { get; set; } = default;
        #endregion
        #region Luck
        public Byte Luck { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            NpcDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INpcDataGetter rhs) return false;
            return ((NpcDataCommon)((INpcDataGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(INpcDataGetter? obj)
        {
            return ((NpcDataCommon)((INpcDataGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((NpcDataCommon)((INpcDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Armorer = initialValue;
                this.Athletics = initialValue;
                this.Blade = initialValue;
                this.Block = initialValue;
                this.Blunt = initialValue;
                this.HandToHand = initialValue;
                this.HeavyArmor = initialValue;
                this.Alchemy = initialValue;
                this.Alteration = initialValue;
                this.Conjuration = initialValue;
                this.Destruction = initialValue;
                this.Illusion = initialValue;
                this.Mysticism = initialValue;
                this.Restoration = initialValue;
                this.Acrobatics = initialValue;
                this.LightArmor = initialValue;
                this.Marksman = initialValue;
                this.Mercantile = initialValue;
                this.Security = initialValue;
                this.Sneak = initialValue;
                this.Speechcraft = initialValue;
                this.Health = initialValue;
                this.Strength = initialValue;
                this.Intelligence = initialValue;
                this.Willpower = initialValue;
                this.Agility = initialValue;
                this.Speed = initialValue;
                this.Endurance = initialValue;
                this.Personality = initialValue;
                this.Luck = initialValue;
            }

            public Mask(
                TItem Armorer,
                TItem Athletics,
                TItem Blade,
                TItem Block,
                TItem Blunt,
                TItem HandToHand,
                TItem HeavyArmor,
                TItem Alchemy,
                TItem Alteration,
                TItem Conjuration,
                TItem Destruction,
                TItem Illusion,
                TItem Mysticism,
                TItem Restoration,
                TItem Acrobatics,
                TItem LightArmor,
                TItem Marksman,
                TItem Mercantile,
                TItem Security,
                TItem Sneak,
                TItem Speechcraft,
                TItem Health,
                TItem Strength,
                TItem Intelligence,
                TItem Willpower,
                TItem Agility,
                TItem Speed,
                TItem Endurance,
                TItem Personality,
                TItem Luck)
            {
                this.Armorer = Armorer;
                this.Athletics = Athletics;
                this.Blade = Blade;
                this.Block = Block;
                this.Blunt = Blunt;
                this.HandToHand = HandToHand;
                this.HeavyArmor = HeavyArmor;
                this.Alchemy = Alchemy;
                this.Alteration = Alteration;
                this.Conjuration = Conjuration;
                this.Destruction = Destruction;
                this.Illusion = Illusion;
                this.Mysticism = Mysticism;
                this.Restoration = Restoration;
                this.Acrobatics = Acrobatics;
                this.LightArmor = LightArmor;
                this.Marksman = Marksman;
                this.Mercantile = Mercantile;
                this.Security = Security;
                this.Sneak = Sneak;
                this.Speechcraft = Speechcraft;
                this.Health = Health;
                this.Strength = Strength;
                this.Intelligence = Intelligence;
                this.Willpower = Willpower;
                this.Agility = Agility;
                this.Speed = Speed;
                this.Endurance = Endurance;
                this.Personality = Personality;
                this.Luck = Luck;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Armorer;
            public TItem Athletics;
            public TItem Blade;
            public TItem Block;
            public TItem Blunt;
            public TItem HandToHand;
            public TItem HeavyArmor;
            public TItem Alchemy;
            public TItem Alteration;
            public TItem Conjuration;
            public TItem Destruction;
            public TItem Illusion;
            public TItem Mysticism;
            public TItem Restoration;
            public TItem Acrobatics;
            public TItem LightArmor;
            public TItem Marksman;
            public TItem Mercantile;
            public TItem Security;
            public TItem Sneak;
            public TItem Speechcraft;
            public TItem Health;
            public TItem Strength;
            public TItem Intelligence;
            public TItem Willpower;
            public TItem Agility;
            public TItem Speed;
            public TItem Endurance;
            public TItem Personality;
            public TItem Luck;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Armorer, rhs.Armorer)) return false;
                if (!object.Equals(this.Athletics, rhs.Athletics)) return false;
                if (!object.Equals(this.Blade, rhs.Blade)) return false;
                if (!object.Equals(this.Block, rhs.Block)) return false;
                if (!object.Equals(this.Blunt, rhs.Blunt)) return false;
                if (!object.Equals(this.HandToHand, rhs.HandToHand)) return false;
                if (!object.Equals(this.HeavyArmor, rhs.HeavyArmor)) return false;
                if (!object.Equals(this.Alchemy, rhs.Alchemy)) return false;
                if (!object.Equals(this.Alteration, rhs.Alteration)) return false;
                if (!object.Equals(this.Conjuration, rhs.Conjuration)) return false;
                if (!object.Equals(this.Destruction, rhs.Destruction)) return false;
                if (!object.Equals(this.Illusion, rhs.Illusion)) return false;
                if (!object.Equals(this.Mysticism, rhs.Mysticism)) return false;
                if (!object.Equals(this.Restoration, rhs.Restoration)) return false;
                if (!object.Equals(this.Acrobatics, rhs.Acrobatics)) return false;
                if (!object.Equals(this.LightArmor, rhs.LightArmor)) return false;
                if (!object.Equals(this.Marksman, rhs.Marksman)) return false;
                if (!object.Equals(this.Mercantile, rhs.Mercantile)) return false;
                if (!object.Equals(this.Security, rhs.Security)) return false;
                if (!object.Equals(this.Sneak, rhs.Sneak)) return false;
                if (!object.Equals(this.Speechcraft, rhs.Speechcraft)) return false;
                if (!object.Equals(this.Health, rhs.Health)) return false;
                if (!object.Equals(this.Strength, rhs.Strength)) return false;
                if (!object.Equals(this.Intelligence, rhs.Intelligence)) return false;
                if (!object.Equals(this.Willpower, rhs.Willpower)) return false;
                if (!object.Equals(this.Agility, rhs.Agility)) return false;
                if (!object.Equals(this.Speed, rhs.Speed)) return false;
                if (!object.Equals(this.Endurance, rhs.Endurance)) return false;
                if (!object.Equals(this.Personality, rhs.Personality)) return false;
                if (!object.Equals(this.Luck, rhs.Luck)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Armorer);
                hash.Add(this.Athletics);
                hash.Add(this.Blade);
                hash.Add(this.Block);
                hash.Add(this.Blunt);
                hash.Add(this.HandToHand);
                hash.Add(this.HeavyArmor);
                hash.Add(this.Alchemy);
                hash.Add(this.Alteration);
                hash.Add(this.Conjuration);
                hash.Add(this.Destruction);
                hash.Add(this.Illusion);
                hash.Add(this.Mysticism);
                hash.Add(this.Restoration);
                hash.Add(this.Acrobatics);
                hash.Add(this.LightArmor);
                hash.Add(this.Marksman);
                hash.Add(this.Mercantile);
                hash.Add(this.Security);
                hash.Add(this.Sneak);
                hash.Add(this.Speechcraft);
                hash.Add(this.Health);
                hash.Add(this.Strength);
                hash.Add(this.Intelligence);
                hash.Add(this.Willpower);
                hash.Add(this.Agility);
                hash.Add(this.Speed);
                hash.Add(this.Endurance);
                hash.Add(this.Personality);
                hash.Add(this.Luck);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Armorer)) return false;
                if (!eval(this.Athletics)) return false;
                if (!eval(this.Blade)) return false;
                if (!eval(this.Block)) return false;
                if (!eval(this.Blunt)) return false;
                if (!eval(this.HandToHand)) return false;
                if (!eval(this.HeavyArmor)) return false;
                if (!eval(this.Alchemy)) return false;
                if (!eval(this.Alteration)) return false;
                if (!eval(this.Conjuration)) return false;
                if (!eval(this.Destruction)) return false;
                if (!eval(this.Illusion)) return false;
                if (!eval(this.Mysticism)) return false;
                if (!eval(this.Restoration)) return false;
                if (!eval(this.Acrobatics)) return false;
                if (!eval(this.LightArmor)) return false;
                if (!eval(this.Marksman)) return false;
                if (!eval(this.Mercantile)) return false;
                if (!eval(this.Security)) return false;
                if (!eval(this.Sneak)) return false;
                if (!eval(this.Speechcraft)) return false;
                if (!eval(this.Health)) return false;
                if (!eval(this.Strength)) return false;
                if (!eval(this.Intelligence)) return false;
                if (!eval(this.Willpower)) return false;
                if (!eval(this.Agility)) return false;
                if (!eval(this.Speed)) return false;
                if (!eval(this.Endurance)) return false;
                if (!eval(this.Personality)) return false;
                if (!eval(this.Luck)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Armorer)) return true;
                if (eval(this.Athletics)) return true;
                if (eval(this.Blade)) return true;
                if (eval(this.Block)) return true;
                if (eval(this.Blunt)) return true;
                if (eval(this.HandToHand)) return true;
                if (eval(this.HeavyArmor)) return true;
                if (eval(this.Alchemy)) return true;
                if (eval(this.Alteration)) return true;
                if (eval(this.Conjuration)) return true;
                if (eval(this.Destruction)) return true;
                if (eval(this.Illusion)) return true;
                if (eval(this.Mysticism)) return true;
                if (eval(this.Restoration)) return true;
                if (eval(this.Acrobatics)) return true;
                if (eval(this.LightArmor)) return true;
                if (eval(this.Marksman)) return true;
                if (eval(this.Mercantile)) return true;
                if (eval(this.Security)) return true;
                if (eval(this.Sneak)) return true;
                if (eval(this.Speechcraft)) return true;
                if (eval(this.Health)) return true;
                if (eval(this.Strength)) return true;
                if (eval(this.Intelligence)) return true;
                if (eval(this.Willpower)) return true;
                if (eval(this.Agility)) return true;
                if (eval(this.Speed)) return true;
                if (eval(this.Endurance)) return true;
                if (eval(this.Personality)) return true;
                if (eval(this.Luck)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new NpcData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Armorer = eval(this.Armorer);
                obj.Athletics = eval(this.Athletics);
                obj.Blade = eval(this.Blade);
                obj.Block = eval(this.Block);
                obj.Blunt = eval(this.Blunt);
                obj.HandToHand = eval(this.HandToHand);
                obj.HeavyArmor = eval(this.HeavyArmor);
                obj.Alchemy = eval(this.Alchemy);
                obj.Alteration = eval(this.Alteration);
                obj.Conjuration = eval(this.Conjuration);
                obj.Destruction = eval(this.Destruction);
                obj.Illusion = eval(this.Illusion);
                obj.Mysticism = eval(this.Mysticism);
                obj.Restoration = eval(this.Restoration);
                obj.Acrobatics = eval(this.Acrobatics);
                obj.LightArmor = eval(this.LightArmor);
                obj.Marksman = eval(this.Marksman);
                obj.Mercantile = eval(this.Mercantile);
                obj.Security = eval(this.Security);
                obj.Sneak = eval(this.Sneak);
                obj.Speechcraft = eval(this.Speechcraft);
                obj.Health = eval(this.Health);
                obj.Strength = eval(this.Strength);
                obj.Intelligence = eval(this.Intelligence);
                obj.Willpower = eval(this.Willpower);
                obj.Agility = eval(this.Agility);
                obj.Speed = eval(this.Speed);
                obj.Endurance = eval(this.Endurance);
                obj.Personality = eval(this.Personality);
                obj.Luck = eval(this.Luck);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(NpcData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, NpcData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(NpcData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Armorer ?? true)
                    {
                        fg.AppendItem(Armorer, "Armorer");
                    }
                    if (printMask?.Athletics ?? true)
                    {
                        fg.AppendItem(Athletics, "Athletics");
                    }
                    if (printMask?.Blade ?? true)
                    {
                        fg.AppendItem(Blade, "Blade");
                    }
                    if (printMask?.Block ?? true)
                    {
                        fg.AppendItem(Block, "Block");
                    }
                    if (printMask?.Blunt ?? true)
                    {
                        fg.AppendItem(Blunt, "Blunt");
                    }
                    if (printMask?.HandToHand ?? true)
                    {
                        fg.AppendItem(HandToHand, "HandToHand");
                    }
                    if (printMask?.HeavyArmor ?? true)
                    {
                        fg.AppendItem(HeavyArmor, "HeavyArmor");
                    }
                    if (printMask?.Alchemy ?? true)
                    {
                        fg.AppendItem(Alchemy, "Alchemy");
                    }
                    if (printMask?.Alteration ?? true)
                    {
                        fg.AppendItem(Alteration, "Alteration");
                    }
                    if (printMask?.Conjuration ?? true)
                    {
                        fg.AppendItem(Conjuration, "Conjuration");
                    }
                    if (printMask?.Destruction ?? true)
                    {
                        fg.AppendItem(Destruction, "Destruction");
                    }
                    if (printMask?.Illusion ?? true)
                    {
                        fg.AppendItem(Illusion, "Illusion");
                    }
                    if (printMask?.Mysticism ?? true)
                    {
                        fg.AppendItem(Mysticism, "Mysticism");
                    }
                    if (printMask?.Restoration ?? true)
                    {
                        fg.AppendItem(Restoration, "Restoration");
                    }
                    if (printMask?.Acrobatics ?? true)
                    {
                        fg.AppendItem(Acrobatics, "Acrobatics");
                    }
                    if (printMask?.LightArmor ?? true)
                    {
                        fg.AppendItem(LightArmor, "LightArmor");
                    }
                    if (printMask?.Marksman ?? true)
                    {
                        fg.AppendItem(Marksman, "Marksman");
                    }
                    if (printMask?.Mercantile ?? true)
                    {
                        fg.AppendItem(Mercantile, "Mercantile");
                    }
                    if (printMask?.Security ?? true)
                    {
                        fg.AppendItem(Security, "Security");
                    }
                    if (printMask?.Sneak ?? true)
                    {
                        fg.AppendItem(Sneak, "Sneak");
                    }
                    if (printMask?.Speechcraft ?? true)
                    {
                        fg.AppendItem(Speechcraft, "Speechcraft");
                    }
                    if (printMask?.Health ?? true)
                    {
                        fg.AppendItem(Health, "Health");
                    }
                    if (printMask?.Strength ?? true)
                    {
                        fg.AppendItem(Strength, "Strength");
                    }
                    if (printMask?.Intelligence ?? true)
                    {
                        fg.AppendItem(Intelligence, "Intelligence");
                    }
                    if (printMask?.Willpower ?? true)
                    {
                        fg.AppendItem(Willpower, "Willpower");
                    }
                    if (printMask?.Agility ?? true)
                    {
                        fg.AppendItem(Agility, "Agility");
                    }
                    if (printMask?.Speed ?? true)
                    {
                        fg.AppendItem(Speed, "Speed");
                    }
                    if (printMask?.Endurance ?? true)
                    {
                        fg.AppendItem(Endurance, "Endurance");
                    }
                    if (printMask?.Personality ?? true)
                    {
                        fg.AppendItem(Personality, "Personality");
                    }
                    if (printMask?.Luck ?? true)
                    {
                        fg.AppendItem(Luck, "Luck");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Armorer;
            public Exception? Athletics;
            public Exception? Blade;
            public Exception? Block;
            public Exception? Blunt;
            public Exception? HandToHand;
            public Exception? HeavyArmor;
            public Exception? Alchemy;
            public Exception? Alteration;
            public Exception? Conjuration;
            public Exception? Destruction;
            public Exception? Illusion;
            public Exception? Mysticism;
            public Exception? Restoration;
            public Exception? Acrobatics;
            public Exception? LightArmor;
            public Exception? Marksman;
            public Exception? Mercantile;
            public Exception? Security;
            public Exception? Sneak;
            public Exception? Speechcraft;
            public Exception? Health;
            public Exception? Strength;
            public Exception? Intelligence;
            public Exception? Willpower;
            public Exception? Agility;
            public Exception? Speed;
            public Exception? Endurance;
            public Exception? Personality;
            public Exception? Luck;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                NpcData_FieldIndex enu = (NpcData_FieldIndex)index;
                switch (enu)
                {
                    case NpcData_FieldIndex.Armorer:
                        return Armorer;
                    case NpcData_FieldIndex.Athletics:
                        return Athletics;
                    case NpcData_FieldIndex.Blade:
                        return Blade;
                    case NpcData_FieldIndex.Block:
                        return Block;
                    case NpcData_FieldIndex.Blunt:
                        return Blunt;
                    case NpcData_FieldIndex.HandToHand:
                        return HandToHand;
                    case NpcData_FieldIndex.HeavyArmor:
                        return HeavyArmor;
                    case NpcData_FieldIndex.Alchemy:
                        return Alchemy;
                    case NpcData_FieldIndex.Alteration:
                        return Alteration;
                    case NpcData_FieldIndex.Conjuration:
                        return Conjuration;
                    case NpcData_FieldIndex.Destruction:
                        return Destruction;
                    case NpcData_FieldIndex.Illusion:
                        return Illusion;
                    case NpcData_FieldIndex.Mysticism:
                        return Mysticism;
                    case NpcData_FieldIndex.Restoration:
                        return Restoration;
                    case NpcData_FieldIndex.Acrobatics:
                        return Acrobatics;
                    case NpcData_FieldIndex.LightArmor:
                        return LightArmor;
                    case NpcData_FieldIndex.Marksman:
                        return Marksman;
                    case NpcData_FieldIndex.Mercantile:
                        return Mercantile;
                    case NpcData_FieldIndex.Security:
                        return Security;
                    case NpcData_FieldIndex.Sneak:
                        return Sneak;
                    case NpcData_FieldIndex.Speechcraft:
                        return Speechcraft;
                    case NpcData_FieldIndex.Health:
                        return Health;
                    case NpcData_FieldIndex.Strength:
                        return Strength;
                    case NpcData_FieldIndex.Intelligence:
                        return Intelligence;
                    case NpcData_FieldIndex.Willpower:
                        return Willpower;
                    case NpcData_FieldIndex.Agility:
                        return Agility;
                    case NpcData_FieldIndex.Speed:
                        return Speed;
                    case NpcData_FieldIndex.Endurance:
                        return Endurance;
                    case NpcData_FieldIndex.Personality:
                        return Personality;
                    case NpcData_FieldIndex.Luck:
                        return Luck;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                NpcData_FieldIndex enu = (NpcData_FieldIndex)index;
                switch (enu)
                {
                    case NpcData_FieldIndex.Armorer:
                        this.Armorer = ex;
                        break;
                    case NpcData_FieldIndex.Athletics:
                        this.Athletics = ex;
                        break;
                    case NpcData_FieldIndex.Blade:
                        this.Blade = ex;
                        break;
                    case NpcData_FieldIndex.Block:
                        this.Block = ex;
                        break;
                    case NpcData_FieldIndex.Blunt:
                        this.Blunt = ex;
                        break;
                    case NpcData_FieldIndex.HandToHand:
                        this.HandToHand = ex;
                        break;
                    case NpcData_FieldIndex.HeavyArmor:
                        this.HeavyArmor = ex;
                        break;
                    case NpcData_FieldIndex.Alchemy:
                        this.Alchemy = ex;
                        break;
                    case NpcData_FieldIndex.Alteration:
                        this.Alteration = ex;
                        break;
                    case NpcData_FieldIndex.Conjuration:
                        this.Conjuration = ex;
                        break;
                    case NpcData_FieldIndex.Destruction:
                        this.Destruction = ex;
                        break;
                    case NpcData_FieldIndex.Illusion:
                        this.Illusion = ex;
                        break;
                    case NpcData_FieldIndex.Mysticism:
                        this.Mysticism = ex;
                        break;
                    case NpcData_FieldIndex.Restoration:
                        this.Restoration = ex;
                        break;
                    case NpcData_FieldIndex.Acrobatics:
                        this.Acrobatics = ex;
                        break;
                    case NpcData_FieldIndex.LightArmor:
                        this.LightArmor = ex;
                        break;
                    case NpcData_FieldIndex.Marksman:
                        this.Marksman = ex;
                        break;
                    case NpcData_FieldIndex.Mercantile:
                        this.Mercantile = ex;
                        break;
                    case NpcData_FieldIndex.Security:
                        this.Security = ex;
                        break;
                    case NpcData_FieldIndex.Sneak:
                        this.Sneak = ex;
                        break;
                    case NpcData_FieldIndex.Speechcraft:
                        this.Speechcraft = ex;
                        break;
                    case NpcData_FieldIndex.Health:
                        this.Health = ex;
                        break;
                    case NpcData_FieldIndex.Strength:
                        this.Strength = ex;
                        break;
                    case NpcData_FieldIndex.Intelligence:
                        this.Intelligence = ex;
                        break;
                    case NpcData_FieldIndex.Willpower:
                        this.Willpower = ex;
                        break;
                    case NpcData_FieldIndex.Agility:
                        this.Agility = ex;
                        break;
                    case NpcData_FieldIndex.Speed:
                        this.Speed = ex;
                        break;
                    case NpcData_FieldIndex.Endurance:
                        this.Endurance = ex;
                        break;
                    case NpcData_FieldIndex.Personality:
                        this.Personality = ex;
                        break;
                    case NpcData_FieldIndex.Luck:
                        this.Luck = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                NpcData_FieldIndex enu = (NpcData_FieldIndex)index;
                switch (enu)
                {
                    case NpcData_FieldIndex.Armorer:
                        this.Armorer = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.Athletics:
                        this.Athletics = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.Blade:
                        this.Blade = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.Block:
                        this.Block = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.Blunt:
                        this.Blunt = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.HandToHand:
                        this.HandToHand = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.HeavyArmor:
                        this.HeavyArmor = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.Alchemy:
                        this.Alchemy = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.Alteration:
                        this.Alteration = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.Conjuration:
                        this.Conjuration = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.Destruction:
                        this.Destruction = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.Illusion:
                        this.Illusion = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.Mysticism:
                        this.Mysticism = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.Restoration:
                        this.Restoration = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.Acrobatics:
                        this.Acrobatics = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.LightArmor:
                        this.LightArmor = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.Marksman:
                        this.Marksman = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.Mercantile:
                        this.Mercantile = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.Security:
                        this.Security = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.Sneak:
                        this.Sneak = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.Speechcraft:
                        this.Speechcraft = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.Health:
                        this.Health = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.Strength:
                        this.Strength = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.Intelligence:
                        this.Intelligence = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.Willpower:
                        this.Willpower = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.Agility:
                        this.Agility = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.Speed:
                        this.Speed = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.Endurance:
                        this.Endurance = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.Personality:
                        this.Personality = (Exception?)obj;
                        break;
                    case NpcData_FieldIndex.Luck:
                        this.Luck = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Armorer != null) return true;
                if (Athletics != null) return true;
                if (Blade != null) return true;
                if (Block != null) return true;
                if (Blunt != null) return true;
                if (HandToHand != null) return true;
                if (HeavyArmor != null) return true;
                if (Alchemy != null) return true;
                if (Alteration != null) return true;
                if (Conjuration != null) return true;
                if (Destruction != null) return true;
                if (Illusion != null) return true;
                if (Mysticism != null) return true;
                if (Restoration != null) return true;
                if (Acrobatics != null) return true;
                if (LightArmor != null) return true;
                if (Marksman != null) return true;
                if (Mercantile != null) return true;
                if (Security != null) return true;
                if (Sneak != null) return true;
                if (Speechcraft != null) return true;
                if (Health != null) return true;
                if (Strength != null) return true;
                if (Intelligence != null) return true;
                if (Willpower != null) return true;
                if (Agility != null) return true;
                if (Speed != null) return true;
                if (Endurance != null) return true;
                if (Personality != null) return true;
                if (Luck != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Armorer, "Armorer");
                fg.AppendItem(Athletics, "Athletics");
                fg.AppendItem(Blade, "Blade");
                fg.AppendItem(Block, "Block");
                fg.AppendItem(Blunt, "Blunt");
                fg.AppendItem(HandToHand, "HandToHand");
                fg.AppendItem(HeavyArmor, "HeavyArmor");
                fg.AppendItem(Alchemy, "Alchemy");
                fg.AppendItem(Alteration, "Alteration");
                fg.AppendItem(Conjuration, "Conjuration");
                fg.AppendItem(Destruction, "Destruction");
                fg.AppendItem(Illusion, "Illusion");
                fg.AppendItem(Mysticism, "Mysticism");
                fg.AppendItem(Restoration, "Restoration");
                fg.AppendItem(Acrobatics, "Acrobatics");
                fg.AppendItem(LightArmor, "LightArmor");
                fg.AppendItem(Marksman, "Marksman");
                fg.AppendItem(Mercantile, "Mercantile");
                fg.AppendItem(Security, "Security");
                fg.AppendItem(Sneak, "Sneak");
                fg.AppendItem(Speechcraft, "Speechcraft");
                fg.AppendItem(Health, "Health");
                fg.AppendItem(Strength, "Strength");
                fg.AppendItem(Intelligence, "Intelligence");
                fg.AppendItem(Willpower, "Willpower");
                fg.AppendItem(Agility, "Agility");
                fg.AppendItem(Speed, "Speed");
                fg.AppendItem(Endurance, "Endurance");
                fg.AppendItem(Personality, "Personality");
                fg.AppendItem(Luck, "Luck");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Armorer = this.Armorer.Combine(rhs.Armorer);
                ret.Athletics = this.Athletics.Combine(rhs.Athletics);
                ret.Blade = this.Blade.Combine(rhs.Blade);
                ret.Block = this.Block.Combine(rhs.Block);
                ret.Blunt = this.Blunt.Combine(rhs.Blunt);
                ret.HandToHand = this.HandToHand.Combine(rhs.HandToHand);
                ret.HeavyArmor = this.HeavyArmor.Combine(rhs.HeavyArmor);
                ret.Alchemy = this.Alchemy.Combine(rhs.Alchemy);
                ret.Alteration = this.Alteration.Combine(rhs.Alteration);
                ret.Conjuration = this.Conjuration.Combine(rhs.Conjuration);
                ret.Destruction = this.Destruction.Combine(rhs.Destruction);
                ret.Illusion = this.Illusion.Combine(rhs.Illusion);
                ret.Mysticism = this.Mysticism.Combine(rhs.Mysticism);
                ret.Restoration = this.Restoration.Combine(rhs.Restoration);
                ret.Acrobatics = this.Acrobatics.Combine(rhs.Acrobatics);
                ret.LightArmor = this.LightArmor.Combine(rhs.LightArmor);
                ret.Marksman = this.Marksman.Combine(rhs.Marksman);
                ret.Mercantile = this.Mercantile.Combine(rhs.Mercantile);
                ret.Security = this.Security.Combine(rhs.Security);
                ret.Sneak = this.Sneak.Combine(rhs.Sneak);
                ret.Speechcraft = this.Speechcraft.Combine(rhs.Speechcraft);
                ret.Health = this.Health.Combine(rhs.Health);
                ret.Strength = this.Strength.Combine(rhs.Strength);
                ret.Intelligence = this.Intelligence.Combine(rhs.Intelligence);
                ret.Willpower = this.Willpower.Combine(rhs.Willpower);
                ret.Agility = this.Agility.Combine(rhs.Agility);
                ret.Speed = this.Speed.Combine(rhs.Speed);
                ret.Endurance = this.Endurance.Combine(rhs.Endurance);
                ret.Personality = this.Personality.Combine(rhs.Personality);
                ret.Luck = this.Luck.Combine(rhs.Luck);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Armorer;
            public bool Athletics;
            public bool Blade;
            public bool Block;
            public bool Blunt;
            public bool HandToHand;
            public bool HeavyArmor;
            public bool Alchemy;
            public bool Alteration;
            public bool Conjuration;
            public bool Destruction;
            public bool Illusion;
            public bool Mysticism;
            public bool Restoration;
            public bool Acrobatics;
            public bool LightArmor;
            public bool Marksman;
            public bool Mercantile;
            public bool Security;
            public bool Sneak;
            public bool Speechcraft;
            public bool Health;
            public bool Strength;
            public bool Intelligence;
            public bool Willpower;
            public bool Agility;
            public bool Speed;
            public bool Endurance;
            public bool Personality;
            public bool Luck;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Armorer = defaultOn;
                this.Athletics = defaultOn;
                this.Blade = defaultOn;
                this.Block = defaultOn;
                this.Blunt = defaultOn;
                this.HandToHand = defaultOn;
                this.HeavyArmor = defaultOn;
                this.Alchemy = defaultOn;
                this.Alteration = defaultOn;
                this.Conjuration = defaultOn;
                this.Destruction = defaultOn;
                this.Illusion = defaultOn;
                this.Mysticism = defaultOn;
                this.Restoration = defaultOn;
                this.Acrobatics = defaultOn;
                this.LightArmor = defaultOn;
                this.Marksman = defaultOn;
                this.Mercantile = defaultOn;
                this.Security = defaultOn;
                this.Sneak = defaultOn;
                this.Speechcraft = defaultOn;
                this.Health = defaultOn;
                this.Strength = defaultOn;
                this.Intelligence = defaultOn;
                this.Willpower = defaultOn;
                this.Agility = defaultOn;
                this.Speed = defaultOn;
                this.Endurance = defaultOn;
                this.Personality = defaultOn;
                this.Luck = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Armorer, null));
                ret.Add((Athletics, null));
                ret.Add((Blade, null));
                ret.Add((Block, null));
                ret.Add((Blunt, null));
                ret.Add((HandToHand, null));
                ret.Add((HeavyArmor, null));
                ret.Add((Alchemy, null));
                ret.Add((Alteration, null));
                ret.Add((Conjuration, null));
                ret.Add((Destruction, null));
                ret.Add((Illusion, null));
                ret.Add((Mysticism, null));
                ret.Add((Restoration, null));
                ret.Add((Acrobatics, null));
                ret.Add((LightArmor, null));
                ret.Add((Marksman, null));
                ret.Add((Mercantile, null));
                ret.Add((Security, null));
                ret.Add((Sneak, null));
                ret.Add((Speechcraft, null));
                ret.Add((Health, null));
                ret.Add((Strength, null));
                ret.Add((Intelligence, null));
                ret.Add((Willpower, null));
                ret.Add((Agility, null));
                ret.Add((Speed, null));
                ret.Add((Endurance, null));
                ret.Add((Personality, null));
                ret.Add((Luck, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = NpcData_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NpcDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((NpcDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static NpcData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new NpcData();
            ((NpcDataSetterCommon)((INpcDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out NpcData item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((NpcDataSetterCommon)((INpcDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static NpcData GetNew()
        {
            return new NpcData();
        }

    }
    #endregion

    #region Interface
    public partial interface INpcData :
        ILoquiObjectSetter<INpcData>,
        INpcDataGetter
    {
        new Byte Armorer { get; set; }
        new Byte Athletics { get; set; }
        new Byte Blade { get; set; }
        new Byte Block { get; set; }
        new Byte Blunt { get; set; }
        new Byte HandToHand { get; set; }
        new Byte HeavyArmor { get; set; }
        new Byte Alchemy { get; set; }
        new Byte Alteration { get; set; }
        new Byte Conjuration { get; set; }
        new Byte Destruction { get; set; }
        new Byte Illusion { get; set; }
        new Byte Mysticism { get; set; }
        new Byte Restoration { get; set; }
        new Byte Acrobatics { get; set; }
        new Byte LightArmor { get; set; }
        new Byte Marksman { get; set; }
        new Byte Mercantile { get; set; }
        new Byte Security { get; set; }
        new Byte Sneak { get; set; }
        new Byte Speechcraft { get; set; }
        new UInt32 Health { get; set; }
        new Byte Strength { get; set; }
        new Byte Intelligence { get; set; }
        new Byte Willpower { get; set; }
        new Byte Agility { get; set; }
        new Byte Speed { get; set; }
        new Byte Endurance { get; set; }
        new Byte Personality { get; set; }
        new Byte Luck { get; set; }
    }

    public partial interface INpcDataGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<INpcDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => NpcData_Registration.Instance;
        Byte Armorer { get; }
        Byte Athletics { get; }
        Byte Blade { get; }
        Byte Block { get; }
        Byte Blunt { get; }
        Byte HandToHand { get; }
        Byte HeavyArmor { get; }
        Byte Alchemy { get; }
        Byte Alteration { get; }
        Byte Conjuration { get; }
        Byte Destruction { get; }
        Byte Illusion { get; }
        Byte Mysticism { get; }
        Byte Restoration { get; }
        Byte Acrobatics { get; }
        Byte LightArmor { get; }
        Byte Marksman { get; }
        Byte Mercantile { get; }
        Byte Security { get; }
        Byte Sneak { get; }
        Byte Speechcraft { get; }
        UInt32 Health { get; }
        Byte Strength { get; }
        Byte Intelligence { get; }
        Byte Willpower { get; }
        Byte Agility { get; }
        Byte Speed { get; }
        Byte Endurance { get; }
        Byte Personality { get; }
        Byte Luck { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class NpcDataMixIn
    {
        public static void Clear(this INpcData item)
        {
            ((NpcDataSetterCommon)((INpcDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static NpcData.Mask<bool> GetEqualsMask(
            this INpcDataGetter item,
            INpcDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NpcDataCommon)((INpcDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this INpcDataGetter item,
            string? name = null,
            NpcData.Mask<bool>? printMask = null)
        {
            return ((NpcDataCommon)((INpcDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this INpcDataGetter item,
            FileGeneration fg,
            string? name = null,
            NpcData.Mask<bool>? printMask = null)
        {
            ((NpcDataCommon)((INpcDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INpcDataGetter item,
            INpcDataGetter rhs,
            NpcData.TranslationMask? equalsMask = null)
        {
            return ((NpcDataCommon)((INpcDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this INpcData lhs,
            INpcDataGetter rhs)
        {
            ((NpcDataSetterTranslationCommon)((INpcDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INpcData lhs,
            INpcDataGetter rhs,
            NpcData.TranslationMask? copyMask = null)
        {
            ((NpcDataSetterTranslationCommon)((INpcDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INpcData lhs,
            INpcDataGetter rhs,
            out NpcData.ErrorMask errorMask,
            NpcData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NpcDataSetterTranslationCommon)((INpcDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = NpcData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INpcData lhs,
            INpcDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NpcDataSetterTranslationCommon)((INpcDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static NpcData DeepCopy(
            this INpcDataGetter item,
            NpcData.TranslationMask? copyMask = null)
        {
            return ((NpcDataSetterTranslationCommon)((INpcDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NpcData DeepCopy(
            this INpcDataGetter item,
            out NpcData.ErrorMask errorMask,
            NpcData.TranslationMask? copyMask = null)
        {
            return ((NpcDataSetterTranslationCommon)((INpcDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NpcData DeepCopy(
            this INpcDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NpcDataSetterTranslationCommon)((INpcDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this INpcData item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((NpcDataSetterCommon)((INpcDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum NpcData_FieldIndex
    {
        Armorer = 0,
        Athletics = 1,
        Blade = 2,
        Block = 3,
        Blunt = 4,
        HandToHand = 5,
        HeavyArmor = 6,
        Alchemy = 7,
        Alteration = 8,
        Conjuration = 9,
        Destruction = 10,
        Illusion = 11,
        Mysticism = 12,
        Restoration = 13,
        Acrobatics = 14,
        LightArmor = 15,
        Marksman = 16,
        Mercantile = 17,
        Security = 18,
        Sneak = 19,
        Speechcraft = 20,
        Health = 21,
        Strength = 22,
        Intelligence = 23,
        Willpower = 24,
        Agility = 25,
        Speed = 26,
        Endurance = 27,
        Personality = 28,
        Luck = 29,
    }
    #endregion

    #region Registration
    public partial class NpcData_Registration : ILoquiRegistration
    {
        public static readonly NpcData_Registration Instance = new NpcData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 200,
            version: 0);

        public const string GUID = "6ec3a936-c2df-43d5-a3a1-641ca180cdaa";

        public const ushort AdditionalFieldCount = 30;

        public const ushort FieldCount = 30;

        public static readonly Type MaskType = typeof(NpcData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(NpcData.ErrorMask);

        public static readonly Type ClassType = typeof(NpcData);

        public static readonly Type GetterType = typeof(INpcDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INpcData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.NpcData";

        public const string Name = "NpcData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.DATA;
        public static readonly Type BinaryWriteTranslation = typeof(NpcDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class NpcDataSetterCommon
    {
        public static readonly NpcDataSetterCommon Instance = new NpcDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(INpcData item)
        {
            ClearPartial();
            item.Armorer = default;
            item.Athletics = default;
            item.Blade = default;
            item.Block = default;
            item.Blunt = default;
            item.HandToHand = default;
            item.HeavyArmor = default;
            item.Alchemy = default;
            item.Alteration = default;
            item.Conjuration = default;
            item.Destruction = default;
            item.Illusion = default;
            item.Mysticism = default;
            item.Restoration = default;
            item.Acrobatics = default;
            item.LightArmor = default;
            item.Marksman = default;
            item.Mercantile = default;
            item.Security = default;
            item.Sneak = default;
            item.Speechcraft = default;
            item.Health = default;
            item.Strength = default;
            item.Intelligence = default;
            item.Willpower = default;
            item.Agility = default;
            item.Speed = default;
            item.Endurance = default;
            item.Personality = default;
            item.Luck = default;
        }
        
        #region Mutagen
        public void RemapLinks(INpcData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INpcData item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.DATA),
                translationParams?.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: NpcDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class NpcDataCommon
    {
        public static readonly NpcDataCommon Instance = new NpcDataCommon();

        public NpcData.Mask<bool> GetEqualsMask(
            INpcDataGetter item,
            INpcDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NpcData.Mask<bool>(false);
            ((NpcDataCommon)((INpcDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INpcDataGetter item,
            INpcDataGetter rhs,
            NpcData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Armorer = item.Armorer == rhs.Armorer;
            ret.Athletics = item.Athletics == rhs.Athletics;
            ret.Blade = item.Blade == rhs.Blade;
            ret.Block = item.Block == rhs.Block;
            ret.Blunt = item.Blunt == rhs.Blunt;
            ret.HandToHand = item.HandToHand == rhs.HandToHand;
            ret.HeavyArmor = item.HeavyArmor == rhs.HeavyArmor;
            ret.Alchemy = item.Alchemy == rhs.Alchemy;
            ret.Alteration = item.Alteration == rhs.Alteration;
            ret.Conjuration = item.Conjuration == rhs.Conjuration;
            ret.Destruction = item.Destruction == rhs.Destruction;
            ret.Illusion = item.Illusion == rhs.Illusion;
            ret.Mysticism = item.Mysticism == rhs.Mysticism;
            ret.Restoration = item.Restoration == rhs.Restoration;
            ret.Acrobatics = item.Acrobatics == rhs.Acrobatics;
            ret.LightArmor = item.LightArmor == rhs.LightArmor;
            ret.Marksman = item.Marksman == rhs.Marksman;
            ret.Mercantile = item.Mercantile == rhs.Mercantile;
            ret.Security = item.Security == rhs.Security;
            ret.Sneak = item.Sneak == rhs.Sneak;
            ret.Speechcraft = item.Speechcraft == rhs.Speechcraft;
            ret.Health = item.Health == rhs.Health;
            ret.Strength = item.Strength == rhs.Strength;
            ret.Intelligence = item.Intelligence == rhs.Intelligence;
            ret.Willpower = item.Willpower == rhs.Willpower;
            ret.Agility = item.Agility == rhs.Agility;
            ret.Speed = item.Speed == rhs.Speed;
            ret.Endurance = item.Endurance == rhs.Endurance;
            ret.Personality = item.Personality == rhs.Personality;
            ret.Luck = item.Luck == rhs.Luck;
        }
        
        public string ToString(
            INpcDataGetter item,
            string? name = null,
            NpcData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            INpcDataGetter item,
            FileGeneration fg,
            string? name = null,
            NpcData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"NpcData =>");
            }
            else
            {
                fg.AppendLine($"{name} (NpcData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            INpcDataGetter item,
            FileGeneration fg,
            NpcData.Mask<bool>? printMask = null)
        {
            if (printMask?.Armorer ?? true)
            {
                fg.AppendItem(item.Armorer, "Armorer");
            }
            if (printMask?.Athletics ?? true)
            {
                fg.AppendItem(item.Athletics, "Athletics");
            }
            if (printMask?.Blade ?? true)
            {
                fg.AppendItem(item.Blade, "Blade");
            }
            if (printMask?.Block ?? true)
            {
                fg.AppendItem(item.Block, "Block");
            }
            if (printMask?.Blunt ?? true)
            {
                fg.AppendItem(item.Blunt, "Blunt");
            }
            if (printMask?.HandToHand ?? true)
            {
                fg.AppendItem(item.HandToHand, "HandToHand");
            }
            if (printMask?.HeavyArmor ?? true)
            {
                fg.AppendItem(item.HeavyArmor, "HeavyArmor");
            }
            if (printMask?.Alchemy ?? true)
            {
                fg.AppendItem(item.Alchemy, "Alchemy");
            }
            if (printMask?.Alteration ?? true)
            {
                fg.AppendItem(item.Alteration, "Alteration");
            }
            if (printMask?.Conjuration ?? true)
            {
                fg.AppendItem(item.Conjuration, "Conjuration");
            }
            if (printMask?.Destruction ?? true)
            {
                fg.AppendItem(item.Destruction, "Destruction");
            }
            if (printMask?.Illusion ?? true)
            {
                fg.AppendItem(item.Illusion, "Illusion");
            }
            if (printMask?.Mysticism ?? true)
            {
                fg.AppendItem(item.Mysticism, "Mysticism");
            }
            if (printMask?.Restoration ?? true)
            {
                fg.AppendItem(item.Restoration, "Restoration");
            }
            if (printMask?.Acrobatics ?? true)
            {
                fg.AppendItem(item.Acrobatics, "Acrobatics");
            }
            if (printMask?.LightArmor ?? true)
            {
                fg.AppendItem(item.LightArmor, "LightArmor");
            }
            if (printMask?.Marksman ?? true)
            {
                fg.AppendItem(item.Marksman, "Marksman");
            }
            if (printMask?.Mercantile ?? true)
            {
                fg.AppendItem(item.Mercantile, "Mercantile");
            }
            if (printMask?.Security ?? true)
            {
                fg.AppendItem(item.Security, "Security");
            }
            if (printMask?.Sneak ?? true)
            {
                fg.AppendItem(item.Sneak, "Sneak");
            }
            if (printMask?.Speechcraft ?? true)
            {
                fg.AppendItem(item.Speechcraft, "Speechcraft");
            }
            if (printMask?.Health ?? true)
            {
                fg.AppendItem(item.Health, "Health");
            }
            if (printMask?.Strength ?? true)
            {
                fg.AppendItem(item.Strength, "Strength");
            }
            if (printMask?.Intelligence ?? true)
            {
                fg.AppendItem(item.Intelligence, "Intelligence");
            }
            if (printMask?.Willpower ?? true)
            {
                fg.AppendItem(item.Willpower, "Willpower");
            }
            if (printMask?.Agility ?? true)
            {
                fg.AppendItem(item.Agility, "Agility");
            }
            if (printMask?.Speed ?? true)
            {
                fg.AppendItem(item.Speed, "Speed");
            }
            if (printMask?.Endurance ?? true)
            {
                fg.AppendItem(item.Endurance, "Endurance");
            }
            if (printMask?.Personality ?? true)
            {
                fg.AppendItem(item.Personality, "Personality");
            }
            if (printMask?.Luck ?? true)
            {
                fg.AppendItem(item.Luck, "Luck");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INpcDataGetter? lhs,
            INpcDataGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.Armorer) ?? true))
            {
                if (lhs.Armorer != rhs.Armorer) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.Athletics) ?? true))
            {
                if (lhs.Athletics != rhs.Athletics) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.Blade) ?? true))
            {
                if (lhs.Blade != rhs.Blade) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.Block) ?? true))
            {
                if (lhs.Block != rhs.Block) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.Blunt) ?? true))
            {
                if (lhs.Blunt != rhs.Blunt) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.HandToHand) ?? true))
            {
                if (lhs.HandToHand != rhs.HandToHand) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.HeavyArmor) ?? true))
            {
                if (lhs.HeavyArmor != rhs.HeavyArmor) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.Alchemy) ?? true))
            {
                if (lhs.Alchemy != rhs.Alchemy) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.Alteration) ?? true))
            {
                if (lhs.Alteration != rhs.Alteration) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.Conjuration) ?? true))
            {
                if (lhs.Conjuration != rhs.Conjuration) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.Destruction) ?? true))
            {
                if (lhs.Destruction != rhs.Destruction) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.Illusion) ?? true))
            {
                if (lhs.Illusion != rhs.Illusion) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.Mysticism) ?? true))
            {
                if (lhs.Mysticism != rhs.Mysticism) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.Restoration) ?? true))
            {
                if (lhs.Restoration != rhs.Restoration) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.Acrobatics) ?? true))
            {
                if (lhs.Acrobatics != rhs.Acrobatics) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.LightArmor) ?? true))
            {
                if (lhs.LightArmor != rhs.LightArmor) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.Marksman) ?? true))
            {
                if (lhs.Marksman != rhs.Marksman) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.Mercantile) ?? true))
            {
                if (lhs.Mercantile != rhs.Mercantile) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.Security) ?? true))
            {
                if (lhs.Security != rhs.Security) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.Sneak) ?? true))
            {
                if (lhs.Sneak != rhs.Sneak) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.Speechcraft) ?? true))
            {
                if (lhs.Speechcraft != rhs.Speechcraft) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.Health) ?? true))
            {
                if (lhs.Health != rhs.Health) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.Strength) ?? true))
            {
                if (lhs.Strength != rhs.Strength) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.Intelligence) ?? true))
            {
                if (lhs.Intelligence != rhs.Intelligence) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.Willpower) ?? true))
            {
                if (lhs.Willpower != rhs.Willpower) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.Agility) ?? true))
            {
                if (lhs.Agility != rhs.Agility) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.Speed) ?? true))
            {
                if (lhs.Speed != rhs.Speed) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.Endurance) ?? true))
            {
                if (lhs.Endurance != rhs.Endurance) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.Personality) ?? true))
            {
                if (lhs.Personality != rhs.Personality) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NpcData_FieldIndex.Luck) ?? true))
            {
                if (lhs.Luck != rhs.Luck) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(INpcDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Armorer);
            hash.Add(item.Athletics);
            hash.Add(item.Blade);
            hash.Add(item.Block);
            hash.Add(item.Blunt);
            hash.Add(item.HandToHand);
            hash.Add(item.HeavyArmor);
            hash.Add(item.Alchemy);
            hash.Add(item.Alteration);
            hash.Add(item.Conjuration);
            hash.Add(item.Destruction);
            hash.Add(item.Illusion);
            hash.Add(item.Mysticism);
            hash.Add(item.Restoration);
            hash.Add(item.Acrobatics);
            hash.Add(item.LightArmor);
            hash.Add(item.Marksman);
            hash.Add(item.Mercantile);
            hash.Add(item.Security);
            hash.Add(item.Sneak);
            hash.Add(item.Speechcraft);
            hash.Add(item.Health);
            hash.Add(item.Strength);
            hash.Add(item.Intelligence);
            hash.Add(item.Willpower);
            hash.Add(item.Agility);
            hash.Add(item.Speed);
            hash.Add(item.Endurance);
            hash.Add(item.Personality);
            hash.Add(item.Luck);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return NpcData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(INpcDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class NpcDataSetterTranslationCommon
    {
        public static readonly NpcDataSetterTranslationCommon Instance = new NpcDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            INpcData item,
            INpcDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.Armorer) ?? true))
            {
                item.Armorer = rhs.Armorer;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.Athletics) ?? true))
            {
                item.Athletics = rhs.Athletics;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.Blade) ?? true))
            {
                item.Blade = rhs.Blade;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.Block) ?? true))
            {
                item.Block = rhs.Block;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.Blunt) ?? true))
            {
                item.Blunt = rhs.Blunt;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.HandToHand) ?? true))
            {
                item.HandToHand = rhs.HandToHand;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.HeavyArmor) ?? true))
            {
                item.HeavyArmor = rhs.HeavyArmor;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.Alchemy) ?? true))
            {
                item.Alchemy = rhs.Alchemy;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.Alteration) ?? true))
            {
                item.Alteration = rhs.Alteration;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.Conjuration) ?? true))
            {
                item.Conjuration = rhs.Conjuration;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.Destruction) ?? true))
            {
                item.Destruction = rhs.Destruction;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.Illusion) ?? true))
            {
                item.Illusion = rhs.Illusion;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.Mysticism) ?? true))
            {
                item.Mysticism = rhs.Mysticism;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.Restoration) ?? true))
            {
                item.Restoration = rhs.Restoration;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.Acrobatics) ?? true))
            {
                item.Acrobatics = rhs.Acrobatics;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.LightArmor) ?? true))
            {
                item.LightArmor = rhs.LightArmor;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.Marksman) ?? true))
            {
                item.Marksman = rhs.Marksman;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.Mercantile) ?? true))
            {
                item.Mercantile = rhs.Mercantile;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.Security) ?? true))
            {
                item.Security = rhs.Security;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.Sneak) ?? true))
            {
                item.Sneak = rhs.Sneak;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.Speechcraft) ?? true))
            {
                item.Speechcraft = rhs.Speechcraft;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.Health) ?? true))
            {
                item.Health = rhs.Health;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.Strength) ?? true))
            {
                item.Strength = rhs.Strength;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.Intelligence) ?? true))
            {
                item.Intelligence = rhs.Intelligence;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.Willpower) ?? true))
            {
                item.Willpower = rhs.Willpower;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.Agility) ?? true))
            {
                item.Agility = rhs.Agility;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.Speed) ?? true))
            {
                item.Speed = rhs.Speed;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.Endurance) ?? true))
            {
                item.Endurance = rhs.Endurance;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.Personality) ?? true))
            {
                item.Personality = rhs.Personality;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcData_FieldIndex.Luck) ?? true))
            {
                item.Luck = rhs.Luck;
            }
        }
        
        #endregion
        
        public NpcData DeepCopy(
            INpcDataGetter item,
            NpcData.TranslationMask? copyMask = null)
        {
            NpcData ret = (NpcData)((NpcDataCommon)((INpcDataGetter)item).CommonInstance()!).GetNew();
            ((NpcDataSetterTranslationCommon)((INpcDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public NpcData DeepCopy(
            INpcDataGetter item,
            out NpcData.ErrorMask errorMask,
            NpcData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            NpcData ret = (NpcData)((NpcDataCommon)((INpcDataGetter)item).CommonInstance()!).GetNew();
            ((NpcDataSetterTranslationCommon)((INpcDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = NpcData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public NpcData DeepCopy(
            INpcDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            NpcData ret = (NpcData)((NpcDataCommon)((INpcDataGetter)item).CommonInstance()!).GetNew();
            ((NpcDataSetterTranslationCommon)((INpcDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class NpcData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NpcData_Registration.Instance;
        public static NpcData_Registration StaticRegistration => NpcData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NpcDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return NpcDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NpcDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INpcDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object INpcDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object INpcDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class NpcDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static NpcDataBinaryWriteTranslation Instance = new NpcDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            INpcDataGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Armorer);
            writer.Write(item.Athletics);
            writer.Write(item.Blade);
            writer.Write(item.Block);
            writer.Write(item.Blunt);
            writer.Write(item.HandToHand);
            writer.Write(item.HeavyArmor);
            writer.Write(item.Alchemy);
            writer.Write(item.Alteration);
            writer.Write(item.Conjuration);
            writer.Write(item.Destruction);
            writer.Write(item.Illusion);
            writer.Write(item.Mysticism);
            writer.Write(item.Restoration);
            writer.Write(item.Acrobatics);
            writer.Write(item.LightArmor);
            writer.Write(item.Marksman);
            writer.Write(item.Mercantile);
            writer.Write(item.Security);
            writer.Write(item.Sneak);
            writer.Write(item.Speechcraft);
            writer.Write(item.Health);
            writer.Write(item.Strength);
            writer.Write(item.Intelligence);
            writer.Write(item.Willpower);
            writer.Write(item.Agility);
            writer.Write(item.Speed);
            writer.Write(item.Endurance);
            writer.Write(item.Personality);
            writer.Write(item.Luck);
        }

        public void Write(
            MutagenWriter writer,
            INpcDataGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.DATA),
                overflowRecord: translationParams?.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (INpcDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class NpcDataBinaryCreateTranslation
    {
        public readonly static NpcDataBinaryCreateTranslation Instance = new NpcDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            INpcData item,
            MutagenFrame frame)
        {
            item.Armorer = frame.ReadUInt8();
            item.Athletics = frame.ReadUInt8();
            item.Blade = frame.ReadUInt8();
            item.Block = frame.ReadUInt8();
            item.Blunt = frame.ReadUInt8();
            item.HandToHand = frame.ReadUInt8();
            item.HeavyArmor = frame.ReadUInt8();
            item.Alchemy = frame.ReadUInt8();
            item.Alteration = frame.ReadUInt8();
            item.Conjuration = frame.ReadUInt8();
            item.Destruction = frame.ReadUInt8();
            item.Illusion = frame.ReadUInt8();
            item.Mysticism = frame.ReadUInt8();
            item.Restoration = frame.ReadUInt8();
            item.Acrobatics = frame.ReadUInt8();
            item.LightArmor = frame.ReadUInt8();
            item.Marksman = frame.ReadUInt8();
            item.Mercantile = frame.ReadUInt8();
            item.Security = frame.ReadUInt8();
            item.Sneak = frame.ReadUInt8();
            item.Speechcraft = frame.ReadUInt8();
            item.Health = frame.ReadUInt32();
            item.Strength = frame.ReadUInt8();
            item.Intelligence = frame.ReadUInt8();
            item.Willpower = frame.ReadUInt8();
            item.Agility = frame.ReadUInt8();
            item.Speed = frame.ReadUInt8();
            item.Endurance = frame.ReadUInt8();
            item.Personality = frame.ReadUInt8();
            item.Luck = frame.ReadUInt8();
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class NpcDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this INpcDataGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((NpcDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class NpcDataBinaryOverlay :
        PluginBinaryOverlay,
        INpcDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NpcData_Registration.Instance;
        public static NpcData_Registration StaticRegistration => NpcData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NpcDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NpcDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INpcDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? INpcDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object INpcDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NpcDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((NpcDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Byte Armorer => _data.Span[0x0];
        public Byte Athletics => _data.Span[0x1];
        public Byte Blade => _data.Span[0x2];
        public Byte Block => _data.Span[0x3];
        public Byte Blunt => _data.Span[0x4];
        public Byte HandToHand => _data.Span[0x5];
        public Byte HeavyArmor => _data.Span[0x6];
        public Byte Alchemy => _data.Span[0x7];
        public Byte Alteration => _data.Span[0x8];
        public Byte Conjuration => _data.Span[0x9];
        public Byte Destruction => _data.Span[0xA];
        public Byte Illusion => _data.Span[0xB];
        public Byte Mysticism => _data.Span[0xC];
        public Byte Restoration => _data.Span[0xD];
        public Byte Acrobatics => _data.Span[0xE];
        public Byte LightArmor => _data.Span[0xF];
        public Byte Marksman => _data.Span[0x10];
        public Byte Mercantile => _data.Span[0x11];
        public Byte Security => _data.Span[0x12];
        public Byte Sneak => _data.Span[0x13];
        public Byte Speechcraft => _data.Span[0x14];
        public UInt32 Health => BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(0x15, 0x4));
        public Byte Strength => _data.Span[0x19];
        public Byte Intelligence => _data.Span[0x1A];
        public Byte Willpower => _data.Span[0x1B];
        public Byte Agility => _data.Span[0x1C];
        public Byte Speed => _data.Span[0x1D];
        public Byte Endurance => _data.Span[0x1E];
        public Byte Personality => _data.Span[0x1F];
        public Byte Luck => _data.Span[0x20];
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NpcDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static NpcDataBinaryOverlay NpcDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new NpcDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants, parseParams),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0x21 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static NpcDataBinaryOverlay NpcDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return NpcDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            NpcDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INpcDataGetter rhs) return false;
            return ((NpcDataCommon)((INpcDataGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(INpcDataGetter? obj)
        {
            return ((NpcDataCommon)((INpcDataGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((NpcDataCommon)((INpcDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

