/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Oblivion.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class CreatureData :
        ICreatureData,
        IEquatable<ICreatureDataGetter>,
        ILoquiObjectSetter<CreatureData>
    {
        #region Ctor
        public CreatureData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Type
        public Creature.Types Type { get; set; } = default(Creature.Types);
        #endregion
        #region CombatSkill
        public Byte CombatSkill { get; set; } = default(Byte);
        #endregion
        #region MagicSkill
        public Byte MagicSkill { get; set; } = default(Byte);
        #endregion
        #region StealthSkill
        public Byte StealthSkill { get; set; } = default(Byte);
        #endregion
        #region SoulLevel
        public SoulLevel SoulLevel { get; set; } = default(SoulLevel);
        #endregion
        #region Health
        public UInt32 Health { get; set; } = default(UInt32);
        #endregion
        #region AttackDamage
        public UInt16 AttackDamage { get; set; } = default(UInt16);
        #endregion
        #region Strength
        public Byte Strength { get; set; } = default(Byte);
        #endregion
        #region Intelligence
        public Byte Intelligence { get; set; } = default(Byte);
        #endregion
        #region Willpower
        public Byte Willpower { get; set; } = default(Byte);
        #endregion
        #region Agility
        public Byte Agility { get; set; } = default(Byte);
        #endregion
        #region Speed
        public Byte Speed { get; set; } = default(Byte);
        #endregion
        #region Endurance
        public Byte Endurance { get; set; } = default(Byte);
        #endregion
        #region Personality
        public Byte Personality { get; set; } = default(Byte);
        #endregion
        #region Luck
        public Byte Luck { get; set; } = default(Byte);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CreatureDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICreatureDataGetter rhs) return false;
            return ((CreatureDataCommon)((ICreatureDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICreatureDataGetter? obj)
        {
            return ((CreatureDataCommon)((ICreatureDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CreatureDataCommon)((ICreatureDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Type = initialValue;
                this.CombatSkill = initialValue;
                this.MagicSkill = initialValue;
                this.StealthSkill = initialValue;
                this.SoulLevel = initialValue;
                this.Health = initialValue;
                this.AttackDamage = initialValue;
                this.Strength = initialValue;
                this.Intelligence = initialValue;
                this.Willpower = initialValue;
                this.Agility = initialValue;
                this.Speed = initialValue;
                this.Endurance = initialValue;
                this.Personality = initialValue;
                this.Luck = initialValue;
            }

            public Mask(
                TItem Type,
                TItem CombatSkill,
                TItem MagicSkill,
                TItem StealthSkill,
                TItem SoulLevel,
                TItem Health,
                TItem AttackDamage,
                TItem Strength,
                TItem Intelligence,
                TItem Willpower,
                TItem Agility,
                TItem Speed,
                TItem Endurance,
                TItem Personality,
                TItem Luck)
            {
                this.Type = Type;
                this.CombatSkill = CombatSkill;
                this.MagicSkill = MagicSkill;
                this.StealthSkill = StealthSkill;
                this.SoulLevel = SoulLevel;
                this.Health = Health;
                this.AttackDamage = AttackDamage;
                this.Strength = Strength;
                this.Intelligence = Intelligence;
                this.Willpower = Willpower;
                this.Agility = Agility;
                this.Speed = Speed;
                this.Endurance = Endurance;
                this.Personality = Personality;
                this.Luck = Luck;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Type;
            public TItem CombatSkill;
            public TItem MagicSkill;
            public TItem StealthSkill;
            public TItem SoulLevel;
            public TItem Health;
            public TItem AttackDamage;
            public TItem Strength;
            public TItem Intelligence;
            public TItem Willpower;
            public TItem Agility;
            public TItem Speed;
            public TItem Endurance;
            public TItem Personality;
            public TItem Luck;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.CombatSkill, rhs.CombatSkill)) return false;
                if (!object.Equals(this.MagicSkill, rhs.MagicSkill)) return false;
                if (!object.Equals(this.StealthSkill, rhs.StealthSkill)) return false;
                if (!object.Equals(this.SoulLevel, rhs.SoulLevel)) return false;
                if (!object.Equals(this.Health, rhs.Health)) return false;
                if (!object.Equals(this.AttackDamage, rhs.AttackDamage)) return false;
                if (!object.Equals(this.Strength, rhs.Strength)) return false;
                if (!object.Equals(this.Intelligence, rhs.Intelligence)) return false;
                if (!object.Equals(this.Willpower, rhs.Willpower)) return false;
                if (!object.Equals(this.Agility, rhs.Agility)) return false;
                if (!object.Equals(this.Speed, rhs.Speed)) return false;
                if (!object.Equals(this.Endurance, rhs.Endurance)) return false;
                if (!object.Equals(this.Personality, rhs.Personality)) return false;
                if (!object.Equals(this.Luck, rhs.Luck)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Type);
                hash.Add(this.CombatSkill);
                hash.Add(this.MagicSkill);
                hash.Add(this.StealthSkill);
                hash.Add(this.SoulLevel);
                hash.Add(this.Health);
                hash.Add(this.AttackDamage);
                hash.Add(this.Strength);
                hash.Add(this.Intelligence);
                hash.Add(this.Willpower);
                hash.Add(this.Agility);
                hash.Add(this.Speed);
                hash.Add(this.Endurance);
                hash.Add(this.Personality);
                hash.Add(this.Luck);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Type)) return false;
                if (!eval(this.CombatSkill)) return false;
                if (!eval(this.MagicSkill)) return false;
                if (!eval(this.StealthSkill)) return false;
                if (!eval(this.SoulLevel)) return false;
                if (!eval(this.Health)) return false;
                if (!eval(this.AttackDamage)) return false;
                if (!eval(this.Strength)) return false;
                if (!eval(this.Intelligence)) return false;
                if (!eval(this.Willpower)) return false;
                if (!eval(this.Agility)) return false;
                if (!eval(this.Speed)) return false;
                if (!eval(this.Endurance)) return false;
                if (!eval(this.Personality)) return false;
                if (!eval(this.Luck)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Type)) return true;
                if (eval(this.CombatSkill)) return true;
                if (eval(this.MagicSkill)) return true;
                if (eval(this.StealthSkill)) return true;
                if (eval(this.SoulLevel)) return true;
                if (eval(this.Health)) return true;
                if (eval(this.AttackDamage)) return true;
                if (eval(this.Strength)) return true;
                if (eval(this.Intelligence)) return true;
                if (eval(this.Willpower)) return true;
                if (eval(this.Agility)) return true;
                if (eval(this.Speed)) return true;
                if (eval(this.Endurance)) return true;
                if (eval(this.Personality)) return true;
                if (eval(this.Luck)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CreatureData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Type = eval(this.Type);
                obj.CombatSkill = eval(this.CombatSkill);
                obj.MagicSkill = eval(this.MagicSkill);
                obj.StealthSkill = eval(this.StealthSkill);
                obj.SoulLevel = eval(this.SoulLevel);
                obj.Health = eval(this.Health);
                obj.AttackDamage = eval(this.AttackDamage);
                obj.Strength = eval(this.Strength);
                obj.Intelligence = eval(this.Intelligence);
                obj.Willpower = eval(this.Willpower);
                obj.Agility = eval(this.Agility);
                obj.Speed = eval(this.Speed);
                obj.Endurance = eval(this.Endurance);
                obj.Personality = eval(this.Personality);
                obj.Luck = eval(this.Luck);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(CreatureData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, CreatureData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(CreatureData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Type ?? true)
                    {
                        sb.AppendItem(Type, "Type");
                    }
                    if (printMask?.CombatSkill ?? true)
                    {
                        sb.AppendItem(CombatSkill, "CombatSkill");
                    }
                    if (printMask?.MagicSkill ?? true)
                    {
                        sb.AppendItem(MagicSkill, "MagicSkill");
                    }
                    if (printMask?.StealthSkill ?? true)
                    {
                        sb.AppendItem(StealthSkill, "StealthSkill");
                    }
                    if (printMask?.SoulLevel ?? true)
                    {
                        sb.AppendItem(SoulLevel, "SoulLevel");
                    }
                    if (printMask?.Health ?? true)
                    {
                        sb.AppendItem(Health, "Health");
                    }
                    if (printMask?.AttackDamage ?? true)
                    {
                        sb.AppendItem(AttackDamage, "AttackDamage");
                    }
                    if (printMask?.Strength ?? true)
                    {
                        sb.AppendItem(Strength, "Strength");
                    }
                    if (printMask?.Intelligence ?? true)
                    {
                        sb.AppendItem(Intelligence, "Intelligence");
                    }
                    if (printMask?.Willpower ?? true)
                    {
                        sb.AppendItem(Willpower, "Willpower");
                    }
                    if (printMask?.Agility ?? true)
                    {
                        sb.AppendItem(Agility, "Agility");
                    }
                    if (printMask?.Speed ?? true)
                    {
                        sb.AppendItem(Speed, "Speed");
                    }
                    if (printMask?.Endurance ?? true)
                    {
                        sb.AppendItem(Endurance, "Endurance");
                    }
                    if (printMask?.Personality ?? true)
                    {
                        sb.AppendItem(Personality, "Personality");
                    }
                    if (printMask?.Luck ?? true)
                    {
                        sb.AppendItem(Luck, "Luck");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Type;
            public Exception? CombatSkill;
            public Exception? MagicSkill;
            public Exception? StealthSkill;
            public Exception? SoulLevel;
            public Exception? Health;
            public Exception? AttackDamage;
            public Exception? Strength;
            public Exception? Intelligence;
            public Exception? Willpower;
            public Exception? Agility;
            public Exception? Speed;
            public Exception? Endurance;
            public Exception? Personality;
            public Exception? Luck;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                CreatureData_FieldIndex enu = (CreatureData_FieldIndex)index;
                switch (enu)
                {
                    case CreatureData_FieldIndex.Type:
                        return Type;
                    case CreatureData_FieldIndex.CombatSkill:
                        return CombatSkill;
                    case CreatureData_FieldIndex.MagicSkill:
                        return MagicSkill;
                    case CreatureData_FieldIndex.StealthSkill:
                        return StealthSkill;
                    case CreatureData_FieldIndex.SoulLevel:
                        return SoulLevel;
                    case CreatureData_FieldIndex.Health:
                        return Health;
                    case CreatureData_FieldIndex.AttackDamage:
                        return AttackDamage;
                    case CreatureData_FieldIndex.Strength:
                        return Strength;
                    case CreatureData_FieldIndex.Intelligence:
                        return Intelligence;
                    case CreatureData_FieldIndex.Willpower:
                        return Willpower;
                    case CreatureData_FieldIndex.Agility:
                        return Agility;
                    case CreatureData_FieldIndex.Speed:
                        return Speed;
                    case CreatureData_FieldIndex.Endurance:
                        return Endurance;
                    case CreatureData_FieldIndex.Personality:
                        return Personality;
                    case CreatureData_FieldIndex.Luck:
                        return Luck;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                CreatureData_FieldIndex enu = (CreatureData_FieldIndex)index;
                switch (enu)
                {
                    case CreatureData_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case CreatureData_FieldIndex.CombatSkill:
                        this.CombatSkill = ex;
                        break;
                    case CreatureData_FieldIndex.MagicSkill:
                        this.MagicSkill = ex;
                        break;
                    case CreatureData_FieldIndex.StealthSkill:
                        this.StealthSkill = ex;
                        break;
                    case CreatureData_FieldIndex.SoulLevel:
                        this.SoulLevel = ex;
                        break;
                    case CreatureData_FieldIndex.Health:
                        this.Health = ex;
                        break;
                    case CreatureData_FieldIndex.AttackDamage:
                        this.AttackDamage = ex;
                        break;
                    case CreatureData_FieldIndex.Strength:
                        this.Strength = ex;
                        break;
                    case CreatureData_FieldIndex.Intelligence:
                        this.Intelligence = ex;
                        break;
                    case CreatureData_FieldIndex.Willpower:
                        this.Willpower = ex;
                        break;
                    case CreatureData_FieldIndex.Agility:
                        this.Agility = ex;
                        break;
                    case CreatureData_FieldIndex.Speed:
                        this.Speed = ex;
                        break;
                    case CreatureData_FieldIndex.Endurance:
                        this.Endurance = ex;
                        break;
                    case CreatureData_FieldIndex.Personality:
                        this.Personality = ex;
                        break;
                    case CreatureData_FieldIndex.Luck:
                        this.Luck = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                CreatureData_FieldIndex enu = (CreatureData_FieldIndex)index;
                switch (enu)
                {
                    case CreatureData_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case CreatureData_FieldIndex.CombatSkill:
                        this.CombatSkill = (Exception?)obj;
                        break;
                    case CreatureData_FieldIndex.MagicSkill:
                        this.MagicSkill = (Exception?)obj;
                        break;
                    case CreatureData_FieldIndex.StealthSkill:
                        this.StealthSkill = (Exception?)obj;
                        break;
                    case CreatureData_FieldIndex.SoulLevel:
                        this.SoulLevel = (Exception?)obj;
                        break;
                    case CreatureData_FieldIndex.Health:
                        this.Health = (Exception?)obj;
                        break;
                    case CreatureData_FieldIndex.AttackDamage:
                        this.AttackDamage = (Exception?)obj;
                        break;
                    case CreatureData_FieldIndex.Strength:
                        this.Strength = (Exception?)obj;
                        break;
                    case CreatureData_FieldIndex.Intelligence:
                        this.Intelligence = (Exception?)obj;
                        break;
                    case CreatureData_FieldIndex.Willpower:
                        this.Willpower = (Exception?)obj;
                        break;
                    case CreatureData_FieldIndex.Agility:
                        this.Agility = (Exception?)obj;
                        break;
                    case CreatureData_FieldIndex.Speed:
                        this.Speed = (Exception?)obj;
                        break;
                    case CreatureData_FieldIndex.Endurance:
                        this.Endurance = (Exception?)obj;
                        break;
                    case CreatureData_FieldIndex.Personality:
                        this.Personality = (Exception?)obj;
                        break;
                    case CreatureData_FieldIndex.Luck:
                        this.Luck = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Type != null) return true;
                if (CombatSkill != null) return true;
                if (MagicSkill != null) return true;
                if (StealthSkill != null) return true;
                if (SoulLevel != null) return true;
                if (Health != null) return true;
                if (AttackDamage != null) return true;
                if (Strength != null) return true;
                if (Intelligence != null) return true;
                if (Willpower != null) return true;
                if (Agility != null) return true;
                if (Speed != null) return true;
                if (Endurance != null) return true;
                if (Personality != null) return true;
                if (Luck != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Type, "Type");
                }
                {
                    sb.AppendItem(CombatSkill, "CombatSkill");
                }
                {
                    sb.AppendItem(MagicSkill, "MagicSkill");
                }
                {
                    sb.AppendItem(StealthSkill, "StealthSkill");
                }
                {
                    sb.AppendItem(SoulLevel, "SoulLevel");
                }
                {
                    sb.AppendItem(Health, "Health");
                }
                {
                    sb.AppendItem(AttackDamage, "AttackDamage");
                }
                {
                    sb.AppendItem(Strength, "Strength");
                }
                {
                    sb.AppendItem(Intelligence, "Intelligence");
                }
                {
                    sb.AppendItem(Willpower, "Willpower");
                }
                {
                    sb.AppendItem(Agility, "Agility");
                }
                {
                    sb.AppendItem(Speed, "Speed");
                }
                {
                    sb.AppendItem(Endurance, "Endurance");
                }
                {
                    sb.AppendItem(Personality, "Personality");
                }
                {
                    sb.AppendItem(Luck, "Luck");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Type = this.Type.Combine(rhs.Type);
                ret.CombatSkill = this.CombatSkill.Combine(rhs.CombatSkill);
                ret.MagicSkill = this.MagicSkill.Combine(rhs.MagicSkill);
                ret.StealthSkill = this.StealthSkill.Combine(rhs.StealthSkill);
                ret.SoulLevel = this.SoulLevel.Combine(rhs.SoulLevel);
                ret.Health = this.Health.Combine(rhs.Health);
                ret.AttackDamage = this.AttackDamage.Combine(rhs.AttackDamage);
                ret.Strength = this.Strength.Combine(rhs.Strength);
                ret.Intelligence = this.Intelligence.Combine(rhs.Intelligence);
                ret.Willpower = this.Willpower.Combine(rhs.Willpower);
                ret.Agility = this.Agility.Combine(rhs.Agility);
                ret.Speed = this.Speed.Combine(rhs.Speed);
                ret.Endurance = this.Endurance.Combine(rhs.Endurance);
                ret.Personality = this.Personality.Combine(rhs.Personality);
                ret.Luck = this.Luck.Combine(rhs.Luck);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Type;
            public bool CombatSkill;
            public bool MagicSkill;
            public bool StealthSkill;
            public bool SoulLevel;
            public bool Health;
            public bool AttackDamage;
            public bool Strength;
            public bool Intelligence;
            public bool Willpower;
            public bool Agility;
            public bool Speed;
            public bool Endurance;
            public bool Personality;
            public bool Luck;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Type = defaultOn;
                this.CombatSkill = defaultOn;
                this.MagicSkill = defaultOn;
                this.StealthSkill = defaultOn;
                this.SoulLevel = defaultOn;
                this.Health = defaultOn;
                this.AttackDamage = defaultOn;
                this.Strength = defaultOn;
                this.Intelligence = defaultOn;
                this.Willpower = defaultOn;
                this.Agility = defaultOn;
                this.Speed = defaultOn;
                this.Endurance = defaultOn;
                this.Personality = defaultOn;
                this.Luck = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Type, null));
                ret.Add((CombatSkill, null));
                ret.Add((MagicSkill, null));
                ret.Add((StealthSkill, null));
                ret.Add((SoulLevel, null));
                ret.Add((Health, null));
                ret.Add((AttackDamage, null));
                ret.Add((Strength, null));
                ret.Add((Intelligence, null));
                ret.Add((Willpower, null));
                ret.Add((Agility, null));
                ret.Add((Speed, null));
                ret.Add((Endurance, null));
                ret.Add((Personality, null));
                ret.Add((Luck, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CreatureDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CreatureDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static CreatureData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new CreatureData();
            ((CreatureDataSetterCommon)((ICreatureDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CreatureData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((CreatureDataSetterCommon)((ICreatureDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static CreatureData GetNew()
        {
            return new CreatureData();
        }

    }
    #endregion

    #region Interface
    public partial interface ICreatureData :
        ICreatureDataGetter,
        ILoquiObjectSetter<ICreatureData>
    {
        new Creature.Types Type { get; set; }
        new Byte CombatSkill { get; set; }
        new Byte MagicSkill { get; set; }
        new Byte StealthSkill { get; set; }
        new SoulLevel SoulLevel { get; set; }
        new UInt32 Health { get; set; }
        new UInt16 AttackDamage { get; set; }
        new Byte Strength { get; set; }
        new Byte Intelligence { get; set; }
        new Byte Willpower { get; set; }
        new Byte Agility { get; set; }
        new Byte Speed { get; set; }
        new Byte Endurance { get; set; }
        new Byte Personality { get; set; }
        new Byte Luck { get; set; }
    }

    public partial interface ICreatureDataGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<ICreatureDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => CreatureData_Registration.Instance;
        Creature.Types Type { get; }
        Byte CombatSkill { get; }
        Byte MagicSkill { get; }
        Byte StealthSkill { get; }
        SoulLevel SoulLevel { get; }
        UInt32 Health { get; }
        UInt16 AttackDamage { get; }
        Byte Strength { get; }
        Byte Intelligence { get; }
        Byte Willpower { get; }
        Byte Agility { get; }
        Byte Speed { get; }
        Byte Endurance { get; }
        Byte Personality { get; }
        Byte Luck { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CreatureDataMixIn
    {
        public static void Clear(this ICreatureData item)
        {
            ((CreatureDataSetterCommon)((ICreatureDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CreatureData.Mask<bool> GetEqualsMask(
            this ICreatureDataGetter item,
            ICreatureDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CreatureDataCommon)((ICreatureDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ICreatureDataGetter item,
            string? name = null,
            CreatureData.Mask<bool>? printMask = null)
        {
            return ((CreatureDataCommon)((ICreatureDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ICreatureDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            CreatureData.Mask<bool>? printMask = null)
        {
            ((CreatureDataCommon)((ICreatureDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICreatureDataGetter item,
            ICreatureDataGetter rhs,
            CreatureData.TranslationMask? equalsMask = null)
        {
            return ((CreatureDataCommon)((ICreatureDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ICreatureData lhs,
            ICreatureDataGetter rhs)
        {
            ((CreatureDataSetterTranslationCommon)((ICreatureDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICreatureData lhs,
            ICreatureDataGetter rhs,
            CreatureData.TranslationMask? copyMask = null)
        {
            ((CreatureDataSetterTranslationCommon)((ICreatureDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICreatureData lhs,
            ICreatureDataGetter rhs,
            out CreatureData.ErrorMask errorMask,
            CreatureData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CreatureDataSetterTranslationCommon)((ICreatureDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = CreatureData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICreatureData lhs,
            ICreatureDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CreatureDataSetterTranslationCommon)((ICreatureDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static CreatureData DeepCopy(
            this ICreatureDataGetter item,
            CreatureData.TranslationMask? copyMask = null)
        {
            return ((CreatureDataSetterTranslationCommon)((ICreatureDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CreatureData DeepCopy(
            this ICreatureDataGetter item,
            out CreatureData.ErrorMask errorMask,
            CreatureData.TranslationMask? copyMask = null)
        {
            return ((CreatureDataSetterTranslationCommon)((ICreatureDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CreatureData DeepCopy(
            this ICreatureDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CreatureDataSetterTranslationCommon)((ICreatureDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICreatureData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((CreatureDataSetterCommon)((ICreatureDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    #region Field Index
    internal enum CreatureData_FieldIndex
    {
        Type = 0,
        CombatSkill = 1,
        MagicSkill = 2,
        StealthSkill = 3,
        SoulLevel = 4,
        Health = 5,
        AttackDamage = 6,
        Strength = 7,
        Intelligence = 8,
        Willpower = 9,
        Agility = 10,
        Speed = 11,
        Endurance = 12,
        Personality = 13,
        Luck = 14,
    }
    #endregion

    #region Registration
    internal partial class CreatureData_Registration : ILoquiRegistration
    {
        public static readonly CreatureData_Registration Instance = new CreatureData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public const ushort AdditionalFieldCount = 15;

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(CreatureData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CreatureData.ErrorMask);

        public static readonly Type ClassType = typeof(CreatureData);

        public static readonly Type GetterType = typeof(ICreatureDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICreatureData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.CreatureData";

        public const string Name = "CreatureData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.DATA;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.DATA);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(CreatureDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class CreatureDataSetterCommon
    {
        public static readonly CreatureDataSetterCommon Instance = new CreatureDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICreatureData item)
        {
            ClearPartial();
            item.Type = default(Creature.Types);
            item.CombatSkill = default(Byte);
            item.MagicSkill = default(Byte);
            item.StealthSkill = default(Byte);
            item.SoulLevel = default(SoulLevel);
            item.Health = default(UInt32);
            item.AttackDamage = default(UInt16);
            item.Strength = default(Byte);
            item.Intelligence = default(Byte);
            item.Willpower = default(Byte);
            item.Agility = default(Byte);
            item.Speed = default(Byte);
            item.Endurance = default(Byte);
            item.Personality = default(Byte);
            item.Luck = default(Byte);
        }
        
        #region Mutagen
        public void RemapLinks(ICreatureData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICreatureData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.DATA),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: CreatureDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class CreatureDataCommon
    {
        public static readonly CreatureDataCommon Instance = new CreatureDataCommon();

        public CreatureData.Mask<bool> GetEqualsMask(
            ICreatureDataGetter item,
            ICreatureDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CreatureData.Mask<bool>(false);
            ((CreatureDataCommon)((ICreatureDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICreatureDataGetter item,
            ICreatureDataGetter rhs,
            CreatureData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Type = item.Type == rhs.Type;
            ret.CombatSkill = item.CombatSkill == rhs.CombatSkill;
            ret.MagicSkill = item.MagicSkill == rhs.MagicSkill;
            ret.StealthSkill = item.StealthSkill == rhs.StealthSkill;
            ret.SoulLevel = item.SoulLevel == rhs.SoulLevel;
            ret.Health = item.Health == rhs.Health;
            ret.AttackDamage = item.AttackDamage == rhs.AttackDamage;
            ret.Strength = item.Strength == rhs.Strength;
            ret.Intelligence = item.Intelligence == rhs.Intelligence;
            ret.Willpower = item.Willpower == rhs.Willpower;
            ret.Agility = item.Agility == rhs.Agility;
            ret.Speed = item.Speed == rhs.Speed;
            ret.Endurance = item.Endurance == rhs.Endurance;
            ret.Personality = item.Personality == rhs.Personality;
            ret.Luck = item.Luck == rhs.Luck;
        }
        
        public string Print(
            ICreatureDataGetter item,
            string? name = null,
            CreatureData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ICreatureDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            CreatureData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"CreatureData =>");
            }
            else
            {
                sb.AppendLine($"{name} (CreatureData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ICreatureDataGetter item,
            StructuredStringBuilder sb,
            CreatureData.Mask<bool>? printMask = null)
        {
            if (printMask?.Type ?? true)
            {
                sb.AppendItem(item.Type, "Type");
            }
            if (printMask?.CombatSkill ?? true)
            {
                sb.AppendItem(item.CombatSkill, "CombatSkill");
            }
            if (printMask?.MagicSkill ?? true)
            {
                sb.AppendItem(item.MagicSkill, "MagicSkill");
            }
            if (printMask?.StealthSkill ?? true)
            {
                sb.AppendItem(item.StealthSkill, "StealthSkill");
            }
            if (printMask?.SoulLevel ?? true)
            {
                sb.AppendItem(item.SoulLevel, "SoulLevel");
            }
            if (printMask?.Health ?? true)
            {
                sb.AppendItem(item.Health, "Health");
            }
            if (printMask?.AttackDamage ?? true)
            {
                sb.AppendItem(item.AttackDamage, "AttackDamage");
            }
            if (printMask?.Strength ?? true)
            {
                sb.AppendItem(item.Strength, "Strength");
            }
            if (printMask?.Intelligence ?? true)
            {
                sb.AppendItem(item.Intelligence, "Intelligence");
            }
            if (printMask?.Willpower ?? true)
            {
                sb.AppendItem(item.Willpower, "Willpower");
            }
            if (printMask?.Agility ?? true)
            {
                sb.AppendItem(item.Agility, "Agility");
            }
            if (printMask?.Speed ?? true)
            {
                sb.AppendItem(item.Speed, "Speed");
            }
            if (printMask?.Endurance ?? true)
            {
                sb.AppendItem(item.Endurance, "Endurance");
            }
            if (printMask?.Personality ?? true)
            {
                sb.AppendItem(item.Personality, "Personality");
            }
            if (printMask?.Luck ?? true)
            {
                sb.AppendItem(item.Luck, "Luck");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICreatureDataGetter? lhs,
            ICreatureDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Type) ?? true))
            {
                if (lhs.Type != rhs.Type) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CreatureData_FieldIndex.CombatSkill) ?? true))
            {
                if (lhs.CombatSkill != rhs.CombatSkill) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CreatureData_FieldIndex.MagicSkill) ?? true))
            {
                if (lhs.MagicSkill != rhs.MagicSkill) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CreatureData_FieldIndex.StealthSkill) ?? true))
            {
                if (lhs.StealthSkill != rhs.StealthSkill) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CreatureData_FieldIndex.SoulLevel) ?? true))
            {
                if (lhs.SoulLevel != rhs.SoulLevel) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Health) ?? true))
            {
                if (lhs.Health != rhs.Health) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CreatureData_FieldIndex.AttackDamage) ?? true))
            {
                if (lhs.AttackDamage != rhs.AttackDamage) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Strength) ?? true))
            {
                if (lhs.Strength != rhs.Strength) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Intelligence) ?? true))
            {
                if (lhs.Intelligence != rhs.Intelligence) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Willpower) ?? true))
            {
                if (lhs.Willpower != rhs.Willpower) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Agility) ?? true))
            {
                if (lhs.Agility != rhs.Agility) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Speed) ?? true))
            {
                if (lhs.Speed != rhs.Speed) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Endurance) ?? true))
            {
                if (lhs.Endurance != rhs.Endurance) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Personality) ?? true))
            {
                if (lhs.Personality != rhs.Personality) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Luck) ?? true))
            {
                if (lhs.Luck != rhs.Luck) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ICreatureDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Type);
            hash.Add(item.CombatSkill);
            hash.Add(item.MagicSkill);
            hash.Add(item.StealthSkill);
            hash.Add(item.SoulLevel);
            hash.Add(item.Health);
            hash.Add(item.AttackDamage);
            hash.Add(item.Strength);
            hash.Add(item.Intelligence);
            hash.Add(item.Willpower);
            hash.Add(item.Agility);
            hash.Add(item.Speed);
            hash.Add(item.Endurance);
            hash.Add(item.Personality);
            hash.Add(item.Luck);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return CreatureData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ICreatureDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class CreatureDataSetterTranslationCommon
    {
        public static readonly CreatureDataSetterTranslationCommon Instance = new CreatureDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICreatureData item,
            ICreatureDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.CombatSkill) ?? true))
            {
                item.CombatSkill = rhs.CombatSkill;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.MagicSkill) ?? true))
            {
                item.MagicSkill = rhs.MagicSkill;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.StealthSkill) ?? true))
            {
                item.StealthSkill = rhs.StealthSkill;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.SoulLevel) ?? true))
            {
                item.SoulLevel = rhs.SoulLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Health) ?? true))
            {
                item.Health = rhs.Health;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.AttackDamage) ?? true))
            {
                item.AttackDamage = rhs.AttackDamage;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Strength) ?? true))
            {
                item.Strength = rhs.Strength;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Intelligence) ?? true))
            {
                item.Intelligence = rhs.Intelligence;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Willpower) ?? true))
            {
                item.Willpower = rhs.Willpower;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Agility) ?? true))
            {
                item.Agility = rhs.Agility;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Speed) ?? true))
            {
                item.Speed = rhs.Speed;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Endurance) ?? true))
            {
                item.Endurance = rhs.Endurance;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Personality) ?? true))
            {
                item.Personality = rhs.Personality;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Luck) ?? true))
            {
                item.Luck = rhs.Luck;
            }
        }
        
        #endregion
        
        public CreatureData DeepCopy(
            ICreatureDataGetter item,
            CreatureData.TranslationMask? copyMask = null)
        {
            CreatureData ret = (CreatureData)((CreatureDataCommon)((ICreatureDataGetter)item).CommonInstance()!).GetNew();
            ((CreatureDataSetterTranslationCommon)((ICreatureDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public CreatureData DeepCopy(
            ICreatureDataGetter item,
            out CreatureData.ErrorMask errorMask,
            CreatureData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CreatureData ret = (CreatureData)((CreatureDataCommon)((ICreatureDataGetter)item).CommonInstance()!).GetNew();
            ((CreatureDataSetterTranslationCommon)((ICreatureDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = CreatureData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public CreatureData DeepCopy(
            ICreatureDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CreatureData ret = (CreatureData)((CreatureDataCommon)((ICreatureDataGetter)item).CommonInstance()!).GetNew();
            ((CreatureDataSetterTranslationCommon)((ICreatureDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class CreatureData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CreatureData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => CreatureData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CreatureDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return CreatureDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CreatureDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICreatureDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ICreatureDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ICreatureDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion
{
    public partial class CreatureDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly CreatureDataBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ICreatureDataGetter item,
            MutagenWriter writer)
        {
            EnumBinaryTranslation<Creature.Types, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Type,
                length: 1);
            writer.Write(item.CombatSkill);
            writer.Write(item.MagicSkill);
            writer.Write(item.StealthSkill);
            EnumBinaryTranslation<SoulLevel, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.SoulLevel,
                length: 2);
            writer.Write(item.Health);
            writer.Write(item.AttackDamage);
            writer.Write(item.Strength);
            writer.Write(item.Intelligence);
            writer.Write(item.Willpower);
            writer.Write(item.Agility);
            writer.Write(item.Speed);
            writer.Write(item.Endurance);
            writer.Write(item.Personality);
            writer.Write(item.Luck);
        }

        public void Write(
            MutagenWriter writer,
            ICreatureDataGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.DATA),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ICreatureDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class CreatureDataBinaryCreateTranslation
    {
        public static readonly CreatureDataBinaryCreateTranslation Instance = new CreatureDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ICreatureData item,
            MutagenFrame frame)
        {
            item.Type = EnumBinaryTranslation<Creature.Types, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 1);
            item.CombatSkill = frame.ReadUInt8();
            item.MagicSkill = frame.ReadUInt8();
            item.StealthSkill = frame.ReadUInt8();
            item.SoulLevel = EnumBinaryTranslation<SoulLevel, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 2);
            item.Health = frame.ReadUInt32();
            item.AttackDamage = frame.ReadUInt16();
            item.Strength = frame.ReadUInt8();
            item.Intelligence = frame.ReadUInt8();
            item.Willpower = frame.ReadUInt8();
            item.Agility = frame.ReadUInt8();
            item.Speed = frame.ReadUInt8();
            item.Endurance = frame.ReadUInt8();
            item.Personality = frame.ReadUInt8();
            item.Luck = frame.ReadUInt8();
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class CreatureDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ICreatureDataGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CreatureDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion
{
    internal partial class CreatureDataBinaryOverlay :
        PluginBinaryOverlay,
        ICreatureDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CreatureData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => CreatureData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CreatureDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CreatureDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICreatureDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ICreatureDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ICreatureDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CreatureDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CreatureDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Creature.Types Type => (Creature.Types)_structData.Span.Slice(0x0, 0x1)[0];
        public Byte CombatSkill => _structData.Span[0x1];
        public Byte MagicSkill => _structData.Span[0x2];
        public Byte StealthSkill => _structData.Span[0x3];
        public SoulLevel SoulLevel => (SoulLevel)BinaryPrimitives.ReadUInt16LittleEndian(_structData.Span.Slice(0x4, 0x2));
        public UInt32 Health => BinaryPrimitives.ReadUInt32LittleEndian(_structData.Slice(0x6, 0x4));
        public UInt16 AttackDamage => BinaryPrimitives.ReadUInt16LittleEndian(_structData.Slice(0xA, 0x2));
        public Byte Strength => _structData.Span[0xC];
        public Byte Intelligence => _structData.Span[0xD];
        public Byte Willpower => _structData.Span[0xE];
        public Byte Agility => _structData.Span[0xF];
        public Byte Speed => _structData.Span[0x10];
        public Byte Endurance => _structData.Span[0x11];
        public Byte Personality => _structData.Span[0x12];
        public Byte Luck => _structData.Span[0x13];
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CreatureDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ICreatureDataGetter CreatureDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x14,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new CreatureDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x14 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ICreatureDataGetter CreatureDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return CreatureDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CreatureDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICreatureDataGetter rhs) return false;
            return ((CreatureDataCommon)((ICreatureDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICreatureDataGetter? obj)
        {
            return ((CreatureDataCommon)((ICreatureDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CreatureDataCommon)((ICreatureDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

