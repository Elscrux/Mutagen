/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.RecordTypeMapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LandTexture :
        OblivionMajorRecord,
        IEquatable<ILandTextureGetter>,
        ILandTextureInternal,
        ILoquiObjectSetter<LandTexture>
    {
        #region Ctor
        protected LandTexture()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Icon
        public String? Icon { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ILandTextureGetter.Icon => this.Icon;
        #endregion
        #region Havok
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private HavokData? _Havok;
        public HavokData? Havok
        {
            get => _Havok;
            set => _Havok = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IHavokDataGetter? ILandTextureGetter.Havok => this.Havok;
        #endregion
        #region TextureSpecularExponent
        public Byte? TextureSpecularExponent { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte? ILandTextureGetter.TextureSpecularExponent => this.TextureSpecularExponent;
        #endregion
        #region PotentialGrass
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IGrassGetter>> _PotentialGrass = new ExtendedList<IFormLinkGetter<IGrassGetter>>();
        public ExtendedList<IFormLinkGetter<IGrassGetter>> PotentialGrass
        {
            get => this._PotentialGrass;
            init => this._PotentialGrass = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IGrassGetter>> ILandTextureGetter.PotentialGrass => _PotentialGrass;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LandTextureMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Icon = initialValue;
                this.Havok = new MaskItem<TItem, HavokData.Mask<TItem>?>(initialValue, new HavokData.Mask<TItem>(initialValue));
                this.TextureSpecularExponent = initialValue;
                this.PotentialGrass = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Icon,
                TItem Havok,
                TItem TextureSpecularExponent,
                TItem PotentialGrass)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Icon = Icon;
                this.Havok = new MaskItem<TItem, HavokData.Mask<TItem>?>(Havok, new HavokData.Mask<TItem>(Havok));
                this.TextureSpecularExponent = TextureSpecularExponent;
                this.PotentialGrass = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(PotentialGrass, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Icon;
            public MaskItem<TItem, HavokData.Mask<TItem>?>? Havok { get; set; }
            public TItem TextureSpecularExponent;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? PotentialGrass;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
                if (!object.Equals(this.Havok, rhs.Havok)) return false;
                if (!object.Equals(this.TextureSpecularExponent, rhs.TextureSpecularExponent)) return false;
                if (!object.Equals(this.PotentialGrass, rhs.PotentialGrass)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Icon);
                hash.Add(this.Havok);
                hash.Add(this.TextureSpecularExponent);
                hash.Add(this.PotentialGrass);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Icon)) return false;
                if (Havok != null)
                {
                    if (!eval(this.Havok.Overall)) return false;
                    if (this.Havok.Specific != null && !this.Havok.Specific.All(eval)) return false;
                }
                if (!eval(this.TextureSpecularExponent)) return false;
                if (this.PotentialGrass != null)
                {
                    if (!eval(this.PotentialGrass.Overall)) return false;
                    if (this.PotentialGrass.Specific != null)
                    {
                        foreach (var item in this.PotentialGrass.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Icon)) return true;
                if (Havok != null)
                {
                    if (eval(this.Havok.Overall)) return true;
                    if (this.Havok.Specific != null && this.Havok.Specific.Any(eval)) return true;
                }
                if (eval(this.TextureSpecularExponent)) return true;
                if (this.PotentialGrass != null)
                {
                    if (eval(this.PotentialGrass.Overall)) return true;
                    if (this.PotentialGrass.Specific != null)
                    {
                        foreach (var item in this.PotentialGrass.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new LandTexture.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Icon = eval(this.Icon);
                obj.Havok = this.Havok == null ? null : new MaskItem<R, HavokData.Mask<R>?>(eval(this.Havok.Overall), this.Havok.Specific?.Translate(eval));
                obj.TextureSpecularExponent = eval(this.TextureSpecularExponent);
                if (PotentialGrass != null)
                {
                    obj.PotentialGrass = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.PotentialGrass.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (PotentialGrass.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.PotentialGrass.Specific = l;
                        foreach (var item in PotentialGrass.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(LandTexture.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, LandTexture.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(LandTexture.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Icon ?? true)
                    {
                        fg.AppendItem(Icon, "Icon");
                    }
                    if (printMask?.Havok?.Overall ?? true)
                    {
                        Havok?.ToString(fg);
                    }
                    if (printMask?.TextureSpecularExponent ?? true)
                    {
                        fg.AppendItem(TextureSpecularExponent, "TextureSpecularExponent");
                    }
                    if ((printMask?.PotentialGrass?.Overall ?? true)
                        && PotentialGrass is {} PotentialGrassItem)
                    {
                        fg.AppendLine("PotentialGrass =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(PotentialGrassItem.Overall);
                            if (PotentialGrassItem.Specific != null)
                            {
                                foreach (var subItem in PotentialGrassItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Icon;
            public MaskItem<Exception?, HavokData.ErrorMask?>? Havok;
            public Exception? TextureSpecularExponent;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? PotentialGrass;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                LandTexture_FieldIndex enu = (LandTexture_FieldIndex)index;
                switch (enu)
                {
                    case LandTexture_FieldIndex.Icon:
                        return Icon;
                    case LandTexture_FieldIndex.Havok:
                        return Havok;
                    case LandTexture_FieldIndex.TextureSpecularExponent:
                        return TextureSpecularExponent;
                    case LandTexture_FieldIndex.PotentialGrass:
                        return PotentialGrass;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                LandTexture_FieldIndex enu = (LandTexture_FieldIndex)index;
                switch (enu)
                {
                    case LandTexture_FieldIndex.Icon:
                        this.Icon = ex;
                        break;
                    case LandTexture_FieldIndex.Havok:
                        this.Havok = new MaskItem<Exception?, HavokData.ErrorMask?>(ex, null);
                        break;
                    case LandTexture_FieldIndex.TextureSpecularExponent:
                        this.TextureSpecularExponent = ex;
                        break;
                    case LandTexture_FieldIndex.PotentialGrass:
                        this.PotentialGrass = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                LandTexture_FieldIndex enu = (LandTexture_FieldIndex)index;
                switch (enu)
                {
                    case LandTexture_FieldIndex.Icon:
                        this.Icon = (Exception?)obj;
                        break;
                    case LandTexture_FieldIndex.Havok:
                        this.Havok = (MaskItem<Exception?, HavokData.ErrorMask?>?)obj;
                        break;
                    case LandTexture_FieldIndex.TextureSpecularExponent:
                        this.TextureSpecularExponent = (Exception?)obj;
                        break;
                    case LandTexture_FieldIndex.PotentialGrass:
                        this.PotentialGrass = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Icon != null) return true;
                if (Havok != null) return true;
                if (TextureSpecularExponent != null) return true;
                if (PotentialGrass != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Icon, "Icon");
                Havok?.ToString(fg);
                fg.AppendItem(TextureSpecularExponent, "TextureSpecularExponent");
                if (PotentialGrass is {} PotentialGrassItem)
                {
                    fg.AppendLine("PotentialGrass =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(PotentialGrassItem.Overall);
                        if (PotentialGrassItem.Specific != null)
                        {
                            foreach (var subItem in PotentialGrassItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Icon = this.Icon.Combine(rhs.Icon);
                ret.Havok = this.Havok.Combine(rhs.Havok, (l, r) => l.Combine(r));
                ret.TextureSpecularExponent = this.TextureSpecularExponent.Combine(rhs.TextureSpecularExponent);
                ret.PotentialGrass = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.PotentialGrass?.Overall, rhs.PotentialGrass?.Overall), ExceptionExt.Combine(this.PotentialGrass?.Specific, rhs.PotentialGrass?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Icon;
            public HavokData.TranslationMask? Havok;
            public bool TextureSpecularExponent;
            public bool PotentialGrass;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Icon = defaultOn;
                this.TextureSpecularExponent = defaultOn;
                this.PotentialGrass = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Icon, null));
                ret.Add((Havok != null ? Havok.OnOverall : DefaultOn, Havok?.GetCrystal()));
                ret.Add((TextureSpecularExponent, null));
                ret.Add((PotentialGrass, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = LandTexture_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => LandTextureCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LandTextureSetterCommon.Instance.RemapLinks(this, mapping);
        public LandTexture(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private LandTexture(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public LandTexture(IOblivionMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public LandTexture(IOblivionMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<LandTexture>.ToString(this);
        }

        protected override Type LinkType => typeof(ILandTexture);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ILandTextureGetter rhs) return false;
            return ((LandTextureCommon)((ILandTextureGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(ILandTextureGetter? obj)
        {
            return ((LandTextureCommon)((ILandTextureGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((LandTextureCommon)((ILandTextureGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LandTextureBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((LandTextureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static LandTexture CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new LandTexture();
            ((LandTextureSetterCommon)((ILandTextureGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out LandTexture item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((LandTextureSetterCommon)((ILandTextureGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new LandTexture GetNew()
        {
            return new LandTexture();
        }

    }
    #endregion

    #region Interface
    public partial interface ILandTexture :
        IFormLinkContainer,
        ILandTextureGetter,
        ILoquiObjectSetter<ILandTextureInternal>,
        IOblivionMajorRecordInternal
    {
        new String? Icon { get; set; }
        new HavokData? Havok { get; set; }
        new Byte? TextureSpecularExponent { get; set; }
        new ExtendedList<IFormLinkGetter<IGrassGetter>> PotentialGrass { get; }
    }

    public partial interface ILandTextureInternal :
        IOblivionMajorRecordInternal,
        ILandTexture,
        ILandTextureGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts.LTEX)]
    public partial interface ILandTextureGetter :
        IOblivionMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ILandTextureGetter>,
        IMapsToGetter<ILandTextureGetter>
    {
        static new ILoquiRegistration StaticRegistration => LandTexture_Registration.Instance;
        String? Icon { get; }
        IHavokDataGetter? Havok { get; }
        Byte? TextureSpecularExponent { get; }
        IReadOnlyList<IFormLinkGetter<IGrassGetter>> PotentialGrass { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class LandTextureMixIn
    {
        public static void Clear(this ILandTextureInternal item)
        {
            ((LandTextureSetterCommon)((ILandTextureGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static LandTexture.Mask<bool> GetEqualsMask(
            this ILandTextureGetter item,
            ILandTextureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LandTextureCommon)((ILandTextureGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILandTextureGetter item,
            string? name = null,
            LandTexture.Mask<bool>? printMask = null)
        {
            return ((LandTextureCommon)((ILandTextureGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILandTextureGetter item,
            FileGeneration fg,
            string? name = null,
            LandTexture.Mask<bool>? printMask = null)
        {
            ((LandTextureCommon)((ILandTextureGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ILandTextureGetter item,
            ILandTextureGetter rhs,
            LandTexture.TranslationMask? equalsMask = null)
        {
            return ((LandTextureCommon)((ILandTextureGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ILandTextureInternal lhs,
            ILandTextureGetter rhs,
            out LandTexture.ErrorMask errorMask,
            LandTexture.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LandTextureSetterTranslationCommon)((ILandTextureGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = LandTexture.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILandTextureInternal lhs,
            ILandTextureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LandTextureSetterTranslationCommon)((ILandTextureGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static LandTexture DeepCopy(
            this ILandTextureGetter item,
            LandTexture.TranslationMask? copyMask = null)
        {
            return ((LandTextureSetterTranslationCommon)((ILandTextureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LandTexture DeepCopy(
            this ILandTextureGetter item,
            out LandTexture.ErrorMask errorMask,
            LandTexture.TranslationMask? copyMask = null)
        {
            return ((LandTextureSetterTranslationCommon)((ILandTextureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LandTexture DeepCopy(
            this ILandTextureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LandTextureSetterTranslationCommon)((ILandTextureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static LandTexture Duplicate(
            this ILandTextureGetter item,
            FormKey formKey,
            LandTexture.TranslationMask? copyMask = null)
        {
            return ((LandTextureCommon)((ILandTextureGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ILandTextureInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((LandTextureSetterCommon)((ILandTextureGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum LandTexture_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Icon = 5,
        Havok = 6,
        TextureSpecularExponent = 7,
        PotentialGrass = 8,
    }
    #endregion

    #region Registration
    public partial class LandTexture_Registration : ILoquiRegistration
    {
        public static readonly LandTexture_Registration Instance = new LandTexture_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 51,
            version: 0);

        public const string GUID = "528c071e-b61d-4149-b96a-a28f0d96e87e";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(LandTexture.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LandTexture.ErrorMask);

        public static readonly Type ClassType = typeof(LandTexture);

        public static readonly Type GetterType = typeof(ILandTextureGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILandTexture);

        public static readonly Type? InternalSetterType = typeof(ILandTextureInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.LandTexture";

        public const string Name = "LandTexture";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.LTEX;
        public static readonly Type BinaryWriteTranslation = typeof(LandTextureBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class LandTextureSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly LandTextureSetterCommon Instance = new LandTextureSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILandTextureInternal item)
        {
            ClearPartial();
            item.Icon = default;
            item.Havok = null;
            item.TextureSpecularExponent = default;
            item.PotentialGrass.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ILandTextureInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ILandTextureInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ILandTexture obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.PotentialGrass.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILandTextureInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.MajorRecordParse<ILandTextureInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: LandTextureBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: LandTextureBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (LandTexture)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (LandTexture)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    public partial class LandTextureCommon : OblivionMajorRecordCommon
    {
        public new static readonly LandTextureCommon Instance = new LandTextureCommon();

        public LandTexture.Mask<bool> GetEqualsMask(
            ILandTextureGetter item,
            ILandTextureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LandTexture.Mask<bool>(false);
            ((LandTextureCommon)((ILandTextureGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILandTextureGetter item,
            ILandTextureGetter rhs,
            LandTexture.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Icon = string.Equals(item.Icon, rhs.Icon);
            ret.Havok = EqualsMaskHelper.EqualsHelper(
                item.Havok,
                rhs.Havok,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.TextureSpecularExponent = item.TextureSpecularExponent == rhs.TextureSpecularExponent;
            ret.PotentialGrass = item.PotentialGrass.CollectionEqualsHelper(
                rhs.PotentialGrass,
                (l, r) => object.Equals(l, r),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ILandTextureGetter item,
            string? name = null,
            LandTexture.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILandTextureGetter item,
            FileGeneration fg,
            string? name = null,
            LandTexture.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"LandTexture =>");
            }
            else
            {
                fg.AppendLine($"{name} (LandTexture) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILandTextureGetter item,
            FileGeneration fg,
            LandTexture.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Icon ?? true)
                && item.Icon is {} IconItem)
            {
                fg.AppendItem(IconItem, "Icon");
            }
            if ((printMask?.Havok?.Overall ?? true)
                && item.Havok is {} HavokItem)
            {
                HavokItem?.ToString(fg, "Havok");
            }
            if ((printMask?.TextureSpecularExponent ?? true)
                && item.TextureSpecularExponent is {} TextureSpecularExponentItem)
            {
                fg.AppendItem(TextureSpecularExponentItem, "TextureSpecularExponent");
            }
            if (printMask?.PotentialGrass?.Overall ?? true)
            {
                fg.AppendLine("PotentialGrass =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.PotentialGrass)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public static LandTexture_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LandTexture_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (LandTexture_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.VersionControl:
                    return (LandTexture_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (LandTexture_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (LandTexture_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new LandTexture_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LandTexture_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (LandTexture_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (LandTexture_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (LandTexture_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILandTextureGetter? lhs,
            ILandTextureGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IOblivionMajorRecordGetter)lhs, (IOblivionMajorRecordGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)LandTexture_FieldIndex.Icon) ?? true))
            {
                if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)LandTexture_FieldIndex.Havok) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Havok, rhs.Havok, out var lhsHavok, out var rhsHavok, out var isHavokEqual))
                {
                    if (!((HavokDataCommon)((IHavokDataGetter)lhsHavok).CommonInstance()!).Equals(lhsHavok, rhsHavok, crystal?.GetSubCrystal((int)LandTexture_FieldIndex.Havok))) return false;
                }
                else if (!isHavokEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)LandTexture_FieldIndex.TextureSpecularExponent) ?? true))
            {
                if (lhs.TextureSpecularExponent != rhs.TextureSpecularExponent) return false;
            }
            if ((crystal?.GetShouldTranslate((int)LandTexture_FieldIndex.PotentialGrass) ?? true))
            {
                if (!lhs.PotentialGrass.SequenceEqualNullable(rhs.PotentialGrass)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (ILandTextureGetter?)lhs,
                rhs: rhs as ILandTextureGetter,
                crystal: crystal);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (ILandTextureGetter?)lhs,
                rhs: rhs as ILandTextureGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(ILandTextureGetter item)
        {
            var hash = new HashCode();
            if (item.Icon is {} Iconitem)
            {
                hash.Add(Iconitem);
            }
            if (item.Havok is {} Havokitem)
            {
                hash.Add(Havokitem);
            }
            if (item.TextureSpecularExponent is {} TextureSpecularExponentitem)
            {
                hash.Add(TextureSpecularExponentitem);
            }
            hash.Add(item.PotentialGrass);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (ILandTextureGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ILandTextureGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return LandTexture.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(ILandTextureGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.PotentialGrass)
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public LandTexture Duplicate(
            ILandTextureGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new LandTexture(formKey);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override OblivionMajorRecord Duplicate(
            IOblivionMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ILandTextureGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ILandTextureGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class LandTextureSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly LandTextureSetterTranslationCommon Instance = new LandTextureSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ILandTextureInternal item,
            ILandTextureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ILandTexture item,
            ILandTextureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IOblivionMajorRecord)item,
                (IOblivionMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)LandTexture_FieldIndex.Icon) ?? true))
            {
                item.Icon = rhs.Icon;
            }
            if ((copyMask?.GetShouldTranslate((int)LandTexture_FieldIndex.Havok) ?? true))
            {
                errorMask?.PushIndex((int)LandTexture_FieldIndex.Havok);
                try
                {
                    if(rhs.Havok is {} rhsHavok)
                    {
                        item.Havok = rhsHavok.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)LandTexture_FieldIndex.Havok));
                    }
                    else
                    {
                        item.Havok = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LandTexture_FieldIndex.TextureSpecularExponent) ?? true))
            {
                item.TextureSpecularExponent = rhs.TextureSpecularExponent;
            }
            if ((copyMask?.GetShouldTranslate((int)LandTexture_FieldIndex.PotentialGrass) ?? true))
            {
                errorMask?.PushIndex((int)LandTexture_FieldIndex.PotentialGrass);
                try
                {
                    item.PotentialGrass.SetTo(
                        rhs.PotentialGrass
                        .Select(r => (IFormLinkGetter<IGrassGetter>)new FormLink<IGrassGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILandTextureInternal)item,
                rhs: (ILandTextureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILandTexture)item,
                rhs: (ILandTextureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILandTextureInternal)item,
                rhs: (ILandTextureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILandTexture)item,
                rhs: (ILandTextureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public LandTexture DeepCopy(
            ILandTextureGetter item,
            LandTexture.TranslationMask? copyMask = null)
        {
            LandTexture ret = (LandTexture)((LandTextureCommon)((ILandTextureGetter)item).CommonInstance()!).GetNew();
            ((LandTextureSetterTranslationCommon)((ILandTextureGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public LandTexture DeepCopy(
            ILandTextureGetter item,
            out LandTexture.ErrorMask errorMask,
            LandTexture.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LandTexture ret = (LandTexture)((LandTextureCommon)((ILandTextureGetter)item).CommonInstance()!).GetNew();
            ((LandTextureSetterTranslationCommon)((ILandTextureGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = LandTexture.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public LandTexture DeepCopy(
            ILandTextureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            LandTexture ret = (LandTexture)((LandTextureCommon)((ILandTextureGetter)item).CommonInstance()!).GetNew();
            ((LandTextureSetterTranslationCommon)((ILandTextureGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class LandTexture
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LandTexture_Registration.Instance;
        public new static LandTexture_Registration StaticRegistration => LandTexture_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LandTextureCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return LandTextureSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LandTextureSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LandTextureBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static LandTextureBinaryWriteTranslation Instance = new LandTextureBinaryWriteTranslation();

        public static void WriteRecordTypes(
            ILandTextureGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Icon,
                header: translationParams.ConvertToCustom(RecordTypes.ICON),
                binaryType: StringBinaryType.NullTerminate);
            if (item.Havok is {} HavokItem)
            {
                ((HavokDataBinaryWriteTranslation)((IBinaryItem)HavokItem).BinaryWriteTranslator).Write(
                    item: HavokItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.TextureSpecularExponent,
                header: translationParams.ConvertToCustom(RecordTypes.SNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IGrassGetter>>.Instance.Write(
                writer: writer,
                items: item.PotentialGrass,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IGrassGetter> subItem, TypedWriteParams? conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.GNAM));
                });
        }

        public void Write(
            MutagenWriter writer,
            ILandTextureGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Record(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.LTEX)))
            {
                try
                {
                    OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        translationParams: translationParams);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Enrich(ex, item);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (ILandTextureGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (ILandTextureGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (ILandTextureGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class LandTextureBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static LandTextureBinaryCreateTranslation Instance = new LandTextureBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.LTEX;
        public static void FillBinaryStructs(
            ILandTextureInternal item,
            MutagenFrame frame)
        {
            OblivionMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            ILandTextureInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.ICON:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Icon = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)LandTexture_FieldIndex.Icon;
                }
                case RecordTypeInts.HNAM:
                {
                    item.Havok = Mutagen.Bethesda.Oblivion.HavokData.CreateFromBinary(frame: frame);
                    return (int)LandTexture_FieldIndex.Havok;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TextureSpecularExponent = frame.ReadUInt8();
                    return (int)LandTexture_FieldIndex.TextureSpecularExponent;
                }
                case RecordTypeInts.GNAM:
                {
                    item.PotentialGrass.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IGrassGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.GNAM),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)LandTexture_FieldIndex.PotentialGrass;
                }
                default:
                    return OblivionMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class LandTextureBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LandTextureBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        ILandTextureGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LandTexture_Registration.Instance;
        public new static LandTexture_Registration StaticRegistration => LandTexture_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LandTextureCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LandTextureSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => LandTextureCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LandTextureBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((LandTextureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ILandTexture);


        #region Icon
        private int? _IconLocation;
        public String? Icon => _IconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _IconLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region Havok
        private RangeInt32? _HavokLocation;
        public IHavokDataGetter? Havok => _HavokLocation.HasValue ? HavokDataBinaryOverlay.HavokDataFactory(new OverlayStream(_data.Slice(_HavokLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region TextureSpecularExponent
        private int? _TextureSpecularExponentLocation;
        public Byte? TextureSpecularExponent => _TextureSpecularExponentLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _TextureSpecularExponentLocation.Value, _package.MetaData.Constants)[0] : default(Byte?);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IGrassGetter>> PotentialGrass { get; private set; } = ListExt.Empty<IFormLinkGetter<IGrassGetter>>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected LandTextureBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static LandTextureBinaryOverlay LandTextureFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            stream = PluginUtilityTranslation.DecompressStream(stream);
            var ret = new LandTextureBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0xC + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static LandTextureBinaryOverlay LandTextureFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return LandTextureFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.ICON:
                {
                    _IconLocation = (stream.Position - offset);
                    return (int)LandTexture_FieldIndex.Icon;
                }
                case RecordTypeInts.HNAM:
                {
                    _HavokLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)LandTexture_FieldIndex.Havok;
                }
                case RecordTypeInts.SNAM:
                {
                    _TextureSpecularExponentLocation = (stream.Position - offset);
                    return (int)LandTexture_FieldIndex.TextureSpecularExponent;
                }
                case RecordTypeInts.GNAM:
                {
                    this.PotentialGrass = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IGrassGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IGrassGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            parseParams: parseParams));
                    return (int)LandTexture_FieldIndex.PotentialGrass;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LandTextureMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<LandTexture>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ILandTextureGetter rhs) return false;
            return ((LandTextureCommon)((ILandTextureGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(ILandTextureGetter? obj)
        {
            return ((LandTextureCommon)((ILandTextureGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((LandTextureCommon)((ILandTextureGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

