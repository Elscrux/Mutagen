/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Oblivion.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class AIPackageSchedule :
        IAIPackageSchedule,
        IEquatable<IAIPackageScheduleGetter>,
        ILoquiObjectSetter<AIPackageSchedule>
    {
        #region Ctor
        public AIPackageSchedule()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Month
        public Month Month { get; set; } = default(Month);
        #endregion
        #region DayOfWeek
        public Weekday DayOfWeek { get; set; } = default(Weekday);
        #endregion
        #region Day
        public Byte Day { get; set; } = default(Byte);
        #endregion
        #region Time
        public Byte Time { get; set; } = default(Byte);
        #endregion
        #region Duration
        public Int32 Duration { get; set; } = default(Int32);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            AIPackageScheduleMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IAIPackageScheduleGetter rhs) return false;
            return ((AIPackageScheduleCommon)((IAIPackageScheduleGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAIPackageScheduleGetter? obj)
        {
            return ((AIPackageScheduleCommon)((IAIPackageScheduleGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((AIPackageScheduleCommon)((IAIPackageScheduleGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Month = initialValue;
                this.DayOfWeek = initialValue;
                this.Day = initialValue;
                this.Time = initialValue;
                this.Duration = initialValue;
            }

            public Mask(
                TItem Month,
                TItem DayOfWeek,
                TItem Day,
                TItem Time,
                TItem Duration)
            {
                this.Month = Month;
                this.DayOfWeek = DayOfWeek;
                this.Day = Day;
                this.Time = Time;
                this.Duration = Duration;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Month;
            public TItem DayOfWeek;
            public TItem Day;
            public TItem Time;
            public TItem Duration;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Month, rhs.Month)) return false;
                if (!object.Equals(this.DayOfWeek, rhs.DayOfWeek)) return false;
                if (!object.Equals(this.Day, rhs.Day)) return false;
                if (!object.Equals(this.Time, rhs.Time)) return false;
                if (!object.Equals(this.Duration, rhs.Duration)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Month);
                hash.Add(this.DayOfWeek);
                hash.Add(this.Day);
                hash.Add(this.Time);
                hash.Add(this.Duration);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Month)) return false;
                if (!eval(this.DayOfWeek)) return false;
                if (!eval(this.Day)) return false;
                if (!eval(this.Time)) return false;
                if (!eval(this.Duration)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Month)) return true;
                if (eval(this.DayOfWeek)) return true;
                if (eval(this.Day)) return true;
                if (eval(this.Time)) return true;
                if (eval(this.Duration)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AIPackageSchedule.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Month = eval(this.Month);
                obj.DayOfWeek = eval(this.DayOfWeek);
                obj.Day = eval(this.Day);
                obj.Time = eval(this.Time);
                obj.Duration = eval(this.Duration);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(AIPackageSchedule.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, AIPackageSchedule.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(AIPackageSchedule.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Month ?? true)
                    {
                        sb.AppendItem(Month, "Month");
                    }
                    if (printMask?.DayOfWeek ?? true)
                    {
                        sb.AppendItem(DayOfWeek, "DayOfWeek");
                    }
                    if (printMask?.Day ?? true)
                    {
                        sb.AppendItem(Day, "Day");
                    }
                    if (printMask?.Time ?? true)
                    {
                        sb.AppendItem(Time, "Time");
                    }
                    if (printMask?.Duration ?? true)
                    {
                        sb.AppendItem(Duration, "Duration");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Month;
            public Exception? DayOfWeek;
            public Exception? Day;
            public Exception? Time;
            public Exception? Duration;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
                switch (enu)
                {
                    case AIPackageSchedule_FieldIndex.Month:
                        return Month;
                    case AIPackageSchedule_FieldIndex.DayOfWeek:
                        return DayOfWeek;
                    case AIPackageSchedule_FieldIndex.Day:
                        return Day;
                    case AIPackageSchedule_FieldIndex.Time:
                        return Time;
                    case AIPackageSchedule_FieldIndex.Duration:
                        return Duration;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
                switch (enu)
                {
                    case AIPackageSchedule_FieldIndex.Month:
                        this.Month = ex;
                        break;
                    case AIPackageSchedule_FieldIndex.DayOfWeek:
                        this.DayOfWeek = ex;
                        break;
                    case AIPackageSchedule_FieldIndex.Day:
                        this.Day = ex;
                        break;
                    case AIPackageSchedule_FieldIndex.Time:
                        this.Time = ex;
                        break;
                    case AIPackageSchedule_FieldIndex.Duration:
                        this.Duration = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                AIPackageSchedule_FieldIndex enu = (AIPackageSchedule_FieldIndex)index;
                switch (enu)
                {
                    case AIPackageSchedule_FieldIndex.Month:
                        this.Month = (Exception?)obj;
                        break;
                    case AIPackageSchedule_FieldIndex.DayOfWeek:
                        this.DayOfWeek = (Exception?)obj;
                        break;
                    case AIPackageSchedule_FieldIndex.Day:
                        this.Day = (Exception?)obj;
                        break;
                    case AIPackageSchedule_FieldIndex.Time:
                        this.Time = (Exception?)obj;
                        break;
                    case AIPackageSchedule_FieldIndex.Duration:
                        this.Duration = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Month != null) return true;
                if (DayOfWeek != null) return true;
                if (Day != null) return true;
                if (Time != null) return true;
                if (Duration != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Month, "Month");
                }
                {
                    sb.AppendItem(DayOfWeek, "DayOfWeek");
                }
                {
                    sb.AppendItem(Day, "Day");
                }
                {
                    sb.AppendItem(Time, "Time");
                }
                {
                    sb.AppendItem(Duration, "Duration");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Month = this.Month.Combine(rhs.Month);
                ret.DayOfWeek = this.DayOfWeek.Combine(rhs.DayOfWeek);
                ret.Day = this.Day.Combine(rhs.Day);
                ret.Time = this.Time.Combine(rhs.Time);
                ret.Duration = this.Duration.Combine(rhs.Duration);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Month;
            public bool DayOfWeek;
            public bool Day;
            public bool Time;
            public bool Duration;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Month = defaultOn;
                this.DayOfWeek = defaultOn;
                this.Day = defaultOn;
                this.Time = defaultOn;
                this.Duration = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Month, null));
                ret.Add((DayOfWeek, null));
                ret.Add((Day, null));
                ret.Add((Time, null));
                ret.Add((Duration, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => AIPackageScheduleBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AIPackageScheduleBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static AIPackageSchedule CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new AIPackageSchedule();
            ((AIPackageScheduleSetterCommon)((IAIPackageScheduleGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out AIPackageSchedule item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((AIPackageScheduleSetterCommon)((IAIPackageScheduleGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static AIPackageSchedule GetNew()
        {
            return new AIPackageSchedule();
        }

    }
    #endregion

    #region Interface
    public partial interface IAIPackageSchedule :
        IAIPackageScheduleGetter,
        ILoquiObjectSetter<IAIPackageSchedule>
    {
        new Month Month { get; set; }
        new Weekday DayOfWeek { get; set; }
        new Byte Day { get; set; }
        new Byte Time { get; set; }
        new Int32 Duration { get; set; }
    }

    public partial interface IAIPackageScheduleGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IAIPackageScheduleGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => AIPackageSchedule_Registration.Instance;
        Month Month { get; }
        Weekday DayOfWeek { get; }
        Byte Day { get; }
        Byte Time { get; }
        Int32 Duration { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class AIPackageScheduleMixIn
    {
        public static void Clear(this IAIPackageSchedule item)
        {
            ((AIPackageScheduleSetterCommon)((IAIPackageScheduleGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AIPackageSchedule.Mask<bool> GetEqualsMask(
            this IAIPackageScheduleGetter item,
            IAIPackageScheduleGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AIPackageScheduleCommon)((IAIPackageScheduleGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IAIPackageScheduleGetter item,
            string? name = null,
            AIPackageSchedule.Mask<bool>? printMask = null)
        {
            return ((AIPackageScheduleCommon)((IAIPackageScheduleGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IAIPackageScheduleGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            AIPackageSchedule.Mask<bool>? printMask = null)
        {
            ((AIPackageScheduleCommon)((IAIPackageScheduleGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IAIPackageScheduleGetter item,
            IAIPackageScheduleGetter rhs,
            AIPackageSchedule.TranslationMask? equalsMask = null)
        {
            return ((AIPackageScheduleCommon)((IAIPackageScheduleGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IAIPackageSchedule lhs,
            IAIPackageScheduleGetter rhs)
        {
            ((AIPackageScheduleSetterTranslationCommon)((IAIPackageScheduleGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IAIPackageSchedule lhs,
            IAIPackageScheduleGetter rhs,
            AIPackageSchedule.TranslationMask? copyMask = null)
        {
            ((AIPackageScheduleSetterTranslationCommon)((IAIPackageScheduleGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IAIPackageSchedule lhs,
            IAIPackageScheduleGetter rhs,
            out AIPackageSchedule.ErrorMask errorMask,
            AIPackageSchedule.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AIPackageScheduleSetterTranslationCommon)((IAIPackageScheduleGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = AIPackageSchedule.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAIPackageSchedule lhs,
            IAIPackageScheduleGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AIPackageScheduleSetterTranslationCommon)((IAIPackageScheduleGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static AIPackageSchedule DeepCopy(
            this IAIPackageScheduleGetter item,
            AIPackageSchedule.TranslationMask? copyMask = null)
        {
            return ((AIPackageScheduleSetterTranslationCommon)((IAIPackageScheduleGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AIPackageSchedule DeepCopy(
            this IAIPackageScheduleGetter item,
            out AIPackageSchedule.ErrorMask errorMask,
            AIPackageSchedule.TranslationMask? copyMask = null)
        {
            return ((AIPackageScheduleSetterTranslationCommon)((IAIPackageScheduleGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AIPackageSchedule DeepCopy(
            this IAIPackageScheduleGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AIPackageScheduleSetterTranslationCommon)((IAIPackageScheduleGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IAIPackageSchedule item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((AIPackageScheduleSetterCommon)((IAIPackageScheduleGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    #region Field Index
    internal enum AIPackageSchedule_FieldIndex
    {
        Month = 0,
        DayOfWeek = 1,
        Day = 2,
        Time = 3,
        Duration = 4,
    }
    #endregion

    #region Registration
    internal partial class AIPackageSchedule_Registration : ILoquiRegistration
    {
        public static readonly AIPackageSchedule_Registration Instance = new AIPackageSchedule_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(AIPackageSchedule.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AIPackageSchedule.ErrorMask);

        public static readonly Type ClassType = typeof(AIPackageSchedule);

        public static readonly Type GetterType = typeof(IAIPackageScheduleGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAIPackageSchedule);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.AIPackageSchedule";

        public const string Name = "AIPackageSchedule";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.PSDT;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.PSDT);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(AIPackageScheduleBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class AIPackageScheduleSetterCommon
    {
        public static readonly AIPackageScheduleSetterCommon Instance = new AIPackageScheduleSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IAIPackageSchedule item)
        {
            ClearPartial();
            item.Month = default(Month);
            item.DayOfWeek = default(Weekday);
            item.Day = default(Byte);
            item.Time = default(Byte);
            item.Duration = default(Int32);
        }
        
        #region Mutagen
        public void RemapLinks(IAIPackageSchedule obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAIPackageSchedule item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.PSDT),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: AIPackageScheduleBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class AIPackageScheduleCommon
    {
        public static readonly AIPackageScheduleCommon Instance = new AIPackageScheduleCommon();

        public AIPackageSchedule.Mask<bool> GetEqualsMask(
            IAIPackageScheduleGetter item,
            IAIPackageScheduleGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AIPackageSchedule.Mask<bool>(false);
            ((AIPackageScheduleCommon)((IAIPackageScheduleGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAIPackageScheduleGetter item,
            IAIPackageScheduleGetter rhs,
            AIPackageSchedule.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Month = item.Month == rhs.Month;
            ret.DayOfWeek = item.DayOfWeek == rhs.DayOfWeek;
            ret.Day = item.Day == rhs.Day;
            ret.Time = item.Time == rhs.Time;
            ret.Duration = item.Duration == rhs.Duration;
        }
        
        public string Print(
            IAIPackageScheduleGetter item,
            string? name = null,
            AIPackageSchedule.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IAIPackageScheduleGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            AIPackageSchedule.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"AIPackageSchedule =>");
            }
            else
            {
                sb.AppendLine($"{name} (AIPackageSchedule) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IAIPackageScheduleGetter item,
            StructuredStringBuilder sb,
            AIPackageSchedule.Mask<bool>? printMask = null)
        {
            if (printMask?.Month ?? true)
            {
                sb.AppendItem(item.Month, "Month");
            }
            if (printMask?.DayOfWeek ?? true)
            {
                sb.AppendItem(item.DayOfWeek, "DayOfWeek");
            }
            if (printMask?.Day ?? true)
            {
                sb.AppendItem(item.Day, "Day");
            }
            if (printMask?.Time ?? true)
            {
                sb.AppendItem(item.Time, "Time");
            }
            if (printMask?.Duration ?? true)
            {
                sb.AppendItem(item.Duration, "Duration");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAIPackageScheduleGetter? lhs,
            IAIPackageScheduleGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)AIPackageSchedule_FieldIndex.Month) ?? true))
            {
                if (lhs.Month != rhs.Month) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AIPackageSchedule_FieldIndex.DayOfWeek) ?? true))
            {
                if (lhs.DayOfWeek != rhs.DayOfWeek) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AIPackageSchedule_FieldIndex.Day) ?? true))
            {
                if (lhs.Day != rhs.Day) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AIPackageSchedule_FieldIndex.Time) ?? true))
            {
                if (lhs.Time != rhs.Time) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AIPackageSchedule_FieldIndex.Duration) ?? true))
            {
                if (lhs.Duration != rhs.Duration) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IAIPackageScheduleGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Month);
            hash.Add(item.DayOfWeek);
            hash.Add(item.Day);
            hash.Add(item.Time);
            hash.Add(item.Duration);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return AIPackageSchedule.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IAIPackageScheduleGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class AIPackageScheduleSetterTranslationCommon
    {
        public static readonly AIPackageScheduleSetterTranslationCommon Instance = new AIPackageScheduleSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IAIPackageSchedule item,
            IAIPackageScheduleGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)AIPackageSchedule_FieldIndex.Month) ?? true))
            {
                item.Month = rhs.Month;
            }
            if ((copyMask?.GetShouldTranslate((int)AIPackageSchedule_FieldIndex.DayOfWeek) ?? true))
            {
                item.DayOfWeek = rhs.DayOfWeek;
            }
            if ((copyMask?.GetShouldTranslate((int)AIPackageSchedule_FieldIndex.Day) ?? true))
            {
                item.Day = rhs.Day;
            }
            if ((copyMask?.GetShouldTranslate((int)AIPackageSchedule_FieldIndex.Time) ?? true))
            {
                item.Time = rhs.Time;
            }
            if ((copyMask?.GetShouldTranslate((int)AIPackageSchedule_FieldIndex.Duration) ?? true))
            {
                item.Duration = rhs.Duration;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IAIPackageSchedule item,
            IAIPackageScheduleGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public AIPackageSchedule DeepCopy(
            IAIPackageScheduleGetter item,
            AIPackageSchedule.TranslationMask? copyMask = null)
        {
            AIPackageSchedule ret = (AIPackageSchedule)((AIPackageScheduleCommon)((IAIPackageScheduleGetter)item).CommonInstance()!).GetNew();
            ((AIPackageScheduleSetterTranslationCommon)((IAIPackageScheduleGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public AIPackageSchedule DeepCopy(
            IAIPackageScheduleGetter item,
            out AIPackageSchedule.ErrorMask errorMask,
            AIPackageSchedule.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AIPackageSchedule ret = (AIPackageSchedule)((AIPackageScheduleCommon)((IAIPackageScheduleGetter)item).CommonInstance()!).GetNew();
            ((AIPackageScheduleSetterTranslationCommon)((IAIPackageScheduleGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = AIPackageSchedule.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public AIPackageSchedule DeepCopy(
            IAIPackageScheduleGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AIPackageSchedule ret = (AIPackageSchedule)((AIPackageScheduleCommon)((IAIPackageScheduleGetter)item).CommonInstance()!).GetNew();
            ((AIPackageScheduleSetterTranslationCommon)((IAIPackageScheduleGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class AIPackageSchedule
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AIPackageSchedule_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => AIPackageSchedule_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => AIPackageScheduleCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return AIPackageScheduleSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => AIPackageScheduleSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IAIPackageScheduleGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IAIPackageScheduleGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IAIPackageScheduleGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion
{
    public partial class AIPackageScheduleBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly AIPackageScheduleBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IAIPackageScheduleGetter item,
            MutagenWriter writer)
        {
            EnumBinaryTranslation<Month, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Month,
                length: 1);
            EnumBinaryTranslation<Weekday, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.DayOfWeek,
                length: 1);
            writer.Write(item.Day);
            writer.Write(item.Time);
            writer.Write(item.Duration);
        }

        public void Write(
            MutagenWriter writer,
            IAIPackageScheduleGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.PSDT),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IAIPackageScheduleGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class AIPackageScheduleBinaryCreateTranslation
    {
        public static readonly AIPackageScheduleBinaryCreateTranslation Instance = new AIPackageScheduleBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IAIPackageSchedule item,
            MutagenFrame frame)
        {
            item.Month = EnumBinaryTranslation<Month, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 1);
            item.DayOfWeek = EnumBinaryTranslation<Weekday, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 1);
            item.Day = frame.ReadUInt8();
            item.Time = frame.ReadUInt8();
            item.Duration = frame.ReadInt32();
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class AIPackageScheduleBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IAIPackageScheduleGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AIPackageScheduleBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion
{
    internal partial class AIPackageScheduleBinaryOverlay :
        PluginBinaryOverlay,
        IAIPackageScheduleGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AIPackageSchedule_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => AIPackageSchedule_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => AIPackageScheduleCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => AIPackageScheduleSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IAIPackageScheduleGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IAIPackageScheduleGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IAIPackageScheduleGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => AIPackageScheduleBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AIPackageScheduleBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Month Month => (Month)_structData.Span.Slice(0x0, 0x1)[0];
        public Weekday DayOfWeek => (Weekday)_structData.Span.Slice(0x1, 0x1)[0];
        public Byte Day => _structData.Span[0x2];
        public Byte Time => _structData.Span[0x3];
        public Int32 Duration => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0x4, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected AIPackageScheduleBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IAIPackageScheduleGetter AIPackageScheduleFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x8,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new AIPackageScheduleBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x8 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IAIPackageScheduleGetter AIPackageScheduleFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return AIPackageScheduleFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            AIPackageScheduleMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IAIPackageScheduleGetter rhs) return false;
            return ((AIPackageScheduleCommon)((IAIPackageScheduleGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAIPackageScheduleGetter? obj)
        {
            return ((AIPackageScheduleCommon)((IAIPackageScheduleGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((AIPackageScheduleCommon)((IAIPackageScheduleGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

