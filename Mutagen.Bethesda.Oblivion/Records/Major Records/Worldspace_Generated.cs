/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.RecordTypeMapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Worldspace :
        Place,
        IEquatable<IWorldspaceGetter>,
        ILoquiObjectSetter<Worldspace>,
        IWorldspaceInternal
    {
        #region Ctor
        protected Worldspace()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IWorldspaceGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Parent
        private readonly IFormLinkNullable<IWorldspaceGetter> _Parent = new FormLinkNullable<IWorldspaceGetter>();
        public IFormLinkNullable<IWorldspaceGetter> Parent
        {
            get => _Parent;
            set => _Parent.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IWorldspaceGetter> IWorldspaceGetter.Parent => this.Parent;
        #endregion
        #region Climate
        private readonly IFormLinkNullable<IClimateGetter> _Climate = new FormLinkNullable<IClimateGetter>();
        public IFormLinkNullable<IClimateGetter> Climate
        {
            get => _Climate;
            set => _Climate.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IClimateGetter> IWorldspaceGetter.Climate => this.Climate;
        #endregion
        #region Water
        private readonly IFormLinkNullable<IWaterGetter> _Water = new FormLinkNullable<IWaterGetter>();
        public IFormLinkNullable<IWaterGetter> Water
        {
            get => _Water;
            set => _Water.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IWaterGetter> IWorldspaceGetter.Water => this.Water;
        #endregion
        #region Icon
        public String? Icon { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IWorldspaceGetter.Icon => this.Icon;
        #endregion
        #region MapData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MapData? _MapData;
        public MapData? MapData
        {
            get => _MapData;
            set => _MapData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMapDataGetter? IWorldspaceGetter.MapData => this.MapData;
        #endregion
        #region Flags
        public Worldspace.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Worldspace.Flag? IWorldspaceGetter.Flags => this.Flags;
        #endregion
        #region ObjectBoundsMin
        public P2Float? ObjectBoundsMin { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        P2Float? IWorldspaceGetter.ObjectBoundsMin => this.ObjectBoundsMin;
        #endregion
        #region ObjectBoundsMax
        public P2Float? ObjectBoundsMax { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        P2Float? IWorldspaceGetter.ObjectBoundsMax => this.ObjectBoundsMax;
        #endregion
        #region Music
        public MusicType? Music { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        MusicType? IWorldspaceGetter.Music => this.Music;
        #endregion
        #region OffsetData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _OffsetData;
        public MemorySlice<Byte>? OffsetData
        {
            get => this._OffsetData;
            set => this._OffsetData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IWorldspaceGetter.OffsetData => this.OffsetData;
        #endregion
        #region Road
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Road? _Road;
        public Road? Road
        {
            get => _Road;
            set => _Road = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRoadGetter? IWorldspaceGetter.Road => this.Road;
        #endregion
        #region TopCell
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Cell? _TopCell;
        public Cell? TopCell
        {
            get => _TopCell;
            set => _TopCell = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICellGetter? IWorldspaceGetter.TopCell => this.TopCell;
        #endregion
        #region SubCellsTimestamp
        public Int32 SubCellsTimestamp { get; set; } = default;
        #endregion
        #region SubCells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<WorldspaceBlock> _SubCells = new ExtendedList<WorldspaceBlock>();
        public ExtendedList<WorldspaceBlock> SubCells
        {
            get => this._SubCells;
            init => this._SubCells = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IWorldspaceBlockGetter> IWorldspaceGetter.SubCells => _SubCells;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WorldspaceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Place.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Parent = initialValue;
                this.Climate = initialValue;
                this.Water = initialValue;
                this.Icon = initialValue;
                this.MapData = new MaskItem<TItem, MapData.Mask<TItem>?>(initialValue, new MapData.Mask<TItem>(initialValue));
                this.Flags = initialValue;
                this.ObjectBoundsMin = initialValue;
                this.ObjectBoundsMax = initialValue;
                this.Music = initialValue;
                this.OffsetData = initialValue;
                this.Road = new MaskItem<TItem, Road.Mask<TItem>?>(initialValue, new Road.Mask<TItem>(initialValue));
                this.TopCell = new MaskItem<TItem, Cell.Mask<TItem>?>(initialValue, new Cell.Mask<TItem>(initialValue));
                this.SubCellsTimestamp = initialValue;
                this.SubCells = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WorldspaceBlock.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, WorldspaceBlock.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Name,
                TItem Parent,
                TItem Climate,
                TItem Water,
                TItem Icon,
                TItem MapData,
                TItem Flags,
                TItem ObjectBoundsMin,
                TItem ObjectBoundsMax,
                TItem Music,
                TItem OffsetData,
                TItem Road,
                TItem TopCell,
                TItem SubCellsTimestamp,
                TItem SubCells)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Name = Name;
                this.Parent = Parent;
                this.Climate = Climate;
                this.Water = Water;
                this.Icon = Icon;
                this.MapData = new MaskItem<TItem, MapData.Mask<TItem>?>(MapData, new MapData.Mask<TItem>(MapData));
                this.Flags = Flags;
                this.ObjectBoundsMin = ObjectBoundsMin;
                this.ObjectBoundsMax = ObjectBoundsMax;
                this.Music = Music;
                this.OffsetData = OffsetData;
                this.Road = new MaskItem<TItem, Road.Mask<TItem>?>(Road, new Road.Mask<TItem>(Road));
                this.TopCell = new MaskItem<TItem, Cell.Mask<TItem>?>(TopCell, new Cell.Mask<TItem>(TopCell));
                this.SubCellsTimestamp = SubCellsTimestamp;
                this.SubCells = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WorldspaceBlock.Mask<TItem>?>>?>(SubCells, Enumerable.Empty<MaskItemIndexed<TItem, WorldspaceBlock.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem Parent;
            public TItem Climate;
            public TItem Water;
            public TItem Icon;
            public MaskItem<TItem, MapData.Mask<TItem>?>? MapData { get; set; }
            public TItem Flags;
            public TItem ObjectBoundsMin;
            public TItem ObjectBoundsMax;
            public TItem Music;
            public TItem OffsetData;
            public MaskItem<TItem, Road.Mask<TItem>?>? Road { get; set; }
            public MaskItem<TItem, Cell.Mask<TItem>?>? TopCell { get; set; }
            public TItem SubCellsTimestamp;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WorldspaceBlock.Mask<TItem>?>>?>? SubCells;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Parent, rhs.Parent)) return false;
                if (!object.Equals(this.Climate, rhs.Climate)) return false;
                if (!object.Equals(this.Water, rhs.Water)) return false;
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
                if (!object.Equals(this.MapData, rhs.MapData)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.ObjectBoundsMin, rhs.ObjectBoundsMin)) return false;
                if (!object.Equals(this.ObjectBoundsMax, rhs.ObjectBoundsMax)) return false;
                if (!object.Equals(this.Music, rhs.Music)) return false;
                if (!object.Equals(this.OffsetData, rhs.OffsetData)) return false;
                if (!object.Equals(this.Road, rhs.Road)) return false;
                if (!object.Equals(this.TopCell, rhs.TopCell)) return false;
                if (!object.Equals(this.SubCellsTimestamp, rhs.SubCellsTimestamp)) return false;
                if (!object.Equals(this.SubCells, rhs.SubCells)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Parent);
                hash.Add(this.Climate);
                hash.Add(this.Water);
                hash.Add(this.Icon);
                hash.Add(this.MapData);
                hash.Add(this.Flags);
                hash.Add(this.ObjectBoundsMin);
                hash.Add(this.ObjectBoundsMax);
                hash.Add(this.Music);
                hash.Add(this.OffsetData);
                hash.Add(this.Road);
                hash.Add(this.TopCell);
                hash.Add(this.SubCellsTimestamp);
                hash.Add(this.SubCells);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Parent)) return false;
                if (!eval(this.Climate)) return false;
                if (!eval(this.Water)) return false;
                if (!eval(this.Icon)) return false;
                if (MapData != null)
                {
                    if (!eval(this.MapData.Overall)) return false;
                    if (this.MapData.Specific != null && !this.MapData.Specific.All(eval)) return false;
                }
                if (!eval(this.Flags)) return false;
                if (!eval(this.ObjectBoundsMin)) return false;
                if (!eval(this.ObjectBoundsMax)) return false;
                if (!eval(this.Music)) return false;
                if (!eval(this.OffsetData)) return false;
                if (Road != null)
                {
                    if (!eval(this.Road.Overall)) return false;
                    if (this.Road.Specific != null && !this.Road.Specific.All(eval)) return false;
                }
                if (TopCell != null)
                {
                    if (!eval(this.TopCell.Overall)) return false;
                    if (this.TopCell.Specific != null && !this.TopCell.Specific.All(eval)) return false;
                }
                if (!eval(this.SubCellsTimestamp)) return false;
                if (this.SubCells != null)
                {
                    if (!eval(this.SubCells.Overall)) return false;
                    if (this.SubCells.Specific != null)
                    {
                        foreach (var item in this.SubCells.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Parent)) return true;
                if (eval(this.Climate)) return true;
                if (eval(this.Water)) return true;
                if (eval(this.Icon)) return true;
                if (MapData != null)
                {
                    if (eval(this.MapData.Overall)) return true;
                    if (this.MapData.Specific != null && this.MapData.Specific.Any(eval)) return true;
                }
                if (eval(this.Flags)) return true;
                if (eval(this.ObjectBoundsMin)) return true;
                if (eval(this.ObjectBoundsMax)) return true;
                if (eval(this.Music)) return true;
                if (eval(this.OffsetData)) return true;
                if (Road != null)
                {
                    if (eval(this.Road.Overall)) return true;
                    if (this.Road.Specific != null && this.Road.Specific.Any(eval)) return true;
                }
                if (TopCell != null)
                {
                    if (eval(this.TopCell.Overall)) return true;
                    if (this.TopCell.Specific != null && this.TopCell.Specific.Any(eval)) return true;
                }
                if (eval(this.SubCellsTimestamp)) return true;
                if (this.SubCells != null)
                {
                    if (eval(this.SubCells.Overall)) return true;
                    if (this.SubCells.Specific != null)
                    {
                        foreach (var item in this.SubCells.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Worldspace.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Parent = eval(this.Parent);
                obj.Climate = eval(this.Climate);
                obj.Water = eval(this.Water);
                obj.Icon = eval(this.Icon);
                obj.MapData = this.MapData == null ? null : new MaskItem<R, MapData.Mask<R>?>(eval(this.MapData.Overall), this.MapData.Specific?.Translate(eval));
                obj.Flags = eval(this.Flags);
                obj.ObjectBoundsMin = eval(this.ObjectBoundsMin);
                obj.ObjectBoundsMax = eval(this.ObjectBoundsMax);
                obj.Music = eval(this.Music);
                obj.OffsetData = eval(this.OffsetData);
                obj.Road = this.Road == null ? null : new MaskItem<R, Road.Mask<R>?>(eval(this.Road.Overall), this.Road.Specific?.Translate(eval));
                obj.TopCell = this.TopCell == null ? null : new MaskItem<R, Cell.Mask<R>?>(eval(this.TopCell.Overall), this.TopCell.Specific?.Translate(eval));
                obj.SubCellsTimestamp = eval(this.SubCellsTimestamp);
                if (SubCells != null)
                {
                    obj.SubCells = new MaskItem<R, IEnumerable<MaskItemIndexed<R, WorldspaceBlock.Mask<R>?>>?>(eval(this.SubCells.Overall), Enumerable.Empty<MaskItemIndexed<R, WorldspaceBlock.Mask<R>?>>());
                    if (SubCells.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, WorldspaceBlock.Mask<R>?>>();
                        obj.SubCells.Specific = l;
                        foreach (var item in SubCells.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, WorldspaceBlock.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, WorldspaceBlock.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Worldspace.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Worldspace.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Worldspace.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Parent ?? true)
                    {
                        fg.AppendItem(Parent, "Parent");
                    }
                    if (printMask?.Climate ?? true)
                    {
                        fg.AppendItem(Climate, "Climate");
                    }
                    if (printMask?.Water ?? true)
                    {
                        fg.AppendItem(Water, "Water");
                    }
                    if (printMask?.Icon ?? true)
                    {
                        fg.AppendItem(Icon, "Icon");
                    }
                    if (printMask?.MapData?.Overall ?? true)
                    {
                        MapData?.ToString(fg);
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.ObjectBoundsMin ?? true)
                    {
                        fg.AppendItem(ObjectBoundsMin, "ObjectBoundsMin");
                    }
                    if (printMask?.ObjectBoundsMax ?? true)
                    {
                        fg.AppendItem(ObjectBoundsMax, "ObjectBoundsMax");
                    }
                    if (printMask?.Music ?? true)
                    {
                        fg.AppendItem(Music, "Music");
                    }
                    if (printMask?.OffsetData ?? true)
                    {
                        fg.AppendItem(OffsetData, "OffsetData");
                    }
                    if (printMask?.Road?.Overall ?? true)
                    {
                        Road?.ToString(fg);
                    }
                    if (printMask?.TopCell?.Overall ?? true)
                    {
                        TopCell?.ToString(fg);
                    }
                    if (printMask?.SubCellsTimestamp ?? true)
                    {
                        fg.AppendItem(SubCellsTimestamp, "SubCellsTimestamp");
                    }
                    if ((printMask?.SubCells?.Overall ?? true)
                        && SubCells is {} SubCellsItem)
                    {
                        fg.AppendLine("SubCells =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(SubCellsItem.Overall);
                            if (SubCellsItem.Specific != null)
                            {
                                foreach (var subItem in SubCellsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Place.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Parent;
            public Exception? Climate;
            public Exception? Water;
            public Exception? Icon;
            public MaskItem<Exception?, MapData.ErrorMask?>? MapData;
            public Exception? Flags;
            public Exception? ObjectBoundsMin;
            public Exception? ObjectBoundsMax;
            public Exception? Music;
            public Exception? OffsetData;
            public MaskItem<Exception?, Road.ErrorMask?>? Road;
            public MaskItem<Exception?, Cell.ErrorMask?>? TopCell;
            public Exception? SubCellsTimestamp;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WorldspaceBlock.ErrorMask?>>?>? SubCells;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
                switch (enu)
                {
                    case Worldspace_FieldIndex.Name:
                        return Name;
                    case Worldspace_FieldIndex.Parent:
                        return Parent;
                    case Worldspace_FieldIndex.Climate:
                        return Climate;
                    case Worldspace_FieldIndex.Water:
                        return Water;
                    case Worldspace_FieldIndex.Icon:
                        return Icon;
                    case Worldspace_FieldIndex.MapData:
                        return MapData;
                    case Worldspace_FieldIndex.Flags:
                        return Flags;
                    case Worldspace_FieldIndex.ObjectBoundsMin:
                        return ObjectBoundsMin;
                    case Worldspace_FieldIndex.ObjectBoundsMax:
                        return ObjectBoundsMax;
                    case Worldspace_FieldIndex.Music:
                        return Music;
                    case Worldspace_FieldIndex.OffsetData:
                        return OffsetData;
                    case Worldspace_FieldIndex.Road:
                        return Road;
                    case Worldspace_FieldIndex.TopCell:
                        return TopCell;
                    case Worldspace_FieldIndex.SubCellsTimestamp:
                        return SubCellsTimestamp;
                    case Worldspace_FieldIndex.SubCells:
                        return SubCells;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
                switch (enu)
                {
                    case Worldspace_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Worldspace_FieldIndex.Parent:
                        this.Parent = ex;
                        break;
                    case Worldspace_FieldIndex.Climate:
                        this.Climate = ex;
                        break;
                    case Worldspace_FieldIndex.Water:
                        this.Water = ex;
                        break;
                    case Worldspace_FieldIndex.Icon:
                        this.Icon = ex;
                        break;
                    case Worldspace_FieldIndex.MapData:
                        this.MapData = new MaskItem<Exception?, MapData.ErrorMask?>(ex, null);
                        break;
                    case Worldspace_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Worldspace_FieldIndex.ObjectBoundsMin:
                        this.ObjectBoundsMin = ex;
                        break;
                    case Worldspace_FieldIndex.ObjectBoundsMax:
                        this.ObjectBoundsMax = ex;
                        break;
                    case Worldspace_FieldIndex.Music:
                        this.Music = ex;
                        break;
                    case Worldspace_FieldIndex.OffsetData:
                        this.OffsetData = ex;
                        break;
                    case Worldspace_FieldIndex.Road:
                        this.Road = new MaskItem<Exception?, Road.ErrorMask?>(ex, null);
                        break;
                    case Worldspace_FieldIndex.TopCell:
                        this.TopCell = new MaskItem<Exception?, Cell.ErrorMask?>(ex, null);
                        break;
                    case Worldspace_FieldIndex.SubCellsTimestamp:
                        this.SubCellsTimestamp = ex;
                        break;
                    case Worldspace_FieldIndex.SubCells:
                        this.SubCells = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WorldspaceBlock.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
                switch (enu)
                {
                    case Worldspace_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.Parent:
                        this.Parent = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.Climate:
                        this.Climate = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.Water:
                        this.Water = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.Icon:
                        this.Icon = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.MapData:
                        this.MapData = (MaskItem<Exception?, MapData.ErrorMask?>?)obj;
                        break;
                    case Worldspace_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.ObjectBoundsMin:
                        this.ObjectBoundsMin = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.ObjectBoundsMax:
                        this.ObjectBoundsMax = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.Music:
                        this.Music = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.OffsetData:
                        this.OffsetData = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.Road:
                        this.Road = (MaskItem<Exception?, Road.ErrorMask?>?)obj;
                        break;
                    case Worldspace_FieldIndex.TopCell:
                        this.TopCell = (MaskItem<Exception?, Cell.ErrorMask?>?)obj;
                        break;
                    case Worldspace_FieldIndex.SubCellsTimestamp:
                        this.SubCellsTimestamp = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.SubCells:
                        this.SubCells = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WorldspaceBlock.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Parent != null) return true;
                if (Climate != null) return true;
                if (Water != null) return true;
                if (Icon != null) return true;
                if (MapData != null) return true;
                if (Flags != null) return true;
                if (ObjectBoundsMin != null) return true;
                if (ObjectBoundsMax != null) return true;
                if (Music != null) return true;
                if (OffsetData != null) return true;
                if (Road != null) return true;
                if (TopCell != null) return true;
                if (SubCellsTimestamp != null) return true;
                if (SubCells != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                fg.AppendItem(Parent, "Parent");
                fg.AppendItem(Climate, "Climate");
                fg.AppendItem(Water, "Water");
                fg.AppendItem(Icon, "Icon");
                MapData?.ToString(fg);
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(ObjectBoundsMin, "ObjectBoundsMin");
                fg.AppendItem(ObjectBoundsMax, "ObjectBoundsMax");
                fg.AppendItem(Music, "Music");
                fg.AppendItem(OffsetData, "OffsetData");
                Road?.ToString(fg);
                TopCell?.ToString(fg);
                fg.AppendItem(SubCellsTimestamp, "SubCellsTimestamp");
                if (SubCells is {} SubCellsItem)
                {
                    fg.AppendLine("SubCells =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(SubCellsItem.Overall);
                        if (SubCellsItem.Specific != null)
                        {
                            foreach (var subItem in SubCellsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Parent = this.Parent.Combine(rhs.Parent);
                ret.Climate = this.Climate.Combine(rhs.Climate);
                ret.Water = this.Water.Combine(rhs.Water);
                ret.Icon = this.Icon.Combine(rhs.Icon);
                ret.MapData = this.MapData.Combine(rhs.MapData, (l, r) => l.Combine(r));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.ObjectBoundsMin = this.ObjectBoundsMin.Combine(rhs.ObjectBoundsMin);
                ret.ObjectBoundsMax = this.ObjectBoundsMax.Combine(rhs.ObjectBoundsMax);
                ret.Music = this.Music.Combine(rhs.Music);
                ret.OffsetData = this.OffsetData.Combine(rhs.OffsetData);
                ret.Road = this.Road.Combine(rhs.Road, (l, r) => l.Combine(r));
                ret.TopCell = this.TopCell.Combine(rhs.TopCell, (l, r) => l.Combine(r));
                ret.SubCellsTimestamp = this.SubCellsTimestamp.Combine(rhs.SubCellsTimestamp);
                ret.SubCells = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WorldspaceBlock.ErrorMask?>>?>(ExceptionExt.Combine(this.SubCells?.Overall, rhs.SubCells?.Overall), ExceptionExt.Combine(this.SubCells?.Specific, rhs.SubCells?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Place.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Parent;
            public bool Climate;
            public bool Water;
            public bool Icon;
            public MapData.TranslationMask? MapData;
            public bool Flags;
            public bool ObjectBoundsMin;
            public bool ObjectBoundsMax;
            public bool Music;
            public bool OffsetData;
            public Road.TranslationMask? Road;
            public Cell.TranslationMask? TopCell;
            public bool SubCellsTimestamp;
            public WorldspaceBlock.TranslationMask? SubCells;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Parent = defaultOn;
                this.Climate = defaultOn;
                this.Water = defaultOn;
                this.Icon = defaultOn;
                this.Flags = defaultOn;
                this.ObjectBoundsMin = defaultOn;
                this.ObjectBoundsMax = defaultOn;
                this.Music = defaultOn;
                this.OffsetData = defaultOn;
                this.SubCellsTimestamp = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Parent, null));
                ret.Add((Climate, null));
                ret.Add((Water, null));
                ret.Add((Icon, null));
                ret.Add((MapData != null ? MapData.OnOverall : DefaultOn, MapData?.GetCrystal()));
                ret.Add((Flags, null));
                ret.Add((ObjectBoundsMin, null));
                ret.Add((ObjectBoundsMax, null));
                ret.Add((Music, null));
                ret.Add((OffsetData, null));
                ret.Add((Road != null ? Road.OnOverall : DefaultOn, Road?.GetCrystal()));
                ret.Add((TopCell != null ? TopCell.OnOverall : DefaultOn, TopCell?.GetCrystal()));
                ret.Add((SubCellsTimestamp, null));
                ret.Add((SubCells == null ? DefaultOn : !SubCells.GetCrystal().CopyNothing, SubCells?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Worldspace_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => WorldspaceCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WorldspaceSetterCommon.Instance.RemapLinks(this, mapping);
        public Worldspace(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private Worldspace(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Worldspace(IOblivionMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Worldspace(IOblivionMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Worldspace>.ToString(this);
        }

        protected override Type LinkType => typeof(IWorldspace);

        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecord> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecord> IMajorRecordEnumerable.EnumerateMajorRecords(Type? type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey) => this.Remove(formKey);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey, Type type, bool throwIfUnknown) => this.Remove(formKey, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(FormKey formKey, bool throwIfUnknown) => this.Remove<TMajor>(formKey, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(HashSet<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(TMajor record, bool throwIfUnknown) => this.Remove<TMajor>(record, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<TMajor> records, bool throwIfUnknown) => this.Remove<TMajor>(records, throwIfUnknown);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IWorldspaceGetter rhs) return false;
            return ((WorldspaceCommon)((IWorldspaceGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IWorldspaceGetter? obj)
        {
            return ((WorldspaceCommon)((IWorldspaceGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((WorldspaceCommon)((IWorldspaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WorldspaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((WorldspaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Worldspace CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new Worldspace();
            ((WorldspaceSetterCommon)((IWorldspaceGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Worldspace item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((WorldspaceSetterCommon)((IWorldspaceGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Worldspace GetNew()
        {
            return new Worldspace();
        }

    }
    #endregion

    #region Interface
    public partial interface IWorldspace :
        IFormLinkContainer,
        ILoquiObjectSetter<IWorldspaceInternal>,
        IMajorRecordEnumerable,
        INamed,
        INamedRequired,
        IPlaceInternal,
        IWorldspaceGetter
    {
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        new String? Name { get; set; }
        new IFormLinkNullable<IWorldspaceGetter> Parent { get; set; }
        new IFormLinkNullable<IClimateGetter> Climate { get; set; }
        new IFormLinkNullable<IWaterGetter> Water { get; set; }
        new String? Icon { get; set; }
        new MapData? MapData { get; set; }
        new Worldspace.Flag? Flags { get; set; }
        new P2Float? ObjectBoundsMin { get; set; }
        new P2Float? ObjectBoundsMax { get; set; }
        new MusicType? Music { get; set; }
        new MemorySlice<Byte>? OffsetData { get; set; }
        new Road? Road { get; set; }
        new Cell? TopCell { get; set; }
        new Int32 SubCellsTimestamp { get; set; }
        new ExtendedList<WorldspaceBlock> SubCells { get; }
    }

    public partial interface IWorldspaceInternal :
        IPlaceInternal,
        IWorldspace,
        IWorldspaceGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts.WRLD)]
    public partial interface IWorldspaceGetter :
        IPlaceGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IWorldspaceGetter>,
        IMajorRecordGetterEnumerable,
        IMapsToGetter<IWorldspaceGetter>,
        INamedGetter,
        INamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Worldspace_Registration.Instance;
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter
        /// </summary>
        String? Name { get; }
        #endregion
        IFormLinkNullableGetter<IWorldspaceGetter> Parent { get; }
        IFormLinkNullableGetter<IClimateGetter> Climate { get; }
        IFormLinkNullableGetter<IWaterGetter> Water { get; }
        String? Icon { get; }
        IMapDataGetter? MapData { get; }
        Worldspace.Flag? Flags { get; }
        P2Float? ObjectBoundsMin { get; }
        P2Float? ObjectBoundsMax { get; }
        MusicType? Music { get; }
        ReadOnlyMemorySlice<Byte>? OffsetData { get; }
        IRoadGetter? Road { get; }
        ICellGetter? TopCell { get; }
        Int32 SubCellsTimestamp { get; }
        IReadOnlyList<IWorldspaceBlockGetter> SubCells { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class WorldspaceMixIn
    {
        public static void Clear(this IWorldspaceInternal item)
        {
            ((WorldspaceSetterCommon)((IWorldspaceGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Worldspace.Mask<bool> GetEqualsMask(
            this IWorldspaceGetter item,
            IWorldspaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WorldspaceCommon)((IWorldspaceGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IWorldspaceGetter item,
            string? name = null,
            Worldspace.Mask<bool>? printMask = null)
        {
            return ((WorldspaceCommon)((IWorldspaceGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IWorldspaceGetter item,
            FileGeneration fg,
            string? name = null,
            Worldspace.Mask<bool>? printMask = null)
        {
            ((WorldspaceCommon)((IWorldspaceGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IWorldspaceGetter item,
            IWorldspaceGetter rhs,
            Worldspace.TranslationMask? equalsMask = null)
        {
            return ((WorldspaceCommon)((IWorldspaceGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IWorldspaceInternal lhs,
            IWorldspaceGetter rhs,
            out Worldspace.ErrorMask errorMask,
            Worldspace.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((WorldspaceSetterTranslationCommon)((IWorldspaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Worldspace.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IWorldspaceInternal lhs,
            IWorldspaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((WorldspaceSetterTranslationCommon)((IWorldspaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Worldspace DeepCopy(
            this IWorldspaceGetter item,
            Worldspace.TranslationMask? copyMask = null)
        {
            return ((WorldspaceSetterTranslationCommon)((IWorldspaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Worldspace DeepCopy(
            this IWorldspaceGetter item,
            out Worldspace.ErrorMask errorMask,
            Worldspace.TranslationMask? copyMask = null)
        {
            return ((WorldspaceSetterTranslationCommon)((IWorldspaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Worldspace DeepCopy(
            this IWorldspaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((WorldspaceSetterTranslationCommon)((IWorldspaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(this IWorldspaceGetter obj)
        {
            return ((WorldspaceCommon)((IWorldspaceGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(
            this IWorldspaceGetter obj,
            bool throwIfUnknown = true)
            where TMajor : class, IMajorRecordGetter
        {
            return ((WorldspaceCommon)((IWorldspaceGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown)
                .Select(m => (TMajor)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            this IWorldspaceGetter obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((WorldspaceCommon)((IWorldspaceGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordGetter)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecord> EnumerateMajorRecords(this IWorldspaceInternal obj)
        {
            return ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this IWorldspaceInternal obj)
            where TMajor : class, IMajorRecord
        {
            return ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: true)
                .Select(m => (TMajor)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecord> EnumerateMajorRecords(
            this IWorldspaceInternal obj,
            Type? type,
            bool throwIfUnknown = true)
        {
            return ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).EnumeratePotentiallyTypedMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecord)m);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IWorldspaceInternal obj,
            FormKey key)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IWorldspaceInternal obj,
            IEnumerable<FormKey> keys)
        {
            ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet());
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IWorldspaceInternal obj,
            HashSet<FormKey> keys)
        {
            ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IWorldspaceInternal obj,
            FormKey key,
            Type type,
            bool throwIfUnknown = true)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IWorldspaceInternal obj,
            IEnumerable<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IWorldspaceInternal obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IWorldspaceInternal obj,
            TMajor record,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(record.FormKey);
            ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IWorldspaceInternal obj,
            IEnumerable<TMajor> records,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: records.Select(m => m.FormKey).ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IWorldspaceInternal obj,
            FormKey key,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IWorldspaceInternal obj,
            IEnumerable<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IWorldspaceInternal obj,
            HashSet<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        public static Worldspace Duplicate(
            this IWorldspaceGetter item,
            FormKey formKey,
            Worldspace.TranslationMask? copyMask = null)
        {
            return ((WorldspaceCommon)((IWorldspaceGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IWorldspaceInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((WorldspaceSetterCommon)((IWorldspaceGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Worldspace_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Parent = 6,
        Climate = 7,
        Water = 8,
        Icon = 9,
        MapData = 10,
        Flags = 11,
        ObjectBoundsMin = 12,
        ObjectBoundsMax = 13,
        Music = 14,
        OffsetData = 15,
        Road = 16,
        TopCell = 17,
        SubCellsTimestamp = 18,
        SubCells = 19,
    }
    #endregion

    #region Registration
    public partial class Worldspace_Registration : ILoquiRegistration
    {
        public static readonly Worldspace_Registration Instance = new Worldspace_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 75,
            version: 0);

        public const string GUID = "d95e86a2-5fdd-4bb1-a2b9-c16161ef2f62";

        public const ushort AdditionalFieldCount = 15;

        public const ushort FieldCount = 20;

        public static readonly Type MaskType = typeof(Worldspace.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Worldspace.ErrorMask);

        public static readonly Type ClassType = typeof(Worldspace);

        public static readonly Type GetterType = typeof(IWorldspaceGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWorldspace);

        public static readonly Type? InternalSetterType = typeof(IWorldspaceInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Worldspace";

        public const string Name = "Worldspace";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.WRLD;
        public static readonly Type BinaryWriteTranslation = typeof(WorldspaceBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class WorldspaceSetterCommon : PlaceSetterCommon
    {
        public new static readonly WorldspaceSetterCommon Instance = new WorldspaceSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IWorldspaceInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Parent.Clear();
            item.Climate.Clear();
            item.Water.Clear();
            item.Icon = default;
            item.MapData = null;
            item.Flags = default;
            item.ObjectBoundsMin = default;
            item.ObjectBoundsMax = default;
            item.Music = default;
            item.OffsetData = default;
            item.Road = null;
            item.TopCell = null;
            item.SubCellsTimestamp = default;
            item.SubCells.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IPlaceInternal item)
        {
            Clear(item: (IWorldspaceInternal)item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IWorldspaceInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IWorldspaceInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IWorldspace obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Parent.Relink(mapping);
            obj.Climate.Relink(mapping);
            obj.Water.Relink(mapping);
            obj.TopCell?.RemapLinks(mapping);
            obj.SubCells.RemapLinks(mapping);
        }
        
        public IEnumerable<IMajorRecord> EnumerateMajorRecords(IWorldspaceInternal obj)
        {
            foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecord)!;
            }
        }
        
        public IEnumerable<IMajorRecordGetter> EnumeratePotentiallyTypedMajorRecords(
            IWorldspaceInternal obj,
            Type? type,
            bool throwIfUnknown)
        {
            if (type == null) return EnumerateMajorRecords(obj);
            return EnumerateMajorRecords(obj, type, throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            IWorldspaceInternal obj,
            Type type,
            bool throwIfUnknown)
        {
            foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecords(obj, type, throwIfUnknown))
            {
                yield return item;
            }
        }
        
        public void Remove(
            IWorldspaceInternal obj,
            HashSet<FormKey> keys)
        {
            if (obj.Road != null && keys.Contains(obj.Road.FormKey))
            {
                obj.Road = null;
            }
            obj.TopCell?.Remove(keys);
            if (obj.TopCell != null && keys.Contains(obj.TopCell.FormKey))
            {
                obj.TopCell = null;
            }
            obj.SubCells.ForEach(i => i.Remove(keys));
            obj.SubCells.RemoveWhere(i => i.Items.Count == 0);
        }
        
        public void Remove(
            IWorldspaceInternal obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IOblivionMajorRecord":
                case "OblivionMajorRecord":
                case "IMajorRecordGetter":
                case "IOblivionMajorRecordGetter":
                    if (!Worldspace_Registration.SetterType.IsAssignableFrom(obj.GetType())) return;
                    this.Remove(obj, keys);
                    break;
                case "Road":
                case "IRoadGetter":
                case "IRoad":
                case "IRoadInternal":
                    {
                        if (obj.Road is {} Roaditem)
                        {
                            Roaditem.Remove(keys, type, throwIfUnknown);
                        }
                    }
                    break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    {
                        if (obj.TopCell is {} TopCellitem)
                        {
                            TopCellitem.Remove(keys, type, throwIfUnknown);
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "WorldspaceBlock":
                case "IWorldspaceBlockGetter":
                case "IWorldspaceBlock":
                    foreach (var subItem in obj.SubCells)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "PathGrid":
                case "IPathGridGetter":
                case "IPathGrid":
                case "IPathGridInternal":
                    {
                        if (obj.TopCell is {} PathGridTopCellitem)
                        {
                            PathGridTopCellitem.Remove(keys, type, throwIfUnknown);
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    {
                        if (obj.TopCell is {} LandscapeTopCellitem)
                        {
                            LandscapeTopCellitem.Remove(keys, type, throwIfUnknown);
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "PlacedCreature":
                case "IPlacedCreatureGetter":
                case "IPlacedCreature":
                case "IPlacedCreatureInternal":
                    {
                        if (obj.TopCell is {} PlacedCreatureTopCellitem)
                        {
                            PlacedCreatureTopCellitem.Remove(keys, type, throwIfUnknown);
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    {
                        if (obj.TopCell is {} PlacedNpcTopCellitem)
                        {
                            PlacedNpcTopCellitem.Remove(keys, type, throwIfUnknown);
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    {
                        if (obj.TopCell is {} PlacedObjectTopCellitem)
                        {
                            PlacedObjectTopCellitem.Remove(keys, type, throwIfUnknown);
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "IPlaced":
                case "IPlacedGetter":
                    {
                        if (obj.TopCell is {} TopCellitem)
                        {
                            TopCellitem.Remove(keys, type, throwIfUnknown);
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        break;
                    }
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IWorldspaceInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.MajorRecordParse<IWorldspaceInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: WorldspaceBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: WorldspaceBinaryCreateTranslation.FillBinaryRecordTypes);
            WorldspaceBinaryCreateTranslation.CustomBinaryEndImportPublic(
                frame: frame,
                obj: item);
        }
        
        public override void CopyInFromBinary(
            IPlaceInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (Worldspace)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (Worldspace)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (Worldspace)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    public partial class WorldspaceCommon : PlaceCommon
    {
        public new static readonly WorldspaceCommon Instance = new WorldspaceCommon();

        public Worldspace.Mask<bool> GetEqualsMask(
            IWorldspaceGetter item,
            IWorldspaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Worldspace.Mask<bool>(false);
            ((WorldspaceCommon)((IWorldspaceGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWorldspaceGetter item,
            IWorldspaceGetter rhs,
            Worldspace.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Parent = item.Parent.Equals(rhs.Parent);
            ret.Climate = item.Climate.Equals(rhs.Climate);
            ret.Water = item.Water.Equals(rhs.Water);
            ret.Icon = string.Equals(item.Icon, rhs.Icon);
            ret.MapData = EqualsMaskHelper.EqualsHelper(
                item.MapData,
                rhs.MapData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.ObjectBoundsMin = item.ObjectBoundsMin.Equals(rhs.ObjectBoundsMin);
            ret.ObjectBoundsMax = item.ObjectBoundsMax.Equals(rhs.ObjectBoundsMax);
            ret.Music = item.Music == rhs.Music;
            ret.OffsetData = MemorySliceExt.Equal(item.OffsetData, rhs.OffsetData);
            ret.Road = EqualsMaskHelper.EqualsHelper(
                item.Road,
                rhs.Road,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.TopCell = EqualsMaskHelper.EqualsHelper(
                item.TopCell,
                rhs.TopCell,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.SubCellsTimestamp = item.SubCellsTimestamp == rhs.SubCellsTimestamp;
            ret.SubCells = item.SubCells.CollectionEqualsHelper(
                rhs.SubCells,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IWorldspaceGetter item,
            string? name = null,
            Worldspace.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IWorldspaceGetter item,
            FileGeneration fg,
            string? name = null,
            Worldspace.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Worldspace =>");
            }
            else
            {
                fg.AppendLine($"{name} (Worldspace) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IWorldspaceGetter item,
            FileGeneration fg,
            Worldspace.Mask<bool>? printMask = null)
        {
            PlaceCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                fg.AppendItem(NameItem, "Name");
            }
            if (printMask?.Parent ?? true)
            {
                fg.AppendItem(item.Parent.FormKeyNullable, "Parent");
            }
            if (printMask?.Climate ?? true)
            {
                fg.AppendItem(item.Climate.FormKeyNullable, "Climate");
            }
            if (printMask?.Water ?? true)
            {
                fg.AppendItem(item.Water.FormKeyNullable, "Water");
            }
            if ((printMask?.Icon ?? true)
                && item.Icon is {} IconItem)
            {
                fg.AppendItem(IconItem, "Icon");
            }
            if ((printMask?.MapData?.Overall ?? true)
                && item.MapData is {} MapDataItem)
            {
                MapDataItem?.ToString(fg, "MapData");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags is {} FlagsItem)
            {
                fg.AppendItem(FlagsItem, "Flags");
            }
            if ((printMask?.ObjectBoundsMin ?? true)
                && item.ObjectBoundsMin is {} ObjectBoundsMinItem)
            {
                fg.AppendItem(ObjectBoundsMinItem, "ObjectBoundsMin");
            }
            if ((printMask?.ObjectBoundsMax ?? true)
                && item.ObjectBoundsMax is {} ObjectBoundsMaxItem)
            {
                fg.AppendItem(ObjectBoundsMaxItem, "ObjectBoundsMax");
            }
            if ((printMask?.Music ?? true)
                && item.Music is {} MusicItem)
            {
                fg.AppendItem(MusicItem, "Music");
            }
            if ((printMask?.OffsetData ?? true)
                && item.OffsetData is {} OffsetDataItem)
            {
                fg.AppendLine($"OffsetData => {SpanExt.ToHexString(OffsetDataItem)}");
            }
            if ((printMask?.Road?.Overall ?? true)
                && item.Road is {} RoadItem)
            {
                RoadItem?.ToString(fg, "Road");
            }
            if ((printMask?.TopCell?.Overall ?? true)
                && item.TopCell is {} TopCellItem)
            {
                TopCellItem?.ToString(fg, "TopCell");
            }
            if (printMask?.SubCellsTimestamp ?? true)
            {
                fg.AppendItem(item.SubCellsTimestamp, "SubCellsTimestamp");
            }
            if (printMask?.SubCells?.Overall ?? true)
            {
                fg.AppendLine("SubCells =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.SubCells)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public static Worldspace_FieldIndex ConvertFieldIndex(Place_FieldIndex index)
        {
            switch (index)
            {
                case Place_FieldIndex.MajorRecordFlagsRaw:
                    return (Worldspace_FieldIndex)((int)index);
                case Place_FieldIndex.FormKey:
                    return (Worldspace_FieldIndex)((int)index);
                case Place_FieldIndex.VersionControl:
                    return (Worldspace_FieldIndex)((int)index);
                case Place_FieldIndex.EditorID:
                    return (Worldspace_FieldIndex)((int)index);
                case Place_FieldIndex.OblivionMajorRecordFlags:
                    return (Worldspace_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Worldspace_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Worldspace_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Worldspace_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.VersionControl:
                    return (Worldspace_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Worldspace_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Worldspace_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Worldspace_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Worldspace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Worldspace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Worldspace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Worldspace_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWorldspaceGetter? lhs,
            IWorldspaceGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IPlaceGetter)lhs, (IPlaceGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)Worldspace_FieldIndex.Name) ?? true))
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Worldspace_FieldIndex.Parent) ?? true))
            {
                if (!lhs.Parent.Equals(rhs.Parent)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Worldspace_FieldIndex.Climate) ?? true))
            {
                if (!lhs.Climate.Equals(rhs.Climate)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Worldspace_FieldIndex.Water) ?? true))
            {
                if (!lhs.Water.Equals(rhs.Water)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Worldspace_FieldIndex.Icon) ?? true))
            {
                if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Worldspace_FieldIndex.MapData) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MapData, rhs.MapData, out var lhsMapData, out var rhsMapData, out var isMapDataEqual))
                {
                    if (!((MapDataCommon)((IMapDataGetter)lhsMapData).CommonInstance()!).Equals(lhsMapData, rhsMapData, crystal?.GetSubCrystal((int)Worldspace_FieldIndex.MapData))) return false;
                }
                else if (!isMapDataEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Worldspace_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Worldspace_FieldIndex.ObjectBoundsMin) ?? true))
            {
                if (!lhs.ObjectBoundsMin.Equals(rhs.ObjectBoundsMin)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Worldspace_FieldIndex.ObjectBoundsMax) ?? true))
            {
                if (!lhs.ObjectBoundsMax.Equals(rhs.ObjectBoundsMax)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Worldspace_FieldIndex.Music) ?? true))
            {
                if (lhs.Music != rhs.Music) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Worldspace_FieldIndex.OffsetData) ?? true))
            {
                if (!MemorySliceExt.Equal(lhs.OffsetData, rhs.OffsetData)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Worldspace_FieldIndex.Road) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Road, rhs.Road, out var lhsRoad, out var rhsRoad, out var isRoadEqual))
                {
                    if (!((RoadCommon)((IRoadGetter)lhsRoad).CommonInstance()!).Equals(lhsRoad, rhsRoad, crystal?.GetSubCrystal((int)Worldspace_FieldIndex.Road))) return false;
                }
                else if (!isRoadEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Worldspace_FieldIndex.TopCell) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.TopCell, rhs.TopCell, out var lhsTopCell, out var rhsTopCell, out var isTopCellEqual))
                {
                    if (!((CellCommon)((ICellGetter)lhsTopCell).CommonInstance()!).Equals(lhsTopCell, rhsTopCell, crystal?.GetSubCrystal((int)Worldspace_FieldIndex.TopCell))) return false;
                }
                else if (!isTopCellEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Worldspace_FieldIndex.SubCellsTimestamp) ?? true))
            {
                if (lhs.SubCellsTimestamp != rhs.SubCellsTimestamp) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Worldspace_FieldIndex.SubCells) ?? true))
            {
                if (!lhs.SubCells.SequenceEqualNullable(rhs.SubCells)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IPlaceGetter? lhs,
            IPlaceGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IWorldspaceGetter?)lhs,
                rhs: rhs as IWorldspaceGetter,
                crystal: crystal);
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IWorldspaceGetter?)lhs,
                rhs: rhs as IWorldspaceGetter,
                crystal: crystal);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IWorldspaceGetter?)lhs,
                rhs: rhs as IWorldspaceGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(IWorldspaceGetter item)
        {
            var hash = new HashCode();
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Parent);
            hash.Add(item.Climate);
            hash.Add(item.Water);
            if (item.Icon is {} Iconitem)
            {
                hash.Add(Iconitem);
            }
            if (item.MapData is {} MapDataitem)
            {
                hash.Add(MapDataitem);
            }
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            if (item.ObjectBoundsMin is {} ObjectBoundsMinitem)
            {
                hash.Add(ObjectBoundsMinitem);
            }
            if (item.ObjectBoundsMax is {} ObjectBoundsMaxitem)
            {
                hash.Add(ObjectBoundsMaxitem);
            }
            if (item.Music is {} Musicitem)
            {
                hash.Add(Musicitem);
            }
            if (item.OffsetData is {} OffsetDataItem)
            {
                hash.Add(OffsetDataItem);
            }
            if (item.Road is {} Roaditem)
            {
                hash.Add(Roaditem);
            }
            if (item.TopCell is {} TopCellitem)
            {
                hash.Add(TopCellitem);
            }
            hash.Add(item.SubCellsTimestamp);
            hash.Add(item.SubCells);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IPlaceGetter item)
        {
            return GetHashCode(item: (IWorldspaceGetter)item);
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IWorldspaceGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IWorldspaceGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Worldspace.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IWorldspaceGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Parent.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Parent);
            }
            if (obj.Climate.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Climate);
            }
            if (obj.Water.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Water);
            }
            if (obj.TopCell is {} TopCellItems)
            {
                foreach (var item in TopCellItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            foreach (var item in obj.SubCells.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(IWorldspaceGetter obj)
        {
            if ((obj.Road != null))
            {
                if (obj.Road is {} Roaditem)
                {
                    yield return Roaditem;
                    foreach (var item in Roaditem.EnumerateMajorRecords())
                    {
                        yield return item;
                    }
                }
            }
            if ((obj.TopCell != null))
            {
                if (obj.TopCell is {} TopCellitem)
                {
                    yield return TopCellitem;
                    foreach (var item in TopCellitem.EnumerateMajorRecords())
                    {
                        yield return item;
                    }
                }
            }
            foreach (var subItem in obj.SubCells)
            {
                foreach (var item in subItem.EnumerateMajorRecords())
                {
                    yield return item;
                }
            }
        }
        
        public IEnumerable<IMajorRecordGetter> EnumeratePotentiallyTypedMajorRecords(
            IWorldspaceGetter obj,
            Type? type,
            bool throwIfUnknown)
        {
            if (type == null) return EnumerateMajorRecords(obj);
            return EnumerateMajorRecords(obj, type, throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            IWorldspaceGetter obj,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IOblivionMajorRecord":
                case "OblivionMajorRecord":
                    if (!Worldspace_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IOblivionMajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "Road":
                case "IRoadGetter":
                case "IRoad":
                case "IRoadInternal":
                    {
                        if (obj.Road is {} Roaditem)
                        {
                            yield return Roaditem;
                            foreach (var item in Roaditem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    yield break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    {
                        if (obj.TopCell is {} TopCellitem)
                        {
                            yield return TopCellitem;
                            foreach (var item in TopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "WorldspaceBlock":
                case "IWorldspaceBlockGetter":
                case "IWorldspaceBlock":
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "PathGrid":
                case "IPathGridGetter":
                case "IPathGrid":
                case "IPathGridInternal":
                    {
                        if (obj.TopCell is {} PathGridTopCellitem)
                        {
                            foreach (var item in PathGridTopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    {
                        if (obj.TopCell is {} LandscapeTopCellitem)
                        {
                            foreach (var item in LandscapeTopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "PlacedCreature":
                case "IPlacedCreatureGetter":
                case "IPlacedCreature":
                case "IPlacedCreatureInternal":
                    {
                        if (obj.TopCell is {} PlacedCreatureTopCellitem)
                        {
                            foreach (var item in PlacedCreatureTopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    {
                        if (obj.TopCell is {} PlacedNpcTopCellitem)
                        {
                            foreach (var item in PlacedNpcTopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    {
                        if (obj.TopCell is {} PlacedObjectTopCellitem)
                        {
                            foreach (var item in PlacedObjectTopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "IPlaced":
                {
                    if (!Worldspace_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    {
                        if (obj.TopCell is {} TopCellitem)
                        {
                            yield return TopCellitem;
                            foreach (var item in TopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "IPlacedGetter":
                {
                    {
                        if (obj.TopCell is {} TopCellitem)
                        {
                            yield return TopCellitem;
                            foreach (var item in TopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        public IEnumerable<IModContext<IOblivionMod, IOblivionModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            IWorldspaceGetter obj,
            ILinkCache linkCache,
            ModKey modKey,
            IModContext? parent,
            Func<IOblivionMod, IWorldspaceGetter, IWorldspace> getOrAddAsOverride,
            Func<IOblivionMod, IWorldspaceGetter, string?, IWorldspace> duplicateInto)
        {
            var curContext = new ModContext<IOblivionMod, IOblivionModGetter, IWorldspace, IWorldspaceGetter>(
                modKey,
                record: obj,
                getOrAddAsOverride: getOrAddAsOverride,
                duplicateInto: duplicateInto,
                parent: parent);
            {
                if (obj.Road is {} WorldspaceRoaditem)
                {
                    yield return new ModContext<IOblivionMod, IOblivionModGetter, IRoadInternal, IRoadGetter>(
                        modKey: modKey,
                        record: WorldspaceRoaditem,
                        parent: curContext,
                        getOrAddAsOverride: (m, r) =>
                        {
                            var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                            if (baseRec.Road != null) return baseRec.Road;
                            var copy = r.DeepCopy(ModContextExt.RoadCopyMask);
                            baseRec.Road = copy;
                            return copy;
                        },
                        duplicateInto: (m, r, e) =>
                        {
                            var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                            var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.RoadCopyMask);
                            baseRec.Road = dupRec;
                            return dupRec;
                        });
                }
            }
            {
                if (obj.TopCell is {} WorldspaceTopCellitem)
                {
                    yield return new ModContext<IOblivionMod, IOblivionModGetter, ICellInternal, ICellGetter>(
                        modKey: modKey,
                        record: WorldspaceTopCellitem,
                        parent: curContext,
                        getOrAddAsOverride: (m, r) =>
                        {
                            var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                            if (baseRec.TopCell != null) return baseRec.TopCell;
                            var copy = r.DeepCopy(ModContextExt.CellCopyMask);
                            baseRec.TopCell = copy;
                            return copy;
                        },
                        duplicateInto: (m, r, e) =>
                        {
                            var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                            var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.CellCopyMask);
                            baseRec.TopCell = dupRec;
                            return dupRec;
                        });
                    foreach (var item in ((CellCommon)((ICellGetter)WorldspaceTopCellitem).CommonInstance()!).EnumerateMajorRecordContexts(
                        obj: WorldspaceTopCellitem,
                        linkCache: linkCache,
                        modKey: modKey,
                        parent: curContext,
                        getOrAddAsOverride: (m, r) =>
                        {
                            var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                            if (baseRec.TopCell != null) return baseRec.TopCell;
                            var copy = r.DeepCopy(ModContextExt.CellCopyMask);
                            baseRec.TopCell = copy;
                            return copy;
                        },
                        duplicateInto: (m, r, e) =>
                        {
                            var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                            var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.CellCopyMask);
                            baseRec.TopCell = dupRec;
                            return dupRec;
                        }))
                    {
                        yield return item;
                    }
                }
            }
            foreach (var item in obj.SubCells.EnumerateMajorRecordContexts(
                type: typeof(IMajorRecordGetter),
                modKey: modKey,
                parent: curContext,
                linkCache: linkCache,
                throwIfUnknown: false,
                worldspace: obj,
                getOrAddAsOverride: getOrAddAsOverride))
            {
                yield return item;
            }
        }
        
        public IEnumerable<IModContext<IOblivionMod, IOblivionModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            IWorldspaceGetter obj,
            ILinkCache linkCache,
            Type type,
            ModKey modKey,
            IModContext? parent,
            bool throwIfUnknown,
            Func<IOblivionMod, IWorldspaceGetter, IWorldspace> getOrAddAsOverride,
            Func<IOblivionMod, IWorldspaceGetter, string?, IWorldspace> duplicateInto)
        {
            var curContext = new ModContext<IOblivionMod, IOblivionModGetter, IWorldspace, IWorldspaceGetter>(
                modKey,
                record: obj,
                getOrAddAsOverride: getOrAddAsOverride,
                duplicateInto: duplicateInto,
                parent: parent);
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IOblivionMajorRecord":
                case "OblivionMajorRecord":
                    if (!Worldspace_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        modKey: modKey,
                        parent: parent,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IOblivionMajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        modKey: modKey,
                        parent: parent,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                case "Road":
                case "IRoadGetter":
                case "IRoad":
                case "IRoadInternal":
                    {
                        if (obj.Road is {} WorldspaceRoaditem)
                        {
                            yield return new ModContext<IOblivionMod, IOblivionModGetter, IRoadInternal, IRoadGetter>(
                                modKey: modKey,
                                record: WorldspaceRoaditem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    if (baseRec.Road != null) return baseRec.Road;
                                    var copy = r.DeepCopy(ModContextExt.RoadCopyMask);
                                    baseRec.Road = copy;
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.RoadCopyMask);
                                    baseRec.Road = dupRec;
                                    return dupRec;
                                });
                        }
                    }
                    yield break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    {
                        if (obj.TopCell is {} WorldspaceTopCellitem)
                        {
                            yield return new ModContext<IOblivionMod, IOblivionModGetter, ICellInternal, ICellGetter>(
                                modKey: modKey,
                                record: WorldspaceTopCellitem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    if (baseRec.TopCell != null) return baseRec.TopCell;
                                    var copy = r.DeepCopy(ModContextExt.CellCopyMask);
                                    baseRec.TopCell = copy;
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.CellCopyMask);
                                    baseRec.TopCell = dupRec;
                                    return dupRec;
                                });
                            foreach (var item in ((CellCommon)((ICellGetter)WorldspaceTopCellitem).CommonInstance()!).EnumerateMajorRecordContexts(
                                obj: WorldspaceTopCellitem,
                                linkCache: linkCache,
                                type: type,
                                modKey: modKey,
                                parent: curContext,
                                throwIfUnknown: false,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    if (baseRec.TopCell != null) return baseRec.TopCell;
                                    var copy = r.DeepCopy(ModContextExt.CellCopyMask);
                                    baseRec.TopCell = copy;
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.CellCopyMask);
                                    baseRec.TopCell = dupRec;
                                    return dupRec;
                                }))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var item in obj.SubCells.EnumerateMajorRecordContexts(
                        type: type,
                        modKey: modKey,
                        parent: curContext,
                        linkCache: linkCache,
                        throwIfUnknown: false,
                        worldspace: obj,
                        getOrAddAsOverride: getOrAddAsOverride))
                    {
                        yield return item;
                    }
                    yield break;
                case "WorldspaceBlock":
                case "IWorldspaceBlockGetter":
                case "IWorldspaceBlock":
                    foreach (var item in obj.SubCells.EnumerateMajorRecordContexts(
                        type: type,
                        modKey: modKey,
                        parent: curContext,
                        linkCache: linkCache,
                        throwIfUnknown: false,
                        worldspace: obj,
                        getOrAddAsOverride: getOrAddAsOverride))
                    {
                        yield return item;
                    }
                    yield break;
                case "PathGrid":
                case "IPathGridGetter":
                case "IPathGrid":
                case "IPathGridInternal":
                    {
                        if (obj.TopCell is {} WorldspaceTopCellitem)
                        {
                            foreach (var item in ((CellCommon)((ICellGetter)WorldspaceTopCellitem).CommonInstance()!).EnumerateMajorRecordContexts(
                                obj: WorldspaceTopCellitem,
                                linkCache: linkCache,
                                type: type,
                                modKey: modKey,
                                parent: curContext,
                                throwIfUnknown: false,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    if (baseRec.TopCell != null) return baseRec.TopCell;
                                    var copy = r.DeepCopy(ModContextExt.CellCopyMask);
                                    baseRec.TopCell = copy;
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.CellCopyMask);
                                    baseRec.TopCell = dupRec;
                                    return dupRec;
                                }))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var item in obj.SubCells.EnumerateMajorRecordContexts(
                        type: type,
                        modKey: modKey,
                        parent: curContext,
                        linkCache: linkCache,
                        throwIfUnknown: false,
                        worldspace: obj,
                        getOrAddAsOverride: getOrAddAsOverride))
                    {
                        yield return item;
                    }
                    yield break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    {
                        if (obj.TopCell is {} WorldspaceTopCellitem)
                        {
                            foreach (var item in ((CellCommon)((ICellGetter)WorldspaceTopCellitem).CommonInstance()!).EnumerateMajorRecordContexts(
                                obj: WorldspaceTopCellitem,
                                linkCache: linkCache,
                                type: type,
                                modKey: modKey,
                                parent: curContext,
                                throwIfUnknown: false,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    if (baseRec.TopCell != null) return baseRec.TopCell;
                                    var copy = r.DeepCopy(ModContextExt.CellCopyMask);
                                    baseRec.TopCell = copy;
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.CellCopyMask);
                                    baseRec.TopCell = dupRec;
                                    return dupRec;
                                }))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var item in obj.SubCells.EnumerateMajorRecordContexts(
                        type: type,
                        modKey: modKey,
                        parent: curContext,
                        linkCache: linkCache,
                        throwIfUnknown: false,
                        worldspace: obj,
                        getOrAddAsOverride: getOrAddAsOverride))
                    {
                        yield return item;
                    }
                    yield break;
                case "PlacedCreature":
                case "IPlacedCreatureGetter":
                case "IPlacedCreature":
                case "IPlacedCreatureInternal":
                    {
                        if (obj.TopCell is {} WorldspaceTopCellitem)
                        {
                            foreach (var item in ((CellCommon)((ICellGetter)WorldspaceTopCellitem).CommonInstance()!).EnumerateMajorRecordContexts(
                                obj: WorldspaceTopCellitem,
                                linkCache: linkCache,
                                type: type,
                                modKey: modKey,
                                parent: curContext,
                                throwIfUnknown: false,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    if (baseRec.TopCell != null) return baseRec.TopCell;
                                    var copy = r.DeepCopy(ModContextExt.CellCopyMask);
                                    baseRec.TopCell = copy;
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.CellCopyMask);
                                    baseRec.TopCell = dupRec;
                                    return dupRec;
                                }))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var item in obj.SubCells.EnumerateMajorRecordContexts(
                        type: type,
                        modKey: modKey,
                        parent: curContext,
                        linkCache: linkCache,
                        throwIfUnknown: false,
                        worldspace: obj,
                        getOrAddAsOverride: getOrAddAsOverride))
                    {
                        yield return item;
                    }
                    yield break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    {
                        if (obj.TopCell is {} WorldspaceTopCellitem)
                        {
                            foreach (var item in ((CellCommon)((ICellGetter)WorldspaceTopCellitem).CommonInstance()!).EnumerateMajorRecordContexts(
                                obj: WorldspaceTopCellitem,
                                linkCache: linkCache,
                                type: type,
                                modKey: modKey,
                                parent: curContext,
                                throwIfUnknown: false,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    if (baseRec.TopCell != null) return baseRec.TopCell;
                                    var copy = r.DeepCopy(ModContextExt.CellCopyMask);
                                    baseRec.TopCell = copy;
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.CellCopyMask);
                                    baseRec.TopCell = dupRec;
                                    return dupRec;
                                }))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var item in obj.SubCells.EnumerateMajorRecordContexts(
                        type: type,
                        modKey: modKey,
                        parent: curContext,
                        linkCache: linkCache,
                        throwIfUnknown: false,
                        worldspace: obj,
                        getOrAddAsOverride: getOrAddAsOverride))
                    {
                        yield return item;
                    }
                    yield break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    {
                        if (obj.TopCell is {} WorldspaceTopCellitem)
                        {
                            foreach (var item in ((CellCommon)((ICellGetter)WorldspaceTopCellitem).CommonInstance()!).EnumerateMajorRecordContexts(
                                obj: WorldspaceTopCellitem,
                                linkCache: linkCache,
                                type: type,
                                modKey: modKey,
                                parent: curContext,
                                throwIfUnknown: false,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    if (baseRec.TopCell != null) return baseRec.TopCell;
                                    var copy = r.DeepCopy(ModContextExt.CellCopyMask);
                                    baseRec.TopCell = copy;
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.CellCopyMask);
                                    baseRec.TopCell = dupRec;
                                    return dupRec;
                                }))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var item in obj.SubCells.EnumerateMajorRecordContexts(
                        type: type,
                        modKey: modKey,
                        parent: curContext,
                        linkCache: linkCache,
                        throwIfUnknown: false,
                        worldspace: obj,
                        getOrAddAsOverride: getOrAddAsOverride))
                    {
                        yield return item;
                    }
                    yield break;
                case "IPlaced":
                case "IPlacedGetter":
                {
                    {
                        if (obj.TopCell is {} WorldspaceTopCellitem)
                        {
                            foreach (var item in ((CellCommon)((ICellGetter)WorldspaceTopCellitem).CommonInstance()!).EnumerateMajorRecordContexts(
                                obj: WorldspaceTopCellitem,
                                linkCache: linkCache,
                                type: type,
                                modKey: modKey,
                                parent: curContext,
                                throwIfUnknown: false,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    if (baseRec.TopCell != null) return baseRec.TopCell;
                                    var copy = r.DeepCopy(ModContextExt.CellCopyMask);
                                    baseRec.TopCell = copy;
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.CellCopyMask);
                                    baseRec.TopCell = dupRec;
                                    return dupRec;
                                }))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var item in obj.SubCells.EnumerateMajorRecordContexts(
                        type: type,
                        modKey: modKey,
                        parent: curContext,
                        linkCache: linkCache,
                        throwIfUnknown: false,
                        worldspace: obj,
                        getOrAddAsOverride: getOrAddAsOverride))
                    {
                        yield return item;
                    }
                    yield break;
                }
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        #region Duplicate
        public Worldspace Duplicate(
            IWorldspaceGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Worldspace(formKey);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Place Duplicate(
            IPlaceGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IWorldspaceGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override OblivionMajorRecord Duplicate(
            IOblivionMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IWorldspaceGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IWorldspaceGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class WorldspaceSetterTranslationCommon : PlaceSetterTranslationCommon
    {
        public new static readonly WorldspaceSetterTranslationCommon Instance = new WorldspaceSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IWorldspaceInternal item,
            IWorldspaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IWorldspace item,
            IWorldspaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IPlace)item,
                (IPlaceGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Parent) ?? true))
            {
                item.Parent.SetTo(rhs.Parent.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Climate) ?? true))
            {
                item.Climate.SetTo(rhs.Climate.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Water) ?? true))
            {
                item.Water.SetTo(rhs.Water.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Icon) ?? true))
            {
                item.Icon = rhs.Icon;
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.MapData) ?? true))
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.MapData);
                try
                {
                    if(rhs.MapData is {} rhsMapData)
                    {
                        item.MapData = rhsMapData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Worldspace_FieldIndex.MapData));
                    }
                    else
                    {
                        item.MapData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.ObjectBoundsMin) ?? true))
            {
                item.ObjectBoundsMin = rhs.ObjectBoundsMin;
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.ObjectBoundsMax) ?? true))
            {
                item.ObjectBoundsMax = rhs.ObjectBoundsMax;
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Music) ?? true))
            {
                item.Music = rhs.Music;
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.OffsetData) ?? true))
            {
                if(rhs.OffsetData is {} OffsetDatarhs)
                {
                    item.OffsetData = OffsetDatarhs.ToArray();
                }
                else
                {
                    item.OffsetData = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Road) ?? true))
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.Road);
                try
                {
                    if(rhs.Road is {} rhsRoad)
                    {
                        item.Road = (Road)rhsRoad.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Worldspace_FieldIndex.Road),
                            errorMask: errorMask);
                    }
                    else
                    {
                        item.Road = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.TopCell) ?? true))
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.TopCell);
                try
                {
                    if(rhs.TopCell is {} rhsTopCell)
                    {
                        item.TopCell = (Cell)rhsTopCell.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Worldspace_FieldIndex.TopCell),
                            errorMask: errorMask);
                    }
                    else
                    {
                        item.TopCell = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.SubCellsTimestamp) ?? true))
            {
                item.SubCellsTimestamp = rhs.SubCellsTimestamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.SubCells) ?? true))
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.SubCells);
                try
                {
                    item.SubCells.SetTo(
                        rhs.SubCells
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IPlaceInternal item,
            IPlaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWorldspaceInternal)item,
                rhs: (IWorldspaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IPlace item,
            IPlaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWorldspace)item,
                rhs: (IWorldspaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWorldspaceInternal)item,
                rhs: (IWorldspaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWorldspace)item,
                rhs: (IWorldspaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWorldspaceInternal)item,
                rhs: (IWorldspaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWorldspace)item,
                rhs: (IWorldspaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Worldspace DeepCopy(
            IWorldspaceGetter item,
            Worldspace.TranslationMask? copyMask = null)
        {
            Worldspace ret = (Worldspace)((WorldspaceCommon)((IWorldspaceGetter)item).CommonInstance()!).GetNew();
            ((WorldspaceSetterTranslationCommon)((IWorldspaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Worldspace DeepCopy(
            IWorldspaceGetter item,
            out Worldspace.ErrorMask errorMask,
            Worldspace.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Worldspace ret = (Worldspace)((WorldspaceCommon)((IWorldspaceGetter)item).CommonInstance()!).GetNew();
            ((WorldspaceSetterTranslationCommon)((IWorldspaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Worldspace.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Worldspace DeepCopy(
            IWorldspaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Worldspace ret = (Worldspace)((WorldspaceCommon)((IWorldspaceGetter)item).CommonInstance()!).GetNew();
            ((WorldspaceSetterTranslationCommon)((IWorldspaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Worldspace
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Worldspace_Registration.Instance;
        public new static Worldspace_Registration StaticRegistration => Worldspace_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WorldspaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return WorldspaceSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WorldspaceSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WorldspaceBinaryWriteTranslation :
        PlaceBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static WorldspaceBinaryWriteTranslation Instance = new WorldspaceBinaryWriteTranslation();

        public static void WriteEmbedded(
            IWorldspaceGetter item,
            MutagenWriter writer)
        {
            OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IWorldspaceGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Parent,
                header: translationParams.ConvertToCustom(RecordTypes.WNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Climate,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Water,
                header: translationParams.ConvertToCustom(RecordTypes.NAM2));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Icon,
                header: translationParams.ConvertToCustom(RecordTypes.ICON),
                binaryType: StringBinaryType.NullTerminate);
            if (item.MapData is {} MapDataItem)
            {
                ((MapDataBinaryWriteTranslation)((IBinaryItem)MapDataItem).BinaryWriteTranslator).Write(
                    item: MapDataItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            EnumBinaryTranslation<Worldspace.Flag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 1,
                header: translationParams.ConvertToCustom(RecordTypes.DATA));
            P2FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.ObjectBoundsMin,
                header: translationParams.ConvertToCustom(RecordTypes.NAM0));
            P2FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.ObjectBoundsMax,
                header: translationParams.ConvertToCustom(RecordTypes.NAM9));
            EnumBinaryTranslation<MusicType, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Music,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.SNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.OffsetData,
                header: translationParams.ConvertToCustom(RecordTypes.OFST),
                overflowRecord: RecordTypes.XXXX);
        }

        public static partial void CustomBinaryEndExport(
            MutagenWriter writer,
            IWorldspaceGetter obj);
        public static void CustomBinaryEndExportInternal(
            MutagenWriter writer,
            IWorldspaceGetter obj)
        {
            CustomBinaryEndExport(
                writer: writer,
                obj: obj);
        }
        public void Write(
            MutagenWriter writer,
            IWorldspaceGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Record(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.WRLD)))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        translationParams: translationParams);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Enrich(ex, item);
                }
            }
            CustomBinaryEndExportInternal(
                writer: writer,
                obj: item);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IWorldspaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IPlaceGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IWorldspaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IWorldspaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IWorldspaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class WorldspaceBinaryCreateTranslation : PlaceBinaryCreateTranslation
    {
        public new readonly static WorldspaceBinaryCreateTranslation Instance = new WorldspaceBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.WRLD;
        public static void FillBinaryStructs(
            IWorldspaceInternal item,
            MutagenFrame frame)
        {
            PlaceBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IWorldspaceInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Worldspace_FieldIndex.Name;
                }
                case RecordTypeInts.WNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Parent.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Worldspace_FieldIndex.Parent;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Climate.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Worldspace_FieldIndex.Climate;
                }
                case RecordTypeInts.NAM2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Water.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Worldspace_FieldIndex.Water;
                }
                case RecordTypeInts.ICON:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Icon = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Worldspace_FieldIndex.Icon;
                }
                case RecordTypeInts.MNAM:
                {
                    item.MapData = Mutagen.Bethesda.Oblivion.MapData.CreateFromBinary(frame: frame);
                    return (int)Worldspace_FieldIndex.MapData;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<Worldspace.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)Worldspace_FieldIndex.Flags;
                }
                case RecordTypeInts.NAM0:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ObjectBoundsMin = P2FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Worldspace_FieldIndex.ObjectBoundsMin;
                }
                case RecordTypeInts.NAM9:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ObjectBoundsMax = P2FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Worldspace_FieldIndex.ObjectBoundsMax;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Music = EnumBinaryTranslation<MusicType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)Worldspace_FieldIndex.Music;
                }
                case RecordTypeInts.OFST:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.OffsetData = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Worldspace_FieldIndex.OffsetData;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecordFrame();
                    return ParseResult.OverrideLength(BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return PlaceBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        public static partial void CustomBinaryEndImport(
            MutagenFrame frame,
            IWorldspaceInternal obj);
        public static void CustomBinaryEndImportPublic(
            MutagenFrame frame,
            IWorldspaceInternal obj)
        {
            CustomBinaryEndImport(
                frame: frame,
                obj: obj);
        }
    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class WorldspaceBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WorldspaceBinaryOverlay :
        PlaceBinaryOverlay,
        IWorldspaceGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Worldspace_Registration.Instance;
        public new static Worldspace_Registration StaticRegistration => Worldspace_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WorldspaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WorldspaceSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => WorldspaceCommon.Instance.GetContainedFormLinks(this);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WorldspaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((WorldspaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IWorldspace);


        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants)) : default(string?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        #endregion
        #endregion
        #region Parent
        private int? _ParentLocation;
        public IFormLinkNullableGetter<IWorldspaceGetter> Parent => _ParentLocation.HasValue ? new FormLinkNullable<IWorldspaceGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ParentLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IWorldspaceGetter>.Null;
        #endregion
        #region Climate
        private int? _ClimateLocation;
        public IFormLinkNullableGetter<IClimateGetter> Climate => _ClimateLocation.HasValue ? new FormLinkNullable<IClimateGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ClimateLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IClimateGetter>.Null;
        #endregion
        #region Water
        private int? _WaterLocation;
        public IFormLinkNullableGetter<IWaterGetter> Water => _WaterLocation.HasValue ? new FormLinkNullable<IWaterGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _WaterLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IWaterGetter>.Null;
        #endregion
        #region Icon
        private int? _IconLocation;
        public String? Icon => _IconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _IconLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region MapData
        private RangeInt32? _MapDataLocation;
        public IMapDataGetter? MapData => _MapDataLocation.HasValue ? MapDataBinaryOverlay.MapDataFactory(new OverlayStream(_data.Slice(_MapDataLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public Worldspace.Flag? Flags => _FlagsLocation.HasValue ? (Worldspace.Flag)HeaderTranslation.ExtractSubrecordMemory(_data, _FlagsLocation!.Value, _package.MetaData.Constants)[0] : default(Worldspace.Flag?);
        #endregion
        #region ObjectBoundsMin
        private int? _ObjectBoundsMinLocation;
        public P2Float? ObjectBoundsMin => _ObjectBoundsMinLocation.HasValue ? P2FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(HeaderTranslation.ExtractSubrecordMemory(_data, _ObjectBoundsMinLocation.Value, _package.MetaData.Constants)) : default(P2Float?);
        #endregion
        #region ObjectBoundsMax
        private int? _ObjectBoundsMaxLocation;
        public P2Float? ObjectBoundsMax => _ObjectBoundsMaxLocation.HasValue ? P2FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(HeaderTranslation.ExtractSubrecordMemory(_data, _ObjectBoundsMaxLocation.Value, _package.MetaData.Constants)) : default(P2Float?);
        #endregion
        #region Music
        private int? _MusicLocation;
        public MusicType? Music => _MusicLocation.HasValue ? (MusicType)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _MusicLocation!.Value, _package.MetaData.Constants)) : default(MusicType?);
        #endregion
        #region OffsetData
        private int? _OffsetDataLocation;
        private int? _OffsetDataLengthOverride;
        public ReadOnlyMemorySlice<Byte>? OffsetData => PluginUtilityTranslation.ReadByteArrayWithOverflow(
            _data,
            _package.MetaData.Constants,
            _OffsetDataLocation,
            _OffsetDataLengthOverride);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);
        partial void CustomEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected WorldspaceBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static WorldspaceBinaryOverlay WorldspaceFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var origStream = stream;
            stream = PluginUtilityTranslation.DecompressStream(stream);
            var ret = new WorldspaceBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0xC + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            ret.CustomEnd(
                stream: origStream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static WorldspaceBinaryOverlay WorldspaceFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return WorldspaceFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Worldspace_FieldIndex.Name;
                }
                case RecordTypeInts.WNAM:
                {
                    _ParentLocation = (stream.Position - offset);
                    return (int)Worldspace_FieldIndex.Parent;
                }
                case RecordTypeInts.CNAM:
                {
                    _ClimateLocation = (stream.Position - offset);
                    return (int)Worldspace_FieldIndex.Climate;
                }
                case RecordTypeInts.NAM2:
                {
                    _WaterLocation = (stream.Position - offset);
                    return (int)Worldspace_FieldIndex.Water;
                }
                case RecordTypeInts.ICON:
                {
                    _IconLocation = (stream.Position - offset);
                    return (int)Worldspace_FieldIndex.Icon;
                }
                case RecordTypeInts.MNAM:
                {
                    _MapDataLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Worldspace_FieldIndex.MapData;
                }
                case RecordTypeInts.DATA:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)Worldspace_FieldIndex.Flags;
                }
                case RecordTypeInts.NAM0:
                {
                    _ObjectBoundsMinLocation = (stream.Position - offset);
                    return (int)Worldspace_FieldIndex.ObjectBoundsMin;
                }
                case RecordTypeInts.NAM9:
                {
                    _ObjectBoundsMaxLocation = (stream.Position - offset);
                    return (int)Worldspace_FieldIndex.ObjectBoundsMax;
                }
                case RecordTypeInts.SNAM:
                {
                    _MusicLocation = (stream.Position - offset);
                    return (int)Worldspace_FieldIndex.Music;
                }
                case RecordTypeInts.OFST:
                {
                    _OffsetDataLocation = (stream.Position - offset);
                    _OffsetDataLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)Worldspace_FieldIndex.OffsetData;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecordFrame();
                    return ParseResult.OverrideLength(BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WorldspaceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Worldspace>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IWorldspaceGetter rhs) return false;
            return ((WorldspaceCommon)((IWorldspaceGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IWorldspaceGetter? obj)
        {
            return ((WorldspaceCommon)((IWorldspaceGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((WorldspaceCommon)((IWorldspaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

