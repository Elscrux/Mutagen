/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class TreeData :
        IEquatable<ITreeDataGetter>,
        ILoquiObjectSetter<TreeData>,
        ITreeData
    {
        #region Ctor
        public TreeData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region LeafCurvature
        public Single LeafCurvature { get; set; } = default;
        #endregion
        #region MinimumLeafAngle
        public Single MinimumLeafAngle { get; set; } = default;
        #endregion
        #region MaximumLeafAngle
        public Single MaximumLeafAngle { get; set; } = default;
        #endregion
        #region BranchDimmingValue
        public Single BranchDimmingValue { get; set; } = default;
        #endregion
        #region LeafDimmingValue
        public Single LeafDimmingValue { get; set; } = default;
        #endregion
        #region ShadowRadius
        public Int32 ShadowRadius { get; set; } = default;
        #endregion
        #region RockingSpeed
        public Single RockingSpeed { get; set; } = default;
        #endregion
        #region RustleSpeed
        public Single RustleSpeed { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TreeDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ITreeDataGetter rhs) return false;
            return ((TreeDataCommon)((ITreeDataGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(ITreeDataGetter? obj)
        {
            return ((TreeDataCommon)((ITreeDataGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((TreeDataCommon)((ITreeDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.LeafCurvature = initialValue;
                this.MinimumLeafAngle = initialValue;
                this.MaximumLeafAngle = initialValue;
                this.BranchDimmingValue = initialValue;
                this.LeafDimmingValue = initialValue;
                this.ShadowRadius = initialValue;
                this.RockingSpeed = initialValue;
                this.RustleSpeed = initialValue;
            }

            public Mask(
                TItem LeafCurvature,
                TItem MinimumLeafAngle,
                TItem MaximumLeafAngle,
                TItem BranchDimmingValue,
                TItem LeafDimmingValue,
                TItem ShadowRadius,
                TItem RockingSpeed,
                TItem RustleSpeed)
            {
                this.LeafCurvature = LeafCurvature;
                this.MinimumLeafAngle = MinimumLeafAngle;
                this.MaximumLeafAngle = MaximumLeafAngle;
                this.BranchDimmingValue = BranchDimmingValue;
                this.LeafDimmingValue = LeafDimmingValue;
                this.ShadowRadius = ShadowRadius;
                this.RockingSpeed = RockingSpeed;
                this.RustleSpeed = RustleSpeed;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem LeafCurvature;
            public TItem MinimumLeafAngle;
            public TItem MaximumLeafAngle;
            public TItem BranchDimmingValue;
            public TItem LeafDimmingValue;
            public TItem ShadowRadius;
            public TItem RockingSpeed;
            public TItem RustleSpeed;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.LeafCurvature, rhs.LeafCurvature)) return false;
                if (!object.Equals(this.MinimumLeafAngle, rhs.MinimumLeafAngle)) return false;
                if (!object.Equals(this.MaximumLeafAngle, rhs.MaximumLeafAngle)) return false;
                if (!object.Equals(this.BranchDimmingValue, rhs.BranchDimmingValue)) return false;
                if (!object.Equals(this.LeafDimmingValue, rhs.LeafDimmingValue)) return false;
                if (!object.Equals(this.ShadowRadius, rhs.ShadowRadius)) return false;
                if (!object.Equals(this.RockingSpeed, rhs.RockingSpeed)) return false;
                if (!object.Equals(this.RustleSpeed, rhs.RustleSpeed)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.LeafCurvature);
                hash.Add(this.MinimumLeafAngle);
                hash.Add(this.MaximumLeafAngle);
                hash.Add(this.BranchDimmingValue);
                hash.Add(this.LeafDimmingValue);
                hash.Add(this.ShadowRadius);
                hash.Add(this.RockingSpeed);
                hash.Add(this.RustleSpeed);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.LeafCurvature)) return false;
                if (!eval(this.MinimumLeafAngle)) return false;
                if (!eval(this.MaximumLeafAngle)) return false;
                if (!eval(this.BranchDimmingValue)) return false;
                if (!eval(this.LeafDimmingValue)) return false;
                if (!eval(this.ShadowRadius)) return false;
                if (!eval(this.RockingSpeed)) return false;
                if (!eval(this.RustleSpeed)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.LeafCurvature)) return true;
                if (eval(this.MinimumLeafAngle)) return true;
                if (eval(this.MaximumLeafAngle)) return true;
                if (eval(this.BranchDimmingValue)) return true;
                if (eval(this.LeafDimmingValue)) return true;
                if (eval(this.ShadowRadius)) return true;
                if (eval(this.RockingSpeed)) return true;
                if (eval(this.RustleSpeed)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new TreeData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.LeafCurvature = eval(this.LeafCurvature);
                obj.MinimumLeafAngle = eval(this.MinimumLeafAngle);
                obj.MaximumLeafAngle = eval(this.MaximumLeafAngle);
                obj.BranchDimmingValue = eval(this.BranchDimmingValue);
                obj.LeafDimmingValue = eval(this.LeafDimmingValue);
                obj.ShadowRadius = eval(this.ShadowRadius);
                obj.RockingSpeed = eval(this.RockingSpeed);
                obj.RustleSpeed = eval(this.RustleSpeed);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(TreeData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, TreeData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(TreeData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.LeafCurvature ?? true)
                    {
                        fg.AppendItem(LeafCurvature, "LeafCurvature");
                    }
                    if (printMask?.MinimumLeafAngle ?? true)
                    {
                        fg.AppendItem(MinimumLeafAngle, "MinimumLeafAngle");
                    }
                    if (printMask?.MaximumLeafAngle ?? true)
                    {
                        fg.AppendItem(MaximumLeafAngle, "MaximumLeafAngle");
                    }
                    if (printMask?.BranchDimmingValue ?? true)
                    {
                        fg.AppendItem(BranchDimmingValue, "BranchDimmingValue");
                    }
                    if (printMask?.LeafDimmingValue ?? true)
                    {
                        fg.AppendItem(LeafDimmingValue, "LeafDimmingValue");
                    }
                    if (printMask?.ShadowRadius ?? true)
                    {
                        fg.AppendItem(ShadowRadius, "ShadowRadius");
                    }
                    if (printMask?.RockingSpeed ?? true)
                    {
                        fg.AppendItem(RockingSpeed, "RockingSpeed");
                    }
                    if (printMask?.RustleSpeed ?? true)
                    {
                        fg.AppendItem(RustleSpeed, "RustleSpeed");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? LeafCurvature;
            public Exception? MinimumLeafAngle;
            public Exception? MaximumLeafAngle;
            public Exception? BranchDimmingValue;
            public Exception? LeafDimmingValue;
            public Exception? ShadowRadius;
            public Exception? RockingSpeed;
            public Exception? RustleSpeed;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                TreeData_FieldIndex enu = (TreeData_FieldIndex)index;
                switch (enu)
                {
                    case TreeData_FieldIndex.LeafCurvature:
                        return LeafCurvature;
                    case TreeData_FieldIndex.MinimumLeafAngle:
                        return MinimumLeafAngle;
                    case TreeData_FieldIndex.MaximumLeafAngle:
                        return MaximumLeafAngle;
                    case TreeData_FieldIndex.BranchDimmingValue:
                        return BranchDimmingValue;
                    case TreeData_FieldIndex.LeafDimmingValue:
                        return LeafDimmingValue;
                    case TreeData_FieldIndex.ShadowRadius:
                        return ShadowRadius;
                    case TreeData_FieldIndex.RockingSpeed:
                        return RockingSpeed;
                    case TreeData_FieldIndex.RustleSpeed:
                        return RustleSpeed;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                TreeData_FieldIndex enu = (TreeData_FieldIndex)index;
                switch (enu)
                {
                    case TreeData_FieldIndex.LeafCurvature:
                        this.LeafCurvature = ex;
                        break;
                    case TreeData_FieldIndex.MinimumLeafAngle:
                        this.MinimumLeafAngle = ex;
                        break;
                    case TreeData_FieldIndex.MaximumLeafAngle:
                        this.MaximumLeafAngle = ex;
                        break;
                    case TreeData_FieldIndex.BranchDimmingValue:
                        this.BranchDimmingValue = ex;
                        break;
                    case TreeData_FieldIndex.LeafDimmingValue:
                        this.LeafDimmingValue = ex;
                        break;
                    case TreeData_FieldIndex.ShadowRadius:
                        this.ShadowRadius = ex;
                        break;
                    case TreeData_FieldIndex.RockingSpeed:
                        this.RockingSpeed = ex;
                        break;
                    case TreeData_FieldIndex.RustleSpeed:
                        this.RustleSpeed = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                TreeData_FieldIndex enu = (TreeData_FieldIndex)index;
                switch (enu)
                {
                    case TreeData_FieldIndex.LeafCurvature:
                        this.LeafCurvature = (Exception?)obj;
                        break;
                    case TreeData_FieldIndex.MinimumLeafAngle:
                        this.MinimumLeafAngle = (Exception?)obj;
                        break;
                    case TreeData_FieldIndex.MaximumLeafAngle:
                        this.MaximumLeafAngle = (Exception?)obj;
                        break;
                    case TreeData_FieldIndex.BranchDimmingValue:
                        this.BranchDimmingValue = (Exception?)obj;
                        break;
                    case TreeData_FieldIndex.LeafDimmingValue:
                        this.LeafDimmingValue = (Exception?)obj;
                        break;
                    case TreeData_FieldIndex.ShadowRadius:
                        this.ShadowRadius = (Exception?)obj;
                        break;
                    case TreeData_FieldIndex.RockingSpeed:
                        this.RockingSpeed = (Exception?)obj;
                        break;
                    case TreeData_FieldIndex.RustleSpeed:
                        this.RustleSpeed = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (LeafCurvature != null) return true;
                if (MinimumLeafAngle != null) return true;
                if (MaximumLeafAngle != null) return true;
                if (BranchDimmingValue != null) return true;
                if (LeafDimmingValue != null) return true;
                if (ShadowRadius != null) return true;
                if (RockingSpeed != null) return true;
                if (RustleSpeed != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(LeafCurvature, "LeafCurvature");
                fg.AppendItem(MinimumLeafAngle, "MinimumLeafAngle");
                fg.AppendItem(MaximumLeafAngle, "MaximumLeafAngle");
                fg.AppendItem(BranchDimmingValue, "BranchDimmingValue");
                fg.AppendItem(LeafDimmingValue, "LeafDimmingValue");
                fg.AppendItem(ShadowRadius, "ShadowRadius");
                fg.AppendItem(RockingSpeed, "RockingSpeed");
                fg.AppendItem(RustleSpeed, "RustleSpeed");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.LeafCurvature = this.LeafCurvature.Combine(rhs.LeafCurvature);
                ret.MinimumLeafAngle = this.MinimumLeafAngle.Combine(rhs.MinimumLeafAngle);
                ret.MaximumLeafAngle = this.MaximumLeafAngle.Combine(rhs.MaximumLeafAngle);
                ret.BranchDimmingValue = this.BranchDimmingValue.Combine(rhs.BranchDimmingValue);
                ret.LeafDimmingValue = this.LeafDimmingValue.Combine(rhs.LeafDimmingValue);
                ret.ShadowRadius = this.ShadowRadius.Combine(rhs.ShadowRadius);
                ret.RockingSpeed = this.RockingSpeed.Combine(rhs.RockingSpeed);
                ret.RustleSpeed = this.RustleSpeed.Combine(rhs.RustleSpeed);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool LeafCurvature;
            public bool MinimumLeafAngle;
            public bool MaximumLeafAngle;
            public bool BranchDimmingValue;
            public bool LeafDimmingValue;
            public bool ShadowRadius;
            public bool RockingSpeed;
            public bool RustleSpeed;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.LeafCurvature = defaultOn;
                this.MinimumLeafAngle = defaultOn;
                this.MaximumLeafAngle = defaultOn;
                this.BranchDimmingValue = defaultOn;
                this.LeafDimmingValue = defaultOn;
                this.ShadowRadius = defaultOn;
                this.RockingSpeed = defaultOn;
                this.RustleSpeed = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((LeafCurvature, null));
                ret.Add((MinimumLeafAngle, null));
                ret.Add((MaximumLeafAngle, null));
                ret.Add((BranchDimmingValue, null));
                ret.Add((LeafDimmingValue, null));
                ret.Add((ShadowRadius, null));
                ret.Add((RockingSpeed, null));
                ret.Add((RustleSpeed, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = TreeData_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TreeDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((TreeDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static TreeData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new TreeData();
            ((TreeDataSetterCommon)((ITreeDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out TreeData item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((TreeDataSetterCommon)((ITreeDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static TreeData GetNew()
        {
            return new TreeData();
        }

    }
    #endregion

    #region Interface
    public partial interface ITreeData :
        ILoquiObjectSetter<ITreeData>,
        ITreeDataGetter
    {
        new Single LeafCurvature { get; set; }
        new Single MinimumLeafAngle { get; set; }
        new Single MaximumLeafAngle { get; set; }
        new Single BranchDimmingValue { get; set; }
        new Single LeafDimmingValue { get; set; }
        new Int32 ShadowRadius { get; set; }
        new Single RockingSpeed { get; set; }
        new Single RustleSpeed { get; set; }
    }

    public partial interface ITreeDataGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<ITreeDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => TreeData_Registration.Instance;
        Single LeafCurvature { get; }
        Single MinimumLeafAngle { get; }
        Single MaximumLeafAngle { get; }
        Single BranchDimmingValue { get; }
        Single LeafDimmingValue { get; }
        Int32 ShadowRadius { get; }
        Single RockingSpeed { get; }
        Single RustleSpeed { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class TreeDataMixIn
    {
        public static void Clear(this ITreeData item)
        {
            ((TreeDataSetterCommon)((ITreeDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static TreeData.Mask<bool> GetEqualsMask(
            this ITreeDataGetter item,
            ITreeDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TreeDataCommon)((ITreeDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ITreeDataGetter item,
            string? name = null,
            TreeData.Mask<bool>? printMask = null)
        {
            return ((TreeDataCommon)((ITreeDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ITreeDataGetter item,
            FileGeneration fg,
            string? name = null,
            TreeData.Mask<bool>? printMask = null)
        {
            ((TreeDataCommon)((ITreeDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ITreeDataGetter item,
            ITreeDataGetter rhs,
            TreeData.TranslationMask? equalsMask = null)
        {
            return ((TreeDataCommon)((ITreeDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ITreeData lhs,
            ITreeDataGetter rhs)
        {
            ((TreeDataSetterTranslationCommon)((ITreeDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ITreeData lhs,
            ITreeDataGetter rhs,
            TreeData.TranslationMask? copyMask = null)
        {
            ((TreeDataSetterTranslationCommon)((ITreeDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ITreeData lhs,
            ITreeDataGetter rhs,
            out TreeData.ErrorMask errorMask,
            TreeData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TreeDataSetterTranslationCommon)((ITreeDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = TreeData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITreeData lhs,
            ITreeDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TreeDataSetterTranslationCommon)((ITreeDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static TreeData DeepCopy(
            this ITreeDataGetter item,
            TreeData.TranslationMask? copyMask = null)
        {
            return ((TreeDataSetterTranslationCommon)((ITreeDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static TreeData DeepCopy(
            this ITreeDataGetter item,
            out TreeData.ErrorMask errorMask,
            TreeData.TranslationMask? copyMask = null)
        {
            return ((TreeDataSetterTranslationCommon)((ITreeDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static TreeData DeepCopy(
            this ITreeDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TreeDataSetterTranslationCommon)((ITreeDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ITreeData item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((TreeDataSetterCommon)((ITreeDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum TreeData_FieldIndex
    {
        LeafCurvature = 0,
        MinimumLeafAngle = 1,
        MaximumLeafAngle = 2,
        BranchDimmingValue = 3,
        LeafDimmingValue = 4,
        ShadowRadius = 5,
        RockingSpeed = 6,
        RustleSpeed = 7,
    }
    #endregion

    #region Registration
    public partial class TreeData_Registration : ILoquiRegistration
    {
        public static readonly TreeData_Registration Instance = new TreeData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 212,
            version: 0);

        public const string GUID = "690e9f8f-ddb5-4a0a-8d70-59c08a37997d";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(TreeData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(TreeData.ErrorMask);

        public static readonly Type ClassType = typeof(TreeData);

        public static readonly Type GetterType = typeof(ITreeDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITreeData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.TreeData";

        public const string Name = "TreeData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.CNAM;
        public static readonly Type BinaryWriteTranslation = typeof(TreeDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class TreeDataSetterCommon
    {
        public static readonly TreeDataSetterCommon Instance = new TreeDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITreeData item)
        {
            ClearPartial();
            item.LeafCurvature = default;
            item.MinimumLeafAngle = default;
            item.MaximumLeafAngle = default;
            item.BranchDimmingValue = default;
            item.LeafDimmingValue = default;
            item.ShadowRadius = default;
            item.RockingSpeed = default;
            item.RustleSpeed = default;
        }
        
        #region Mutagen
        public void RemapLinks(ITreeData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ITreeData item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.CNAM),
                translationParams?.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: TreeDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class TreeDataCommon
    {
        public static readonly TreeDataCommon Instance = new TreeDataCommon();

        public TreeData.Mask<bool> GetEqualsMask(
            ITreeDataGetter item,
            ITreeDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TreeData.Mask<bool>(false);
            ((TreeDataCommon)((ITreeDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITreeDataGetter item,
            ITreeDataGetter rhs,
            TreeData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.LeafCurvature = item.LeafCurvature.EqualsWithin(rhs.LeafCurvature);
            ret.MinimumLeafAngle = item.MinimumLeafAngle.EqualsWithin(rhs.MinimumLeafAngle);
            ret.MaximumLeafAngle = item.MaximumLeafAngle.EqualsWithin(rhs.MaximumLeafAngle);
            ret.BranchDimmingValue = item.BranchDimmingValue.EqualsWithin(rhs.BranchDimmingValue);
            ret.LeafDimmingValue = item.LeafDimmingValue.EqualsWithin(rhs.LeafDimmingValue);
            ret.ShadowRadius = item.ShadowRadius == rhs.ShadowRadius;
            ret.RockingSpeed = item.RockingSpeed.EqualsWithin(rhs.RockingSpeed);
            ret.RustleSpeed = item.RustleSpeed.EqualsWithin(rhs.RustleSpeed);
        }
        
        public string ToString(
            ITreeDataGetter item,
            string? name = null,
            TreeData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ITreeDataGetter item,
            FileGeneration fg,
            string? name = null,
            TreeData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"TreeData =>");
            }
            else
            {
                fg.AppendLine($"{name} (TreeData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ITreeDataGetter item,
            FileGeneration fg,
            TreeData.Mask<bool>? printMask = null)
        {
            if (printMask?.LeafCurvature ?? true)
            {
                fg.AppendItem(item.LeafCurvature, "LeafCurvature");
            }
            if (printMask?.MinimumLeafAngle ?? true)
            {
                fg.AppendItem(item.MinimumLeafAngle, "MinimumLeafAngle");
            }
            if (printMask?.MaximumLeafAngle ?? true)
            {
                fg.AppendItem(item.MaximumLeafAngle, "MaximumLeafAngle");
            }
            if (printMask?.BranchDimmingValue ?? true)
            {
                fg.AppendItem(item.BranchDimmingValue, "BranchDimmingValue");
            }
            if (printMask?.LeafDimmingValue ?? true)
            {
                fg.AppendItem(item.LeafDimmingValue, "LeafDimmingValue");
            }
            if (printMask?.ShadowRadius ?? true)
            {
                fg.AppendItem(item.ShadowRadius, "ShadowRadius");
            }
            if (printMask?.RockingSpeed ?? true)
            {
                fg.AppendItem(item.RockingSpeed, "RockingSpeed");
            }
            if (printMask?.RustleSpeed ?? true)
            {
                fg.AppendItem(item.RustleSpeed, "RustleSpeed");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITreeDataGetter? lhs,
            ITreeDataGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)TreeData_FieldIndex.LeafCurvature) ?? true))
            {
                if (!lhs.LeafCurvature.EqualsWithin(rhs.LeafCurvature)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)TreeData_FieldIndex.MinimumLeafAngle) ?? true))
            {
                if (!lhs.MinimumLeafAngle.EqualsWithin(rhs.MinimumLeafAngle)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)TreeData_FieldIndex.MaximumLeafAngle) ?? true))
            {
                if (!lhs.MaximumLeafAngle.EqualsWithin(rhs.MaximumLeafAngle)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)TreeData_FieldIndex.BranchDimmingValue) ?? true))
            {
                if (!lhs.BranchDimmingValue.EqualsWithin(rhs.BranchDimmingValue)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)TreeData_FieldIndex.LeafDimmingValue) ?? true))
            {
                if (!lhs.LeafDimmingValue.EqualsWithin(rhs.LeafDimmingValue)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)TreeData_FieldIndex.ShadowRadius) ?? true))
            {
                if (lhs.ShadowRadius != rhs.ShadowRadius) return false;
            }
            if ((crystal?.GetShouldTranslate((int)TreeData_FieldIndex.RockingSpeed) ?? true))
            {
                if (!lhs.RockingSpeed.EqualsWithin(rhs.RockingSpeed)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)TreeData_FieldIndex.RustleSpeed) ?? true))
            {
                if (!lhs.RustleSpeed.EqualsWithin(rhs.RustleSpeed)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ITreeDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.LeafCurvature);
            hash.Add(item.MinimumLeafAngle);
            hash.Add(item.MaximumLeafAngle);
            hash.Add(item.BranchDimmingValue);
            hash.Add(item.LeafDimmingValue);
            hash.Add(item.ShadowRadius);
            hash.Add(item.RockingSpeed);
            hash.Add(item.RustleSpeed);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return TreeData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(ITreeDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class TreeDataSetterTranslationCommon
    {
        public static readonly TreeDataSetterTranslationCommon Instance = new TreeDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ITreeData item,
            ITreeDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)TreeData_FieldIndex.LeafCurvature) ?? true))
            {
                item.LeafCurvature = rhs.LeafCurvature;
            }
            if ((copyMask?.GetShouldTranslate((int)TreeData_FieldIndex.MinimumLeafAngle) ?? true))
            {
                item.MinimumLeafAngle = rhs.MinimumLeafAngle;
            }
            if ((copyMask?.GetShouldTranslate((int)TreeData_FieldIndex.MaximumLeafAngle) ?? true))
            {
                item.MaximumLeafAngle = rhs.MaximumLeafAngle;
            }
            if ((copyMask?.GetShouldTranslate((int)TreeData_FieldIndex.BranchDimmingValue) ?? true))
            {
                item.BranchDimmingValue = rhs.BranchDimmingValue;
            }
            if ((copyMask?.GetShouldTranslate((int)TreeData_FieldIndex.LeafDimmingValue) ?? true))
            {
                item.LeafDimmingValue = rhs.LeafDimmingValue;
            }
            if ((copyMask?.GetShouldTranslate((int)TreeData_FieldIndex.ShadowRadius) ?? true))
            {
                item.ShadowRadius = rhs.ShadowRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)TreeData_FieldIndex.RockingSpeed) ?? true))
            {
                item.RockingSpeed = rhs.RockingSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)TreeData_FieldIndex.RustleSpeed) ?? true))
            {
                item.RustleSpeed = rhs.RustleSpeed;
            }
        }
        
        #endregion
        
        public TreeData DeepCopy(
            ITreeDataGetter item,
            TreeData.TranslationMask? copyMask = null)
        {
            TreeData ret = (TreeData)((TreeDataCommon)((ITreeDataGetter)item).CommonInstance()!).GetNew();
            ((TreeDataSetterTranslationCommon)((ITreeDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public TreeData DeepCopy(
            ITreeDataGetter item,
            out TreeData.ErrorMask errorMask,
            TreeData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            TreeData ret = (TreeData)((TreeDataCommon)((ITreeDataGetter)item).CommonInstance()!).GetNew();
            ((TreeDataSetterTranslationCommon)((ITreeDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = TreeData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public TreeData DeepCopy(
            ITreeDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            TreeData ret = (TreeData)((TreeDataCommon)((ITreeDataGetter)item).CommonInstance()!).GetNew();
            ((TreeDataSetterTranslationCommon)((ITreeDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class TreeData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TreeData_Registration.Instance;
        public static TreeData_Registration StaticRegistration => TreeData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TreeDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return TreeDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TreeDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITreeDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ITreeDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ITreeDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class TreeDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static TreeDataBinaryWriteTranslation Instance = new TreeDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            ITreeDataGetter item,
            MutagenWriter writer)
        {
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.LeafCurvature);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.MinimumLeafAngle);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.MaximumLeafAngle);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BranchDimmingValue);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.LeafDimmingValue);
            writer.Write(item.ShadowRadius);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.RockingSpeed);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.RustleSpeed);
        }

        public void Write(
            MutagenWriter writer,
            ITreeDataGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.CNAM),
                overflowRecord: translationParams?.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (ITreeDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class TreeDataBinaryCreateTranslation
    {
        public readonly static TreeDataBinaryCreateTranslation Instance = new TreeDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ITreeData item,
            MutagenFrame frame)
        {
            item.LeafCurvature = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.MinimumLeafAngle = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.MaximumLeafAngle = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.BranchDimmingValue = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.LeafDimmingValue = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ShadowRadius = frame.ReadInt32();
            item.RockingSpeed = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.RustleSpeed = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class TreeDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ITreeDataGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((TreeDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class TreeDataBinaryOverlay :
        PluginBinaryOverlay,
        ITreeDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TreeData_Registration.Instance;
        public static TreeData_Registration StaticRegistration => TreeData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TreeDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TreeDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITreeDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ITreeDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ITreeDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TreeDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((TreeDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Single LeafCurvature => _data.Slice(0x0, 0x4).Float();
        public Single MinimumLeafAngle => _data.Slice(0x4, 0x4).Float();
        public Single MaximumLeafAngle => _data.Slice(0x8, 0x4).Float();
        public Single BranchDimmingValue => _data.Slice(0xC, 0x4).Float();
        public Single LeafDimmingValue => _data.Slice(0x10, 0x4).Float();
        public Int32 ShadowRadius => BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(0x14, 0x4));
        public Single RockingSpeed => _data.Slice(0x18, 0x4).Float();
        public Single RustleSpeed => _data.Slice(0x1C, 0x4).Float();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected TreeDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static TreeDataBinaryOverlay TreeDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new TreeDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants, parseParams),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0x20 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static TreeDataBinaryOverlay TreeDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return TreeDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TreeDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ITreeDataGetter rhs) return false;
            return ((TreeDataCommon)((ITreeDataGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(ITreeDataGetter? obj)
        {
            return ((TreeDataCommon)((ITreeDataGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((TreeDataCommon)((ITreeDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

