/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Oblivion.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class MagicEffectSubData :
        IEquatable<IMagicEffectSubDataGetter>,
        ILoquiObjectSetter<MagicEffectSubData>,
        IMagicEffectSubData
    {
        #region Ctor
        public MagicEffectSubData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region EnchantEffect
        private readonly IFormLink<IEffectShaderGetter> _EnchantEffect = new FormLink<IEffectShaderGetter>();
        public IFormLink<IEffectShaderGetter> EnchantEffect
        {
            get => _EnchantEffect;
            set => _EnchantEffect.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IEffectShaderGetter> IMagicEffectSubDataGetter.EnchantEffect => this.EnchantEffect;
        #endregion
        #region CastingSound
        private readonly IFormLink<ISoundGetter> _CastingSound = new FormLink<ISoundGetter>();
        public IFormLink<ISoundGetter> CastingSound
        {
            get => _CastingSound;
            set => _CastingSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ISoundGetter> IMagicEffectSubDataGetter.CastingSound => this.CastingSound;
        #endregion
        #region BoltSound
        private readonly IFormLink<ISoundGetter> _BoltSound = new FormLink<ISoundGetter>();
        public IFormLink<ISoundGetter> BoltSound
        {
            get => _BoltSound;
            set => _BoltSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ISoundGetter> IMagicEffectSubDataGetter.BoltSound => this.BoltSound;
        #endregion
        #region HitSound
        private readonly IFormLink<ISoundGetter> _HitSound = new FormLink<ISoundGetter>();
        public IFormLink<ISoundGetter> HitSound
        {
            get => _HitSound;
            set => _HitSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ISoundGetter> IMagicEffectSubDataGetter.HitSound => this.HitSound;
        #endregion
        #region AreaSound
        private readonly IFormLink<ISoundGetter> _AreaSound = new FormLink<ISoundGetter>();
        public IFormLink<ISoundGetter> AreaSound
        {
            get => _AreaSound;
            set => _AreaSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ISoundGetter> IMagicEffectSubDataGetter.AreaSound => this.AreaSound;
        #endregion
        #region ConstantEffectEnchantmentFactor
        public Single ConstantEffectEnchantmentFactor { get; set; } = default(Single);
        #endregion
        #region ConstantEffectBarterFactor
        public Single ConstantEffectBarterFactor { get; set; } = default(Single);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            MagicEffectSubDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IMagicEffectSubDataGetter rhs) return false;
            return ((MagicEffectSubDataCommon)((IMagicEffectSubDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IMagicEffectSubDataGetter? obj)
        {
            return ((MagicEffectSubDataCommon)((IMagicEffectSubDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((MagicEffectSubDataCommon)((IMagicEffectSubDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.EnchantEffect = initialValue;
                this.CastingSound = initialValue;
                this.BoltSound = initialValue;
                this.HitSound = initialValue;
                this.AreaSound = initialValue;
                this.ConstantEffectEnchantmentFactor = initialValue;
                this.ConstantEffectBarterFactor = initialValue;
            }

            public Mask(
                TItem EnchantEffect,
                TItem CastingSound,
                TItem BoltSound,
                TItem HitSound,
                TItem AreaSound,
                TItem ConstantEffectEnchantmentFactor,
                TItem ConstantEffectBarterFactor)
            {
                this.EnchantEffect = EnchantEffect;
                this.CastingSound = CastingSound;
                this.BoltSound = BoltSound;
                this.HitSound = HitSound;
                this.AreaSound = AreaSound;
                this.ConstantEffectEnchantmentFactor = ConstantEffectEnchantmentFactor;
                this.ConstantEffectBarterFactor = ConstantEffectBarterFactor;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem EnchantEffect;
            public TItem CastingSound;
            public TItem BoltSound;
            public TItem HitSound;
            public TItem AreaSound;
            public TItem ConstantEffectEnchantmentFactor;
            public TItem ConstantEffectBarterFactor;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.EnchantEffect, rhs.EnchantEffect)) return false;
                if (!object.Equals(this.CastingSound, rhs.CastingSound)) return false;
                if (!object.Equals(this.BoltSound, rhs.BoltSound)) return false;
                if (!object.Equals(this.HitSound, rhs.HitSound)) return false;
                if (!object.Equals(this.AreaSound, rhs.AreaSound)) return false;
                if (!object.Equals(this.ConstantEffectEnchantmentFactor, rhs.ConstantEffectEnchantmentFactor)) return false;
                if (!object.Equals(this.ConstantEffectBarterFactor, rhs.ConstantEffectBarterFactor)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.EnchantEffect);
                hash.Add(this.CastingSound);
                hash.Add(this.BoltSound);
                hash.Add(this.HitSound);
                hash.Add(this.AreaSound);
                hash.Add(this.ConstantEffectEnchantmentFactor);
                hash.Add(this.ConstantEffectBarterFactor);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.EnchantEffect)) return false;
                if (!eval(this.CastingSound)) return false;
                if (!eval(this.BoltSound)) return false;
                if (!eval(this.HitSound)) return false;
                if (!eval(this.AreaSound)) return false;
                if (!eval(this.ConstantEffectEnchantmentFactor)) return false;
                if (!eval(this.ConstantEffectBarterFactor)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.EnchantEffect)) return true;
                if (eval(this.CastingSound)) return true;
                if (eval(this.BoltSound)) return true;
                if (eval(this.HitSound)) return true;
                if (eval(this.AreaSound)) return true;
                if (eval(this.ConstantEffectEnchantmentFactor)) return true;
                if (eval(this.ConstantEffectBarterFactor)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new MagicEffectSubData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.EnchantEffect = eval(this.EnchantEffect);
                obj.CastingSound = eval(this.CastingSound);
                obj.BoltSound = eval(this.BoltSound);
                obj.HitSound = eval(this.HitSound);
                obj.AreaSound = eval(this.AreaSound);
                obj.ConstantEffectEnchantmentFactor = eval(this.ConstantEffectEnchantmentFactor);
                obj.ConstantEffectBarterFactor = eval(this.ConstantEffectBarterFactor);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(MagicEffectSubData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, MagicEffectSubData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(MagicEffectSubData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.EnchantEffect ?? true)
                    {
                        sb.AppendItem(EnchantEffect, "EnchantEffect");
                    }
                    if (printMask?.CastingSound ?? true)
                    {
                        sb.AppendItem(CastingSound, "CastingSound");
                    }
                    if (printMask?.BoltSound ?? true)
                    {
                        sb.AppendItem(BoltSound, "BoltSound");
                    }
                    if (printMask?.HitSound ?? true)
                    {
                        sb.AppendItem(HitSound, "HitSound");
                    }
                    if (printMask?.AreaSound ?? true)
                    {
                        sb.AppendItem(AreaSound, "AreaSound");
                    }
                    if (printMask?.ConstantEffectEnchantmentFactor ?? true)
                    {
                        sb.AppendItem(ConstantEffectEnchantmentFactor, "ConstantEffectEnchantmentFactor");
                    }
                    if (printMask?.ConstantEffectBarterFactor ?? true)
                    {
                        sb.AppendItem(ConstantEffectBarterFactor, "ConstantEffectBarterFactor");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? EnchantEffect;
            public Exception? CastingSound;
            public Exception? BoltSound;
            public Exception? HitSound;
            public Exception? AreaSound;
            public Exception? ConstantEffectEnchantmentFactor;
            public Exception? ConstantEffectBarterFactor;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
                switch (enu)
                {
                    case MagicEffectSubData_FieldIndex.EnchantEffect:
                        return EnchantEffect;
                    case MagicEffectSubData_FieldIndex.CastingSound:
                        return CastingSound;
                    case MagicEffectSubData_FieldIndex.BoltSound:
                        return BoltSound;
                    case MagicEffectSubData_FieldIndex.HitSound:
                        return HitSound;
                    case MagicEffectSubData_FieldIndex.AreaSound:
                        return AreaSound;
                    case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                        return ConstantEffectEnchantmentFactor;
                    case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                        return ConstantEffectBarterFactor;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
                switch (enu)
                {
                    case MagicEffectSubData_FieldIndex.EnchantEffect:
                        this.EnchantEffect = ex;
                        break;
                    case MagicEffectSubData_FieldIndex.CastingSound:
                        this.CastingSound = ex;
                        break;
                    case MagicEffectSubData_FieldIndex.BoltSound:
                        this.BoltSound = ex;
                        break;
                    case MagicEffectSubData_FieldIndex.HitSound:
                        this.HitSound = ex;
                        break;
                    case MagicEffectSubData_FieldIndex.AreaSound:
                        this.AreaSound = ex;
                        break;
                    case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                        this.ConstantEffectEnchantmentFactor = ex;
                        break;
                    case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                        this.ConstantEffectBarterFactor = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
                switch (enu)
                {
                    case MagicEffectSubData_FieldIndex.EnchantEffect:
                        this.EnchantEffect = (Exception?)obj;
                        break;
                    case MagicEffectSubData_FieldIndex.CastingSound:
                        this.CastingSound = (Exception?)obj;
                        break;
                    case MagicEffectSubData_FieldIndex.BoltSound:
                        this.BoltSound = (Exception?)obj;
                        break;
                    case MagicEffectSubData_FieldIndex.HitSound:
                        this.HitSound = (Exception?)obj;
                        break;
                    case MagicEffectSubData_FieldIndex.AreaSound:
                        this.AreaSound = (Exception?)obj;
                        break;
                    case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                        this.ConstantEffectEnchantmentFactor = (Exception?)obj;
                        break;
                    case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                        this.ConstantEffectBarterFactor = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (EnchantEffect != null) return true;
                if (CastingSound != null) return true;
                if (BoltSound != null) return true;
                if (HitSound != null) return true;
                if (AreaSound != null) return true;
                if (ConstantEffectEnchantmentFactor != null) return true;
                if (ConstantEffectBarterFactor != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(EnchantEffect, "EnchantEffect");
                }
                {
                    sb.AppendItem(CastingSound, "CastingSound");
                }
                {
                    sb.AppendItem(BoltSound, "BoltSound");
                }
                {
                    sb.AppendItem(HitSound, "HitSound");
                }
                {
                    sb.AppendItem(AreaSound, "AreaSound");
                }
                {
                    sb.AppendItem(ConstantEffectEnchantmentFactor, "ConstantEffectEnchantmentFactor");
                }
                {
                    sb.AppendItem(ConstantEffectBarterFactor, "ConstantEffectBarterFactor");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.EnchantEffect = this.EnchantEffect.Combine(rhs.EnchantEffect);
                ret.CastingSound = this.CastingSound.Combine(rhs.CastingSound);
                ret.BoltSound = this.BoltSound.Combine(rhs.BoltSound);
                ret.HitSound = this.HitSound.Combine(rhs.HitSound);
                ret.AreaSound = this.AreaSound.Combine(rhs.AreaSound);
                ret.ConstantEffectEnchantmentFactor = this.ConstantEffectEnchantmentFactor.Combine(rhs.ConstantEffectEnchantmentFactor);
                ret.ConstantEffectBarterFactor = this.ConstantEffectBarterFactor.Combine(rhs.ConstantEffectBarterFactor);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool EnchantEffect;
            public bool CastingSound;
            public bool BoltSound;
            public bool HitSound;
            public bool AreaSound;
            public bool ConstantEffectEnchantmentFactor;
            public bool ConstantEffectBarterFactor;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.EnchantEffect = defaultOn;
                this.CastingSound = defaultOn;
                this.BoltSound = defaultOn;
                this.HitSound = defaultOn;
                this.AreaSound = defaultOn;
                this.ConstantEffectEnchantmentFactor = defaultOn;
                this.ConstantEffectBarterFactor = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((EnchantEffect, null));
                ret.Add((CastingSound, null));
                ret.Add((BoltSound, null));
                ret.Add((HitSound, null));
                ret.Add((AreaSound, null));
                ret.Add((ConstantEffectEnchantmentFactor, null));
                ret.Add((ConstantEffectBarterFactor, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => MagicEffectSubDataCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => MagicEffectSubDataSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => MagicEffectSubDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MagicEffectSubDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static MagicEffectSubData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new MagicEffectSubData();
            ((MagicEffectSubDataSetterCommon)((IMagicEffectSubDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out MagicEffectSubData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((MagicEffectSubDataSetterCommon)((IMagicEffectSubDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static MagicEffectSubData GetNew()
        {
            return new MagicEffectSubData();
        }

    }
    #endregion

    #region Interface
    public partial interface IMagicEffectSubData :
        IFormLinkContainer,
        ILoquiObjectSetter<IMagicEffectSubData>,
        IMagicEffectSubDataGetter
    {
        new IFormLink<IEffectShaderGetter> EnchantEffect { get; set; }
        new IFormLink<ISoundGetter> CastingSound { get; set; }
        new IFormLink<ISoundGetter> BoltSound { get; set; }
        new IFormLink<ISoundGetter> HitSound { get; set; }
        new IFormLink<ISoundGetter> AreaSound { get; set; }
        new Single ConstantEffectEnchantmentFactor { get; set; }
        new Single ConstantEffectBarterFactor { get; set; }
    }

    public partial interface IMagicEffectSubDataGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IMagicEffectSubDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => MagicEffectSubData_Registration.Instance;
        IFormLinkGetter<IEffectShaderGetter> EnchantEffect { get; }
        IFormLinkGetter<ISoundGetter> CastingSound { get; }
        IFormLinkGetter<ISoundGetter> BoltSound { get; }
        IFormLinkGetter<ISoundGetter> HitSound { get; }
        IFormLinkGetter<ISoundGetter> AreaSound { get; }
        Single ConstantEffectEnchantmentFactor { get; }
        Single ConstantEffectBarterFactor { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class MagicEffectSubDataMixIn
    {
        public static void Clear(this IMagicEffectSubData item)
        {
            ((MagicEffectSubDataSetterCommon)((IMagicEffectSubDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static MagicEffectSubData.Mask<bool> GetEqualsMask(
            this IMagicEffectSubDataGetter item,
            IMagicEffectSubDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MagicEffectSubDataCommon)((IMagicEffectSubDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IMagicEffectSubDataGetter item,
            string? name = null,
            MagicEffectSubData.Mask<bool>? printMask = null)
        {
            return ((MagicEffectSubDataCommon)((IMagicEffectSubDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IMagicEffectSubDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            MagicEffectSubData.Mask<bool>? printMask = null)
        {
            ((MagicEffectSubDataCommon)((IMagicEffectSubDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IMagicEffectSubDataGetter item,
            IMagicEffectSubDataGetter rhs,
            MagicEffectSubData.TranslationMask? equalsMask = null)
        {
            return ((MagicEffectSubDataCommon)((IMagicEffectSubDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IMagicEffectSubData lhs,
            IMagicEffectSubDataGetter rhs)
        {
            ((MagicEffectSubDataSetterTranslationCommon)((IMagicEffectSubDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IMagicEffectSubData lhs,
            IMagicEffectSubDataGetter rhs,
            MagicEffectSubData.TranslationMask? copyMask = null)
        {
            ((MagicEffectSubDataSetterTranslationCommon)((IMagicEffectSubDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IMagicEffectSubData lhs,
            IMagicEffectSubDataGetter rhs,
            out MagicEffectSubData.ErrorMask errorMask,
            MagicEffectSubData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((MagicEffectSubDataSetterTranslationCommon)((IMagicEffectSubDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = MagicEffectSubData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IMagicEffectSubData lhs,
            IMagicEffectSubDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((MagicEffectSubDataSetterTranslationCommon)((IMagicEffectSubDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static MagicEffectSubData DeepCopy(
            this IMagicEffectSubDataGetter item,
            MagicEffectSubData.TranslationMask? copyMask = null)
        {
            return ((MagicEffectSubDataSetterTranslationCommon)((IMagicEffectSubDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static MagicEffectSubData DeepCopy(
            this IMagicEffectSubDataGetter item,
            out MagicEffectSubData.ErrorMask errorMask,
            MagicEffectSubData.TranslationMask? copyMask = null)
        {
            return ((MagicEffectSubDataSetterTranslationCommon)((IMagicEffectSubDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static MagicEffectSubData DeepCopy(
            this IMagicEffectSubDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((MagicEffectSubDataSetterTranslationCommon)((IMagicEffectSubDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IMagicEffectSubData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((MagicEffectSubDataSetterCommon)((IMagicEffectSubDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    #region Field Index
    internal enum MagicEffectSubData_FieldIndex
    {
        EnchantEffect = 0,
        CastingSound = 1,
        BoltSound = 2,
        HitSound = 3,
        AreaSound = 4,
        ConstantEffectEnchantmentFactor = 5,
        ConstantEffectBarterFactor = 6,
    }
    #endregion

    #region Registration
    internal partial class MagicEffectSubData_Registration : ILoquiRegistration
    {
        public static readonly MagicEffectSubData_Registration Instance = new MagicEffectSubData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(MagicEffectSubData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(MagicEffectSubData.ErrorMask);

        public static readonly Type ClassType = typeof(MagicEffectSubData);

        public static readonly Type GetterType = typeof(IMagicEffectSubDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMagicEffectSubData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.MagicEffectSubData";

        public const string Name = "MagicEffectSubData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(MagicEffectSubDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class MagicEffectSubDataSetterCommon
    {
        public static readonly MagicEffectSubDataSetterCommon Instance = new MagicEffectSubDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IMagicEffectSubData item)
        {
            ClearPartial();
            item.EnchantEffect.Clear();
            item.CastingSound.Clear();
            item.BoltSound.Clear();
            item.HitSound.Clear();
            item.AreaSound.Clear();
            item.ConstantEffectEnchantmentFactor = default(Single);
            item.ConstantEffectBarterFactor = default(Single);
        }
        
        #region Mutagen
        public void RemapLinks(IMagicEffectSubData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.EnchantEffect.Relink(mapping);
            obj.CastingSound.Relink(mapping);
            obj.BoltSound.Relink(mapping);
            obj.HitSound.Relink(mapping);
            obj.AreaSound.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IMagicEffectSubData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: MagicEffectSubDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class MagicEffectSubDataCommon
    {
        public static readonly MagicEffectSubDataCommon Instance = new MagicEffectSubDataCommon();

        public MagicEffectSubData.Mask<bool> GetEqualsMask(
            IMagicEffectSubDataGetter item,
            IMagicEffectSubDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MagicEffectSubData.Mask<bool>(false);
            ((MagicEffectSubDataCommon)((IMagicEffectSubDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMagicEffectSubDataGetter item,
            IMagicEffectSubDataGetter rhs,
            MagicEffectSubData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.EnchantEffect = item.EnchantEffect.Equals(rhs.EnchantEffect);
            ret.CastingSound = item.CastingSound.Equals(rhs.CastingSound);
            ret.BoltSound = item.BoltSound.Equals(rhs.BoltSound);
            ret.HitSound = item.HitSound.Equals(rhs.HitSound);
            ret.AreaSound = item.AreaSound.Equals(rhs.AreaSound);
            ret.ConstantEffectEnchantmentFactor = item.ConstantEffectEnchantmentFactor.EqualsWithin(rhs.ConstantEffectEnchantmentFactor);
            ret.ConstantEffectBarterFactor = item.ConstantEffectBarterFactor.EqualsWithin(rhs.ConstantEffectBarterFactor);
        }
        
        public string Print(
            IMagicEffectSubDataGetter item,
            string? name = null,
            MagicEffectSubData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IMagicEffectSubDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            MagicEffectSubData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"MagicEffectSubData =>");
            }
            else
            {
                sb.AppendLine($"{name} (MagicEffectSubData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IMagicEffectSubDataGetter item,
            StructuredStringBuilder sb,
            MagicEffectSubData.Mask<bool>? printMask = null)
        {
            if (printMask?.EnchantEffect ?? true)
            {
                sb.AppendItem(item.EnchantEffect.FormKey, "EnchantEffect");
            }
            if (printMask?.CastingSound ?? true)
            {
                sb.AppendItem(item.CastingSound.FormKey, "CastingSound");
            }
            if (printMask?.BoltSound ?? true)
            {
                sb.AppendItem(item.BoltSound.FormKey, "BoltSound");
            }
            if (printMask?.HitSound ?? true)
            {
                sb.AppendItem(item.HitSound.FormKey, "HitSound");
            }
            if (printMask?.AreaSound ?? true)
            {
                sb.AppendItem(item.AreaSound.FormKey, "AreaSound");
            }
            if (printMask?.ConstantEffectEnchantmentFactor ?? true)
            {
                sb.AppendItem(item.ConstantEffectEnchantmentFactor, "ConstantEffectEnchantmentFactor");
            }
            if (printMask?.ConstantEffectBarterFactor ?? true)
            {
                sb.AppendItem(item.ConstantEffectBarterFactor, "ConstantEffectBarterFactor");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMagicEffectSubDataGetter? lhs,
            IMagicEffectSubDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.EnchantEffect) ?? true))
            {
                if (!lhs.EnchantEffect.Equals(rhs.EnchantEffect)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.CastingSound) ?? true))
            {
                if (!lhs.CastingSound.Equals(rhs.CastingSound)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.BoltSound) ?? true))
            {
                if (!lhs.BoltSound.Equals(rhs.BoltSound)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.HitSound) ?? true))
            {
                if (!lhs.HitSound.Equals(rhs.HitSound)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.AreaSound) ?? true))
            {
                if (!lhs.AreaSound.Equals(rhs.AreaSound)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor) ?? true))
            {
                if (!lhs.ConstantEffectEnchantmentFactor.EqualsWithin(rhs.ConstantEffectEnchantmentFactor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor) ?? true))
            {
                if (!lhs.ConstantEffectBarterFactor.EqualsWithin(rhs.ConstantEffectBarterFactor)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IMagicEffectSubDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.EnchantEffect);
            hash.Add(item.CastingSound);
            hash.Add(item.BoltSound);
            hash.Add(item.HitSound);
            hash.Add(item.AreaSound);
            hash.Add(item.ConstantEffectEnchantmentFactor);
            hash.Add(item.ConstantEffectBarterFactor);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return MagicEffectSubData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IMagicEffectSubDataGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.EnchantEffect);
            yield return FormLinkInformation.Factory(obj.CastingSound);
            yield return FormLinkInformation.Factory(obj.BoltSound);
            yield return FormLinkInformation.Factory(obj.HitSound);
            yield return FormLinkInformation.Factory(obj.AreaSound);
            yield break;
        }
        
        #endregion
        
    }
    internal partial class MagicEffectSubDataSetterTranslationCommon
    {
        public static readonly MagicEffectSubDataSetterTranslationCommon Instance = new MagicEffectSubDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IMagicEffectSubData item,
            IMagicEffectSubDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.EnchantEffect) ?? true))
            {
                item.EnchantEffect.SetTo(rhs.EnchantEffect.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.CastingSound) ?? true))
            {
                item.CastingSound.SetTo(rhs.CastingSound.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.BoltSound) ?? true))
            {
                item.BoltSound.SetTo(rhs.BoltSound.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.HitSound) ?? true))
            {
                item.HitSound.SetTo(rhs.HitSound.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.AreaSound) ?? true))
            {
                item.AreaSound.SetTo(rhs.AreaSound.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor) ?? true))
            {
                item.ConstantEffectEnchantmentFactor = rhs.ConstantEffectEnchantmentFactor;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor) ?? true))
            {
                item.ConstantEffectBarterFactor = rhs.ConstantEffectBarterFactor;
            }
        }
        
        #endregion
        
        public MagicEffectSubData DeepCopy(
            IMagicEffectSubDataGetter item,
            MagicEffectSubData.TranslationMask? copyMask = null)
        {
            MagicEffectSubData ret = (MagicEffectSubData)((MagicEffectSubDataCommon)((IMagicEffectSubDataGetter)item).CommonInstance()!).GetNew();
            ((MagicEffectSubDataSetterTranslationCommon)((IMagicEffectSubDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public MagicEffectSubData DeepCopy(
            IMagicEffectSubDataGetter item,
            out MagicEffectSubData.ErrorMask errorMask,
            MagicEffectSubData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            MagicEffectSubData ret = (MagicEffectSubData)((MagicEffectSubDataCommon)((IMagicEffectSubDataGetter)item).CommonInstance()!).GetNew();
            ((MagicEffectSubDataSetterTranslationCommon)((IMagicEffectSubDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = MagicEffectSubData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public MagicEffectSubData DeepCopy(
            IMagicEffectSubDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            MagicEffectSubData ret = (MagicEffectSubData)((MagicEffectSubDataCommon)((IMagicEffectSubDataGetter)item).CommonInstance()!).GetNew();
            ((MagicEffectSubDataSetterTranslationCommon)((IMagicEffectSubDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class MagicEffectSubData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MagicEffectSubData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => MagicEffectSubData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => MagicEffectSubDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return MagicEffectSubDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => MagicEffectSubDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IMagicEffectSubDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IMagicEffectSubDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IMagicEffectSubDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion
{
    public partial class MagicEffectSubDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly MagicEffectSubDataBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IMagicEffectSubDataGetter item,
            MutagenWriter writer)
        {
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EnchantEffect);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.CastingSound);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BoltSound);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.HitSound);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AreaSound);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ConstantEffectEnchantmentFactor);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ConstantEffectBarterFactor);
        }

        public void Write(
            MutagenWriter writer,
            IMagicEffectSubDataGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IMagicEffectSubDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class MagicEffectSubDataBinaryCreateTranslation
    {
        public static readonly MagicEffectSubDataBinaryCreateTranslation Instance = new MagicEffectSubDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IMagicEffectSubData item,
            MutagenFrame frame)
        {
            item.EnchantEffect.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.CastingSound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.BoltSound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.HitSound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.AreaSound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.ConstantEffectEnchantmentFactor = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ConstantEffectBarterFactor = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class MagicEffectSubDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IMagicEffectSubDataGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MagicEffectSubDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion
{
    internal partial class MagicEffectSubDataBinaryOverlay :
        PluginBinaryOverlay,
        IMagicEffectSubDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MagicEffectSubData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => MagicEffectSubData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => MagicEffectSubDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => MagicEffectSubDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IMagicEffectSubDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IMagicEffectSubDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IMagicEffectSubDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => MagicEffectSubDataCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => MagicEffectSubDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MagicEffectSubDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public IFormLinkGetter<IEffectShaderGetter> EnchantEffect => FormLinkBinaryTranslation.Instance.OverlayFactory<IEffectShaderGetter>(_package, _structData.Span.Slice(0x0, 0x4));
        public IFormLinkGetter<ISoundGetter> CastingSound => FormLinkBinaryTranslation.Instance.OverlayFactory<ISoundGetter>(_package, _structData.Span.Slice(0x4, 0x4));
        public IFormLinkGetter<ISoundGetter> BoltSound => FormLinkBinaryTranslation.Instance.OverlayFactory<ISoundGetter>(_package, _structData.Span.Slice(0x8, 0x4));
        public IFormLinkGetter<ISoundGetter> HitSound => FormLinkBinaryTranslation.Instance.OverlayFactory<ISoundGetter>(_package, _structData.Span.Slice(0xC, 0x4));
        public IFormLinkGetter<ISoundGetter> AreaSound => FormLinkBinaryTranslation.Instance.OverlayFactory<ISoundGetter>(_package, _structData.Span.Slice(0x10, 0x4));
        public Single ConstantEffectEnchantmentFactor => _structData.Slice(0x14, 0x4).Float();
        public Single ConstantEffectBarterFactor => _structData.Slice(0x18, 0x4).Float();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected MagicEffectSubDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IMagicEffectSubDataGetter MagicEffectSubDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x1C,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new MagicEffectSubDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x1C;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IMagicEffectSubDataGetter MagicEffectSubDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return MagicEffectSubDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            MagicEffectSubDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IMagicEffectSubDataGetter rhs) return false;
            return ((MagicEffectSubDataCommon)((IMagicEffectSubDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IMagicEffectSubDataGetter? obj)
        {
            return ((MagicEffectSubDataCommon)((IMagicEffectSubDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((MagicEffectSubDataCommon)((IMagicEffectSubDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

