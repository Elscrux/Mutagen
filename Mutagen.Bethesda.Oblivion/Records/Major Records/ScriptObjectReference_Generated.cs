/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class ScriptObjectReference :
        AScriptReference,
        IEquatable<IScriptObjectReferenceGetter>,
        ILoquiObjectSetter<ScriptObjectReference>,
        IScriptObjectReference
    {
        #region Ctor
        public ScriptObjectReference()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Reference
        private readonly IFormLink<IOblivionMajorRecordGetter> _Reference = new FormLink<IOblivionMajorRecordGetter>();
        public IFormLink<IOblivionMajorRecordGetter> Reference
        {
            get => _Reference;
            set => _Reference.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IOblivionMajorRecordGetter> IScriptObjectReferenceGetter.Reference => this.Reference;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ScriptObjectReferenceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IScriptObjectReferenceGetter rhs) return false;
            return ((ScriptObjectReferenceCommon)((IScriptObjectReferenceGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IScriptObjectReferenceGetter? obj)
        {
            return ((ScriptObjectReferenceCommon)((IScriptObjectReferenceGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ScriptObjectReferenceCommon)((IScriptObjectReferenceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AScriptReference.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem Reference)
            : base()
            {
                this.Reference = Reference;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Reference;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Reference, rhs.Reference)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Reference);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Reference)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Reference)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ScriptObjectReference.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Reference = eval(this.Reference);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ScriptObjectReference.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ScriptObjectReference.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ScriptObjectReference.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Reference ?? true)
                    {
                        fg.AppendItem(Reference, "Reference");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            AScriptReference.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Reference;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ScriptObjectReference_FieldIndex enu = (ScriptObjectReference_FieldIndex)index;
                switch (enu)
                {
                    case ScriptObjectReference_FieldIndex.Reference:
                        return Reference;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ScriptObjectReference_FieldIndex enu = (ScriptObjectReference_FieldIndex)index;
                switch (enu)
                {
                    case ScriptObjectReference_FieldIndex.Reference:
                        this.Reference = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ScriptObjectReference_FieldIndex enu = (ScriptObjectReference_FieldIndex)index;
                switch (enu)
                {
                    case ScriptObjectReference_FieldIndex.Reference:
                        this.Reference = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Reference != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Reference, "Reference");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Reference = this.Reference.Combine(rhs.Reference);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AScriptReference.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Reference;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Reference = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Reference, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = ScriptObjectReference_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => ScriptObjectReferenceCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ScriptObjectReferenceSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ScriptObjectReferenceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ScriptObjectReferenceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static ScriptObjectReference CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new ScriptObjectReference();
            ((ScriptObjectReferenceSetterCommon)((IScriptObjectReferenceGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ScriptObjectReference item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ScriptObjectReferenceSetterCommon)((IScriptObjectReferenceGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ScriptObjectReference GetNew()
        {
            return new ScriptObjectReference();
        }

    }
    #endregion

    #region Interface
    public partial interface IScriptObjectReference :
        IAScriptReference,
        IFormLinkContainer,
        ILoquiObjectSetter<IScriptObjectReference>,
        IScriptObjectReferenceGetter
    {
        new IFormLink<IOblivionMajorRecordGetter> Reference { get; set; }
    }

    public partial interface IScriptObjectReferenceGetter :
        IAScriptReferenceGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IScriptObjectReferenceGetter>
    {
        static new ILoquiRegistration StaticRegistration => ScriptObjectReference_Registration.Instance;
        IFormLinkGetter<IOblivionMajorRecordGetter> Reference { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ScriptObjectReferenceMixIn
    {
        public static void Clear(this IScriptObjectReference item)
        {
            ((ScriptObjectReferenceSetterCommon)((IScriptObjectReferenceGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ScriptObjectReference.Mask<bool> GetEqualsMask(
            this IScriptObjectReferenceGetter item,
            IScriptObjectReferenceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ScriptObjectReferenceCommon)((IScriptObjectReferenceGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IScriptObjectReferenceGetter item,
            string? name = null,
            ScriptObjectReference.Mask<bool>? printMask = null)
        {
            return ((ScriptObjectReferenceCommon)((IScriptObjectReferenceGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IScriptObjectReferenceGetter item,
            FileGeneration fg,
            string? name = null,
            ScriptObjectReference.Mask<bool>? printMask = null)
        {
            ((ScriptObjectReferenceCommon)((IScriptObjectReferenceGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IScriptObjectReferenceGetter item,
            IScriptObjectReferenceGetter rhs,
            ScriptObjectReference.TranslationMask? equalsMask = null)
        {
            return ((ScriptObjectReferenceCommon)((IScriptObjectReferenceGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IScriptObjectReference lhs,
            IScriptObjectReferenceGetter rhs,
            out ScriptObjectReference.ErrorMask errorMask,
            ScriptObjectReference.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ScriptObjectReferenceSetterTranslationCommon)((IScriptObjectReferenceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ScriptObjectReference.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IScriptObjectReference lhs,
            IScriptObjectReferenceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ScriptObjectReferenceSetterTranslationCommon)((IScriptObjectReferenceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ScriptObjectReference DeepCopy(
            this IScriptObjectReferenceGetter item,
            ScriptObjectReference.TranslationMask? copyMask = null)
        {
            return ((ScriptObjectReferenceSetterTranslationCommon)((IScriptObjectReferenceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ScriptObjectReference DeepCopy(
            this IScriptObjectReferenceGetter item,
            out ScriptObjectReference.ErrorMask errorMask,
            ScriptObjectReference.TranslationMask? copyMask = null)
        {
            return ((ScriptObjectReferenceSetterTranslationCommon)((IScriptObjectReferenceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ScriptObjectReference DeepCopy(
            this IScriptObjectReferenceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ScriptObjectReferenceSetterTranslationCommon)((IScriptObjectReferenceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IScriptObjectReference item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((ScriptObjectReferenceSetterCommon)((IScriptObjectReferenceGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum ScriptObjectReference_FieldIndex
    {
        Reference = 0,
    }
    #endregion

    #region Registration
    public partial class ScriptObjectReference_Registration : ILoquiRegistration
    {
        public static readonly ScriptObjectReference_Registration Instance = new ScriptObjectReference_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 61,
            version: 0);

        public const string GUID = "a00d44e0-398b-45a6-9e45-facc1da7a2b2";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(ScriptObjectReference.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ScriptObjectReference.ErrorMask);

        public static readonly Type ClassType = typeof(ScriptObjectReference);

        public static readonly Type GetterType = typeof(IScriptObjectReferenceGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IScriptObjectReference);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.ScriptObjectReference";

        public const string Name = "ScriptObjectReference";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.SCRO;
        public static readonly Type BinaryWriteTranslation = typeof(ScriptObjectReferenceBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ScriptObjectReferenceSetterCommon : AScriptReferenceSetterCommon
    {
        public new static readonly ScriptObjectReferenceSetterCommon Instance = new ScriptObjectReferenceSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IScriptObjectReference item)
        {
            ClearPartial();
            item.Reference.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IAScriptReference item)
        {
            Clear(item: (IScriptObjectReference)item);
        }
        
        #region Mutagen
        public void RemapLinks(IScriptObjectReference obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Reference.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IScriptObjectReference item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ScriptObjectReferenceBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ScriptObjectReferenceBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAScriptReference item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (ScriptObjectReference)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    public partial class ScriptObjectReferenceCommon : AScriptReferenceCommon
    {
        public new static readonly ScriptObjectReferenceCommon Instance = new ScriptObjectReferenceCommon();

        public ScriptObjectReference.Mask<bool> GetEqualsMask(
            IScriptObjectReferenceGetter item,
            IScriptObjectReferenceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ScriptObjectReference.Mask<bool>(false);
            ((ScriptObjectReferenceCommon)((IScriptObjectReferenceGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IScriptObjectReferenceGetter item,
            IScriptObjectReferenceGetter rhs,
            ScriptObjectReference.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Reference = item.Reference.Equals(rhs.Reference);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IScriptObjectReferenceGetter item,
            string? name = null,
            ScriptObjectReference.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IScriptObjectReferenceGetter item,
            FileGeneration fg,
            string? name = null,
            ScriptObjectReference.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ScriptObjectReference =>");
            }
            else
            {
                fg.AppendLine($"{name} (ScriptObjectReference) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IScriptObjectReferenceGetter item,
            FileGeneration fg,
            ScriptObjectReference.Mask<bool>? printMask = null)
        {
            AScriptReferenceCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Reference ?? true)
            {
                fg.AppendItem(item.Reference.FormKey, "Reference");
            }
        }
        
        public static ScriptObjectReference_FieldIndex ConvertFieldIndex(AScriptReference_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IScriptObjectReferenceGetter? lhs,
            IScriptObjectReferenceGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAScriptReferenceGetter)lhs, (IAScriptReferenceGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)ScriptObjectReference_FieldIndex.Reference) ?? true))
            {
                if (!lhs.Reference.Equals(rhs.Reference)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAScriptReferenceGetter? lhs,
            IAScriptReferenceGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IScriptObjectReferenceGetter?)lhs,
                rhs: rhs as IScriptObjectReferenceGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(IScriptObjectReferenceGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Reference);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAScriptReferenceGetter item)
        {
            return GetHashCode(item: (IScriptObjectReferenceGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ScriptObjectReference.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IScriptObjectReferenceGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            yield return FormLinkInformation.Factory(obj.Reference);
            yield break;
        }
        
        #endregion
        
    }
    public partial class ScriptObjectReferenceSetterTranslationCommon : AScriptReferenceSetterTranslationCommon
    {
        public new static readonly ScriptObjectReferenceSetterTranslationCommon Instance = new ScriptObjectReferenceSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IScriptObjectReference item,
            IScriptObjectReferenceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAScriptReference)item,
                (IAScriptReferenceGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)ScriptObjectReference_FieldIndex.Reference) ?? true))
            {
                item.Reference.SetTo(rhs.Reference.FormKey);
            }
        }
        
        
        public override void DeepCopyIn(
            IAScriptReference item,
            IAScriptReferenceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IScriptObjectReference)item,
                rhs: (IScriptObjectReferenceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public ScriptObjectReference DeepCopy(
            IScriptObjectReferenceGetter item,
            ScriptObjectReference.TranslationMask? copyMask = null)
        {
            ScriptObjectReference ret = (ScriptObjectReference)((ScriptObjectReferenceCommon)((IScriptObjectReferenceGetter)item).CommonInstance()!).GetNew();
            ((ScriptObjectReferenceSetterTranslationCommon)((IScriptObjectReferenceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ScriptObjectReference DeepCopy(
            IScriptObjectReferenceGetter item,
            out ScriptObjectReference.ErrorMask errorMask,
            ScriptObjectReference.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ScriptObjectReference ret = (ScriptObjectReference)((ScriptObjectReferenceCommon)((IScriptObjectReferenceGetter)item).CommonInstance()!).GetNew();
            ((ScriptObjectReferenceSetterTranslationCommon)((IScriptObjectReferenceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ScriptObjectReference.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ScriptObjectReference DeepCopy(
            IScriptObjectReferenceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ScriptObjectReference ret = (ScriptObjectReference)((ScriptObjectReferenceCommon)((IScriptObjectReferenceGetter)item).CommonInstance()!).GetNew();
            ((ScriptObjectReferenceSetterTranslationCommon)((IScriptObjectReferenceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class ScriptObjectReference
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptObjectReference_Registration.Instance;
        public new static ScriptObjectReference_Registration StaticRegistration => ScriptObjectReference_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ScriptObjectReferenceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ScriptObjectReferenceSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ScriptObjectReferenceSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ScriptObjectReferenceBinaryWriteTranslation :
        AScriptReferenceBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ScriptObjectReferenceBinaryWriteTranslation Instance = new ScriptObjectReferenceBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IScriptObjectReferenceGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Reference,
                header: translationParams.ConvertToCustom(RecordTypes.SCRO));
        }

        public void Write(
            MutagenWriter writer,
            IScriptObjectReferenceGetter item,
            TypedWriteParams? translationParams = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IScriptObjectReferenceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IAScriptReferenceGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IScriptObjectReferenceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class ScriptObjectReferenceBinaryCreateTranslation : AScriptReferenceBinaryCreateTranslation
    {
        public new readonly static ScriptObjectReferenceBinaryCreateTranslation Instance = new ScriptObjectReferenceBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IScriptObjectReference item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IScriptObjectReference item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.SCRO:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)ScriptObjectReference_FieldIndex.Reference) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Reference.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)ScriptObjectReference_FieldIndex.Reference;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ScriptObjectReferenceBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ScriptObjectReferenceBinaryOverlay :
        AScriptReferenceBinaryOverlay,
        IScriptObjectReferenceGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptObjectReference_Registration.Instance;
        public new static ScriptObjectReference_Registration StaticRegistration => ScriptObjectReference_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ScriptObjectReferenceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ScriptObjectReferenceSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => ScriptObjectReferenceCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ScriptObjectReferenceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ScriptObjectReferenceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Reference
        private int? _ReferenceLocation;
        public IFormLinkGetter<IOblivionMajorRecordGetter> Reference => _ReferenceLocation.HasValue ? new FormLink<IOblivionMajorRecordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ReferenceLocation.Value, _package.MetaData.Constants)))) : FormLink<IOblivionMajorRecordGetter>.Null;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ScriptObjectReferenceBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ScriptObjectReferenceBinaryOverlay ScriptObjectReferenceFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new ScriptObjectReferenceBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ScriptObjectReferenceBinaryOverlay ScriptObjectReferenceFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return ScriptObjectReferenceFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.SCRO:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)ScriptObjectReference_FieldIndex.Reference) return ParseResult.Stop;
                    _ReferenceLocation = (stream.Position - offset);
                    return (int)ScriptObjectReference_FieldIndex.Reference;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ScriptObjectReferenceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IScriptObjectReferenceGetter rhs) return false;
            return ((ScriptObjectReferenceCommon)((IScriptObjectReferenceGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IScriptObjectReferenceGetter? obj)
        {
            return ((ScriptObjectReferenceCommon)((IScriptObjectReferenceGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ScriptObjectReferenceCommon)((IScriptObjectReferenceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

