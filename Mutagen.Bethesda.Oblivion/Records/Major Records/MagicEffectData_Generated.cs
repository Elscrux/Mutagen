/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Oblivion.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class MagicEffectData :
        IEquatable<IMagicEffectDataGetter>,
        ILoquiObjectSetter<MagicEffectData>,
        IMagicEffectData
    {
        #region Ctor
        public MagicEffectData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Versioning
        public MagicEffectData.VersioningBreaks Versioning { get; set; } = default(MagicEffectData.VersioningBreaks);
        #endregion
        #region Flags
        public MagicEffect.MagicFlag Flags { get; set; } = default(MagicEffect.MagicFlag);
        #endregion
        #region BaseCost
        public Single BaseCost { get; set; } = default(Single);
        #endregion
        #region Unused
        public Int32 Unused { get; set; } = default(Int32);
        #endregion
        #region MagicSchool
        public MagicSchool MagicSchool { get; set; } = default(MagicSchool);
        #endregion
        #region Resistance
        public Resistance Resistance { get; set; } = default(Resistance);
        #endregion
        #region CounterEffectCount
        public UInt32 CounterEffectCount { get; set; } = default(UInt32);
        #endregion
        #region Light
        private readonly IFormLink<ILightGetter> _Light = new FormLink<ILightGetter>();
        public IFormLink<ILightGetter> Light
        {
            get => _Light;
            set => _Light.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ILightGetter> IMagicEffectDataGetter.Light => this.Light;
        #endregion
        #region ProjectileSpeed
        public Single ProjectileSpeed { get; set; } = default(Single);
        #endregion
        #region EffectShader
        private readonly IFormLink<IEffectShaderGetter> _EffectShader = new FormLink<IEffectShaderGetter>();
        public IFormLink<IEffectShaderGetter> EffectShader
        {
            get => _EffectShader;
            set => _EffectShader.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IEffectShaderGetter> IMagicEffectDataGetter.EffectShader => this.EffectShader;
        #endregion
        #region SubData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MagicEffectSubData? _SubData;
        public MagicEffectSubData? SubData
        {
            get => _SubData;
            set => _SubData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMagicEffectSubDataGetter? IMagicEffectDataGetter.SubData => this.SubData;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            MagicEffectDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IMagicEffectDataGetter rhs) return false;
            return ((MagicEffectDataCommon)((IMagicEffectDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IMagicEffectDataGetter? obj)
        {
            return ((MagicEffectDataCommon)((IMagicEffectDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((MagicEffectDataCommon)((IMagicEffectDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Versioning = initialValue;
                this.Flags = initialValue;
                this.BaseCost = initialValue;
                this.Unused = initialValue;
                this.MagicSchool = initialValue;
                this.Resistance = initialValue;
                this.CounterEffectCount = initialValue;
                this.Light = initialValue;
                this.ProjectileSpeed = initialValue;
                this.EffectShader = initialValue;
                this.SubData = new MaskItem<TItem, MagicEffectSubData.Mask<TItem>?>(initialValue, new MagicEffectSubData.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Versioning,
                TItem Flags,
                TItem BaseCost,
                TItem Unused,
                TItem MagicSchool,
                TItem Resistance,
                TItem CounterEffectCount,
                TItem Light,
                TItem ProjectileSpeed,
                TItem EffectShader,
                TItem SubData)
            {
                this.Versioning = Versioning;
                this.Flags = Flags;
                this.BaseCost = BaseCost;
                this.Unused = Unused;
                this.MagicSchool = MagicSchool;
                this.Resistance = Resistance;
                this.CounterEffectCount = CounterEffectCount;
                this.Light = Light;
                this.ProjectileSpeed = ProjectileSpeed;
                this.EffectShader = EffectShader;
                this.SubData = new MaskItem<TItem, MagicEffectSubData.Mask<TItem>?>(SubData, new MagicEffectSubData.Mask<TItem>(SubData));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Versioning;
            public TItem Flags;
            public TItem BaseCost;
            public TItem Unused;
            public TItem MagicSchool;
            public TItem Resistance;
            public TItem CounterEffectCount;
            public TItem Light;
            public TItem ProjectileSpeed;
            public TItem EffectShader;
            public MaskItem<TItem, MagicEffectSubData.Mask<TItem>?>? SubData { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Versioning, rhs.Versioning)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.BaseCost, rhs.BaseCost)) return false;
                if (!object.Equals(this.Unused, rhs.Unused)) return false;
                if (!object.Equals(this.MagicSchool, rhs.MagicSchool)) return false;
                if (!object.Equals(this.Resistance, rhs.Resistance)) return false;
                if (!object.Equals(this.CounterEffectCount, rhs.CounterEffectCount)) return false;
                if (!object.Equals(this.Light, rhs.Light)) return false;
                if (!object.Equals(this.ProjectileSpeed, rhs.ProjectileSpeed)) return false;
                if (!object.Equals(this.EffectShader, rhs.EffectShader)) return false;
                if (!object.Equals(this.SubData, rhs.SubData)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Versioning);
                hash.Add(this.Flags);
                hash.Add(this.BaseCost);
                hash.Add(this.Unused);
                hash.Add(this.MagicSchool);
                hash.Add(this.Resistance);
                hash.Add(this.CounterEffectCount);
                hash.Add(this.Light);
                hash.Add(this.ProjectileSpeed);
                hash.Add(this.EffectShader);
                hash.Add(this.SubData);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Versioning)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.BaseCost)) return false;
                if (!eval(this.Unused)) return false;
                if (!eval(this.MagicSchool)) return false;
                if (!eval(this.Resistance)) return false;
                if (!eval(this.CounterEffectCount)) return false;
                if (!eval(this.Light)) return false;
                if (!eval(this.ProjectileSpeed)) return false;
                if (!eval(this.EffectShader)) return false;
                if (SubData != null)
                {
                    if (!eval(this.SubData.Overall)) return false;
                    if (this.SubData.Specific != null && !this.SubData.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Versioning)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.BaseCost)) return true;
                if (eval(this.Unused)) return true;
                if (eval(this.MagicSchool)) return true;
                if (eval(this.Resistance)) return true;
                if (eval(this.CounterEffectCount)) return true;
                if (eval(this.Light)) return true;
                if (eval(this.ProjectileSpeed)) return true;
                if (eval(this.EffectShader)) return true;
                if (SubData != null)
                {
                    if (eval(this.SubData.Overall)) return true;
                    if (this.SubData.Specific != null && this.SubData.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new MagicEffectData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Versioning = eval(this.Versioning);
                obj.Flags = eval(this.Flags);
                obj.BaseCost = eval(this.BaseCost);
                obj.Unused = eval(this.Unused);
                obj.MagicSchool = eval(this.MagicSchool);
                obj.Resistance = eval(this.Resistance);
                obj.CounterEffectCount = eval(this.CounterEffectCount);
                obj.Light = eval(this.Light);
                obj.ProjectileSpeed = eval(this.ProjectileSpeed);
                obj.EffectShader = eval(this.EffectShader);
                obj.SubData = this.SubData == null ? null : new MaskItem<R, MagicEffectSubData.Mask<R>?>(eval(this.SubData.Overall), this.SubData.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(MagicEffectData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, MagicEffectData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(MagicEffectData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Versioning ?? true)
                    {
                        sb.AppendItem(Versioning, "Versioning");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.BaseCost ?? true)
                    {
                        sb.AppendItem(BaseCost, "BaseCost");
                    }
                    if (printMask?.Unused ?? true)
                    {
                        sb.AppendItem(Unused, "Unused");
                    }
                    if (printMask?.MagicSchool ?? true)
                    {
                        sb.AppendItem(MagicSchool, "MagicSchool");
                    }
                    if (printMask?.Resistance ?? true)
                    {
                        sb.AppendItem(Resistance, "Resistance");
                    }
                    if (printMask?.CounterEffectCount ?? true)
                    {
                        sb.AppendItem(CounterEffectCount, "CounterEffectCount");
                    }
                    if (printMask?.Light ?? true)
                    {
                        sb.AppendItem(Light, "Light");
                    }
                    if (printMask?.ProjectileSpeed ?? true)
                    {
                        sb.AppendItem(ProjectileSpeed, "ProjectileSpeed");
                    }
                    if (printMask?.EffectShader ?? true)
                    {
                        sb.AppendItem(EffectShader, "EffectShader");
                    }
                    if (printMask?.SubData?.Overall ?? true)
                    {
                        SubData?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Versioning;
            public Exception? Flags;
            public Exception? BaseCost;
            public Exception? Unused;
            public Exception? MagicSchool;
            public Exception? Resistance;
            public Exception? CounterEffectCount;
            public Exception? Light;
            public Exception? ProjectileSpeed;
            public Exception? EffectShader;
            public MaskItem<Exception?, MagicEffectSubData.ErrorMask?>? SubData;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                MagicEffectData_FieldIndex enu = (MagicEffectData_FieldIndex)index;
                switch (enu)
                {
                    case MagicEffectData_FieldIndex.Versioning:
                        return Versioning;
                    case MagicEffectData_FieldIndex.Flags:
                        return Flags;
                    case MagicEffectData_FieldIndex.BaseCost:
                        return BaseCost;
                    case MagicEffectData_FieldIndex.Unused:
                        return Unused;
                    case MagicEffectData_FieldIndex.MagicSchool:
                        return MagicSchool;
                    case MagicEffectData_FieldIndex.Resistance:
                        return Resistance;
                    case MagicEffectData_FieldIndex.CounterEffectCount:
                        return CounterEffectCount;
                    case MagicEffectData_FieldIndex.Light:
                        return Light;
                    case MagicEffectData_FieldIndex.ProjectileSpeed:
                        return ProjectileSpeed;
                    case MagicEffectData_FieldIndex.EffectShader:
                        return EffectShader;
                    case MagicEffectData_FieldIndex.SubData:
                        return SubData;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                MagicEffectData_FieldIndex enu = (MagicEffectData_FieldIndex)index;
                switch (enu)
                {
                    case MagicEffectData_FieldIndex.Versioning:
                        this.Versioning = ex;
                        break;
                    case MagicEffectData_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case MagicEffectData_FieldIndex.BaseCost:
                        this.BaseCost = ex;
                        break;
                    case MagicEffectData_FieldIndex.Unused:
                        this.Unused = ex;
                        break;
                    case MagicEffectData_FieldIndex.MagicSchool:
                        this.MagicSchool = ex;
                        break;
                    case MagicEffectData_FieldIndex.Resistance:
                        this.Resistance = ex;
                        break;
                    case MagicEffectData_FieldIndex.CounterEffectCount:
                        this.CounterEffectCount = ex;
                        break;
                    case MagicEffectData_FieldIndex.Light:
                        this.Light = ex;
                        break;
                    case MagicEffectData_FieldIndex.ProjectileSpeed:
                        this.ProjectileSpeed = ex;
                        break;
                    case MagicEffectData_FieldIndex.EffectShader:
                        this.EffectShader = ex;
                        break;
                    case MagicEffectData_FieldIndex.SubData:
                        this.SubData = new MaskItem<Exception?, MagicEffectSubData.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                MagicEffectData_FieldIndex enu = (MagicEffectData_FieldIndex)index;
                switch (enu)
                {
                    case MagicEffectData_FieldIndex.Versioning:
                        this.Versioning = (Exception?)obj;
                        break;
                    case MagicEffectData_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case MagicEffectData_FieldIndex.BaseCost:
                        this.BaseCost = (Exception?)obj;
                        break;
                    case MagicEffectData_FieldIndex.Unused:
                        this.Unused = (Exception?)obj;
                        break;
                    case MagicEffectData_FieldIndex.MagicSchool:
                        this.MagicSchool = (Exception?)obj;
                        break;
                    case MagicEffectData_FieldIndex.Resistance:
                        this.Resistance = (Exception?)obj;
                        break;
                    case MagicEffectData_FieldIndex.CounterEffectCount:
                        this.CounterEffectCount = (Exception?)obj;
                        break;
                    case MagicEffectData_FieldIndex.Light:
                        this.Light = (Exception?)obj;
                        break;
                    case MagicEffectData_FieldIndex.ProjectileSpeed:
                        this.ProjectileSpeed = (Exception?)obj;
                        break;
                    case MagicEffectData_FieldIndex.EffectShader:
                        this.EffectShader = (Exception?)obj;
                        break;
                    case MagicEffectData_FieldIndex.SubData:
                        this.SubData = (MaskItem<Exception?, MagicEffectSubData.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Versioning != null) return true;
                if (Flags != null) return true;
                if (BaseCost != null) return true;
                if (Unused != null) return true;
                if (MagicSchool != null) return true;
                if (Resistance != null) return true;
                if (CounterEffectCount != null) return true;
                if (Light != null) return true;
                if (ProjectileSpeed != null) return true;
                if (EffectShader != null) return true;
                if (SubData != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Versioning, "Versioning");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(BaseCost, "BaseCost");
                }
                {
                    sb.AppendItem(Unused, "Unused");
                }
                {
                    sb.AppendItem(MagicSchool, "MagicSchool");
                }
                {
                    sb.AppendItem(Resistance, "Resistance");
                }
                {
                    sb.AppendItem(CounterEffectCount, "CounterEffectCount");
                }
                {
                    sb.AppendItem(Light, "Light");
                }
                {
                    sb.AppendItem(ProjectileSpeed, "ProjectileSpeed");
                }
                {
                    sb.AppendItem(EffectShader, "EffectShader");
                }
                SubData?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Versioning = this.Versioning.Combine(rhs.Versioning);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.BaseCost = this.BaseCost.Combine(rhs.BaseCost);
                ret.Unused = this.Unused.Combine(rhs.Unused);
                ret.MagicSchool = this.MagicSchool.Combine(rhs.MagicSchool);
                ret.Resistance = this.Resistance.Combine(rhs.Resistance);
                ret.CounterEffectCount = this.CounterEffectCount.Combine(rhs.CounterEffectCount);
                ret.Light = this.Light.Combine(rhs.Light);
                ret.ProjectileSpeed = this.ProjectileSpeed.Combine(rhs.ProjectileSpeed);
                ret.EffectShader = this.EffectShader.Combine(rhs.EffectShader);
                ret.SubData = this.SubData.Combine(rhs.SubData, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Versioning;
            public bool Flags;
            public bool BaseCost;
            public bool Unused;
            public bool MagicSchool;
            public bool Resistance;
            public bool CounterEffectCount;
            public bool Light;
            public bool ProjectileSpeed;
            public bool EffectShader;
            public MagicEffectSubData.TranslationMask? SubData;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Versioning = defaultOn;
                this.Flags = defaultOn;
                this.BaseCost = defaultOn;
                this.Unused = defaultOn;
                this.MagicSchool = defaultOn;
                this.Resistance = defaultOn;
                this.CounterEffectCount = defaultOn;
                this.Light = defaultOn;
                this.ProjectileSpeed = defaultOn;
                this.EffectShader = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Versioning, null));
                ret.Add((Flags, null));
                ret.Add((BaseCost, null));
                ret.Add((Unused, null));
                ret.Add((MagicSchool, null));
                ret.Add((Resistance, null));
                ret.Add((CounterEffectCount, null));
                ret.Add((Light, null));
                ret.Add((ProjectileSpeed, null));
                ret.Add((EffectShader, null));
                ret.Add((SubData != null ? SubData.OnOverall : DefaultOn, SubData?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        [Flags]
        public enum VersioningBreaks
        {
            Break0 = 1
        }
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => MagicEffectDataCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => MagicEffectDataSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => MagicEffectDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MagicEffectDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static MagicEffectData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new MagicEffectData();
            ((MagicEffectDataSetterCommon)((IMagicEffectDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out MagicEffectData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((MagicEffectDataSetterCommon)((IMagicEffectDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static MagicEffectData GetNew()
        {
            return new MagicEffectData();
        }

    }
    #endregion

    #region Interface
    public partial interface IMagicEffectData :
        IFormLinkContainer,
        ILoquiObjectSetter<IMagicEffectData>,
        IMagicEffectDataGetter
    {
        new MagicEffectData.VersioningBreaks Versioning { get; set; }
        new MagicEffect.MagicFlag Flags { get; set; }
        new Single BaseCost { get; set; }
        new Int32 Unused { get; set; }
        new MagicSchool MagicSchool { get; set; }
        new Resistance Resistance { get; set; }
        new UInt32 CounterEffectCount { get; set; }
        new IFormLink<ILightGetter> Light { get; set; }
        new Single ProjectileSpeed { get; set; }
        new IFormLink<IEffectShaderGetter> EffectShader { get; set; }
        new MagicEffectSubData? SubData { get; set; }
    }

    public partial interface IMagicEffectDataGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IMagicEffectDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => MagicEffectData_Registration.Instance;
        MagicEffectData.VersioningBreaks Versioning { get; }
        MagicEffect.MagicFlag Flags { get; }
        Single BaseCost { get; }
        Int32 Unused { get; }
        MagicSchool MagicSchool { get; }
        Resistance Resistance { get; }
        UInt32 CounterEffectCount { get; }
        IFormLinkGetter<ILightGetter> Light { get; }
        Single ProjectileSpeed { get; }
        IFormLinkGetter<IEffectShaderGetter> EffectShader { get; }
        IMagicEffectSubDataGetter? SubData { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class MagicEffectDataMixIn
    {
        public static void Clear(this IMagicEffectData item)
        {
            ((MagicEffectDataSetterCommon)((IMagicEffectDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static MagicEffectData.Mask<bool> GetEqualsMask(
            this IMagicEffectDataGetter item,
            IMagicEffectDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MagicEffectDataCommon)((IMagicEffectDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IMagicEffectDataGetter item,
            string? name = null,
            MagicEffectData.Mask<bool>? printMask = null)
        {
            return ((MagicEffectDataCommon)((IMagicEffectDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IMagicEffectDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            MagicEffectData.Mask<bool>? printMask = null)
        {
            ((MagicEffectDataCommon)((IMagicEffectDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IMagicEffectDataGetter item,
            IMagicEffectDataGetter rhs,
            MagicEffectData.TranslationMask? equalsMask = null)
        {
            return ((MagicEffectDataCommon)((IMagicEffectDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IMagicEffectData lhs,
            IMagicEffectDataGetter rhs)
        {
            ((MagicEffectDataSetterTranslationCommon)((IMagicEffectDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IMagicEffectData lhs,
            IMagicEffectDataGetter rhs,
            MagicEffectData.TranslationMask? copyMask = null)
        {
            ((MagicEffectDataSetterTranslationCommon)((IMagicEffectDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IMagicEffectData lhs,
            IMagicEffectDataGetter rhs,
            out MagicEffectData.ErrorMask errorMask,
            MagicEffectData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((MagicEffectDataSetterTranslationCommon)((IMagicEffectDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = MagicEffectData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IMagicEffectData lhs,
            IMagicEffectDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((MagicEffectDataSetterTranslationCommon)((IMagicEffectDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static MagicEffectData DeepCopy(
            this IMagicEffectDataGetter item,
            MagicEffectData.TranslationMask? copyMask = null)
        {
            return ((MagicEffectDataSetterTranslationCommon)((IMagicEffectDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static MagicEffectData DeepCopy(
            this IMagicEffectDataGetter item,
            out MagicEffectData.ErrorMask errorMask,
            MagicEffectData.TranslationMask? copyMask = null)
        {
            return ((MagicEffectDataSetterTranslationCommon)((IMagicEffectDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static MagicEffectData DeepCopy(
            this IMagicEffectDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((MagicEffectDataSetterTranslationCommon)((IMagicEffectDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IMagicEffectData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((MagicEffectDataSetterCommon)((IMagicEffectDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    #region Field Index
    internal enum MagicEffectData_FieldIndex
    {
        Versioning = 0,
        Flags = 1,
        BaseCost = 2,
        Unused = 3,
        MagicSchool = 4,
        Resistance = 5,
        CounterEffectCount = 6,
        Light = 7,
        ProjectileSpeed = 8,
        EffectShader = 9,
        SubData = 10,
    }
    #endregion

    #region Registration
    internal partial class MagicEffectData_Registration : ILoquiRegistration
    {
        public static readonly MagicEffectData_Registration Instance = new MagicEffectData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public const ushort AdditionalFieldCount = 11;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(MagicEffectData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(MagicEffectData.ErrorMask);

        public static readonly Type ClassType = typeof(MagicEffectData);

        public static readonly Type GetterType = typeof(IMagicEffectDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMagicEffectData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.MagicEffectData";

        public const string Name = "MagicEffectData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.DATA;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.DATA);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(MagicEffectDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class MagicEffectDataSetterCommon
    {
        public static readonly MagicEffectDataSetterCommon Instance = new MagicEffectDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IMagicEffectData item)
        {
            ClearPartial();
            item.Versioning = default(MagicEffectData.VersioningBreaks);
            item.Flags = default(MagicEffect.MagicFlag);
            item.BaseCost = default(Single);
            item.Unused = default(Int32);
            item.MagicSchool = default(MagicSchool);
            item.Resistance = default(Resistance);
            item.CounterEffectCount = default(UInt32);
            item.Light.Clear();
            item.ProjectileSpeed = default(Single);
            item.EffectShader.Clear();
            item.SubData = null;
        }
        
        #region Mutagen
        public void RemapLinks(IMagicEffectData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Light.Relink(mapping);
            obj.EffectShader.Relink(mapping);
            if (obj.Versioning.HasFlag(MagicEffectData.VersioningBreaks.Break0)) return;
            obj.SubData?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IMagicEffectData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.DATA),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: MagicEffectDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class MagicEffectDataCommon
    {
        public static readonly MagicEffectDataCommon Instance = new MagicEffectDataCommon();

        public MagicEffectData.Mask<bool> GetEqualsMask(
            IMagicEffectDataGetter item,
            IMagicEffectDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MagicEffectData.Mask<bool>(false);
            ((MagicEffectDataCommon)((IMagicEffectDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMagicEffectDataGetter item,
            IMagicEffectDataGetter rhs,
            MagicEffectData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Versioning = item.Versioning == rhs.Versioning;
            ret.Flags = item.Flags == rhs.Flags;
            ret.BaseCost = item.BaseCost.EqualsWithin(rhs.BaseCost);
            ret.Unused = item.Unused == rhs.Unused;
            ret.MagicSchool = item.MagicSchool == rhs.MagicSchool;
            ret.Resistance = item.Resistance == rhs.Resistance;
            ret.CounterEffectCount = item.CounterEffectCount == rhs.CounterEffectCount;
            ret.Light = item.Light.Equals(rhs.Light);
            ret.ProjectileSpeed = item.ProjectileSpeed.EqualsWithin(rhs.ProjectileSpeed);
            ret.EffectShader = item.EffectShader.Equals(rhs.EffectShader);
            ret.SubData = EqualsMaskHelper.EqualsHelper(
                item.SubData,
                rhs.SubData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string Print(
            IMagicEffectDataGetter item,
            string? name = null,
            MagicEffectData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IMagicEffectDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            MagicEffectData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"MagicEffectData =>");
            }
            else
            {
                sb.AppendLine($"{name} (MagicEffectData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IMagicEffectDataGetter item,
            StructuredStringBuilder sb,
            MagicEffectData.Mask<bool>? printMask = null)
        {
            if (printMask?.Versioning ?? true)
            {
                sb.AppendItem(item.Versioning, "Versioning");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.BaseCost ?? true)
            {
                sb.AppendItem(item.BaseCost, "BaseCost");
            }
            if (printMask?.Unused ?? true)
            {
                sb.AppendItem(item.Unused, "Unused");
            }
            if (printMask?.MagicSchool ?? true)
            {
                sb.AppendItem(item.MagicSchool, "MagicSchool");
            }
            if (printMask?.Resistance ?? true)
            {
                sb.AppendItem(item.Resistance, "Resistance");
            }
            if (printMask?.CounterEffectCount ?? true)
            {
                sb.AppendItem(item.CounterEffectCount, "CounterEffectCount");
            }
            if (printMask?.Light ?? true)
            {
                sb.AppendItem(item.Light.FormKey, "Light");
            }
            if (printMask?.ProjectileSpeed ?? true)
            {
                sb.AppendItem(item.ProjectileSpeed, "ProjectileSpeed");
            }
            if (printMask?.EffectShader ?? true)
            {
                sb.AppendItem(item.EffectShader.FormKey, "EffectShader");
            }
            if ((printMask?.SubData?.Overall ?? true)
                && item.SubData is {} SubDataItem)
            {
                SubDataItem?.Print(sb, "SubData");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMagicEffectDataGetter? lhs,
            IMagicEffectDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.Versioning) ?? true))
            {
                if (lhs.Versioning != rhs.Versioning) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.BaseCost) ?? true))
            {
                if (!lhs.BaseCost.EqualsWithin(rhs.BaseCost)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.Unused) ?? true))
            {
                if (lhs.Unused != rhs.Unused) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.MagicSchool) ?? true))
            {
                if (lhs.MagicSchool != rhs.MagicSchool) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.Resistance) ?? true))
            {
                if (lhs.Resistance != rhs.Resistance) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.CounterEffectCount) ?? true))
            {
                if (lhs.CounterEffectCount != rhs.CounterEffectCount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.Light) ?? true))
            {
                if (!lhs.Light.Equals(rhs.Light)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.ProjectileSpeed) ?? true))
            {
                if (!lhs.ProjectileSpeed.EqualsWithin(rhs.ProjectileSpeed)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.EffectShader) ?? true))
            {
                if (!lhs.EffectShader.Equals(rhs.EffectShader)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.SubData) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SubData, rhs.SubData, out var lhsSubData, out var rhsSubData, out var isSubDataEqual))
                {
                    if (!((MagicEffectSubDataCommon)((IMagicEffectSubDataGetter)lhsSubData).CommonInstance()!).Equals(lhsSubData, rhsSubData, equalsMask?.GetSubCrystal((int)MagicEffectData_FieldIndex.SubData))) return false;
                }
                else if (!isSubDataEqual) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IMagicEffectDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Versioning);
            hash.Add(item.Flags);
            hash.Add(item.BaseCost);
            hash.Add(item.Unused);
            hash.Add(item.MagicSchool);
            hash.Add(item.Resistance);
            hash.Add(item.CounterEffectCount);
            hash.Add(item.Light);
            hash.Add(item.ProjectileSpeed);
            hash.Add(item.EffectShader);
            if (item.SubData is {} SubDataitem)
            {
                hash.Add(SubDataitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return MagicEffectData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IMagicEffectDataGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.Light);
            yield return FormLinkInformation.Factory(obj.EffectShader);
            if (obj.Versioning.HasFlag(MagicEffectData.VersioningBreaks.Break0)) yield break;
            if (obj.SubData is {} SubDataItems)
            {
                foreach (var item in SubDataItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class MagicEffectDataSetterTranslationCommon
    {
        public static readonly MagicEffectDataSetterTranslationCommon Instance = new MagicEffectDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IMagicEffectData item,
            IMagicEffectDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.Versioning) ?? true))
            {
                item.Versioning = rhs.Versioning;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.BaseCost) ?? true))
            {
                item.BaseCost = rhs.BaseCost;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.Unused) ?? true))
            {
                item.Unused = rhs.Unused;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.MagicSchool) ?? true))
            {
                item.MagicSchool = rhs.MagicSchool;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.Resistance) ?? true))
            {
                item.Resistance = rhs.Resistance;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.CounterEffectCount) ?? true))
            {
                item.CounterEffectCount = rhs.CounterEffectCount;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.Light) ?? true))
            {
                item.Light.SetTo(rhs.Light.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.ProjectileSpeed) ?? true))
            {
                item.ProjectileSpeed = rhs.ProjectileSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.EffectShader) ?? true))
            {
                item.EffectShader.SetTo(rhs.EffectShader.FormKey);
            }
            if (rhs.Versioning.HasFlag(MagicEffectData.VersioningBreaks.Break0)) return;
            if ((copyMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.SubData) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffectData_FieldIndex.SubData);
                try
                {
                    if(rhs.SubData is {} rhsSubData)
                    {
                        item.SubData = rhsSubData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)MagicEffectData_FieldIndex.SubData));
                    }
                    else
                    {
                        item.SubData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IMagicEffectData item,
            IMagicEffectDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public MagicEffectData DeepCopy(
            IMagicEffectDataGetter item,
            MagicEffectData.TranslationMask? copyMask = null)
        {
            MagicEffectData ret = (MagicEffectData)((MagicEffectDataCommon)((IMagicEffectDataGetter)item).CommonInstance()!).GetNew();
            ((MagicEffectDataSetterTranslationCommon)((IMagicEffectDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public MagicEffectData DeepCopy(
            IMagicEffectDataGetter item,
            out MagicEffectData.ErrorMask errorMask,
            MagicEffectData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            MagicEffectData ret = (MagicEffectData)((MagicEffectDataCommon)((IMagicEffectDataGetter)item).CommonInstance()!).GetNew();
            ((MagicEffectDataSetterTranslationCommon)((IMagicEffectDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = MagicEffectData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public MagicEffectData DeepCopy(
            IMagicEffectDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            MagicEffectData ret = (MagicEffectData)((MagicEffectDataCommon)((IMagicEffectDataGetter)item).CommonInstance()!).GetNew();
            ((MagicEffectDataSetterTranslationCommon)((IMagicEffectDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class MagicEffectData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MagicEffectData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => MagicEffectData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => MagicEffectDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return MagicEffectDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => MagicEffectDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IMagicEffectDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IMagicEffectDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IMagicEffectDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion
{
    public partial class MagicEffectDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly MagicEffectDataBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IMagicEffectDataGetter item,
            MutagenWriter writer)
        {
            EnumBinaryTranslation<MagicEffect.MagicFlag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Flags,
                length: 4);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BaseCost);
            writer.Write(item.Unused);
            EnumBinaryTranslation<MagicSchool, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.MagicSchool,
                length: 4);
            EnumBinaryTranslation<Resistance, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Resistance,
                length: 4);
            writer.Write(item.CounterEffectCount);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Light);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ProjectileSpeed);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EffectShader);
            if (!item.Versioning.HasFlag(MagicEffectData.VersioningBreaks.Break0))
            {
                if (item.SubData is {} SubDataItem)
                {
                    ((MagicEffectSubDataBinaryWriteTranslation)((IBinaryItem)SubDataItem).BinaryWriteTranslator).Write(
                        item: SubDataItem,
                        writer: writer);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IMagicEffectDataGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.DATA),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IMagicEffectDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class MagicEffectDataBinaryCreateTranslation
    {
        public static readonly MagicEffectDataBinaryCreateTranslation Instance = new MagicEffectDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IMagicEffectData item,
            MutagenFrame frame)
        {
            item.Flags = EnumBinaryTranslation<MagicEffect.MagicFlag, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
            item.BaseCost = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Unused = frame.ReadInt32();
            item.MagicSchool = EnumBinaryTranslation<MagicSchool, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
            item.Resistance = EnumBinaryTranslation<Resistance, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
            item.CounterEffectCount = frame.ReadUInt32();
            item.Light.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.ProjectileSpeed = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.EffectShader.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            if (frame.Complete)
            {
                item.Versioning |= MagicEffectData.VersioningBreaks.Break0;
                return;
            }
            if (frame.Complete) return;
            item.SubData = Mutagen.Bethesda.Oblivion.MagicEffectSubData.CreateFromBinary(frame: frame);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class MagicEffectDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IMagicEffectDataGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MagicEffectDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion
{
    internal partial class MagicEffectDataBinaryOverlay :
        PluginBinaryOverlay,
        IMagicEffectDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MagicEffectData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => MagicEffectData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => MagicEffectDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => MagicEffectDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IMagicEffectDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IMagicEffectDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IMagicEffectDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => MagicEffectDataCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => MagicEffectDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MagicEffectDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public MagicEffectData.VersioningBreaks Versioning { get; private set; }
        public MagicEffect.MagicFlag Flags => (MagicEffect.MagicFlag)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0x0, 0x4));
        public Single BaseCost => _structData.Slice(0x4, 0x4).Float();
        public Int32 Unused => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0x8, 0x4));
        public MagicSchool MagicSchool => (MagicSchool)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0xC, 0x4));
        public Resistance Resistance => (Resistance)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0x10, 0x4));
        public UInt32 CounterEffectCount => BinaryPrimitives.ReadUInt32LittleEndian(_structData.Slice(0x14, 0x4));
        public IFormLinkGetter<ILightGetter> Light => FormLinkBinaryTranslation.Instance.OverlayFactory<ILightGetter>(_package, _structData.Span.Slice(0x18, 0x4));
        public Single ProjectileSpeed => _structData.Slice(0x1C, 0x4).Float();
        public IFormLinkGetter<IEffectShaderGetter> EffectShader => FormLinkBinaryTranslation.Instance.OverlayFactory<IEffectShaderGetter>(_package, _structData.Span.Slice(0x20, 0x4));
        public IMagicEffectSubDataGetter SubData => _structData.Length > 0x24 ? MagicEffectSubDataBinaryOverlay.MagicEffectSubDataFactory(_structData.Slice(0x24), _package, default(TypedParseParams)) : new MagicEffectSubData();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected MagicEffectDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IMagicEffectDataGetter MagicEffectDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x40,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new MagicEffectDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            if (ret._structData.Length <= 0x24)
            {
                ret.Versioning |= MagicEffectData.VersioningBreaks.Break0;
            }
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IMagicEffectDataGetter MagicEffectDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return MagicEffectDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            MagicEffectDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IMagicEffectDataGetter rhs) return false;
            return ((MagicEffectDataCommon)((IMagicEffectDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IMagicEffectDataGetter? obj)
        {
            return ((MagicEffectDataCommon)((IMagicEffectDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((MagicEffectDataCommon)((IMagicEffectDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

