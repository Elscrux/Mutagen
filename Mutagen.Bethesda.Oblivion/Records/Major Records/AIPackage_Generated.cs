/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.RecordTypeMapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class AIPackage :
        OblivionMajorRecord,
        IAIPackageInternal,
        IEquatable<IAIPackageGetter>,
        ILoquiObjectSetter<AIPackage>
    {
        #region Ctor
        protected AIPackage()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private AIPackageData? _Data;
        public AIPackageData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAIPackageDataGetter? IAIPackageGetter.Data => this.Data;
        #endregion
        #region Location
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private AIPackageLocation? _Location;
        public AIPackageLocation? Location
        {
            get => _Location;
            set => _Location = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAIPackageLocationGetter? IAIPackageGetter.Location => this.Location;
        #endregion
        #region Schedule
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private AIPackageSchedule? _Schedule;
        public AIPackageSchedule? Schedule
        {
            get => _Schedule;
            set => _Schedule = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAIPackageScheduleGetter? IAIPackageGetter.Schedule => this.Schedule;
        #endregion
        #region Target
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private AIPackageTarget? _Target;
        public AIPackageTarget? Target
        {
            get => _Target;
            set => _Target = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAIPackageTargetGetter? IAIPackageGetter.Target => this.Target;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            init => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IAIPackageGetter.Conditions => _Conditions;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            AIPackageMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Data = new MaskItem<TItem, AIPackageData.Mask<TItem>?>(initialValue, new AIPackageData.Mask<TItem>(initialValue));
                this.Location = new MaskItem<TItem, AIPackageLocation.Mask<TItem>?>(initialValue, new AIPackageLocation.Mask<TItem>(initialValue));
                this.Schedule = new MaskItem<TItem, AIPackageSchedule.Mask<TItem>?>(initialValue, new AIPackageSchedule.Mask<TItem>(initialValue));
                this.Target = new MaskItem<TItem, AIPackageTarget.Mask<TItem>?>(initialValue, new AIPackageTarget.Mask<TItem>(initialValue));
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Data,
                TItem Location,
                TItem Schedule,
                TItem Target,
                TItem Conditions)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Data = new MaskItem<TItem, AIPackageData.Mask<TItem>?>(Data, new AIPackageData.Mask<TItem>(Data));
                this.Location = new MaskItem<TItem, AIPackageLocation.Mask<TItem>?>(Location, new AIPackageLocation.Mask<TItem>(Location));
                this.Schedule = new MaskItem<TItem, AIPackageSchedule.Mask<TItem>?>(Schedule, new AIPackageSchedule.Mask<TItem>(Schedule));
                this.Target = new MaskItem<TItem, AIPackageTarget.Mask<TItem>?>(Target, new AIPackageTarget.Mask<TItem>(Target));
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, AIPackageData.Mask<TItem>?>? Data { get; set; }
            public MaskItem<TItem, AIPackageLocation.Mask<TItem>?>? Location { get; set; }
            public MaskItem<TItem, AIPackageSchedule.Mask<TItem>?>? Schedule { get; set; }
            public MaskItem<TItem, AIPackageTarget.Mask<TItem>?>? Target { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.Location, rhs.Location)) return false;
                if (!object.Equals(this.Schedule, rhs.Schedule)) return false;
                if (!object.Equals(this.Target, rhs.Target)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Data);
                hash.Add(this.Location);
                hash.Add(this.Schedule);
                hash.Add(this.Target);
                hash.Add(this.Conditions);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                if (Location != null)
                {
                    if (!eval(this.Location.Overall)) return false;
                    if (this.Location.Specific != null && !this.Location.Specific.All(eval)) return false;
                }
                if (Schedule != null)
                {
                    if (!eval(this.Schedule.Overall)) return false;
                    if (this.Schedule.Specific != null && !this.Schedule.Specific.All(eval)) return false;
                }
                if (Target != null)
                {
                    if (!eval(this.Target.Overall)) return false;
                    if (this.Target.Specific != null && !this.Target.Specific.All(eval)) return false;
                }
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                if (Location != null)
                {
                    if (eval(this.Location.Overall)) return true;
                    if (this.Location.Specific != null && this.Location.Specific.Any(eval)) return true;
                }
                if (Schedule != null)
                {
                    if (eval(this.Schedule.Overall)) return true;
                    if (this.Schedule.Specific != null && this.Schedule.Specific.Any(eval)) return true;
                }
                if (Target != null)
                {
                    if (eval(this.Target.Overall)) return true;
                    if (this.Target.Specific != null && this.Target.Specific.Any(eval)) return true;
                }
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AIPackage.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Data = this.Data == null ? null : new MaskItem<R, AIPackageData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
                obj.Location = this.Location == null ? null : new MaskItem<R, AIPackageLocation.Mask<R>?>(eval(this.Location.Overall), this.Location.Specific?.Translate(eval));
                obj.Schedule = this.Schedule == null ? null : new MaskItem<R, AIPackageSchedule.Mask<R>?>(eval(this.Schedule.Overall), this.Schedule.Specific?.Translate(eval));
                obj.Target = this.Target == null ? null : new MaskItem<R, AIPackageTarget.Mask<R>?>(eval(this.Target.Overall), this.Target.Specific?.Translate(eval));
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(AIPackage.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, AIPackage.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(AIPackage.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.ToString(fg);
                    }
                    if (printMask?.Location?.Overall ?? true)
                    {
                        Location?.ToString(fg);
                    }
                    if (printMask?.Schedule?.Overall ?? true)
                    {
                        Schedule?.ToString(fg);
                    }
                    if (printMask?.Target?.Overall ?? true)
                    {
                        Target?.ToString(fg);
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, AIPackageData.ErrorMask?>? Data;
            public MaskItem<Exception?, AIPackageLocation.ErrorMask?>? Location;
            public MaskItem<Exception?, AIPackageSchedule.ErrorMask?>? Schedule;
            public MaskItem<Exception?, AIPackageTarget.ErrorMask?>? Target;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
                switch (enu)
                {
                    case AIPackage_FieldIndex.Data:
                        return Data;
                    case AIPackage_FieldIndex.Location:
                        return Location;
                    case AIPackage_FieldIndex.Schedule:
                        return Schedule;
                    case AIPackage_FieldIndex.Target:
                        return Target;
                    case AIPackage_FieldIndex.Conditions:
                        return Conditions;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
                switch (enu)
                {
                    case AIPackage_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, AIPackageData.ErrorMask?>(ex, null);
                        break;
                    case AIPackage_FieldIndex.Location:
                        this.Location = new MaskItem<Exception?, AIPackageLocation.ErrorMask?>(ex, null);
                        break;
                    case AIPackage_FieldIndex.Schedule:
                        this.Schedule = new MaskItem<Exception?, AIPackageSchedule.ErrorMask?>(ex, null);
                        break;
                    case AIPackage_FieldIndex.Target:
                        this.Target = new MaskItem<Exception?, AIPackageTarget.ErrorMask?>(ex, null);
                        break;
                    case AIPackage_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
                switch (enu)
                {
                    case AIPackage_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, AIPackageData.ErrorMask?>?)obj;
                        break;
                    case AIPackage_FieldIndex.Location:
                        this.Location = (MaskItem<Exception?, AIPackageLocation.ErrorMask?>?)obj;
                        break;
                    case AIPackage_FieldIndex.Schedule:
                        this.Schedule = (MaskItem<Exception?, AIPackageSchedule.ErrorMask?>?)obj;
                        break;
                    case AIPackage_FieldIndex.Target:
                        this.Target = (MaskItem<Exception?, AIPackageTarget.ErrorMask?>?)obj;
                        break;
                    case AIPackage_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Data != null) return true;
                if (Location != null) return true;
                if (Schedule != null) return true;
                if (Target != null) return true;
                if (Conditions != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                Data?.ToString(fg);
                Location?.ToString(fg);
                Schedule?.ToString(fg);
                Target?.ToString(fg);
                if (Conditions is {} ConditionsItem)
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                ret.Location = this.Location.Combine(rhs.Location, (l, r) => l.Combine(r));
                ret.Schedule = this.Schedule.Combine(rhs.Schedule, (l, r) => l.Combine(r));
                ret.Target = this.Target.Combine(rhs.Target, (l, r) => l.Combine(r));
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public AIPackageData.TranslationMask? Data;
            public AIPackageLocation.TranslationMask? Location;
            public AIPackageSchedule.TranslationMask? Schedule;
            public AIPackageTarget.TranslationMask? Target;
            public Condition.TranslationMask? Conditions;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Data != null ? Data.OnOverall : DefaultOn, Data?.GetCrystal()));
                ret.Add((Location != null ? Location.OnOverall : DefaultOn, Location?.GetCrystal()));
                ret.Add((Schedule != null ? Schedule.OnOverall : DefaultOn, Schedule?.GetCrystal()));
                ret.Add((Target != null ? Target.OnOverall : DefaultOn, Target?.GetCrystal()));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = AIPackage_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => AIPackageCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => AIPackageSetterCommon.Instance.RemapLinks(this, mapping);
        public AIPackage(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private AIPackage(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public AIPackage(IOblivionMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public AIPackage(IOblivionMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<AIPackage>.ToString(this);
        }

        protected override Type LinkType => typeof(IAIPackage);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IAIPackageGetter rhs) return false;
            return ((AIPackageCommon)((IAIPackageGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IAIPackageGetter? obj)
        {
            return ((AIPackageCommon)((IAIPackageGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((AIPackageCommon)((IAIPackageGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AIPackageBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((AIPackageBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static AIPackage CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new AIPackage();
            ((AIPackageSetterCommon)((IAIPackageGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out AIPackage item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((AIPackageSetterCommon)((IAIPackageGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new AIPackage GetNew()
        {
            return new AIPackage();
        }

    }
    #endregion

    #region Interface
    public partial interface IAIPackage :
        IAIPackageGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IAIPackageInternal>,
        IOblivionMajorRecordInternal
    {
        new AIPackageData? Data { get; set; }
        new AIPackageLocation? Location { get; set; }
        new AIPackageSchedule? Schedule { get; set; }
        new AIPackageTarget? Target { get; set; }
        new ExtendedList<Condition> Conditions { get; }
    }

    public partial interface IAIPackageInternal :
        IOblivionMajorRecordInternal,
        IAIPackage,
        IAIPackageGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts.PACK)]
    public partial interface IAIPackageGetter :
        IOblivionMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IAIPackageGetter>,
        IMapsToGetter<IAIPackageGetter>
    {
        static new ILoquiRegistration StaticRegistration => AIPackage_Registration.Instance;
        IAIPackageDataGetter? Data { get; }
        IAIPackageLocationGetter? Location { get; }
        IAIPackageScheduleGetter? Schedule { get; }
        IAIPackageTargetGetter? Target { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class AIPackageMixIn
    {
        public static void Clear(this IAIPackageInternal item)
        {
            ((AIPackageSetterCommon)((IAIPackageGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AIPackage.Mask<bool> GetEqualsMask(
            this IAIPackageGetter item,
            IAIPackageGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AIPackageCommon)((IAIPackageGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IAIPackageGetter item,
            string? name = null,
            AIPackage.Mask<bool>? printMask = null)
        {
            return ((AIPackageCommon)((IAIPackageGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IAIPackageGetter item,
            FileGeneration fg,
            string? name = null,
            AIPackage.Mask<bool>? printMask = null)
        {
            ((AIPackageCommon)((IAIPackageGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IAIPackageGetter item,
            IAIPackageGetter rhs,
            AIPackage.TranslationMask? equalsMask = null)
        {
            return ((AIPackageCommon)((IAIPackageGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IAIPackageInternal lhs,
            IAIPackageGetter rhs,
            out AIPackage.ErrorMask errorMask,
            AIPackage.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AIPackageSetterTranslationCommon)((IAIPackageGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = AIPackage.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAIPackageInternal lhs,
            IAIPackageGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AIPackageSetterTranslationCommon)((IAIPackageGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static AIPackage DeepCopy(
            this IAIPackageGetter item,
            AIPackage.TranslationMask? copyMask = null)
        {
            return ((AIPackageSetterTranslationCommon)((IAIPackageGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AIPackage DeepCopy(
            this IAIPackageGetter item,
            out AIPackage.ErrorMask errorMask,
            AIPackage.TranslationMask? copyMask = null)
        {
            return ((AIPackageSetterTranslationCommon)((IAIPackageGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AIPackage DeepCopy(
            this IAIPackageGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AIPackageSetterTranslationCommon)((IAIPackageGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static AIPackage Duplicate(
            this IAIPackageGetter item,
            FormKey formKey,
            AIPackage.TranslationMask? copyMask = null)
        {
            return ((AIPackageCommon)((IAIPackageGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IAIPackageInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((AIPackageSetterCommon)((IAIPackageGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum AIPackage_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Data = 5,
        Location = 6,
        Schedule = 7,
        Target = 8,
        Conditions = 9,
    }
    #endregion

    #region Registration
    public partial class AIPackage_Registration : ILoquiRegistration
    {
        public static readonly AIPackage_Registration Instance = new AIPackage_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 87,
            version: 0);

        public const string GUID = "e9210f75-0cfe-4e96-8c3a-415255e0d359";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(AIPackage.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AIPackage.ErrorMask);

        public static readonly Type ClassType = typeof(AIPackage);

        public static readonly Type GetterType = typeof(IAIPackageGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAIPackage);

        public static readonly Type? InternalSetterType = typeof(IAIPackageInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.AIPackage";

        public const string Name = "AIPackage";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.PACK;
        public static readonly Type BinaryWriteTranslation = typeof(AIPackageBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class AIPackageSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly AIPackageSetterCommon Instance = new AIPackageSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IAIPackageInternal item)
        {
            ClearPartial();
            item.Data = null;
            item.Location = null;
            item.Schedule = null;
            item.Target = null;
            item.Conditions.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IAIPackageInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IAIPackageInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IAIPackage obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Location?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAIPackageInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.MajorRecordParse<IAIPackageInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: AIPackageBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: AIPackageBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (AIPackage)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (AIPackage)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    public partial class AIPackageCommon : OblivionMajorRecordCommon
    {
        public new static readonly AIPackageCommon Instance = new AIPackageCommon();

        public AIPackage.Mask<bool> GetEqualsMask(
            IAIPackageGetter item,
            IAIPackageGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AIPackage.Mask<bool>(false);
            ((AIPackageCommon)((IAIPackageGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAIPackageGetter item,
            IAIPackageGetter rhs,
            AIPackage.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Location = EqualsMaskHelper.EqualsHelper(
                item.Location,
                rhs.Location,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Schedule = EqualsMaskHelper.EqualsHelper(
                item.Schedule,
                rhs.Schedule,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Target = EqualsMaskHelper.EqualsHelper(
                item.Target,
                rhs.Target,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IAIPackageGetter item,
            string? name = null,
            AIPackage.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IAIPackageGetter item,
            FileGeneration fg,
            string? name = null,
            AIPackage.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"AIPackage =>");
            }
            else
            {
                fg.AppendLine($"{name} (AIPackage) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IAIPackageGetter item,
            FileGeneration fg,
            AIPackage.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Data?.Overall ?? true)
                && item.Data is {} DataItem)
            {
                DataItem?.ToString(fg, "Data");
            }
            if ((printMask?.Location?.Overall ?? true)
                && item.Location is {} LocationItem)
            {
                LocationItem?.ToString(fg, "Location");
            }
            if ((printMask?.Schedule?.Overall ?? true)
                && item.Schedule is {} ScheduleItem)
            {
                ScheduleItem?.ToString(fg, "Schedule");
            }
            if ((printMask?.Target?.Overall ?? true)
                && item.Target is {} TargetItem)
            {
                TargetItem?.ToString(fg, "Target");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Conditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public static AIPackage_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AIPackage_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (AIPackage_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.VersionControl:
                    return (AIPackage_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (AIPackage_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (AIPackage_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new AIPackage_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AIPackage_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (AIPackage_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (AIPackage_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (AIPackage_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAIPackageGetter? lhs,
            IAIPackageGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IOblivionMajorRecordGetter)lhs, (IOblivionMajorRecordGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)AIPackage_FieldIndex.Data) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Data, rhs.Data, out var lhsData, out var rhsData, out var isDataEqual))
                {
                    if (!((AIPackageDataCommon)((IAIPackageDataGetter)lhsData).CommonInstance()!).Equals(lhsData, rhsData, crystal?.GetSubCrystal((int)AIPackage_FieldIndex.Data))) return false;
                }
                else if (!isDataEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)AIPackage_FieldIndex.Location) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Location, rhs.Location, out var lhsLocation, out var rhsLocation, out var isLocationEqual))
                {
                    if (!((AIPackageLocationCommon)((IAIPackageLocationGetter)lhsLocation).CommonInstance()!).Equals(lhsLocation, rhsLocation, crystal?.GetSubCrystal((int)AIPackage_FieldIndex.Location))) return false;
                }
                else if (!isLocationEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)AIPackage_FieldIndex.Schedule) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Schedule, rhs.Schedule, out var lhsSchedule, out var rhsSchedule, out var isScheduleEqual))
                {
                    if (!((AIPackageScheduleCommon)((IAIPackageScheduleGetter)lhsSchedule).CommonInstance()!).Equals(lhsSchedule, rhsSchedule, crystal?.GetSubCrystal((int)AIPackage_FieldIndex.Schedule))) return false;
                }
                else if (!isScheduleEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)AIPackage_FieldIndex.Target) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Target, rhs.Target, out var lhsTarget, out var rhsTarget, out var isTargetEqual))
                {
                    if (!((AIPackageTargetCommon)((IAIPackageTargetGetter)lhsTarget).CommonInstance()!).Equals(lhsTarget, rhsTarget, crystal?.GetSubCrystal((int)AIPackage_FieldIndex.Target))) return false;
                }
                else if (!isTargetEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)AIPackage_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqualNullable(rhs.Conditions)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IAIPackageGetter?)lhs,
                rhs: rhs as IAIPackageGetter,
                crystal: crystal);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IAIPackageGetter?)lhs,
                rhs: rhs as IAIPackageGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(IAIPackageGetter item)
        {
            var hash = new HashCode();
            if (item.Data is {} Dataitem)
            {
                hash.Add(Dataitem);
            }
            if (item.Location is {} Locationitem)
            {
                hash.Add(Locationitem);
            }
            if (item.Schedule is {} Scheduleitem)
            {
                hash.Add(Scheduleitem);
            }
            if (item.Target is {} Targetitem)
            {
                hash.Add(Targetitem);
            }
            hash.Add(item.Conditions);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IAIPackageGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IAIPackageGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return AIPackage.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IAIPackageGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Location is {} LocationItems)
            {
                foreach (var item in LocationItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public AIPackage Duplicate(
            IAIPackageGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new AIPackage(formKey);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override OblivionMajorRecord Duplicate(
            IOblivionMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAIPackageGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAIPackageGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class AIPackageSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly AIPackageSetterTranslationCommon Instance = new AIPackageSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IAIPackageInternal item,
            IAIPackageGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IAIPackage item,
            IAIPackageGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IOblivionMajorRecord)item,
                (IOblivionMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)AIPackage_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)AIPackage_FieldIndex.Data);
                try
                {
                    if(rhs.Data is {} rhsData)
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)AIPackage_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AIPackage_FieldIndex.Location) ?? true))
            {
                errorMask?.PushIndex((int)AIPackage_FieldIndex.Location);
                try
                {
                    if(rhs.Location is {} rhsLocation)
                    {
                        item.Location = rhsLocation.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)AIPackage_FieldIndex.Location));
                    }
                    else
                    {
                        item.Location = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AIPackage_FieldIndex.Schedule) ?? true))
            {
                errorMask?.PushIndex((int)AIPackage_FieldIndex.Schedule);
                try
                {
                    if(rhs.Schedule is {} rhsSchedule)
                    {
                        item.Schedule = rhsSchedule.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)AIPackage_FieldIndex.Schedule));
                    }
                    else
                    {
                        item.Schedule = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AIPackage_FieldIndex.Target) ?? true))
            {
                errorMask?.PushIndex((int)AIPackage_FieldIndex.Target);
                try
                {
                    if(rhs.Target is {} rhsTarget)
                    {
                        item.Target = rhsTarget.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)AIPackage_FieldIndex.Target));
                    }
                    else
                    {
                        item.Target = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AIPackage_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)AIPackage_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAIPackageInternal)item,
                rhs: (IAIPackageGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAIPackage)item,
                rhs: (IAIPackageGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAIPackageInternal)item,
                rhs: (IAIPackageGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAIPackage)item,
                rhs: (IAIPackageGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public AIPackage DeepCopy(
            IAIPackageGetter item,
            AIPackage.TranslationMask? copyMask = null)
        {
            AIPackage ret = (AIPackage)((AIPackageCommon)((IAIPackageGetter)item).CommonInstance()!).GetNew();
            ((AIPackageSetterTranslationCommon)((IAIPackageGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public AIPackage DeepCopy(
            IAIPackageGetter item,
            out AIPackage.ErrorMask errorMask,
            AIPackage.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AIPackage ret = (AIPackage)((AIPackageCommon)((IAIPackageGetter)item).CommonInstance()!).GetNew();
            ((AIPackageSetterTranslationCommon)((IAIPackageGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = AIPackage.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public AIPackage DeepCopy(
            IAIPackageGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AIPackage ret = (AIPackage)((AIPackageCommon)((IAIPackageGetter)item).CommonInstance()!).GetNew();
            ((AIPackageSetterTranslationCommon)((IAIPackageGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class AIPackage
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AIPackage_Registration.Instance;
        public new static AIPackage_Registration StaticRegistration => AIPackage_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AIPackageCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return AIPackageSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AIPackageSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class AIPackageBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static AIPackageBinaryWriteTranslation Instance = new AIPackageBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IAIPackageGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.Data is {} DataItem)
            {
                ((AIPackageDataBinaryWriteTranslation)((IBinaryItem)DataItem).BinaryWriteTranslator).Write(
                    item: DataItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.Location is {} LocationItem)
            {
                ((AIPackageLocationBinaryWriteTranslation)((IBinaryItem)LocationItem).BinaryWriteTranslator).Write(
                    item: LocationItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.Schedule is {} ScheduleItem)
            {
                ((AIPackageScheduleBinaryWriteTranslation)((IBinaryItem)ScheduleItem).BinaryWriteTranslator).Write(
                    item: ScheduleItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.Target is {} TargetItem)
            {
                ((AIPackageTargetBinaryWriteTranslation)((IBinaryItem)TargetItem).BinaryWriteTranslator).Write(
                    item: TargetItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams? conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IAIPackageGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Record(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.PACK)))
            {
                try
                {
                    OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        translationParams: translationParams);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Enrich(ex, item);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IAIPackageGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IAIPackageGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IAIPackageGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class AIPackageBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static AIPackageBinaryCreateTranslation Instance = new AIPackageBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.PACK;
        public static void FillBinaryStructs(
            IAIPackageInternal item,
            MutagenFrame frame)
        {
            OblivionMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IAIPackageInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.PKDT:
                {
                    item.Data = Mutagen.Bethesda.Oblivion.AIPackageData.CreateFromBinary(frame: frame);
                    return (int)AIPackage_FieldIndex.Data;
                }
                case RecordTypeInts.PLDT:
                {
                    item.Location = Mutagen.Bethesda.Oblivion.AIPackageLocation.CreateFromBinary(frame: frame);
                    return (int)AIPackage_FieldIndex.Location;
                }
                case RecordTypeInts.PSDT:
                {
                    item.Schedule = Mutagen.Bethesda.Oblivion.AIPackageSchedule.CreateFromBinary(frame: frame);
                    return (int)AIPackage_FieldIndex.Schedule;
                }
                case RecordTypeInts.PTDT:
                {
                    item.Target = Mutagen.Bethesda.Oblivion.AIPackageTarget.CreateFromBinary(frame: frame);
                    return (int)AIPackage_FieldIndex.Target;
                }
                case RecordTypeInts.CTDA:
                case RecordTypeInts.CTDT:
                {
                    item.Conditions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Condition_Registration.TriggeringRecordTypes,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary));
                    return (int)AIPackage_FieldIndex.Conditions;
                }
                default:
                    return OblivionMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class AIPackageBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class AIPackageBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IAIPackageGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AIPackage_Registration.Instance;
        public new static AIPackage_Registration StaticRegistration => AIPackage_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AIPackageCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AIPackageSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => AIPackageCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AIPackageBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((AIPackageBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IAIPackage);


        #region Data
        private RangeInt32? _DataLocation;
        public IAIPackageDataGetter? Data => _DataLocation.HasValue ? AIPackageDataBinaryOverlay.AIPackageDataFactory(new OverlayStream(_data.Slice(_DataLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region Location
        private RangeInt32? _LocationLocation;
        public IAIPackageLocationGetter? Location => _LocationLocation.HasValue ? AIPackageLocationBinaryOverlay.AIPackageLocationFactory(new OverlayStream(_data.Slice(_LocationLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region Schedule
        private RangeInt32? _ScheduleLocation;
        public IAIPackageScheduleGetter? Schedule => _ScheduleLocation.HasValue ? AIPackageScheduleBinaryOverlay.AIPackageScheduleFactory(new OverlayStream(_data.Slice(_ScheduleLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region Target
        private RangeInt32? _TargetLocation;
        public IAIPackageTargetGetter? Target => _TargetLocation.HasValue ? AIPackageTargetBinaryOverlay.AIPackageTargetFactory(new OverlayStream(_data.Slice(_TargetLocation!.Value.Min), _package), _package) : default;
        #endregion
        public IReadOnlyList<IConditionGetter> Conditions { get; private set; } = ListExt.Empty<ConditionBinaryOverlay>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected AIPackageBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static AIPackageBinaryOverlay AIPackageFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            stream = PluginUtilityTranslation.DecompressStream(stream);
            var ret = new AIPackageBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0xC + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static AIPackageBinaryOverlay AIPackageFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return AIPackageFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.PKDT:
                {
                    _DataLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)AIPackage_FieldIndex.Data;
                }
                case RecordTypeInts.PLDT:
                {
                    _LocationLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)AIPackage_FieldIndex.Location;
                }
                case RecordTypeInts.PSDT:
                {
                    _ScheduleLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)AIPackage_FieldIndex.Schedule;
                }
                case RecordTypeInts.PTDT:
                {
                    _TargetLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)AIPackage_FieldIndex.Target;
                }
                case RecordTypeInts.CTDA:
                case RecordTypeInts.CTDT:
                {
                    this.Conditions = BinaryOverlayList.FactoryByArray<ConditionBinaryOverlay>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        parseParams: parseParams,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: type,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)AIPackage_FieldIndex.Conditions;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            AIPackageMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<AIPackage>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IAIPackageGetter rhs) return false;
            return ((AIPackageCommon)((IAIPackageGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IAIPackageGetter? obj)
        {
            return ((AIPackageCommon)((IAIPackageGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((AIPackageCommon)((IAIPackageGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

