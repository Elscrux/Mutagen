/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RankPlacement :
        IEquatable<IRankPlacementGetter>,
        ILoquiObjectSetter<RankPlacement>,
        IRankPlacement
    {
        #region Ctor
        public RankPlacement()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Faction
        private readonly IFormLink<IFactionGetter> _Faction = new FormLink<IFactionGetter>();
        public IFormLink<IFactionGetter> Faction
        {
            get => _Faction;
            set => _Faction.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IFactionGetter> IRankPlacementGetter.Faction => this.Faction;
        #endregion
        #region Rank
        public Byte Rank { get; set; } = default;
        #endregion
        #region Unused
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unused = new byte[3];
        public MemorySlice<Byte> Unused
        {
            get => _Unused;
            set => this._Unused = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IRankPlacementGetter.Unused => this.Unused;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RankPlacementMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IRankPlacementGetter rhs) return false;
            return ((RankPlacementCommon)((IRankPlacementGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IRankPlacementGetter? obj)
        {
            return ((RankPlacementCommon)((IRankPlacementGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((RankPlacementCommon)((IRankPlacementGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Faction = initialValue;
                this.Rank = initialValue;
                this.Unused = initialValue;
            }

            public Mask(
                TItem Faction,
                TItem Rank,
                TItem Unused)
            {
                this.Faction = Faction;
                this.Rank = Rank;
                this.Unused = Unused;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Faction;
            public TItem Rank;
            public TItem Unused;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Faction, rhs.Faction)) return false;
                if (!object.Equals(this.Rank, rhs.Rank)) return false;
                if (!object.Equals(this.Unused, rhs.Unused)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Faction);
                hash.Add(this.Rank);
                hash.Add(this.Unused);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Faction)) return false;
                if (!eval(this.Rank)) return false;
                if (!eval(this.Unused)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Faction)) return true;
                if (eval(this.Rank)) return true;
                if (eval(this.Unused)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new RankPlacement.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Faction = eval(this.Faction);
                obj.Rank = eval(this.Rank);
                obj.Unused = eval(this.Unused);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(RankPlacement.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, RankPlacement.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(RankPlacement.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Faction ?? true)
                    {
                        fg.AppendItem(Faction, "Faction");
                    }
                    if (printMask?.Rank ?? true)
                    {
                        fg.AppendItem(Rank, "Rank");
                    }
                    if (printMask?.Unused ?? true)
                    {
                        fg.AppendItem(Unused, "Unused");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Faction;
            public Exception? Rank;
            public Exception? Unused;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                RankPlacement_FieldIndex enu = (RankPlacement_FieldIndex)index;
                switch (enu)
                {
                    case RankPlacement_FieldIndex.Faction:
                        return Faction;
                    case RankPlacement_FieldIndex.Rank:
                        return Rank;
                    case RankPlacement_FieldIndex.Unused:
                        return Unused;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                RankPlacement_FieldIndex enu = (RankPlacement_FieldIndex)index;
                switch (enu)
                {
                    case RankPlacement_FieldIndex.Faction:
                        this.Faction = ex;
                        break;
                    case RankPlacement_FieldIndex.Rank:
                        this.Rank = ex;
                        break;
                    case RankPlacement_FieldIndex.Unused:
                        this.Unused = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                RankPlacement_FieldIndex enu = (RankPlacement_FieldIndex)index;
                switch (enu)
                {
                    case RankPlacement_FieldIndex.Faction:
                        this.Faction = (Exception?)obj;
                        break;
                    case RankPlacement_FieldIndex.Rank:
                        this.Rank = (Exception?)obj;
                        break;
                    case RankPlacement_FieldIndex.Unused:
                        this.Unused = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Faction != null) return true;
                if (Rank != null) return true;
                if (Unused != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Faction, "Faction");
                fg.AppendItem(Rank, "Rank");
                fg.AppendItem(Unused, "Unused");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Faction = this.Faction.Combine(rhs.Faction);
                ret.Rank = this.Rank.Combine(rhs.Rank);
                ret.Unused = this.Unused.Combine(rhs.Unused);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Faction;
            public bool Rank;
            public bool Unused;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Faction = defaultOn;
                this.Rank = defaultOn;
                this.Unused = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Faction, null));
                ret.Add((Rank, null));
                ret.Add((Unused, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = RankPlacement_Registration.TriggeringRecordType;
        public IEnumerable<IFormLinkGetter> ContainedFormLinks => RankPlacementCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RankPlacementSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => RankPlacementBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((RankPlacementBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static RankPlacement CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new RankPlacement();
            ((RankPlacementSetterCommon)((IRankPlacementGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out RankPlacement item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((RankPlacementSetterCommon)((IRankPlacementGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static RankPlacement GetNew()
        {
            return new RankPlacement();
        }

    }
    #endregion

    #region Interface
    public partial interface IRankPlacement :
        IFormLinkContainer,
        ILoquiObjectSetter<IRankPlacement>,
        IRankPlacementGetter
    {
        new IFormLink<IFactionGetter> Faction { get; set; }
        new Byte Rank { get; set; }
        new MemorySlice<Byte> Unused { get; set; }
    }

    public partial interface IRankPlacementGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IRankPlacementGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => RankPlacement_Registration.Instance;
        IFormLinkGetter<IFactionGetter> Faction { get; }
        Byte Rank { get; }
        ReadOnlyMemorySlice<Byte> Unused { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class RankPlacementMixIn
    {
        public static void Clear(this IRankPlacement item)
        {
            ((RankPlacementSetterCommon)((IRankPlacementGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static RankPlacement.Mask<bool> GetEqualsMask(
            this IRankPlacementGetter item,
            IRankPlacementGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RankPlacementCommon)((IRankPlacementGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRankPlacementGetter item,
            string? name = null,
            RankPlacement.Mask<bool>? printMask = null)
        {
            return ((RankPlacementCommon)((IRankPlacementGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRankPlacementGetter item,
            FileGeneration fg,
            string? name = null,
            RankPlacement.Mask<bool>? printMask = null)
        {
            ((RankPlacementCommon)((IRankPlacementGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IRankPlacementGetter item,
            IRankPlacementGetter rhs,
            RankPlacement.TranslationMask? equalsMask = null)
        {
            return ((RankPlacementCommon)((IRankPlacementGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IRankPlacement lhs,
            IRankPlacementGetter rhs)
        {
            ((RankPlacementSetterTranslationCommon)((IRankPlacementGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IRankPlacement lhs,
            IRankPlacementGetter rhs,
            RankPlacement.TranslationMask? copyMask = null)
        {
            ((RankPlacementSetterTranslationCommon)((IRankPlacementGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IRankPlacement lhs,
            IRankPlacementGetter rhs,
            out RankPlacement.ErrorMask errorMask,
            RankPlacement.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RankPlacementSetterTranslationCommon)((IRankPlacementGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = RankPlacement.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRankPlacement lhs,
            IRankPlacementGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RankPlacementSetterTranslationCommon)((IRankPlacementGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static RankPlacement DeepCopy(
            this IRankPlacementGetter item,
            RankPlacement.TranslationMask? copyMask = null)
        {
            return ((RankPlacementSetterTranslationCommon)((IRankPlacementGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static RankPlacement DeepCopy(
            this IRankPlacementGetter item,
            out RankPlacement.ErrorMask errorMask,
            RankPlacement.TranslationMask? copyMask = null)
        {
            return ((RankPlacementSetterTranslationCommon)((IRankPlacementGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static RankPlacement DeepCopy(
            this IRankPlacementGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RankPlacementSetterTranslationCommon)((IRankPlacementGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IRankPlacement item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((RankPlacementSetterCommon)((IRankPlacementGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RankPlacement_FieldIndex
    {
        Faction = 0,
        Rank = 1,
        Unused = 2,
    }
    #endregion

    #region Registration
    public partial class RankPlacement_Registration : ILoquiRegistration
    {
        public static readonly RankPlacement_Registration Instance = new RankPlacement_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 85,
            version: 0);

        public const string GUID = "825729c0-9865-4e99-87a2-ea87f3fc373a";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(RankPlacement.Mask<>);

        public static readonly Type ErrorMaskType = typeof(RankPlacement.ErrorMask);

        public static readonly Type ClassType = typeof(RankPlacement);

        public static readonly Type GetterType = typeof(IRankPlacementGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRankPlacement);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.RankPlacement";

        public const string Name = "RankPlacement";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.SNAM;
        public static readonly Type BinaryWriteTranslation = typeof(RankPlacementBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class RankPlacementSetterCommon
    {
        public static readonly RankPlacementSetterCommon Instance = new RankPlacementSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRankPlacement item)
        {
            ClearPartial();
            item.Faction.Clear();
            item.Rank = default;
            item.Unused = new byte[3];
        }
        
        #region Mutagen
        public void RemapLinks(IRankPlacement obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Faction.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IRankPlacement item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.SNAM),
                translationParams?.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: RankPlacementBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class RankPlacementCommon
    {
        public static readonly RankPlacementCommon Instance = new RankPlacementCommon();

        public RankPlacement.Mask<bool> GetEqualsMask(
            IRankPlacementGetter item,
            IRankPlacementGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RankPlacement.Mask<bool>(false);
            ((RankPlacementCommon)((IRankPlacementGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRankPlacementGetter item,
            IRankPlacementGetter rhs,
            RankPlacement.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Faction = item.Faction.Equals(rhs.Faction);
            ret.Rank = item.Rank == rhs.Rank;
            ret.Unused = MemoryExtensions.SequenceEqual(item.Unused.Span, rhs.Unused.Span);
        }
        
        public string ToString(
            IRankPlacementGetter item,
            string? name = null,
            RankPlacement.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRankPlacementGetter item,
            FileGeneration fg,
            string? name = null,
            RankPlacement.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"RankPlacement =>");
            }
            else
            {
                fg.AppendLine($"{name} (RankPlacement) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRankPlacementGetter item,
            FileGeneration fg,
            RankPlacement.Mask<bool>? printMask = null)
        {
            if (printMask?.Faction ?? true)
            {
                fg.AppendItem(item.Faction.FormKey, "Faction");
            }
            if (printMask?.Rank ?? true)
            {
                fg.AppendItem(item.Rank, "Rank");
            }
            if (printMask?.Unused ?? true)
            {
                fg.AppendLine($"Unused => {SpanExt.ToHexString(item.Unused)}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRankPlacementGetter? lhs,
            IRankPlacementGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)RankPlacement_FieldIndex.Faction) ?? true))
            {
                if (!lhs.Faction.Equals(rhs.Faction)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)RankPlacement_FieldIndex.Rank) ?? true))
            {
                if (lhs.Rank != rhs.Rank) return false;
            }
            if ((crystal?.GetShouldTranslate((int)RankPlacement_FieldIndex.Unused) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.Unused.Span, rhs.Unused.Span)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IRankPlacementGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Faction);
            hash.Add(item.Rank);
            hash.Add(item.Unused);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return RankPlacement.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IRankPlacementGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.Faction);
            yield break;
        }
        
        #endregion
        
    }
    public partial class RankPlacementSetterTranslationCommon
    {
        public static readonly RankPlacementSetterTranslationCommon Instance = new RankPlacementSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IRankPlacement item,
            IRankPlacementGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)RankPlacement_FieldIndex.Faction) ?? true))
            {
                item.Faction.SetTo(rhs.Faction.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)RankPlacement_FieldIndex.Rank) ?? true))
            {
                item.Rank = rhs.Rank;
            }
            if ((copyMask?.GetShouldTranslate((int)RankPlacement_FieldIndex.Unused) ?? true))
            {
                item.Unused = rhs.Unused.ToArray();
            }
        }
        
        #endregion
        
        public RankPlacement DeepCopy(
            IRankPlacementGetter item,
            RankPlacement.TranslationMask? copyMask = null)
        {
            RankPlacement ret = (RankPlacement)((RankPlacementCommon)((IRankPlacementGetter)item).CommonInstance()!).GetNew();
            ((RankPlacementSetterTranslationCommon)((IRankPlacementGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public RankPlacement DeepCopy(
            IRankPlacementGetter item,
            out RankPlacement.ErrorMask errorMask,
            RankPlacement.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RankPlacement ret = (RankPlacement)((RankPlacementCommon)((IRankPlacementGetter)item).CommonInstance()!).GetNew();
            ((RankPlacementSetterTranslationCommon)((IRankPlacementGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = RankPlacement.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public RankPlacement DeepCopy(
            IRankPlacementGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            RankPlacement ret = (RankPlacement)((RankPlacementCommon)((IRankPlacementGetter)item).CommonInstance()!).GetNew();
            ((RankPlacementSetterTranslationCommon)((IRankPlacementGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class RankPlacement
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RankPlacement_Registration.Instance;
        public static RankPlacement_Registration StaticRegistration => RankPlacement_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => RankPlacementCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return RankPlacementSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => RankPlacementSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRankPlacementGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IRankPlacementGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IRankPlacementGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RankPlacementBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static RankPlacementBinaryWriteTranslation Instance = new RankPlacementBinaryWriteTranslation();

        public static void WriteEmbedded(
            IRankPlacementGetter item,
            MutagenWriter writer)
        {
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Faction);
            writer.Write(item.Rank);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unused);
        }

        public void Write(
            MutagenWriter writer,
            IRankPlacementGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.SNAM),
                overflowRecord: translationParams?.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IRankPlacementGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class RankPlacementBinaryCreateTranslation
    {
        public readonly static RankPlacementBinaryCreateTranslation Instance = new RankPlacementBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IRankPlacement item,
            MutagenFrame frame)
        {
            item.Faction.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.Rank = frame.ReadUInt8();
            item.Unused = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(3));
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class RankPlacementBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRankPlacementGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((RankPlacementBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RankPlacementBinaryOverlay :
        PluginBinaryOverlay,
        IRankPlacementGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RankPlacement_Registration.Instance;
        public static RankPlacement_Registration StaticRegistration => RankPlacement_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => RankPlacementCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => RankPlacementSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRankPlacementGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IRankPlacementGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IRankPlacementGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public IEnumerable<IFormLinkGetter> ContainedFormLinks => RankPlacementCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => RankPlacementBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((RankPlacementBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public IFormLinkGetter<IFactionGetter> Faction => new FormLink<IFactionGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0x0, 0x4))));
        public Byte Rank => _data.Span[0x4];
        public ReadOnlyMemorySlice<Byte> Unused => _data.Span.Slice(0x5, 0x3).ToArray();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected RankPlacementBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static RankPlacementBinaryOverlay RankPlacementFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new RankPlacementBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants, parseParams),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0x8 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static RankPlacementBinaryOverlay RankPlacementFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return RankPlacementFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RankPlacementMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IRankPlacementGetter rhs) return false;
            return ((RankPlacementCommon)((IRankPlacementGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IRankPlacementGetter? obj)
        {
            return ((RankPlacementCommon)((IRankPlacementGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((RankPlacementCommon)((IRankPlacementGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

