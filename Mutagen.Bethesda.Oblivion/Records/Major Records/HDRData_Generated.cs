/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Oblivion.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class HDRData :
        IEquatable<IHDRDataGetter>,
        IHDRData,
        ILoquiObjectSetter<HDRData>
    {
        #region Ctor
        public HDRData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region EyeAdaptSpeed
        public Single EyeAdaptSpeed { get; set; } = default(Single);
        #endregion
        #region BlurRadius
        public Single BlurRadius { get; set; } = default(Single);
        #endregion
        #region BlurPasses
        public Single BlurPasses { get; set; } = default(Single);
        #endregion
        #region EmissiveMult
        public Single EmissiveMult { get; set; } = default(Single);
        #endregion
        #region TargetLum
        public Single TargetLum { get; set; } = default(Single);
        #endregion
        #region UpperLumClamp
        public Single UpperLumClamp { get; set; } = default(Single);
        #endregion
        #region BrightScale
        public Single BrightScale { get; set; } = default(Single);
        #endregion
        #region BrightClamp
        public Single BrightClamp { get; set; } = default(Single);
        #endregion
        #region LumRampNoTex
        public Single LumRampNoTex { get; set; } = default(Single);
        #endregion
        #region LumRampMin
        public Single LumRampMin { get; set; } = default(Single);
        #endregion
        #region LumRampMax
        public Single LumRampMax { get; set; } = default(Single);
        #endregion
        #region SunlightDimmer
        public Single SunlightDimmer { get; set; } = default(Single);
        #endregion
        #region GrassDimmer
        public Single GrassDimmer { get; set; } = default(Single);
        #endregion
        #region TreeDimmer
        public Single TreeDimmer { get; set; } = default(Single);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            HDRDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IHDRDataGetter rhs) return false;
            return ((HDRDataCommon)((IHDRDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IHDRDataGetter? obj)
        {
            return ((HDRDataCommon)((IHDRDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((HDRDataCommon)((IHDRDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.EyeAdaptSpeed = initialValue;
                this.BlurRadius = initialValue;
                this.BlurPasses = initialValue;
                this.EmissiveMult = initialValue;
                this.TargetLum = initialValue;
                this.UpperLumClamp = initialValue;
                this.BrightScale = initialValue;
                this.BrightClamp = initialValue;
                this.LumRampNoTex = initialValue;
                this.LumRampMin = initialValue;
                this.LumRampMax = initialValue;
                this.SunlightDimmer = initialValue;
                this.GrassDimmer = initialValue;
                this.TreeDimmer = initialValue;
            }

            public Mask(
                TItem EyeAdaptSpeed,
                TItem BlurRadius,
                TItem BlurPasses,
                TItem EmissiveMult,
                TItem TargetLum,
                TItem UpperLumClamp,
                TItem BrightScale,
                TItem BrightClamp,
                TItem LumRampNoTex,
                TItem LumRampMin,
                TItem LumRampMax,
                TItem SunlightDimmer,
                TItem GrassDimmer,
                TItem TreeDimmer)
            {
                this.EyeAdaptSpeed = EyeAdaptSpeed;
                this.BlurRadius = BlurRadius;
                this.BlurPasses = BlurPasses;
                this.EmissiveMult = EmissiveMult;
                this.TargetLum = TargetLum;
                this.UpperLumClamp = UpperLumClamp;
                this.BrightScale = BrightScale;
                this.BrightClamp = BrightClamp;
                this.LumRampNoTex = LumRampNoTex;
                this.LumRampMin = LumRampMin;
                this.LumRampMax = LumRampMax;
                this.SunlightDimmer = SunlightDimmer;
                this.GrassDimmer = GrassDimmer;
                this.TreeDimmer = TreeDimmer;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem EyeAdaptSpeed;
            public TItem BlurRadius;
            public TItem BlurPasses;
            public TItem EmissiveMult;
            public TItem TargetLum;
            public TItem UpperLumClamp;
            public TItem BrightScale;
            public TItem BrightClamp;
            public TItem LumRampNoTex;
            public TItem LumRampMin;
            public TItem LumRampMax;
            public TItem SunlightDimmer;
            public TItem GrassDimmer;
            public TItem TreeDimmer;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.EyeAdaptSpeed, rhs.EyeAdaptSpeed)) return false;
                if (!object.Equals(this.BlurRadius, rhs.BlurRadius)) return false;
                if (!object.Equals(this.BlurPasses, rhs.BlurPasses)) return false;
                if (!object.Equals(this.EmissiveMult, rhs.EmissiveMult)) return false;
                if (!object.Equals(this.TargetLum, rhs.TargetLum)) return false;
                if (!object.Equals(this.UpperLumClamp, rhs.UpperLumClamp)) return false;
                if (!object.Equals(this.BrightScale, rhs.BrightScale)) return false;
                if (!object.Equals(this.BrightClamp, rhs.BrightClamp)) return false;
                if (!object.Equals(this.LumRampNoTex, rhs.LumRampNoTex)) return false;
                if (!object.Equals(this.LumRampMin, rhs.LumRampMin)) return false;
                if (!object.Equals(this.LumRampMax, rhs.LumRampMax)) return false;
                if (!object.Equals(this.SunlightDimmer, rhs.SunlightDimmer)) return false;
                if (!object.Equals(this.GrassDimmer, rhs.GrassDimmer)) return false;
                if (!object.Equals(this.TreeDimmer, rhs.TreeDimmer)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.EyeAdaptSpeed);
                hash.Add(this.BlurRadius);
                hash.Add(this.BlurPasses);
                hash.Add(this.EmissiveMult);
                hash.Add(this.TargetLum);
                hash.Add(this.UpperLumClamp);
                hash.Add(this.BrightScale);
                hash.Add(this.BrightClamp);
                hash.Add(this.LumRampNoTex);
                hash.Add(this.LumRampMin);
                hash.Add(this.LumRampMax);
                hash.Add(this.SunlightDimmer);
                hash.Add(this.GrassDimmer);
                hash.Add(this.TreeDimmer);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.EyeAdaptSpeed)) return false;
                if (!eval(this.BlurRadius)) return false;
                if (!eval(this.BlurPasses)) return false;
                if (!eval(this.EmissiveMult)) return false;
                if (!eval(this.TargetLum)) return false;
                if (!eval(this.UpperLumClamp)) return false;
                if (!eval(this.BrightScale)) return false;
                if (!eval(this.BrightClamp)) return false;
                if (!eval(this.LumRampNoTex)) return false;
                if (!eval(this.LumRampMin)) return false;
                if (!eval(this.LumRampMax)) return false;
                if (!eval(this.SunlightDimmer)) return false;
                if (!eval(this.GrassDimmer)) return false;
                if (!eval(this.TreeDimmer)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.EyeAdaptSpeed)) return true;
                if (eval(this.BlurRadius)) return true;
                if (eval(this.BlurPasses)) return true;
                if (eval(this.EmissiveMult)) return true;
                if (eval(this.TargetLum)) return true;
                if (eval(this.UpperLumClamp)) return true;
                if (eval(this.BrightScale)) return true;
                if (eval(this.BrightClamp)) return true;
                if (eval(this.LumRampNoTex)) return true;
                if (eval(this.LumRampMin)) return true;
                if (eval(this.LumRampMax)) return true;
                if (eval(this.SunlightDimmer)) return true;
                if (eval(this.GrassDimmer)) return true;
                if (eval(this.TreeDimmer)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new HDRData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.EyeAdaptSpeed = eval(this.EyeAdaptSpeed);
                obj.BlurRadius = eval(this.BlurRadius);
                obj.BlurPasses = eval(this.BlurPasses);
                obj.EmissiveMult = eval(this.EmissiveMult);
                obj.TargetLum = eval(this.TargetLum);
                obj.UpperLumClamp = eval(this.UpperLumClamp);
                obj.BrightScale = eval(this.BrightScale);
                obj.BrightClamp = eval(this.BrightClamp);
                obj.LumRampNoTex = eval(this.LumRampNoTex);
                obj.LumRampMin = eval(this.LumRampMin);
                obj.LumRampMax = eval(this.LumRampMax);
                obj.SunlightDimmer = eval(this.SunlightDimmer);
                obj.GrassDimmer = eval(this.GrassDimmer);
                obj.TreeDimmer = eval(this.TreeDimmer);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(HDRData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, HDRData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(HDRData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.EyeAdaptSpeed ?? true)
                    {
                        sb.AppendItem(EyeAdaptSpeed, "EyeAdaptSpeed");
                    }
                    if (printMask?.BlurRadius ?? true)
                    {
                        sb.AppendItem(BlurRadius, "BlurRadius");
                    }
                    if (printMask?.BlurPasses ?? true)
                    {
                        sb.AppendItem(BlurPasses, "BlurPasses");
                    }
                    if (printMask?.EmissiveMult ?? true)
                    {
                        sb.AppendItem(EmissiveMult, "EmissiveMult");
                    }
                    if (printMask?.TargetLum ?? true)
                    {
                        sb.AppendItem(TargetLum, "TargetLum");
                    }
                    if (printMask?.UpperLumClamp ?? true)
                    {
                        sb.AppendItem(UpperLumClamp, "UpperLumClamp");
                    }
                    if (printMask?.BrightScale ?? true)
                    {
                        sb.AppendItem(BrightScale, "BrightScale");
                    }
                    if (printMask?.BrightClamp ?? true)
                    {
                        sb.AppendItem(BrightClamp, "BrightClamp");
                    }
                    if (printMask?.LumRampNoTex ?? true)
                    {
                        sb.AppendItem(LumRampNoTex, "LumRampNoTex");
                    }
                    if (printMask?.LumRampMin ?? true)
                    {
                        sb.AppendItem(LumRampMin, "LumRampMin");
                    }
                    if (printMask?.LumRampMax ?? true)
                    {
                        sb.AppendItem(LumRampMax, "LumRampMax");
                    }
                    if (printMask?.SunlightDimmer ?? true)
                    {
                        sb.AppendItem(SunlightDimmer, "SunlightDimmer");
                    }
                    if (printMask?.GrassDimmer ?? true)
                    {
                        sb.AppendItem(GrassDimmer, "GrassDimmer");
                    }
                    if (printMask?.TreeDimmer ?? true)
                    {
                        sb.AppendItem(TreeDimmer, "TreeDimmer");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? EyeAdaptSpeed;
            public Exception? BlurRadius;
            public Exception? BlurPasses;
            public Exception? EmissiveMult;
            public Exception? TargetLum;
            public Exception? UpperLumClamp;
            public Exception? BrightScale;
            public Exception? BrightClamp;
            public Exception? LumRampNoTex;
            public Exception? LumRampMin;
            public Exception? LumRampMax;
            public Exception? SunlightDimmer;
            public Exception? GrassDimmer;
            public Exception? TreeDimmer;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                HDRData_FieldIndex enu = (HDRData_FieldIndex)index;
                switch (enu)
                {
                    case HDRData_FieldIndex.EyeAdaptSpeed:
                        return EyeAdaptSpeed;
                    case HDRData_FieldIndex.BlurRadius:
                        return BlurRadius;
                    case HDRData_FieldIndex.BlurPasses:
                        return BlurPasses;
                    case HDRData_FieldIndex.EmissiveMult:
                        return EmissiveMult;
                    case HDRData_FieldIndex.TargetLum:
                        return TargetLum;
                    case HDRData_FieldIndex.UpperLumClamp:
                        return UpperLumClamp;
                    case HDRData_FieldIndex.BrightScale:
                        return BrightScale;
                    case HDRData_FieldIndex.BrightClamp:
                        return BrightClamp;
                    case HDRData_FieldIndex.LumRampNoTex:
                        return LumRampNoTex;
                    case HDRData_FieldIndex.LumRampMin:
                        return LumRampMin;
                    case HDRData_FieldIndex.LumRampMax:
                        return LumRampMax;
                    case HDRData_FieldIndex.SunlightDimmer:
                        return SunlightDimmer;
                    case HDRData_FieldIndex.GrassDimmer:
                        return GrassDimmer;
                    case HDRData_FieldIndex.TreeDimmer:
                        return TreeDimmer;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                HDRData_FieldIndex enu = (HDRData_FieldIndex)index;
                switch (enu)
                {
                    case HDRData_FieldIndex.EyeAdaptSpeed:
                        this.EyeAdaptSpeed = ex;
                        break;
                    case HDRData_FieldIndex.BlurRadius:
                        this.BlurRadius = ex;
                        break;
                    case HDRData_FieldIndex.BlurPasses:
                        this.BlurPasses = ex;
                        break;
                    case HDRData_FieldIndex.EmissiveMult:
                        this.EmissiveMult = ex;
                        break;
                    case HDRData_FieldIndex.TargetLum:
                        this.TargetLum = ex;
                        break;
                    case HDRData_FieldIndex.UpperLumClamp:
                        this.UpperLumClamp = ex;
                        break;
                    case HDRData_FieldIndex.BrightScale:
                        this.BrightScale = ex;
                        break;
                    case HDRData_FieldIndex.BrightClamp:
                        this.BrightClamp = ex;
                        break;
                    case HDRData_FieldIndex.LumRampNoTex:
                        this.LumRampNoTex = ex;
                        break;
                    case HDRData_FieldIndex.LumRampMin:
                        this.LumRampMin = ex;
                        break;
                    case HDRData_FieldIndex.LumRampMax:
                        this.LumRampMax = ex;
                        break;
                    case HDRData_FieldIndex.SunlightDimmer:
                        this.SunlightDimmer = ex;
                        break;
                    case HDRData_FieldIndex.GrassDimmer:
                        this.GrassDimmer = ex;
                        break;
                    case HDRData_FieldIndex.TreeDimmer:
                        this.TreeDimmer = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                HDRData_FieldIndex enu = (HDRData_FieldIndex)index;
                switch (enu)
                {
                    case HDRData_FieldIndex.EyeAdaptSpeed:
                        this.EyeAdaptSpeed = (Exception?)obj;
                        break;
                    case HDRData_FieldIndex.BlurRadius:
                        this.BlurRadius = (Exception?)obj;
                        break;
                    case HDRData_FieldIndex.BlurPasses:
                        this.BlurPasses = (Exception?)obj;
                        break;
                    case HDRData_FieldIndex.EmissiveMult:
                        this.EmissiveMult = (Exception?)obj;
                        break;
                    case HDRData_FieldIndex.TargetLum:
                        this.TargetLum = (Exception?)obj;
                        break;
                    case HDRData_FieldIndex.UpperLumClamp:
                        this.UpperLumClamp = (Exception?)obj;
                        break;
                    case HDRData_FieldIndex.BrightScale:
                        this.BrightScale = (Exception?)obj;
                        break;
                    case HDRData_FieldIndex.BrightClamp:
                        this.BrightClamp = (Exception?)obj;
                        break;
                    case HDRData_FieldIndex.LumRampNoTex:
                        this.LumRampNoTex = (Exception?)obj;
                        break;
                    case HDRData_FieldIndex.LumRampMin:
                        this.LumRampMin = (Exception?)obj;
                        break;
                    case HDRData_FieldIndex.LumRampMax:
                        this.LumRampMax = (Exception?)obj;
                        break;
                    case HDRData_FieldIndex.SunlightDimmer:
                        this.SunlightDimmer = (Exception?)obj;
                        break;
                    case HDRData_FieldIndex.GrassDimmer:
                        this.GrassDimmer = (Exception?)obj;
                        break;
                    case HDRData_FieldIndex.TreeDimmer:
                        this.TreeDimmer = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (EyeAdaptSpeed != null) return true;
                if (BlurRadius != null) return true;
                if (BlurPasses != null) return true;
                if (EmissiveMult != null) return true;
                if (TargetLum != null) return true;
                if (UpperLumClamp != null) return true;
                if (BrightScale != null) return true;
                if (BrightClamp != null) return true;
                if (LumRampNoTex != null) return true;
                if (LumRampMin != null) return true;
                if (LumRampMax != null) return true;
                if (SunlightDimmer != null) return true;
                if (GrassDimmer != null) return true;
                if (TreeDimmer != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(EyeAdaptSpeed, "EyeAdaptSpeed");
                }
                {
                    sb.AppendItem(BlurRadius, "BlurRadius");
                }
                {
                    sb.AppendItem(BlurPasses, "BlurPasses");
                }
                {
                    sb.AppendItem(EmissiveMult, "EmissiveMult");
                }
                {
                    sb.AppendItem(TargetLum, "TargetLum");
                }
                {
                    sb.AppendItem(UpperLumClamp, "UpperLumClamp");
                }
                {
                    sb.AppendItem(BrightScale, "BrightScale");
                }
                {
                    sb.AppendItem(BrightClamp, "BrightClamp");
                }
                {
                    sb.AppendItem(LumRampNoTex, "LumRampNoTex");
                }
                {
                    sb.AppendItem(LumRampMin, "LumRampMin");
                }
                {
                    sb.AppendItem(LumRampMax, "LumRampMax");
                }
                {
                    sb.AppendItem(SunlightDimmer, "SunlightDimmer");
                }
                {
                    sb.AppendItem(GrassDimmer, "GrassDimmer");
                }
                {
                    sb.AppendItem(TreeDimmer, "TreeDimmer");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.EyeAdaptSpeed = this.EyeAdaptSpeed.Combine(rhs.EyeAdaptSpeed);
                ret.BlurRadius = this.BlurRadius.Combine(rhs.BlurRadius);
                ret.BlurPasses = this.BlurPasses.Combine(rhs.BlurPasses);
                ret.EmissiveMult = this.EmissiveMult.Combine(rhs.EmissiveMult);
                ret.TargetLum = this.TargetLum.Combine(rhs.TargetLum);
                ret.UpperLumClamp = this.UpperLumClamp.Combine(rhs.UpperLumClamp);
                ret.BrightScale = this.BrightScale.Combine(rhs.BrightScale);
                ret.BrightClamp = this.BrightClamp.Combine(rhs.BrightClamp);
                ret.LumRampNoTex = this.LumRampNoTex.Combine(rhs.LumRampNoTex);
                ret.LumRampMin = this.LumRampMin.Combine(rhs.LumRampMin);
                ret.LumRampMax = this.LumRampMax.Combine(rhs.LumRampMax);
                ret.SunlightDimmer = this.SunlightDimmer.Combine(rhs.SunlightDimmer);
                ret.GrassDimmer = this.GrassDimmer.Combine(rhs.GrassDimmer);
                ret.TreeDimmer = this.TreeDimmer.Combine(rhs.TreeDimmer);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool EyeAdaptSpeed;
            public bool BlurRadius;
            public bool BlurPasses;
            public bool EmissiveMult;
            public bool TargetLum;
            public bool UpperLumClamp;
            public bool BrightScale;
            public bool BrightClamp;
            public bool LumRampNoTex;
            public bool LumRampMin;
            public bool LumRampMax;
            public bool SunlightDimmer;
            public bool GrassDimmer;
            public bool TreeDimmer;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.EyeAdaptSpeed = defaultOn;
                this.BlurRadius = defaultOn;
                this.BlurPasses = defaultOn;
                this.EmissiveMult = defaultOn;
                this.TargetLum = defaultOn;
                this.UpperLumClamp = defaultOn;
                this.BrightScale = defaultOn;
                this.BrightClamp = defaultOn;
                this.LumRampNoTex = defaultOn;
                this.LumRampMin = defaultOn;
                this.LumRampMax = defaultOn;
                this.SunlightDimmer = defaultOn;
                this.GrassDimmer = defaultOn;
                this.TreeDimmer = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((EyeAdaptSpeed, null));
                ret.Add((BlurRadius, null));
                ret.Add((BlurPasses, null));
                ret.Add((EmissiveMult, null));
                ret.Add((TargetLum, null));
                ret.Add((UpperLumClamp, null));
                ret.Add((BrightScale, null));
                ret.Add((BrightClamp, null));
                ret.Add((LumRampNoTex, null));
                ret.Add((LumRampMin, null));
                ret.Add((LumRampMax, null));
                ret.Add((SunlightDimmer, null));
                ret.Add((GrassDimmer, null));
                ret.Add((TreeDimmer, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => HDRDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((HDRDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static HDRData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new HDRData();
            ((HDRDataSetterCommon)((IHDRDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out HDRData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((HDRDataSetterCommon)((IHDRDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static HDRData GetNew()
        {
            return new HDRData();
        }

    }
    #endregion

    #region Interface
    public partial interface IHDRData :
        IHDRDataGetter,
        ILoquiObjectSetter<IHDRData>
    {
        new Single EyeAdaptSpeed { get; set; }
        new Single BlurRadius { get; set; }
        new Single BlurPasses { get; set; }
        new Single EmissiveMult { get; set; }
        new Single TargetLum { get; set; }
        new Single UpperLumClamp { get; set; }
        new Single BrightScale { get; set; }
        new Single BrightClamp { get; set; }
        new Single LumRampNoTex { get; set; }
        new Single LumRampMin { get; set; }
        new Single LumRampMax { get; set; }
        new Single SunlightDimmer { get; set; }
        new Single GrassDimmer { get; set; }
        new Single TreeDimmer { get; set; }
    }

    public partial interface IHDRDataGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IHDRDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => HDRData_Registration.Instance;
        Single EyeAdaptSpeed { get; }
        Single BlurRadius { get; }
        Single BlurPasses { get; }
        Single EmissiveMult { get; }
        Single TargetLum { get; }
        Single UpperLumClamp { get; }
        Single BrightScale { get; }
        Single BrightClamp { get; }
        Single LumRampNoTex { get; }
        Single LumRampMin { get; }
        Single LumRampMax { get; }
        Single SunlightDimmer { get; }
        Single GrassDimmer { get; }
        Single TreeDimmer { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class HDRDataMixIn
    {
        public static void Clear(this IHDRData item)
        {
            ((HDRDataSetterCommon)((IHDRDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static HDRData.Mask<bool> GetEqualsMask(
            this IHDRDataGetter item,
            IHDRDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((HDRDataCommon)((IHDRDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IHDRDataGetter item,
            string? name = null,
            HDRData.Mask<bool>? printMask = null)
        {
            return ((HDRDataCommon)((IHDRDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IHDRDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            HDRData.Mask<bool>? printMask = null)
        {
            ((HDRDataCommon)((IHDRDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IHDRDataGetter item,
            IHDRDataGetter rhs,
            HDRData.TranslationMask? equalsMask = null)
        {
            return ((HDRDataCommon)((IHDRDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IHDRData lhs,
            IHDRDataGetter rhs)
        {
            ((HDRDataSetterTranslationCommon)((IHDRDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IHDRData lhs,
            IHDRDataGetter rhs,
            HDRData.TranslationMask? copyMask = null)
        {
            ((HDRDataSetterTranslationCommon)((IHDRDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IHDRData lhs,
            IHDRDataGetter rhs,
            out HDRData.ErrorMask errorMask,
            HDRData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((HDRDataSetterTranslationCommon)((IHDRDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = HDRData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IHDRData lhs,
            IHDRDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((HDRDataSetterTranslationCommon)((IHDRDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static HDRData DeepCopy(
            this IHDRDataGetter item,
            HDRData.TranslationMask? copyMask = null)
        {
            return ((HDRDataSetterTranslationCommon)((IHDRDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static HDRData DeepCopy(
            this IHDRDataGetter item,
            out HDRData.ErrorMask errorMask,
            HDRData.TranslationMask? copyMask = null)
        {
            return ((HDRDataSetterTranslationCommon)((IHDRDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static HDRData DeepCopy(
            this IHDRDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((HDRDataSetterTranslationCommon)((IHDRDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IHDRData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((HDRDataSetterCommon)((IHDRDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    #region Field Index
    internal enum HDRData_FieldIndex
    {
        EyeAdaptSpeed = 0,
        BlurRadius = 1,
        BlurPasses = 2,
        EmissiveMult = 3,
        TargetLum = 4,
        UpperLumClamp = 5,
        BrightScale = 6,
        BrightClamp = 7,
        LumRampNoTex = 8,
        LumRampMin = 9,
        LumRampMax = 10,
        SunlightDimmer = 11,
        GrassDimmer = 12,
        TreeDimmer = 13,
    }
    #endregion

    #region Registration
    internal partial class HDRData_Registration : ILoquiRegistration
    {
        public static readonly HDRData_Registration Instance = new HDRData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public const ushort AdditionalFieldCount = 14;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(HDRData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(HDRData.ErrorMask);

        public static readonly Type ClassType = typeof(HDRData);

        public static readonly Type GetterType = typeof(IHDRDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IHDRData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.HDRData";

        public const string Name = "HDRData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.HNAM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.HNAM);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(HDRDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class HDRDataSetterCommon
    {
        public static readonly HDRDataSetterCommon Instance = new HDRDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IHDRData item)
        {
            ClearPartial();
            item.EyeAdaptSpeed = default(Single);
            item.BlurRadius = default(Single);
            item.BlurPasses = default(Single);
            item.EmissiveMult = default(Single);
            item.TargetLum = default(Single);
            item.UpperLumClamp = default(Single);
            item.BrightScale = default(Single);
            item.BrightClamp = default(Single);
            item.LumRampNoTex = default(Single);
            item.LumRampMin = default(Single);
            item.LumRampMax = default(Single);
            item.SunlightDimmer = default(Single);
            item.GrassDimmer = default(Single);
            item.TreeDimmer = default(Single);
        }
        
        #region Mutagen
        public void RemapLinks(IHDRData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IHDRData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.HNAM),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: HDRDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class HDRDataCommon
    {
        public static readonly HDRDataCommon Instance = new HDRDataCommon();

        public HDRData.Mask<bool> GetEqualsMask(
            IHDRDataGetter item,
            IHDRDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new HDRData.Mask<bool>(false);
            ((HDRDataCommon)((IHDRDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IHDRDataGetter item,
            IHDRDataGetter rhs,
            HDRData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.EyeAdaptSpeed = item.EyeAdaptSpeed.EqualsWithin(rhs.EyeAdaptSpeed);
            ret.BlurRadius = item.BlurRadius.EqualsWithin(rhs.BlurRadius);
            ret.BlurPasses = item.BlurPasses.EqualsWithin(rhs.BlurPasses);
            ret.EmissiveMult = item.EmissiveMult.EqualsWithin(rhs.EmissiveMult);
            ret.TargetLum = item.TargetLum.EqualsWithin(rhs.TargetLum);
            ret.UpperLumClamp = item.UpperLumClamp.EqualsWithin(rhs.UpperLumClamp);
            ret.BrightScale = item.BrightScale.EqualsWithin(rhs.BrightScale);
            ret.BrightClamp = item.BrightClamp.EqualsWithin(rhs.BrightClamp);
            ret.LumRampNoTex = item.LumRampNoTex.EqualsWithin(rhs.LumRampNoTex);
            ret.LumRampMin = item.LumRampMin.EqualsWithin(rhs.LumRampMin);
            ret.LumRampMax = item.LumRampMax.EqualsWithin(rhs.LumRampMax);
            ret.SunlightDimmer = item.SunlightDimmer.EqualsWithin(rhs.SunlightDimmer);
            ret.GrassDimmer = item.GrassDimmer.EqualsWithin(rhs.GrassDimmer);
            ret.TreeDimmer = item.TreeDimmer.EqualsWithin(rhs.TreeDimmer);
        }
        
        public string Print(
            IHDRDataGetter item,
            string? name = null,
            HDRData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IHDRDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            HDRData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"HDRData =>");
            }
            else
            {
                sb.AppendLine($"{name} (HDRData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IHDRDataGetter item,
            StructuredStringBuilder sb,
            HDRData.Mask<bool>? printMask = null)
        {
            if (printMask?.EyeAdaptSpeed ?? true)
            {
                sb.AppendItem(item.EyeAdaptSpeed, "EyeAdaptSpeed");
            }
            if (printMask?.BlurRadius ?? true)
            {
                sb.AppendItem(item.BlurRadius, "BlurRadius");
            }
            if (printMask?.BlurPasses ?? true)
            {
                sb.AppendItem(item.BlurPasses, "BlurPasses");
            }
            if (printMask?.EmissiveMult ?? true)
            {
                sb.AppendItem(item.EmissiveMult, "EmissiveMult");
            }
            if (printMask?.TargetLum ?? true)
            {
                sb.AppendItem(item.TargetLum, "TargetLum");
            }
            if (printMask?.UpperLumClamp ?? true)
            {
                sb.AppendItem(item.UpperLumClamp, "UpperLumClamp");
            }
            if (printMask?.BrightScale ?? true)
            {
                sb.AppendItem(item.BrightScale, "BrightScale");
            }
            if (printMask?.BrightClamp ?? true)
            {
                sb.AppendItem(item.BrightClamp, "BrightClamp");
            }
            if (printMask?.LumRampNoTex ?? true)
            {
                sb.AppendItem(item.LumRampNoTex, "LumRampNoTex");
            }
            if (printMask?.LumRampMin ?? true)
            {
                sb.AppendItem(item.LumRampMin, "LumRampMin");
            }
            if (printMask?.LumRampMax ?? true)
            {
                sb.AppendItem(item.LumRampMax, "LumRampMax");
            }
            if (printMask?.SunlightDimmer ?? true)
            {
                sb.AppendItem(item.SunlightDimmer, "SunlightDimmer");
            }
            if (printMask?.GrassDimmer ?? true)
            {
                sb.AppendItem(item.GrassDimmer, "GrassDimmer");
            }
            if (printMask?.TreeDimmer ?? true)
            {
                sb.AppendItem(item.TreeDimmer, "TreeDimmer");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IHDRDataGetter? lhs,
            IHDRDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)HDRData_FieldIndex.EyeAdaptSpeed) ?? true))
            {
                if (!lhs.EyeAdaptSpeed.EqualsWithin(rhs.EyeAdaptSpeed)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HDRData_FieldIndex.BlurRadius) ?? true))
            {
                if (!lhs.BlurRadius.EqualsWithin(rhs.BlurRadius)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HDRData_FieldIndex.BlurPasses) ?? true))
            {
                if (!lhs.BlurPasses.EqualsWithin(rhs.BlurPasses)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HDRData_FieldIndex.EmissiveMult) ?? true))
            {
                if (!lhs.EmissiveMult.EqualsWithin(rhs.EmissiveMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HDRData_FieldIndex.TargetLum) ?? true))
            {
                if (!lhs.TargetLum.EqualsWithin(rhs.TargetLum)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HDRData_FieldIndex.UpperLumClamp) ?? true))
            {
                if (!lhs.UpperLumClamp.EqualsWithin(rhs.UpperLumClamp)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HDRData_FieldIndex.BrightScale) ?? true))
            {
                if (!lhs.BrightScale.EqualsWithin(rhs.BrightScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HDRData_FieldIndex.BrightClamp) ?? true))
            {
                if (!lhs.BrightClamp.EqualsWithin(rhs.BrightClamp)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HDRData_FieldIndex.LumRampNoTex) ?? true))
            {
                if (!lhs.LumRampNoTex.EqualsWithin(rhs.LumRampNoTex)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HDRData_FieldIndex.LumRampMin) ?? true))
            {
                if (!lhs.LumRampMin.EqualsWithin(rhs.LumRampMin)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HDRData_FieldIndex.LumRampMax) ?? true))
            {
                if (!lhs.LumRampMax.EqualsWithin(rhs.LumRampMax)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HDRData_FieldIndex.SunlightDimmer) ?? true))
            {
                if (!lhs.SunlightDimmer.EqualsWithin(rhs.SunlightDimmer)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HDRData_FieldIndex.GrassDimmer) ?? true))
            {
                if (!lhs.GrassDimmer.EqualsWithin(rhs.GrassDimmer)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HDRData_FieldIndex.TreeDimmer) ?? true))
            {
                if (!lhs.TreeDimmer.EqualsWithin(rhs.TreeDimmer)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IHDRDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.EyeAdaptSpeed);
            hash.Add(item.BlurRadius);
            hash.Add(item.BlurPasses);
            hash.Add(item.EmissiveMult);
            hash.Add(item.TargetLum);
            hash.Add(item.UpperLumClamp);
            hash.Add(item.BrightScale);
            hash.Add(item.BrightClamp);
            hash.Add(item.LumRampNoTex);
            hash.Add(item.LumRampMin);
            hash.Add(item.LumRampMax);
            hash.Add(item.SunlightDimmer);
            hash.Add(item.GrassDimmer);
            hash.Add(item.TreeDimmer);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return HDRData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IHDRDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class HDRDataSetterTranslationCommon
    {
        public static readonly HDRDataSetterTranslationCommon Instance = new HDRDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IHDRData item,
            IHDRDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)HDRData_FieldIndex.EyeAdaptSpeed) ?? true))
            {
                item.EyeAdaptSpeed = rhs.EyeAdaptSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)HDRData_FieldIndex.BlurRadius) ?? true))
            {
                item.BlurRadius = rhs.BlurRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)HDRData_FieldIndex.BlurPasses) ?? true))
            {
                item.BlurPasses = rhs.BlurPasses;
            }
            if ((copyMask?.GetShouldTranslate((int)HDRData_FieldIndex.EmissiveMult) ?? true))
            {
                item.EmissiveMult = rhs.EmissiveMult;
            }
            if ((copyMask?.GetShouldTranslate((int)HDRData_FieldIndex.TargetLum) ?? true))
            {
                item.TargetLum = rhs.TargetLum;
            }
            if ((copyMask?.GetShouldTranslate((int)HDRData_FieldIndex.UpperLumClamp) ?? true))
            {
                item.UpperLumClamp = rhs.UpperLumClamp;
            }
            if ((copyMask?.GetShouldTranslate((int)HDRData_FieldIndex.BrightScale) ?? true))
            {
                item.BrightScale = rhs.BrightScale;
            }
            if ((copyMask?.GetShouldTranslate((int)HDRData_FieldIndex.BrightClamp) ?? true))
            {
                item.BrightClamp = rhs.BrightClamp;
            }
            if ((copyMask?.GetShouldTranslate((int)HDRData_FieldIndex.LumRampNoTex) ?? true))
            {
                item.LumRampNoTex = rhs.LumRampNoTex;
            }
            if ((copyMask?.GetShouldTranslate((int)HDRData_FieldIndex.LumRampMin) ?? true))
            {
                item.LumRampMin = rhs.LumRampMin;
            }
            if ((copyMask?.GetShouldTranslate((int)HDRData_FieldIndex.LumRampMax) ?? true))
            {
                item.LumRampMax = rhs.LumRampMax;
            }
            if ((copyMask?.GetShouldTranslate((int)HDRData_FieldIndex.SunlightDimmer) ?? true))
            {
                item.SunlightDimmer = rhs.SunlightDimmer;
            }
            if ((copyMask?.GetShouldTranslate((int)HDRData_FieldIndex.GrassDimmer) ?? true))
            {
                item.GrassDimmer = rhs.GrassDimmer;
            }
            if ((copyMask?.GetShouldTranslate((int)HDRData_FieldIndex.TreeDimmer) ?? true))
            {
                item.TreeDimmer = rhs.TreeDimmer;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IHDRData item,
            IHDRDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public HDRData DeepCopy(
            IHDRDataGetter item,
            HDRData.TranslationMask? copyMask = null)
        {
            HDRData ret = (HDRData)((HDRDataCommon)((IHDRDataGetter)item).CommonInstance()!).GetNew();
            ((HDRDataSetterTranslationCommon)((IHDRDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public HDRData DeepCopy(
            IHDRDataGetter item,
            out HDRData.ErrorMask errorMask,
            HDRData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            HDRData ret = (HDRData)((HDRDataCommon)((IHDRDataGetter)item).CommonInstance()!).GetNew();
            ((HDRDataSetterTranslationCommon)((IHDRDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = HDRData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public HDRData DeepCopy(
            IHDRDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            HDRData ret = (HDRData)((HDRDataCommon)((IHDRDataGetter)item).CommonInstance()!).GetNew();
            ((HDRDataSetterTranslationCommon)((IHDRDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class HDRData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => HDRData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => HDRData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => HDRDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return HDRDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => HDRDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IHDRDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IHDRDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IHDRDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion
{
    public partial class HDRDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly HDRDataBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IHDRDataGetter item,
            MutagenWriter writer)
        {
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.EyeAdaptSpeed);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BlurRadius);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BlurPasses);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.EmissiveMult);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TargetLum);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.UpperLumClamp);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BrightScale);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BrightClamp);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.LumRampNoTex);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.LumRampMin);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.LumRampMax);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SunlightDimmer);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.GrassDimmer);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TreeDimmer);
        }

        public void Write(
            MutagenWriter writer,
            IHDRDataGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.HNAM),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IHDRDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class HDRDataBinaryCreateTranslation
    {
        public static readonly HDRDataBinaryCreateTranslation Instance = new HDRDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IHDRData item,
            MutagenFrame frame)
        {
            item.EyeAdaptSpeed = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.BlurRadius = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.BlurPasses = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.EmissiveMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.TargetLum = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.UpperLumClamp = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.BrightScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.BrightClamp = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.LumRampNoTex = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.LumRampMin = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.LumRampMax = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.SunlightDimmer = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.GrassDimmer = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.TreeDimmer = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class HDRDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IHDRDataGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((HDRDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion
{
    internal partial class HDRDataBinaryOverlay :
        PluginBinaryOverlay,
        IHDRDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => HDRData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => HDRData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => HDRDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => HDRDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IHDRDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IHDRDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IHDRDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => HDRDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((HDRDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Single EyeAdaptSpeed => _structData.Slice(0x0, 0x4).Float();
        public Single BlurRadius => _structData.Slice(0x4, 0x4).Float();
        public Single BlurPasses => _structData.Slice(0x8, 0x4).Float();
        public Single EmissiveMult => _structData.Slice(0xC, 0x4).Float();
        public Single TargetLum => _structData.Slice(0x10, 0x4).Float();
        public Single UpperLumClamp => _structData.Slice(0x14, 0x4).Float();
        public Single BrightScale => _structData.Slice(0x18, 0x4).Float();
        public Single BrightClamp => _structData.Slice(0x1C, 0x4).Float();
        public Single LumRampNoTex => _structData.Slice(0x20, 0x4).Float();
        public Single LumRampMin => _structData.Slice(0x24, 0x4).Float();
        public Single LumRampMax => _structData.Slice(0x28, 0x4).Float();
        public Single SunlightDimmer => _structData.Slice(0x2C, 0x4).Float();
        public Single GrassDimmer => _structData.Slice(0x30, 0x4).Float();
        public Single TreeDimmer => _structData.Slice(0x34, 0x4).Float();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected HDRDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IHDRDataGetter HDRDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x38,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new HDRDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x38 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IHDRDataGetter HDRDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return HDRDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            HDRDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IHDRDataGetter rhs) return false;
            return ((HDRDataCommon)((IHDRDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IHDRDataGetter? obj)
        {
            return ((HDRDataCommon)((IHDRDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((HDRDataCommon)((IHDRDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

