/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LogEntry :
        IEquatable<ILogEntryGetter>,
        ILogEntry,
        ILoquiObjectSetter<LogEntry>
    {
        #region Ctor
        public LogEntry()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Flags
        public LogEntry.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        LogEntry.Flag? ILogEntryGetter.Flags => this.Flags;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            init => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> ILogEntryGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region Entry
        public String? Entry { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ILogEntryGetter.Entry => this.Entry;
        #endregion
        #region ResultScript
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ScriptFields? _ResultScript;
        public ScriptFields? ResultScript
        {
            get => _ResultScript;
            set => _ResultScript = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IScriptFieldsGetter? ILogEntryGetter.ResultScript => this.ResultScript;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LogEntryMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ILogEntryGetter rhs) return false;
            return ((LogEntryCommon)((ILogEntryGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(ILogEntryGetter? obj)
        {
            return ((LogEntryCommon)((ILogEntryGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((LogEntryCommon)((ILogEntryGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Flags = initialValue;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Entry = initialValue;
                this.ResultScript = new MaskItem<TItem, ScriptFields.Mask<TItem>?>(initialValue, new ScriptFields.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Flags,
                TItem Conditions,
                TItem Entry,
                TItem ResultScript)
            {
                this.Flags = Flags;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Entry = Entry;
                this.ResultScript = new MaskItem<TItem, ScriptFields.Mask<TItem>?>(ResultScript, new ScriptFields.Mask<TItem>(ResultScript));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Flags;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public TItem Entry;
            public MaskItem<TItem, ScriptFields.Mask<TItem>?>? ResultScript { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.Entry, rhs.Entry)) return false;
                if (!object.Equals(this.ResultScript, rhs.ResultScript)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Flags);
                hash.Add(this.Conditions);
                hash.Add(this.Entry);
                hash.Add(this.ResultScript);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Flags)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Entry)) return false;
                if (ResultScript != null)
                {
                    if (!eval(this.ResultScript.Overall)) return false;
                    if (this.ResultScript.Specific != null && !this.ResultScript.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Flags)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Entry)) return true;
                if (ResultScript != null)
                {
                    if (eval(this.ResultScript.Overall)) return true;
                    if (this.ResultScript.Specific != null && this.ResultScript.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new LogEntry.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Flags = eval(this.Flags);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Entry = eval(this.Entry);
                obj.ResultScript = this.ResultScript == null ? null : new MaskItem<R, ScriptFields.Mask<R>?>(eval(this.ResultScript.Overall), this.ResultScript.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(LogEntry.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, LogEntry.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(LogEntry.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Entry ?? true)
                    {
                        fg.AppendItem(Entry, "Entry");
                    }
                    if (printMask?.ResultScript?.Overall ?? true)
                    {
                        ResultScript?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Flags;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public Exception? Entry;
            public MaskItem<Exception?, ScriptFields.ErrorMask?>? ResultScript;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
                switch (enu)
                {
                    case LogEntry_FieldIndex.Flags:
                        return Flags;
                    case LogEntry_FieldIndex.Conditions:
                        return Conditions;
                    case LogEntry_FieldIndex.Entry:
                        return Entry;
                    case LogEntry_FieldIndex.ResultScript:
                        return ResultScript;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
                switch (enu)
                {
                    case LogEntry_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case LogEntry_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case LogEntry_FieldIndex.Entry:
                        this.Entry = ex;
                        break;
                    case LogEntry_FieldIndex.ResultScript:
                        this.ResultScript = new MaskItem<Exception?, ScriptFields.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
                switch (enu)
                {
                    case LogEntry_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case LogEntry_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case LogEntry_FieldIndex.Entry:
                        this.Entry = (Exception?)obj;
                        break;
                    case LogEntry_FieldIndex.ResultScript:
                        this.ResultScript = (MaskItem<Exception?, ScriptFields.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Flags != null) return true;
                if (Conditions != null) return true;
                if (Entry != null) return true;
                if (ResultScript != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Flags, "Flags");
                if (Conditions is {} ConditionsItem)
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Entry, "Entry");
                ResultScript?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.Entry = this.Entry.Combine(rhs.Entry);
                ret.ResultScript = this.ResultScript.Combine(rhs.ResultScript, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Flags;
            public Condition.TranslationMask? Conditions;
            public bool Entry;
            public ScriptFields.TranslationMask? ResultScript;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Flags = defaultOn;
                this.Entry = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Flags, null));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((Entry, null));
                ret.Add((ResultScript != null ? ResultScript.OnOverall : DefaultOn, ResultScript?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> ContainedFormLinks => LogEntryCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LogEntrySetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LogEntryBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((LogEntryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static LogEntry CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new LogEntry();
            ((LogEntrySetterCommon)((ILogEntryGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out LogEntry item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((LogEntrySetterCommon)((ILogEntryGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static LogEntry GetNew()
        {
            return new LogEntry();
        }

    }
    #endregion

    #region Interface
    public partial interface ILogEntry :
        IFormLinkContainer,
        ILogEntryGetter,
        ILoquiObjectSetter<ILogEntry>
    {
        new LogEntry.Flag? Flags { get; set; }
        new ExtendedList<Condition> Conditions { get; }
        new String? Entry { get; set; }
        new ScriptFields? ResultScript { get; set; }
    }

    public partial interface ILogEntryGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ILogEntryGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => LogEntry_Registration.Instance;
        LogEntry.Flag? Flags { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        String? Entry { get; }
        IScriptFieldsGetter? ResultScript { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class LogEntryMixIn
    {
        public static void Clear(this ILogEntry item)
        {
            ((LogEntrySetterCommon)((ILogEntryGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static LogEntry.Mask<bool> GetEqualsMask(
            this ILogEntryGetter item,
            ILogEntryGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LogEntryCommon)((ILogEntryGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILogEntryGetter item,
            string? name = null,
            LogEntry.Mask<bool>? printMask = null)
        {
            return ((LogEntryCommon)((ILogEntryGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILogEntryGetter item,
            FileGeneration fg,
            string? name = null,
            LogEntry.Mask<bool>? printMask = null)
        {
            ((LogEntryCommon)((ILogEntryGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ILogEntryGetter item,
            ILogEntryGetter rhs,
            LogEntry.TranslationMask? equalsMask = null)
        {
            return ((LogEntryCommon)((ILogEntryGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ILogEntry lhs,
            ILogEntryGetter rhs)
        {
            ((LogEntrySetterTranslationCommon)((ILogEntryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ILogEntry lhs,
            ILogEntryGetter rhs,
            LogEntry.TranslationMask? copyMask = null)
        {
            ((LogEntrySetterTranslationCommon)((ILogEntryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ILogEntry lhs,
            ILogEntryGetter rhs,
            out LogEntry.ErrorMask errorMask,
            LogEntry.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LogEntrySetterTranslationCommon)((ILogEntryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = LogEntry.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILogEntry lhs,
            ILogEntryGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LogEntrySetterTranslationCommon)((ILogEntryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static LogEntry DeepCopy(
            this ILogEntryGetter item,
            LogEntry.TranslationMask? copyMask = null)
        {
            return ((LogEntrySetterTranslationCommon)((ILogEntryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LogEntry DeepCopy(
            this ILogEntryGetter item,
            out LogEntry.ErrorMask errorMask,
            LogEntry.TranslationMask? copyMask = null)
        {
            return ((LogEntrySetterTranslationCommon)((ILogEntryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LogEntry DeepCopy(
            this ILogEntryGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LogEntrySetterTranslationCommon)((ILogEntryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ILogEntry item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((LogEntrySetterCommon)((ILogEntryGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum LogEntry_FieldIndex
    {
        Flags = 0,
        Conditions = 1,
        Entry = 2,
        ResultScript = 3,
    }
    #endregion

    #region Registration
    public partial class LogEntry_Registration : ILoquiRegistration
    {
        public static readonly LogEntry_Registration Instance = new LogEntry_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 153,
            version: 0);

        public const string GUID = "c5072833-ef3f-418b-b86d-452f4bbd7617";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(LogEntry.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LogEntry.ErrorMask);

        public static readonly Type ClassType = typeof(LogEntry);

        public static readonly Type GetterType = typeof(ILogEntryGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILogEntry);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.LogEntry";

        public const string Name = "LogEntry";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RecordTypes.QSDT,
                        RecordTypes.CTDA,
                        RecordTypes.CTDT,
                        RecordTypes.CNAM,
                        RecordTypes.SCHD,
                        RecordTypes.SCHR
                    })
            );
        });
        public static readonly Type BinaryWriteTranslation = typeof(LogEntryBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class LogEntrySetterCommon
    {
        public static readonly LogEntrySetterCommon Instance = new LogEntrySetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILogEntry item)
        {
            ClearPartial();
            item.Flags = default;
            item.Conditions.Clear();
            item.Entry = default;
            item.ResultScript = null;
        }
        
        #region Mutagen
        public void RemapLinks(ILogEntry obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.ResultScript?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILogEntry item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: LogEntryBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: LogEntryBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class LogEntryCommon
    {
        public static readonly LogEntryCommon Instance = new LogEntryCommon();

        public LogEntry.Mask<bool> GetEqualsMask(
            ILogEntryGetter item,
            ILogEntryGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LogEntry.Mask<bool>(false);
            ((LogEntryCommon)((ILogEntryGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILogEntryGetter item,
            ILogEntryGetter rhs,
            LogEntry.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Entry = string.Equals(item.Entry, rhs.Entry);
            ret.ResultScript = EqualsMaskHelper.EqualsHelper(
                item.ResultScript,
                rhs.ResultScript,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string ToString(
            ILogEntryGetter item,
            string? name = null,
            LogEntry.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILogEntryGetter item,
            FileGeneration fg,
            string? name = null,
            LogEntry.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"LogEntry =>");
            }
            else
            {
                fg.AppendLine($"{name} (LogEntry) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILogEntryGetter item,
            FileGeneration fg,
            LogEntry.Mask<bool>? printMask = null)
        {
            if ((printMask?.Flags ?? true)
                && item.Flags is {} FlagsItem)
            {
                fg.AppendItem(FlagsItem, "Flags");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Conditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Entry ?? true)
                && item.Entry is {} EntryItem)
            {
                fg.AppendItem(EntryItem, "Entry");
            }
            if ((printMask?.ResultScript?.Overall ?? true)
                && item.ResultScript is {} ResultScriptItem)
            {
                ResultScriptItem?.ToString(fg, "ResultScript");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILogEntryGetter? lhs,
            ILogEntryGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)LogEntry_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((crystal?.GetShouldTranslate((int)LogEntry_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqualNullable(rhs.Conditions)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)LogEntry_FieldIndex.Entry) ?? true))
            {
                if (!string.Equals(lhs.Entry, rhs.Entry)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)LogEntry_FieldIndex.ResultScript) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ResultScript, rhs.ResultScript, out var lhsResultScript, out var rhsResultScript, out var isResultScriptEqual))
                {
                    if (!((ScriptFieldsCommon)((IScriptFieldsGetter)lhsResultScript).CommonInstance()!).Equals(lhsResultScript, rhsResultScript, crystal?.GetSubCrystal((int)LogEntry_FieldIndex.ResultScript))) return false;
                }
                else if (!isResultScriptEqual) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ILogEntryGetter item)
        {
            var hash = new HashCode();
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            hash.Add(item.Conditions);
            if (item.Entry is {} Entryitem)
            {
                hash.Add(Entryitem);
            }
            if (item.ResultScript is {} ResultScriptitem)
            {
                hash.Add(ResultScriptitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return LogEntry.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(ILogEntryGetter obj)
        {
            if (obj.ResultScript is IFormLinkContainerGetter ResultScriptlinkCont)
            {
                foreach (var item in ResultScriptlinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class LogEntrySetterTranslationCommon
    {
        public static readonly LogEntrySetterTranslationCommon Instance = new LogEntrySetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ILogEntry item,
            ILogEntryGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)LogEntry_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)LogEntry_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)LogEntry_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LogEntry_FieldIndex.Entry) ?? true))
            {
                item.Entry = rhs.Entry;
            }
            if ((copyMask?.GetShouldTranslate((int)LogEntry_FieldIndex.ResultScript) ?? true))
            {
                errorMask?.PushIndex((int)LogEntry_FieldIndex.ResultScript);
                try
                {
                    if(rhs.ResultScript is {} rhsResultScript)
                    {
                        item.ResultScript = rhsResultScript.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)LogEntry_FieldIndex.ResultScript));
                    }
                    else
                    {
                        item.ResultScript = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public LogEntry DeepCopy(
            ILogEntryGetter item,
            LogEntry.TranslationMask? copyMask = null)
        {
            LogEntry ret = (LogEntry)((LogEntryCommon)((ILogEntryGetter)item).CommonInstance()!).GetNew();
            ((LogEntrySetterTranslationCommon)((ILogEntryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public LogEntry DeepCopy(
            ILogEntryGetter item,
            out LogEntry.ErrorMask errorMask,
            LogEntry.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LogEntry ret = (LogEntry)((LogEntryCommon)((ILogEntryGetter)item).CommonInstance()!).GetNew();
            ((LogEntrySetterTranslationCommon)((ILogEntryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = LogEntry.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public LogEntry DeepCopy(
            ILogEntryGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            LogEntry ret = (LogEntry)((LogEntryCommon)((ILogEntryGetter)item).CommonInstance()!).GetNew();
            ((LogEntrySetterTranslationCommon)((ILogEntryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class LogEntry
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LogEntry_Registration.Instance;
        public static LogEntry_Registration StaticRegistration => LogEntry_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LogEntryCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return LogEntrySetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LogEntrySetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILogEntryGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ILogEntryGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ILogEntryGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LogEntryBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static LogEntryBinaryWriteTranslation Instance = new LogEntryBinaryWriteTranslation();

        public static void WriteRecordTypes(
            ILogEntryGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            EnumBinaryTranslation<LogEntry.Flag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 1,
                header: translationParams.ConvertToCustom(RecordTypes.QSDT));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams? conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Entry,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM),
                binaryType: StringBinaryType.NullTerminate);
            if (item.ResultScript is {} ResultScriptItem)
            {
                ((ScriptFieldsBinaryWriteTranslation)((IBinaryItem)ResultScriptItem).BinaryWriteTranslator).Write(
                    item: ResultScriptItem,
                    writer: writer,
                    translationParams: translationParams);
            }
        }

        public void Write(
            MutagenWriter writer,
            ILogEntryGetter item,
            TypedWriteParams? translationParams = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (ILogEntryGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class LogEntryBinaryCreateTranslation
    {
        public readonly static LogEntryBinaryCreateTranslation Instance = new LogEntryBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ILogEntry item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            ILogEntry item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.QSDT:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)LogEntry_FieldIndex.Flags) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<LogEntry.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)LogEntry_FieldIndex.Flags;
                }
                case RecordTypeInts.CTDA:
                case RecordTypeInts.CTDT:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)LogEntry_FieldIndex.Conditions) return ParseResult.Stop;
                    item.Conditions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Condition_Registration.TriggeringRecordTypes,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary));
                    return (int)LogEntry_FieldIndex.Conditions;
                }
                case RecordTypeInts.CNAM:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)LogEntry_FieldIndex.Entry) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Entry = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)LogEntry_FieldIndex.Entry;
                }
                case RecordTypeInts.SCHD:
                case RecordTypeInts.SCHR:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)LogEntry_FieldIndex.ResultScript) return ParseResult.Stop;
                    item.ResultScript = Mutagen.Bethesda.Oblivion.ScriptFields.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams);
                    return (int)LogEntry_FieldIndex.ResultScript;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class LogEntryBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ILogEntryGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((LogEntryBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LogEntryBinaryOverlay :
        PluginBinaryOverlay,
        ILogEntryGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LogEntry_Registration.Instance;
        public static LogEntry_Registration StaticRegistration => LogEntry_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LogEntryCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LogEntrySetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILogEntryGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ILogEntryGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ILogEntryGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public IEnumerable<IFormLinkGetter> ContainedFormLinks => LogEntryCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LogEntryBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((LogEntryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Flags
        private int? _FlagsLocation;
        public LogEntry.Flag? Flags => _FlagsLocation.HasValue ? (LogEntry.Flag)HeaderTranslation.ExtractSubrecordMemory(_data, _FlagsLocation!.Value, _package.MetaData.Constants)[0] : default(LogEntry.Flag?);
        #endregion
        public IReadOnlyList<IConditionGetter> Conditions { get; private set; } = ListExt.Empty<ConditionBinaryOverlay>();
        #region Entry
        private int? _EntryLocation;
        public String? Entry => _EntryLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _EntryLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        public IScriptFieldsGetter? ResultScript { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected LogEntryBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static LogEntryBinaryOverlay LogEntryFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new LogEntryBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static LogEntryBinaryOverlay LogEntryFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return LogEntryFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.QSDT:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)LogEntry_FieldIndex.Flags) return ParseResult.Stop;
                    _FlagsLocation = (stream.Position - offset);
                    return (int)LogEntry_FieldIndex.Flags;
                }
                case RecordTypeInts.CTDA:
                case RecordTypeInts.CTDT:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)LogEntry_FieldIndex.Conditions) return ParseResult.Stop;
                    this.Conditions = BinaryOverlayList.FactoryByArray<ConditionBinaryOverlay>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        parseParams: parseParams,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: type,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)LogEntry_FieldIndex.Conditions;
                }
                case RecordTypeInts.CNAM:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)LogEntry_FieldIndex.Entry) return ParseResult.Stop;
                    _EntryLocation = (stream.Position - offset);
                    return (int)LogEntry_FieldIndex.Entry;
                }
                case RecordTypeInts.SCHD:
                case RecordTypeInts.SCHR:
                {
                    if (lastParsed.ParsedIndex.HasValue && lastParsed.ParsedIndex.Value >= (int)LogEntry_FieldIndex.ResultScript) return ParseResult.Stop;
                    this.ResultScript = ScriptFieldsBinaryOverlay.ScriptFieldsFactory(
                        stream: stream,
                        package: _package,
                        parseParams: parseParams);
                    return (int)LogEntry_FieldIndex.ResultScript;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LogEntryMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ILogEntryGetter rhs) return false;
            return ((LogEntryCommon)((ILogEntryGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(ILogEntryGetter? obj)
        {
            return ((LogEntryCommon)((ILogEntryGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((LogEntryCommon)((ILogEntryGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

