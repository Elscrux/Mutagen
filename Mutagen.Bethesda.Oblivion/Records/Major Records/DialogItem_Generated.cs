/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.RecordTypeMapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class DialogItem :
        OblivionMajorRecord,
        IDialogItemInternal,
        IEquatable<IDialogItemGetter>,
        ILoquiObjectSetter<DialogItem>
    {
        #region Ctor
        protected DialogItem()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DialogItemData? _Data;
        public DialogItemData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDialogItemDataGetter? IDialogItemGetter.Data => this.Data;
        #endregion
        #region Quest
        private readonly IFormLinkNullable<IQuestGetter> _Quest = new FormLinkNullable<IQuestGetter>();
        public IFormLinkNullable<IQuestGetter> Quest
        {
            get => _Quest;
            set => _Quest.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IQuestGetter> IDialogItemGetter.Quest => this.Quest;
        #endregion
        #region PreviousTopic
        private readonly IFormLinkNullable<IDialogItemGetter> _PreviousTopic = new FormLinkNullable<IDialogItemGetter>();
        public IFormLinkNullable<IDialogItemGetter> PreviousTopic
        {
            get => _PreviousTopic;
            set => _PreviousTopic.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IDialogItemGetter> IDialogItemGetter.PreviousTopic => this.PreviousTopic;
        #endregion
        #region Topics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IDialogTopicGetter>> _Topics = new ExtendedList<IFormLinkGetter<IDialogTopicGetter>>();
        public ExtendedList<IFormLinkGetter<IDialogTopicGetter>> Topics
        {
            get => this._Topics;
            init => this._Topics = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IDialogTopicGetter>> IDialogItemGetter.Topics => _Topics;
        #endregion

        #endregion
        #region Responses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<DialogResponse> _Responses = new ExtendedList<DialogResponse>();
        public ExtendedList<DialogResponse> Responses
        {
            get => this._Responses;
            init => this._Responses = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IDialogResponseGetter> IDialogItemGetter.Responses => _Responses;
        #endregion

        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            init => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IDialogItemGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region Choices
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IDialogTopicGetter>> _Choices = new ExtendedList<IFormLinkGetter<IDialogTopicGetter>>();
        public ExtendedList<IFormLinkGetter<IDialogTopicGetter>> Choices
        {
            get => this._Choices;
            init => this._Choices = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IDialogTopicGetter>> IDialogItemGetter.Choices => _Choices;
        #endregion

        #endregion
        #region LinkFrom
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IDialogTopicGetter>> _LinkFrom = new ExtendedList<IFormLinkGetter<IDialogTopicGetter>>();
        public ExtendedList<IFormLinkGetter<IDialogTopicGetter>> LinkFrom
        {
            get => this._LinkFrom;
            init => this._LinkFrom = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IDialogTopicGetter>> IDialogItemGetter.LinkFrom => _LinkFrom;
        #endregion

        #endregion
        #region Script
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly ScriptFields _Script_Object = new ScriptFields();
        public ScriptFields Script => _Script_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IScriptFieldsGetter IDialogItemGetter.Script => _Script_Object;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DialogItemMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Data = new MaskItem<TItem, DialogItemData.Mask<TItem>?>(initialValue, new DialogItemData.Mask<TItem>(initialValue));
                this.Quest = initialValue;
                this.PreviousTopic = initialValue;
                this.Topics = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Responses = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>());
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Choices = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.LinkFrom = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Script = new MaskItem<TItem, ScriptFields.Mask<TItem>?>(initialValue, new ScriptFields.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Data,
                TItem Quest,
                TItem PreviousTopic,
                TItem Topics,
                TItem Responses,
                TItem Conditions,
                TItem Choices,
                TItem LinkFrom,
                TItem Script)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Data = new MaskItem<TItem, DialogItemData.Mask<TItem>?>(Data, new DialogItemData.Mask<TItem>(Data));
                this.Quest = Quest;
                this.PreviousTopic = PreviousTopic;
                this.Topics = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Topics, Enumerable.Empty<(int Index, TItem Value)>());
                this.Responses = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>?>(Responses, Enumerable.Empty<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>());
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Choices = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Choices, Enumerable.Empty<(int Index, TItem Value)>());
                this.LinkFrom = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(LinkFrom, Enumerable.Empty<(int Index, TItem Value)>());
                this.Script = new MaskItem<TItem, ScriptFields.Mask<TItem>?>(Script, new ScriptFields.Mask<TItem>(Script));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, DialogItemData.Mask<TItem>?>? Data { get; set; }
            public TItem Quest;
            public TItem PreviousTopic;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Topics;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>?>? Responses;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Choices;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? LinkFrom;
            public MaskItem<TItem, ScriptFields.Mask<TItem>?>? Script { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.Quest, rhs.Quest)) return false;
                if (!object.Equals(this.PreviousTopic, rhs.PreviousTopic)) return false;
                if (!object.Equals(this.Topics, rhs.Topics)) return false;
                if (!object.Equals(this.Responses, rhs.Responses)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.Choices, rhs.Choices)) return false;
                if (!object.Equals(this.LinkFrom, rhs.LinkFrom)) return false;
                if (!object.Equals(this.Script, rhs.Script)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Data);
                hash.Add(this.Quest);
                hash.Add(this.PreviousTopic);
                hash.Add(this.Topics);
                hash.Add(this.Responses);
                hash.Add(this.Conditions);
                hash.Add(this.Choices);
                hash.Add(this.LinkFrom);
                hash.Add(this.Script);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                if (!eval(this.Quest)) return false;
                if (!eval(this.PreviousTopic)) return false;
                if (this.Topics != null)
                {
                    if (!eval(this.Topics.Overall)) return false;
                    if (this.Topics.Specific != null)
                    {
                        foreach (var item in this.Topics.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Responses != null)
                {
                    if (!eval(this.Responses.Overall)) return false;
                    if (this.Responses.Specific != null)
                    {
                        foreach (var item in this.Responses.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Choices != null)
                {
                    if (!eval(this.Choices.Overall)) return false;
                    if (this.Choices.Specific != null)
                    {
                        foreach (var item in this.Choices.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.LinkFrom != null)
                {
                    if (!eval(this.LinkFrom.Overall)) return false;
                    if (this.LinkFrom.Specific != null)
                    {
                        foreach (var item in this.LinkFrom.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Script != null)
                {
                    if (!eval(this.Script.Overall)) return false;
                    if (this.Script.Specific != null && !this.Script.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                if (eval(this.Quest)) return true;
                if (eval(this.PreviousTopic)) return true;
                if (this.Topics != null)
                {
                    if (eval(this.Topics.Overall)) return true;
                    if (this.Topics.Specific != null)
                    {
                        foreach (var item in this.Topics.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Responses != null)
                {
                    if (eval(this.Responses.Overall)) return true;
                    if (this.Responses.Specific != null)
                    {
                        foreach (var item in this.Responses.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Choices != null)
                {
                    if (eval(this.Choices.Overall)) return true;
                    if (this.Choices.Specific != null)
                    {
                        foreach (var item in this.Choices.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.LinkFrom != null)
                {
                    if (eval(this.LinkFrom.Overall)) return true;
                    if (this.LinkFrom.Specific != null)
                    {
                        foreach (var item in this.LinkFrom.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Script != null)
                {
                    if (eval(this.Script.Overall)) return true;
                    if (this.Script.Specific != null && this.Script.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DialogItem.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Data = this.Data == null ? null : new MaskItem<R, DialogItemData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
                obj.Quest = eval(this.Quest);
                obj.PreviousTopic = eval(this.PreviousTopic);
                if (Topics != null)
                {
                    obj.Topics = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Topics.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Topics.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Topics.Specific = l;
                        foreach (var item in Topics.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Responses != null)
                {
                    obj.Responses = new MaskItem<R, IEnumerable<MaskItemIndexed<R, DialogResponse.Mask<R>?>>?>(eval(this.Responses.Overall), Enumerable.Empty<MaskItemIndexed<R, DialogResponse.Mask<R>?>>());
                    if (Responses.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, DialogResponse.Mask<R>?>>();
                        obj.Responses.Specific = l;
                        foreach (var item in Responses.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, DialogResponse.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, DialogResponse.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Choices != null)
                {
                    obj.Choices = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Choices.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Choices.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Choices.Specific = l;
                        foreach (var item in Choices.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (LinkFrom != null)
                {
                    obj.LinkFrom = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.LinkFrom.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (LinkFrom.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.LinkFrom.Specific = l;
                        foreach (var item in LinkFrom.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Script = this.Script == null ? null : new MaskItem<R, ScriptFields.Mask<R>?>(eval(this.Script.Overall), this.Script.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(DialogItem.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, DialogItem.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(DialogItem.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.ToString(fg);
                    }
                    if (printMask?.Quest ?? true)
                    {
                        fg.AppendItem(Quest, "Quest");
                    }
                    if (printMask?.PreviousTopic ?? true)
                    {
                        fg.AppendItem(PreviousTopic, "PreviousTopic");
                    }
                    if ((printMask?.Topics?.Overall ?? true)
                        && Topics is {} TopicsItem)
                    {
                        fg.AppendLine("Topics =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(TopicsItem.Overall);
                            if (TopicsItem.Specific != null)
                            {
                                foreach (var subItem in TopicsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Responses?.Overall ?? true)
                        && Responses is {} ResponsesItem)
                    {
                        fg.AppendLine("Responses =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ResponsesItem.Overall);
                            if (ResponsesItem.Specific != null)
                            {
                                foreach (var subItem in ResponsesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Choices?.Overall ?? true)
                        && Choices is {} ChoicesItem)
                    {
                        fg.AppendLine("Choices =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ChoicesItem.Overall);
                            if (ChoicesItem.Specific != null)
                            {
                                foreach (var subItem in ChoicesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.LinkFrom?.Overall ?? true)
                        && LinkFrom is {} LinkFromItem)
                    {
                        fg.AppendLine("LinkFrom =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(LinkFromItem.Overall);
                            if (LinkFromItem.Specific != null)
                            {
                                foreach (var subItem in LinkFromItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Script?.Overall ?? true)
                    {
                        Script?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, DialogItemData.ErrorMask?>? Data;
            public Exception? Quest;
            public Exception? PreviousTopic;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Topics;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponse.ErrorMask?>>?>? Responses;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Choices;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? LinkFrom;
            public MaskItem<Exception?, ScriptFields.ErrorMask?>? Script;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
                switch (enu)
                {
                    case DialogItem_FieldIndex.Data:
                        return Data;
                    case DialogItem_FieldIndex.Quest:
                        return Quest;
                    case DialogItem_FieldIndex.PreviousTopic:
                        return PreviousTopic;
                    case DialogItem_FieldIndex.Topics:
                        return Topics;
                    case DialogItem_FieldIndex.Responses:
                        return Responses;
                    case DialogItem_FieldIndex.Conditions:
                        return Conditions;
                    case DialogItem_FieldIndex.Choices:
                        return Choices;
                    case DialogItem_FieldIndex.LinkFrom:
                        return LinkFrom;
                    case DialogItem_FieldIndex.Script:
                        return Script;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
                switch (enu)
                {
                    case DialogItem_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, DialogItemData.ErrorMask?>(ex, null);
                        break;
                    case DialogItem_FieldIndex.Quest:
                        this.Quest = ex;
                        break;
                    case DialogItem_FieldIndex.PreviousTopic:
                        this.PreviousTopic = ex;
                        break;
                    case DialogItem_FieldIndex.Topics:
                        this.Topics = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case DialogItem_FieldIndex.Responses:
                        this.Responses = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponse.ErrorMask?>>?>(ex, null);
                        break;
                    case DialogItem_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case DialogItem_FieldIndex.Choices:
                        this.Choices = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case DialogItem_FieldIndex.LinkFrom:
                        this.LinkFrom = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case DialogItem_FieldIndex.Script:
                        this.Script = new MaskItem<Exception?, ScriptFields.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
                switch (enu)
                {
                    case DialogItem_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, DialogItemData.ErrorMask?>?)obj;
                        break;
                    case DialogItem_FieldIndex.Quest:
                        this.Quest = (Exception?)obj;
                        break;
                    case DialogItem_FieldIndex.PreviousTopic:
                        this.PreviousTopic = (Exception?)obj;
                        break;
                    case DialogItem_FieldIndex.Topics:
                        this.Topics = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case DialogItem_FieldIndex.Responses:
                        this.Responses = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponse.ErrorMask?>>?>)obj;
                        break;
                    case DialogItem_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case DialogItem_FieldIndex.Choices:
                        this.Choices = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case DialogItem_FieldIndex.LinkFrom:
                        this.LinkFrom = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case DialogItem_FieldIndex.Script:
                        this.Script = (MaskItem<Exception?, ScriptFields.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Data != null) return true;
                if (Quest != null) return true;
                if (PreviousTopic != null) return true;
                if (Topics != null) return true;
                if (Responses != null) return true;
                if (Conditions != null) return true;
                if (Choices != null) return true;
                if (LinkFrom != null) return true;
                if (Script != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                Data?.ToString(fg);
                fg.AppendItem(Quest, "Quest");
                fg.AppendItem(PreviousTopic, "PreviousTopic");
                if (Topics is {} TopicsItem)
                {
                    fg.AppendLine("Topics =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(TopicsItem.Overall);
                        if (TopicsItem.Specific != null)
                        {
                            foreach (var subItem in TopicsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Responses is {} ResponsesItem)
                {
                    fg.AppendLine("Responses =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ResponsesItem.Overall);
                        if (ResponsesItem.Specific != null)
                        {
                            foreach (var subItem in ResponsesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Conditions is {} ConditionsItem)
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Choices is {} ChoicesItem)
                {
                    fg.AppendLine("Choices =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ChoicesItem.Overall);
                        if (ChoicesItem.Specific != null)
                        {
                            foreach (var subItem in ChoicesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (LinkFrom is {} LinkFromItem)
                {
                    fg.AppendLine("LinkFrom =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(LinkFromItem.Overall);
                        if (LinkFromItem.Specific != null)
                        {
                            foreach (var subItem in LinkFromItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                Script?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                ret.Quest = this.Quest.Combine(rhs.Quest);
                ret.PreviousTopic = this.PreviousTopic.Combine(rhs.PreviousTopic);
                ret.Topics = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Topics?.Overall, rhs.Topics?.Overall), ExceptionExt.Combine(this.Topics?.Specific, rhs.Topics?.Specific));
                ret.Responses = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponse.ErrorMask?>>?>(ExceptionExt.Combine(this.Responses?.Overall, rhs.Responses?.Overall), ExceptionExt.Combine(this.Responses?.Specific, rhs.Responses?.Specific));
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.Choices = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Choices?.Overall, rhs.Choices?.Overall), ExceptionExt.Combine(this.Choices?.Specific, rhs.Choices?.Specific));
                ret.LinkFrom = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.LinkFrom?.Overall, rhs.LinkFrom?.Overall), ExceptionExt.Combine(this.LinkFrom?.Specific, rhs.LinkFrom?.Specific));
                ret.Script = this.Script.Combine(rhs.Script, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public DialogItemData.TranslationMask? Data;
            public bool Quest;
            public bool PreviousTopic;
            public bool Topics;
            public DialogResponse.TranslationMask? Responses;
            public Condition.TranslationMask? Conditions;
            public bool Choices;
            public bool LinkFrom;
            public ScriptFields.TranslationMask? Script;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Quest = defaultOn;
                this.PreviousTopic = defaultOn;
                this.Topics = defaultOn;
                this.Choices = defaultOn;
                this.LinkFrom = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Data != null ? Data.OnOverall : DefaultOn, Data?.GetCrystal()));
                ret.Add((Quest, null));
                ret.Add((PreviousTopic, null));
                ret.Add((Topics, null));
                ret.Add((Responses == null ? DefaultOn : !Responses.GetCrystal().CopyNothing, Responses?.GetCrystal()));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((Choices, null));
                ret.Add((LinkFrom, null));
                ret.Add((Script != null ? Script.OnOverall : DefaultOn, Script?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = DialogItem_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => DialogItemCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogItemSetterCommon.Instance.RemapLinks(this, mapping);
        public DialogItem(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private DialogItem(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public DialogItem(IOblivionMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public DialogItem(IOblivionMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<DialogItem>.ToString(this);
        }

        protected override Type LinkType => typeof(IDialogItem);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IDialogItemGetter rhs) return false;
            return ((DialogItemCommon)((IDialogItemGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IDialogItemGetter? obj)
        {
            return ((DialogItemCommon)((IDialogItemGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((DialogItemCommon)((IDialogItemGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DialogItemBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((DialogItemBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static DialogItem CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new DialogItem();
            ((DialogItemSetterCommon)((IDialogItemGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out DialogItem item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((DialogItemSetterCommon)((IDialogItemGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new DialogItem GetNew()
        {
            return new DialogItem();
        }

    }
    #endregion

    #region Interface
    public partial interface IDialogItem :
        IDialogItemGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IDialogItemInternal>,
        IOblivionMajorRecordInternal
    {
        new DialogItemData? Data { get; set; }
        new IFormLinkNullable<IQuestGetter> Quest { get; set; }
        new IFormLinkNullable<IDialogItemGetter> PreviousTopic { get; set; }
        new ExtendedList<IFormLinkGetter<IDialogTopicGetter>> Topics { get; }
        new ExtendedList<DialogResponse> Responses { get; }
        new ExtendedList<Condition> Conditions { get; }
        new ExtendedList<IFormLinkGetter<IDialogTopicGetter>> Choices { get; }
        new ExtendedList<IFormLinkGetter<IDialogTopicGetter>> LinkFrom { get; }
        new ScriptFields Script { get; }
    }

    public partial interface IDialogItemInternal :
        IOblivionMajorRecordInternal,
        IDialogItem,
        IDialogItemGetter
    {
        new ScriptFields Script { get; }
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts.INFO)]
    public partial interface IDialogItemGetter :
        IOblivionMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IDialogItemGetter>,
        IMapsToGetter<IDialogItemGetter>
    {
        static new ILoquiRegistration StaticRegistration => DialogItem_Registration.Instance;
        IDialogItemDataGetter? Data { get; }
        IFormLinkNullableGetter<IQuestGetter> Quest { get; }
        IFormLinkNullableGetter<IDialogItemGetter> PreviousTopic { get; }
        IReadOnlyList<IFormLinkGetter<IDialogTopicGetter>> Topics { get; }
        IReadOnlyList<IDialogResponseGetter> Responses { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        IReadOnlyList<IFormLinkGetter<IDialogTopicGetter>> Choices { get; }
        IReadOnlyList<IFormLinkGetter<IDialogTopicGetter>> LinkFrom { get; }
        IScriptFieldsGetter Script { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class DialogItemMixIn
    {
        public static void Clear(this IDialogItemInternal item)
        {
            ((DialogItemSetterCommon)((IDialogItemGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DialogItem.Mask<bool> GetEqualsMask(
            this IDialogItemGetter item,
            IDialogItemGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DialogItemCommon)((IDialogItemGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IDialogItemGetter item,
            string? name = null,
            DialogItem.Mask<bool>? printMask = null)
        {
            return ((DialogItemCommon)((IDialogItemGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IDialogItemGetter item,
            FileGeneration fg,
            string? name = null,
            DialogItem.Mask<bool>? printMask = null)
        {
            ((DialogItemCommon)((IDialogItemGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IDialogItemGetter item,
            IDialogItemGetter rhs,
            DialogItem.TranslationMask? equalsMask = null)
        {
            return ((DialogItemCommon)((IDialogItemGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IDialogItemInternal lhs,
            IDialogItemGetter rhs,
            out DialogItem.ErrorMask errorMask,
            DialogItem.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DialogItemSetterTranslationCommon)((IDialogItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = DialogItem.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDialogItemInternal lhs,
            IDialogItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DialogItemSetterTranslationCommon)((IDialogItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static DialogItem DeepCopy(
            this IDialogItemGetter item,
            DialogItem.TranslationMask? copyMask = null)
        {
            return ((DialogItemSetterTranslationCommon)((IDialogItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DialogItem DeepCopy(
            this IDialogItemGetter item,
            out DialogItem.ErrorMask errorMask,
            DialogItem.TranslationMask? copyMask = null)
        {
            return ((DialogItemSetterTranslationCommon)((IDialogItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DialogItem DeepCopy(
            this IDialogItemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DialogItemSetterTranslationCommon)((IDialogItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static DialogItem Duplicate(
            this IDialogItemGetter item,
            FormKey formKey,
            DialogItem.TranslationMask? copyMask = null)
        {
            return ((DialogItemCommon)((IDialogItemGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IDialogItemInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((DialogItemSetterCommon)((IDialogItemGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum DialogItem_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Data = 5,
        Quest = 6,
        PreviousTopic = 7,
        Topics = 8,
        Responses = 9,
        Conditions = 10,
        Choices = 11,
        LinkFrom = 12,
        Script = 13,
    }
    #endregion

    #region Registration
    public partial class DialogItem_Registration : ILoquiRegistration
    {
        public static readonly DialogItem_Registration Instance = new DialogItem_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 149,
            version: 0);

        public const string GUID = "2d9149e0-aa5e-4b4e-8bef-93b32f602f3b";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(DialogItem.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DialogItem.ErrorMask);

        public static readonly Type ClassType = typeof(DialogItem);

        public static readonly Type GetterType = typeof(IDialogItemGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDialogItem);

        public static readonly Type? InternalSetterType = typeof(IDialogItemInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.DialogItem";

        public const string Name = "DialogItem";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.INFO;
        public static readonly Type BinaryWriteTranslation = typeof(DialogItemBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class DialogItemSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly DialogItemSetterCommon Instance = new DialogItemSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDialogItemInternal item)
        {
            ClearPartial();
            item.Data = null;
            item.Quest.Clear();
            item.PreviousTopic.Clear();
            item.Topics.Clear();
            item.Responses.Clear();
            item.Conditions.Clear();
            item.Choices.Clear();
            item.LinkFrom.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IDialogItemInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IDialogItemInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IDialogItem obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Quest.Relink(mapping);
            obj.PreviousTopic.Relink(mapping);
            obj.Topics.RemapLinks(mapping);
            obj.Choices.RemapLinks(mapping);
            obj.LinkFrom.RemapLinks(mapping);
            obj.Script.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IDialogItemInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.MajorRecordParse<IDialogItemInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: DialogItemBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: DialogItemBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (DialogItem)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (DialogItem)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    public partial class DialogItemCommon : OblivionMajorRecordCommon
    {
        public new static readonly DialogItemCommon Instance = new DialogItemCommon();

        public DialogItem.Mask<bool> GetEqualsMask(
            IDialogItemGetter item,
            IDialogItemGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DialogItem.Mask<bool>(false);
            ((DialogItemCommon)((IDialogItemGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDialogItemGetter item,
            IDialogItemGetter rhs,
            DialogItem.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Quest = item.Quest.Equals(rhs.Quest);
            ret.PreviousTopic = item.PreviousTopic.Equals(rhs.PreviousTopic);
            ret.Topics = item.Topics.CollectionEqualsHelper(
                rhs.Topics,
                (l, r) => object.Equals(l, r),
                include);
            ret.Responses = item.Responses.CollectionEqualsHelper(
                rhs.Responses,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Choices = item.Choices.CollectionEqualsHelper(
                rhs.Choices,
                (l, r) => object.Equals(l, r),
                include);
            ret.LinkFrom = item.LinkFrom.CollectionEqualsHelper(
                rhs.LinkFrom,
                (l, r) => object.Equals(l, r),
                include);
            ret.Script = MaskItemExt.Factory(item.Script.GetEqualsMask(rhs.Script, include), include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IDialogItemGetter item,
            string? name = null,
            DialogItem.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IDialogItemGetter item,
            FileGeneration fg,
            string? name = null,
            DialogItem.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"DialogItem =>");
            }
            else
            {
                fg.AppendLine($"{name} (DialogItem) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IDialogItemGetter item,
            FileGeneration fg,
            DialogItem.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Data?.Overall ?? true)
                && item.Data is {} DataItem)
            {
                DataItem?.ToString(fg, "Data");
            }
            if (printMask?.Quest ?? true)
            {
                fg.AppendItem(item.Quest.FormKeyNullable, "Quest");
            }
            if (printMask?.PreviousTopic ?? true)
            {
                fg.AppendItem(item.PreviousTopic.FormKeyNullable, "PreviousTopic");
            }
            if (printMask?.Topics?.Overall ?? true)
            {
                fg.AppendLine("Topics =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Topics)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Responses?.Overall ?? true)
            {
                fg.AppendLine("Responses =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Responses)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Conditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Choices?.Overall ?? true)
            {
                fg.AppendLine("Choices =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Choices)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.LinkFrom?.Overall ?? true)
            {
                fg.AppendLine("LinkFrom =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.LinkFrom)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Script?.Overall ?? true)
            {
                item.Script?.ToString(fg, "Script");
            }
        }
        
        public static DialogItem_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DialogItem_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (DialogItem_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.VersionControl:
                    return (DialogItem_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (DialogItem_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (DialogItem_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new DialogItem_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DialogItem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (DialogItem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (DialogItem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (DialogItem_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDialogItemGetter? lhs,
            IDialogItemGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IOblivionMajorRecordGetter)lhs, (IOblivionMajorRecordGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)DialogItem_FieldIndex.Data) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Data, rhs.Data, out var lhsData, out var rhsData, out var isDataEqual))
                {
                    if (!((DialogItemDataCommon)((IDialogItemDataGetter)lhsData).CommonInstance()!).Equals(lhsData, rhsData, crystal?.GetSubCrystal((int)DialogItem_FieldIndex.Data))) return false;
                }
                else if (!isDataEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)DialogItem_FieldIndex.Quest) ?? true))
            {
                if (!lhs.Quest.Equals(rhs.Quest)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)DialogItem_FieldIndex.PreviousTopic) ?? true))
            {
                if (!lhs.PreviousTopic.Equals(rhs.PreviousTopic)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)DialogItem_FieldIndex.Topics) ?? true))
            {
                if (!lhs.Topics.SequenceEqualNullable(rhs.Topics)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)DialogItem_FieldIndex.Responses) ?? true))
            {
                if (!lhs.Responses.SequenceEqualNullable(rhs.Responses)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)DialogItem_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqualNullable(rhs.Conditions)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)DialogItem_FieldIndex.Choices) ?? true))
            {
                if (!lhs.Choices.SequenceEqualNullable(rhs.Choices)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)DialogItem_FieldIndex.LinkFrom) ?? true))
            {
                if (!lhs.LinkFrom.SequenceEqualNullable(rhs.LinkFrom)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)DialogItem_FieldIndex.Script) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Script, rhs.Script, out var lhsScript, out var rhsScript, out var isScriptEqual))
                {
                    if (!((ScriptFieldsCommon)((IScriptFieldsGetter)lhsScript).CommonInstance()!).Equals(lhsScript, rhsScript, crystal?.GetSubCrystal((int)DialogItem_FieldIndex.Script))) return false;
                }
                else if (!isScriptEqual) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IDialogItemGetter?)lhs,
                rhs: rhs as IDialogItemGetter,
                crystal: crystal);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IDialogItemGetter?)lhs,
                rhs: rhs as IDialogItemGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(IDialogItemGetter item)
        {
            var hash = new HashCode();
            if (item.Data is {} Dataitem)
            {
                hash.Add(Dataitem);
            }
            hash.Add(item.Quest);
            hash.Add(item.PreviousTopic);
            hash.Add(item.Topics);
            hash.Add(item.Responses);
            hash.Add(item.Conditions);
            hash.Add(item.Choices);
            hash.Add(item.LinkFrom);
            hash.Add(item.Script);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IDialogItemGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IDialogItemGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return DialogItem.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IDialogItemGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Quest.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Quest);
            }
            if (obj.PreviousTopic.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.PreviousTopic);
            }
            foreach (var item in obj.Topics)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Choices)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.LinkFrom)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Script is IFormLinkContainerGetter ScriptlinkCont)
            {
                foreach (var item in ScriptlinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public DialogItem Duplicate(
            IDialogItemGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new DialogItem(formKey);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override OblivionMajorRecord Duplicate(
            IOblivionMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IDialogItemGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IDialogItemGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class DialogItemSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly DialogItemSetterTranslationCommon Instance = new DialogItemSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IDialogItemInternal item,
            IDialogItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IDialogItem item,
            IDialogItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IOblivionMajorRecord)item,
                (IOblivionMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.Data);
                try
                {
                    if(rhs.Data is {} rhsData)
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)DialogItem_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Quest) ?? true))
            {
                item.Quest.SetTo(rhs.Quest.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogItem_FieldIndex.PreviousTopic) ?? true))
            {
                item.PreviousTopic.SetTo(rhs.PreviousTopic.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Topics) ?? true))
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.Topics);
                try
                {
                    item.Topics.SetTo(
                        rhs.Topics
                        .Select(r => (IFormLinkGetter<IDialogTopicGetter>)new FormLink<IDialogTopicGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Responses) ?? true))
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.Responses);
                try
                {
                    item.Responses.SetTo(
                        rhs.Responses
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Choices) ?? true))
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.Choices);
                try
                {
                    item.Choices.SetTo(
                        rhs.Choices
                        .Select(r => (IFormLinkGetter<IDialogTopicGetter>)new FormLink<IDialogTopicGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogItem_FieldIndex.LinkFrom) ?? true))
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.LinkFrom);
                try
                {
                    item.LinkFrom.SetTo(
                        rhs.LinkFrom
                        .Select(r => (IFormLinkGetter<IDialogTopicGetter>)new FormLink<IDialogTopicGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Script) ?? true))
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.Script);
                try
                {
                    item.Script.DeepCopyIn(
                        rhs: rhs.Script,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)DialogItem_FieldIndex.Script));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogItemInternal)item,
                rhs: (IDialogItemGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogItem)item,
                rhs: (IDialogItemGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogItemInternal)item,
                rhs: (IDialogItemGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogItem)item,
                rhs: (IDialogItemGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public DialogItem DeepCopy(
            IDialogItemGetter item,
            DialogItem.TranslationMask? copyMask = null)
        {
            DialogItem ret = (DialogItem)((DialogItemCommon)((IDialogItemGetter)item).CommonInstance()!).GetNew();
            ((DialogItemSetterTranslationCommon)((IDialogItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public DialogItem DeepCopy(
            IDialogItemGetter item,
            out DialogItem.ErrorMask errorMask,
            DialogItem.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DialogItem ret = (DialogItem)((DialogItemCommon)((IDialogItemGetter)item).CommonInstance()!).GetNew();
            ((DialogItemSetterTranslationCommon)((IDialogItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = DialogItem.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public DialogItem DeepCopy(
            IDialogItemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DialogItem ret = (DialogItem)((DialogItemCommon)((IDialogItemGetter)item).CommonInstance()!).GetNew();
            ((DialogItemSetterTranslationCommon)((IDialogItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class DialogItem
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogItem_Registration.Instance;
        public new static DialogItem_Registration StaticRegistration => DialogItem_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DialogItemCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return DialogItemSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DialogItemSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class DialogItemBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static DialogItemBinaryWriteTranslation Instance = new DialogItemBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IDialogItemGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.Data is {} DataItem)
            {
                ((DialogItemDataBinaryWriteTranslation)((IBinaryItem)DataItem).BinaryWriteTranslator).Write(
                    item: DataItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Quest,
                header: translationParams.ConvertToCustom(RecordTypes.QSTI));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PreviousTopic,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IDialogTopicGetter>>.Instance.Write(
                writer: writer,
                items: item.Topics,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IDialogTopicGetter> subItem, TypedWriteParams? conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.NAME));
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IDialogResponseGetter>.Instance.Write(
                writer: writer,
                items: item.Responses,
                transl: (MutagenWriter subWriter, IDialogResponseGetter subItem, TypedWriteParams? conv) =>
                {
                    var Item = subItem;
                    ((DialogResponseBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams? conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IDialogTopicGetter>>.Instance.Write(
                writer: writer,
                items: item.Choices,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IDialogTopicGetter> subItem, TypedWriteParams? conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.TCLT));
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IDialogTopicGetter>>.Instance.Write(
                writer: writer,
                items: item.LinkFrom,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IDialogTopicGetter> subItem, TypedWriteParams? conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.TCLF));
                });
            var ScriptItem = item.Script;
            ((ScriptFieldsBinaryWriteTranslation)((IBinaryItem)ScriptItem).BinaryWriteTranslator).Write(
                item: ScriptItem,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            IDialogItemGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Record(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.INFO)))
            {
                try
                {
                    OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        translationParams: translationParams);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Enrich(ex, item);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IDialogItemGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IDialogItemGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IDialogItemGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class DialogItemBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static DialogItemBinaryCreateTranslation Instance = new DialogItemBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.INFO;
        public static void FillBinaryStructs(
            IDialogItemInternal item,
            MutagenFrame frame)
        {
            OblivionMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IDialogItemInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    item.Data = Mutagen.Bethesda.Oblivion.DialogItemData.CreateFromBinary(frame: frame);
                    return (int)DialogItem_FieldIndex.Data;
                }
                case RecordTypeInts.QSTI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Quest.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogItem_FieldIndex.Quest;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PreviousTopic.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogItem_FieldIndex.PreviousTopic;
                }
                case RecordTypeInts.NAME:
                {
                    item.Topics.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IDialogTopicGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.NAME),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)DialogItem_FieldIndex.Topics;
                }
                case RecordTypeInts.TRDT:
                case RecordTypeInts.NAM1:
                case RecordTypeInts.NAM2:
                {
                    item.Responses.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<DialogResponse>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: DialogResponse_Registration.TriggeringRecordTypes,
                            translationParams: translationParams,
                            transl: DialogResponse.TryCreateFromBinary));
                    return (int)DialogItem_FieldIndex.Responses;
                }
                case RecordTypeInts.CTDA:
                case RecordTypeInts.CTDT:
                {
                    item.Conditions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Condition_Registration.TriggeringRecordTypes,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary));
                    return (int)DialogItem_FieldIndex.Conditions;
                }
                case RecordTypeInts.TCLT:
                {
                    item.Choices.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IDialogTopicGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.TCLT),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)DialogItem_FieldIndex.Choices;
                }
                case RecordTypeInts.TCLF:
                {
                    item.LinkFrom.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IDialogTopicGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.TCLF),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)DialogItem_FieldIndex.LinkFrom;
                }
                case RecordTypeInts.SCHD:
                case RecordTypeInts.SCHR:
                {
                    item.Script.CopyInFromBinary(
                        frame: frame,
                        translationParams: null);
                    return (int)DialogItem_FieldIndex.Script;
                }
                default:
                    return OblivionMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class DialogItemBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class DialogItemBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IDialogItemGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogItem_Registration.Instance;
        public new static DialogItem_Registration StaticRegistration => DialogItem_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DialogItemCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DialogItemSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => DialogItemCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DialogItemBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((DialogItemBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IDialogItem);


        #region Data
        private RangeInt32? _DataLocation;
        public IDialogItemDataGetter? Data => _DataLocation.HasValue ? DialogItemDataBinaryOverlay.DialogItemDataFactory(new OverlayStream(_data.Slice(_DataLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region Quest
        private int? _QuestLocation;
        public IFormLinkNullableGetter<IQuestGetter> Quest => _QuestLocation.HasValue ? new FormLinkNullable<IQuestGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _QuestLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IQuestGetter>.Null;
        #endregion
        #region PreviousTopic
        private int? _PreviousTopicLocation;
        public IFormLinkNullableGetter<IDialogItemGetter> PreviousTopic => _PreviousTopicLocation.HasValue ? new FormLinkNullable<IDialogItemGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _PreviousTopicLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IDialogItemGetter>.Null;
        #endregion
        public IReadOnlyList<IFormLinkGetter<IDialogTopicGetter>> Topics { get; private set; } = ListExt.Empty<IFormLinkGetter<IDialogTopicGetter>>();
        public IReadOnlyList<IDialogResponseGetter> Responses { get; private set; } = ListExt.Empty<DialogResponseBinaryOverlay>();
        public IReadOnlyList<IConditionGetter> Conditions { get; private set; } = ListExt.Empty<ConditionBinaryOverlay>();
        public IReadOnlyList<IFormLinkGetter<IDialogTopicGetter>> Choices { get; private set; } = ListExt.Empty<IFormLinkGetter<IDialogTopicGetter>>();
        public IReadOnlyList<IFormLinkGetter<IDialogTopicGetter>> LinkFrom { get; private set; } = ListExt.Empty<IFormLinkGetter<IDialogTopicGetter>>();
        #region Script
        private IScriptFieldsGetter? _Script;
        public IScriptFieldsGetter Script => _Script ?? new ScriptFields();
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected DialogItemBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static DialogItemBinaryOverlay DialogItemFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            stream = PluginUtilityTranslation.DecompressStream(stream);
            var ret = new DialogItemBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0xC + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static DialogItemBinaryOverlay DialogItemFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return DialogItemFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    _DataLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)DialogItem_FieldIndex.Data;
                }
                case RecordTypeInts.QSTI:
                {
                    _QuestLocation = (stream.Position - offset);
                    return (int)DialogItem_FieldIndex.Quest;
                }
                case RecordTypeInts.PNAM:
                {
                    _PreviousTopicLocation = (stream.Position - offset);
                    return (int)DialogItem_FieldIndex.PreviousTopic;
                }
                case RecordTypeInts.NAME:
                {
                    this.Topics = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IDialogTopicGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IDialogTopicGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            parseParams: parseParams));
                    return (int)DialogItem_FieldIndex.Topics;
                }
                case RecordTypeInts.TRDT:
                case RecordTypeInts.NAM1:
                case RecordTypeInts.NAM2:
                {
                    this.Responses = this.ParseRepeatedTypelessSubrecord<DialogResponseBinaryOverlay>(
                        stream: stream,
                        parseParams: parseParams,
                        trigger: DialogResponse_Registration.TriggeringRecordTypes,
                        factory: DialogResponseBinaryOverlay.DialogResponseFactory);
                    return (int)DialogItem_FieldIndex.Responses;
                }
                case RecordTypeInts.CTDA:
                case RecordTypeInts.CTDT:
                {
                    this.Conditions = BinaryOverlayList.FactoryByArray<ConditionBinaryOverlay>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        parseParams: parseParams,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: type,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)DialogItem_FieldIndex.Conditions;
                }
                case RecordTypeInts.TCLT:
                {
                    this.Choices = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IDialogTopicGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IDialogTopicGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            parseParams: parseParams));
                    return (int)DialogItem_FieldIndex.Choices;
                }
                case RecordTypeInts.TCLF:
                {
                    this.LinkFrom = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IDialogTopicGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IDialogTopicGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            parseParams: parseParams));
                    return (int)DialogItem_FieldIndex.LinkFrom;
                }
                case RecordTypeInts.SCHD:
                case RecordTypeInts.SCHR:
                {
                    this._Script = ScriptFieldsBinaryOverlay.ScriptFieldsFactory(
                        stream: stream,
                        package: _package,
                        parseParams: parseParams);
                    return (int)DialogItem_FieldIndex.Script;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DialogItemMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<DialogItem>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IDialogItemGetter rhs) return false;
            return ((DialogItemCommon)((IDialogItemGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IDialogItemGetter? obj)
        {
            return ((DialogItemCommon)((IDialogItemGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((DialogItemCommon)((IDialogItemGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

