/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Oblivion.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RaceStats :
        IEquatable<IRaceStatsGetter>,
        ILoquiObjectSetter<RaceStats>,
        IRaceStats
    {
        #region Ctor
        public RaceStats()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Strength
        public Byte Strength { get; set; } = default(Byte);
        #endregion
        #region Intelligence
        public Byte Intelligence { get; set; } = default(Byte);
        #endregion
        #region Willpower
        public Byte Willpower { get; set; } = default(Byte);
        #endregion
        #region Agility
        public Byte Agility { get; set; } = default(Byte);
        #endregion
        #region Speed
        public Byte Speed { get; set; } = default(Byte);
        #endregion
        #region Endurance
        public Byte Endurance { get; set; } = default(Byte);
        #endregion
        #region Personality
        public Byte Personality { get; set; } = default(Byte);
        #endregion
        #region Luck
        public Byte Luck { get; set; } = default(Byte);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            RaceStatsMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IRaceStatsGetter rhs) return false;
            return ((RaceStatsCommon)((IRaceStatsGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IRaceStatsGetter? obj)
        {
            return ((RaceStatsCommon)((IRaceStatsGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((RaceStatsCommon)((IRaceStatsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Strength = initialValue;
                this.Intelligence = initialValue;
                this.Willpower = initialValue;
                this.Agility = initialValue;
                this.Speed = initialValue;
                this.Endurance = initialValue;
                this.Personality = initialValue;
                this.Luck = initialValue;
            }

            public Mask(
                TItem Strength,
                TItem Intelligence,
                TItem Willpower,
                TItem Agility,
                TItem Speed,
                TItem Endurance,
                TItem Personality,
                TItem Luck)
            {
                this.Strength = Strength;
                this.Intelligence = Intelligence;
                this.Willpower = Willpower;
                this.Agility = Agility;
                this.Speed = Speed;
                this.Endurance = Endurance;
                this.Personality = Personality;
                this.Luck = Luck;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Strength;
            public TItem Intelligence;
            public TItem Willpower;
            public TItem Agility;
            public TItem Speed;
            public TItem Endurance;
            public TItem Personality;
            public TItem Luck;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Strength, rhs.Strength)) return false;
                if (!object.Equals(this.Intelligence, rhs.Intelligence)) return false;
                if (!object.Equals(this.Willpower, rhs.Willpower)) return false;
                if (!object.Equals(this.Agility, rhs.Agility)) return false;
                if (!object.Equals(this.Speed, rhs.Speed)) return false;
                if (!object.Equals(this.Endurance, rhs.Endurance)) return false;
                if (!object.Equals(this.Personality, rhs.Personality)) return false;
                if (!object.Equals(this.Luck, rhs.Luck)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Strength);
                hash.Add(this.Intelligence);
                hash.Add(this.Willpower);
                hash.Add(this.Agility);
                hash.Add(this.Speed);
                hash.Add(this.Endurance);
                hash.Add(this.Personality);
                hash.Add(this.Luck);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Strength)) return false;
                if (!eval(this.Intelligence)) return false;
                if (!eval(this.Willpower)) return false;
                if (!eval(this.Agility)) return false;
                if (!eval(this.Speed)) return false;
                if (!eval(this.Endurance)) return false;
                if (!eval(this.Personality)) return false;
                if (!eval(this.Luck)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Strength)) return true;
                if (eval(this.Intelligence)) return true;
                if (eval(this.Willpower)) return true;
                if (eval(this.Agility)) return true;
                if (eval(this.Speed)) return true;
                if (eval(this.Endurance)) return true;
                if (eval(this.Personality)) return true;
                if (eval(this.Luck)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new RaceStats.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Strength = eval(this.Strength);
                obj.Intelligence = eval(this.Intelligence);
                obj.Willpower = eval(this.Willpower);
                obj.Agility = eval(this.Agility);
                obj.Speed = eval(this.Speed);
                obj.Endurance = eval(this.Endurance);
                obj.Personality = eval(this.Personality);
                obj.Luck = eval(this.Luck);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(RaceStats.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, RaceStats.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(RaceStats.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Strength ?? true)
                    {
                        sb.AppendItem(Strength, "Strength");
                    }
                    if (printMask?.Intelligence ?? true)
                    {
                        sb.AppendItem(Intelligence, "Intelligence");
                    }
                    if (printMask?.Willpower ?? true)
                    {
                        sb.AppendItem(Willpower, "Willpower");
                    }
                    if (printMask?.Agility ?? true)
                    {
                        sb.AppendItem(Agility, "Agility");
                    }
                    if (printMask?.Speed ?? true)
                    {
                        sb.AppendItem(Speed, "Speed");
                    }
                    if (printMask?.Endurance ?? true)
                    {
                        sb.AppendItem(Endurance, "Endurance");
                    }
                    if (printMask?.Personality ?? true)
                    {
                        sb.AppendItem(Personality, "Personality");
                    }
                    if (printMask?.Luck ?? true)
                    {
                        sb.AppendItem(Luck, "Luck");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Strength;
            public Exception? Intelligence;
            public Exception? Willpower;
            public Exception? Agility;
            public Exception? Speed;
            public Exception? Endurance;
            public Exception? Personality;
            public Exception? Luck;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
                switch (enu)
                {
                    case RaceStats_FieldIndex.Strength:
                        return Strength;
                    case RaceStats_FieldIndex.Intelligence:
                        return Intelligence;
                    case RaceStats_FieldIndex.Willpower:
                        return Willpower;
                    case RaceStats_FieldIndex.Agility:
                        return Agility;
                    case RaceStats_FieldIndex.Speed:
                        return Speed;
                    case RaceStats_FieldIndex.Endurance:
                        return Endurance;
                    case RaceStats_FieldIndex.Personality:
                        return Personality;
                    case RaceStats_FieldIndex.Luck:
                        return Luck;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
                switch (enu)
                {
                    case RaceStats_FieldIndex.Strength:
                        this.Strength = ex;
                        break;
                    case RaceStats_FieldIndex.Intelligence:
                        this.Intelligence = ex;
                        break;
                    case RaceStats_FieldIndex.Willpower:
                        this.Willpower = ex;
                        break;
                    case RaceStats_FieldIndex.Agility:
                        this.Agility = ex;
                        break;
                    case RaceStats_FieldIndex.Speed:
                        this.Speed = ex;
                        break;
                    case RaceStats_FieldIndex.Endurance:
                        this.Endurance = ex;
                        break;
                    case RaceStats_FieldIndex.Personality:
                        this.Personality = ex;
                        break;
                    case RaceStats_FieldIndex.Luck:
                        this.Luck = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
                switch (enu)
                {
                    case RaceStats_FieldIndex.Strength:
                        this.Strength = (Exception?)obj;
                        break;
                    case RaceStats_FieldIndex.Intelligence:
                        this.Intelligence = (Exception?)obj;
                        break;
                    case RaceStats_FieldIndex.Willpower:
                        this.Willpower = (Exception?)obj;
                        break;
                    case RaceStats_FieldIndex.Agility:
                        this.Agility = (Exception?)obj;
                        break;
                    case RaceStats_FieldIndex.Speed:
                        this.Speed = (Exception?)obj;
                        break;
                    case RaceStats_FieldIndex.Endurance:
                        this.Endurance = (Exception?)obj;
                        break;
                    case RaceStats_FieldIndex.Personality:
                        this.Personality = (Exception?)obj;
                        break;
                    case RaceStats_FieldIndex.Luck:
                        this.Luck = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Strength != null) return true;
                if (Intelligence != null) return true;
                if (Willpower != null) return true;
                if (Agility != null) return true;
                if (Speed != null) return true;
                if (Endurance != null) return true;
                if (Personality != null) return true;
                if (Luck != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Strength, "Strength");
                }
                {
                    sb.AppendItem(Intelligence, "Intelligence");
                }
                {
                    sb.AppendItem(Willpower, "Willpower");
                }
                {
                    sb.AppendItem(Agility, "Agility");
                }
                {
                    sb.AppendItem(Speed, "Speed");
                }
                {
                    sb.AppendItem(Endurance, "Endurance");
                }
                {
                    sb.AppendItem(Personality, "Personality");
                }
                {
                    sb.AppendItem(Luck, "Luck");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Strength = this.Strength.Combine(rhs.Strength);
                ret.Intelligence = this.Intelligence.Combine(rhs.Intelligence);
                ret.Willpower = this.Willpower.Combine(rhs.Willpower);
                ret.Agility = this.Agility.Combine(rhs.Agility);
                ret.Speed = this.Speed.Combine(rhs.Speed);
                ret.Endurance = this.Endurance.Combine(rhs.Endurance);
                ret.Personality = this.Personality.Combine(rhs.Personality);
                ret.Luck = this.Luck.Combine(rhs.Luck);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Strength;
            public bool Intelligence;
            public bool Willpower;
            public bool Agility;
            public bool Speed;
            public bool Endurance;
            public bool Personality;
            public bool Luck;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Strength = defaultOn;
                this.Intelligence = defaultOn;
                this.Willpower = defaultOn;
                this.Agility = defaultOn;
                this.Speed = defaultOn;
                this.Endurance = defaultOn;
                this.Personality = defaultOn;
                this.Luck = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Strength, null));
                ret.Add((Intelligence, null));
                ret.Add((Willpower, null));
                ret.Add((Agility, null));
                ret.Add((Speed, null));
                ret.Add((Endurance, null));
                ret.Add((Personality, null));
                ret.Add((Luck, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => RaceStatsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((RaceStatsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static RaceStats CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new RaceStats();
            ((RaceStatsSetterCommon)((IRaceStatsGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out RaceStats item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((RaceStatsSetterCommon)((IRaceStatsGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static RaceStats GetNew()
        {
            return new RaceStats();
        }

    }
    #endregion

    #region Interface
    public partial interface IRaceStats :
        ILoquiObjectSetter<IRaceStats>,
        IRaceStatsGetter
    {
        new Byte Strength { get; set; }
        new Byte Intelligence { get; set; }
        new Byte Willpower { get; set; }
        new Byte Agility { get; set; }
        new Byte Speed { get; set; }
        new Byte Endurance { get; set; }
        new Byte Personality { get; set; }
        new Byte Luck { get; set; }
    }

    public partial interface IRaceStatsGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IRaceStatsGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => RaceStats_Registration.Instance;
        Byte Strength { get; }
        Byte Intelligence { get; }
        Byte Willpower { get; }
        Byte Agility { get; }
        Byte Speed { get; }
        Byte Endurance { get; }
        Byte Personality { get; }
        Byte Luck { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class RaceStatsMixIn
    {
        public static void Clear(this IRaceStats item)
        {
            ((RaceStatsSetterCommon)((IRaceStatsGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static RaceStats.Mask<bool> GetEqualsMask(
            this IRaceStatsGetter item,
            IRaceStatsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RaceStatsCommon)((IRaceStatsGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IRaceStatsGetter item,
            string? name = null,
            RaceStats.Mask<bool>? printMask = null)
        {
            return ((RaceStatsCommon)((IRaceStatsGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IRaceStatsGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            RaceStats.Mask<bool>? printMask = null)
        {
            ((RaceStatsCommon)((IRaceStatsGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IRaceStatsGetter item,
            IRaceStatsGetter rhs,
            RaceStats.TranslationMask? equalsMask = null)
        {
            return ((RaceStatsCommon)((IRaceStatsGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IRaceStats lhs,
            IRaceStatsGetter rhs)
        {
            ((RaceStatsSetterTranslationCommon)((IRaceStatsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IRaceStats lhs,
            IRaceStatsGetter rhs,
            RaceStats.TranslationMask? copyMask = null)
        {
            ((RaceStatsSetterTranslationCommon)((IRaceStatsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IRaceStats lhs,
            IRaceStatsGetter rhs,
            out RaceStats.ErrorMask errorMask,
            RaceStats.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RaceStatsSetterTranslationCommon)((IRaceStatsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = RaceStats.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRaceStats lhs,
            IRaceStatsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RaceStatsSetterTranslationCommon)((IRaceStatsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static RaceStats DeepCopy(
            this IRaceStatsGetter item,
            RaceStats.TranslationMask? copyMask = null)
        {
            return ((RaceStatsSetterTranslationCommon)((IRaceStatsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static RaceStats DeepCopy(
            this IRaceStatsGetter item,
            out RaceStats.ErrorMask errorMask,
            RaceStats.TranslationMask? copyMask = null)
        {
            return ((RaceStatsSetterTranslationCommon)((IRaceStatsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static RaceStats DeepCopy(
            this IRaceStatsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RaceStatsSetterTranslationCommon)((IRaceStatsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IRaceStats item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((RaceStatsSetterCommon)((IRaceStatsGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    #region Field Index
    internal enum RaceStats_FieldIndex
    {
        Strength = 0,
        Intelligence = 1,
        Willpower = 2,
        Agility = 3,
        Speed = 4,
        Endurance = 5,
        Personality = 6,
        Luck = 7,
    }
    #endregion

    #region Registration
    internal partial class RaceStats_Registration : ILoquiRegistration
    {
        public static readonly RaceStats_Registration Instance = new RaceStats_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(RaceStats.Mask<>);

        public static readonly Type ErrorMaskType = typeof(RaceStats.ErrorMask);

        public static readonly Type ClassType = typeof(RaceStats);

        public static readonly Type GetterType = typeof(IRaceStatsGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRaceStats);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.RaceStats";

        public const string Name = "RaceStats";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(RaceStatsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class RaceStatsSetterCommon
    {
        public static readonly RaceStatsSetterCommon Instance = new RaceStatsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRaceStats item)
        {
            ClearPartial();
            item.Strength = default(Byte);
            item.Intelligence = default(Byte);
            item.Willpower = default(Byte);
            item.Agility = default(Byte);
            item.Speed = default(Byte);
            item.Endurance = default(Byte);
            item.Personality = default(Byte);
            item.Luck = default(Byte);
        }
        
        #region Mutagen
        public void RemapLinks(IRaceStats obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IRaceStats item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: RaceStatsBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class RaceStatsCommon
    {
        public static readonly RaceStatsCommon Instance = new RaceStatsCommon();

        public RaceStats.Mask<bool> GetEqualsMask(
            IRaceStatsGetter item,
            IRaceStatsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RaceStats.Mask<bool>(false);
            ((RaceStatsCommon)((IRaceStatsGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRaceStatsGetter item,
            IRaceStatsGetter rhs,
            RaceStats.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Strength = item.Strength == rhs.Strength;
            ret.Intelligence = item.Intelligence == rhs.Intelligence;
            ret.Willpower = item.Willpower == rhs.Willpower;
            ret.Agility = item.Agility == rhs.Agility;
            ret.Speed = item.Speed == rhs.Speed;
            ret.Endurance = item.Endurance == rhs.Endurance;
            ret.Personality = item.Personality == rhs.Personality;
            ret.Luck = item.Luck == rhs.Luck;
        }
        
        public string Print(
            IRaceStatsGetter item,
            string? name = null,
            RaceStats.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IRaceStatsGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            RaceStats.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"RaceStats =>");
            }
            else
            {
                sb.AppendLine($"{name} (RaceStats) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IRaceStatsGetter item,
            StructuredStringBuilder sb,
            RaceStats.Mask<bool>? printMask = null)
        {
            if (printMask?.Strength ?? true)
            {
                sb.AppendItem(item.Strength, "Strength");
            }
            if (printMask?.Intelligence ?? true)
            {
                sb.AppendItem(item.Intelligence, "Intelligence");
            }
            if (printMask?.Willpower ?? true)
            {
                sb.AppendItem(item.Willpower, "Willpower");
            }
            if (printMask?.Agility ?? true)
            {
                sb.AppendItem(item.Agility, "Agility");
            }
            if (printMask?.Speed ?? true)
            {
                sb.AppendItem(item.Speed, "Speed");
            }
            if (printMask?.Endurance ?? true)
            {
                sb.AppendItem(item.Endurance, "Endurance");
            }
            if (printMask?.Personality ?? true)
            {
                sb.AppendItem(item.Personality, "Personality");
            }
            if (printMask?.Luck ?? true)
            {
                sb.AppendItem(item.Luck, "Luck");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRaceStatsGetter? lhs,
            IRaceStatsGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Strength) ?? true))
            {
                if (lhs.Strength != rhs.Strength) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Intelligence) ?? true))
            {
                if (lhs.Intelligence != rhs.Intelligence) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Willpower) ?? true))
            {
                if (lhs.Willpower != rhs.Willpower) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Agility) ?? true))
            {
                if (lhs.Agility != rhs.Agility) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Speed) ?? true))
            {
                if (lhs.Speed != rhs.Speed) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Endurance) ?? true))
            {
                if (lhs.Endurance != rhs.Endurance) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Personality) ?? true))
            {
                if (lhs.Personality != rhs.Personality) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Luck) ?? true))
            {
                if (lhs.Luck != rhs.Luck) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IRaceStatsGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Strength);
            hash.Add(item.Intelligence);
            hash.Add(item.Willpower);
            hash.Add(item.Agility);
            hash.Add(item.Speed);
            hash.Add(item.Endurance);
            hash.Add(item.Personality);
            hash.Add(item.Luck);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return RaceStats.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IRaceStatsGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class RaceStatsSetterTranslationCommon
    {
        public static readonly RaceStatsSetterTranslationCommon Instance = new RaceStatsSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IRaceStats item,
            IRaceStatsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Strength) ?? true))
            {
                item.Strength = rhs.Strength;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Intelligence) ?? true))
            {
                item.Intelligence = rhs.Intelligence;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Willpower) ?? true))
            {
                item.Willpower = rhs.Willpower;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Agility) ?? true))
            {
                item.Agility = rhs.Agility;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Speed) ?? true))
            {
                item.Speed = rhs.Speed;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Endurance) ?? true))
            {
                item.Endurance = rhs.Endurance;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Personality) ?? true))
            {
                item.Personality = rhs.Personality;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Luck) ?? true))
            {
                item.Luck = rhs.Luck;
            }
        }
        
        #endregion
        
        public RaceStats DeepCopy(
            IRaceStatsGetter item,
            RaceStats.TranslationMask? copyMask = null)
        {
            RaceStats ret = (RaceStats)((RaceStatsCommon)((IRaceStatsGetter)item).CommonInstance()!).GetNew();
            ((RaceStatsSetterTranslationCommon)((IRaceStatsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public RaceStats DeepCopy(
            IRaceStatsGetter item,
            out RaceStats.ErrorMask errorMask,
            RaceStats.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RaceStats ret = (RaceStats)((RaceStatsCommon)((IRaceStatsGetter)item).CommonInstance()!).GetNew();
            ((RaceStatsSetterTranslationCommon)((IRaceStatsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = RaceStats.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public RaceStats DeepCopy(
            IRaceStatsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            RaceStats ret = (RaceStats)((RaceStatsCommon)((IRaceStatsGetter)item).CommonInstance()!).GetNew();
            ((RaceStatsSetterTranslationCommon)((IRaceStatsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class RaceStats
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RaceStats_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => RaceStats_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => RaceStatsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return RaceStatsSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => RaceStatsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRaceStatsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IRaceStatsGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IRaceStatsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion
{
    public partial class RaceStatsBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly RaceStatsBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IRaceStatsGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Strength);
            writer.Write(item.Intelligence);
            writer.Write(item.Willpower);
            writer.Write(item.Agility);
            writer.Write(item.Speed);
            writer.Write(item.Endurance);
            writer.Write(item.Personality);
            writer.Write(item.Luck);
        }

        public void Write(
            MutagenWriter writer,
            IRaceStatsGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IRaceStatsGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class RaceStatsBinaryCreateTranslation
    {
        public static readonly RaceStatsBinaryCreateTranslation Instance = new RaceStatsBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IRaceStats item,
            MutagenFrame frame)
        {
            item.Strength = frame.ReadUInt8();
            item.Intelligence = frame.ReadUInt8();
            item.Willpower = frame.ReadUInt8();
            item.Agility = frame.ReadUInt8();
            item.Speed = frame.ReadUInt8();
            item.Endurance = frame.ReadUInt8();
            item.Personality = frame.ReadUInt8();
            item.Luck = frame.ReadUInt8();
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class RaceStatsBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRaceStatsGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((RaceStatsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion
{
    internal partial class RaceStatsBinaryOverlay :
        PluginBinaryOverlay,
        IRaceStatsGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RaceStats_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => RaceStats_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => RaceStatsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => RaceStatsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRaceStatsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IRaceStatsGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IRaceStatsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => RaceStatsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((RaceStatsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Byte Strength => _structData.Span[0x0];
        public Byte Intelligence => _structData.Span[0x1];
        public Byte Willpower => _structData.Span[0x2];
        public Byte Agility => _structData.Span[0x3];
        public Byte Speed => _structData.Span[0x4];
        public Byte Endurance => _structData.Span[0x5];
        public Byte Personality => _structData.Span[0x6];
        public Byte Luck => _structData.Span[0x7];
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected RaceStatsBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IRaceStatsGetter RaceStatsFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x8,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new RaceStatsBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x8;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IRaceStatsGetter RaceStatsFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return RaceStatsFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            RaceStatsMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IRaceStatsGetter rhs) return false;
            return ((RaceStatsCommon)((IRaceStatsGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IRaceStatsGetter? obj)
        {
            return ((RaceStatsCommon)((IRaceStatsGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((RaceStatsCommon)((IRaceStatsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

