/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Oblivion.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LocalVariableData :
        IEquatable<ILocalVariableDataGetter>,
        ILocalVariableData,
        ILoquiObjectSetter<LocalVariableData>
    {
        #region Ctor
        public LocalVariableData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Index
        public Int32 Index { get; set; } = default(Int32);
        #endregion
        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unknown = new byte[12];
        public MemorySlice<Byte> Unknown
        {
            get => _Unknown;
            set => this._Unknown = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> ILocalVariableDataGetter.Unknown => this.Unknown;
        #endregion
        #region Flags
        public Script.LocalVariableFlag Flags { get; set; } = default(Script.LocalVariableFlag);
        #endregion
        #region Unknown2
        public Int32 Unknown2 { get; set; } = default(Int32);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            LocalVariableDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ILocalVariableDataGetter rhs) return false;
            return ((LocalVariableDataCommon)((ILocalVariableDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ILocalVariableDataGetter? obj)
        {
            return ((LocalVariableDataCommon)((ILocalVariableDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((LocalVariableDataCommon)((ILocalVariableDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Index = initialValue;
                this.Unknown = initialValue;
                this.Flags = initialValue;
                this.Unknown2 = initialValue;
            }

            public Mask(
                TItem Index,
                TItem Unknown,
                TItem Flags,
                TItem Unknown2)
            {
                this.Index = Index;
                this.Unknown = Unknown;
                this.Flags = Flags;
                this.Unknown2 = Unknown2;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Index;
            public TItem Unknown;
            public TItem Flags;
            public TItem Unknown2;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Index, rhs.Index)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Index);
                hash.Add(this.Unknown);
                hash.Add(this.Flags);
                hash.Add(this.Unknown2);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Index)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Unknown2)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Index)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Unknown2)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new LocalVariableData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Index = eval(this.Index);
                obj.Unknown = eval(this.Unknown);
                obj.Flags = eval(this.Flags);
                obj.Unknown2 = eval(this.Unknown2);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(LocalVariableData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, LocalVariableData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(LocalVariableData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Index ?? true)
                    {
                        sb.AppendItem(Index, "Index");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        sb.AppendItem(Unknown2, "Unknown2");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Index;
            public Exception? Unknown;
            public Exception? Flags;
            public Exception? Unknown2;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                LocalVariableData_FieldIndex enu = (LocalVariableData_FieldIndex)index;
                switch (enu)
                {
                    case LocalVariableData_FieldIndex.Index:
                        return Index;
                    case LocalVariableData_FieldIndex.Unknown:
                        return Unknown;
                    case LocalVariableData_FieldIndex.Flags:
                        return Flags;
                    case LocalVariableData_FieldIndex.Unknown2:
                        return Unknown2;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                LocalVariableData_FieldIndex enu = (LocalVariableData_FieldIndex)index;
                switch (enu)
                {
                    case LocalVariableData_FieldIndex.Index:
                        this.Index = ex;
                        break;
                    case LocalVariableData_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case LocalVariableData_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case LocalVariableData_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                LocalVariableData_FieldIndex enu = (LocalVariableData_FieldIndex)index;
                switch (enu)
                {
                    case LocalVariableData_FieldIndex.Index:
                        this.Index = (Exception?)obj;
                        break;
                    case LocalVariableData_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case LocalVariableData_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case LocalVariableData_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Index != null) return true;
                if (Unknown != null) return true;
                if (Flags != null) return true;
                if (Unknown2 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Index, "Index");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(Unknown2, "Unknown2");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Index = this.Index.Combine(rhs.Index);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Index;
            public bool Unknown;
            public bool Flags;
            public bool Unknown2;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Index = defaultOn;
                this.Unknown = defaultOn;
                this.Flags = defaultOn;
                this.Unknown2 = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Index, null));
                ret.Add((Unknown, null));
                ret.Add((Flags, null));
                ret.Add((Unknown2, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LocalVariableDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LocalVariableDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static LocalVariableData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new LocalVariableData();
            ((LocalVariableDataSetterCommon)((ILocalVariableDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out LocalVariableData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((LocalVariableDataSetterCommon)((ILocalVariableDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static LocalVariableData GetNew()
        {
            return new LocalVariableData();
        }

    }
    #endregion

    #region Interface
    public partial interface ILocalVariableData :
        ILocalVariableDataGetter,
        ILoquiObjectSetter<ILocalVariableData>
    {
        new Int32 Index { get; set; }
        new MemorySlice<Byte> Unknown { get; set; }
        new Script.LocalVariableFlag Flags { get; set; }
        new Int32 Unknown2 { get; set; }
    }

    public partial interface ILocalVariableDataGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<ILocalVariableDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => LocalVariableData_Registration.Instance;
        Int32 Index { get; }
        ReadOnlyMemorySlice<Byte> Unknown { get; }
        Script.LocalVariableFlag Flags { get; }
        Int32 Unknown2 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class LocalVariableDataMixIn
    {
        public static void Clear(this ILocalVariableData item)
        {
            ((LocalVariableDataSetterCommon)((ILocalVariableDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static LocalVariableData.Mask<bool> GetEqualsMask(
            this ILocalVariableDataGetter item,
            ILocalVariableDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LocalVariableDataCommon)((ILocalVariableDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ILocalVariableDataGetter item,
            string? name = null,
            LocalVariableData.Mask<bool>? printMask = null)
        {
            return ((LocalVariableDataCommon)((ILocalVariableDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ILocalVariableDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            LocalVariableData.Mask<bool>? printMask = null)
        {
            ((LocalVariableDataCommon)((ILocalVariableDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ILocalVariableDataGetter item,
            ILocalVariableDataGetter rhs,
            LocalVariableData.TranslationMask? equalsMask = null)
        {
            return ((LocalVariableDataCommon)((ILocalVariableDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ILocalVariableData lhs,
            ILocalVariableDataGetter rhs)
        {
            ((LocalVariableDataSetterTranslationCommon)((ILocalVariableDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ILocalVariableData lhs,
            ILocalVariableDataGetter rhs,
            LocalVariableData.TranslationMask? copyMask = null)
        {
            ((LocalVariableDataSetterTranslationCommon)((ILocalVariableDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ILocalVariableData lhs,
            ILocalVariableDataGetter rhs,
            out LocalVariableData.ErrorMask errorMask,
            LocalVariableData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LocalVariableDataSetterTranslationCommon)((ILocalVariableDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = LocalVariableData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILocalVariableData lhs,
            ILocalVariableDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LocalVariableDataSetterTranslationCommon)((ILocalVariableDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static LocalVariableData DeepCopy(
            this ILocalVariableDataGetter item,
            LocalVariableData.TranslationMask? copyMask = null)
        {
            return ((LocalVariableDataSetterTranslationCommon)((ILocalVariableDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LocalVariableData DeepCopy(
            this ILocalVariableDataGetter item,
            out LocalVariableData.ErrorMask errorMask,
            LocalVariableData.TranslationMask? copyMask = null)
        {
            return ((LocalVariableDataSetterTranslationCommon)((ILocalVariableDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LocalVariableData DeepCopy(
            this ILocalVariableDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LocalVariableDataSetterTranslationCommon)((ILocalVariableDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ILocalVariableData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((LocalVariableDataSetterCommon)((ILocalVariableDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    #region Field Index
    internal enum LocalVariableData_FieldIndex
    {
        Index = 0,
        Unknown = 1,
        Flags = 2,
        Unknown2 = 3,
    }
    #endregion

    #region Registration
    internal partial class LocalVariableData_Registration : ILoquiRegistration
    {
        public static readonly LocalVariableData_Registration Instance = new LocalVariableData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(LocalVariableData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LocalVariableData.ErrorMask);

        public static readonly Type ClassType = typeof(LocalVariableData);

        public static readonly Type GetterType = typeof(ILocalVariableDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILocalVariableData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.LocalVariableData";

        public const string Name = "LocalVariableData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.SLSD;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.SLSD);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(LocalVariableDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class LocalVariableDataSetterCommon
    {
        public static readonly LocalVariableDataSetterCommon Instance = new LocalVariableDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILocalVariableData item)
        {
            ClearPartial();
            item.Index = default(Int32);
            item.Unknown = new byte[12];
            item.Flags = default(Script.LocalVariableFlag);
            item.Unknown2 = default(Int32);
        }
        
        #region Mutagen
        public void RemapLinks(ILocalVariableData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILocalVariableData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.SLSD),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: LocalVariableDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class LocalVariableDataCommon
    {
        public static readonly LocalVariableDataCommon Instance = new LocalVariableDataCommon();

        public LocalVariableData.Mask<bool> GetEqualsMask(
            ILocalVariableDataGetter item,
            ILocalVariableDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LocalVariableData.Mask<bool>(false);
            ((LocalVariableDataCommon)((ILocalVariableDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILocalVariableDataGetter item,
            ILocalVariableDataGetter rhs,
            LocalVariableData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Index = item.Index == rhs.Index;
            ret.Unknown = MemoryExtensions.SequenceEqual(item.Unknown.Span, rhs.Unknown.Span);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Unknown2 = item.Unknown2 == rhs.Unknown2;
        }
        
        public string Print(
            ILocalVariableDataGetter item,
            string? name = null,
            LocalVariableData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ILocalVariableDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            LocalVariableData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"LocalVariableData =>");
            }
            else
            {
                sb.AppendLine($"{name} (LocalVariableData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ILocalVariableDataGetter item,
            StructuredStringBuilder sb,
            LocalVariableData.Mask<bool>? printMask = null)
        {
            if (printMask?.Index ?? true)
            {
                sb.AppendItem(item.Index, "Index");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendLine($"Unknown => {SpanExt.ToHexString(item.Unknown)}");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Unknown2 ?? true)
            {
                sb.AppendItem(item.Unknown2, "Unknown2");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILocalVariableDataGetter? lhs,
            ILocalVariableDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)LocalVariableData_FieldIndex.Index) ?? true))
            {
                if (lhs.Index != rhs.Index) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LocalVariableData_FieldIndex.Unknown) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.Unknown.Span, rhs.Unknown.Span)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LocalVariableData_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LocalVariableData_FieldIndex.Unknown2) ?? true))
            {
                if (lhs.Unknown2 != rhs.Unknown2) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ILocalVariableDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Index);
            hash.Add(item.Unknown);
            hash.Add(item.Flags);
            hash.Add(item.Unknown2);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return LocalVariableData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ILocalVariableDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class LocalVariableDataSetterTranslationCommon
    {
        public static readonly LocalVariableDataSetterTranslationCommon Instance = new LocalVariableDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ILocalVariableData item,
            ILocalVariableDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)LocalVariableData_FieldIndex.Index) ?? true))
            {
                item.Index = rhs.Index;
            }
            if ((copyMask?.GetShouldTranslate((int)LocalVariableData_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)LocalVariableData_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)LocalVariableData_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
        }
        
        #endregion
        
        public LocalVariableData DeepCopy(
            ILocalVariableDataGetter item,
            LocalVariableData.TranslationMask? copyMask = null)
        {
            LocalVariableData ret = (LocalVariableData)((LocalVariableDataCommon)((ILocalVariableDataGetter)item).CommonInstance()!).GetNew();
            ((LocalVariableDataSetterTranslationCommon)((ILocalVariableDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public LocalVariableData DeepCopy(
            ILocalVariableDataGetter item,
            out LocalVariableData.ErrorMask errorMask,
            LocalVariableData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LocalVariableData ret = (LocalVariableData)((LocalVariableDataCommon)((ILocalVariableDataGetter)item).CommonInstance()!).GetNew();
            ((LocalVariableDataSetterTranslationCommon)((ILocalVariableDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = LocalVariableData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public LocalVariableData DeepCopy(
            ILocalVariableDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            LocalVariableData ret = (LocalVariableData)((LocalVariableDataCommon)((ILocalVariableDataGetter)item).CommonInstance()!).GetNew();
            ((LocalVariableDataSetterTranslationCommon)((ILocalVariableDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class LocalVariableData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LocalVariableData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => LocalVariableData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LocalVariableDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return LocalVariableDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LocalVariableDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILocalVariableDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ILocalVariableDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ILocalVariableDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion
{
    public partial class LocalVariableDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly LocalVariableDataBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ILocalVariableDataGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Index);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unknown);
            EnumBinaryTranslation<Script.LocalVariableFlag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Flags,
                length: 4);
            writer.Write(item.Unknown2);
        }

        public void Write(
            MutagenWriter writer,
            ILocalVariableDataGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.SLSD),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ILocalVariableDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class LocalVariableDataBinaryCreateTranslation
    {
        public static readonly LocalVariableDataBinaryCreateTranslation Instance = new LocalVariableDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ILocalVariableData item,
            MutagenFrame frame)
        {
            item.Index = frame.ReadInt32();
            item.Unknown = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(12));
            item.Flags = EnumBinaryTranslation<Script.LocalVariableFlag, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
            item.Unknown2 = frame.ReadInt32();
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class LocalVariableDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ILocalVariableDataGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LocalVariableDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion
{
    internal partial class LocalVariableDataBinaryOverlay :
        PluginBinaryOverlay,
        ILocalVariableDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LocalVariableData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => LocalVariableData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LocalVariableDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LocalVariableDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILocalVariableDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ILocalVariableDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ILocalVariableDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LocalVariableDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LocalVariableDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Int32 Index => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0x0, 0x4));
        public ReadOnlyMemorySlice<Byte> Unknown => _structData.Span.Slice(0x4, 0xC).ToArray();
        public Script.LocalVariableFlag Flags => (Script.LocalVariableFlag)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0x10, 0x4));
        public Int32 Unknown2 => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0x14, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected LocalVariableDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ILocalVariableDataGetter LocalVariableDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x18,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new LocalVariableDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x18 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ILocalVariableDataGetter LocalVariableDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return LocalVariableDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            LocalVariableDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ILocalVariableDataGetter rhs) return false;
            return ((LocalVariableDataCommon)((ILocalVariableDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ILocalVariableDataGetter? obj)
        {
            return ((LocalVariableDataCommon)((ILocalVariableDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((LocalVariableDataCommon)((ILocalVariableDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

