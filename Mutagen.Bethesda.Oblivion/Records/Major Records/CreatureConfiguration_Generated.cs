/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class CreatureConfiguration :
        ICreatureConfiguration,
        IEquatable<ICreatureConfigurationGetter>,
        ILoquiObjectSetter<CreatureConfiguration>
    {
        #region Ctor
        public CreatureConfiguration()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Flags
        public Creature.CreatureFlag Flags { get; set; } = default;
        #endregion
        #region BaseSpellPoints
        public UInt16 BaseSpellPoints { get; set; } = default;
        #endregion
        #region Fatigue
        public UInt16 Fatigue { get; set; } = default;
        #endregion
        #region BarterGold
        public UInt16 BarterGold { get; set; } = default;
        #endregion
        #region LevelOffset
        public Int16 LevelOffset { get; set; } = default;
        #endregion
        #region CalcMin
        public UInt16 CalcMin { get; set; } = default;
        #endregion
        #region CalcMax
        public UInt16 CalcMax { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CreatureConfigurationMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICreatureConfigurationGetter rhs) return false;
            return ((CreatureConfigurationCommon)((ICreatureConfigurationGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(ICreatureConfigurationGetter? obj)
        {
            return ((CreatureConfigurationCommon)((ICreatureConfigurationGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((CreatureConfigurationCommon)((ICreatureConfigurationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Flags = initialValue;
                this.BaseSpellPoints = initialValue;
                this.Fatigue = initialValue;
                this.BarterGold = initialValue;
                this.LevelOffset = initialValue;
                this.CalcMin = initialValue;
                this.CalcMax = initialValue;
            }

            public Mask(
                TItem Flags,
                TItem BaseSpellPoints,
                TItem Fatigue,
                TItem BarterGold,
                TItem LevelOffset,
                TItem CalcMin,
                TItem CalcMax)
            {
                this.Flags = Flags;
                this.BaseSpellPoints = BaseSpellPoints;
                this.Fatigue = Fatigue;
                this.BarterGold = BarterGold;
                this.LevelOffset = LevelOffset;
                this.CalcMin = CalcMin;
                this.CalcMax = CalcMax;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Flags;
            public TItem BaseSpellPoints;
            public TItem Fatigue;
            public TItem BarterGold;
            public TItem LevelOffset;
            public TItem CalcMin;
            public TItem CalcMax;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.BaseSpellPoints, rhs.BaseSpellPoints)) return false;
                if (!object.Equals(this.Fatigue, rhs.Fatigue)) return false;
                if (!object.Equals(this.BarterGold, rhs.BarterGold)) return false;
                if (!object.Equals(this.LevelOffset, rhs.LevelOffset)) return false;
                if (!object.Equals(this.CalcMin, rhs.CalcMin)) return false;
                if (!object.Equals(this.CalcMax, rhs.CalcMax)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Flags);
                hash.Add(this.BaseSpellPoints);
                hash.Add(this.Fatigue);
                hash.Add(this.BarterGold);
                hash.Add(this.LevelOffset);
                hash.Add(this.CalcMin);
                hash.Add(this.CalcMax);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Flags)) return false;
                if (!eval(this.BaseSpellPoints)) return false;
                if (!eval(this.Fatigue)) return false;
                if (!eval(this.BarterGold)) return false;
                if (!eval(this.LevelOffset)) return false;
                if (!eval(this.CalcMin)) return false;
                if (!eval(this.CalcMax)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Flags)) return true;
                if (eval(this.BaseSpellPoints)) return true;
                if (eval(this.Fatigue)) return true;
                if (eval(this.BarterGold)) return true;
                if (eval(this.LevelOffset)) return true;
                if (eval(this.CalcMin)) return true;
                if (eval(this.CalcMax)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CreatureConfiguration.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Flags = eval(this.Flags);
                obj.BaseSpellPoints = eval(this.BaseSpellPoints);
                obj.Fatigue = eval(this.Fatigue);
                obj.BarterGold = eval(this.BarterGold);
                obj.LevelOffset = eval(this.LevelOffset);
                obj.CalcMin = eval(this.CalcMin);
                obj.CalcMax = eval(this.CalcMax);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(CreatureConfiguration.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, CreatureConfiguration.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(CreatureConfiguration.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.BaseSpellPoints ?? true)
                    {
                        fg.AppendItem(BaseSpellPoints, "BaseSpellPoints");
                    }
                    if (printMask?.Fatigue ?? true)
                    {
                        fg.AppendItem(Fatigue, "Fatigue");
                    }
                    if (printMask?.BarterGold ?? true)
                    {
                        fg.AppendItem(BarterGold, "BarterGold");
                    }
                    if (printMask?.LevelOffset ?? true)
                    {
                        fg.AppendItem(LevelOffset, "LevelOffset");
                    }
                    if (printMask?.CalcMin ?? true)
                    {
                        fg.AppendItem(CalcMin, "CalcMin");
                    }
                    if (printMask?.CalcMax ?? true)
                    {
                        fg.AppendItem(CalcMax, "CalcMax");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Flags;
            public Exception? BaseSpellPoints;
            public Exception? Fatigue;
            public Exception? BarterGold;
            public Exception? LevelOffset;
            public Exception? CalcMin;
            public Exception? CalcMax;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                CreatureConfiguration_FieldIndex enu = (CreatureConfiguration_FieldIndex)index;
                switch (enu)
                {
                    case CreatureConfiguration_FieldIndex.Flags:
                        return Flags;
                    case CreatureConfiguration_FieldIndex.BaseSpellPoints:
                        return BaseSpellPoints;
                    case CreatureConfiguration_FieldIndex.Fatigue:
                        return Fatigue;
                    case CreatureConfiguration_FieldIndex.BarterGold:
                        return BarterGold;
                    case CreatureConfiguration_FieldIndex.LevelOffset:
                        return LevelOffset;
                    case CreatureConfiguration_FieldIndex.CalcMin:
                        return CalcMin;
                    case CreatureConfiguration_FieldIndex.CalcMax:
                        return CalcMax;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                CreatureConfiguration_FieldIndex enu = (CreatureConfiguration_FieldIndex)index;
                switch (enu)
                {
                    case CreatureConfiguration_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case CreatureConfiguration_FieldIndex.BaseSpellPoints:
                        this.BaseSpellPoints = ex;
                        break;
                    case CreatureConfiguration_FieldIndex.Fatigue:
                        this.Fatigue = ex;
                        break;
                    case CreatureConfiguration_FieldIndex.BarterGold:
                        this.BarterGold = ex;
                        break;
                    case CreatureConfiguration_FieldIndex.LevelOffset:
                        this.LevelOffset = ex;
                        break;
                    case CreatureConfiguration_FieldIndex.CalcMin:
                        this.CalcMin = ex;
                        break;
                    case CreatureConfiguration_FieldIndex.CalcMax:
                        this.CalcMax = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                CreatureConfiguration_FieldIndex enu = (CreatureConfiguration_FieldIndex)index;
                switch (enu)
                {
                    case CreatureConfiguration_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case CreatureConfiguration_FieldIndex.BaseSpellPoints:
                        this.BaseSpellPoints = (Exception?)obj;
                        break;
                    case CreatureConfiguration_FieldIndex.Fatigue:
                        this.Fatigue = (Exception?)obj;
                        break;
                    case CreatureConfiguration_FieldIndex.BarterGold:
                        this.BarterGold = (Exception?)obj;
                        break;
                    case CreatureConfiguration_FieldIndex.LevelOffset:
                        this.LevelOffset = (Exception?)obj;
                        break;
                    case CreatureConfiguration_FieldIndex.CalcMin:
                        this.CalcMin = (Exception?)obj;
                        break;
                    case CreatureConfiguration_FieldIndex.CalcMax:
                        this.CalcMax = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Flags != null) return true;
                if (BaseSpellPoints != null) return true;
                if (Fatigue != null) return true;
                if (BarterGold != null) return true;
                if (LevelOffset != null) return true;
                if (CalcMin != null) return true;
                if (CalcMax != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(BaseSpellPoints, "BaseSpellPoints");
                fg.AppendItem(Fatigue, "Fatigue");
                fg.AppendItem(BarterGold, "BarterGold");
                fg.AppendItem(LevelOffset, "LevelOffset");
                fg.AppendItem(CalcMin, "CalcMin");
                fg.AppendItem(CalcMax, "CalcMax");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.BaseSpellPoints = this.BaseSpellPoints.Combine(rhs.BaseSpellPoints);
                ret.Fatigue = this.Fatigue.Combine(rhs.Fatigue);
                ret.BarterGold = this.BarterGold.Combine(rhs.BarterGold);
                ret.LevelOffset = this.LevelOffset.Combine(rhs.LevelOffset);
                ret.CalcMin = this.CalcMin.Combine(rhs.CalcMin);
                ret.CalcMax = this.CalcMax.Combine(rhs.CalcMax);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Flags;
            public bool BaseSpellPoints;
            public bool Fatigue;
            public bool BarterGold;
            public bool LevelOffset;
            public bool CalcMin;
            public bool CalcMax;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Flags = defaultOn;
                this.BaseSpellPoints = defaultOn;
                this.Fatigue = defaultOn;
                this.BarterGold = defaultOn;
                this.LevelOffset = defaultOn;
                this.CalcMin = defaultOn;
                this.CalcMax = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Flags, null));
                ret.Add((BaseSpellPoints, null));
                ret.Add((Fatigue, null));
                ret.Add((BarterGold, null));
                ret.Add((LevelOffset, null));
                ret.Add((CalcMin, null));
                ret.Add((CalcMax, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = CreatureConfiguration_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CreatureConfigurationBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((CreatureConfigurationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static CreatureConfiguration CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new CreatureConfiguration();
            ((CreatureConfigurationSetterCommon)((ICreatureConfigurationGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CreatureConfiguration item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((CreatureConfigurationSetterCommon)((ICreatureConfigurationGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static CreatureConfiguration GetNew()
        {
            return new CreatureConfiguration();
        }

    }
    #endregion

    #region Interface
    public partial interface ICreatureConfiguration :
        ICreatureConfigurationGetter,
        ILoquiObjectSetter<ICreatureConfiguration>
    {
        new Creature.CreatureFlag Flags { get; set; }
        new UInt16 BaseSpellPoints { get; set; }
        new UInt16 Fatigue { get; set; }
        new UInt16 BarterGold { get; set; }
        new Int16 LevelOffset { get; set; }
        new UInt16 CalcMin { get; set; }
        new UInt16 CalcMax { get; set; }
    }

    public partial interface ICreatureConfigurationGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<ICreatureConfigurationGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => CreatureConfiguration_Registration.Instance;
        Creature.CreatureFlag Flags { get; }
        UInt16 BaseSpellPoints { get; }
        UInt16 Fatigue { get; }
        UInt16 BarterGold { get; }
        Int16 LevelOffset { get; }
        UInt16 CalcMin { get; }
        UInt16 CalcMax { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CreatureConfigurationMixIn
    {
        public static void Clear(this ICreatureConfiguration item)
        {
            ((CreatureConfigurationSetterCommon)((ICreatureConfigurationGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CreatureConfiguration.Mask<bool> GetEqualsMask(
            this ICreatureConfigurationGetter item,
            ICreatureConfigurationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CreatureConfigurationCommon)((ICreatureConfigurationGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICreatureConfigurationGetter item,
            string? name = null,
            CreatureConfiguration.Mask<bool>? printMask = null)
        {
            return ((CreatureConfigurationCommon)((ICreatureConfigurationGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICreatureConfigurationGetter item,
            FileGeneration fg,
            string? name = null,
            CreatureConfiguration.Mask<bool>? printMask = null)
        {
            ((CreatureConfigurationCommon)((ICreatureConfigurationGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICreatureConfigurationGetter item,
            ICreatureConfigurationGetter rhs,
            CreatureConfiguration.TranslationMask? equalsMask = null)
        {
            return ((CreatureConfigurationCommon)((ICreatureConfigurationGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ICreatureConfiguration lhs,
            ICreatureConfigurationGetter rhs)
        {
            ((CreatureConfigurationSetterTranslationCommon)((ICreatureConfigurationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICreatureConfiguration lhs,
            ICreatureConfigurationGetter rhs,
            CreatureConfiguration.TranslationMask? copyMask = null)
        {
            ((CreatureConfigurationSetterTranslationCommon)((ICreatureConfigurationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICreatureConfiguration lhs,
            ICreatureConfigurationGetter rhs,
            out CreatureConfiguration.ErrorMask errorMask,
            CreatureConfiguration.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CreatureConfigurationSetterTranslationCommon)((ICreatureConfigurationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = CreatureConfiguration.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICreatureConfiguration lhs,
            ICreatureConfigurationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CreatureConfigurationSetterTranslationCommon)((ICreatureConfigurationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static CreatureConfiguration DeepCopy(
            this ICreatureConfigurationGetter item,
            CreatureConfiguration.TranslationMask? copyMask = null)
        {
            return ((CreatureConfigurationSetterTranslationCommon)((ICreatureConfigurationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CreatureConfiguration DeepCopy(
            this ICreatureConfigurationGetter item,
            out CreatureConfiguration.ErrorMask errorMask,
            CreatureConfiguration.TranslationMask? copyMask = null)
        {
            return ((CreatureConfigurationSetterTranslationCommon)((ICreatureConfigurationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CreatureConfiguration DeepCopy(
            this ICreatureConfigurationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CreatureConfigurationSetterTranslationCommon)((ICreatureConfigurationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICreatureConfiguration item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((CreatureConfigurationSetterCommon)((ICreatureConfigurationGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum CreatureConfiguration_FieldIndex
    {
        Flags = 0,
        BaseSpellPoints = 1,
        Fatigue = 2,
        BarterGold = 3,
        LevelOffset = 4,
        CalcMin = 5,
        CalcMax = 6,
    }
    #endregion

    #region Registration
    public partial class CreatureConfiguration_Registration : ILoquiRegistration
    {
        public static readonly CreatureConfiguration_Registration Instance = new CreatureConfiguration_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 183,
            version: 0);

        public const string GUID = "47d2aad4-4bca-4222-8f0c-6a7ed5899187";

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(CreatureConfiguration.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CreatureConfiguration.ErrorMask);

        public static readonly Type ClassType = typeof(CreatureConfiguration);

        public static readonly Type GetterType = typeof(ICreatureConfigurationGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICreatureConfiguration);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.CreatureConfiguration";

        public const string Name = "CreatureConfiguration";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ACBS;
        public static readonly Type BinaryWriteTranslation = typeof(CreatureConfigurationBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class CreatureConfigurationSetterCommon
    {
        public static readonly CreatureConfigurationSetterCommon Instance = new CreatureConfigurationSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICreatureConfiguration item)
        {
            ClearPartial();
            item.Flags = default;
            item.BaseSpellPoints = default;
            item.Fatigue = default;
            item.BarterGold = default;
            item.LevelOffset = default;
            item.CalcMin = default;
            item.CalcMax = default;
        }
        
        #region Mutagen
        public void RemapLinks(ICreatureConfiguration obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICreatureConfiguration item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.ACBS),
                translationParams?.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: CreatureConfigurationBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class CreatureConfigurationCommon
    {
        public static readonly CreatureConfigurationCommon Instance = new CreatureConfigurationCommon();

        public CreatureConfiguration.Mask<bool> GetEqualsMask(
            ICreatureConfigurationGetter item,
            ICreatureConfigurationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CreatureConfiguration.Mask<bool>(false);
            ((CreatureConfigurationCommon)((ICreatureConfigurationGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICreatureConfigurationGetter item,
            ICreatureConfigurationGetter rhs,
            CreatureConfiguration.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Flags = item.Flags == rhs.Flags;
            ret.BaseSpellPoints = item.BaseSpellPoints == rhs.BaseSpellPoints;
            ret.Fatigue = item.Fatigue == rhs.Fatigue;
            ret.BarterGold = item.BarterGold == rhs.BarterGold;
            ret.LevelOffset = item.LevelOffset == rhs.LevelOffset;
            ret.CalcMin = item.CalcMin == rhs.CalcMin;
            ret.CalcMax = item.CalcMax == rhs.CalcMax;
        }
        
        public string ToString(
            ICreatureConfigurationGetter item,
            string? name = null,
            CreatureConfiguration.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ICreatureConfigurationGetter item,
            FileGeneration fg,
            string? name = null,
            CreatureConfiguration.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"CreatureConfiguration =>");
            }
            else
            {
                fg.AppendLine($"{name} (CreatureConfiguration) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ICreatureConfigurationGetter item,
            FileGeneration fg,
            CreatureConfiguration.Mask<bool>? printMask = null)
        {
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.BaseSpellPoints ?? true)
            {
                fg.AppendItem(item.BaseSpellPoints, "BaseSpellPoints");
            }
            if (printMask?.Fatigue ?? true)
            {
                fg.AppendItem(item.Fatigue, "Fatigue");
            }
            if (printMask?.BarterGold ?? true)
            {
                fg.AppendItem(item.BarterGold, "BarterGold");
            }
            if (printMask?.LevelOffset ?? true)
            {
                fg.AppendItem(item.LevelOffset, "LevelOffset");
            }
            if (printMask?.CalcMin ?? true)
            {
                fg.AppendItem(item.CalcMin, "CalcMin");
            }
            if (printMask?.CalcMax ?? true)
            {
                fg.AppendItem(item.CalcMax, "CalcMax");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICreatureConfigurationGetter? lhs,
            ICreatureConfigurationGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)CreatureConfiguration_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CreatureConfiguration_FieldIndex.BaseSpellPoints) ?? true))
            {
                if (lhs.BaseSpellPoints != rhs.BaseSpellPoints) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CreatureConfiguration_FieldIndex.Fatigue) ?? true))
            {
                if (lhs.Fatigue != rhs.Fatigue) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CreatureConfiguration_FieldIndex.BarterGold) ?? true))
            {
                if (lhs.BarterGold != rhs.BarterGold) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CreatureConfiguration_FieldIndex.LevelOffset) ?? true))
            {
                if (lhs.LevelOffset != rhs.LevelOffset) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CreatureConfiguration_FieldIndex.CalcMin) ?? true))
            {
                if (lhs.CalcMin != rhs.CalcMin) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CreatureConfiguration_FieldIndex.CalcMax) ?? true))
            {
                if (lhs.CalcMax != rhs.CalcMax) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ICreatureConfigurationGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Flags);
            hash.Add(item.BaseSpellPoints);
            hash.Add(item.Fatigue);
            hash.Add(item.BarterGold);
            hash.Add(item.LevelOffset);
            hash.Add(item.CalcMin);
            hash.Add(item.CalcMax);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return CreatureConfiguration.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(ICreatureConfigurationGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class CreatureConfigurationSetterTranslationCommon
    {
        public static readonly CreatureConfigurationSetterTranslationCommon Instance = new CreatureConfigurationSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICreatureConfiguration item,
            ICreatureConfigurationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)CreatureConfiguration_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureConfiguration_FieldIndex.BaseSpellPoints) ?? true))
            {
                item.BaseSpellPoints = rhs.BaseSpellPoints;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureConfiguration_FieldIndex.Fatigue) ?? true))
            {
                item.Fatigue = rhs.Fatigue;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureConfiguration_FieldIndex.BarterGold) ?? true))
            {
                item.BarterGold = rhs.BarterGold;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureConfiguration_FieldIndex.LevelOffset) ?? true))
            {
                item.LevelOffset = rhs.LevelOffset;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureConfiguration_FieldIndex.CalcMin) ?? true))
            {
                item.CalcMin = rhs.CalcMin;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureConfiguration_FieldIndex.CalcMax) ?? true))
            {
                item.CalcMax = rhs.CalcMax;
            }
        }
        
        #endregion
        
        public CreatureConfiguration DeepCopy(
            ICreatureConfigurationGetter item,
            CreatureConfiguration.TranslationMask? copyMask = null)
        {
            CreatureConfiguration ret = (CreatureConfiguration)((CreatureConfigurationCommon)((ICreatureConfigurationGetter)item).CommonInstance()!).GetNew();
            ((CreatureConfigurationSetterTranslationCommon)((ICreatureConfigurationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public CreatureConfiguration DeepCopy(
            ICreatureConfigurationGetter item,
            out CreatureConfiguration.ErrorMask errorMask,
            CreatureConfiguration.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CreatureConfiguration ret = (CreatureConfiguration)((CreatureConfigurationCommon)((ICreatureConfigurationGetter)item).CommonInstance()!).GetNew();
            ((CreatureConfigurationSetterTranslationCommon)((ICreatureConfigurationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = CreatureConfiguration.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public CreatureConfiguration DeepCopy(
            ICreatureConfigurationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CreatureConfiguration ret = (CreatureConfiguration)((CreatureConfigurationCommon)((ICreatureConfigurationGetter)item).CommonInstance()!).GetNew();
            ((CreatureConfigurationSetterTranslationCommon)((ICreatureConfigurationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class CreatureConfiguration
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CreatureConfiguration_Registration.Instance;
        public static CreatureConfiguration_Registration StaticRegistration => CreatureConfiguration_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CreatureConfigurationCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return CreatureConfigurationSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CreatureConfigurationSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICreatureConfigurationGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ICreatureConfigurationGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ICreatureConfigurationGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class CreatureConfigurationBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static CreatureConfigurationBinaryWriteTranslation Instance = new CreatureConfigurationBinaryWriteTranslation();

        public static void WriteEmbedded(
            ICreatureConfigurationGetter item,
            MutagenWriter writer)
        {
            EnumBinaryTranslation<Creature.CreatureFlag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Flags,
                length: 4);
            writer.Write(item.BaseSpellPoints);
            writer.Write(item.Fatigue);
            writer.Write(item.BarterGold);
            writer.Write(item.LevelOffset);
            writer.Write(item.CalcMin);
            writer.Write(item.CalcMax);
        }

        public void Write(
            MutagenWriter writer,
            ICreatureConfigurationGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.ACBS),
                overflowRecord: translationParams?.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (ICreatureConfigurationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class CreatureConfigurationBinaryCreateTranslation
    {
        public readonly static CreatureConfigurationBinaryCreateTranslation Instance = new CreatureConfigurationBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ICreatureConfiguration item,
            MutagenFrame frame)
        {
            item.Flags = EnumBinaryTranslation<Creature.CreatureFlag, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
            item.BaseSpellPoints = frame.ReadUInt16();
            item.Fatigue = frame.ReadUInt16();
            item.BarterGold = frame.ReadUInt16();
            item.LevelOffset = frame.ReadInt16();
            item.CalcMin = frame.ReadUInt16();
            item.CalcMax = frame.ReadUInt16();
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class CreatureConfigurationBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ICreatureConfigurationGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((CreatureConfigurationBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class CreatureConfigurationBinaryOverlay :
        PluginBinaryOverlay,
        ICreatureConfigurationGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CreatureConfiguration_Registration.Instance;
        public static CreatureConfiguration_Registration StaticRegistration => CreatureConfiguration_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CreatureConfigurationCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CreatureConfigurationSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICreatureConfigurationGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ICreatureConfigurationGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ICreatureConfigurationGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CreatureConfigurationBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((CreatureConfigurationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Creature.CreatureFlag Flags => (Creature.CreatureFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x0, 0x4));
        public UInt16 BaseSpellPoints => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(0x4, 0x2));
        public UInt16 Fatigue => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(0x6, 0x2));
        public UInt16 BarterGold => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(0x8, 0x2));
        public Int16 LevelOffset => BinaryPrimitives.ReadInt16LittleEndian(_data.Slice(0xA, 0x2));
        public UInt16 CalcMin => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(0xC, 0x2));
        public UInt16 CalcMax => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(0xE, 0x2));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CreatureConfigurationBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static CreatureConfigurationBinaryOverlay CreatureConfigurationFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new CreatureConfigurationBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants, parseParams),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static CreatureConfigurationBinaryOverlay CreatureConfigurationFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return CreatureConfigurationFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CreatureConfigurationMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICreatureConfigurationGetter rhs) return false;
            return ((CreatureConfigurationCommon)((ICreatureConfigurationGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(ICreatureConfigurationGetter? obj)
        {
            return ((CreatureConfigurationCommon)((ICreatureConfigurationGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((CreatureConfigurationCommon)((ICreatureConfigurationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

