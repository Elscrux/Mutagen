/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.RecordTypeMapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class PathGrid :
        OblivionMajorRecord,
        IEquatable<IPathGridGetter>,
        ILoquiObjectSetter<PathGrid>,
        IPathGridInternal
    {
        #region Ctor
        protected PathGrid()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region PointToPointConnections
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<PathGridPoint>? _PointToPointConnections;
        public ExtendedList<PathGridPoint>? PointToPointConnections
        {
            get => this._PointToPointConnections;
            set => this._PointToPointConnections = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPathGridPointGetter>? IPathGridGetter.PointToPointConnections => _PointToPointConnections;
        #endregion

        #endregion
        #region PGAG
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _PGAG;
        public MemorySlice<Byte>? PGAG
        {
            get => this._PGAG;
            set => this._PGAG = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPathGridGetter.PGAG => this.PGAG;
        #endregion
        #region InterCellConnections
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<InterCellPoint>? _InterCellConnections;
        public ExtendedList<InterCellPoint>? InterCellConnections
        {
            get => this._InterCellConnections;
            set => this._InterCellConnections = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IInterCellPointGetter>? IPathGridGetter.InterCellConnections => _InterCellConnections;
        #endregion

        #endregion
        #region PointToReferenceMappings
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<PointToReferenceMapping> _PointToReferenceMappings = new ExtendedList<PointToReferenceMapping>();
        public ExtendedList<PointToReferenceMapping> PointToReferenceMappings
        {
            get => this._PointToReferenceMappings;
            init => this._PointToReferenceMappings = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPointToReferenceMappingGetter> IPathGridGetter.PointToReferenceMappings => _PointToReferenceMappings;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PathGridMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.PointToPointConnections = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PathGridPoint.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, PathGridPoint.Mask<TItem>?>>());
                this.PGAG = initialValue;
                this.InterCellConnections = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, InterCellPoint.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, InterCellPoint.Mask<TItem>?>>());
                this.PointToReferenceMappings = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PointToReferenceMapping.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, PointToReferenceMapping.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem PointToPointConnections,
                TItem PGAG,
                TItem InterCellConnections,
                TItem PointToReferenceMappings)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.PointToPointConnections = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PathGridPoint.Mask<TItem>?>>?>(PointToPointConnections, Enumerable.Empty<MaskItemIndexed<TItem, PathGridPoint.Mask<TItem>?>>());
                this.PGAG = PGAG;
                this.InterCellConnections = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, InterCellPoint.Mask<TItem>?>>?>(InterCellConnections, Enumerable.Empty<MaskItemIndexed<TItem, InterCellPoint.Mask<TItem>?>>());
                this.PointToReferenceMappings = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PointToReferenceMapping.Mask<TItem>?>>?>(PointToReferenceMappings, Enumerable.Empty<MaskItemIndexed<TItem, PointToReferenceMapping.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PathGridPoint.Mask<TItem>?>>?>? PointToPointConnections;
            public TItem PGAG;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, InterCellPoint.Mask<TItem>?>>?>? InterCellConnections;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PointToReferenceMapping.Mask<TItem>?>>?>? PointToReferenceMappings;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.PointToPointConnections, rhs.PointToPointConnections)) return false;
                if (!object.Equals(this.PGAG, rhs.PGAG)) return false;
                if (!object.Equals(this.InterCellConnections, rhs.InterCellConnections)) return false;
                if (!object.Equals(this.PointToReferenceMappings, rhs.PointToReferenceMappings)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.PointToPointConnections);
                hash.Add(this.PGAG);
                hash.Add(this.InterCellConnections);
                hash.Add(this.PointToReferenceMappings);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.PointToPointConnections != null)
                {
                    if (!eval(this.PointToPointConnections.Overall)) return false;
                    if (this.PointToPointConnections.Specific != null)
                    {
                        foreach (var item in this.PointToPointConnections.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.PGAG)) return false;
                if (this.InterCellConnections != null)
                {
                    if (!eval(this.InterCellConnections.Overall)) return false;
                    if (this.InterCellConnections.Specific != null)
                    {
                        foreach (var item in this.InterCellConnections.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.PointToReferenceMappings != null)
                {
                    if (!eval(this.PointToReferenceMappings.Overall)) return false;
                    if (this.PointToReferenceMappings.Specific != null)
                    {
                        foreach (var item in this.PointToReferenceMappings.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.PointToPointConnections != null)
                {
                    if (eval(this.PointToPointConnections.Overall)) return true;
                    if (this.PointToPointConnections.Specific != null)
                    {
                        foreach (var item in this.PointToPointConnections.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.PGAG)) return true;
                if (this.InterCellConnections != null)
                {
                    if (eval(this.InterCellConnections.Overall)) return true;
                    if (this.InterCellConnections.Specific != null)
                    {
                        foreach (var item in this.InterCellConnections.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.PointToReferenceMappings != null)
                {
                    if (eval(this.PointToReferenceMappings.Overall)) return true;
                    if (this.PointToReferenceMappings.Specific != null)
                    {
                        foreach (var item in this.PointToReferenceMappings.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PathGrid.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (PointToPointConnections != null)
                {
                    obj.PointToPointConnections = new MaskItem<R, IEnumerable<MaskItemIndexed<R, PathGridPoint.Mask<R>?>>?>(eval(this.PointToPointConnections.Overall), Enumerable.Empty<MaskItemIndexed<R, PathGridPoint.Mask<R>?>>());
                    if (PointToPointConnections.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, PathGridPoint.Mask<R>?>>();
                        obj.PointToPointConnections.Specific = l;
                        foreach (var item in PointToPointConnections.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, PathGridPoint.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, PathGridPoint.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.PGAG = eval(this.PGAG);
                if (InterCellConnections != null)
                {
                    obj.InterCellConnections = new MaskItem<R, IEnumerable<MaskItemIndexed<R, InterCellPoint.Mask<R>?>>?>(eval(this.InterCellConnections.Overall), Enumerable.Empty<MaskItemIndexed<R, InterCellPoint.Mask<R>?>>());
                    if (InterCellConnections.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, InterCellPoint.Mask<R>?>>();
                        obj.InterCellConnections.Specific = l;
                        foreach (var item in InterCellConnections.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, InterCellPoint.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, InterCellPoint.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (PointToReferenceMappings != null)
                {
                    obj.PointToReferenceMappings = new MaskItem<R, IEnumerable<MaskItemIndexed<R, PointToReferenceMapping.Mask<R>?>>?>(eval(this.PointToReferenceMappings.Overall), Enumerable.Empty<MaskItemIndexed<R, PointToReferenceMapping.Mask<R>?>>());
                    if (PointToReferenceMappings.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, PointToReferenceMapping.Mask<R>?>>();
                        obj.PointToReferenceMappings.Specific = l;
                        foreach (var item in PointToReferenceMappings.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, PointToReferenceMapping.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, PointToReferenceMapping.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(PathGrid.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, PathGrid.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(PathGrid.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if ((printMask?.PointToPointConnections?.Overall ?? true)
                        && PointToPointConnections is {} PointToPointConnectionsItem)
                    {
                        fg.AppendLine("PointToPointConnections =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(PointToPointConnectionsItem.Overall);
                            if (PointToPointConnectionsItem.Specific != null)
                            {
                                foreach (var subItem in PointToPointConnectionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.PGAG ?? true)
                    {
                        fg.AppendItem(PGAG, "PGAG");
                    }
                    if ((printMask?.InterCellConnections?.Overall ?? true)
                        && InterCellConnections is {} InterCellConnectionsItem)
                    {
                        fg.AppendLine("InterCellConnections =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(InterCellConnectionsItem.Overall);
                            if (InterCellConnectionsItem.Specific != null)
                            {
                                foreach (var subItem in InterCellConnectionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.PointToReferenceMappings?.Overall ?? true)
                        && PointToReferenceMappings is {} PointToReferenceMappingsItem)
                    {
                        fg.AppendLine("PointToReferenceMappings =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(PointToReferenceMappingsItem.Overall);
                            if (PointToReferenceMappingsItem.Specific != null)
                            {
                                foreach (var subItem in PointToReferenceMappingsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PathGridPoint.ErrorMask?>>?>? PointToPointConnections;
            public Exception? PGAG;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, InterCellPoint.ErrorMask?>>?>? InterCellConnections;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PointToReferenceMapping.ErrorMask?>>?>? PointToReferenceMappings;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
                switch (enu)
                {
                    case PathGrid_FieldIndex.PointToPointConnections:
                        return PointToPointConnections;
                    case PathGrid_FieldIndex.PGAG:
                        return PGAG;
                    case PathGrid_FieldIndex.InterCellConnections:
                        return InterCellConnections;
                    case PathGrid_FieldIndex.PointToReferenceMappings:
                        return PointToReferenceMappings;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
                switch (enu)
                {
                    case PathGrid_FieldIndex.PointToPointConnections:
                        this.PointToPointConnections = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PathGridPoint.ErrorMask?>>?>(ex, null);
                        break;
                    case PathGrid_FieldIndex.PGAG:
                        this.PGAG = ex;
                        break;
                    case PathGrid_FieldIndex.InterCellConnections:
                        this.InterCellConnections = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, InterCellPoint.ErrorMask?>>?>(ex, null);
                        break;
                    case PathGrid_FieldIndex.PointToReferenceMappings:
                        this.PointToReferenceMappings = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PointToReferenceMapping.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                PathGrid_FieldIndex enu = (PathGrid_FieldIndex)index;
                switch (enu)
                {
                    case PathGrid_FieldIndex.PointToPointConnections:
                        this.PointToPointConnections = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PathGridPoint.ErrorMask?>>?>)obj;
                        break;
                    case PathGrid_FieldIndex.PGAG:
                        this.PGAG = (Exception?)obj;
                        break;
                    case PathGrid_FieldIndex.InterCellConnections:
                        this.InterCellConnections = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, InterCellPoint.ErrorMask?>>?>)obj;
                        break;
                    case PathGrid_FieldIndex.PointToReferenceMappings:
                        this.PointToReferenceMappings = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PointToReferenceMapping.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (PointToPointConnections != null) return true;
                if (PGAG != null) return true;
                if (InterCellConnections != null) return true;
                if (PointToReferenceMappings != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                if (PointToPointConnections is {} PointToPointConnectionsItem)
                {
                    fg.AppendLine("PointToPointConnections =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(PointToPointConnectionsItem.Overall);
                        if (PointToPointConnectionsItem.Specific != null)
                        {
                            foreach (var subItem in PointToPointConnectionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(PGAG, "PGAG");
                if (InterCellConnections is {} InterCellConnectionsItem)
                {
                    fg.AppendLine("InterCellConnections =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(InterCellConnectionsItem.Overall);
                        if (InterCellConnectionsItem.Specific != null)
                        {
                            foreach (var subItem in InterCellConnectionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (PointToReferenceMappings is {} PointToReferenceMappingsItem)
                {
                    fg.AppendLine("PointToReferenceMappings =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(PointToReferenceMappingsItem.Overall);
                        if (PointToReferenceMappingsItem.Specific != null)
                        {
                            foreach (var subItem in PointToReferenceMappingsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.PointToPointConnections = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PathGridPoint.ErrorMask?>>?>(ExceptionExt.Combine(this.PointToPointConnections?.Overall, rhs.PointToPointConnections?.Overall), ExceptionExt.Combine(this.PointToPointConnections?.Specific, rhs.PointToPointConnections?.Specific));
                ret.PGAG = this.PGAG.Combine(rhs.PGAG);
                ret.InterCellConnections = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, InterCellPoint.ErrorMask?>>?>(ExceptionExt.Combine(this.InterCellConnections?.Overall, rhs.InterCellConnections?.Overall), ExceptionExt.Combine(this.InterCellConnections?.Specific, rhs.InterCellConnections?.Specific));
                ret.PointToReferenceMappings = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PointToReferenceMapping.ErrorMask?>>?>(ExceptionExt.Combine(this.PointToReferenceMappings?.Overall, rhs.PointToReferenceMappings?.Overall), ExceptionExt.Combine(this.PointToReferenceMappings?.Specific, rhs.PointToReferenceMappings?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public PathGridPoint.TranslationMask? PointToPointConnections;
            public bool PGAG;
            public InterCellPoint.TranslationMask? InterCellConnections;
            public PointToReferenceMapping.TranslationMask? PointToReferenceMappings;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.PGAG = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((PointToPointConnections == null ? DefaultOn : !PointToPointConnections.GetCrystal().CopyNothing, PointToPointConnections?.GetCrystal()));
                ret.Add((PGAG, null));
                ret.Add((InterCellConnections == null ? DefaultOn : !InterCellConnections.GetCrystal().CopyNothing, InterCellConnections?.GetCrystal()));
                ret.Add((PointToReferenceMappings == null ? DefaultOn : !PointToReferenceMappings.GetCrystal().CopyNothing, PointToReferenceMappings?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = PathGrid_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => PathGridCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PathGridSetterCommon.Instance.RemapLinks(this, mapping);
        public PathGrid(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private PathGrid(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public PathGrid(IOblivionMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public PathGrid(IOblivionMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<PathGrid>.ToString(this);
        }

        protected override Type LinkType => typeof(IPathGrid);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IPathGridGetter rhs) return false;
            return ((PathGridCommon)((IPathGridGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IPathGridGetter? obj)
        {
            return ((PathGridCommon)((IPathGridGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((PathGridCommon)((IPathGridGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PathGridBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((PathGridBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static PathGrid CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new PathGrid();
            ((PathGridSetterCommon)((IPathGridGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PathGrid item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((PathGridSetterCommon)((IPathGridGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new PathGrid GetNew()
        {
            return new PathGrid();
        }

    }
    #endregion

    #region Interface
    public partial interface IPathGrid :
        IFormLinkContainer,
        ILoquiObjectSetter<IPathGridInternal>,
        IOblivionMajorRecordInternal,
        IPathGridGetter
    {
        new ExtendedList<PathGridPoint>? PointToPointConnections { get; set; }
        new MemorySlice<Byte>? PGAG { get; set; }
        new ExtendedList<InterCellPoint>? InterCellConnections { get; set; }
        new ExtendedList<PointToReferenceMapping> PointToReferenceMappings { get; }
    }

    public partial interface IPathGridInternal :
        IOblivionMajorRecordInternal,
        IPathGrid,
        IPathGridGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts.PGRD)]
    public partial interface IPathGridGetter :
        IOblivionMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IPathGridGetter>,
        IMapsToGetter<IPathGridGetter>
    {
        static new ILoquiRegistration StaticRegistration => PathGrid_Registration.Instance;
        IReadOnlyList<IPathGridPointGetter>? PointToPointConnections { get; }
        ReadOnlyMemorySlice<Byte>? PGAG { get; }
        IReadOnlyList<IInterCellPointGetter>? InterCellConnections { get; }
        IReadOnlyList<IPointToReferenceMappingGetter> PointToReferenceMappings { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PathGridMixIn
    {
        public static void Clear(this IPathGridInternal item)
        {
            ((PathGridSetterCommon)((IPathGridGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PathGrid.Mask<bool> GetEqualsMask(
            this IPathGridGetter item,
            IPathGridGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PathGridCommon)((IPathGridGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPathGridGetter item,
            string? name = null,
            PathGrid.Mask<bool>? printMask = null)
        {
            return ((PathGridCommon)((IPathGridGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPathGridGetter item,
            FileGeneration fg,
            string? name = null,
            PathGrid.Mask<bool>? printMask = null)
        {
            ((PathGridCommon)((IPathGridGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPathGridGetter item,
            IPathGridGetter rhs,
            PathGrid.TranslationMask? equalsMask = null)
        {
            return ((PathGridCommon)((IPathGridGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPathGridInternal lhs,
            IPathGridGetter rhs,
            out PathGrid.ErrorMask errorMask,
            PathGrid.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PathGridSetterTranslationCommon)((IPathGridGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PathGrid.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPathGridInternal lhs,
            IPathGridGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PathGridSetterTranslationCommon)((IPathGridGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PathGrid DeepCopy(
            this IPathGridGetter item,
            PathGrid.TranslationMask? copyMask = null)
        {
            return ((PathGridSetterTranslationCommon)((IPathGridGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PathGrid DeepCopy(
            this IPathGridGetter item,
            out PathGrid.ErrorMask errorMask,
            PathGrid.TranslationMask? copyMask = null)
        {
            return ((PathGridSetterTranslationCommon)((IPathGridGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PathGrid DeepCopy(
            this IPathGridGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PathGridSetterTranslationCommon)((IPathGridGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static PathGrid Duplicate(
            this IPathGridGetter item,
            FormKey formKey,
            PathGrid.TranslationMask? copyMask = null)
        {
            return ((PathGridCommon)((IPathGridGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPathGridInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((PathGridSetterCommon)((IPathGridGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum PathGrid_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        PointToPointConnections = 5,
        PGAG = 6,
        InterCellConnections = 7,
        PointToReferenceMappings = 8,
    }
    #endregion

    #region Registration
    public partial class PathGrid_Registration : ILoquiRegistration
    {
        public static readonly PathGrid_Registration Instance = new PathGrid_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 129,
            version: 0);

        public const string GUID = "9fc6e922-dfb7-4ad4-81d3-bea823f22198";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(PathGrid.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PathGrid.ErrorMask);

        public static readonly Type ClassType = typeof(PathGrid);

        public static readonly Type GetterType = typeof(IPathGridGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPathGrid);

        public static readonly Type? InternalSetterType = typeof(IPathGridInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.PathGrid";

        public const string Name = "PathGrid";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.PGRD;
        public static readonly Type BinaryWriteTranslation = typeof(PathGridBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class PathGridSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly PathGridSetterCommon Instance = new PathGridSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPathGridInternal item)
        {
            ClearPartial();
            item.PointToPointConnections = null;
            item.PGAG = default;
            item.InterCellConnections = null;
            item.PointToReferenceMappings.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IPathGridInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IPathGridInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IPathGrid obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.PointToReferenceMappings.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPathGridInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.MajorRecordParse<IPathGridInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: PathGridBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: PathGridBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (PathGrid)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (PathGrid)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    public partial class PathGridCommon : OblivionMajorRecordCommon
    {
        public new static readonly PathGridCommon Instance = new PathGridCommon();

        public PathGrid.Mask<bool> GetEqualsMask(
            IPathGridGetter item,
            IPathGridGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PathGrid.Mask<bool>(false);
            ((PathGridCommon)((IPathGridGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPathGridGetter item,
            IPathGridGetter rhs,
            PathGrid.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.PointToPointConnections = item.PointToPointConnections.CollectionEqualsHelper(
                rhs.PointToPointConnections,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.PGAG = MemorySliceExt.Equal(item.PGAG, rhs.PGAG);
            ret.InterCellConnections = item.InterCellConnections.CollectionEqualsHelper(
                rhs.InterCellConnections,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.PointToReferenceMappings = item.PointToReferenceMappings.CollectionEqualsHelper(
                rhs.PointToReferenceMappings,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IPathGridGetter item,
            string? name = null,
            PathGrid.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPathGridGetter item,
            FileGeneration fg,
            string? name = null,
            PathGrid.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PathGrid =>");
            }
            else
            {
                fg.AppendLine($"{name} (PathGrid) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPathGridGetter item,
            FileGeneration fg,
            PathGrid.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.PointToPointConnections?.Overall ?? true)
                && item.PointToPointConnections is {} PointToPointConnectionsItem)
            {
                fg.AppendLine("PointToPointConnections =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in PointToPointConnectionsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.PGAG ?? true)
                && item.PGAG is {} PGAGItem)
            {
                fg.AppendLine($"PGAG => {SpanExt.ToHexString(PGAGItem)}");
            }
            if ((printMask?.InterCellConnections?.Overall ?? true)
                && item.InterCellConnections is {} InterCellConnectionsItem)
            {
                fg.AppendLine("InterCellConnections =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in InterCellConnectionsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.PointToReferenceMappings?.Overall ?? true)
            {
                fg.AppendLine("PointToReferenceMappings =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.PointToReferenceMappings)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public static PathGrid_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PathGrid_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (PathGrid_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.VersionControl:
                    return (PathGrid_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (PathGrid_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (PathGrid_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new PathGrid_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PathGrid_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (PathGrid_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (PathGrid_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (PathGrid_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPathGridGetter? lhs,
            IPathGridGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IOblivionMajorRecordGetter)lhs, (IOblivionMajorRecordGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)PathGrid_FieldIndex.PointToPointConnections) ?? true))
            {
                if (!lhs.PointToPointConnections.SequenceEqualNullable(rhs.PointToPointConnections)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)PathGrid_FieldIndex.PGAG) ?? true))
            {
                if (!MemorySliceExt.Equal(lhs.PGAG, rhs.PGAG)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)PathGrid_FieldIndex.InterCellConnections) ?? true))
            {
                if (!lhs.InterCellConnections.SequenceEqualNullable(rhs.InterCellConnections)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)PathGrid_FieldIndex.PointToReferenceMappings) ?? true))
            {
                if (!lhs.PointToReferenceMappings.SequenceEqualNullable(rhs.PointToReferenceMappings)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IPathGridGetter?)lhs,
                rhs: rhs as IPathGridGetter,
                crystal: crystal);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IPathGridGetter?)lhs,
                rhs: rhs as IPathGridGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(IPathGridGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.PointToPointConnections);
            if (item.PGAG is {} PGAGItem)
            {
                hash.Add(PGAGItem);
            }
            hash.Add(item.InterCellConnections);
            hash.Add(item.PointToReferenceMappings);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IPathGridGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IPathGridGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return PathGrid.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IPathGridGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.PointToReferenceMappings.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public PathGrid Duplicate(
            IPathGridGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new PathGrid(formKey);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override OblivionMajorRecord Duplicate(
            IOblivionMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPathGridGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPathGridGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class PathGridSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly PathGridSetterTranslationCommon Instance = new PathGridSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPathGridInternal item,
            IPathGridGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IPathGrid item,
            IPathGridGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IOblivionMajorRecord)item,
                (IOblivionMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)PathGrid_FieldIndex.PointToPointConnections) ?? true))
            {
                errorMask?.PushIndex((int)PathGrid_FieldIndex.PointToPointConnections);
                try
                {
                    if ((rhs.PointToPointConnections != null))
                    {
                        item.PointToPointConnections = 
                            rhs.PointToPointConnections
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<PathGridPoint>();
                    }
                    else
                    {
                        item.PointToPointConnections = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PathGrid_FieldIndex.PGAG) ?? true))
            {
                if(rhs.PGAG is {} PGAGrhs)
                {
                    item.PGAG = PGAGrhs.ToArray();
                }
                else
                {
                    item.PGAG = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PathGrid_FieldIndex.InterCellConnections) ?? true))
            {
                errorMask?.PushIndex((int)PathGrid_FieldIndex.InterCellConnections);
                try
                {
                    if ((rhs.InterCellConnections != null))
                    {
                        item.InterCellConnections = 
                            rhs.InterCellConnections
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<InterCellPoint>();
                    }
                    else
                    {
                        item.InterCellConnections = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PathGrid_FieldIndex.PointToReferenceMappings) ?? true))
            {
                errorMask?.PushIndex((int)PathGrid_FieldIndex.PointToReferenceMappings);
                try
                {
                    item.PointToReferenceMappings.SetTo(
                        rhs.PointToReferenceMappings
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPathGridInternal)item,
                rhs: (IPathGridGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPathGrid)item,
                rhs: (IPathGridGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPathGridInternal)item,
                rhs: (IPathGridGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPathGrid)item,
                rhs: (IPathGridGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public PathGrid DeepCopy(
            IPathGridGetter item,
            PathGrid.TranslationMask? copyMask = null)
        {
            PathGrid ret = (PathGrid)((PathGridCommon)((IPathGridGetter)item).CommonInstance()!).GetNew();
            ((PathGridSetterTranslationCommon)((IPathGridGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PathGrid DeepCopy(
            IPathGridGetter item,
            out PathGrid.ErrorMask errorMask,
            PathGrid.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PathGrid ret = (PathGrid)((PathGridCommon)((IPathGridGetter)item).CommonInstance()!).GetNew();
            ((PathGridSetterTranslationCommon)((IPathGridGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PathGrid.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PathGrid DeepCopy(
            IPathGridGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PathGrid ret = (PathGrid)((PathGridCommon)((IPathGridGetter)item).CommonInstance()!).GetNew();
            ((PathGridSetterTranslationCommon)((IPathGridGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class PathGrid
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PathGrid_Registration.Instance;
        public new static PathGrid_Registration StaticRegistration => PathGrid_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PathGridCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PathGridSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PathGridSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class PathGridBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static PathGridBinaryWriteTranslation Instance = new PathGridBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IPathGridGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            PathGridBinaryWriteTranslation.WriteBinaryPointToPointConnections(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IInterCellPointGetter>.Instance.Write(
                writer: writer,
                items: item.InterCellConnections,
                recordType: translationParams.ConvertToCustom(RecordTypes.PGRI),
                transl: (MutagenWriter subWriter, IInterCellPointGetter subItem, TypedWriteParams? conv) =>
                {
                    var Item = subItem;
                    ((InterCellPointBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IPointToReferenceMappingGetter>.Instance.Write(
                writer: writer,
                items: item.PointToReferenceMappings,
                transl: (MutagenWriter subWriter, IPointToReferenceMappingGetter subItem, TypedWriteParams? conv) =>
                {
                    var Item = subItem;
                    ((PointToReferenceMappingBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public static partial void WriteBinaryPointToPointConnectionsCustom(
            MutagenWriter writer,
            IPathGridGetter item);

        public static void WriteBinaryPointToPointConnections(
            MutagenWriter writer,
            IPathGridGetter item)
        {
            WriteBinaryPointToPointConnectionsCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IPathGridGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Record(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.PGRD)))
            {
                try
                {
                    OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        translationParams: translationParams);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Enrich(ex, item);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IPathGridGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IPathGridGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IPathGridGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class PathGridBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static PathGridBinaryCreateTranslation Instance = new PathGridBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.PGRD;
        public static void FillBinaryStructs(
            IPathGridInternal item,
            MutagenFrame frame)
        {
            OblivionMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IPathGridInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    PathGridBinaryCreateTranslation.FillBinaryPointToPointConnectionsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return (int)PathGrid_FieldIndex.PointToPointConnections;
                }
                case RecordTypeInts.PGRI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.InterCellConnections = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<InterCellPoint>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: InterCellPoint.TryCreateFromBinary)
                        .CastExtendedList<InterCellPoint>();
                    return (int)PathGrid_FieldIndex.InterCellConnections;
                }
                case RecordTypeInts.PGRL:
                {
                    item.PointToReferenceMappings.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<PointToReferenceMapping>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: RecordTypes.PGRL,
                            translationParams: translationParams,
                            transl: PointToReferenceMapping.TryCreateFromBinary));
                    return (int)PathGrid_FieldIndex.PointToReferenceMappings;
                }
                default:
                    return OblivionMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        public static partial void FillBinaryPointToPointConnectionsCustom(
            MutagenFrame frame,
            IPathGridInternal item);

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class PathGridBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class PathGridBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IPathGridGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PathGrid_Registration.Instance;
        public new static PathGrid_Registration StaticRegistration => PathGrid_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PathGridCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PathGridSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => PathGridCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PathGridBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((PathGridBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IPathGrid);


        #region PointToPointConnections
        partial void PointToPointConnectionsCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed);
        #endregion
        public IReadOnlyList<IInterCellPointGetter>? InterCellConnections { get; private set; }
        public IReadOnlyList<IPointToReferenceMappingGetter> PointToReferenceMappings { get; private set; } = ListExt.Empty<PointToReferenceMappingBinaryOverlay>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PathGridBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static PathGridBinaryOverlay PathGridFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            stream = PluginUtilityTranslation.DecompressStream(stream);
            var ret = new PathGridBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0xC + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static PathGridBinaryOverlay PathGridFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return PathGridFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    PointToPointConnectionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)PathGrid_FieldIndex.PointToPointConnections;
                }
                case RecordTypeInts.PGRI:
                {
                    var subMeta = stream.ReadSubrecord();
                    var subLen = subMeta.ContentLength;
                    this.InterCellConnections = BinaryOverlayList.FactoryByStartIndex<InterCellPointBinaryOverlay>(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 16,
                        getter: (s, p) => InterCellPointBinaryOverlay.InterCellPointFactory(s, p));
                    stream.Position += subLen;
                    return (int)PathGrid_FieldIndex.InterCellConnections;
                }
                case RecordTypeInts.PGRL:
                {
                    this.PointToReferenceMappings = BinaryOverlayList.FactoryByArray<PointToReferenceMappingBinaryOverlay>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        parseParams: parseParams,
                        getter: (s, p, recConv) => PointToReferenceMappingBinaryOverlay.PointToReferenceMappingFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: type,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)PathGrid_FieldIndex.PointToReferenceMappings;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PathGridMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<PathGrid>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IPathGridGetter rhs) return false;
            return ((PathGridCommon)((IPathGridGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IPathGridGetter? obj)
        {
            return ((PathGridCommon)((IPathGridGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((PathGridCommon)((IPathGridGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

