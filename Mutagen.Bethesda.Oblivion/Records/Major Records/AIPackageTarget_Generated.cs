/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class AIPackageTarget :
        IAIPackageTarget,
        IEquatable<IAIPackageTargetGetter>,
        ILoquiObjectSetter<AIPackageTarget>
    {
        #region Ctor
        public AIPackageTarget()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectType
        public AIPackageTarget.ObjectTypes ObjectType { get; set; } = default;
        #endregion
        #region Object
        public Int32 Object { get; set; } = default;
        #endregion
        #region Count
        public Int32 Count { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            AIPackageTargetMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IAIPackageTargetGetter rhs) return false;
            return ((AIPackageTargetCommon)((IAIPackageTargetGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IAIPackageTargetGetter? obj)
        {
            return ((AIPackageTargetCommon)((IAIPackageTargetGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((AIPackageTargetCommon)((IAIPackageTargetGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.ObjectType = initialValue;
                this.Object = initialValue;
                this.Count = initialValue;
            }

            public Mask(
                TItem ObjectType,
                TItem Object,
                TItem Count)
            {
                this.ObjectType = ObjectType;
                this.Object = Object;
                this.Count = Count;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem ObjectType;
            public TItem Object;
            public TItem Count;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.ObjectType, rhs.ObjectType)) return false;
                if (!object.Equals(this.Object, rhs.Object)) return false;
                if (!object.Equals(this.Count, rhs.Count)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectType);
                hash.Add(this.Object);
                hash.Add(this.Count);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.ObjectType)) return false;
                if (!eval(this.Object)) return false;
                if (!eval(this.Count)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.ObjectType)) return true;
                if (eval(this.Object)) return true;
                if (eval(this.Count)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AIPackageTarget.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.ObjectType = eval(this.ObjectType);
                obj.Object = eval(this.Object);
                obj.Count = eval(this.Count);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(AIPackageTarget.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, AIPackageTarget.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(AIPackageTarget.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ObjectType ?? true)
                    {
                        fg.AppendItem(ObjectType, "ObjectType");
                    }
                    if (printMask?.Object ?? true)
                    {
                        fg.AppendItem(Object, "Object");
                    }
                    if (printMask?.Count ?? true)
                    {
                        fg.AppendItem(Count, "Count");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? ObjectType;
            public Exception? Object;
            public Exception? Count;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                AIPackageTarget_FieldIndex enu = (AIPackageTarget_FieldIndex)index;
                switch (enu)
                {
                    case AIPackageTarget_FieldIndex.ObjectType:
                        return ObjectType;
                    case AIPackageTarget_FieldIndex.Object:
                        return Object;
                    case AIPackageTarget_FieldIndex.Count:
                        return Count;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                AIPackageTarget_FieldIndex enu = (AIPackageTarget_FieldIndex)index;
                switch (enu)
                {
                    case AIPackageTarget_FieldIndex.ObjectType:
                        this.ObjectType = ex;
                        break;
                    case AIPackageTarget_FieldIndex.Object:
                        this.Object = ex;
                        break;
                    case AIPackageTarget_FieldIndex.Count:
                        this.Count = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                AIPackageTarget_FieldIndex enu = (AIPackageTarget_FieldIndex)index;
                switch (enu)
                {
                    case AIPackageTarget_FieldIndex.ObjectType:
                        this.ObjectType = (Exception?)obj;
                        break;
                    case AIPackageTarget_FieldIndex.Object:
                        this.Object = (Exception?)obj;
                        break;
                    case AIPackageTarget_FieldIndex.Count:
                        this.Count = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectType != null) return true;
                if (Object != null) return true;
                if (Count != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(ObjectType, "ObjectType");
                fg.AppendItem(Object, "Object");
                fg.AppendItem(Count, "Count");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectType = this.ObjectType.Combine(rhs.ObjectType);
                ret.Object = this.Object.Combine(rhs.Object);
                ret.Count = this.Count.Combine(rhs.Count);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool ObjectType;
            public bool Object;
            public bool Count;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.ObjectType = defaultOn;
                this.Object = defaultOn;
                this.Count = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((ObjectType, null));
                ret.Add((Object, null));
                ret.Add((Count, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = AIPackageTarget_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => AIPackageTargetBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((AIPackageTargetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static AIPackageTarget CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new AIPackageTarget();
            ((AIPackageTargetSetterCommon)((IAIPackageTargetGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out AIPackageTarget item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((AIPackageTargetSetterCommon)((IAIPackageTargetGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static AIPackageTarget GetNew()
        {
            return new AIPackageTarget();
        }

    }
    #endregion

    #region Interface
    public partial interface IAIPackageTarget :
        IAIPackageTargetGetter,
        ILoquiObjectSetter<IAIPackageTarget>
    {
        new AIPackageTarget.ObjectTypes ObjectType { get; set; }
        new Int32 Object { get; set; }
        new Int32 Count { get; set; }
    }

    public partial interface IAIPackageTargetGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IAIPackageTargetGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => AIPackageTarget_Registration.Instance;
        AIPackageTarget.ObjectTypes ObjectType { get; }
        Int32 Object { get; }
        Int32 Count { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class AIPackageTargetMixIn
    {
        public static void Clear(this IAIPackageTarget item)
        {
            ((AIPackageTargetSetterCommon)((IAIPackageTargetGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AIPackageTarget.Mask<bool> GetEqualsMask(
            this IAIPackageTargetGetter item,
            IAIPackageTargetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AIPackageTargetCommon)((IAIPackageTargetGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IAIPackageTargetGetter item,
            string? name = null,
            AIPackageTarget.Mask<bool>? printMask = null)
        {
            return ((AIPackageTargetCommon)((IAIPackageTargetGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IAIPackageTargetGetter item,
            FileGeneration fg,
            string? name = null,
            AIPackageTarget.Mask<bool>? printMask = null)
        {
            ((AIPackageTargetCommon)((IAIPackageTargetGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IAIPackageTargetGetter item,
            IAIPackageTargetGetter rhs,
            AIPackageTarget.TranslationMask? equalsMask = null)
        {
            return ((AIPackageTargetCommon)((IAIPackageTargetGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IAIPackageTarget lhs,
            IAIPackageTargetGetter rhs)
        {
            ((AIPackageTargetSetterTranslationCommon)((IAIPackageTargetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IAIPackageTarget lhs,
            IAIPackageTargetGetter rhs,
            AIPackageTarget.TranslationMask? copyMask = null)
        {
            ((AIPackageTargetSetterTranslationCommon)((IAIPackageTargetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IAIPackageTarget lhs,
            IAIPackageTargetGetter rhs,
            out AIPackageTarget.ErrorMask errorMask,
            AIPackageTarget.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AIPackageTargetSetterTranslationCommon)((IAIPackageTargetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = AIPackageTarget.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAIPackageTarget lhs,
            IAIPackageTargetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AIPackageTargetSetterTranslationCommon)((IAIPackageTargetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static AIPackageTarget DeepCopy(
            this IAIPackageTargetGetter item,
            AIPackageTarget.TranslationMask? copyMask = null)
        {
            return ((AIPackageTargetSetterTranslationCommon)((IAIPackageTargetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AIPackageTarget DeepCopy(
            this IAIPackageTargetGetter item,
            out AIPackageTarget.ErrorMask errorMask,
            AIPackageTarget.TranslationMask? copyMask = null)
        {
            return ((AIPackageTargetSetterTranslationCommon)((IAIPackageTargetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AIPackageTarget DeepCopy(
            this IAIPackageTargetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AIPackageTargetSetterTranslationCommon)((IAIPackageTargetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IAIPackageTarget item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((AIPackageTargetSetterCommon)((IAIPackageTargetGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum AIPackageTarget_FieldIndex
    {
        ObjectType = 0,
        Object = 1,
        Count = 2,
    }
    #endregion

    #region Registration
    public partial class AIPackageTarget_Registration : ILoquiRegistration
    {
        public static readonly AIPackageTarget_Registration Instance = new AIPackageTarget_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 159,
            version: 0);

        public const string GUID = "52649554-81f8-4583-82cd-dbff72bc7bd5";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(AIPackageTarget.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AIPackageTarget.ErrorMask);

        public static readonly Type ClassType = typeof(AIPackageTarget);

        public static readonly Type GetterType = typeof(IAIPackageTargetGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAIPackageTarget);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.AIPackageTarget";

        public const string Name = "AIPackageTarget";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.PTDT;
        public static readonly Type BinaryWriteTranslation = typeof(AIPackageTargetBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class AIPackageTargetSetterCommon
    {
        public static readonly AIPackageTargetSetterCommon Instance = new AIPackageTargetSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IAIPackageTarget item)
        {
            ClearPartial();
            item.ObjectType = default;
            item.Object = default;
            item.Count = default;
        }
        
        #region Mutagen
        public void RemapLinks(IAIPackageTarget obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAIPackageTarget item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.PTDT),
                translationParams?.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: AIPackageTargetBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class AIPackageTargetCommon
    {
        public static readonly AIPackageTargetCommon Instance = new AIPackageTargetCommon();

        public AIPackageTarget.Mask<bool> GetEqualsMask(
            IAIPackageTargetGetter item,
            IAIPackageTargetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AIPackageTarget.Mask<bool>(false);
            ((AIPackageTargetCommon)((IAIPackageTargetGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAIPackageTargetGetter item,
            IAIPackageTargetGetter rhs,
            AIPackageTarget.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ObjectType = item.ObjectType == rhs.ObjectType;
            ret.Object = item.Object == rhs.Object;
            ret.Count = item.Count == rhs.Count;
        }
        
        public string ToString(
            IAIPackageTargetGetter item,
            string? name = null,
            AIPackageTarget.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IAIPackageTargetGetter item,
            FileGeneration fg,
            string? name = null,
            AIPackageTarget.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"AIPackageTarget =>");
            }
            else
            {
                fg.AppendLine($"{name} (AIPackageTarget) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IAIPackageTargetGetter item,
            FileGeneration fg,
            AIPackageTarget.Mask<bool>? printMask = null)
        {
            if (printMask?.ObjectType ?? true)
            {
                fg.AppendItem(item.ObjectType, "ObjectType");
            }
            if (printMask?.Object ?? true)
            {
                fg.AppendItem(item.Object, "Object");
            }
            if (printMask?.Count ?? true)
            {
                fg.AppendItem(item.Count, "Count");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAIPackageTargetGetter? lhs,
            IAIPackageTargetGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)AIPackageTarget_FieldIndex.ObjectType) ?? true))
            {
                if (lhs.ObjectType != rhs.ObjectType) return false;
            }
            if ((crystal?.GetShouldTranslate((int)AIPackageTarget_FieldIndex.Object) ?? true))
            {
                if (lhs.Object != rhs.Object) return false;
            }
            if ((crystal?.GetShouldTranslate((int)AIPackageTarget_FieldIndex.Count) ?? true))
            {
                if (lhs.Count != rhs.Count) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IAIPackageTargetGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectType);
            hash.Add(item.Object);
            hash.Add(item.Count);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return AIPackageTarget.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IAIPackageTargetGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class AIPackageTargetSetterTranslationCommon
    {
        public static readonly AIPackageTargetSetterTranslationCommon Instance = new AIPackageTargetSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IAIPackageTarget item,
            IAIPackageTargetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)AIPackageTarget_FieldIndex.ObjectType) ?? true))
            {
                item.ObjectType = rhs.ObjectType;
            }
            if ((copyMask?.GetShouldTranslate((int)AIPackageTarget_FieldIndex.Object) ?? true))
            {
                item.Object = rhs.Object;
            }
            if ((copyMask?.GetShouldTranslate((int)AIPackageTarget_FieldIndex.Count) ?? true))
            {
                item.Count = rhs.Count;
            }
        }
        
        #endregion
        
        public AIPackageTarget DeepCopy(
            IAIPackageTargetGetter item,
            AIPackageTarget.TranslationMask? copyMask = null)
        {
            AIPackageTarget ret = (AIPackageTarget)((AIPackageTargetCommon)((IAIPackageTargetGetter)item).CommonInstance()!).GetNew();
            ((AIPackageTargetSetterTranslationCommon)((IAIPackageTargetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public AIPackageTarget DeepCopy(
            IAIPackageTargetGetter item,
            out AIPackageTarget.ErrorMask errorMask,
            AIPackageTarget.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AIPackageTarget ret = (AIPackageTarget)((AIPackageTargetCommon)((IAIPackageTargetGetter)item).CommonInstance()!).GetNew();
            ((AIPackageTargetSetterTranslationCommon)((IAIPackageTargetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = AIPackageTarget.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public AIPackageTarget DeepCopy(
            IAIPackageTargetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AIPackageTarget ret = (AIPackageTarget)((AIPackageTargetCommon)((IAIPackageTargetGetter)item).CommonInstance()!).GetNew();
            ((AIPackageTargetSetterTranslationCommon)((IAIPackageTargetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class AIPackageTarget
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AIPackageTarget_Registration.Instance;
        public static AIPackageTarget_Registration StaticRegistration => AIPackageTarget_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => AIPackageTargetCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return AIPackageTargetSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => AIPackageTargetSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IAIPackageTargetGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IAIPackageTargetGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IAIPackageTargetGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class AIPackageTargetBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static AIPackageTargetBinaryWriteTranslation Instance = new AIPackageTargetBinaryWriteTranslation();

        public static void WriteEmbedded(
            IAIPackageTargetGetter item,
            MutagenWriter writer)
        {
            EnumBinaryTranslation<AIPackageTarget.ObjectTypes, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.ObjectType,
                length: 4);
            writer.Write(item.Object);
            writer.Write(item.Count);
        }

        public void Write(
            MutagenWriter writer,
            IAIPackageTargetGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.PTDT),
                overflowRecord: translationParams?.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IAIPackageTargetGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class AIPackageTargetBinaryCreateTranslation
    {
        public readonly static AIPackageTargetBinaryCreateTranslation Instance = new AIPackageTargetBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IAIPackageTarget item,
            MutagenFrame frame)
        {
            item.ObjectType = EnumBinaryTranslation<AIPackageTarget.ObjectTypes, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
            item.Object = frame.ReadInt32();
            item.Count = frame.ReadInt32();
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class AIPackageTargetBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IAIPackageTargetGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((AIPackageTargetBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class AIPackageTargetBinaryOverlay :
        PluginBinaryOverlay,
        IAIPackageTargetGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AIPackageTarget_Registration.Instance;
        public static AIPackageTarget_Registration StaticRegistration => AIPackageTarget_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => AIPackageTargetCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => AIPackageTargetSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IAIPackageTargetGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IAIPackageTargetGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IAIPackageTargetGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => AIPackageTargetBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((AIPackageTargetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public AIPackageTarget.ObjectTypes ObjectType => (AIPackageTarget.ObjectTypes)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x0, 0x4));
        public Int32 Object => BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(0x4, 0x4));
        public Int32 Count => BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(0x8, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected AIPackageTargetBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static AIPackageTargetBinaryOverlay AIPackageTargetFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new AIPackageTargetBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants, parseParams),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static AIPackageTargetBinaryOverlay AIPackageTargetFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return AIPackageTargetFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            AIPackageTargetMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IAIPackageTargetGetter rhs) return false;
            return ((AIPackageTargetCommon)((IAIPackageTargetGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IAIPackageTargetGetter? obj)
        {
            return ((AIPackageTargetCommon)((IAIPackageTargetGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((AIPackageTargetCommon)((IAIPackageTargetGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

