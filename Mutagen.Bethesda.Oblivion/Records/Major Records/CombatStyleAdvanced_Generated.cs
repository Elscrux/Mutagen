/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class CombatStyleAdvanced :
        ICombatStyleAdvanced,
        IEquatable<ICombatStyleAdvancedGetter>,
        ILoquiObjectSetter<CombatStyleAdvanced>
    {
        #region Ctor
        public CombatStyleAdvanced()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region DodgeFatigueModMult
        public Single DodgeFatigueModMult { get; set; } = default;
        #endregion
        #region DodgeFatigueModBase
        public Single DodgeFatigueModBase { get; set; } = default;
        #endregion
        #region EncumbSpeedModBase
        public Single EncumbSpeedModBase { get; set; } = default;
        #endregion
        #region EncumbSpeedModMult
        public Single EncumbSpeedModMult { get; set; } = default;
        #endregion
        #region DodgeWhileUnderAttackMult
        public Single DodgeWhileUnderAttackMult { get; set; } = default;
        #endregion
        #region DodgeNotUnderAttackMult
        public Single DodgeNotUnderAttackMult { get; set; } = default;
        #endregion
        #region DodgeBackWhileUnderAttackMult
        public Single DodgeBackWhileUnderAttackMult { get; set; } = default;
        #endregion
        #region DodgeBackNotUnderAttackMult
        public Single DodgeBackNotUnderAttackMult { get; set; } = default;
        #endregion
        #region DodgeForwardWhileUnderAttackMult
        public Single DodgeForwardWhileUnderAttackMult { get; set; } = default;
        #endregion
        #region DodgeForwardNotUnderAttackMult
        public Single DodgeForwardNotUnderAttackMult { get; set; } = default;
        #endregion
        #region BlockSkillModifierMult
        public Single BlockSkillModifierMult { get; set; } = default;
        #endregion
        #region BlockSkillModifierBase
        public Single BlockSkillModifierBase { get; set; } = default;
        #endregion
        #region BlockWhileUnderAttackMult
        public Single BlockWhileUnderAttackMult { get; set; } = default;
        #endregion
        #region BlockNotUnderAttackMult
        public Single BlockNotUnderAttackMult { get; set; } = default;
        #endregion
        #region AttackSkillModifierMult
        public Single AttackSkillModifierMult { get; set; } = default;
        #endregion
        #region AttackSkillModifierBase
        public Single AttackSkillModifierBase { get; set; } = default;
        #endregion
        #region AttackWhileUnderAttackMult
        public Single AttackWhileUnderAttackMult { get; set; } = default;
        #endregion
        #region AttackNotUnderAttackMult
        public Single AttackNotUnderAttackMult { get; set; } = default;
        #endregion
        #region AttackDuringBlockMult
        public Single AttackDuringBlockMult { get; set; } = default;
        #endregion
        #region PowerAttackFatigueModBase
        public Single PowerAttackFatigueModBase { get; set; } = default;
        #endregion
        #region PowerAttackFatigueModMult
        public Single PowerAttackFatigueModMult { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CombatStyleAdvancedMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICombatStyleAdvancedGetter rhs) return false;
            return ((CombatStyleAdvancedCommon)((ICombatStyleAdvancedGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(ICombatStyleAdvancedGetter? obj)
        {
            return ((CombatStyleAdvancedCommon)((ICombatStyleAdvancedGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((CombatStyleAdvancedCommon)((ICombatStyleAdvancedGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.DodgeFatigueModMult = initialValue;
                this.DodgeFatigueModBase = initialValue;
                this.EncumbSpeedModBase = initialValue;
                this.EncumbSpeedModMult = initialValue;
                this.DodgeWhileUnderAttackMult = initialValue;
                this.DodgeNotUnderAttackMult = initialValue;
                this.DodgeBackWhileUnderAttackMult = initialValue;
                this.DodgeBackNotUnderAttackMult = initialValue;
                this.DodgeForwardWhileUnderAttackMult = initialValue;
                this.DodgeForwardNotUnderAttackMult = initialValue;
                this.BlockSkillModifierMult = initialValue;
                this.BlockSkillModifierBase = initialValue;
                this.BlockWhileUnderAttackMult = initialValue;
                this.BlockNotUnderAttackMult = initialValue;
                this.AttackSkillModifierMult = initialValue;
                this.AttackSkillModifierBase = initialValue;
                this.AttackWhileUnderAttackMult = initialValue;
                this.AttackNotUnderAttackMult = initialValue;
                this.AttackDuringBlockMult = initialValue;
                this.PowerAttackFatigueModBase = initialValue;
                this.PowerAttackFatigueModMult = initialValue;
            }

            public Mask(
                TItem DodgeFatigueModMult,
                TItem DodgeFatigueModBase,
                TItem EncumbSpeedModBase,
                TItem EncumbSpeedModMult,
                TItem DodgeWhileUnderAttackMult,
                TItem DodgeNotUnderAttackMult,
                TItem DodgeBackWhileUnderAttackMult,
                TItem DodgeBackNotUnderAttackMult,
                TItem DodgeForwardWhileUnderAttackMult,
                TItem DodgeForwardNotUnderAttackMult,
                TItem BlockSkillModifierMult,
                TItem BlockSkillModifierBase,
                TItem BlockWhileUnderAttackMult,
                TItem BlockNotUnderAttackMult,
                TItem AttackSkillModifierMult,
                TItem AttackSkillModifierBase,
                TItem AttackWhileUnderAttackMult,
                TItem AttackNotUnderAttackMult,
                TItem AttackDuringBlockMult,
                TItem PowerAttackFatigueModBase,
                TItem PowerAttackFatigueModMult)
            {
                this.DodgeFatigueModMult = DodgeFatigueModMult;
                this.DodgeFatigueModBase = DodgeFatigueModBase;
                this.EncumbSpeedModBase = EncumbSpeedModBase;
                this.EncumbSpeedModMult = EncumbSpeedModMult;
                this.DodgeWhileUnderAttackMult = DodgeWhileUnderAttackMult;
                this.DodgeNotUnderAttackMult = DodgeNotUnderAttackMult;
                this.DodgeBackWhileUnderAttackMult = DodgeBackWhileUnderAttackMult;
                this.DodgeBackNotUnderAttackMult = DodgeBackNotUnderAttackMult;
                this.DodgeForwardWhileUnderAttackMult = DodgeForwardWhileUnderAttackMult;
                this.DodgeForwardNotUnderAttackMult = DodgeForwardNotUnderAttackMult;
                this.BlockSkillModifierMult = BlockSkillModifierMult;
                this.BlockSkillModifierBase = BlockSkillModifierBase;
                this.BlockWhileUnderAttackMult = BlockWhileUnderAttackMult;
                this.BlockNotUnderAttackMult = BlockNotUnderAttackMult;
                this.AttackSkillModifierMult = AttackSkillModifierMult;
                this.AttackSkillModifierBase = AttackSkillModifierBase;
                this.AttackWhileUnderAttackMult = AttackWhileUnderAttackMult;
                this.AttackNotUnderAttackMult = AttackNotUnderAttackMult;
                this.AttackDuringBlockMult = AttackDuringBlockMult;
                this.PowerAttackFatigueModBase = PowerAttackFatigueModBase;
                this.PowerAttackFatigueModMult = PowerAttackFatigueModMult;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem DodgeFatigueModMult;
            public TItem DodgeFatigueModBase;
            public TItem EncumbSpeedModBase;
            public TItem EncumbSpeedModMult;
            public TItem DodgeWhileUnderAttackMult;
            public TItem DodgeNotUnderAttackMult;
            public TItem DodgeBackWhileUnderAttackMult;
            public TItem DodgeBackNotUnderAttackMult;
            public TItem DodgeForwardWhileUnderAttackMult;
            public TItem DodgeForwardNotUnderAttackMult;
            public TItem BlockSkillModifierMult;
            public TItem BlockSkillModifierBase;
            public TItem BlockWhileUnderAttackMult;
            public TItem BlockNotUnderAttackMult;
            public TItem AttackSkillModifierMult;
            public TItem AttackSkillModifierBase;
            public TItem AttackWhileUnderAttackMult;
            public TItem AttackNotUnderAttackMult;
            public TItem AttackDuringBlockMult;
            public TItem PowerAttackFatigueModBase;
            public TItem PowerAttackFatigueModMult;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.DodgeFatigueModMult, rhs.DodgeFatigueModMult)) return false;
                if (!object.Equals(this.DodgeFatigueModBase, rhs.DodgeFatigueModBase)) return false;
                if (!object.Equals(this.EncumbSpeedModBase, rhs.EncumbSpeedModBase)) return false;
                if (!object.Equals(this.EncumbSpeedModMult, rhs.EncumbSpeedModMult)) return false;
                if (!object.Equals(this.DodgeWhileUnderAttackMult, rhs.DodgeWhileUnderAttackMult)) return false;
                if (!object.Equals(this.DodgeNotUnderAttackMult, rhs.DodgeNotUnderAttackMult)) return false;
                if (!object.Equals(this.DodgeBackWhileUnderAttackMult, rhs.DodgeBackWhileUnderAttackMult)) return false;
                if (!object.Equals(this.DodgeBackNotUnderAttackMult, rhs.DodgeBackNotUnderAttackMult)) return false;
                if (!object.Equals(this.DodgeForwardWhileUnderAttackMult, rhs.DodgeForwardWhileUnderAttackMult)) return false;
                if (!object.Equals(this.DodgeForwardNotUnderAttackMult, rhs.DodgeForwardNotUnderAttackMult)) return false;
                if (!object.Equals(this.BlockSkillModifierMult, rhs.BlockSkillModifierMult)) return false;
                if (!object.Equals(this.BlockSkillModifierBase, rhs.BlockSkillModifierBase)) return false;
                if (!object.Equals(this.BlockWhileUnderAttackMult, rhs.BlockWhileUnderAttackMult)) return false;
                if (!object.Equals(this.BlockNotUnderAttackMult, rhs.BlockNotUnderAttackMult)) return false;
                if (!object.Equals(this.AttackSkillModifierMult, rhs.AttackSkillModifierMult)) return false;
                if (!object.Equals(this.AttackSkillModifierBase, rhs.AttackSkillModifierBase)) return false;
                if (!object.Equals(this.AttackWhileUnderAttackMult, rhs.AttackWhileUnderAttackMult)) return false;
                if (!object.Equals(this.AttackNotUnderAttackMult, rhs.AttackNotUnderAttackMult)) return false;
                if (!object.Equals(this.AttackDuringBlockMult, rhs.AttackDuringBlockMult)) return false;
                if (!object.Equals(this.PowerAttackFatigueModBase, rhs.PowerAttackFatigueModBase)) return false;
                if (!object.Equals(this.PowerAttackFatigueModMult, rhs.PowerAttackFatigueModMult)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.DodgeFatigueModMult);
                hash.Add(this.DodgeFatigueModBase);
                hash.Add(this.EncumbSpeedModBase);
                hash.Add(this.EncumbSpeedModMult);
                hash.Add(this.DodgeWhileUnderAttackMult);
                hash.Add(this.DodgeNotUnderAttackMult);
                hash.Add(this.DodgeBackWhileUnderAttackMult);
                hash.Add(this.DodgeBackNotUnderAttackMult);
                hash.Add(this.DodgeForwardWhileUnderAttackMult);
                hash.Add(this.DodgeForwardNotUnderAttackMult);
                hash.Add(this.BlockSkillModifierMult);
                hash.Add(this.BlockSkillModifierBase);
                hash.Add(this.BlockWhileUnderAttackMult);
                hash.Add(this.BlockNotUnderAttackMult);
                hash.Add(this.AttackSkillModifierMult);
                hash.Add(this.AttackSkillModifierBase);
                hash.Add(this.AttackWhileUnderAttackMult);
                hash.Add(this.AttackNotUnderAttackMult);
                hash.Add(this.AttackDuringBlockMult);
                hash.Add(this.PowerAttackFatigueModBase);
                hash.Add(this.PowerAttackFatigueModMult);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.DodgeFatigueModMult)) return false;
                if (!eval(this.DodgeFatigueModBase)) return false;
                if (!eval(this.EncumbSpeedModBase)) return false;
                if (!eval(this.EncumbSpeedModMult)) return false;
                if (!eval(this.DodgeWhileUnderAttackMult)) return false;
                if (!eval(this.DodgeNotUnderAttackMult)) return false;
                if (!eval(this.DodgeBackWhileUnderAttackMult)) return false;
                if (!eval(this.DodgeBackNotUnderAttackMult)) return false;
                if (!eval(this.DodgeForwardWhileUnderAttackMult)) return false;
                if (!eval(this.DodgeForwardNotUnderAttackMult)) return false;
                if (!eval(this.BlockSkillModifierMult)) return false;
                if (!eval(this.BlockSkillModifierBase)) return false;
                if (!eval(this.BlockWhileUnderAttackMult)) return false;
                if (!eval(this.BlockNotUnderAttackMult)) return false;
                if (!eval(this.AttackSkillModifierMult)) return false;
                if (!eval(this.AttackSkillModifierBase)) return false;
                if (!eval(this.AttackWhileUnderAttackMult)) return false;
                if (!eval(this.AttackNotUnderAttackMult)) return false;
                if (!eval(this.AttackDuringBlockMult)) return false;
                if (!eval(this.PowerAttackFatigueModBase)) return false;
                if (!eval(this.PowerAttackFatigueModMult)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.DodgeFatigueModMult)) return true;
                if (eval(this.DodgeFatigueModBase)) return true;
                if (eval(this.EncumbSpeedModBase)) return true;
                if (eval(this.EncumbSpeedModMult)) return true;
                if (eval(this.DodgeWhileUnderAttackMult)) return true;
                if (eval(this.DodgeNotUnderAttackMult)) return true;
                if (eval(this.DodgeBackWhileUnderAttackMult)) return true;
                if (eval(this.DodgeBackNotUnderAttackMult)) return true;
                if (eval(this.DodgeForwardWhileUnderAttackMult)) return true;
                if (eval(this.DodgeForwardNotUnderAttackMult)) return true;
                if (eval(this.BlockSkillModifierMult)) return true;
                if (eval(this.BlockSkillModifierBase)) return true;
                if (eval(this.BlockWhileUnderAttackMult)) return true;
                if (eval(this.BlockNotUnderAttackMult)) return true;
                if (eval(this.AttackSkillModifierMult)) return true;
                if (eval(this.AttackSkillModifierBase)) return true;
                if (eval(this.AttackWhileUnderAttackMult)) return true;
                if (eval(this.AttackNotUnderAttackMult)) return true;
                if (eval(this.AttackDuringBlockMult)) return true;
                if (eval(this.PowerAttackFatigueModBase)) return true;
                if (eval(this.PowerAttackFatigueModMult)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CombatStyleAdvanced.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.DodgeFatigueModMult = eval(this.DodgeFatigueModMult);
                obj.DodgeFatigueModBase = eval(this.DodgeFatigueModBase);
                obj.EncumbSpeedModBase = eval(this.EncumbSpeedModBase);
                obj.EncumbSpeedModMult = eval(this.EncumbSpeedModMult);
                obj.DodgeWhileUnderAttackMult = eval(this.DodgeWhileUnderAttackMult);
                obj.DodgeNotUnderAttackMult = eval(this.DodgeNotUnderAttackMult);
                obj.DodgeBackWhileUnderAttackMult = eval(this.DodgeBackWhileUnderAttackMult);
                obj.DodgeBackNotUnderAttackMult = eval(this.DodgeBackNotUnderAttackMult);
                obj.DodgeForwardWhileUnderAttackMult = eval(this.DodgeForwardWhileUnderAttackMult);
                obj.DodgeForwardNotUnderAttackMult = eval(this.DodgeForwardNotUnderAttackMult);
                obj.BlockSkillModifierMult = eval(this.BlockSkillModifierMult);
                obj.BlockSkillModifierBase = eval(this.BlockSkillModifierBase);
                obj.BlockWhileUnderAttackMult = eval(this.BlockWhileUnderAttackMult);
                obj.BlockNotUnderAttackMult = eval(this.BlockNotUnderAttackMult);
                obj.AttackSkillModifierMult = eval(this.AttackSkillModifierMult);
                obj.AttackSkillModifierBase = eval(this.AttackSkillModifierBase);
                obj.AttackWhileUnderAttackMult = eval(this.AttackWhileUnderAttackMult);
                obj.AttackNotUnderAttackMult = eval(this.AttackNotUnderAttackMult);
                obj.AttackDuringBlockMult = eval(this.AttackDuringBlockMult);
                obj.PowerAttackFatigueModBase = eval(this.PowerAttackFatigueModBase);
                obj.PowerAttackFatigueModMult = eval(this.PowerAttackFatigueModMult);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(CombatStyleAdvanced.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, CombatStyleAdvanced.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(CombatStyleAdvanced.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.DodgeFatigueModMult ?? true)
                    {
                        fg.AppendItem(DodgeFatigueModMult, "DodgeFatigueModMult");
                    }
                    if (printMask?.DodgeFatigueModBase ?? true)
                    {
                        fg.AppendItem(DodgeFatigueModBase, "DodgeFatigueModBase");
                    }
                    if (printMask?.EncumbSpeedModBase ?? true)
                    {
                        fg.AppendItem(EncumbSpeedModBase, "EncumbSpeedModBase");
                    }
                    if (printMask?.EncumbSpeedModMult ?? true)
                    {
                        fg.AppendItem(EncumbSpeedModMult, "EncumbSpeedModMult");
                    }
                    if (printMask?.DodgeWhileUnderAttackMult ?? true)
                    {
                        fg.AppendItem(DodgeWhileUnderAttackMult, "DodgeWhileUnderAttackMult");
                    }
                    if (printMask?.DodgeNotUnderAttackMult ?? true)
                    {
                        fg.AppendItem(DodgeNotUnderAttackMult, "DodgeNotUnderAttackMult");
                    }
                    if (printMask?.DodgeBackWhileUnderAttackMult ?? true)
                    {
                        fg.AppendItem(DodgeBackWhileUnderAttackMult, "DodgeBackWhileUnderAttackMult");
                    }
                    if (printMask?.DodgeBackNotUnderAttackMult ?? true)
                    {
                        fg.AppendItem(DodgeBackNotUnderAttackMult, "DodgeBackNotUnderAttackMult");
                    }
                    if (printMask?.DodgeForwardWhileUnderAttackMult ?? true)
                    {
                        fg.AppendItem(DodgeForwardWhileUnderAttackMult, "DodgeForwardWhileUnderAttackMult");
                    }
                    if (printMask?.DodgeForwardNotUnderAttackMult ?? true)
                    {
                        fg.AppendItem(DodgeForwardNotUnderAttackMult, "DodgeForwardNotUnderAttackMult");
                    }
                    if (printMask?.BlockSkillModifierMult ?? true)
                    {
                        fg.AppendItem(BlockSkillModifierMult, "BlockSkillModifierMult");
                    }
                    if (printMask?.BlockSkillModifierBase ?? true)
                    {
                        fg.AppendItem(BlockSkillModifierBase, "BlockSkillModifierBase");
                    }
                    if (printMask?.BlockWhileUnderAttackMult ?? true)
                    {
                        fg.AppendItem(BlockWhileUnderAttackMult, "BlockWhileUnderAttackMult");
                    }
                    if (printMask?.BlockNotUnderAttackMult ?? true)
                    {
                        fg.AppendItem(BlockNotUnderAttackMult, "BlockNotUnderAttackMult");
                    }
                    if (printMask?.AttackSkillModifierMult ?? true)
                    {
                        fg.AppendItem(AttackSkillModifierMult, "AttackSkillModifierMult");
                    }
                    if (printMask?.AttackSkillModifierBase ?? true)
                    {
                        fg.AppendItem(AttackSkillModifierBase, "AttackSkillModifierBase");
                    }
                    if (printMask?.AttackWhileUnderAttackMult ?? true)
                    {
                        fg.AppendItem(AttackWhileUnderAttackMult, "AttackWhileUnderAttackMult");
                    }
                    if (printMask?.AttackNotUnderAttackMult ?? true)
                    {
                        fg.AppendItem(AttackNotUnderAttackMult, "AttackNotUnderAttackMult");
                    }
                    if (printMask?.AttackDuringBlockMult ?? true)
                    {
                        fg.AppendItem(AttackDuringBlockMult, "AttackDuringBlockMult");
                    }
                    if (printMask?.PowerAttackFatigueModBase ?? true)
                    {
                        fg.AppendItem(PowerAttackFatigueModBase, "PowerAttackFatigueModBase");
                    }
                    if (printMask?.PowerAttackFatigueModMult ?? true)
                    {
                        fg.AppendItem(PowerAttackFatigueModMult, "PowerAttackFatigueModMult");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? DodgeFatigueModMult;
            public Exception? DodgeFatigueModBase;
            public Exception? EncumbSpeedModBase;
            public Exception? EncumbSpeedModMult;
            public Exception? DodgeWhileUnderAttackMult;
            public Exception? DodgeNotUnderAttackMult;
            public Exception? DodgeBackWhileUnderAttackMult;
            public Exception? DodgeBackNotUnderAttackMult;
            public Exception? DodgeForwardWhileUnderAttackMult;
            public Exception? DodgeForwardNotUnderAttackMult;
            public Exception? BlockSkillModifierMult;
            public Exception? BlockSkillModifierBase;
            public Exception? BlockWhileUnderAttackMult;
            public Exception? BlockNotUnderAttackMult;
            public Exception? AttackSkillModifierMult;
            public Exception? AttackSkillModifierBase;
            public Exception? AttackWhileUnderAttackMult;
            public Exception? AttackNotUnderAttackMult;
            public Exception? AttackDuringBlockMult;
            public Exception? PowerAttackFatigueModBase;
            public Exception? PowerAttackFatigueModMult;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                CombatStyleAdvanced_FieldIndex enu = (CombatStyleAdvanced_FieldIndex)index;
                switch (enu)
                {
                    case CombatStyleAdvanced_FieldIndex.DodgeFatigueModMult:
                        return DodgeFatigueModMult;
                    case CombatStyleAdvanced_FieldIndex.DodgeFatigueModBase:
                        return DodgeFatigueModBase;
                    case CombatStyleAdvanced_FieldIndex.EncumbSpeedModBase:
                        return EncumbSpeedModBase;
                    case CombatStyleAdvanced_FieldIndex.EncumbSpeedModMult:
                        return EncumbSpeedModMult;
                    case CombatStyleAdvanced_FieldIndex.DodgeWhileUnderAttackMult:
                        return DodgeWhileUnderAttackMult;
                    case CombatStyleAdvanced_FieldIndex.DodgeNotUnderAttackMult:
                        return DodgeNotUnderAttackMult;
                    case CombatStyleAdvanced_FieldIndex.DodgeBackWhileUnderAttackMult:
                        return DodgeBackWhileUnderAttackMult;
                    case CombatStyleAdvanced_FieldIndex.DodgeBackNotUnderAttackMult:
                        return DodgeBackNotUnderAttackMult;
                    case CombatStyleAdvanced_FieldIndex.DodgeForwardWhileUnderAttackMult:
                        return DodgeForwardWhileUnderAttackMult;
                    case CombatStyleAdvanced_FieldIndex.DodgeForwardNotUnderAttackMult:
                        return DodgeForwardNotUnderAttackMult;
                    case CombatStyleAdvanced_FieldIndex.BlockSkillModifierMult:
                        return BlockSkillModifierMult;
                    case CombatStyleAdvanced_FieldIndex.BlockSkillModifierBase:
                        return BlockSkillModifierBase;
                    case CombatStyleAdvanced_FieldIndex.BlockWhileUnderAttackMult:
                        return BlockWhileUnderAttackMult;
                    case CombatStyleAdvanced_FieldIndex.BlockNotUnderAttackMult:
                        return BlockNotUnderAttackMult;
                    case CombatStyleAdvanced_FieldIndex.AttackSkillModifierMult:
                        return AttackSkillModifierMult;
                    case CombatStyleAdvanced_FieldIndex.AttackSkillModifierBase:
                        return AttackSkillModifierBase;
                    case CombatStyleAdvanced_FieldIndex.AttackWhileUnderAttackMult:
                        return AttackWhileUnderAttackMult;
                    case CombatStyleAdvanced_FieldIndex.AttackNotUnderAttackMult:
                        return AttackNotUnderAttackMult;
                    case CombatStyleAdvanced_FieldIndex.AttackDuringBlockMult:
                        return AttackDuringBlockMult;
                    case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModBase:
                        return PowerAttackFatigueModBase;
                    case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModMult:
                        return PowerAttackFatigueModMult;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                CombatStyleAdvanced_FieldIndex enu = (CombatStyleAdvanced_FieldIndex)index;
                switch (enu)
                {
                    case CombatStyleAdvanced_FieldIndex.DodgeFatigueModMult:
                        this.DodgeFatigueModMult = ex;
                        break;
                    case CombatStyleAdvanced_FieldIndex.DodgeFatigueModBase:
                        this.DodgeFatigueModBase = ex;
                        break;
                    case CombatStyleAdvanced_FieldIndex.EncumbSpeedModBase:
                        this.EncumbSpeedModBase = ex;
                        break;
                    case CombatStyleAdvanced_FieldIndex.EncumbSpeedModMult:
                        this.EncumbSpeedModMult = ex;
                        break;
                    case CombatStyleAdvanced_FieldIndex.DodgeWhileUnderAttackMult:
                        this.DodgeWhileUnderAttackMult = ex;
                        break;
                    case CombatStyleAdvanced_FieldIndex.DodgeNotUnderAttackMult:
                        this.DodgeNotUnderAttackMult = ex;
                        break;
                    case CombatStyleAdvanced_FieldIndex.DodgeBackWhileUnderAttackMult:
                        this.DodgeBackWhileUnderAttackMult = ex;
                        break;
                    case CombatStyleAdvanced_FieldIndex.DodgeBackNotUnderAttackMult:
                        this.DodgeBackNotUnderAttackMult = ex;
                        break;
                    case CombatStyleAdvanced_FieldIndex.DodgeForwardWhileUnderAttackMult:
                        this.DodgeForwardWhileUnderAttackMult = ex;
                        break;
                    case CombatStyleAdvanced_FieldIndex.DodgeForwardNotUnderAttackMult:
                        this.DodgeForwardNotUnderAttackMult = ex;
                        break;
                    case CombatStyleAdvanced_FieldIndex.BlockSkillModifierMult:
                        this.BlockSkillModifierMult = ex;
                        break;
                    case CombatStyleAdvanced_FieldIndex.BlockSkillModifierBase:
                        this.BlockSkillModifierBase = ex;
                        break;
                    case CombatStyleAdvanced_FieldIndex.BlockWhileUnderAttackMult:
                        this.BlockWhileUnderAttackMult = ex;
                        break;
                    case CombatStyleAdvanced_FieldIndex.BlockNotUnderAttackMult:
                        this.BlockNotUnderAttackMult = ex;
                        break;
                    case CombatStyleAdvanced_FieldIndex.AttackSkillModifierMult:
                        this.AttackSkillModifierMult = ex;
                        break;
                    case CombatStyleAdvanced_FieldIndex.AttackSkillModifierBase:
                        this.AttackSkillModifierBase = ex;
                        break;
                    case CombatStyleAdvanced_FieldIndex.AttackWhileUnderAttackMult:
                        this.AttackWhileUnderAttackMult = ex;
                        break;
                    case CombatStyleAdvanced_FieldIndex.AttackNotUnderAttackMult:
                        this.AttackNotUnderAttackMult = ex;
                        break;
                    case CombatStyleAdvanced_FieldIndex.AttackDuringBlockMult:
                        this.AttackDuringBlockMult = ex;
                        break;
                    case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModBase:
                        this.PowerAttackFatigueModBase = ex;
                        break;
                    case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModMult:
                        this.PowerAttackFatigueModMult = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                CombatStyleAdvanced_FieldIndex enu = (CombatStyleAdvanced_FieldIndex)index;
                switch (enu)
                {
                    case CombatStyleAdvanced_FieldIndex.DodgeFatigueModMult:
                        this.DodgeFatigueModMult = (Exception?)obj;
                        break;
                    case CombatStyleAdvanced_FieldIndex.DodgeFatigueModBase:
                        this.DodgeFatigueModBase = (Exception?)obj;
                        break;
                    case CombatStyleAdvanced_FieldIndex.EncumbSpeedModBase:
                        this.EncumbSpeedModBase = (Exception?)obj;
                        break;
                    case CombatStyleAdvanced_FieldIndex.EncumbSpeedModMult:
                        this.EncumbSpeedModMult = (Exception?)obj;
                        break;
                    case CombatStyleAdvanced_FieldIndex.DodgeWhileUnderAttackMult:
                        this.DodgeWhileUnderAttackMult = (Exception?)obj;
                        break;
                    case CombatStyleAdvanced_FieldIndex.DodgeNotUnderAttackMult:
                        this.DodgeNotUnderAttackMult = (Exception?)obj;
                        break;
                    case CombatStyleAdvanced_FieldIndex.DodgeBackWhileUnderAttackMult:
                        this.DodgeBackWhileUnderAttackMult = (Exception?)obj;
                        break;
                    case CombatStyleAdvanced_FieldIndex.DodgeBackNotUnderAttackMult:
                        this.DodgeBackNotUnderAttackMult = (Exception?)obj;
                        break;
                    case CombatStyleAdvanced_FieldIndex.DodgeForwardWhileUnderAttackMult:
                        this.DodgeForwardWhileUnderAttackMult = (Exception?)obj;
                        break;
                    case CombatStyleAdvanced_FieldIndex.DodgeForwardNotUnderAttackMult:
                        this.DodgeForwardNotUnderAttackMult = (Exception?)obj;
                        break;
                    case CombatStyleAdvanced_FieldIndex.BlockSkillModifierMult:
                        this.BlockSkillModifierMult = (Exception?)obj;
                        break;
                    case CombatStyleAdvanced_FieldIndex.BlockSkillModifierBase:
                        this.BlockSkillModifierBase = (Exception?)obj;
                        break;
                    case CombatStyleAdvanced_FieldIndex.BlockWhileUnderAttackMult:
                        this.BlockWhileUnderAttackMult = (Exception?)obj;
                        break;
                    case CombatStyleAdvanced_FieldIndex.BlockNotUnderAttackMult:
                        this.BlockNotUnderAttackMult = (Exception?)obj;
                        break;
                    case CombatStyleAdvanced_FieldIndex.AttackSkillModifierMult:
                        this.AttackSkillModifierMult = (Exception?)obj;
                        break;
                    case CombatStyleAdvanced_FieldIndex.AttackSkillModifierBase:
                        this.AttackSkillModifierBase = (Exception?)obj;
                        break;
                    case CombatStyleAdvanced_FieldIndex.AttackWhileUnderAttackMult:
                        this.AttackWhileUnderAttackMult = (Exception?)obj;
                        break;
                    case CombatStyleAdvanced_FieldIndex.AttackNotUnderAttackMult:
                        this.AttackNotUnderAttackMult = (Exception?)obj;
                        break;
                    case CombatStyleAdvanced_FieldIndex.AttackDuringBlockMult:
                        this.AttackDuringBlockMult = (Exception?)obj;
                        break;
                    case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModBase:
                        this.PowerAttackFatigueModBase = (Exception?)obj;
                        break;
                    case CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModMult:
                        this.PowerAttackFatigueModMult = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (DodgeFatigueModMult != null) return true;
                if (DodgeFatigueModBase != null) return true;
                if (EncumbSpeedModBase != null) return true;
                if (EncumbSpeedModMult != null) return true;
                if (DodgeWhileUnderAttackMult != null) return true;
                if (DodgeNotUnderAttackMult != null) return true;
                if (DodgeBackWhileUnderAttackMult != null) return true;
                if (DodgeBackNotUnderAttackMult != null) return true;
                if (DodgeForwardWhileUnderAttackMult != null) return true;
                if (DodgeForwardNotUnderAttackMult != null) return true;
                if (BlockSkillModifierMult != null) return true;
                if (BlockSkillModifierBase != null) return true;
                if (BlockWhileUnderAttackMult != null) return true;
                if (BlockNotUnderAttackMult != null) return true;
                if (AttackSkillModifierMult != null) return true;
                if (AttackSkillModifierBase != null) return true;
                if (AttackWhileUnderAttackMult != null) return true;
                if (AttackNotUnderAttackMult != null) return true;
                if (AttackDuringBlockMult != null) return true;
                if (PowerAttackFatigueModBase != null) return true;
                if (PowerAttackFatigueModMult != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(DodgeFatigueModMult, "DodgeFatigueModMult");
                fg.AppendItem(DodgeFatigueModBase, "DodgeFatigueModBase");
                fg.AppendItem(EncumbSpeedModBase, "EncumbSpeedModBase");
                fg.AppendItem(EncumbSpeedModMult, "EncumbSpeedModMult");
                fg.AppendItem(DodgeWhileUnderAttackMult, "DodgeWhileUnderAttackMult");
                fg.AppendItem(DodgeNotUnderAttackMult, "DodgeNotUnderAttackMult");
                fg.AppendItem(DodgeBackWhileUnderAttackMult, "DodgeBackWhileUnderAttackMult");
                fg.AppendItem(DodgeBackNotUnderAttackMult, "DodgeBackNotUnderAttackMult");
                fg.AppendItem(DodgeForwardWhileUnderAttackMult, "DodgeForwardWhileUnderAttackMult");
                fg.AppendItem(DodgeForwardNotUnderAttackMult, "DodgeForwardNotUnderAttackMult");
                fg.AppendItem(BlockSkillModifierMult, "BlockSkillModifierMult");
                fg.AppendItem(BlockSkillModifierBase, "BlockSkillModifierBase");
                fg.AppendItem(BlockWhileUnderAttackMult, "BlockWhileUnderAttackMult");
                fg.AppendItem(BlockNotUnderAttackMult, "BlockNotUnderAttackMult");
                fg.AppendItem(AttackSkillModifierMult, "AttackSkillModifierMult");
                fg.AppendItem(AttackSkillModifierBase, "AttackSkillModifierBase");
                fg.AppendItem(AttackWhileUnderAttackMult, "AttackWhileUnderAttackMult");
                fg.AppendItem(AttackNotUnderAttackMult, "AttackNotUnderAttackMult");
                fg.AppendItem(AttackDuringBlockMult, "AttackDuringBlockMult");
                fg.AppendItem(PowerAttackFatigueModBase, "PowerAttackFatigueModBase");
                fg.AppendItem(PowerAttackFatigueModMult, "PowerAttackFatigueModMult");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.DodgeFatigueModMult = this.DodgeFatigueModMult.Combine(rhs.DodgeFatigueModMult);
                ret.DodgeFatigueModBase = this.DodgeFatigueModBase.Combine(rhs.DodgeFatigueModBase);
                ret.EncumbSpeedModBase = this.EncumbSpeedModBase.Combine(rhs.EncumbSpeedModBase);
                ret.EncumbSpeedModMult = this.EncumbSpeedModMult.Combine(rhs.EncumbSpeedModMult);
                ret.DodgeWhileUnderAttackMult = this.DodgeWhileUnderAttackMult.Combine(rhs.DodgeWhileUnderAttackMult);
                ret.DodgeNotUnderAttackMult = this.DodgeNotUnderAttackMult.Combine(rhs.DodgeNotUnderAttackMult);
                ret.DodgeBackWhileUnderAttackMult = this.DodgeBackWhileUnderAttackMult.Combine(rhs.DodgeBackWhileUnderAttackMult);
                ret.DodgeBackNotUnderAttackMult = this.DodgeBackNotUnderAttackMult.Combine(rhs.DodgeBackNotUnderAttackMult);
                ret.DodgeForwardWhileUnderAttackMult = this.DodgeForwardWhileUnderAttackMult.Combine(rhs.DodgeForwardWhileUnderAttackMult);
                ret.DodgeForwardNotUnderAttackMult = this.DodgeForwardNotUnderAttackMult.Combine(rhs.DodgeForwardNotUnderAttackMult);
                ret.BlockSkillModifierMult = this.BlockSkillModifierMult.Combine(rhs.BlockSkillModifierMult);
                ret.BlockSkillModifierBase = this.BlockSkillModifierBase.Combine(rhs.BlockSkillModifierBase);
                ret.BlockWhileUnderAttackMult = this.BlockWhileUnderAttackMult.Combine(rhs.BlockWhileUnderAttackMult);
                ret.BlockNotUnderAttackMult = this.BlockNotUnderAttackMult.Combine(rhs.BlockNotUnderAttackMult);
                ret.AttackSkillModifierMult = this.AttackSkillModifierMult.Combine(rhs.AttackSkillModifierMult);
                ret.AttackSkillModifierBase = this.AttackSkillModifierBase.Combine(rhs.AttackSkillModifierBase);
                ret.AttackWhileUnderAttackMult = this.AttackWhileUnderAttackMult.Combine(rhs.AttackWhileUnderAttackMult);
                ret.AttackNotUnderAttackMult = this.AttackNotUnderAttackMult.Combine(rhs.AttackNotUnderAttackMult);
                ret.AttackDuringBlockMult = this.AttackDuringBlockMult.Combine(rhs.AttackDuringBlockMult);
                ret.PowerAttackFatigueModBase = this.PowerAttackFatigueModBase.Combine(rhs.PowerAttackFatigueModBase);
                ret.PowerAttackFatigueModMult = this.PowerAttackFatigueModMult.Combine(rhs.PowerAttackFatigueModMult);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool DodgeFatigueModMult;
            public bool DodgeFatigueModBase;
            public bool EncumbSpeedModBase;
            public bool EncumbSpeedModMult;
            public bool DodgeWhileUnderAttackMult;
            public bool DodgeNotUnderAttackMult;
            public bool DodgeBackWhileUnderAttackMult;
            public bool DodgeBackNotUnderAttackMult;
            public bool DodgeForwardWhileUnderAttackMult;
            public bool DodgeForwardNotUnderAttackMult;
            public bool BlockSkillModifierMult;
            public bool BlockSkillModifierBase;
            public bool BlockWhileUnderAttackMult;
            public bool BlockNotUnderAttackMult;
            public bool AttackSkillModifierMult;
            public bool AttackSkillModifierBase;
            public bool AttackWhileUnderAttackMult;
            public bool AttackNotUnderAttackMult;
            public bool AttackDuringBlockMult;
            public bool PowerAttackFatigueModBase;
            public bool PowerAttackFatigueModMult;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.DodgeFatigueModMult = defaultOn;
                this.DodgeFatigueModBase = defaultOn;
                this.EncumbSpeedModBase = defaultOn;
                this.EncumbSpeedModMult = defaultOn;
                this.DodgeWhileUnderAttackMult = defaultOn;
                this.DodgeNotUnderAttackMult = defaultOn;
                this.DodgeBackWhileUnderAttackMult = defaultOn;
                this.DodgeBackNotUnderAttackMult = defaultOn;
                this.DodgeForwardWhileUnderAttackMult = defaultOn;
                this.DodgeForwardNotUnderAttackMult = defaultOn;
                this.BlockSkillModifierMult = defaultOn;
                this.BlockSkillModifierBase = defaultOn;
                this.BlockWhileUnderAttackMult = defaultOn;
                this.BlockNotUnderAttackMult = defaultOn;
                this.AttackSkillModifierMult = defaultOn;
                this.AttackSkillModifierBase = defaultOn;
                this.AttackWhileUnderAttackMult = defaultOn;
                this.AttackNotUnderAttackMult = defaultOn;
                this.AttackDuringBlockMult = defaultOn;
                this.PowerAttackFatigueModBase = defaultOn;
                this.PowerAttackFatigueModMult = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((DodgeFatigueModMult, null));
                ret.Add((DodgeFatigueModBase, null));
                ret.Add((EncumbSpeedModBase, null));
                ret.Add((EncumbSpeedModMult, null));
                ret.Add((DodgeWhileUnderAttackMult, null));
                ret.Add((DodgeNotUnderAttackMult, null));
                ret.Add((DodgeBackWhileUnderAttackMult, null));
                ret.Add((DodgeBackNotUnderAttackMult, null));
                ret.Add((DodgeForwardWhileUnderAttackMult, null));
                ret.Add((DodgeForwardNotUnderAttackMult, null));
                ret.Add((BlockSkillModifierMult, null));
                ret.Add((BlockSkillModifierBase, null));
                ret.Add((BlockWhileUnderAttackMult, null));
                ret.Add((BlockNotUnderAttackMult, null));
                ret.Add((AttackSkillModifierMult, null));
                ret.Add((AttackSkillModifierBase, null));
                ret.Add((AttackWhileUnderAttackMult, null));
                ret.Add((AttackNotUnderAttackMult, null));
                ret.Add((AttackDuringBlockMult, null));
                ret.Add((PowerAttackFatigueModBase, null));
                ret.Add((PowerAttackFatigueModMult, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = CombatStyleAdvanced_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CombatStyleAdvancedBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((CombatStyleAdvancedBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static CombatStyleAdvanced CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new CombatStyleAdvanced();
            ((CombatStyleAdvancedSetterCommon)((ICombatStyleAdvancedGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CombatStyleAdvanced item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((CombatStyleAdvancedSetterCommon)((ICombatStyleAdvancedGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static CombatStyleAdvanced GetNew()
        {
            return new CombatStyleAdvanced();
        }

    }
    #endregion

    #region Interface
    public partial interface ICombatStyleAdvanced :
        ICombatStyleAdvancedGetter,
        ILoquiObjectSetter<ICombatStyleAdvanced>
    {
        new Single DodgeFatigueModMult { get; set; }
        new Single DodgeFatigueModBase { get; set; }
        new Single EncumbSpeedModBase { get; set; }
        new Single EncumbSpeedModMult { get; set; }
        new Single DodgeWhileUnderAttackMult { get; set; }
        new Single DodgeNotUnderAttackMult { get; set; }
        new Single DodgeBackWhileUnderAttackMult { get; set; }
        new Single DodgeBackNotUnderAttackMult { get; set; }
        new Single DodgeForwardWhileUnderAttackMult { get; set; }
        new Single DodgeForwardNotUnderAttackMult { get; set; }
        new Single BlockSkillModifierMult { get; set; }
        new Single BlockSkillModifierBase { get; set; }
        new Single BlockWhileUnderAttackMult { get; set; }
        new Single BlockNotUnderAttackMult { get; set; }
        new Single AttackSkillModifierMult { get; set; }
        new Single AttackSkillModifierBase { get; set; }
        new Single AttackWhileUnderAttackMult { get; set; }
        new Single AttackNotUnderAttackMult { get; set; }
        new Single AttackDuringBlockMult { get; set; }
        new Single PowerAttackFatigueModBase { get; set; }
        new Single PowerAttackFatigueModMult { get; set; }
    }

    public partial interface ICombatStyleAdvancedGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<ICombatStyleAdvancedGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => CombatStyleAdvanced_Registration.Instance;
        Single DodgeFatigueModMult { get; }
        Single DodgeFatigueModBase { get; }
        Single EncumbSpeedModBase { get; }
        Single EncumbSpeedModMult { get; }
        Single DodgeWhileUnderAttackMult { get; }
        Single DodgeNotUnderAttackMult { get; }
        Single DodgeBackWhileUnderAttackMult { get; }
        Single DodgeBackNotUnderAttackMult { get; }
        Single DodgeForwardWhileUnderAttackMult { get; }
        Single DodgeForwardNotUnderAttackMult { get; }
        Single BlockSkillModifierMult { get; }
        Single BlockSkillModifierBase { get; }
        Single BlockWhileUnderAttackMult { get; }
        Single BlockNotUnderAttackMult { get; }
        Single AttackSkillModifierMult { get; }
        Single AttackSkillModifierBase { get; }
        Single AttackWhileUnderAttackMult { get; }
        Single AttackNotUnderAttackMult { get; }
        Single AttackDuringBlockMult { get; }
        Single PowerAttackFatigueModBase { get; }
        Single PowerAttackFatigueModMult { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CombatStyleAdvancedMixIn
    {
        public static void Clear(this ICombatStyleAdvanced item)
        {
            ((CombatStyleAdvancedSetterCommon)((ICombatStyleAdvancedGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CombatStyleAdvanced.Mask<bool> GetEqualsMask(
            this ICombatStyleAdvancedGetter item,
            ICombatStyleAdvancedGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CombatStyleAdvancedCommon)((ICombatStyleAdvancedGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICombatStyleAdvancedGetter item,
            string? name = null,
            CombatStyleAdvanced.Mask<bool>? printMask = null)
        {
            return ((CombatStyleAdvancedCommon)((ICombatStyleAdvancedGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICombatStyleAdvancedGetter item,
            FileGeneration fg,
            string? name = null,
            CombatStyleAdvanced.Mask<bool>? printMask = null)
        {
            ((CombatStyleAdvancedCommon)((ICombatStyleAdvancedGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICombatStyleAdvancedGetter item,
            ICombatStyleAdvancedGetter rhs,
            CombatStyleAdvanced.TranslationMask? equalsMask = null)
        {
            return ((CombatStyleAdvancedCommon)((ICombatStyleAdvancedGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ICombatStyleAdvanced lhs,
            ICombatStyleAdvancedGetter rhs)
        {
            ((CombatStyleAdvancedSetterTranslationCommon)((ICombatStyleAdvancedGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICombatStyleAdvanced lhs,
            ICombatStyleAdvancedGetter rhs,
            CombatStyleAdvanced.TranslationMask? copyMask = null)
        {
            ((CombatStyleAdvancedSetterTranslationCommon)((ICombatStyleAdvancedGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICombatStyleAdvanced lhs,
            ICombatStyleAdvancedGetter rhs,
            out CombatStyleAdvanced.ErrorMask errorMask,
            CombatStyleAdvanced.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CombatStyleAdvancedSetterTranslationCommon)((ICombatStyleAdvancedGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = CombatStyleAdvanced.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICombatStyleAdvanced lhs,
            ICombatStyleAdvancedGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CombatStyleAdvancedSetterTranslationCommon)((ICombatStyleAdvancedGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static CombatStyleAdvanced DeepCopy(
            this ICombatStyleAdvancedGetter item,
            CombatStyleAdvanced.TranslationMask? copyMask = null)
        {
            return ((CombatStyleAdvancedSetterTranslationCommon)((ICombatStyleAdvancedGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CombatStyleAdvanced DeepCopy(
            this ICombatStyleAdvancedGetter item,
            out CombatStyleAdvanced.ErrorMask errorMask,
            CombatStyleAdvanced.TranslationMask? copyMask = null)
        {
            return ((CombatStyleAdvancedSetterTranslationCommon)((ICombatStyleAdvancedGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CombatStyleAdvanced DeepCopy(
            this ICombatStyleAdvancedGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CombatStyleAdvancedSetterTranslationCommon)((ICombatStyleAdvancedGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICombatStyleAdvanced item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((CombatStyleAdvancedSetterCommon)((ICombatStyleAdvancedGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum CombatStyleAdvanced_FieldIndex
    {
        DodgeFatigueModMult = 0,
        DodgeFatigueModBase = 1,
        EncumbSpeedModBase = 2,
        EncumbSpeedModMult = 3,
        DodgeWhileUnderAttackMult = 4,
        DodgeNotUnderAttackMult = 5,
        DodgeBackWhileUnderAttackMult = 6,
        DodgeBackNotUnderAttackMult = 7,
        DodgeForwardWhileUnderAttackMult = 8,
        DodgeForwardNotUnderAttackMult = 9,
        BlockSkillModifierMult = 10,
        BlockSkillModifierBase = 11,
        BlockWhileUnderAttackMult = 12,
        BlockNotUnderAttackMult = 13,
        AttackSkillModifierMult = 14,
        AttackSkillModifierBase = 15,
        AttackWhileUnderAttackMult = 16,
        AttackNotUnderAttackMult = 17,
        AttackDuringBlockMult = 18,
        PowerAttackFatigueModBase = 19,
        PowerAttackFatigueModMult = 20,
    }
    #endregion

    #region Registration
    public partial class CombatStyleAdvanced_Registration : ILoquiRegistration
    {
        public static readonly CombatStyleAdvanced_Registration Instance = new CombatStyleAdvanced_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 160,
            version: 0);

        public const string GUID = "ae4707ff-2084-4b55-96bb-8de3d58cd76f";

        public const ushort AdditionalFieldCount = 21;

        public const ushort FieldCount = 21;

        public static readonly Type MaskType = typeof(CombatStyleAdvanced.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CombatStyleAdvanced.ErrorMask);

        public static readonly Type ClassType = typeof(CombatStyleAdvanced);

        public static readonly Type GetterType = typeof(ICombatStyleAdvancedGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICombatStyleAdvanced);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.CombatStyleAdvanced";

        public const string Name = "CombatStyleAdvanced";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.CSAD;
        public static readonly Type BinaryWriteTranslation = typeof(CombatStyleAdvancedBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class CombatStyleAdvancedSetterCommon
    {
        public static readonly CombatStyleAdvancedSetterCommon Instance = new CombatStyleAdvancedSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICombatStyleAdvanced item)
        {
            ClearPartial();
            item.DodgeFatigueModMult = default;
            item.DodgeFatigueModBase = default;
            item.EncumbSpeedModBase = default;
            item.EncumbSpeedModMult = default;
            item.DodgeWhileUnderAttackMult = default;
            item.DodgeNotUnderAttackMult = default;
            item.DodgeBackWhileUnderAttackMult = default;
            item.DodgeBackNotUnderAttackMult = default;
            item.DodgeForwardWhileUnderAttackMult = default;
            item.DodgeForwardNotUnderAttackMult = default;
            item.BlockSkillModifierMult = default;
            item.BlockSkillModifierBase = default;
            item.BlockWhileUnderAttackMult = default;
            item.BlockNotUnderAttackMult = default;
            item.AttackSkillModifierMult = default;
            item.AttackSkillModifierBase = default;
            item.AttackWhileUnderAttackMult = default;
            item.AttackNotUnderAttackMult = default;
            item.AttackDuringBlockMult = default;
            item.PowerAttackFatigueModBase = default;
            item.PowerAttackFatigueModMult = default;
        }
        
        #region Mutagen
        public void RemapLinks(ICombatStyleAdvanced obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICombatStyleAdvanced item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.CSAD),
                translationParams?.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: CombatStyleAdvancedBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class CombatStyleAdvancedCommon
    {
        public static readonly CombatStyleAdvancedCommon Instance = new CombatStyleAdvancedCommon();

        public CombatStyleAdvanced.Mask<bool> GetEqualsMask(
            ICombatStyleAdvancedGetter item,
            ICombatStyleAdvancedGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CombatStyleAdvanced.Mask<bool>(false);
            ((CombatStyleAdvancedCommon)((ICombatStyleAdvancedGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICombatStyleAdvancedGetter item,
            ICombatStyleAdvancedGetter rhs,
            CombatStyleAdvanced.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.DodgeFatigueModMult = item.DodgeFatigueModMult.EqualsWithin(rhs.DodgeFatigueModMult);
            ret.DodgeFatigueModBase = item.DodgeFatigueModBase.EqualsWithin(rhs.DodgeFatigueModBase);
            ret.EncumbSpeedModBase = item.EncumbSpeedModBase.EqualsWithin(rhs.EncumbSpeedModBase);
            ret.EncumbSpeedModMult = item.EncumbSpeedModMult.EqualsWithin(rhs.EncumbSpeedModMult);
            ret.DodgeWhileUnderAttackMult = item.DodgeWhileUnderAttackMult.EqualsWithin(rhs.DodgeWhileUnderAttackMult);
            ret.DodgeNotUnderAttackMult = item.DodgeNotUnderAttackMult.EqualsWithin(rhs.DodgeNotUnderAttackMult);
            ret.DodgeBackWhileUnderAttackMult = item.DodgeBackWhileUnderAttackMult.EqualsWithin(rhs.DodgeBackWhileUnderAttackMult);
            ret.DodgeBackNotUnderAttackMult = item.DodgeBackNotUnderAttackMult.EqualsWithin(rhs.DodgeBackNotUnderAttackMult);
            ret.DodgeForwardWhileUnderAttackMult = item.DodgeForwardWhileUnderAttackMult.EqualsWithin(rhs.DodgeForwardWhileUnderAttackMult);
            ret.DodgeForwardNotUnderAttackMult = item.DodgeForwardNotUnderAttackMult.EqualsWithin(rhs.DodgeForwardNotUnderAttackMult);
            ret.BlockSkillModifierMult = item.BlockSkillModifierMult.EqualsWithin(rhs.BlockSkillModifierMult);
            ret.BlockSkillModifierBase = item.BlockSkillModifierBase.EqualsWithin(rhs.BlockSkillModifierBase);
            ret.BlockWhileUnderAttackMult = item.BlockWhileUnderAttackMult.EqualsWithin(rhs.BlockWhileUnderAttackMult);
            ret.BlockNotUnderAttackMult = item.BlockNotUnderAttackMult.EqualsWithin(rhs.BlockNotUnderAttackMult);
            ret.AttackSkillModifierMult = item.AttackSkillModifierMult.EqualsWithin(rhs.AttackSkillModifierMult);
            ret.AttackSkillModifierBase = item.AttackSkillModifierBase.EqualsWithin(rhs.AttackSkillModifierBase);
            ret.AttackWhileUnderAttackMult = item.AttackWhileUnderAttackMult.EqualsWithin(rhs.AttackWhileUnderAttackMult);
            ret.AttackNotUnderAttackMult = item.AttackNotUnderAttackMult.EqualsWithin(rhs.AttackNotUnderAttackMult);
            ret.AttackDuringBlockMult = item.AttackDuringBlockMult.EqualsWithin(rhs.AttackDuringBlockMult);
            ret.PowerAttackFatigueModBase = item.PowerAttackFatigueModBase.EqualsWithin(rhs.PowerAttackFatigueModBase);
            ret.PowerAttackFatigueModMult = item.PowerAttackFatigueModMult.EqualsWithin(rhs.PowerAttackFatigueModMult);
        }
        
        public string ToString(
            ICombatStyleAdvancedGetter item,
            string? name = null,
            CombatStyleAdvanced.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ICombatStyleAdvancedGetter item,
            FileGeneration fg,
            string? name = null,
            CombatStyleAdvanced.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"CombatStyleAdvanced =>");
            }
            else
            {
                fg.AppendLine($"{name} (CombatStyleAdvanced) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ICombatStyleAdvancedGetter item,
            FileGeneration fg,
            CombatStyleAdvanced.Mask<bool>? printMask = null)
        {
            if (printMask?.DodgeFatigueModMult ?? true)
            {
                fg.AppendItem(item.DodgeFatigueModMult, "DodgeFatigueModMult");
            }
            if (printMask?.DodgeFatigueModBase ?? true)
            {
                fg.AppendItem(item.DodgeFatigueModBase, "DodgeFatigueModBase");
            }
            if (printMask?.EncumbSpeedModBase ?? true)
            {
                fg.AppendItem(item.EncumbSpeedModBase, "EncumbSpeedModBase");
            }
            if (printMask?.EncumbSpeedModMult ?? true)
            {
                fg.AppendItem(item.EncumbSpeedModMult, "EncumbSpeedModMult");
            }
            if (printMask?.DodgeWhileUnderAttackMult ?? true)
            {
                fg.AppendItem(item.DodgeWhileUnderAttackMult, "DodgeWhileUnderAttackMult");
            }
            if (printMask?.DodgeNotUnderAttackMult ?? true)
            {
                fg.AppendItem(item.DodgeNotUnderAttackMult, "DodgeNotUnderAttackMult");
            }
            if (printMask?.DodgeBackWhileUnderAttackMult ?? true)
            {
                fg.AppendItem(item.DodgeBackWhileUnderAttackMult, "DodgeBackWhileUnderAttackMult");
            }
            if (printMask?.DodgeBackNotUnderAttackMult ?? true)
            {
                fg.AppendItem(item.DodgeBackNotUnderAttackMult, "DodgeBackNotUnderAttackMult");
            }
            if (printMask?.DodgeForwardWhileUnderAttackMult ?? true)
            {
                fg.AppendItem(item.DodgeForwardWhileUnderAttackMult, "DodgeForwardWhileUnderAttackMult");
            }
            if (printMask?.DodgeForwardNotUnderAttackMult ?? true)
            {
                fg.AppendItem(item.DodgeForwardNotUnderAttackMult, "DodgeForwardNotUnderAttackMult");
            }
            if (printMask?.BlockSkillModifierMult ?? true)
            {
                fg.AppendItem(item.BlockSkillModifierMult, "BlockSkillModifierMult");
            }
            if (printMask?.BlockSkillModifierBase ?? true)
            {
                fg.AppendItem(item.BlockSkillModifierBase, "BlockSkillModifierBase");
            }
            if (printMask?.BlockWhileUnderAttackMult ?? true)
            {
                fg.AppendItem(item.BlockWhileUnderAttackMult, "BlockWhileUnderAttackMult");
            }
            if (printMask?.BlockNotUnderAttackMult ?? true)
            {
                fg.AppendItem(item.BlockNotUnderAttackMult, "BlockNotUnderAttackMult");
            }
            if (printMask?.AttackSkillModifierMult ?? true)
            {
                fg.AppendItem(item.AttackSkillModifierMult, "AttackSkillModifierMult");
            }
            if (printMask?.AttackSkillModifierBase ?? true)
            {
                fg.AppendItem(item.AttackSkillModifierBase, "AttackSkillModifierBase");
            }
            if (printMask?.AttackWhileUnderAttackMult ?? true)
            {
                fg.AppendItem(item.AttackWhileUnderAttackMult, "AttackWhileUnderAttackMult");
            }
            if (printMask?.AttackNotUnderAttackMult ?? true)
            {
                fg.AppendItem(item.AttackNotUnderAttackMult, "AttackNotUnderAttackMult");
            }
            if (printMask?.AttackDuringBlockMult ?? true)
            {
                fg.AppendItem(item.AttackDuringBlockMult, "AttackDuringBlockMult");
            }
            if (printMask?.PowerAttackFatigueModBase ?? true)
            {
                fg.AppendItem(item.PowerAttackFatigueModBase, "PowerAttackFatigueModBase");
            }
            if (printMask?.PowerAttackFatigueModMult ?? true)
            {
                fg.AppendItem(item.PowerAttackFatigueModMult, "PowerAttackFatigueModMult");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICombatStyleAdvancedGetter? lhs,
            ICombatStyleAdvancedGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.DodgeFatigueModMult) ?? true))
            {
                if (!lhs.DodgeFatigueModMult.EqualsWithin(rhs.DodgeFatigueModMult)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.DodgeFatigueModBase) ?? true))
            {
                if (!lhs.DodgeFatigueModBase.EqualsWithin(rhs.DodgeFatigueModBase)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.EncumbSpeedModBase) ?? true))
            {
                if (!lhs.EncumbSpeedModBase.EqualsWithin(rhs.EncumbSpeedModBase)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.EncumbSpeedModMult) ?? true))
            {
                if (!lhs.EncumbSpeedModMult.EqualsWithin(rhs.EncumbSpeedModMult)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.DodgeWhileUnderAttackMult) ?? true))
            {
                if (!lhs.DodgeWhileUnderAttackMult.EqualsWithin(rhs.DodgeWhileUnderAttackMult)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.DodgeNotUnderAttackMult) ?? true))
            {
                if (!lhs.DodgeNotUnderAttackMult.EqualsWithin(rhs.DodgeNotUnderAttackMult)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.DodgeBackWhileUnderAttackMult) ?? true))
            {
                if (!lhs.DodgeBackWhileUnderAttackMult.EqualsWithin(rhs.DodgeBackWhileUnderAttackMult)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.DodgeBackNotUnderAttackMult) ?? true))
            {
                if (!lhs.DodgeBackNotUnderAttackMult.EqualsWithin(rhs.DodgeBackNotUnderAttackMult)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.DodgeForwardWhileUnderAttackMult) ?? true))
            {
                if (!lhs.DodgeForwardWhileUnderAttackMult.EqualsWithin(rhs.DodgeForwardWhileUnderAttackMult)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.DodgeForwardNotUnderAttackMult) ?? true))
            {
                if (!lhs.DodgeForwardNotUnderAttackMult.EqualsWithin(rhs.DodgeForwardNotUnderAttackMult)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.BlockSkillModifierMult) ?? true))
            {
                if (!lhs.BlockSkillModifierMult.EqualsWithin(rhs.BlockSkillModifierMult)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.BlockSkillModifierBase) ?? true))
            {
                if (!lhs.BlockSkillModifierBase.EqualsWithin(rhs.BlockSkillModifierBase)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.BlockWhileUnderAttackMult) ?? true))
            {
                if (!lhs.BlockWhileUnderAttackMult.EqualsWithin(rhs.BlockWhileUnderAttackMult)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.BlockNotUnderAttackMult) ?? true))
            {
                if (!lhs.BlockNotUnderAttackMult.EqualsWithin(rhs.BlockNotUnderAttackMult)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.AttackSkillModifierMult) ?? true))
            {
                if (!lhs.AttackSkillModifierMult.EqualsWithin(rhs.AttackSkillModifierMult)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.AttackSkillModifierBase) ?? true))
            {
                if (!lhs.AttackSkillModifierBase.EqualsWithin(rhs.AttackSkillModifierBase)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.AttackWhileUnderAttackMult) ?? true))
            {
                if (!lhs.AttackWhileUnderAttackMult.EqualsWithin(rhs.AttackWhileUnderAttackMult)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.AttackNotUnderAttackMult) ?? true))
            {
                if (!lhs.AttackNotUnderAttackMult.EqualsWithin(rhs.AttackNotUnderAttackMult)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.AttackDuringBlockMult) ?? true))
            {
                if (!lhs.AttackDuringBlockMult.EqualsWithin(rhs.AttackDuringBlockMult)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModBase) ?? true))
            {
                if (!lhs.PowerAttackFatigueModBase.EqualsWithin(rhs.PowerAttackFatigueModBase)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModMult) ?? true))
            {
                if (!lhs.PowerAttackFatigueModMult.EqualsWithin(rhs.PowerAttackFatigueModMult)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ICombatStyleAdvancedGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.DodgeFatigueModMult);
            hash.Add(item.DodgeFatigueModBase);
            hash.Add(item.EncumbSpeedModBase);
            hash.Add(item.EncumbSpeedModMult);
            hash.Add(item.DodgeWhileUnderAttackMult);
            hash.Add(item.DodgeNotUnderAttackMult);
            hash.Add(item.DodgeBackWhileUnderAttackMult);
            hash.Add(item.DodgeBackNotUnderAttackMult);
            hash.Add(item.DodgeForwardWhileUnderAttackMult);
            hash.Add(item.DodgeForwardNotUnderAttackMult);
            hash.Add(item.BlockSkillModifierMult);
            hash.Add(item.BlockSkillModifierBase);
            hash.Add(item.BlockWhileUnderAttackMult);
            hash.Add(item.BlockNotUnderAttackMult);
            hash.Add(item.AttackSkillModifierMult);
            hash.Add(item.AttackSkillModifierBase);
            hash.Add(item.AttackWhileUnderAttackMult);
            hash.Add(item.AttackNotUnderAttackMult);
            hash.Add(item.AttackDuringBlockMult);
            hash.Add(item.PowerAttackFatigueModBase);
            hash.Add(item.PowerAttackFatigueModMult);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return CombatStyleAdvanced.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(ICombatStyleAdvancedGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class CombatStyleAdvancedSetterTranslationCommon
    {
        public static readonly CombatStyleAdvancedSetterTranslationCommon Instance = new CombatStyleAdvancedSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICombatStyleAdvanced item,
            ICombatStyleAdvancedGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.DodgeFatigueModMult) ?? true))
            {
                item.DodgeFatigueModMult = rhs.DodgeFatigueModMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.DodgeFatigueModBase) ?? true))
            {
                item.DodgeFatigueModBase = rhs.DodgeFatigueModBase;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.EncumbSpeedModBase) ?? true))
            {
                item.EncumbSpeedModBase = rhs.EncumbSpeedModBase;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.EncumbSpeedModMult) ?? true))
            {
                item.EncumbSpeedModMult = rhs.EncumbSpeedModMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.DodgeWhileUnderAttackMult) ?? true))
            {
                item.DodgeWhileUnderAttackMult = rhs.DodgeWhileUnderAttackMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.DodgeNotUnderAttackMult) ?? true))
            {
                item.DodgeNotUnderAttackMult = rhs.DodgeNotUnderAttackMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.DodgeBackWhileUnderAttackMult) ?? true))
            {
                item.DodgeBackWhileUnderAttackMult = rhs.DodgeBackWhileUnderAttackMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.DodgeBackNotUnderAttackMult) ?? true))
            {
                item.DodgeBackNotUnderAttackMult = rhs.DodgeBackNotUnderAttackMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.DodgeForwardWhileUnderAttackMult) ?? true))
            {
                item.DodgeForwardWhileUnderAttackMult = rhs.DodgeForwardWhileUnderAttackMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.DodgeForwardNotUnderAttackMult) ?? true))
            {
                item.DodgeForwardNotUnderAttackMult = rhs.DodgeForwardNotUnderAttackMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.BlockSkillModifierMult) ?? true))
            {
                item.BlockSkillModifierMult = rhs.BlockSkillModifierMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.BlockSkillModifierBase) ?? true))
            {
                item.BlockSkillModifierBase = rhs.BlockSkillModifierBase;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.BlockWhileUnderAttackMult) ?? true))
            {
                item.BlockWhileUnderAttackMult = rhs.BlockWhileUnderAttackMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.BlockNotUnderAttackMult) ?? true))
            {
                item.BlockNotUnderAttackMult = rhs.BlockNotUnderAttackMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.AttackSkillModifierMult) ?? true))
            {
                item.AttackSkillModifierMult = rhs.AttackSkillModifierMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.AttackSkillModifierBase) ?? true))
            {
                item.AttackSkillModifierBase = rhs.AttackSkillModifierBase;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.AttackWhileUnderAttackMult) ?? true))
            {
                item.AttackWhileUnderAttackMult = rhs.AttackWhileUnderAttackMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.AttackNotUnderAttackMult) ?? true))
            {
                item.AttackNotUnderAttackMult = rhs.AttackNotUnderAttackMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.AttackDuringBlockMult) ?? true))
            {
                item.AttackDuringBlockMult = rhs.AttackDuringBlockMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModBase) ?? true))
            {
                item.PowerAttackFatigueModBase = rhs.PowerAttackFatigueModBase;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleAdvanced_FieldIndex.PowerAttackFatigueModMult) ?? true))
            {
                item.PowerAttackFatigueModMult = rhs.PowerAttackFatigueModMult;
            }
        }
        
        #endregion
        
        public CombatStyleAdvanced DeepCopy(
            ICombatStyleAdvancedGetter item,
            CombatStyleAdvanced.TranslationMask? copyMask = null)
        {
            CombatStyleAdvanced ret = (CombatStyleAdvanced)((CombatStyleAdvancedCommon)((ICombatStyleAdvancedGetter)item).CommonInstance()!).GetNew();
            ((CombatStyleAdvancedSetterTranslationCommon)((ICombatStyleAdvancedGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public CombatStyleAdvanced DeepCopy(
            ICombatStyleAdvancedGetter item,
            out CombatStyleAdvanced.ErrorMask errorMask,
            CombatStyleAdvanced.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CombatStyleAdvanced ret = (CombatStyleAdvanced)((CombatStyleAdvancedCommon)((ICombatStyleAdvancedGetter)item).CommonInstance()!).GetNew();
            ((CombatStyleAdvancedSetterTranslationCommon)((ICombatStyleAdvancedGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = CombatStyleAdvanced.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public CombatStyleAdvanced DeepCopy(
            ICombatStyleAdvancedGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CombatStyleAdvanced ret = (CombatStyleAdvanced)((CombatStyleAdvancedCommon)((ICombatStyleAdvancedGetter)item).CommonInstance()!).GetNew();
            ((CombatStyleAdvancedSetterTranslationCommon)((ICombatStyleAdvancedGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class CombatStyleAdvanced
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CombatStyleAdvanced_Registration.Instance;
        public static CombatStyleAdvanced_Registration StaticRegistration => CombatStyleAdvanced_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CombatStyleAdvancedCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return CombatStyleAdvancedSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CombatStyleAdvancedSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICombatStyleAdvancedGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ICombatStyleAdvancedGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ICombatStyleAdvancedGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class CombatStyleAdvancedBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static CombatStyleAdvancedBinaryWriteTranslation Instance = new CombatStyleAdvancedBinaryWriteTranslation();

        public static void WriteEmbedded(
            ICombatStyleAdvancedGetter item,
            MutagenWriter writer)
        {
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.DodgeFatigueModMult);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.DodgeFatigueModBase);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.EncumbSpeedModBase);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.EncumbSpeedModMult);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.DodgeWhileUnderAttackMult);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.DodgeNotUnderAttackMult);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.DodgeBackWhileUnderAttackMult);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.DodgeBackNotUnderAttackMult);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.DodgeForwardWhileUnderAttackMult);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.DodgeForwardNotUnderAttackMult);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BlockSkillModifierMult);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BlockSkillModifierBase);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BlockWhileUnderAttackMult);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BlockNotUnderAttackMult);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AttackSkillModifierMult);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AttackSkillModifierBase);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AttackWhileUnderAttackMult);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AttackNotUnderAttackMult);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AttackDuringBlockMult);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.PowerAttackFatigueModBase);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.PowerAttackFatigueModMult);
        }

        public void Write(
            MutagenWriter writer,
            ICombatStyleAdvancedGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.CSAD),
                overflowRecord: translationParams?.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (ICombatStyleAdvancedGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class CombatStyleAdvancedBinaryCreateTranslation
    {
        public readonly static CombatStyleAdvancedBinaryCreateTranslation Instance = new CombatStyleAdvancedBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ICombatStyleAdvanced item,
            MutagenFrame frame)
        {
            item.DodgeFatigueModMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.DodgeFatigueModBase = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.EncumbSpeedModBase = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.EncumbSpeedModMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.DodgeWhileUnderAttackMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.DodgeNotUnderAttackMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.DodgeBackWhileUnderAttackMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.DodgeBackNotUnderAttackMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.DodgeForwardWhileUnderAttackMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.DodgeForwardNotUnderAttackMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.BlockSkillModifierMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.BlockSkillModifierBase = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.BlockWhileUnderAttackMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.BlockNotUnderAttackMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.AttackSkillModifierMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.AttackSkillModifierBase = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.AttackWhileUnderAttackMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.AttackNotUnderAttackMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.AttackDuringBlockMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.PowerAttackFatigueModBase = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.PowerAttackFatigueModMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class CombatStyleAdvancedBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ICombatStyleAdvancedGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((CombatStyleAdvancedBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class CombatStyleAdvancedBinaryOverlay :
        PluginBinaryOverlay,
        ICombatStyleAdvancedGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CombatStyleAdvanced_Registration.Instance;
        public static CombatStyleAdvanced_Registration StaticRegistration => CombatStyleAdvanced_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CombatStyleAdvancedCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CombatStyleAdvancedSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICombatStyleAdvancedGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ICombatStyleAdvancedGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ICombatStyleAdvancedGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CombatStyleAdvancedBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((CombatStyleAdvancedBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Single DodgeFatigueModMult => _data.Slice(0x0, 0x4).Float();
        public Single DodgeFatigueModBase => _data.Slice(0x4, 0x4).Float();
        public Single EncumbSpeedModBase => _data.Slice(0x8, 0x4).Float();
        public Single EncumbSpeedModMult => _data.Slice(0xC, 0x4).Float();
        public Single DodgeWhileUnderAttackMult => _data.Slice(0x10, 0x4).Float();
        public Single DodgeNotUnderAttackMult => _data.Slice(0x14, 0x4).Float();
        public Single DodgeBackWhileUnderAttackMult => _data.Slice(0x18, 0x4).Float();
        public Single DodgeBackNotUnderAttackMult => _data.Slice(0x1C, 0x4).Float();
        public Single DodgeForwardWhileUnderAttackMult => _data.Slice(0x20, 0x4).Float();
        public Single DodgeForwardNotUnderAttackMult => _data.Slice(0x24, 0x4).Float();
        public Single BlockSkillModifierMult => _data.Slice(0x28, 0x4).Float();
        public Single BlockSkillModifierBase => _data.Slice(0x2C, 0x4).Float();
        public Single BlockWhileUnderAttackMult => _data.Slice(0x30, 0x4).Float();
        public Single BlockNotUnderAttackMult => _data.Slice(0x34, 0x4).Float();
        public Single AttackSkillModifierMult => _data.Slice(0x38, 0x4).Float();
        public Single AttackSkillModifierBase => _data.Slice(0x3C, 0x4).Float();
        public Single AttackWhileUnderAttackMult => _data.Slice(0x40, 0x4).Float();
        public Single AttackNotUnderAttackMult => _data.Slice(0x44, 0x4).Float();
        public Single AttackDuringBlockMult => _data.Slice(0x48, 0x4).Float();
        public Single PowerAttackFatigueModBase => _data.Slice(0x4C, 0x4).Float();
        public Single PowerAttackFatigueModMult => _data.Slice(0x50, 0x4).Float();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CombatStyleAdvancedBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static CombatStyleAdvancedBinaryOverlay CombatStyleAdvancedFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new CombatStyleAdvancedBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants, parseParams),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0x54 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static CombatStyleAdvancedBinaryOverlay CombatStyleAdvancedFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return CombatStyleAdvancedFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CombatStyleAdvancedMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICombatStyleAdvancedGetter rhs) return false;
            return ((CombatStyleAdvancedCommon)((ICombatStyleAdvancedGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(ICombatStyleAdvancedGetter? obj)
        {
            return ((CombatStyleAdvancedCommon)((ICombatStyleAdvancedGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((CombatStyleAdvancedCommon)((ICombatStyleAdvancedGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

