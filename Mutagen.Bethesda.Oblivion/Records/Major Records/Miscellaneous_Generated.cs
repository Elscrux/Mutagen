/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.RecordTypeMapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Miscellaneous :
        OblivionMajorRecord,
        IEquatable<IMiscellaneousGetter>,
        ILoquiObjectSetter<Miscellaneous>,
        IMiscellaneousInternal
    {
        #region Ctor
        protected Miscellaneous()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IMiscellaneousGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IMiscellaneousGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region Icon
        public String? Icon { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IMiscellaneousGetter.Icon => this.Icon;
        #endregion
        #region Script
        private readonly IFormLinkNullable<IScriptGetter> _Script = new FormLinkNullable<IScriptGetter>();
        public IFormLinkNullable<IScriptGetter> Script
        {
            get => _Script;
            set => _Script.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IScriptGetter> IMiscellaneousGetter.Script => this.Script;
        #endregion
        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MiscellaneousData? _Data;
        public MiscellaneousData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMiscellaneousDataGetter? IMiscellaneousGetter.Data => this.Data;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            MiscellaneousMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Icon = initialValue;
                this.Script = initialValue;
                this.Data = new MaskItem<TItem, MiscellaneousData.Mask<TItem>?>(initialValue, new MiscellaneousData.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Name,
                TItem Model,
                TItem Icon,
                TItem Script,
                TItem Data)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Icon = Icon;
                this.Script = Script;
                this.Data = new MaskItem<TItem, MiscellaneousData.Mask<TItem>?>(Data, new MiscellaneousData.Mask<TItem>(Data));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem Icon;
            public TItem Script;
            public MaskItem<TItem, MiscellaneousData.Mask<TItem>?>? Data { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
                if (!object.Equals(this.Script, rhs.Script)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.Icon);
                hash.Add(this.Script);
                hash.Add(this.Data);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.Icon)) return false;
                if (!eval(this.Script)) return false;
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.Icon)) return true;
                if (eval(this.Script)) return true;
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Miscellaneous.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Icon = eval(this.Icon);
                obj.Script = eval(this.Script);
                obj.Data = this.Data == null ? null : new MaskItem<R, MiscellaneousData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Miscellaneous.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Miscellaneous.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Miscellaneous.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Icon ?? true)
                    {
                        fg.AppendItem(Icon, "Icon");
                    }
                    if (printMask?.Script ?? true)
                    {
                        fg.AppendItem(Script, "Script");
                    }
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? Icon;
            public Exception? Script;
            public MaskItem<Exception?, MiscellaneousData.ErrorMask?>? Data;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Miscellaneous_FieldIndex enu = (Miscellaneous_FieldIndex)index;
                switch (enu)
                {
                    case Miscellaneous_FieldIndex.Name:
                        return Name;
                    case Miscellaneous_FieldIndex.Model:
                        return Model;
                    case Miscellaneous_FieldIndex.Icon:
                        return Icon;
                    case Miscellaneous_FieldIndex.Script:
                        return Script;
                    case Miscellaneous_FieldIndex.Data:
                        return Data;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Miscellaneous_FieldIndex enu = (Miscellaneous_FieldIndex)index;
                switch (enu)
                {
                    case Miscellaneous_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Miscellaneous_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Miscellaneous_FieldIndex.Icon:
                        this.Icon = ex;
                        break;
                    case Miscellaneous_FieldIndex.Script:
                        this.Script = ex;
                        break;
                    case Miscellaneous_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, MiscellaneousData.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Miscellaneous_FieldIndex enu = (Miscellaneous_FieldIndex)index;
                switch (enu)
                {
                    case Miscellaneous_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Miscellaneous_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Miscellaneous_FieldIndex.Icon:
                        this.Icon = (Exception?)obj;
                        break;
                    case Miscellaneous_FieldIndex.Script:
                        this.Script = (Exception?)obj;
                        break;
                    case Miscellaneous_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, MiscellaneousData.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Icon != null) return true;
                if (Script != null) return true;
                if (Data != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                Model?.ToString(fg);
                fg.AppendItem(Icon, "Icon");
                fg.AppendItem(Script, "Script");
                Data?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Icon = this.Icon.Combine(rhs.Icon);
                ret.Script = this.Script.Combine(rhs.Script);
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public Model.TranslationMask? Model;
            public bool Icon;
            public bool Script;
            public MiscellaneousData.TranslationMask? Data;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Icon = defaultOn;
                this.Script = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((Icon, null));
                ret.Add((Script, null));
                ret.Add((Data != null ? Data.OnOverall : DefaultOn, Data?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Miscellaneous_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => MiscellaneousCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => MiscellaneousSetterCommon.Instance.RemapLinks(this, mapping);
        public Miscellaneous(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private Miscellaneous(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Miscellaneous(IOblivionMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Miscellaneous(IOblivionMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Miscellaneous>.ToString(this);
        }

        protected override Type LinkType => typeof(IMiscellaneous);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IMiscellaneousGetter rhs) return false;
            return ((MiscellaneousCommon)((IMiscellaneousGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IMiscellaneousGetter? obj)
        {
            return ((MiscellaneousCommon)((IMiscellaneousGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((MiscellaneousCommon)((IMiscellaneousGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MiscellaneousBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((MiscellaneousBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Miscellaneous CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new Miscellaneous();
            ((MiscellaneousSetterCommon)((IMiscellaneousGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Miscellaneous item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((MiscellaneousSetterCommon)((IMiscellaneousGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Miscellaneous GetNew()
        {
            return new Miscellaneous();
        }

    }
    #endregion

    #region Interface
    public partial interface IMiscellaneous :
        IFormLinkContainer,
        IItem,
        ILoquiObjectSetter<IMiscellaneousInternal>,
        IMiscellaneousGetter,
        IModeled,
        INamed,
        INamedRequired,
        IOblivionMajorRecordInternal
    {
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        new String? Name { get; set; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        new String? Icon { get; set; }
        new IFormLinkNullable<IScriptGetter> Script { get; set; }
        new MiscellaneousData? Data { get; set; }
    }

    public partial interface IMiscellaneousInternal :
        IOblivionMajorRecordInternal,
        IMiscellaneous,
        IMiscellaneousGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts.MISC)]
    public partial interface IMiscellaneousGetter :
        IOblivionMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IItemGetter,
        ILoquiObject<IMiscellaneousGetter>,
        IMapsToGetter<IMiscellaneousGetter>,
        IModeledGetter,
        INamedGetter,
        INamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Miscellaneous_Registration.Instance;
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter
        /// </summary>
        String? Name { get; }
        #endregion
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        String? Icon { get; }
        IFormLinkNullableGetter<IScriptGetter> Script { get; }
        IMiscellaneousDataGetter? Data { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class MiscellaneousMixIn
    {
        public static void Clear(this IMiscellaneousInternal item)
        {
            ((MiscellaneousSetterCommon)((IMiscellaneousGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Miscellaneous.Mask<bool> GetEqualsMask(
            this IMiscellaneousGetter item,
            IMiscellaneousGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MiscellaneousCommon)((IMiscellaneousGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IMiscellaneousGetter item,
            string? name = null,
            Miscellaneous.Mask<bool>? printMask = null)
        {
            return ((MiscellaneousCommon)((IMiscellaneousGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IMiscellaneousGetter item,
            FileGeneration fg,
            string? name = null,
            Miscellaneous.Mask<bool>? printMask = null)
        {
            ((MiscellaneousCommon)((IMiscellaneousGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IMiscellaneousGetter item,
            IMiscellaneousGetter rhs,
            Miscellaneous.TranslationMask? equalsMask = null)
        {
            return ((MiscellaneousCommon)((IMiscellaneousGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IMiscellaneousInternal lhs,
            IMiscellaneousGetter rhs,
            out Miscellaneous.ErrorMask errorMask,
            Miscellaneous.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((MiscellaneousSetterTranslationCommon)((IMiscellaneousGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Miscellaneous.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IMiscellaneousInternal lhs,
            IMiscellaneousGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((MiscellaneousSetterTranslationCommon)((IMiscellaneousGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Miscellaneous DeepCopy(
            this IMiscellaneousGetter item,
            Miscellaneous.TranslationMask? copyMask = null)
        {
            return ((MiscellaneousSetterTranslationCommon)((IMiscellaneousGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Miscellaneous DeepCopy(
            this IMiscellaneousGetter item,
            out Miscellaneous.ErrorMask errorMask,
            Miscellaneous.TranslationMask? copyMask = null)
        {
            return ((MiscellaneousSetterTranslationCommon)((IMiscellaneousGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Miscellaneous DeepCopy(
            this IMiscellaneousGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((MiscellaneousSetterTranslationCommon)((IMiscellaneousGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Miscellaneous Duplicate(
            this IMiscellaneousGetter item,
            FormKey formKey,
            Miscellaneous.TranslationMask? copyMask = null)
        {
            return ((MiscellaneousCommon)((IMiscellaneousGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IMiscellaneousInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((MiscellaneousSetterCommon)((IMiscellaneousGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Miscellaneous_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Model = 6,
        Icon = 7,
        Script = 8,
        Data = 9,
    }
    #endregion

    #region Registration
    public partial class Miscellaneous_Registration : ILoquiRegistration
    {
        public static readonly Miscellaneous_Registration Instance = new Miscellaneous_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 77,
            version: 0);

        public const string GUID = "b894fd9b-01a7-4f5c-803f-44167e7d5b71";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(Miscellaneous.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Miscellaneous.ErrorMask);

        public static readonly Type ClassType = typeof(Miscellaneous);

        public static readonly Type GetterType = typeof(IMiscellaneousGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMiscellaneous);

        public static readonly Type? InternalSetterType = typeof(IMiscellaneousInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Miscellaneous";

        public const string Name = "Miscellaneous";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.MISC;
        public static readonly Type BinaryWriteTranslation = typeof(MiscellaneousBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class MiscellaneousSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly MiscellaneousSetterCommon Instance = new MiscellaneousSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IMiscellaneousInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Model = null;
            item.Icon = default;
            item.Script.Clear();
            item.Data = null;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IMiscellaneousInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IMiscellaneousInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IMiscellaneous obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Script.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IMiscellaneousInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            PluginUtilityTranslation.MajorRecordParse<IMiscellaneousInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: MiscellaneousBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: MiscellaneousBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (Miscellaneous)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            CopyInFromBinary(
                item: (Miscellaneous)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    public partial class MiscellaneousCommon : OblivionMajorRecordCommon
    {
        public new static readonly MiscellaneousCommon Instance = new MiscellaneousCommon();

        public Miscellaneous.Mask<bool> GetEqualsMask(
            IMiscellaneousGetter item,
            IMiscellaneousGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Miscellaneous.Mask<bool>(false);
            ((MiscellaneousCommon)((IMiscellaneousGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMiscellaneousGetter item,
            IMiscellaneousGetter rhs,
            Miscellaneous.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Icon = string.Equals(item.Icon, rhs.Icon);
            ret.Script = item.Script.Equals(rhs.Script);
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IMiscellaneousGetter item,
            string? name = null,
            Miscellaneous.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IMiscellaneousGetter item,
            FileGeneration fg,
            string? name = null,
            Miscellaneous.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Miscellaneous =>");
            }
            else
            {
                fg.AppendLine($"{name} (Miscellaneous) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IMiscellaneousGetter item,
            FileGeneration fg,
            Miscellaneous.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.ToString(fg, "Model");
            }
            if ((printMask?.Icon ?? true)
                && item.Icon is {} IconItem)
            {
                fg.AppendItem(IconItem, "Icon");
            }
            if (printMask?.Script ?? true)
            {
                fg.AppendItem(item.Script.FormKeyNullable, "Script");
            }
            if ((printMask?.Data?.Overall ?? true)
                && item.Data is {} DataItem)
            {
                DataItem?.ToString(fg, "Data");
            }
        }
        
        public static Miscellaneous_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Miscellaneous_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Miscellaneous_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.VersionControl:
                    return (Miscellaneous_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Miscellaneous_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Miscellaneous_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Miscellaneous_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Miscellaneous_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Miscellaneous_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Miscellaneous_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Miscellaneous_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMiscellaneousGetter? lhs,
            IMiscellaneousGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IOblivionMajorRecordGetter)lhs, (IOblivionMajorRecordGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)Miscellaneous_FieldIndex.Name) ?? true))
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Miscellaneous_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, crystal?.GetSubCrystal((int)Miscellaneous_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Miscellaneous_FieldIndex.Icon) ?? true))
            {
                if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Miscellaneous_FieldIndex.Script) ?? true))
            {
                if (!lhs.Script.Equals(rhs.Script)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Miscellaneous_FieldIndex.Data) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Data, rhs.Data, out var lhsData, out var rhsData, out var isDataEqual))
                {
                    if (!((MiscellaneousDataCommon)((IMiscellaneousDataGetter)lhsData).CommonInstance()!).Equals(lhsData, rhsData, crystal?.GetSubCrystal((int)Miscellaneous_FieldIndex.Data))) return false;
                }
                else if (!isDataEqual) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IMiscellaneousGetter?)lhs,
                rhs: rhs as IMiscellaneousGetter,
                crystal: crystal);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IMiscellaneousGetter?)lhs,
                rhs: rhs as IMiscellaneousGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(IMiscellaneousGetter item)
        {
            var hash = new HashCode();
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            if (item.Icon is {} Iconitem)
            {
                hash.Add(Iconitem);
            }
            hash.Add(item.Script);
            if (item.Data is {} Dataitem)
            {
                hash.Add(Dataitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IMiscellaneousGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IMiscellaneousGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Miscellaneous.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IMiscellaneousGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Script.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Script);
            }
            yield break;
        }
        
        #region Duplicate
        public Miscellaneous Duplicate(
            IMiscellaneousGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Miscellaneous(formKey);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override OblivionMajorRecord Duplicate(
            IOblivionMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IMiscellaneousGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IMiscellaneousGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class MiscellaneousSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly MiscellaneousSetterTranslationCommon Instance = new MiscellaneousSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IMiscellaneousInternal item,
            IMiscellaneousGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IMiscellaneous item,
            IMiscellaneousGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IOblivionMajorRecord)item,
                (IOblivionMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Miscellaneous_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Miscellaneous_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Miscellaneous_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Miscellaneous_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Miscellaneous_FieldIndex.Icon) ?? true))
            {
                item.Icon = rhs.Icon;
            }
            if ((copyMask?.GetShouldTranslate((int)Miscellaneous_FieldIndex.Script) ?? true))
            {
                item.Script.SetTo(rhs.Script.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Miscellaneous_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)Miscellaneous_FieldIndex.Data);
                try
                {
                    if(rhs.Data is {} rhsData)
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Miscellaneous_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMiscellaneousInternal)item,
                rhs: (IMiscellaneousGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMiscellaneous)item,
                rhs: (IMiscellaneousGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMiscellaneousInternal)item,
                rhs: (IMiscellaneousGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMiscellaneous)item,
                rhs: (IMiscellaneousGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Miscellaneous DeepCopy(
            IMiscellaneousGetter item,
            Miscellaneous.TranslationMask? copyMask = null)
        {
            Miscellaneous ret = (Miscellaneous)((MiscellaneousCommon)((IMiscellaneousGetter)item).CommonInstance()!).GetNew();
            ((MiscellaneousSetterTranslationCommon)((IMiscellaneousGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Miscellaneous DeepCopy(
            IMiscellaneousGetter item,
            out Miscellaneous.ErrorMask errorMask,
            Miscellaneous.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Miscellaneous ret = (Miscellaneous)((MiscellaneousCommon)((IMiscellaneousGetter)item).CommonInstance()!).GetNew();
            ((MiscellaneousSetterTranslationCommon)((IMiscellaneousGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Miscellaneous.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Miscellaneous DeepCopy(
            IMiscellaneousGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Miscellaneous ret = (Miscellaneous)((MiscellaneousCommon)((IMiscellaneousGetter)item).CommonInstance()!).GetNew();
            ((MiscellaneousSetterTranslationCommon)((IMiscellaneousGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Miscellaneous
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Miscellaneous_Registration.Instance;
        public new static Miscellaneous_Registration StaticRegistration => Miscellaneous_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MiscellaneousCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return MiscellaneousSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MiscellaneousSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class MiscellaneousBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static MiscellaneousBinaryWriteTranslation Instance = new MiscellaneousBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IMiscellaneousGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate);
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Icon,
                header: translationParams.ConvertToCustom(RecordTypes.ICON),
                binaryType: StringBinaryType.NullTerminate);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Script,
                header: translationParams.ConvertToCustom(RecordTypes.SCRI));
            if (item.Data is {} DataItem)
            {
                ((MiscellaneousDataBinaryWriteTranslation)((IBinaryItem)DataItem).BinaryWriteTranslator).Write(
                    item: DataItem,
                    writer: writer,
                    translationParams: translationParams);
            }
        }

        public void Write(
            MutagenWriter writer,
            IMiscellaneousGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Record(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.MISC)))
            {
                try
                {
                    OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        translationParams: translationParams);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Enrich(ex, item);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IMiscellaneousGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IMiscellaneousGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IMiscellaneousGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class MiscellaneousBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static MiscellaneousBinaryCreateTranslation Instance = new MiscellaneousBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.MISC;
        public static void FillBinaryStructs(
            IMiscellaneousInternal item,
            MutagenFrame frame)
        {
            OblivionMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IMiscellaneousInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams? translationParams = null)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Miscellaneous_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams);
                    return (int)Miscellaneous_FieldIndex.Model;
                }
                case RecordTypeInts.ICON:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Icon = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Miscellaneous_FieldIndex.Icon;
                }
                case RecordTypeInts.SCRI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Script.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Miscellaneous_FieldIndex.Script;
                }
                case RecordTypeInts.DATA:
                {
                    item.Data = Mutagen.Bethesda.Oblivion.MiscellaneousData.CreateFromBinary(frame: frame);
                    return (int)Miscellaneous_FieldIndex.Data;
                }
                default:
                    return OblivionMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class MiscellaneousBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class MiscellaneousBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IMiscellaneousGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Miscellaneous_Registration.Instance;
        public new static Miscellaneous_Registration StaticRegistration => Miscellaneous_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MiscellaneousCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MiscellaneousSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<IFormLinkGetter> ContainedFormLinks => MiscellaneousCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MiscellaneousBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((MiscellaneousBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IMiscellaneous);


        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants)) : default(string?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        #endregion
        #endregion
        public IModelGetter? Model { get; private set; }
        #region Icon
        private int? _IconLocation;
        public String? Icon => _IconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _IconLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region Script
        private int? _ScriptLocation;
        public IFormLinkNullableGetter<IScriptGetter> Script => _ScriptLocation.HasValue ? new FormLinkNullable<IScriptGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ScriptLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IScriptGetter>.Null;
        #endregion
        #region Data
        private RangeInt32? _DataLocation;
        public IMiscellaneousDataGetter? Data => _DataLocation.HasValue ? MiscellaneousDataBinaryOverlay.MiscellaneousDataFactory(new OverlayStream(_data.Slice(_DataLocation!.Value.Min), _package), _package) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected MiscellaneousBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static MiscellaneousBinaryOverlay MiscellaneousFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            stream = PluginUtilityTranslation.DecompressStream(stream);
            var ret = new MiscellaneousBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0xC + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                parseParams: parseParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static MiscellaneousBinaryOverlay MiscellaneousFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return MiscellaneousFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams? parseParams = null)
        {
            type = parseParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Miscellaneous_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        parseParams: parseParams);
                    return (int)Miscellaneous_FieldIndex.Model;
                }
                case RecordTypeInts.ICON:
                {
                    _IconLocation = (stream.Position - offset);
                    return (int)Miscellaneous_FieldIndex.Icon;
                }
                case RecordTypeInts.SCRI:
                {
                    _ScriptLocation = (stream.Position - offset);
                    return (int)Miscellaneous_FieldIndex.Script;
                }
                case RecordTypeInts.DATA:
                {
                    _DataLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Miscellaneous_FieldIndex.Data;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            MiscellaneousMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Miscellaneous>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IMiscellaneousGetter rhs) return false;
            return ((MiscellaneousCommon)((IMiscellaneousGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IMiscellaneousGetter? obj)
        {
            return ((MiscellaneousCommon)((IMiscellaneousGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((MiscellaneousCommon)((IMiscellaneousGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

