/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Oblivion.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LightData :
        IEquatable<ILightDataGetter>,
        ILightData,
        ILoquiObjectSetter<LightData>
    {
        #region Ctor
        public LightData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Versioning
        public LightData.VersioningBreaks Versioning { get; set; } = default(LightData.VersioningBreaks);
        #endregion
        #region Time
        public static readonly Int32 TimeDefault = -1;
        public Int32 Time { get; set; } = TimeDefault;
        #endregion
        #region Radius
        public UInt32 Radius { get; set; } = default(UInt32);
        #endregion
        #region Color
        public Color Color { get; set; } = default(Color);
        #endregion
        #region Flags
        public Light.LightFlag Flags { get; set; } = default(Light.LightFlag);
        #endregion
        #region FalloffExponent
        public static readonly Single FalloffExponentDefault = 1;
        public Single FalloffExponent { get; set; } = FalloffExponentDefault;
        #endregion
        #region FOV
        public static readonly Single FOVDefault = 90;
        public Single FOV { get; set; } = FOVDefault;
        #endregion
        #region Value
        public UInt32 Value { get; set; } = default(UInt32);
        #endregion
        #region Weight
        public Single Weight { get; set; } = default(Single);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            LightDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ILightDataGetter rhs) return false;
            return ((LightDataCommon)((ILightDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ILightDataGetter? obj)
        {
            return ((LightDataCommon)((ILightDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((LightDataCommon)((ILightDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Versioning = initialValue;
                this.Time = initialValue;
                this.Radius = initialValue;
                this.Color = initialValue;
                this.Flags = initialValue;
                this.FalloffExponent = initialValue;
                this.FOV = initialValue;
                this.Value = initialValue;
                this.Weight = initialValue;
            }

            public Mask(
                TItem Versioning,
                TItem Time,
                TItem Radius,
                TItem Color,
                TItem Flags,
                TItem FalloffExponent,
                TItem FOV,
                TItem Value,
                TItem Weight)
            {
                this.Versioning = Versioning;
                this.Time = Time;
                this.Radius = Radius;
                this.Color = Color;
                this.Flags = Flags;
                this.FalloffExponent = FalloffExponent;
                this.FOV = FOV;
                this.Value = Value;
                this.Weight = Weight;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Versioning;
            public TItem Time;
            public TItem Radius;
            public TItem Color;
            public TItem Flags;
            public TItem FalloffExponent;
            public TItem FOV;
            public TItem Value;
            public TItem Weight;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Versioning, rhs.Versioning)) return false;
                if (!object.Equals(this.Time, rhs.Time)) return false;
                if (!object.Equals(this.Radius, rhs.Radius)) return false;
                if (!object.Equals(this.Color, rhs.Color)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.FalloffExponent, rhs.FalloffExponent)) return false;
                if (!object.Equals(this.FOV, rhs.FOV)) return false;
                if (!object.Equals(this.Value, rhs.Value)) return false;
                if (!object.Equals(this.Weight, rhs.Weight)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Versioning);
                hash.Add(this.Time);
                hash.Add(this.Radius);
                hash.Add(this.Color);
                hash.Add(this.Flags);
                hash.Add(this.FalloffExponent);
                hash.Add(this.FOV);
                hash.Add(this.Value);
                hash.Add(this.Weight);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Versioning)) return false;
                if (!eval(this.Time)) return false;
                if (!eval(this.Radius)) return false;
                if (!eval(this.Color)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.FalloffExponent)) return false;
                if (!eval(this.FOV)) return false;
                if (!eval(this.Value)) return false;
                if (!eval(this.Weight)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Versioning)) return true;
                if (eval(this.Time)) return true;
                if (eval(this.Radius)) return true;
                if (eval(this.Color)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.FalloffExponent)) return true;
                if (eval(this.FOV)) return true;
                if (eval(this.Value)) return true;
                if (eval(this.Weight)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new LightData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Versioning = eval(this.Versioning);
                obj.Time = eval(this.Time);
                obj.Radius = eval(this.Radius);
                obj.Color = eval(this.Color);
                obj.Flags = eval(this.Flags);
                obj.FalloffExponent = eval(this.FalloffExponent);
                obj.FOV = eval(this.FOV);
                obj.Value = eval(this.Value);
                obj.Weight = eval(this.Weight);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(LightData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, LightData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(LightData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Versioning ?? true)
                    {
                        sb.AppendItem(Versioning, "Versioning");
                    }
                    if (printMask?.Time ?? true)
                    {
                        sb.AppendItem(Time, "Time");
                    }
                    if (printMask?.Radius ?? true)
                    {
                        sb.AppendItem(Radius, "Radius");
                    }
                    if (printMask?.Color ?? true)
                    {
                        sb.AppendItem(Color, "Color");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.FalloffExponent ?? true)
                    {
                        sb.AppendItem(FalloffExponent, "FalloffExponent");
                    }
                    if (printMask?.FOV ?? true)
                    {
                        sb.AppendItem(FOV, "FOV");
                    }
                    if (printMask?.Value ?? true)
                    {
                        sb.AppendItem(Value, "Value");
                    }
                    if (printMask?.Weight ?? true)
                    {
                        sb.AppendItem(Weight, "Weight");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Versioning;
            public Exception? Time;
            public Exception? Radius;
            public Exception? Color;
            public Exception? Flags;
            public Exception? FalloffExponent;
            public Exception? FOV;
            public Exception? Value;
            public Exception? Weight;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                LightData_FieldIndex enu = (LightData_FieldIndex)index;
                switch (enu)
                {
                    case LightData_FieldIndex.Versioning:
                        return Versioning;
                    case LightData_FieldIndex.Time:
                        return Time;
                    case LightData_FieldIndex.Radius:
                        return Radius;
                    case LightData_FieldIndex.Color:
                        return Color;
                    case LightData_FieldIndex.Flags:
                        return Flags;
                    case LightData_FieldIndex.FalloffExponent:
                        return FalloffExponent;
                    case LightData_FieldIndex.FOV:
                        return FOV;
                    case LightData_FieldIndex.Value:
                        return Value;
                    case LightData_FieldIndex.Weight:
                        return Weight;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                LightData_FieldIndex enu = (LightData_FieldIndex)index;
                switch (enu)
                {
                    case LightData_FieldIndex.Versioning:
                        this.Versioning = ex;
                        break;
                    case LightData_FieldIndex.Time:
                        this.Time = ex;
                        break;
                    case LightData_FieldIndex.Radius:
                        this.Radius = ex;
                        break;
                    case LightData_FieldIndex.Color:
                        this.Color = ex;
                        break;
                    case LightData_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case LightData_FieldIndex.FalloffExponent:
                        this.FalloffExponent = ex;
                        break;
                    case LightData_FieldIndex.FOV:
                        this.FOV = ex;
                        break;
                    case LightData_FieldIndex.Value:
                        this.Value = ex;
                        break;
                    case LightData_FieldIndex.Weight:
                        this.Weight = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                LightData_FieldIndex enu = (LightData_FieldIndex)index;
                switch (enu)
                {
                    case LightData_FieldIndex.Versioning:
                        this.Versioning = (Exception?)obj;
                        break;
                    case LightData_FieldIndex.Time:
                        this.Time = (Exception?)obj;
                        break;
                    case LightData_FieldIndex.Radius:
                        this.Radius = (Exception?)obj;
                        break;
                    case LightData_FieldIndex.Color:
                        this.Color = (Exception?)obj;
                        break;
                    case LightData_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case LightData_FieldIndex.FalloffExponent:
                        this.FalloffExponent = (Exception?)obj;
                        break;
                    case LightData_FieldIndex.FOV:
                        this.FOV = (Exception?)obj;
                        break;
                    case LightData_FieldIndex.Value:
                        this.Value = (Exception?)obj;
                        break;
                    case LightData_FieldIndex.Weight:
                        this.Weight = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Versioning != null) return true;
                if (Time != null) return true;
                if (Radius != null) return true;
                if (Color != null) return true;
                if (Flags != null) return true;
                if (FalloffExponent != null) return true;
                if (FOV != null) return true;
                if (Value != null) return true;
                if (Weight != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Versioning, "Versioning");
                }
                {
                    sb.AppendItem(Time, "Time");
                }
                {
                    sb.AppendItem(Radius, "Radius");
                }
                {
                    sb.AppendItem(Color, "Color");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(FalloffExponent, "FalloffExponent");
                }
                {
                    sb.AppendItem(FOV, "FOV");
                }
                {
                    sb.AppendItem(Value, "Value");
                }
                {
                    sb.AppendItem(Weight, "Weight");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Versioning = this.Versioning.Combine(rhs.Versioning);
                ret.Time = this.Time.Combine(rhs.Time);
                ret.Radius = this.Radius.Combine(rhs.Radius);
                ret.Color = this.Color.Combine(rhs.Color);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.FalloffExponent = this.FalloffExponent.Combine(rhs.FalloffExponent);
                ret.FOV = this.FOV.Combine(rhs.FOV);
                ret.Value = this.Value.Combine(rhs.Value);
                ret.Weight = this.Weight.Combine(rhs.Weight);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Versioning;
            public bool Time;
            public bool Radius;
            public bool Color;
            public bool Flags;
            public bool FalloffExponent;
            public bool FOV;
            public bool Value;
            public bool Weight;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Versioning = defaultOn;
                this.Time = defaultOn;
                this.Radius = defaultOn;
                this.Color = defaultOn;
                this.Flags = defaultOn;
                this.FalloffExponent = defaultOn;
                this.FOV = defaultOn;
                this.Value = defaultOn;
                this.Weight = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Versioning, null));
                ret.Add((Time, null));
                ret.Add((Radius, null));
                ret.Add((Color, null));
                ret.Add((Flags, null));
                ret.Add((FalloffExponent, null));
                ret.Add((FOV, null));
                ret.Add((Value, null));
                ret.Add((Weight, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        [Flags]
        public enum VersioningBreaks
        {
            Break0 = 1
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LightDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LightDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static LightData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new LightData();
            ((LightDataSetterCommon)((ILightDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out LightData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((LightDataSetterCommon)((ILightDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static LightData GetNew()
        {
            return new LightData();
        }

    }
    #endregion

    #region Interface
    public partial interface ILightData :
        ILightDataGetter,
        ILoquiObjectSetter<ILightData>,
        IWeightValue
    {
        new LightData.VersioningBreaks Versioning { get; set; }
        new Int32 Time { get; set; }
        new UInt32 Radius { get; set; }
        new Color Color { get; set; }
        new Light.LightFlag Flags { get; set; }
        new Single FalloffExponent { get; set; }
        new Single FOV { get; set; }
        new UInt32 Value { get; set; }
        new Single Weight { get; set; }
    }

    public partial interface ILightDataGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<ILightDataGetter>,
        IWeightValueGetter
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => LightData_Registration.Instance;
        LightData.VersioningBreaks Versioning { get; }
        Int32 Time { get; }
        UInt32 Radius { get; }
        Color Color { get; }
        Light.LightFlag Flags { get; }
        Single FalloffExponent { get; }
        Single FOV { get; }
        UInt32 Value { get; }
        Single Weight { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class LightDataMixIn
    {
        public static void Clear(this ILightData item)
        {
            ((LightDataSetterCommon)((ILightDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static LightData.Mask<bool> GetEqualsMask(
            this ILightDataGetter item,
            ILightDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LightDataCommon)((ILightDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ILightDataGetter item,
            string? name = null,
            LightData.Mask<bool>? printMask = null)
        {
            return ((LightDataCommon)((ILightDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ILightDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            LightData.Mask<bool>? printMask = null)
        {
            ((LightDataCommon)((ILightDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ILightDataGetter item,
            ILightDataGetter rhs,
            LightData.TranslationMask? equalsMask = null)
        {
            return ((LightDataCommon)((ILightDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ILightData lhs,
            ILightDataGetter rhs)
        {
            ((LightDataSetterTranslationCommon)((ILightDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ILightData lhs,
            ILightDataGetter rhs,
            LightData.TranslationMask? copyMask = null)
        {
            ((LightDataSetterTranslationCommon)((ILightDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ILightData lhs,
            ILightDataGetter rhs,
            out LightData.ErrorMask errorMask,
            LightData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LightDataSetterTranslationCommon)((ILightDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = LightData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILightData lhs,
            ILightDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LightDataSetterTranslationCommon)((ILightDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static LightData DeepCopy(
            this ILightDataGetter item,
            LightData.TranslationMask? copyMask = null)
        {
            return ((LightDataSetterTranslationCommon)((ILightDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LightData DeepCopy(
            this ILightDataGetter item,
            out LightData.ErrorMask errorMask,
            LightData.TranslationMask? copyMask = null)
        {
            return ((LightDataSetterTranslationCommon)((ILightDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LightData DeepCopy(
            this ILightDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LightDataSetterTranslationCommon)((ILightDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ILightData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((LightDataSetterCommon)((ILightDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    #region Field Index
    internal enum LightData_FieldIndex
    {
        Versioning = 0,
        Time = 1,
        Radius = 2,
        Color = 3,
        Flags = 4,
        FalloffExponent = 5,
        FOV = 6,
        Value = 7,
        Weight = 8,
    }
    #endregion

    #region Registration
    internal partial class LightData_Registration : ILoquiRegistration
    {
        public static readonly LightData_Registration Instance = new LightData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(LightData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LightData.ErrorMask);

        public static readonly Type ClassType = typeof(LightData);

        public static readonly Type GetterType = typeof(ILightDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILightData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.LightData";

        public const string Name = "LightData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.DATA;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.DATA);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(LightDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class LightDataSetterCommon
    {
        public static readonly LightDataSetterCommon Instance = new LightDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILightData item)
        {
            ClearPartial();
            item.Versioning = default(LightData.VersioningBreaks);
            item.Time = LightData.TimeDefault;
            item.Radius = default(UInt32);
            item.Color = default(Color);
            item.Flags = default(Light.LightFlag);
            item.FalloffExponent = LightData.FalloffExponentDefault;
            item.FOV = LightData.FOVDefault;
            item.Value = default(UInt32);
            item.Weight = default(Single);
        }
        
        #region Mutagen
        public void RemapLinks(ILightData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILightData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.DATA),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: LightDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class LightDataCommon
    {
        public static readonly LightDataCommon Instance = new LightDataCommon();

        public LightData.Mask<bool> GetEqualsMask(
            ILightDataGetter item,
            ILightDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LightData.Mask<bool>(false);
            ((LightDataCommon)((ILightDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILightDataGetter item,
            ILightDataGetter rhs,
            LightData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Versioning = item.Versioning == rhs.Versioning;
            ret.Time = item.Time == rhs.Time;
            ret.Radius = item.Radius == rhs.Radius;
            ret.Color = item.Color.ColorOnlyEquals(rhs.Color);
            ret.Flags = item.Flags == rhs.Flags;
            ret.FalloffExponent = item.FalloffExponent.EqualsWithin(rhs.FalloffExponent);
            ret.FOV = item.FOV.EqualsWithin(rhs.FOV);
            ret.Value = item.Value == rhs.Value;
            ret.Weight = item.Weight.EqualsWithin(rhs.Weight);
        }
        
        public string Print(
            ILightDataGetter item,
            string? name = null,
            LightData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ILightDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            LightData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"LightData =>");
            }
            else
            {
                sb.AppendLine($"{name} (LightData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ILightDataGetter item,
            StructuredStringBuilder sb,
            LightData.Mask<bool>? printMask = null)
        {
            if (printMask?.Versioning ?? true)
            {
                sb.AppendItem(item.Versioning, "Versioning");
            }
            if (printMask?.Time ?? true)
            {
                sb.AppendItem(item.Time, "Time");
            }
            if (printMask?.Radius ?? true)
            {
                sb.AppendItem(item.Radius, "Radius");
            }
            if (printMask?.Color ?? true)
            {
                sb.AppendItem(item.Color, "Color");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.FalloffExponent ?? true)
            {
                sb.AppendItem(item.FalloffExponent, "FalloffExponent");
            }
            if (printMask?.FOV ?? true)
            {
                sb.AppendItem(item.FOV, "FOV");
            }
            if (printMask?.Value ?? true)
            {
                sb.AppendItem(item.Value, "Value");
            }
            if (printMask?.Weight ?? true)
            {
                sb.AppendItem(item.Weight, "Weight");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILightDataGetter? lhs,
            ILightDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)LightData_FieldIndex.Versioning) ?? true))
            {
                if (lhs.Versioning != rhs.Versioning) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LightData_FieldIndex.Time) ?? true))
            {
                if (lhs.Time != rhs.Time) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LightData_FieldIndex.Radius) ?? true))
            {
                if (lhs.Radius != rhs.Radius) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LightData_FieldIndex.Color) ?? true))
            {
                if (!lhs.Color.ColorOnlyEquals(rhs.Color)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LightData_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LightData_FieldIndex.FalloffExponent) ?? true))
            {
                if (!lhs.FalloffExponent.EqualsWithin(rhs.FalloffExponent)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LightData_FieldIndex.FOV) ?? true))
            {
                if (!lhs.FOV.EqualsWithin(rhs.FOV)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LightData_FieldIndex.Value) ?? true))
            {
                if (lhs.Value != rhs.Value) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LightData_FieldIndex.Weight) ?? true))
            {
                if (!lhs.Weight.EqualsWithin(rhs.Weight)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ILightDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Versioning);
            hash.Add(item.Time);
            hash.Add(item.Radius);
            hash.Add(item.Color);
            hash.Add(item.Flags);
            hash.Add(item.FalloffExponent);
            hash.Add(item.FOV);
            hash.Add(item.Value);
            hash.Add(item.Weight);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return LightData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ILightDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class LightDataSetterTranslationCommon
    {
        public static readonly LightDataSetterTranslationCommon Instance = new LightDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ILightData item,
            ILightDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)LightData_FieldIndex.Versioning) ?? true))
            {
                item.Versioning = rhs.Versioning;
            }
            if ((copyMask?.GetShouldTranslate((int)LightData_FieldIndex.Time) ?? true))
            {
                item.Time = rhs.Time;
            }
            if ((copyMask?.GetShouldTranslate((int)LightData_FieldIndex.Radius) ?? true))
            {
                item.Radius = rhs.Radius;
            }
            if ((copyMask?.GetShouldTranslate((int)LightData_FieldIndex.Color) ?? true))
            {
                item.Color = rhs.Color;
            }
            if ((copyMask?.GetShouldTranslate((int)LightData_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)LightData_FieldIndex.FalloffExponent) ?? true))
            {
                item.FalloffExponent = rhs.FalloffExponent;
            }
            if ((copyMask?.GetShouldTranslate((int)LightData_FieldIndex.FOV) ?? true))
            {
                item.FOV = rhs.FOV;
            }
            if (rhs.Versioning.HasFlag(LightData.VersioningBreaks.Break0)) return;
            if ((copyMask?.GetShouldTranslate((int)LightData_FieldIndex.Value) ?? true))
            {
                item.Value = rhs.Value;
            }
            if ((copyMask?.GetShouldTranslate((int)LightData_FieldIndex.Weight) ?? true))
            {
                item.Weight = rhs.Weight;
            }
        }
        
        #endregion
        
        public LightData DeepCopy(
            ILightDataGetter item,
            LightData.TranslationMask? copyMask = null)
        {
            LightData ret = (LightData)((LightDataCommon)((ILightDataGetter)item).CommonInstance()!).GetNew();
            ((LightDataSetterTranslationCommon)((ILightDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public LightData DeepCopy(
            ILightDataGetter item,
            out LightData.ErrorMask errorMask,
            LightData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LightData ret = (LightData)((LightDataCommon)((ILightDataGetter)item).CommonInstance()!).GetNew();
            ((LightDataSetterTranslationCommon)((ILightDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = LightData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public LightData DeepCopy(
            ILightDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            LightData ret = (LightData)((LightDataCommon)((ILightDataGetter)item).CommonInstance()!).GetNew();
            ((LightDataSetterTranslationCommon)((ILightDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class LightData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LightData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => LightData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LightDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return LightDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LightDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILightDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ILightDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ILightDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion
{
    public partial class LightDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly LightDataBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ILightDataGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Time);
            writer.Write(item.Radius);
            ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Color);
            EnumBinaryTranslation<Light.LightFlag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Flags,
                length: 4);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FalloffExponent);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FOV);
            if (!item.Versioning.HasFlag(LightData.VersioningBreaks.Break0))
            {
                writer.Write(item.Value);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Weight);
            }
        }

        public void Write(
            MutagenWriter writer,
            ILightDataGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.DATA),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ILightDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class LightDataBinaryCreateTranslation
    {
        public static readonly LightDataBinaryCreateTranslation Instance = new LightDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ILightData item,
            MutagenFrame frame)
        {
            item.Time = frame.ReadInt32();
            item.Radius = frame.ReadUInt32();
            item.Color = frame.ReadColor(ColorBinaryType.Alpha);
            item.Flags = EnumBinaryTranslation<Light.LightFlag, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
            item.FalloffExponent = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.FOV = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            if (frame.Complete)
            {
                item.Versioning |= LightData.VersioningBreaks.Break0;
                return;
            }
            item.Value = frame.ReadUInt32();
            item.Weight = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class LightDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ILightDataGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LightDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion
{
    internal partial class LightDataBinaryOverlay :
        PluginBinaryOverlay,
        ILightDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LightData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => LightData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LightDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LightDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILightDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ILightDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ILightDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LightDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LightDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public LightData.VersioningBreaks Versioning { get; private set; }
        public Int32 Time => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0x0, 0x4));
        public UInt32 Radius => BinaryPrimitives.ReadUInt32LittleEndian(_structData.Slice(0x4, 0x4));
        public Color Color => _structData.Slice(0x8, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Light.LightFlag Flags => (Light.LightFlag)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0xC, 0x4));
        public Single FalloffExponent => _structData.Slice(0x10, 0x4).Float();
        public Single FOV => _structData.Slice(0x14, 0x4).Float();
        public UInt32 Value => _structData.Length <= 0x18 ? default : BinaryPrimitives.ReadUInt32LittleEndian(_structData.Slice(0x18, 0x4));
        public Single Weight => _structData.Length <= 0x1C ? default : _structData.Slice(0x1C, 0x4).Float();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected LightDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ILightDataGetter LightDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x20,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new LightDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            if (ret._structData.Length <= 0x18)
            {
                ret.Versioning |= LightData.VersioningBreaks.Break0;
            }
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ILightDataGetter LightDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return LightDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            LightDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ILightDataGetter rhs) return false;
            return ((LightDataCommon)((ILightDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ILightDataGetter? obj)
        {
            return ((LightDataCommon)((ILightDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((LightDataCommon)((ILightDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

