/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class WaterData :
        IEquatable<IWaterDataGetter>,
        ILoquiObjectSetter<WaterData>,
        IWaterData
    {
        #region Ctor
        public WaterData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Versioning
        public WaterData.VersioningBreaks Versioning { get; set; } = default;
        #endregion
        #region WindVelocity
        public Single WindVelocity { get; set; } = default;
        #endregion
        #region WindDirection
        public Single WindDirection { get; set; } = default;
        #endregion
        #region WaveAmplitude
        public Single WaveAmplitude { get; set; } = default;
        #endregion
        #region WaveFrequency
        public Single WaveFrequency { get; set; } = default;
        #endregion
        #region SunPower
        public Single SunPower { get; set; } = default;
        #endregion
        #region ReflectivityAmount
        public Single ReflectivityAmount { get; set; } = default;
        #endregion
        #region FresnelAmount
        public Single FresnelAmount { get; set; } = default;
        #endregion
        #region ScrollXSpeed
        public Single ScrollXSpeed { get; set; } = default;
        #endregion
        #region ScrollYSpeed
        public Single ScrollYSpeed { get; set; } = default;
        #endregion
        #region FogDistanceNearPlane
        public Single FogDistanceNearPlane { get; set; } = default;
        #endregion
        #region FogDistanceFarPlane
        public Single FogDistanceFarPlane { get; set; } = default;
        #endregion
        #region ShallowColor
        public Color ShallowColor { get; set; } = default;
        #endregion
        #region DeepColor
        public Color DeepColor { get; set; } = default;
        #endregion
        #region ReflectionColor
        public Color ReflectionColor { get; set; } = default;
        #endregion
        #region TextureBlend
        public Byte TextureBlend { get; set; } = default;
        #endregion
        #region RainSimulatorForce
        public Single RainSimulatorForce { get; set; } = default;
        #endregion
        #region RainSimulatorVelocity
        public Single RainSimulatorVelocity { get; set; } = default;
        #endregion
        #region RainSimulatorFalloff
        public Single RainSimulatorFalloff { get; set; } = default;
        #endregion
        #region RainSimulatorDampner
        public Single RainSimulatorDampner { get; set; } = default;
        #endregion
        #region RainSimulatorStartingSize
        public Single RainSimulatorStartingSize { get; set; } = default;
        #endregion
        #region DisplacementSimulatorForce
        public Single DisplacementSimulatorForce { get; set; } = default;
        #endregion
        #region DisplacementSimulatorVelocity
        public Single DisplacementSimulatorVelocity { get; set; } = default;
        #endregion
        #region DisplacementSimulatorFalloff
        public Single DisplacementSimulatorFalloff { get; set; } = default;
        #endregion
        #region DisplacementSimulatorDampner
        public Single DisplacementSimulatorDampner { get; set; } = default;
        #endregion
        #region DisplacementSimulatorStartingSize
        public Single DisplacementSimulatorStartingSize { get; set; } = default;
        #endregion
        #region Damage
        public UInt16 Damage { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WaterDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IWaterDataGetter rhs) return false;
            return ((WaterDataCommon)((IWaterDataGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IWaterDataGetter? obj)
        {
            return ((WaterDataCommon)((IWaterDataGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((WaterDataCommon)((IWaterDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Versioning = initialValue;
                this.WindVelocity = initialValue;
                this.WindDirection = initialValue;
                this.WaveAmplitude = initialValue;
                this.WaveFrequency = initialValue;
                this.SunPower = initialValue;
                this.ReflectivityAmount = initialValue;
                this.FresnelAmount = initialValue;
                this.ScrollXSpeed = initialValue;
                this.ScrollYSpeed = initialValue;
                this.FogDistanceNearPlane = initialValue;
                this.FogDistanceFarPlane = initialValue;
                this.ShallowColor = initialValue;
                this.DeepColor = initialValue;
                this.ReflectionColor = initialValue;
                this.TextureBlend = initialValue;
                this.RainSimulatorForce = initialValue;
                this.RainSimulatorVelocity = initialValue;
                this.RainSimulatorFalloff = initialValue;
                this.RainSimulatorDampner = initialValue;
                this.RainSimulatorStartingSize = initialValue;
                this.DisplacementSimulatorForce = initialValue;
                this.DisplacementSimulatorVelocity = initialValue;
                this.DisplacementSimulatorFalloff = initialValue;
                this.DisplacementSimulatorDampner = initialValue;
                this.DisplacementSimulatorStartingSize = initialValue;
                this.Damage = initialValue;
            }

            public Mask(
                TItem Versioning,
                TItem WindVelocity,
                TItem WindDirection,
                TItem WaveAmplitude,
                TItem WaveFrequency,
                TItem SunPower,
                TItem ReflectivityAmount,
                TItem FresnelAmount,
                TItem ScrollXSpeed,
                TItem ScrollYSpeed,
                TItem FogDistanceNearPlane,
                TItem FogDistanceFarPlane,
                TItem ShallowColor,
                TItem DeepColor,
                TItem ReflectionColor,
                TItem TextureBlend,
                TItem RainSimulatorForce,
                TItem RainSimulatorVelocity,
                TItem RainSimulatorFalloff,
                TItem RainSimulatorDampner,
                TItem RainSimulatorStartingSize,
                TItem DisplacementSimulatorForce,
                TItem DisplacementSimulatorVelocity,
                TItem DisplacementSimulatorFalloff,
                TItem DisplacementSimulatorDampner,
                TItem DisplacementSimulatorStartingSize,
                TItem Damage)
            {
                this.Versioning = Versioning;
                this.WindVelocity = WindVelocity;
                this.WindDirection = WindDirection;
                this.WaveAmplitude = WaveAmplitude;
                this.WaveFrequency = WaveFrequency;
                this.SunPower = SunPower;
                this.ReflectivityAmount = ReflectivityAmount;
                this.FresnelAmount = FresnelAmount;
                this.ScrollXSpeed = ScrollXSpeed;
                this.ScrollYSpeed = ScrollYSpeed;
                this.FogDistanceNearPlane = FogDistanceNearPlane;
                this.FogDistanceFarPlane = FogDistanceFarPlane;
                this.ShallowColor = ShallowColor;
                this.DeepColor = DeepColor;
                this.ReflectionColor = ReflectionColor;
                this.TextureBlend = TextureBlend;
                this.RainSimulatorForce = RainSimulatorForce;
                this.RainSimulatorVelocity = RainSimulatorVelocity;
                this.RainSimulatorFalloff = RainSimulatorFalloff;
                this.RainSimulatorDampner = RainSimulatorDampner;
                this.RainSimulatorStartingSize = RainSimulatorStartingSize;
                this.DisplacementSimulatorForce = DisplacementSimulatorForce;
                this.DisplacementSimulatorVelocity = DisplacementSimulatorVelocity;
                this.DisplacementSimulatorFalloff = DisplacementSimulatorFalloff;
                this.DisplacementSimulatorDampner = DisplacementSimulatorDampner;
                this.DisplacementSimulatorStartingSize = DisplacementSimulatorStartingSize;
                this.Damage = Damage;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Versioning;
            public TItem WindVelocity;
            public TItem WindDirection;
            public TItem WaveAmplitude;
            public TItem WaveFrequency;
            public TItem SunPower;
            public TItem ReflectivityAmount;
            public TItem FresnelAmount;
            public TItem ScrollXSpeed;
            public TItem ScrollYSpeed;
            public TItem FogDistanceNearPlane;
            public TItem FogDistanceFarPlane;
            public TItem ShallowColor;
            public TItem DeepColor;
            public TItem ReflectionColor;
            public TItem TextureBlend;
            public TItem RainSimulatorForce;
            public TItem RainSimulatorVelocity;
            public TItem RainSimulatorFalloff;
            public TItem RainSimulatorDampner;
            public TItem RainSimulatorStartingSize;
            public TItem DisplacementSimulatorForce;
            public TItem DisplacementSimulatorVelocity;
            public TItem DisplacementSimulatorFalloff;
            public TItem DisplacementSimulatorDampner;
            public TItem DisplacementSimulatorStartingSize;
            public TItem Damage;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Versioning, rhs.Versioning)) return false;
                if (!object.Equals(this.WindVelocity, rhs.WindVelocity)) return false;
                if (!object.Equals(this.WindDirection, rhs.WindDirection)) return false;
                if (!object.Equals(this.WaveAmplitude, rhs.WaveAmplitude)) return false;
                if (!object.Equals(this.WaveFrequency, rhs.WaveFrequency)) return false;
                if (!object.Equals(this.SunPower, rhs.SunPower)) return false;
                if (!object.Equals(this.ReflectivityAmount, rhs.ReflectivityAmount)) return false;
                if (!object.Equals(this.FresnelAmount, rhs.FresnelAmount)) return false;
                if (!object.Equals(this.ScrollXSpeed, rhs.ScrollXSpeed)) return false;
                if (!object.Equals(this.ScrollYSpeed, rhs.ScrollYSpeed)) return false;
                if (!object.Equals(this.FogDistanceNearPlane, rhs.FogDistanceNearPlane)) return false;
                if (!object.Equals(this.FogDistanceFarPlane, rhs.FogDistanceFarPlane)) return false;
                if (!object.Equals(this.ShallowColor, rhs.ShallowColor)) return false;
                if (!object.Equals(this.DeepColor, rhs.DeepColor)) return false;
                if (!object.Equals(this.ReflectionColor, rhs.ReflectionColor)) return false;
                if (!object.Equals(this.TextureBlend, rhs.TextureBlend)) return false;
                if (!object.Equals(this.RainSimulatorForce, rhs.RainSimulatorForce)) return false;
                if (!object.Equals(this.RainSimulatorVelocity, rhs.RainSimulatorVelocity)) return false;
                if (!object.Equals(this.RainSimulatorFalloff, rhs.RainSimulatorFalloff)) return false;
                if (!object.Equals(this.RainSimulatorDampner, rhs.RainSimulatorDampner)) return false;
                if (!object.Equals(this.RainSimulatorStartingSize, rhs.RainSimulatorStartingSize)) return false;
                if (!object.Equals(this.DisplacementSimulatorForce, rhs.DisplacementSimulatorForce)) return false;
                if (!object.Equals(this.DisplacementSimulatorVelocity, rhs.DisplacementSimulatorVelocity)) return false;
                if (!object.Equals(this.DisplacementSimulatorFalloff, rhs.DisplacementSimulatorFalloff)) return false;
                if (!object.Equals(this.DisplacementSimulatorDampner, rhs.DisplacementSimulatorDampner)) return false;
                if (!object.Equals(this.DisplacementSimulatorStartingSize, rhs.DisplacementSimulatorStartingSize)) return false;
                if (!object.Equals(this.Damage, rhs.Damage)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Versioning);
                hash.Add(this.WindVelocity);
                hash.Add(this.WindDirection);
                hash.Add(this.WaveAmplitude);
                hash.Add(this.WaveFrequency);
                hash.Add(this.SunPower);
                hash.Add(this.ReflectivityAmount);
                hash.Add(this.FresnelAmount);
                hash.Add(this.ScrollXSpeed);
                hash.Add(this.ScrollYSpeed);
                hash.Add(this.FogDistanceNearPlane);
                hash.Add(this.FogDistanceFarPlane);
                hash.Add(this.ShallowColor);
                hash.Add(this.DeepColor);
                hash.Add(this.ReflectionColor);
                hash.Add(this.TextureBlend);
                hash.Add(this.RainSimulatorForce);
                hash.Add(this.RainSimulatorVelocity);
                hash.Add(this.RainSimulatorFalloff);
                hash.Add(this.RainSimulatorDampner);
                hash.Add(this.RainSimulatorStartingSize);
                hash.Add(this.DisplacementSimulatorForce);
                hash.Add(this.DisplacementSimulatorVelocity);
                hash.Add(this.DisplacementSimulatorFalloff);
                hash.Add(this.DisplacementSimulatorDampner);
                hash.Add(this.DisplacementSimulatorStartingSize);
                hash.Add(this.Damage);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Versioning)) return false;
                if (!eval(this.WindVelocity)) return false;
                if (!eval(this.WindDirection)) return false;
                if (!eval(this.WaveAmplitude)) return false;
                if (!eval(this.WaveFrequency)) return false;
                if (!eval(this.SunPower)) return false;
                if (!eval(this.ReflectivityAmount)) return false;
                if (!eval(this.FresnelAmount)) return false;
                if (!eval(this.ScrollXSpeed)) return false;
                if (!eval(this.ScrollYSpeed)) return false;
                if (!eval(this.FogDistanceNearPlane)) return false;
                if (!eval(this.FogDistanceFarPlane)) return false;
                if (!eval(this.ShallowColor)) return false;
                if (!eval(this.DeepColor)) return false;
                if (!eval(this.ReflectionColor)) return false;
                if (!eval(this.TextureBlend)) return false;
                if (!eval(this.RainSimulatorForce)) return false;
                if (!eval(this.RainSimulatorVelocity)) return false;
                if (!eval(this.RainSimulatorFalloff)) return false;
                if (!eval(this.RainSimulatorDampner)) return false;
                if (!eval(this.RainSimulatorStartingSize)) return false;
                if (!eval(this.DisplacementSimulatorForce)) return false;
                if (!eval(this.DisplacementSimulatorVelocity)) return false;
                if (!eval(this.DisplacementSimulatorFalloff)) return false;
                if (!eval(this.DisplacementSimulatorDampner)) return false;
                if (!eval(this.DisplacementSimulatorStartingSize)) return false;
                if (!eval(this.Damage)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Versioning)) return true;
                if (eval(this.WindVelocity)) return true;
                if (eval(this.WindDirection)) return true;
                if (eval(this.WaveAmplitude)) return true;
                if (eval(this.WaveFrequency)) return true;
                if (eval(this.SunPower)) return true;
                if (eval(this.ReflectivityAmount)) return true;
                if (eval(this.FresnelAmount)) return true;
                if (eval(this.ScrollXSpeed)) return true;
                if (eval(this.ScrollYSpeed)) return true;
                if (eval(this.FogDistanceNearPlane)) return true;
                if (eval(this.FogDistanceFarPlane)) return true;
                if (eval(this.ShallowColor)) return true;
                if (eval(this.DeepColor)) return true;
                if (eval(this.ReflectionColor)) return true;
                if (eval(this.TextureBlend)) return true;
                if (eval(this.RainSimulatorForce)) return true;
                if (eval(this.RainSimulatorVelocity)) return true;
                if (eval(this.RainSimulatorFalloff)) return true;
                if (eval(this.RainSimulatorDampner)) return true;
                if (eval(this.RainSimulatorStartingSize)) return true;
                if (eval(this.DisplacementSimulatorForce)) return true;
                if (eval(this.DisplacementSimulatorVelocity)) return true;
                if (eval(this.DisplacementSimulatorFalloff)) return true;
                if (eval(this.DisplacementSimulatorDampner)) return true;
                if (eval(this.DisplacementSimulatorStartingSize)) return true;
                if (eval(this.Damage)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new WaterData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Versioning = eval(this.Versioning);
                obj.WindVelocity = eval(this.WindVelocity);
                obj.WindDirection = eval(this.WindDirection);
                obj.WaveAmplitude = eval(this.WaveAmplitude);
                obj.WaveFrequency = eval(this.WaveFrequency);
                obj.SunPower = eval(this.SunPower);
                obj.ReflectivityAmount = eval(this.ReflectivityAmount);
                obj.FresnelAmount = eval(this.FresnelAmount);
                obj.ScrollXSpeed = eval(this.ScrollXSpeed);
                obj.ScrollYSpeed = eval(this.ScrollYSpeed);
                obj.FogDistanceNearPlane = eval(this.FogDistanceNearPlane);
                obj.FogDistanceFarPlane = eval(this.FogDistanceFarPlane);
                obj.ShallowColor = eval(this.ShallowColor);
                obj.DeepColor = eval(this.DeepColor);
                obj.ReflectionColor = eval(this.ReflectionColor);
                obj.TextureBlend = eval(this.TextureBlend);
                obj.RainSimulatorForce = eval(this.RainSimulatorForce);
                obj.RainSimulatorVelocity = eval(this.RainSimulatorVelocity);
                obj.RainSimulatorFalloff = eval(this.RainSimulatorFalloff);
                obj.RainSimulatorDampner = eval(this.RainSimulatorDampner);
                obj.RainSimulatorStartingSize = eval(this.RainSimulatorStartingSize);
                obj.DisplacementSimulatorForce = eval(this.DisplacementSimulatorForce);
                obj.DisplacementSimulatorVelocity = eval(this.DisplacementSimulatorVelocity);
                obj.DisplacementSimulatorFalloff = eval(this.DisplacementSimulatorFalloff);
                obj.DisplacementSimulatorDampner = eval(this.DisplacementSimulatorDampner);
                obj.DisplacementSimulatorStartingSize = eval(this.DisplacementSimulatorStartingSize);
                obj.Damage = eval(this.Damage);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(WaterData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, WaterData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(WaterData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Versioning ?? true)
                    {
                        fg.AppendItem(Versioning, "Versioning");
                    }
                    if (printMask?.WindVelocity ?? true)
                    {
                        fg.AppendItem(WindVelocity, "WindVelocity");
                    }
                    if (printMask?.WindDirection ?? true)
                    {
                        fg.AppendItem(WindDirection, "WindDirection");
                    }
                    if (printMask?.WaveAmplitude ?? true)
                    {
                        fg.AppendItem(WaveAmplitude, "WaveAmplitude");
                    }
                    if (printMask?.WaveFrequency ?? true)
                    {
                        fg.AppendItem(WaveFrequency, "WaveFrequency");
                    }
                    if (printMask?.SunPower ?? true)
                    {
                        fg.AppendItem(SunPower, "SunPower");
                    }
                    if (printMask?.ReflectivityAmount ?? true)
                    {
                        fg.AppendItem(ReflectivityAmount, "ReflectivityAmount");
                    }
                    if (printMask?.FresnelAmount ?? true)
                    {
                        fg.AppendItem(FresnelAmount, "FresnelAmount");
                    }
                    if (printMask?.ScrollXSpeed ?? true)
                    {
                        fg.AppendItem(ScrollXSpeed, "ScrollXSpeed");
                    }
                    if (printMask?.ScrollYSpeed ?? true)
                    {
                        fg.AppendItem(ScrollYSpeed, "ScrollYSpeed");
                    }
                    if (printMask?.FogDistanceNearPlane ?? true)
                    {
                        fg.AppendItem(FogDistanceNearPlane, "FogDistanceNearPlane");
                    }
                    if (printMask?.FogDistanceFarPlane ?? true)
                    {
                        fg.AppendItem(FogDistanceFarPlane, "FogDistanceFarPlane");
                    }
                    if (printMask?.ShallowColor ?? true)
                    {
                        fg.AppendItem(ShallowColor, "ShallowColor");
                    }
                    if (printMask?.DeepColor ?? true)
                    {
                        fg.AppendItem(DeepColor, "DeepColor");
                    }
                    if (printMask?.ReflectionColor ?? true)
                    {
                        fg.AppendItem(ReflectionColor, "ReflectionColor");
                    }
                    if (printMask?.TextureBlend ?? true)
                    {
                        fg.AppendItem(TextureBlend, "TextureBlend");
                    }
                    if (printMask?.RainSimulatorForce ?? true)
                    {
                        fg.AppendItem(RainSimulatorForce, "RainSimulatorForce");
                    }
                    if (printMask?.RainSimulatorVelocity ?? true)
                    {
                        fg.AppendItem(RainSimulatorVelocity, "RainSimulatorVelocity");
                    }
                    if (printMask?.RainSimulatorFalloff ?? true)
                    {
                        fg.AppendItem(RainSimulatorFalloff, "RainSimulatorFalloff");
                    }
                    if (printMask?.RainSimulatorDampner ?? true)
                    {
                        fg.AppendItem(RainSimulatorDampner, "RainSimulatorDampner");
                    }
                    if (printMask?.RainSimulatorStartingSize ?? true)
                    {
                        fg.AppendItem(RainSimulatorStartingSize, "RainSimulatorStartingSize");
                    }
                    if (printMask?.DisplacementSimulatorForce ?? true)
                    {
                        fg.AppendItem(DisplacementSimulatorForce, "DisplacementSimulatorForce");
                    }
                    if (printMask?.DisplacementSimulatorVelocity ?? true)
                    {
                        fg.AppendItem(DisplacementSimulatorVelocity, "DisplacementSimulatorVelocity");
                    }
                    if (printMask?.DisplacementSimulatorFalloff ?? true)
                    {
                        fg.AppendItem(DisplacementSimulatorFalloff, "DisplacementSimulatorFalloff");
                    }
                    if (printMask?.DisplacementSimulatorDampner ?? true)
                    {
                        fg.AppendItem(DisplacementSimulatorDampner, "DisplacementSimulatorDampner");
                    }
                    if (printMask?.DisplacementSimulatorStartingSize ?? true)
                    {
                        fg.AppendItem(DisplacementSimulatorStartingSize, "DisplacementSimulatorStartingSize");
                    }
                    if (printMask?.Damage ?? true)
                    {
                        fg.AppendItem(Damage, "Damage");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Versioning;
            public Exception? WindVelocity;
            public Exception? WindDirection;
            public Exception? WaveAmplitude;
            public Exception? WaveFrequency;
            public Exception? SunPower;
            public Exception? ReflectivityAmount;
            public Exception? FresnelAmount;
            public Exception? ScrollXSpeed;
            public Exception? ScrollYSpeed;
            public Exception? FogDistanceNearPlane;
            public Exception? FogDistanceFarPlane;
            public Exception? ShallowColor;
            public Exception? DeepColor;
            public Exception? ReflectionColor;
            public Exception? TextureBlend;
            public Exception? RainSimulatorForce;
            public Exception? RainSimulatorVelocity;
            public Exception? RainSimulatorFalloff;
            public Exception? RainSimulatorDampner;
            public Exception? RainSimulatorStartingSize;
            public Exception? DisplacementSimulatorForce;
            public Exception? DisplacementSimulatorVelocity;
            public Exception? DisplacementSimulatorFalloff;
            public Exception? DisplacementSimulatorDampner;
            public Exception? DisplacementSimulatorStartingSize;
            public Exception? Damage;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                WaterData_FieldIndex enu = (WaterData_FieldIndex)index;
                switch (enu)
                {
                    case WaterData_FieldIndex.Versioning:
                        return Versioning;
                    case WaterData_FieldIndex.WindVelocity:
                        return WindVelocity;
                    case WaterData_FieldIndex.WindDirection:
                        return WindDirection;
                    case WaterData_FieldIndex.WaveAmplitude:
                        return WaveAmplitude;
                    case WaterData_FieldIndex.WaveFrequency:
                        return WaveFrequency;
                    case WaterData_FieldIndex.SunPower:
                        return SunPower;
                    case WaterData_FieldIndex.ReflectivityAmount:
                        return ReflectivityAmount;
                    case WaterData_FieldIndex.FresnelAmount:
                        return FresnelAmount;
                    case WaterData_FieldIndex.ScrollXSpeed:
                        return ScrollXSpeed;
                    case WaterData_FieldIndex.ScrollYSpeed:
                        return ScrollYSpeed;
                    case WaterData_FieldIndex.FogDistanceNearPlane:
                        return FogDistanceNearPlane;
                    case WaterData_FieldIndex.FogDistanceFarPlane:
                        return FogDistanceFarPlane;
                    case WaterData_FieldIndex.ShallowColor:
                        return ShallowColor;
                    case WaterData_FieldIndex.DeepColor:
                        return DeepColor;
                    case WaterData_FieldIndex.ReflectionColor:
                        return ReflectionColor;
                    case WaterData_FieldIndex.TextureBlend:
                        return TextureBlend;
                    case WaterData_FieldIndex.RainSimulatorForce:
                        return RainSimulatorForce;
                    case WaterData_FieldIndex.RainSimulatorVelocity:
                        return RainSimulatorVelocity;
                    case WaterData_FieldIndex.RainSimulatorFalloff:
                        return RainSimulatorFalloff;
                    case WaterData_FieldIndex.RainSimulatorDampner:
                        return RainSimulatorDampner;
                    case WaterData_FieldIndex.RainSimulatorStartingSize:
                        return RainSimulatorStartingSize;
                    case WaterData_FieldIndex.DisplacementSimulatorForce:
                        return DisplacementSimulatorForce;
                    case WaterData_FieldIndex.DisplacementSimulatorVelocity:
                        return DisplacementSimulatorVelocity;
                    case WaterData_FieldIndex.DisplacementSimulatorFalloff:
                        return DisplacementSimulatorFalloff;
                    case WaterData_FieldIndex.DisplacementSimulatorDampner:
                        return DisplacementSimulatorDampner;
                    case WaterData_FieldIndex.DisplacementSimulatorStartingSize:
                        return DisplacementSimulatorStartingSize;
                    case WaterData_FieldIndex.Damage:
                        return Damage;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                WaterData_FieldIndex enu = (WaterData_FieldIndex)index;
                switch (enu)
                {
                    case WaterData_FieldIndex.Versioning:
                        this.Versioning = ex;
                        break;
                    case WaterData_FieldIndex.WindVelocity:
                        this.WindVelocity = ex;
                        break;
                    case WaterData_FieldIndex.WindDirection:
                        this.WindDirection = ex;
                        break;
                    case WaterData_FieldIndex.WaveAmplitude:
                        this.WaveAmplitude = ex;
                        break;
                    case WaterData_FieldIndex.WaveFrequency:
                        this.WaveFrequency = ex;
                        break;
                    case WaterData_FieldIndex.SunPower:
                        this.SunPower = ex;
                        break;
                    case WaterData_FieldIndex.ReflectivityAmount:
                        this.ReflectivityAmount = ex;
                        break;
                    case WaterData_FieldIndex.FresnelAmount:
                        this.FresnelAmount = ex;
                        break;
                    case WaterData_FieldIndex.ScrollXSpeed:
                        this.ScrollXSpeed = ex;
                        break;
                    case WaterData_FieldIndex.ScrollYSpeed:
                        this.ScrollYSpeed = ex;
                        break;
                    case WaterData_FieldIndex.FogDistanceNearPlane:
                        this.FogDistanceNearPlane = ex;
                        break;
                    case WaterData_FieldIndex.FogDistanceFarPlane:
                        this.FogDistanceFarPlane = ex;
                        break;
                    case WaterData_FieldIndex.ShallowColor:
                        this.ShallowColor = ex;
                        break;
                    case WaterData_FieldIndex.DeepColor:
                        this.DeepColor = ex;
                        break;
                    case WaterData_FieldIndex.ReflectionColor:
                        this.ReflectionColor = ex;
                        break;
                    case WaterData_FieldIndex.TextureBlend:
                        this.TextureBlend = ex;
                        break;
                    case WaterData_FieldIndex.RainSimulatorForce:
                        this.RainSimulatorForce = ex;
                        break;
                    case WaterData_FieldIndex.RainSimulatorVelocity:
                        this.RainSimulatorVelocity = ex;
                        break;
                    case WaterData_FieldIndex.RainSimulatorFalloff:
                        this.RainSimulatorFalloff = ex;
                        break;
                    case WaterData_FieldIndex.RainSimulatorDampner:
                        this.RainSimulatorDampner = ex;
                        break;
                    case WaterData_FieldIndex.RainSimulatorStartingSize:
                        this.RainSimulatorStartingSize = ex;
                        break;
                    case WaterData_FieldIndex.DisplacementSimulatorForce:
                        this.DisplacementSimulatorForce = ex;
                        break;
                    case WaterData_FieldIndex.DisplacementSimulatorVelocity:
                        this.DisplacementSimulatorVelocity = ex;
                        break;
                    case WaterData_FieldIndex.DisplacementSimulatorFalloff:
                        this.DisplacementSimulatorFalloff = ex;
                        break;
                    case WaterData_FieldIndex.DisplacementSimulatorDampner:
                        this.DisplacementSimulatorDampner = ex;
                        break;
                    case WaterData_FieldIndex.DisplacementSimulatorStartingSize:
                        this.DisplacementSimulatorStartingSize = ex;
                        break;
                    case WaterData_FieldIndex.Damage:
                        this.Damage = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                WaterData_FieldIndex enu = (WaterData_FieldIndex)index;
                switch (enu)
                {
                    case WaterData_FieldIndex.Versioning:
                        this.Versioning = (Exception?)obj;
                        break;
                    case WaterData_FieldIndex.WindVelocity:
                        this.WindVelocity = (Exception?)obj;
                        break;
                    case WaterData_FieldIndex.WindDirection:
                        this.WindDirection = (Exception?)obj;
                        break;
                    case WaterData_FieldIndex.WaveAmplitude:
                        this.WaveAmplitude = (Exception?)obj;
                        break;
                    case WaterData_FieldIndex.WaveFrequency:
                        this.WaveFrequency = (Exception?)obj;
                        break;
                    case WaterData_FieldIndex.SunPower:
                        this.SunPower = (Exception?)obj;
                        break;
                    case WaterData_FieldIndex.ReflectivityAmount:
                        this.ReflectivityAmount = (Exception?)obj;
                        break;
                    case WaterData_FieldIndex.FresnelAmount:
                        this.FresnelAmount = (Exception?)obj;
                        break;
                    case WaterData_FieldIndex.ScrollXSpeed:
                        this.ScrollXSpeed = (Exception?)obj;
                        break;
                    case WaterData_FieldIndex.ScrollYSpeed:
                        this.ScrollYSpeed = (Exception?)obj;
                        break;
                    case WaterData_FieldIndex.FogDistanceNearPlane:
                        this.FogDistanceNearPlane = (Exception?)obj;
                        break;
                    case WaterData_FieldIndex.FogDistanceFarPlane:
                        this.FogDistanceFarPlane = (Exception?)obj;
                        break;
                    case WaterData_FieldIndex.ShallowColor:
                        this.ShallowColor = (Exception?)obj;
                        break;
                    case WaterData_FieldIndex.DeepColor:
                        this.DeepColor = (Exception?)obj;
                        break;
                    case WaterData_FieldIndex.ReflectionColor:
                        this.ReflectionColor = (Exception?)obj;
                        break;
                    case WaterData_FieldIndex.TextureBlend:
                        this.TextureBlend = (Exception?)obj;
                        break;
                    case WaterData_FieldIndex.RainSimulatorForce:
                        this.RainSimulatorForce = (Exception?)obj;
                        break;
                    case WaterData_FieldIndex.RainSimulatorVelocity:
                        this.RainSimulatorVelocity = (Exception?)obj;
                        break;
                    case WaterData_FieldIndex.RainSimulatorFalloff:
                        this.RainSimulatorFalloff = (Exception?)obj;
                        break;
                    case WaterData_FieldIndex.RainSimulatorDampner:
                        this.RainSimulatorDampner = (Exception?)obj;
                        break;
                    case WaterData_FieldIndex.RainSimulatorStartingSize:
                        this.RainSimulatorStartingSize = (Exception?)obj;
                        break;
                    case WaterData_FieldIndex.DisplacementSimulatorForce:
                        this.DisplacementSimulatorForce = (Exception?)obj;
                        break;
                    case WaterData_FieldIndex.DisplacementSimulatorVelocity:
                        this.DisplacementSimulatorVelocity = (Exception?)obj;
                        break;
                    case WaterData_FieldIndex.DisplacementSimulatorFalloff:
                        this.DisplacementSimulatorFalloff = (Exception?)obj;
                        break;
                    case WaterData_FieldIndex.DisplacementSimulatorDampner:
                        this.DisplacementSimulatorDampner = (Exception?)obj;
                        break;
                    case WaterData_FieldIndex.DisplacementSimulatorStartingSize:
                        this.DisplacementSimulatorStartingSize = (Exception?)obj;
                        break;
                    case WaterData_FieldIndex.Damage:
                        this.Damage = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Versioning != null) return true;
                if (WindVelocity != null) return true;
                if (WindDirection != null) return true;
                if (WaveAmplitude != null) return true;
                if (WaveFrequency != null) return true;
                if (SunPower != null) return true;
                if (ReflectivityAmount != null) return true;
                if (FresnelAmount != null) return true;
                if (ScrollXSpeed != null) return true;
                if (ScrollYSpeed != null) return true;
                if (FogDistanceNearPlane != null) return true;
                if (FogDistanceFarPlane != null) return true;
                if (ShallowColor != null) return true;
                if (DeepColor != null) return true;
                if (ReflectionColor != null) return true;
                if (TextureBlend != null) return true;
                if (RainSimulatorForce != null) return true;
                if (RainSimulatorVelocity != null) return true;
                if (RainSimulatorFalloff != null) return true;
                if (RainSimulatorDampner != null) return true;
                if (RainSimulatorStartingSize != null) return true;
                if (DisplacementSimulatorForce != null) return true;
                if (DisplacementSimulatorVelocity != null) return true;
                if (DisplacementSimulatorFalloff != null) return true;
                if (DisplacementSimulatorDampner != null) return true;
                if (DisplacementSimulatorStartingSize != null) return true;
                if (Damage != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Versioning, "Versioning");
                fg.AppendItem(WindVelocity, "WindVelocity");
                fg.AppendItem(WindDirection, "WindDirection");
                fg.AppendItem(WaveAmplitude, "WaveAmplitude");
                fg.AppendItem(WaveFrequency, "WaveFrequency");
                fg.AppendItem(SunPower, "SunPower");
                fg.AppendItem(ReflectivityAmount, "ReflectivityAmount");
                fg.AppendItem(FresnelAmount, "FresnelAmount");
                fg.AppendItem(ScrollXSpeed, "ScrollXSpeed");
                fg.AppendItem(ScrollYSpeed, "ScrollYSpeed");
                fg.AppendItem(FogDistanceNearPlane, "FogDistanceNearPlane");
                fg.AppendItem(FogDistanceFarPlane, "FogDistanceFarPlane");
                fg.AppendItem(ShallowColor, "ShallowColor");
                fg.AppendItem(DeepColor, "DeepColor");
                fg.AppendItem(ReflectionColor, "ReflectionColor");
                fg.AppendItem(TextureBlend, "TextureBlend");
                fg.AppendItem(RainSimulatorForce, "RainSimulatorForce");
                fg.AppendItem(RainSimulatorVelocity, "RainSimulatorVelocity");
                fg.AppendItem(RainSimulatorFalloff, "RainSimulatorFalloff");
                fg.AppendItem(RainSimulatorDampner, "RainSimulatorDampner");
                fg.AppendItem(RainSimulatorStartingSize, "RainSimulatorStartingSize");
                fg.AppendItem(DisplacementSimulatorForce, "DisplacementSimulatorForce");
                fg.AppendItem(DisplacementSimulatorVelocity, "DisplacementSimulatorVelocity");
                fg.AppendItem(DisplacementSimulatorFalloff, "DisplacementSimulatorFalloff");
                fg.AppendItem(DisplacementSimulatorDampner, "DisplacementSimulatorDampner");
                fg.AppendItem(DisplacementSimulatorStartingSize, "DisplacementSimulatorStartingSize");
                fg.AppendItem(Damage, "Damage");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Versioning = this.Versioning.Combine(rhs.Versioning);
                ret.WindVelocity = this.WindVelocity.Combine(rhs.WindVelocity);
                ret.WindDirection = this.WindDirection.Combine(rhs.WindDirection);
                ret.WaveAmplitude = this.WaveAmplitude.Combine(rhs.WaveAmplitude);
                ret.WaveFrequency = this.WaveFrequency.Combine(rhs.WaveFrequency);
                ret.SunPower = this.SunPower.Combine(rhs.SunPower);
                ret.ReflectivityAmount = this.ReflectivityAmount.Combine(rhs.ReflectivityAmount);
                ret.FresnelAmount = this.FresnelAmount.Combine(rhs.FresnelAmount);
                ret.ScrollXSpeed = this.ScrollXSpeed.Combine(rhs.ScrollXSpeed);
                ret.ScrollYSpeed = this.ScrollYSpeed.Combine(rhs.ScrollYSpeed);
                ret.FogDistanceNearPlane = this.FogDistanceNearPlane.Combine(rhs.FogDistanceNearPlane);
                ret.FogDistanceFarPlane = this.FogDistanceFarPlane.Combine(rhs.FogDistanceFarPlane);
                ret.ShallowColor = this.ShallowColor.Combine(rhs.ShallowColor);
                ret.DeepColor = this.DeepColor.Combine(rhs.DeepColor);
                ret.ReflectionColor = this.ReflectionColor.Combine(rhs.ReflectionColor);
                ret.TextureBlend = this.TextureBlend.Combine(rhs.TextureBlend);
                ret.RainSimulatorForce = this.RainSimulatorForce.Combine(rhs.RainSimulatorForce);
                ret.RainSimulatorVelocity = this.RainSimulatorVelocity.Combine(rhs.RainSimulatorVelocity);
                ret.RainSimulatorFalloff = this.RainSimulatorFalloff.Combine(rhs.RainSimulatorFalloff);
                ret.RainSimulatorDampner = this.RainSimulatorDampner.Combine(rhs.RainSimulatorDampner);
                ret.RainSimulatorStartingSize = this.RainSimulatorStartingSize.Combine(rhs.RainSimulatorStartingSize);
                ret.DisplacementSimulatorForce = this.DisplacementSimulatorForce.Combine(rhs.DisplacementSimulatorForce);
                ret.DisplacementSimulatorVelocity = this.DisplacementSimulatorVelocity.Combine(rhs.DisplacementSimulatorVelocity);
                ret.DisplacementSimulatorFalloff = this.DisplacementSimulatorFalloff.Combine(rhs.DisplacementSimulatorFalloff);
                ret.DisplacementSimulatorDampner = this.DisplacementSimulatorDampner.Combine(rhs.DisplacementSimulatorDampner);
                ret.DisplacementSimulatorStartingSize = this.DisplacementSimulatorStartingSize.Combine(rhs.DisplacementSimulatorStartingSize);
                ret.Damage = this.Damage.Combine(rhs.Damage);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Versioning;
            public bool WindVelocity;
            public bool WindDirection;
            public bool WaveAmplitude;
            public bool WaveFrequency;
            public bool SunPower;
            public bool ReflectivityAmount;
            public bool FresnelAmount;
            public bool ScrollXSpeed;
            public bool ScrollYSpeed;
            public bool FogDistanceNearPlane;
            public bool FogDistanceFarPlane;
            public bool ShallowColor;
            public bool DeepColor;
            public bool ReflectionColor;
            public bool TextureBlend;
            public bool RainSimulatorForce;
            public bool RainSimulatorVelocity;
            public bool RainSimulatorFalloff;
            public bool RainSimulatorDampner;
            public bool RainSimulatorStartingSize;
            public bool DisplacementSimulatorForce;
            public bool DisplacementSimulatorVelocity;
            public bool DisplacementSimulatorFalloff;
            public bool DisplacementSimulatorDampner;
            public bool DisplacementSimulatorStartingSize;
            public bool Damage;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Versioning = defaultOn;
                this.WindVelocity = defaultOn;
                this.WindDirection = defaultOn;
                this.WaveAmplitude = defaultOn;
                this.WaveFrequency = defaultOn;
                this.SunPower = defaultOn;
                this.ReflectivityAmount = defaultOn;
                this.FresnelAmount = defaultOn;
                this.ScrollXSpeed = defaultOn;
                this.ScrollYSpeed = defaultOn;
                this.FogDistanceNearPlane = defaultOn;
                this.FogDistanceFarPlane = defaultOn;
                this.ShallowColor = defaultOn;
                this.DeepColor = defaultOn;
                this.ReflectionColor = defaultOn;
                this.TextureBlend = defaultOn;
                this.RainSimulatorForce = defaultOn;
                this.RainSimulatorVelocity = defaultOn;
                this.RainSimulatorFalloff = defaultOn;
                this.RainSimulatorDampner = defaultOn;
                this.RainSimulatorStartingSize = defaultOn;
                this.DisplacementSimulatorForce = defaultOn;
                this.DisplacementSimulatorVelocity = defaultOn;
                this.DisplacementSimulatorFalloff = defaultOn;
                this.DisplacementSimulatorDampner = defaultOn;
                this.DisplacementSimulatorStartingSize = defaultOn;
                this.Damage = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Versioning, null));
                ret.Add((WindVelocity, null));
                ret.Add((WindDirection, null));
                ret.Add((WaveAmplitude, null));
                ret.Add((WaveFrequency, null));
                ret.Add((SunPower, null));
                ret.Add((ReflectivityAmount, null));
                ret.Add((FresnelAmount, null));
                ret.Add((ScrollXSpeed, null));
                ret.Add((ScrollYSpeed, null));
                ret.Add((FogDistanceNearPlane, null));
                ret.Add((FogDistanceFarPlane, null));
                ret.Add((ShallowColor, null));
                ret.Add((DeepColor, null));
                ret.Add((ReflectionColor, null));
                ret.Add((TextureBlend, null));
                ret.Add((RainSimulatorForce, null));
                ret.Add((RainSimulatorVelocity, null));
                ret.Add((RainSimulatorFalloff, null));
                ret.Add((RainSimulatorDampner, null));
                ret.Add((RainSimulatorStartingSize, null));
                ret.Add((DisplacementSimulatorForce, null));
                ret.Add((DisplacementSimulatorVelocity, null));
                ret.Add((DisplacementSimulatorFalloff, null));
                ret.Add((DisplacementSimulatorDampner, null));
                ret.Add((DisplacementSimulatorStartingSize, null));
                ret.Add((Damage, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = WaterData_Registration.TriggeringRecordType;
        [Flags]
        public enum VersioningBreaks
        {
            Break0 = 1,
            Break1 = 2,
            Break2 = 4,
            Break3 = 8
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => WaterDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((WaterDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static WaterData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new WaterData();
            ((WaterDataSetterCommon)((IWaterDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out WaterData item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((WaterDataSetterCommon)((IWaterDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static WaterData GetNew()
        {
            return new WaterData();
        }

    }
    #endregion

    #region Interface
    public partial interface IWaterData :
        ILoquiObjectSetter<IWaterData>,
        IWaterDataGetter
    {
        new WaterData.VersioningBreaks Versioning { get; set; }
        new Single WindVelocity { get; set; }
        new Single WindDirection { get; set; }
        new Single WaveAmplitude { get; set; }
        new Single WaveFrequency { get; set; }
        new Single SunPower { get; set; }
        new Single ReflectivityAmount { get; set; }
        new Single FresnelAmount { get; set; }
        new Single ScrollXSpeed { get; set; }
        new Single ScrollYSpeed { get; set; }
        new Single FogDistanceNearPlane { get; set; }
        new Single FogDistanceFarPlane { get; set; }
        new Color ShallowColor { get; set; }
        new Color DeepColor { get; set; }
        new Color ReflectionColor { get; set; }
        new Byte TextureBlend { get; set; }
        new Single RainSimulatorForce { get; set; }
        new Single RainSimulatorVelocity { get; set; }
        new Single RainSimulatorFalloff { get; set; }
        new Single RainSimulatorDampner { get; set; }
        new Single RainSimulatorStartingSize { get; set; }
        new Single DisplacementSimulatorForce { get; set; }
        new Single DisplacementSimulatorVelocity { get; set; }
        new Single DisplacementSimulatorFalloff { get; set; }
        new Single DisplacementSimulatorDampner { get; set; }
        new Single DisplacementSimulatorStartingSize { get; set; }
        new UInt16 Damage { get; set; }
    }

    public partial interface IWaterDataGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IWaterDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => WaterData_Registration.Instance;
        WaterData.VersioningBreaks Versioning { get; }
        Single WindVelocity { get; }
        Single WindDirection { get; }
        Single WaveAmplitude { get; }
        Single WaveFrequency { get; }
        Single SunPower { get; }
        Single ReflectivityAmount { get; }
        Single FresnelAmount { get; }
        Single ScrollXSpeed { get; }
        Single ScrollYSpeed { get; }
        Single FogDistanceNearPlane { get; }
        Single FogDistanceFarPlane { get; }
        Color ShallowColor { get; }
        Color DeepColor { get; }
        Color ReflectionColor { get; }
        Byte TextureBlend { get; }
        Single RainSimulatorForce { get; }
        Single RainSimulatorVelocity { get; }
        Single RainSimulatorFalloff { get; }
        Single RainSimulatorDampner { get; }
        Single RainSimulatorStartingSize { get; }
        Single DisplacementSimulatorForce { get; }
        Single DisplacementSimulatorVelocity { get; }
        Single DisplacementSimulatorFalloff { get; }
        Single DisplacementSimulatorDampner { get; }
        Single DisplacementSimulatorStartingSize { get; }
        UInt16 Damage { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class WaterDataMixIn
    {
        public static void Clear(this IWaterData item)
        {
            ((WaterDataSetterCommon)((IWaterDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static WaterData.Mask<bool> GetEqualsMask(
            this IWaterDataGetter item,
            IWaterDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WaterDataCommon)((IWaterDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IWaterDataGetter item,
            string? name = null,
            WaterData.Mask<bool>? printMask = null)
        {
            return ((WaterDataCommon)((IWaterDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IWaterDataGetter item,
            FileGeneration fg,
            string? name = null,
            WaterData.Mask<bool>? printMask = null)
        {
            ((WaterDataCommon)((IWaterDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IWaterDataGetter item,
            IWaterDataGetter rhs,
            WaterData.TranslationMask? equalsMask = null)
        {
            return ((WaterDataCommon)((IWaterDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IWaterData lhs,
            IWaterDataGetter rhs)
        {
            ((WaterDataSetterTranslationCommon)((IWaterDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IWaterData lhs,
            IWaterDataGetter rhs,
            WaterData.TranslationMask? copyMask = null)
        {
            ((WaterDataSetterTranslationCommon)((IWaterDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IWaterData lhs,
            IWaterDataGetter rhs,
            out WaterData.ErrorMask errorMask,
            WaterData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((WaterDataSetterTranslationCommon)((IWaterDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = WaterData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IWaterData lhs,
            IWaterDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((WaterDataSetterTranslationCommon)((IWaterDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static WaterData DeepCopy(
            this IWaterDataGetter item,
            WaterData.TranslationMask? copyMask = null)
        {
            return ((WaterDataSetterTranslationCommon)((IWaterDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static WaterData DeepCopy(
            this IWaterDataGetter item,
            out WaterData.ErrorMask errorMask,
            WaterData.TranslationMask? copyMask = null)
        {
            return ((WaterDataSetterTranslationCommon)((IWaterDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static WaterData DeepCopy(
            this IWaterDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((WaterDataSetterTranslationCommon)((IWaterDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IWaterData item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((WaterDataSetterCommon)((IWaterDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum WaterData_FieldIndex
    {
        Versioning = 0,
        WindVelocity = 1,
        WindDirection = 2,
        WaveAmplitude = 3,
        WaveFrequency = 4,
        SunPower = 5,
        ReflectivityAmount = 6,
        FresnelAmount = 7,
        ScrollXSpeed = 8,
        ScrollYSpeed = 9,
        FogDistanceNearPlane = 10,
        FogDistanceFarPlane = 11,
        ShallowColor = 12,
        DeepColor = 13,
        ReflectionColor = 14,
        TextureBlend = 15,
        RainSimulatorForce = 16,
        RainSimulatorVelocity = 17,
        RainSimulatorFalloff = 18,
        RainSimulatorDampner = 19,
        RainSimulatorStartingSize = 20,
        DisplacementSimulatorForce = 21,
        DisplacementSimulatorVelocity = 22,
        DisplacementSimulatorFalloff = 23,
        DisplacementSimulatorDampner = 24,
        DisplacementSimulatorStartingSize = 25,
        Damage = 26,
    }
    #endregion

    #region Registration
    public partial class WaterData_Registration : ILoquiRegistration
    {
        public static readonly WaterData_Registration Instance = new WaterData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 214,
            version: 0);

        public const string GUID = "19681672-407a-45b4-a1a8-5fdab94b9777";

        public const ushort AdditionalFieldCount = 27;

        public const ushort FieldCount = 27;

        public static readonly Type MaskType = typeof(WaterData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(WaterData.ErrorMask);

        public static readonly Type ClassType = typeof(WaterData);

        public static readonly Type GetterType = typeof(IWaterDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWaterData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.WaterData";

        public const string Name = "WaterData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.DATA;
        public static readonly Type BinaryWriteTranslation = typeof(WaterDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class WaterDataSetterCommon
    {
        public static readonly WaterDataSetterCommon Instance = new WaterDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IWaterData item)
        {
            ClearPartial();
            item.Versioning = default;
            item.WindVelocity = default;
            item.WindDirection = default;
            item.WaveAmplitude = default;
            item.WaveFrequency = default;
            item.SunPower = default;
            item.ReflectivityAmount = default;
            item.FresnelAmount = default;
            item.ScrollXSpeed = default;
            item.ScrollYSpeed = default;
            item.FogDistanceNearPlane = default;
            item.FogDistanceFarPlane = default;
            item.ShallowColor = default;
            item.DeepColor = default;
            item.ReflectionColor = default;
            item.TextureBlend = default;
            item.RainSimulatorForce = default;
            item.RainSimulatorVelocity = default;
            item.RainSimulatorFalloff = default;
            item.RainSimulatorDampner = default;
            item.RainSimulatorStartingSize = default;
            item.DisplacementSimulatorForce = default;
            item.DisplacementSimulatorVelocity = default;
            item.DisplacementSimulatorFalloff = default;
            item.DisplacementSimulatorDampner = default;
            item.DisplacementSimulatorStartingSize = default;
            item.Damage = default;
        }
        
        #region Mutagen
        public void RemapLinks(IWaterData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IWaterData item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.DATA),
                translationParams?.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: WaterDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class WaterDataCommon
    {
        public static readonly WaterDataCommon Instance = new WaterDataCommon();

        public WaterData.Mask<bool> GetEqualsMask(
            IWaterDataGetter item,
            IWaterDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new WaterData.Mask<bool>(false);
            ((WaterDataCommon)((IWaterDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWaterDataGetter item,
            IWaterDataGetter rhs,
            WaterData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Versioning = item.Versioning == rhs.Versioning;
            ret.WindVelocity = item.WindVelocity.EqualsWithin(rhs.WindVelocity);
            ret.WindDirection = item.WindDirection.EqualsWithin(rhs.WindDirection);
            ret.WaveAmplitude = item.WaveAmplitude.EqualsWithin(rhs.WaveAmplitude);
            ret.WaveFrequency = item.WaveFrequency.EqualsWithin(rhs.WaveFrequency);
            ret.SunPower = item.SunPower.EqualsWithin(rhs.SunPower);
            ret.ReflectivityAmount = item.ReflectivityAmount.EqualsWithin(rhs.ReflectivityAmount);
            ret.FresnelAmount = item.FresnelAmount.EqualsWithin(rhs.FresnelAmount);
            ret.ScrollXSpeed = item.ScrollXSpeed.EqualsWithin(rhs.ScrollXSpeed);
            ret.ScrollYSpeed = item.ScrollYSpeed.EqualsWithin(rhs.ScrollYSpeed);
            ret.FogDistanceNearPlane = item.FogDistanceNearPlane.EqualsWithin(rhs.FogDistanceNearPlane);
            ret.FogDistanceFarPlane = item.FogDistanceFarPlane.EqualsWithin(rhs.FogDistanceFarPlane);
            ret.ShallowColor = item.ShallowColor.ColorOnlyEquals(rhs.ShallowColor);
            ret.DeepColor = item.DeepColor.ColorOnlyEquals(rhs.DeepColor);
            ret.ReflectionColor = item.ReflectionColor.ColorOnlyEquals(rhs.ReflectionColor);
            ret.TextureBlend = item.TextureBlend == rhs.TextureBlend;
            ret.RainSimulatorForce = item.RainSimulatorForce.EqualsWithin(rhs.RainSimulatorForce);
            ret.RainSimulatorVelocity = item.RainSimulatorVelocity.EqualsWithin(rhs.RainSimulatorVelocity);
            ret.RainSimulatorFalloff = item.RainSimulatorFalloff.EqualsWithin(rhs.RainSimulatorFalloff);
            ret.RainSimulatorDampner = item.RainSimulatorDampner.EqualsWithin(rhs.RainSimulatorDampner);
            ret.RainSimulatorStartingSize = item.RainSimulatorStartingSize.EqualsWithin(rhs.RainSimulatorStartingSize);
            ret.DisplacementSimulatorForce = item.DisplacementSimulatorForce.EqualsWithin(rhs.DisplacementSimulatorForce);
            ret.DisplacementSimulatorVelocity = item.DisplacementSimulatorVelocity.EqualsWithin(rhs.DisplacementSimulatorVelocity);
            ret.DisplacementSimulatorFalloff = item.DisplacementSimulatorFalloff.EqualsWithin(rhs.DisplacementSimulatorFalloff);
            ret.DisplacementSimulatorDampner = item.DisplacementSimulatorDampner.EqualsWithin(rhs.DisplacementSimulatorDampner);
            ret.DisplacementSimulatorStartingSize = item.DisplacementSimulatorStartingSize.EqualsWithin(rhs.DisplacementSimulatorStartingSize);
            ret.Damage = item.Damage == rhs.Damage;
        }
        
        public string ToString(
            IWaterDataGetter item,
            string? name = null,
            WaterData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IWaterDataGetter item,
            FileGeneration fg,
            string? name = null,
            WaterData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"WaterData =>");
            }
            else
            {
                fg.AppendLine($"{name} (WaterData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IWaterDataGetter item,
            FileGeneration fg,
            WaterData.Mask<bool>? printMask = null)
        {
            if (printMask?.Versioning ?? true)
            {
                fg.AppendItem(item.Versioning, "Versioning");
            }
            if (printMask?.WindVelocity ?? true)
            {
                fg.AppendItem(item.WindVelocity, "WindVelocity");
            }
            if (printMask?.WindDirection ?? true)
            {
                fg.AppendItem(item.WindDirection, "WindDirection");
            }
            if (printMask?.WaveAmplitude ?? true)
            {
                fg.AppendItem(item.WaveAmplitude, "WaveAmplitude");
            }
            if (printMask?.WaveFrequency ?? true)
            {
                fg.AppendItem(item.WaveFrequency, "WaveFrequency");
            }
            if (printMask?.SunPower ?? true)
            {
                fg.AppendItem(item.SunPower, "SunPower");
            }
            if (printMask?.ReflectivityAmount ?? true)
            {
                fg.AppendItem(item.ReflectivityAmount, "ReflectivityAmount");
            }
            if (printMask?.FresnelAmount ?? true)
            {
                fg.AppendItem(item.FresnelAmount, "FresnelAmount");
            }
            if (printMask?.ScrollXSpeed ?? true)
            {
                fg.AppendItem(item.ScrollXSpeed, "ScrollXSpeed");
            }
            if (printMask?.ScrollYSpeed ?? true)
            {
                fg.AppendItem(item.ScrollYSpeed, "ScrollYSpeed");
            }
            if (printMask?.FogDistanceNearPlane ?? true)
            {
                fg.AppendItem(item.FogDistanceNearPlane, "FogDistanceNearPlane");
            }
            if (printMask?.FogDistanceFarPlane ?? true)
            {
                fg.AppendItem(item.FogDistanceFarPlane, "FogDistanceFarPlane");
            }
            if (printMask?.ShallowColor ?? true)
            {
                fg.AppendItem(item.ShallowColor, "ShallowColor");
            }
            if (printMask?.DeepColor ?? true)
            {
                fg.AppendItem(item.DeepColor, "DeepColor");
            }
            if (printMask?.ReflectionColor ?? true)
            {
                fg.AppendItem(item.ReflectionColor, "ReflectionColor");
            }
            if (printMask?.TextureBlend ?? true)
            {
                fg.AppendItem(item.TextureBlend, "TextureBlend");
            }
            if (printMask?.RainSimulatorForce ?? true)
            {
                fg.AppendItem(item.RainSimulatorForce, "RainSimulatorForce");
            }
            if (printMask?.RainSimulatorVelocity ?? true)
            {
                fg.AppendItem(item.RainSimulatorVelocity, "RainSimulatorVelocity");
            }
            if (printMask?.RainSimulatorFalloff ?? true)
            {
                fg.AppendItem(item.RainSimulatorFalloff, "RainSimulatorFalloff");
            }
            if (printMask?.RainSimulatorDampner ?? true)
            {
                fg.AppendItem(item.RainSimulatorDampner, "RainSimulatorDampner");
            }
            if (printMask?.RainSimulatorStartingSize ?? true)
            {
                fg.AppendItem(item.RainSimulatorStartingSize, "RainSimulatorStartingSize");
            }
            if (printMask?.DisplacementSimulatorForce ?? true)
            {
                fg.AppendItem(item.DisplacementSimulatorForce, "DisplacementSimulatorForce");
            }
            if (printMask?.DisplacementSimulatorVelocity ?? true)
            {
                fg.AppendItem(item.DisplacementSimulatorVelocity, "DisplacementSimulatorVelocity");
            }
            if (printMask?.DisplacementSimulatorFalloff ?? true)
            {
                fg.AppendItem(item.DisplacementSimulatorFalloff, "DisplacementSimulatorFalloff");
            }
            if (printMask?.DisplacementSimulatorDampner ?? true)
            {
                fg.AppendItem(item.DisplacementSimulatorDampner, "DisplacementSimulatorDampner");
            }
            if (printMask?.DisplacementSimulatorStartingSize ?? true)
            {
                fg.AppendItem(item.DisplacementSimulatorStartingSize, "DisplacementSimulatorStartingSize");
            }
            if (printMask?.Damage ?? true)
            {
                fg.AppendItem(item.Damage, "Damage");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWaterDataGetter? lhs,
            IWaterDataGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)WaterData_FieldIndex.Versioning) ?? true))
            {
                if (lhs.Versioning != rhs.Versioning) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WaterData_FieldIndex.WindVelocity) ?? true))
            {
                if (!lhs.WindVelocity.EqualsWithin(rhs.WindVelocity)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WaterData_FieldIndex.WindDirection) ?? true))
            {
                if (!lhs.WindDirection.EqualsWithin(rhs.WindDirection)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WaterData_FieldIndex.WaveAmplitude) ?? true))
            {
                if (!lhs.WaveAmplitude.EqualsWithin(rhs.WaveAmplitude)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WaterData_FieldIndex.WaveFrequency) ?? true))
            {
                if (!lhs.WaveFrequency.EqualsWithin(rhs.WaveFrequency)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WaterData_FieldIndex.SunPower) ?? true))
            {
                if (!lhs.SunPower.EqualsWithin(rhs.SunPower)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WaterData_FieldIndex.ReflectivityAmount) ?? true))
            {
                if (!lhs.ReflectivityAmount.EqualsWithin(rhs.ReflectivityAmount)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WaterData_FieldIndex.FresnelAmount) ?? true))
            {
                if (!lhs.FresnelAmount.EqualsWithin(rhs.FresnelAmount)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WaterData_FieldIndex.ScrollXSpeed) ?? true))
            {
                if (!lhs.ScrollXSpeed.EqualsWithin(rhs.ScrollXSpeed)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WaterData_FieldIndex.ScrollYSpeed) ?? true))
            {
                if (!lhs.ScrollYSpeed.EqualsWithin(rhs.ScrollYSpeed)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WaterData_FieldIndex.FogDistanceNearPlane) ?? true))
            {
                if (!lhs.FogDistanceNearPlane.EqualsWithin(rhs.FogDistanceNearPlane)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WaterData_FieldIndex.FogDistanceFarPlane) ?? true))
            {
                if (!lhs.FogDistanceFarPlane.EqualsWithin(rhs.FogDistanceFarPlane)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WaterData_FieldIndex.ShallowColor) ?? true))
            {
                if (!lhs.ShallowColor.ColorOnlyEquals(rhs.ShallowColor)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WaterData_FieldIndex.DeepColor) ?? true))
            {
                if (!lhs.DeepColor.ColorOnlyEquals(rhs.DeepColor)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WaterData_FieldIndex.ReflectionColor) ?? true))
            {
                if (!lhs.ReflectionColor.ColorOnlyEquals(rhs.ReflectionColor)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WaterData_FieldIndex.TextureBlend) ?? true))
            {
                if (lhs.TextureBlend != rhs.TextureBlend) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WaterData_FieldIndex.RainSimulatorForce) ?? true))
            {
                if (!lhs.RainSimulatorForce.EqualsWithin(rhs.RainSimulatorForce)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WaterData_FieldIndex.RainSimulatorVelocity) ?? true))
            {
                if (!lhs.RainSimulatorVelocity.EqualsWithin(rhs.RainSimulatorVelocity)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WaterData_FieldIndex.RainSimulatorFalloff) ?? true))
            {
                if (!lhs.RainSimulatorFalloff.EqualsWithin(rhs.RainSimulatorFalloff)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WaterData_FieldIndex.RainSimulatorDampner) ?? true))
            {
                if (!lhs.RainSimulatorDampner.EqualsWithin(rhs.RainSimulatorDampner)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WaterData_FieldIndex.RainSimulatorStartingSize) ?? true))
            {
                if (!lhs.RainSimulatorStartingSize.EqualsWithin(rhs.RainSimulatorStartingSize)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WaterData_FieldIndex.DisplacementSimulatorForce) ?? true))
            {
                if (!lhs.DisplacementSimulatorForce.EqualsWithin(rhs.DisplacementSimulatorForce)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WaterData_FieldIndex.DisplacementSimulatorVelocity) ?? true))
            {
                if (!lhs.DisplacementSimulatorVelocity.EqualsWithin(rhs.DisplacementSimulatorVelocity)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WaterData_FieldIndex.DisplacementSimulatorFalloff) ?? true))
            {
                if (!lhs.DisplacementSimulatorFalloff.EqualsWithin(rhs.DisplacementSimulatorFalloff)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WaterData_FieldIndex.DisplacementSimulatorDampner) ?? true))
            {
                if (!lhs.DisplacementSimulatorDampner.EqualsWithin(rhs.DisplacementSimulatorDampner)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WaterData_FieldIndex.DisplacementSimulatorStartingSize) ?? true))
            {
                if (!lhs.DisplacementSimulatorStartingSize.EqualsWithin(rhs.DisplacementSimulatorStartingSize)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)WaterData_FieldIndex.Damage) ?? true))
            {
                if (lhs.Damage != rhs.Damage) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IWaterDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Versioning);
            hash.Add(item.WindVelocity);
            hash.Add(item.WindDirection);
            hash.Add(item.WaveAmplitude);
            hash.Add(item.WaveFrequency);
            hash.Add(item.SunPower);
            hash.Add(item.ReflectivityAmount);
            hash.Add(item.FresnelAmount);
            hash.Add(item.ScrollXSpeed);
            hash.Add(item.ScrollYSpeed);
            hash.Add(item.FogDistanceNearPlane);
            hash.Add(item.FogDistanceFarPlane);
            hash.Add(item.ShallowColor);
            hash.Add(item.DeepColor);
            hash.Add(item.ReflectionColor);
            hash.Add(item.TextureBlend);
            hash.Add(item.RainSimulatorForce);
            hash.Add(item.RainSimulatorVelocity);
            hash.Add(item.RainSimulatorFalloff);
            hash.Add(item.RainSimulatorDampner);
            hash.Add(item.RainSimulatorStartingSize);
            hash.Add(item.DisplacementSimulatorForce);
            hash.Add(item.DisplacementSimulatorVelocity);
            hash.Add(item.DisplacementSimulatorFalloff);
            hash.Add(item.DisplacementSimulatorDampner);
            hash.Add(item.DisplacementSimulatorStartingSize);
            hash.Add(item.Damage);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return WaterData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IWaterDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class WaterDataSetterTranslationCommon
    {
        public static readonly WaterDataSetterTranslationCommon Instance = new WaterDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IWaterData item,
            IWaterDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)WaterData_FieldIndex.Versioning) ?? true))
            {
                item.Versioning = rhs.Versioning;
            }
            if (rhs.Versioning.HasFlag(WaterData.VersioningBreaks.Break0)) return;
            if ((copyMask?.GetShouldTranslate((int)WaterData_FieldIndex.WindVelocity) ?? true))
            {
                item.WindVelocity = rhs.WindVelocity;
            }
            if ((copyMask?.GetShouldTranslate((int)WaterData_FieldIndex.WindDirection) ?? true))
            {
                item.WindDirection = rhs.WindDirection;
            }
            if ((copyMask?.GetShouldTranslate((int)WaterData_FieldIndex.WaveAmplitude) ?? true))
            {
                item.WaveAmplitude = rhs.WaveAmplitude;
            }
            if ((copyMask?.GetShouldTranslate((int)WaterData_FieldIndex.WaveFrequency) ?? true))
            {
                item.WaveFrequency = rhs.WaveFrequency;
            }
            if ((copyMask?.GetShouldTranslate((int)WaterData_FieldIndex.SunPower) ?? true))
            {
                item.SunPower = rhs.SunPower;
            }
            if ((copyMask?.GetShouldTranslate((int)WaterData_FieldIndex.ReflectivityAmount) ?? true))
            {
                item.ReflectivityAmount = rhs.ReflectivityAmount;
            }
            if ((copyMask?.GetShouldTranslate((int)WaterData_FieldIndex.FresnelAmount) ?? true))
            {
                item.FresnelAmount = rhs.FresnelAmount;
            }
            if ((copyMask?.GetShouldTranslate((int)WaterData_FieldIndex.ScrollXSpeed) ?? true))
            {
                item.ScrollXSpeed = rhs.ScrollXSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)WaterData_FieldIndex.ScrollYSpeed) ?? true))
            {
                item.ScrollYSpeed = rhs.ScrollYSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)WaterData_FieldIndex.FogDistanceNearPlane) ?? true))
            {
                item.FogDistanceNearPlane = rhs.FogDistanceNearPlane;
            }
            if (rhs.Versioning.HasFlag(WaterData.VersioningBreaks.Break1)) return;
            if ((copyMask?.GetShouldTranslate((int)WaterData_FieldIndex.FogDistanceFarPlane) ?? true))
            {
                item.FogDistanceFarPlane = rhs.FogDistanceFarPlane;
            }
            if ((copyMask?.GetShouldTranslate((int)WaterData_FieldIndex.ShallowColor) ?? true))
            {
                item.ShallowColor = rhs.ShallowColor;
            }
            if ((copyMask?.GetShouldTranslate((int)WaterData_FieldIndex.DeepColor) ?? true))
            {
                item.DeepColor = rhs.DeepColor;
            }
            if ((copyMask?.GetShouldTranslate((int)WaterData_FieldIndex.ReflectionColor) ?? true))
            {
                item.ReflectionColor = rhs.ReflectionColor;
            }
            if ((copyMask?.GetShouldTranslate((int)WaterData_FieldIndex.TextureBlend) ?? true))
            {
                item.TextureBlend = rhs.TextureBlend;
            }
            if (rhs.Versioning.HasFlag(WaterData.VersioningBreaks.Break2)) return;
            if ((copyMask?.GetShouldTranslate((int)WaterData_FieldIndex.RainSimulatorForce) ?? true))
            {
                item.RainSimulatorForce = rhs.RainSimulatorForce;
            }
            if ((copyMask?.GetShouldTranslate((int)WaterData_FieldIndex.RainSimulatorVelocity) ?? true))
            {
                item.RainSimulatorVelocity = rhs.RainSimulatorVelocity;
            }
            if ((copyMask?.GetShouldTranslate((int)WaterData_FieldIndex.RainSimulatorFalloff) ?? true))
            {
                item.RainSimulatorFalloff = rhs.RainSimulatorFalloff;
            }
            if ((copyMask?.GetShouldTranslate((int)WaterData_FieldIndex.RainSimulatorDampner) ?? true))
            {
                item.RainSimulatorDampner = rhs.RainSimulatorDampner;
            }
            if ((copyMask?.GetShouldTranslate((int)WaterData_FieldIndex.RainSimulatorStartingSize) ?? true))
            {
                item.RainSimulatorStartingSize = rhs.RainSimulatorStartingSize;
            }
            if ((copyMask?.GetShouldTranslate((int)WaterData_FieldIndex.DisplacementSimulatorForce) ?? true))
            {
                item.DisplacementSimulatorForce = rhs.DisplacementSimulatorForce;
            }
            if (rhs.Versioning.HasFlag(WaterData.VersioningBreaks.Break3)) return;
            if ((copyMask?.GetShouldTranslate((int)WaterData_FieldIndex.DisplacementSimulatorVelocity) ?? true))
            {
                item.DisplacementSimulatorVelocity = rhs.DisplacementSimulatorVelocity;
            }
            if ((copyMask?.GetShouldTranslate((int)WaterData_FieldIndex.DisplacementSimulatorFalloff) ?? true))
            {
                item.DisplacementSimulatorFalloff = rhs.DisplacementSimulatorFalloff;
            }
            if ((copyMask?.GetShouldTranslate((int)WaterData_FieldIndex.DisplacementSimulatorDampner) ?? true))
            {
                item.DisplacementSimulatorDampner = rhs.DisplacementSimulatorDampner;
            }
            if ((copyMask?.GetShouldTranslate((int)WaterData_FieldIndex.DisplacementSimulatorStartingSize) ?? true))
            {
                item.DisplacementSimulatorStartingSize = rhs.DisplacementSimulatorStartingSize;
            }
            if ((copyMask?.GetShouldTranslate((int)WaterData_FieldIndex.Damage) ?? true))
            {
                item.Damage = rhs.Damage;
            }
        }
        
        #endregion
        
        public WaterData DeepCopy(
            IWaterDataGetter item,
            WaterData.TranslationMask? copyMask = null)
        {
            WaterData ret = (WaterData)((WaterDataCommon)((IWaterDataGetter)item).CommonInstance()!).GetNew();
            ((WaterDataSetterTranslationCommon)((IWaterDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public WaterData DeepCopy(
            IWaterDataGetter item,
            out WaterData.ErrorMask errorMask,
            WaterData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            WaterData ret = (WaterData)((WaterDataCommon)((IWaterDataGetter)item).CommonInstance()!).GetNew();
            ((WaterDataSetterTranslationCommon)((IWaterDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = WaterData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public WaterData DeepCopy(
            IWaterDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            WaterData ret = (WaterData)((WaterDataCommon)((IWaterDataGetter)item).CommonInstance()!).GetNew();
            ((WaterDataSetterTranslationCommon)((IWaterDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class WaterData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WaterData_Registration.Instance;
        public static WaterData_Registration StaticRegistration => WaterData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => WaterDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return WaterDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => WaterDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IWaterDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IWaterDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IWaterDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WaterDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static WaterDataBinaryWriteTranslation Instance = new WaterDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            IWaterDataGetter item,
            MutagenWriter writer)
        {
            if (!item.Versioning.HasFlag(WaterData.VersioningBreaks.Break0))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.WindVelocity);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.WindDirection);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.WaveAmplitude);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.WaveFrequency);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.SunPower);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ReflectivityAmount);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FresnelAmount);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ScrollXSpeed);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ScrollYSpeed);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FogDistanceNearPlane);
                WaterDataBinaryWriteTranslation.WriteBinaryBloodCustomLogic(
                    writer: writer,
                    item: item);
                if (!item.Versioning.HasFlag(WaterData.VersioningBreaks.Break1))
                {
                    FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.FogDistanceFarPlane);
                    ColorBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.ShallowColor);
                    ColorBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.DeepColor);
                    ColorBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.ReflectionColor);
                    writer.Write(item.TextureBlend);
                    writer.WriteZeros(3);
                    WaterDataBinaryWriteTranslation.WriteBinaryOilCustomLogic(
                        writer: writer,
                        item: item);
                    if (!item.Versioning.HasFlag(WaterData.VersioningBreaks.Break2))
                    {
                        FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                            writer: writer,
                            item: item.RainSimulatorForce);
                        FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                            writer: writer,
                            item: item.RainSimulatorVelocity);
                        FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                            writer: writer,
                            item: item.RainSimulatorFalloff);
                        FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                            writer: writer,
                            item: item.RainSimulatorDampner);
                        FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                            writer: writer,
                            item: item.RainSimulatorStartingSize);
                        FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                            writer: writer,
                            item: item.DisplacementSimulatorForce);
                        WaterDataBinaryWriteTranslation.WriteBinaryOddExtraBytes(
                            writer: writer,
                            item: item);
                        if (!item.Versioning.HasFlag(WaterData.VersioningBreaks.Break3))
                        {
                            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                                writer: writer,
                                item: item.DisplacementSimulatorVelocity);
                            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                                writer: writer,
                                item: item.DisplacementSimulatorFalloff);
                            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                                writer: writer,
                                item: item.DisplacementSimulatorDampner);
                            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                                writer: writer,
                                item: item.DisplacementSimulatorStartingSize);
                            writer.Write(item.Damage);
                        }
                    }
                }
            }
        }

        public static partial void WriteBinaryBloodCustomLogicCustom(
            MutagenWriter writer,
            IWaterDataGetter item);

        public static void WriteBinaryBloodCustomLogic(
            MutagenWriter writer,
            IWaterDataGetter item)
        {
            WriteBinaryBloodCustomLogicCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryOilCustomLogicCustom(
            MutagenWriter writer,
            IWaterDataGetter item);

        public static void WriteBinaryOilCustomLogic(
            MutagenWriter writer,
            IWaterDataGetter item)
        {
            WriteBinaryOilCustomLogicCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryOddExtraBytesCustom(
            MutagenWriter writer,
            IWaterDataGetter item);

        public static void WriteBinaryOddExtraBytes(
            MutagenWriter writer,
            IWaterDataGetter item)
        {
            WriteBinaryOddExtraBytesCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IWaterDataGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.DATA),
                overflowRecord: translationParams?.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IWaterDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class WaterDataBinaryCreateTranslation
    {
        public readonly static WaterDataBinaryCreateTranslation Instance = new WaterDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IWaterData item,
            MutagenFrame frame)
        {
            if (frame.Complete)
            {
                item.Versioning |= WaterData.VersioningBreaks.Break0;
                return;
            }
            item.WindVelocity = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WindDirection = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WaveAmplitude = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WaveFrequency = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.SunPower = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ReflectivityAmount = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.FresnelAmount = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ScrollXSpeed = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ScrollYSpeed = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.FogDistanceNearPlane = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            WaterDataBinaryCreateTranslation.FillBinaryBloodCustomLogicCustom(
                frame: frame,
                item: item);
            if (frame.Complete)
            {
                item.Versioning |= WaterData.VersioningBreaks.Break1;
                return;
            }
            item.FogDistanceFarPlane = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ShallowColor = frame.ReadColor(ColorBinaryType.Alpha);
            item.DeepColor = frame.ReadColor(ColorBinaryType.Alpha);
            item.ReflectionColor = frame.ReadColor(ColorBinaryType.Alpha);
            item.TextureBlend = frame.ReadUInt8();
            frame.SetPosition(frame.Position + 3);
            WaterDataBinaryCreateTranslation.FillBinaryOilCustomLogicCustom(
                frame: frame,
                item: item);
            if (frame.Complete)
            {
                item.Versioning |= WaterData.VersioningBreaks.Break2;
                return;
            }
            item.RainSimulatorForce = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.RainSimulatorVelocity = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.RainSimulatorFalloff = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.RainSimulatorDampner = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.RainSimulatorStartingSize = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.DisplacementSimulatorForce = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            WaterDataBinaryCreateTranslation.FillBinaryOddExtraBytesCustom(
                frame: frame,
                item: item);
            if (frame.Complete)
            {
                item.Versioning |= WaterData.VersioningBreaks.Break3;
                return;
            }
            item.DisplacementSimulatorVelocity = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.DisplacementSimulatorFalloff = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.DisplacementSimulatorDampner = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.DisplacementSimulatorStartingSize = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Damage = frame.ReadUInt16();
        }

        public static partial void FillBinaryBloodCustomLogicCustom(
            MutagenFrame frame,
            IWaterData item);

        public static partial void FillBinaryOilCustomLogicCustom(
            MutagenFrame frame,
            IWaterData item);

        public static partial void FillBinaryOddExtraBytesCustom(
            MutagenFrame frame,
            IWaterData item);

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class WaterDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IWaterDataGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((WaterDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
}
#endregion

#endregion

