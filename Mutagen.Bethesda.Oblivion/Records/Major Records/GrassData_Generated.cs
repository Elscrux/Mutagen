/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Oblivion.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class GrassData :
        IEquatable<IGrassDataGetter>,
        IGrassData,
        ILoquiObjectSetter<GrassData>
    {
        #region Ctor
        public GrassData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Density
        public Byte Density { get; set; } = default(Byte);
        #endregion
        #region MinSlope
        public Byte MinSlope { get; set; } = default(Byte);
        #endregion
        #region MaxSlope
        public Byte MaxSlope { get; set; } = default(Byte);
        #endregion
        #region Fluff1
        public Byte Fluff1 { get; set; } = default(Byte);
        #endregion
        #region UnitFromWaterAmount
        public UInt16 UnitFromWaterAmount { get; set; } = default(UInt16);
        #endregion
        #region Fluff2
        public UInt16 Fluff2 { get; set; } = default(UInt16);
        #endregion
        #region UnitFromWaterMode
        public Grass.UnitFromWaterType UnitFromWaterMode { get; set; } = default(Grass.UnitFromWaterType);
        #endregion
        #region PositionRange
        public Single PositionRange { get; set; } = default(Single);
        #endregion
        #region HeightRange
        public Single HeightRange { get; set; } = default(Single);
        #endregion
        #region ColorRange
        public Single ColorRange { get; set; } = default(Single);
        #endregion
        #region WavePeriod
        public Single WavePeriod { get; set; } = default(Single);
        #endregion
        #region Flags
        public Grass.GrassFlag Flags { get; set; } = default(Grass.GrassFlag);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            GrassDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IGrassDataGetter rhs) return false;
            return ((GrassDataCommon)((IGrassDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IGrassDataGetter? obj)
        {
            return ((GrassDataCommon)((IGrassDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((GrassDataCommon)((IGrassDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Density = initialValue;
                this.MinSlope = initialValue;
                this.MaxSlope = initialValue;
                this.Fluff1 = initialValue;
                this.UnitFromWaterAmount = initialValue;
                this.Fluff2 = initialValue;
                this.UnitFromWaterMode = initialValue;
                this.PositionRange = initialValue;
                this.HeightRange = initialValue;
                this.ColorRange = initialValue;
                this.WavePeriod = initialValue;
                this.Flags = initialValue;
            }

            public Mask(
                TItem Density,
                TItem MinSlope,
                TItem MaxSlope,
                TItem Fluff1,
                TItem UnitFromWaterAmount,
                TItem Fluff2,
                TItem UnitFromWaterMode,
                TItem PositionRange,
                TItem HeightRange,
                TItem ColorRange,
                TItem WavePeriod,
                TItem Flags)
            {
                this.Density = Density;
                this.MinSlope = MinSlope;
                this.MaxSlope = MaxSlope;
                this.Fluff1 = Fluff1;
                this.UnitFromWaterAmount = UnitFromWaterAmount;
                this.Fluff2 = Fluff2;
                this.UnitFromWaterMode = UnitFromWaterMode;
                this.PositionRange = PositionRange;
                this.HeightRange = HeightRange;
                this.ColorRange = ColorRange;
                this.WavePeriod = WavePeriod;
                this.Flags = Flags;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Density;
            public TItem MinSlope;
            public TItem MaxSlope;
            public TItem Fluff1;
            public TItem UnitFromWaterAmount;
            public TItem Fluff2;
            public TItem UnitFromWaterMode;
            public TItem PositionRange;
            public TItem HeightRange;
            public TItem ColorRange;
            public TItem WavePeriod;
            public TItem Flags;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Density, rhs.Density)) return false;
                if (!object.Equals(this.MinSlope, rhs.MinSlope)) return false;
                if (!object.Equals(this.MaxSlope, rhs.MaxSlope)) return false;
                if (!object.Equals(this.Fluff1, rhs.Fluff1)) return false;
                if (!object.Equals(this.UnitFromWaterAmount, rhs.UnitFromWaterAmount)) return false;
                if (!object.Equals(this.Fluff2, rhs.Fluff2)) return false;
                if (!object.Equals(this.UnitFromWaterMode, rhs.UnitFromWaterMode)) return false;
                if (!object.Equals(this.PositionRange, rhs.PositionRange)) return false;
                if (!object.Equals(this.HeightRange, rhs.HeightRange)) return false;
                if (!object.Equals(this.ColorRange, rhs.ColorRange)) return false;
                if (!object.Equals(this.WavePeriod, rhs.WavePeriod)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Density);
                hash.Add(this.MinSlope);
                hash.Add(this.MaxSlope);
                hash.Add(this.Fluff1);
                hash.Add(this.UnitFromWaterAmount);
                hash.Add(this.Fluff2);
                hash.Add(this.UnitFromWaterMode);
                hash.Add(this.PositionRange);
                hash.Add(this.HeightRange);
                hash.Add(this.ColorRange);
                hash.Add(this.WavePeriod);
                hash.Add(this.Flags);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Density)) return false;
                if (!eval(this.MinSlope)) return false;
                if (!eval(this.MaxSlope)) return false;
                if (!eval(this.Fluff1)) return false;
                if (!eval(this.UnitFromWaterAmount)) return false;
                if (!eval(this.Fluff2)) return false;
                if (!eval(this.UnitFromWaterMode)) return false;
                if (!eval(this.PositionRange)) return false;
                if (!eval(this.HeightRange)) return false;
                if (!eval(this.ColorRange)) return false;
                if (!eval(this.WavePeriod)) return false;
                if (!eval(this.Flags)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Density)) return true;
                if (eval(this.MinSlope)) return true;
                if (eval(this.MaxSlope)) return true;
                if (eval(this.Fluff1)) return true;
                if (eval(this.UnitFromWaterAmount)) return true;
                if (eval(this.Fluff2)) return true;
                if (eval(this.UnitFromWaterMode)) return true;
                if (eval(this.PositionRange)) return true;
                if (eval(this.HeightRange)) return true;
                if (eval(this.ColorRange)) return true;
                if (eval(this.WavePeriod)) return true;
                if (eval(this.Flags)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new GrassData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Density = eval(this.Density);
                obj.MinSlope = eval(this.MinSlope);
                obj.MaxSlope = eval(this.MaxSlope);
                obj.Fluff1 = eval(this.Fluff1);
                obj.UnitFromWaterAmount = eval(this.UnitFromWaterAmount);
                obj.Fluff2 = eval(this.Fluff2);
                obj.UnitFromWaterMode = eval(this.UnitFromWaterMode);
                obj.PositionRange = eval(this.PositionRange);
                obj.HeightRange = eval(this.HeightRange);
                obj.ColorRange = eval(this.ColorRange);
                obj.WavePeriod = eval(this.WavePeriod);
                obj.Flags = eval(this.Flags);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(GrassData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, GrassData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(GrassData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Density ?? true)
                    {
                        sb.AppendItem(Density, "Density");
                    }
                    if (printMask?.MinSlope ?? true)
                    {
                        sb.AppendItem(MinSlope, "MinSlope");
                    }
                    if (printMask?.MaxSlope ?? true)
                    {
                        sb.AppendItem(MaxSlope, "MaxSlope");
                    }
                    if (printMask?.Fluff1 ?? true)
                    {
                        sb.AppendItem(Fluff1, "Fluff1");
                    }
                    if (printMask?.UnitFromWaterAmount ?? true)
                    {
                        sb.AppendItem(UnitFromWaterAmount, "UnitFromWaterAmount");
                    }
                    if (printMask?.Fluff2 ?? true)
                    {
                        sb.AppendItem(Fluff2, "Fluff2");
                    }
                    if (printMask?.UnitFromWaterMode ?? true)
                    {
                        sb.AppendItem(UnitFromWaterMode, "UnitFromWaterMode");
                    }
                    if (printMask?.PositionRange ?? true)
                    {
                        sb.AppendItem(PositionRange, "PositionRange");
                    }
                    if (printMask?.HeightRange ?? true)
                    {
                        sb.AppendItem(HeightRange, "HeightRange");
                    }
                    if (printMask?.ColorRange ?? true)
                    {
                        sb.AppendItem(ColorRange, "ColorRange");
                    }
                    if (printMask?.WavePeriod ?? true)
                    {
                        sb.AppendItem(WavePeriod, "WavePeriod");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Density;
            public Exception? MinSlope;
            public Exception? MaxSlope;
            public Exception? Fluff1;
            public Exception? UnitFromWaterAmount;
            public Exception? Fluff2;
            public Exception? UnitFromWaterMode;
            public Exception? PositionRange;
            public Exception? HeightRange;
            public Exception? ColorRange;
            public Exception? WavePeriod;
            public Exception? Flags;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                GrassData_FieldIndex enu = (GrassData_FieldIndex)index;
                switch (enu)
                {
                    case GrassData_FieldIndex.Density:
                        return Density;
                    case GrassData_FieldIndex.MinSlope:
                        return MinSlope;
                    case GrassData_FieldIndex.MaxSlope:
                        return MaxSlope;
                    case GrassData_FieldIndex.Fluff1:
                        return Fluff1;
                    case GrassData_FieldIndex.UnitFromWaterAmount:
                        return UnitFromWaterAmount;
                    case GrassData_FieldIndex.Fluff2:
                        return Fluff2;
                    case GrassData_FieldIndex.UnitFromWaterMode:
                        return UnitFromWaterMode;
                    case GrassData_FieldIndex.PositionRange:
                        return PositionRange;
                    case GrassData_FieldIndex.HeightRange:
                        return HeightRange;
                    case GrassData_FieldIndex.ColorRange:
                        return ColorRange;
                    case GrassData_FieldIndex.WavePeriod:
                        return WavePeriod;
                    case GrassData_FieldIndex.Flags:
                        return Flags;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                GrassData_FieldIndex enu = (GrassData_FieldIndex)index;
                switch (enu)
                {
                    case GrassData_FieldIndex.Density:
                        this.Density = ex;
                        break;
                    case GrassData_FieldIndex.MinSlope:
                        this.MinSlope = ex;
                        break;
                    case GrassData_FieldIndex.MaxSlope:
                        this.MaxSlope = ex;
                        break;
                    case GrassData_FieldIndex.Fluff1:
                        this.Fluff1 = ex;
                        break;
                    case GrassData_FieldIndex.UnitFromWaterAmount:
                        this.UnitFromWaterAmount = ex;
                        break;
                    case GrassData_FieldIndex.Fluff2:
                        this.Fluff2 = ex;
                        break;
                    case GrassData_FieldIndex.UnitFromWaterMode:
                        this.UnitFromWaterMode = ex;
                        break;
                    case GrassData_FieldIndex.PositionRange:
                        this.PositionRange = ex;
                        break;
                    case GrassData_FieldIndex.HeightRange:
                        this.HeightRange = ex;
                        break;
                    case GrassData_FieldIndex.ColorRange:
                        this.ColorRange = ex;
                        break;
                    case GrassData_FieldIndex.WavePeriod:
                        this.WavePeriod = ex;
                        break;
                    case GrassData_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                GrassData_FieldIndex enu = (GrassData_FieldIndex)index;
                switch (enu)
                {
                    case GrassData_FieldIndex.Density:
                        this.Density = (Exception?)obj;
                        break;
                    case GrassData_FieldIndex.MinSlope:
                        this.MinSlope = (Exception?)obj;
                        break;
                    case GrassData_FieldIndex.MaxSlope:
                        this.MaxSlope = (Exception?)obj;
                        break;
                    case GrassData_FieldIndex.Fluff1:
                        this.Fluff1 = (Exception?)obj;
                        break;
                    case GrassData_FieldIndex.UnitFromWaterAmount:
                        this.UnitFromWaterAmount = (Exception?)obj;
                        break;
                    case GrassData_FieldIndex.Fluff2:
                        this.Fluff2 = (Exception?)obj;
                        break;
                    case GrassData_FieldIndex.UnitFromWaterMode:
                        this.UnitFromWaterMode = (Exception?)obj;
                        break;
                    case GrassData_FieldIndex.PositionRange:
                        this.PositionRange = (Exception?)obj;
                        break;
                    case GrassData_FieldIndex.HeightRange:
                        this.HeightRange = (Exception?)obj;
                        break;
                    case GrassData_FieldIndex.ColorRange:
                        this.ColorRange = (Exception?)obj;
                        break;
                    case GrassData_FieldIndex.WavePeriod:
                        this.WavePeriod = (Exception?)obj;
                        break;
                    case GrassData_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Density != null) return true;
                if (MinSlope != null) return true;
                if (MaxSlope != null) return true;
                if (Fluff1 != null) return true;
                if (UnitFromWaterAmount != null) return true;
                if (Fluff2 != null) return true;
                if (UnitFromWaterMode != null) return true;
                if (PositionRange != null) return true;
                if (HeightRange != null) return true;
                if (ColorRange != null) return true;
                if (WavePeriod != null) return true;
                if (Flags != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Density, "Density");
                }
                {
                    sb.AppendItem(MinSlope, "MinSlope");
                }
                {
                    sb.AppendItem(MaxSlope, "MaxSlope");
                }
                {
                    sb.AppendItem(Fluff1, "Fluff1");
                }
                {
                    sb.AppendItem(UnitFromWaterAmount, "UnitFromWaterAmount");
                }
                {
                    sb.AppendItem(Fluff2, "Fluff2");
                }
                {
                    sb.AppendItem(UnitFromWaterMode, "UnitFromWaterMode");
                }
                {
                    sb.AppendItem(PositionRange, "PositionRange");
                }
                {
                    sb.AppendItem(HeightRange, "HeightRange");
                }
                {
                    sb.AppendItem(ColorRange, "ColorRange");
                }
                {
                    sb.AppendItem(WavePeriod, "WavePeriod");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Density = this.Density.Combine(rhs.Density);
                ret.MinSlope = this.MinSlope.Combine(rhs.MinSlope);
                ret.MaxSlope = this.MaxSlope.Combine(rhs.MaxSlope);
                ret.Fluff1 = this.Fluff1.Combine(rhs.Fluff1);
                ret.UnitFromWaterAmount = this.UnitFromWaterAmount.Combine(rhs.UnitFromWaterAmount);
                ret.Fluff2 = this.Fluff2.Combine(rhs.Fluff2);
                ret.UnitFromWaterMode = this.UnitFromWaterMode.Combine(rhs.UnitFromWaterMode);
                ret.PositionRange = this.PositionRange.Combine(rhs.PositionRange);
                ret.HeightRange = this.HeightRange.Combine(rhs.HeightRange);
                ret.ColorRange = this.ColorRange.Combine(rhs.ColorRange);
                ret.WavePeriod = this.WavePeriod.Combine(rhs.WavePeriod);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Density;
            public bool MinSlope;
            public bool MaxSlope;
            public bool Fluff1;
            public bool UnitFromWaterAmount;
            public bool Fluff2;
            public bool UnitFromWaterMode;
            public bool PositionRange;
            public bool HeightRange;
            public bool ColorRange;
            public bool WavePeriod;
            public bool Flags;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Density = defaultOn;
                this.MinSlope = defaultOn;
                this.MaxSlope = defaultOn;
                this.Fluff1 = defaultOn;
                this.UnitFromWaterAmount = defaultOn;
                this.Fluff2 = defaultOn;
                this.UnitFromWaterMode = defaultOn;
                this.PositionRange = defaultOn;
                this.HeightRange = defaultOn;
                this.ColorRange = defaultOn;
                this.WavePeriod = defaultOn;
                this.Flags = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Density, null));
                ret.Add((MinSlope, null));
                ret.Add((MaxSlope, null));
                ret.Add((Fluff1, null));
                ret.Add((UnitFromWaterAmount, null));
                ret.Add((Fluff2, null));
                ret.Add((UnitFromWaterMode, null));
                ret.Add((PositionRange, null));
                ret.Add((HeightRange, null));
                ret.Add((ColorRange, null));
                ret.Add((WavePeriod, null));
                ret.Add((Flags, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => GrassDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((GrassDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static GrassData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new GrassData();
            ((GrassDataSetterCommon)((IGrassDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out GrassData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((GrassDataSetterCommon)((IGrassDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static GrassData GetNew()
        {
            return new GrassData();
        }

    }
    #endregion

    #region Interface
    public partial interface IGrassData :
        IGrassDataGetter,
        ILoquiObjectSetter<IGrassData>
    {
        new Byte Density { get; set; }
        new Byte MinSlope { get; set; }
        new Byte MaxSlope { get; set; }
        new Byte Fluff1 { get; set; }
        new UInt16 UnitFromWaterAmount { get; set; }
        new UInt16 Fluff2 { get; set; }
        new Grass.UnitFromWaterType UnitFromWaterMode { get; set; }
        new Single PositionRange { get; set; }
        new Single HeightRange { get; set; }
        new Single ColorRange { get; set; }
        new Single WavePeriod { get; set; }
        new Grass.GrassFlag Flags { get; set; }
    }

    public partial interface IGrassDataGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IGrassDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => GrassData_Registration.Instance;
        Byte Density { get; }
        Byte MinSlope { get; }
        Byte MaxSlope { get; }
        Byte Fluff1 { get; }
        UInt16 UnitFromWaterAmount { get; }
        UInt16 Fluff2 { get; }
        Grass.UnitFromWaterType UnitFromWaterMode { get; }
        Single PositionRange { get; }
        Single HeightRange { get; }
        Single ColorRange { get; }
        Single WavePeriod { get; }
        Grass.GrassFlag Flags { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class GrassDataMixIn
    {
        public static void Clear(this IGrassData item)
        {
            ((GrassDataSetterCommon)((IGrassDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static GrassData.Mask<bool> GetEqualsMask(
            this IGrassDataGetter item,
            IGrassDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((GrassDataCommon)((IGrassDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IGrassDataGetter item,
            string? name = null,
            GrassData.Mask<bool>? printMask = null)
        {
            return ((GrassDataCommon)((IGrassDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IGrassDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            GrassData.Mask<bool>? printMask = null)
        {
            ((GrassDataCommon)((IGrassDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IGrassDataGetter item,
            IGrassDataGetter rhs,
            GrassData.TranslationMask? equalsMask = null)
        {
            return ((GrassDataCommon)((IGrassDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IGrassData lhs,
            IGrassDataGetter rhs)
        {
            ((GrassDataSetterTranslationCommon)((IGrassDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IGrassData lhs,
            IGrassDataGetter rhs,
            GrassData.TranslationMask? copyMask = null)
        {
            ((GrassDataSetterTranslationCommon)((IGrassDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IGrassData lhs,
            IGrassDataGetter rhs,
            out GrassData.ErrorMask errorMask,
            GrassData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((GrassDataSetterTranslationCommon)((IGrassDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = GrassData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IGrassData lhs,
            IGrassDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((GrassDataSetterTranslationCommon)((IGrassDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static GrassData DeepCopy(
            this IGrassDataGetter item,
            GrassData.TranslationMask? copyMask = null)
        {
            return ((GrassDataSetterTranslationCommon)((IGrassDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static GrassData DeepCopy(
            this IGrassDataGetter item,
            out GrassData.ErrorMask errorMask,
            GrassData.TranslationMask? copyMask = null)
        {
            return ((GrassDataSetterTranslationCommon)((IGrassDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static GrassData DeepCopy(
            this IGrassDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((GrassDataSetterTranslationCommon)((IGrassDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IGrassData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((GrassDataSetterCommon)((IGrassDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    #region Field Index
    internal enum GrassData_FieldIndex
    {
        Density = 0,
        MinSlope = 1,
        MaxSlope = 2,
        Fluff1 = 3,
        UnitFromWaterAmount = 4,
        Fluff2 = 5,
        UnitFromWaterMode = 6,
        PositionRange = 7,
        HeightRange = 8,
        ColorRange = 9,
        WavePeriod = 10,
        Flags = 11,
    }
    #endregion

    #region Registration
    internal partial class GrassData_Registration : ILoquiRegistration
    {
        public static readonly GrassData_Registration Instance = new GrassData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public const ushort AdditionalFieldCount = 12;

        public const ushort FieldCount = 12;

        public static readonly Type MaskType = typeof(GrassData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(GrassData.ErrorMask);

        public static readonly Type ClassType = typeof(GrassData);

        public static readonly Type GetterType = typeof(IGrassDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IGrassData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.GrassData";

        public const string Name = "GrassData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.DATA;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.DATA);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(GrassDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class GrassDataSetterCommon
    {
        public static readonly GrassDataSetterCommon Instance = new GrassDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IGrassData item)
        {
            ClearPartial();
            item.Density = default(Byte);
            item.MinSlope = default(Byte);
            item.MaxSlope = default(Byte);
            item.Fluff1 = default(Byte);
            item.UnitFromWaterAmount = default(UInt16);
            item.Fluff2 = default(UInt16);
            item.UnitFromWaterMode = default(Grass.UnitFromWaterType);
            item.PositionRange = default(Single);
            item.HeightRange = default(Single);
            item.ColorRange = default(Single);
            item.WavePeriod = default(Single);
            item.Flags = default(Grass.GrassFlag);
        }
        
        #region Mutagen
        public void RemapLinks(IGrassData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IGrassData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.DATA),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: GrassDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class GrassDataCommon
    {
        public static readonly GrassDataCommon Instance = new GrassDataCommon();

        public GrassData.Mask<bool> GetEqualsMask(
            IGrassDataGetter item,
            IGrassDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new GrassData.Mask<bool>(false);
            ((GrassDataCommon)((IGrassDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IGrassDataGetter item,
            IGrassDataGetter rhs,
            GrassData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Density = item.Density == rhs.Density;
            ret.MinSlope = item.MinSlope == rhs.MinSlope;
            ret.MaxSlope = item.MaxSlope == rhs.MaxSlope;
            ret.Fluff1 = item.Fluff1 == rhs.Fluff1;
            ret.UnitFromWaterAmount = item.UnitFromWaterAmount == rhs.UnitFromWaterAmount;
            ret.Fluff2 = item.Fluff2 == rhs.Fluff2;
            ret.UnitFromWaterMode = item.UnitFromWaterMode == rhs.UnitFromWaterMode;
            ret.PositionRange = item.PositionRange.EqualsWithin(rhs.PositionRange);
            ret.HeightRange = item.HeightRange.EqualsWithin(rhs.HeightRange);
            ret.ColorRange = item.ColorRange.EqualsWithin(rhs.ColorRange);
            ret.WavePeriod = item.WavePeriod.EqualsWithin(rhs.WavePeriod);
            ret.Flags = item.Flags == rhs.Flags;
        }
        
        public string Print(
            IGrassDataGetter item,
            string? name = null,
            GrassData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IGrassDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            GrassData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"GrassData =>");
            }
            else
            {
                sb.AppendLine($"{name} (GrassData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IGrassDataGetter item,
            StructuredStringBuilder sb,
            GrassData.Mask<bool>? printMask = null)
        {
            if (printMask?.Density ?? true)
            {
                sb.AppendItem(item.Density, "Density");
            }
            if (printMask?.MinSlope ?? true)
            {
                sb.AppendItem(item.MinSlope, "MinSlope");
            }
            if (printMask?.MaxSlope ?? true)
            {
                sb.AppendItem(item.MaxSlope, "MaxSlope");
            }
            if (printMask?.Fluff1 ?? true)
            {
                sb.AppendItem(item.Fluff1, "Fluff1");
            }
            if (printMask?.UnitFromWaterAmount ?? true)
            {
                sb.AppendItem(item.UnitFromWaterAmount, "UnitFromWaterAmount");
            }
            if (printMask?.Fluff2 ?? true)
            {
                sb.AppendItem(item.Fluff2, "Fluff2");
            }
            if (printMask?.UnitFromWaterMode ?? true)
            {
                sb.AppendItem(item.UnitFromWaterMode, "UnitFromWaterMode");
            }
            if (printMask?.PositionRange ?? true)
            {
                sb.AppendItem(item.PositionRange, "PositionRange");
            }
            if (printMask?.HeightRange ?? true)
            {
                sb.AppendItem(item.HeightRange, "HeightRange");
            }
            if (printMask?.ColorRange ?? true)
            {
                sb.AppendItem(item.ColorRange, "ColorRange");
            }
            if (printMask?.WavePeriod ?? true)
            {
                sb.AppendItem(item.WavePeriod, "WavePeriod");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IGrassDataGetter? lhs,
            IGrassDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)GrassData_FieldIndex.Density) ?? true))
            {
                if (lhs.Density != rhs.Density) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GrassData_FieldIndex.MinSlope) ?? true))
            {
                if (lhs.MinSlope != rhs.MinSlope) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GrassData_FieldIndex.MaxSlope) ?? true))
            {
                if (lhs.MaxSlope != rhs.MaxSlope) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GrassData_FieldIndex.Fluff1) ?? true))
            {
                if (lhs.Fluff1 != rhs.Fluff1) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GrassData_FieldIndex.UnitFromWaterAmount) ?? true))
            {
                if (lhs.UnitFromWaterAmount != rhs.UnitFromWaterAmount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GrassData_FieldIndex.Fluff2) ?? true))
            {
                if (lhs.Fluff2 != rhs.Fluff2) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GrassData_FieldIndex.UnitFromWaterMode) ?? true))
            {
                if (lhs.UnitFromWaterMode != rhs.UnitFromWaterMode) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GrassData_FieldIndex.PositionRange) ?? true))
            {
                if (!lhs.PositionRange.EqualsWithin(rhs.PositionRange)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GrassData_FieldIndex.HeightRange) ?? true))
            {
                if (!lhs.HeightRange.EqualsWithin(rhs.HeightRange)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GrassData_FieldIndex.ColorRange) ?? true))
            {
                if (!lhs.ColorRange.EqualsWithin(rhs.ColorRange)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GrassData_FieldIndex.WavePeriod) ?? true))
            {
                if (!lhs.WavePeriod.EqualsWithin(rhs.WavePeriod)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GrassData_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IGrassDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Density);
            hash.Add(item.MinSlope);
            hash.Add(item.MaxSlope);
            hash.Add(item.Fluff1);
            hash.Add(item.UnitFromWaterAmount);
            hash.Add(item.Fluff2);
            hash.Add(item.UnitFromWaterMode);
            hash.Add(item.PositionRange);
            hash.Add(item.HeightRange);
            hash.Add(item.ColorRange);
            hash.Add(item.WavePeriod);
            hash.Add(item.Flags);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return GrassData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IGrassDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class GrassDataSetterTranslationCommon
    {
        public static readonly GrassDataSetterTranslationCommon Instance = new GrassDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IGrassData item,
            IGrassDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)GrassData_FieldIndex.Density) ?? true))
            {
                item.Density = rhs.Density;
            }
            if ((copyMask?.GetShouldTranslate((int)GrassData_FieldIndex.MinSlope) ?? true))
            {
                item.MinSlope = rhs.MinSlope;
            }
            if ((copyMask?.GetShouldTranslate((int)GrassData_FieldIndex.MaxSlope) ?? true))
            {
                item.MaxSlope = rhs.MaxSlope;
            }
            if ((copyMask?.GetShouldTranslate((int)GrassData_FieldIndex.Fluff1) ?? true))
            {
                item.Fluff1 = rhs.Fluff1;
            }
            if ((copyMask?.GetShouldTranslate((int)GrassData_FieldIndex.UnitFromWaterAmount) ?? true))
            {
                item.UnitFromWaterAmount = rhs.UnitFromWaterAmount;
            }
            if ((copyMask?.GetShouldTranslate((int)GrassData_FieldIndex.Fluff2) ?? true))
            {
                item.Fluff2 = rhs.Fluff2;
            }
            if ((copyMask?.GetShouldTranslate((int)GrassData_FieldIndex.UnitFromWaterMode) ?? true))
            {
                item.UnitFromWaterMode = rhs.UnitFromWaterMode;
            }
            if ((copyMask?.GetShouldTranslate((int)GrassData_FieldIndex.PositionRange) ?? true))
            {
                item.PositionRange = rhs.PositionRange;
            }
            if ((copyMask?.GetShouldTranslate((int)GrassData_FieldIndex.HeightRange) ?? true))
            {
                item.HeightRange = rhs.HeightRange;
            }
            if ((copyMask?.GetShouldTranslate((int)GrassData_FieldIndex.ColorRange) ?? true))
            {
                item.ColorRange = rhs.ColorRange;
            }
            if ((copyMask?.GetShouldTranslate((int)GrassData_FieldIndex.WavePeriod) ?? true))
            {
                item.WavePeriod = rhs.WavePeriod;
            }
            if ((copyMask?.GetShouldTranslate((int)GrassData_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
        }
        
        #endregion
        
        public GrassData DeepCopy(
            IGrassDataGetter item,
            GrassData.TranslationMask? copyMask = null)
        {
            GrassData ret = (GrassData)((GrassDataCommon)((IGrassDataGetter)item).CommonInstance()!).GetNew();
            ((GrassDataSetterTranslationCommon)((IGrassDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public GrassData DeepCopy(
            IGrassDataGetter item,
            out GrassData.ErrorMask errorMask,
            GrassData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            GrassData ret = (GrassData)((GrassDataCommon)((IGrassDataGetter)item).CommonInstance()!).GetNew();
            ((GrassDataSetterTranslationCommon)((IGrassDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = GrassData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public GrassData DeepCopy(
            IGrassDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            GrassData ret = (GrassData)((GrassDataCommon)((IGrassDataGetter)item).CommonInstance()!).GetNew();
            ((GrassDataSetterTranslationCommon)((IGrassDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class GrassData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GrassData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => GrassData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => GrassDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return GrassDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => GrassDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IGrassDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IGrassDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IGrassDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion
{
    public partial class GrassDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly GrassDataBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IGrassDataGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Density);
            writer.Write(item.MinSlope);
            writer.Write(item.MaxSlope);
            writer.Write(item.Fluff1);
            writer.Write(item.UnitFromWaterAmount);
            writer.Write(item.Fluff2);
            EnumBinaryTranslation<Grass.UnitFromWaterType, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.UnitFromWaterMode,
                length: 4);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.PositionRange);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.HeightRange);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ColorRange);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WavePeriod);
            EnumBinaryTranslation<Grass.GrassFlag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Flags,
                length: 4);
        }

        public void Write(
            MutagenWriter writer,
            IGrassDataGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.DATA),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IGrassDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class GrassDataBinaryCreateTranslation
    {
        public static readonly GrassDataBinaryCreateTranslation Instance = new GrassDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IGrassData item,
            MutagenFrame frame)
        {
            item.Density = frame.ReadUInt8();
            item.MinSlope = frame.ReadUInt8();
            item.MaxSlope = frame.ReadUInt8();
            item.Fluff1 = frame.ReadUInt8();
            item.UnitFromWaterAmount = frame.ReadUInt16();
            item.Fluff2 = frame.ReadUInt16();
            item.UnitFromWaterMode = EnumBinaryTranslation<Grass.UnitFromWaterType, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
            item.PositionRange = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.HeightRange = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ColorRange = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WavePeriod = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Flags = EnumBinaryTranslation<Grass.GrassFlag, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class GrassDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IGrassDataGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((GrassDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion
{
    internal partial class GrassDataBinaryOverlay :
        PluginBinaryOverlay,
        IGrassDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GrassData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => GrassData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => GrassDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => GrassDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IGrassDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IGrassDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IGrassDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => GrassDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((GrassDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Byte Density => _structData.Span[0x0];
        public Byte MinSlope => _structData.Span[0x1];
        public Byte MaxSlope => _structData.Span[0x2];
        public Byte Fluff1 => _structData.Span[0x3];
        public UInt16 UnitFromWaterAmount => BinaryPrimitives.ReadUInt16LittleEndian(_structData.Slice(0x4, 0x2));
        public UInt16 Fluff2 => BinaryPrimitives.ReadUInt16LittleEndian(_structData.Slice(0x6, 0x2));
        public Grass.UnitFromWaterType UnitFromWaterMode => (Grass.UnitFromWaterType)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0x8, 0x4));
        public Single PositionRange => _structData.Slice(0xC, 0x4).Float();
        public Single HeightRange => _structData.Slice(0x10, 0x4).Float();
        public Single ColorRange => _structData.Slice(0x14, 0x4).Float();
        public Single WavePeriod => _structData.Slice(0x18, 0x4).Float();
        public Grass.GrassFlag Flags => (Grass.GrassFlag)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0x1C, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected GrassDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IGrassDataGetter GrassDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x20,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new GrassDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x20 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IGrassDataGetter GrassDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return GrassDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            GrassDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IGrassDataGetter rhs) return false;
            return ((GrassDataCommon)((IGrassDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IGrassDataGetter? obj)
        {
            return ((GrassDataCommon)((IGrassDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((GrassDataCommon)((IGrassDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

