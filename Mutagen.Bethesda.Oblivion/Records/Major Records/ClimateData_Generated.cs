/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class ClimateData :
        IClimateData,
        IEquatable<IClimateDataGetter>,
        ILoquiObjectSetter<ClimateData>
    {
        #region Ctor
        public ClimateData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region SunriseBegin
        public DateTime SunriseBegin { get; set; } = default;
        #endregion
        #region SunriseEnd
        public DateTime SunriseEnd { get; set; } = default;
        #endregion
        #region SunsetBegin
        public DateTime SunsetBegin { get; set; } = default;
        #endregion
        #region SunsetEnd
        public DateTime SunsetEnd { get; set; } = default;
        #endregion
        #region Volatility
        public Byte Volatility { get; set; } = default;
        #endregion
        #region Phase
        public Climate.MoonPhase Phase { get; set; } = default;
        #endregion
        #region PhaseLength
        public Byte PhaseLength { get; set; } = default;
        public static RangeUInt8 PhaseLength_Range = new RangeUInt8(0, 63);
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ClimateDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IClimateDataGetter rhs) return false;
            return ((ClimateDataCommon)((IClimateDataGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IClimateDataGetter? obj)
        {
            return ((ClimateDataCommon)((IClimateDataGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ClimateDataCommon)((IClimateDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.SunriseBegin = initialValue;
                this.SunriseEnd = initialValue;
                this.SunsetBegin = initialValue;
                this.SunsetEnd = initialValue;
                this.Volatility = initialValue;
                this.Phase = initialValue;
                this.PhaseLength = initialValue;
            }

            public Mask(
                TItem SunriseBegin,
                TItem SunriseEnd,
                TItem SunsetBegin,
                TItem SunsetEnd,
                TItem Volatility,
                TItem Phase,
                TItem PhaseLength)
            {
                this.SunriseBegin = SunriseBegin;
                this.SunriseEnd = SunriseEnd;
                this.SunsetBegin = SunsetBegin;
                this.SunsetEnd = SunsetEnd;
                this.Volatility = Volatility;
                this.Phase = Phase;
                this.PhaseLength = PhaseLength;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem SunriseBegin;
            public TItem SunriseEnd;
            public TItem SunsetBegin;
            public TItem SunsetEnd;
            public TItem Volatility;
            public TItem Phase;
            public TItem PhaseLength;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.SunriseBegin, rhs.SunriseBegin)) return false;
                if (!object.Equals(this.SunriseEnd, rhs.SunriseEnd)) return false;
                if (!object.Equals(this.SunsetBegin, rhs.SunsetBegin)) return false;
                if (!object.Equals(this.SunsetEnd, rhs.SunsetEnd)) return false;
                if (!object.Equals(this.Volatility, rhs.Volatility)) return false;
                if (!object.Equals(this.Phase, rhs.Phase)) return false;
                if (!object.Equals(this.PhaseLength, rhs.PhaseLength)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.SunriseBegin);
                hash.Add(this.SunriseEnd);
                hash.Add(this.SunsetBegin);
                hash.Add(this.SunsetEnd);
                hash.Add(this.Volatility);
                hash.Add(this.Phase);
                hash.Add(this.PhaseLength);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.SunriseBegin)) return false;
                if (!eval(this.SunriseEnd)) return false;
                if (!eval(this.SunsetBegin)) return false;
                if (!eval(this.SunsetEnd)) return false;
                if (!eval(this.Volatility)) return false;
                if (!eval(this.Phase)) return false;
                if (!eval(this.PhaseLength)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.SunriseBegin)) return true;
                if (eval(this.SunriseEnd)) return true;
                if (eval(this.SunsetBegin)) return true;
                if (eval(this.SunsetEnd)) return true;
                if (eval(this.Volatility)) return true;
                if (eval(this.Phase)) return true;
                if (eval(this.PhaseLength)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ClimateData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.SunriseBegin = eval(this.SunriseBegin);
                obj.SunriseEnd = eval(this.SunriseEnd);
                obj.SunsetBegin = eval(this.SunsetBegin);
                obj.SunsetEnd = eval(this.SunsetEnd);
                obj.Volatility = eval(this.Volatility);
                obj.Phase = eval(this.Phase);
                obj.PhaseLength = eval(this.PhaseLength);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ClimateData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ClimateData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ClimateData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.SunriseBegin ?? true)
                    {
                        fg.AppendItem(SunriseBegin, "SunriseBegin");
                    }
                    if (printMask?.SunriseEnd ?? true)
                    {
                        fg.AppendItem(SunriseEnd, "SunriseEnd");
                    }
                    if (printMask?.SunsetBegin ?? true)
                    {
                        fg.AppendItem(SunsetBegin, "SunsetBegin");
                    }
                    if (printMask?.SunsetEnd ?? true)
                    {
                        fg.AppendItem(SunsetEnd, "SunsetEnd");
                    }
                    if (printMask?.Volatility ?? true)
                    {
                        fg.AppendItem(Volatility, "Volatility");
                    }
                    if (printMask?.Phase ?? true)
                    {
                        fg.AppendItem(Phase, "Phase");
                    }
                    if (printMask?.PhaseLength ?? true)
                    {
                        fg.AppendItem(PhaseLength, "PhaseLength");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? SunriseBegin;
            public Exception? SunriseEnd;
            public Exception? SunsetBegin;
            public Exception? SunsetEnd;
            public Exception? Volatility;
            public Exception? Phase;
            public Exception? PhaseLength;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ClimateData_FieldIndex enu = (ClimateData_FieldIndex)index;
                switch (enu)
                {
                    case ClimateData_FieldIndex.SunriseBegin:
                        return SunriseBegin;
                    case ClimateData_FieldIndex.SunriseEnd:
                        return SunriseEnd;
                    case ClimateData_FieldIndex.SunsetBegin:
                        return SunsetBegin;
                    case ClimateData_FieldIndex.SunsetEnd:
                        return SunsetEnd;
                    case ClimateData_FieldIndex.Volatility:
                        return Volatility;
                    case ClimateData_FieldIndex.Phase:
                        return Phase;
                    case ClimateData_FieldIndex.PhaseLength:
                        return PhaseLength;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                ClimateData_FieldIndex enu = (ClimateData_FieldIndex)index;
                switch (enu)
                {
                    case ClimateData_FieldIndex.SunriseBegin:
                        this.SunriseBegin = ex;
                        break;
                    case ClimateData_FieldIndex.SunriseEnd:
                        this.SunriseEnd = ex;
                        break;
                    case ClimateData_FieldIndex.SunsetBegin:
                        this.SunsetBegin = ex;
                        break;
                    case ClimateData_FieldIndex.SunsetEnd:
                        this.SunsetEnd = ex;
                        break;
                    case ClimateData_FieldIndex.Volatility:
                        this.Volatility = ex;
                        break;
                    case ClimateData_FieldIndex.Phase:
                        this.Phase = ex;
                        break;
                    case ClimateData_FieldIndex.PhaseLength:
                        this.PhaseLength = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                ClimateData_FieldIndex enu = (ClimateData_FieldIndex)index;
                switch (enu)
                {
                    case ClimateData_FieldIndex.SunriseBegin:
                        this.SunriseBegin = (Exception?)obj;
                        break;
                    case ClimateData_FieldIndex.SunriseEnd:
                        this.SunriseEnd = (Exception?)obj;
                        break;
                    case ClimateData_FieldIndex.SunsetBegin:
                        this.SunsetBegin = (Exception?)obj;
                        break;
                    case ClimateData_FieldIndex.SunsetEnd:
                        this.SunsetEnd = (Exception?)obj;
                        break;
                    case ClimateData_FieldIndex.Volatility:
                        this.Volatility = (Exception?)obj;
                        break;
                    case ClimateData_FieldIndex.Phase:
                        this.Phase = (Exception?)obj;
                        break;
                    case ClimateData_FieldIndex.PhaseLength:
                        this.PhaseLength = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (SunriseBegin != null) return true;
                if (SunriseEnd != null) return true;
                if (SunsetBegin != null) return true;
                if (SunsetEnd != null) return true;
                if (Volatility != null) return true;
                if (Phase != null) return true;
                if (PhaseLength != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(SunriseBegin, "SunriseBegin");
                fg.AppendItem(SunriseEnd, "SunriseEnd");
                fg.AppendItem(SunsetBegin, "SunsetBegin");
                fg.AppendItem(SunsetEnd, "SunsetEnd");
                fg.AppendItem(Volatility, "Volatility");
                fg.AppendItem(Phase, "Phase");
                fg.AppendItem(PhaseLength, "PhaseLength");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.SunriseBegin = this.SunriseBegin.Combine(rhs.SunriseBegin);
                ret.SunriseEnd = this.SunriseEnd.Combine(rhs.SunriseEnd);
                ret.SunsetBegin = this.SunsetBegin.Combine(rhs.SunsetBegin);
                ret.SunsetEnd = this.SunsetEnd.Combine(rhs.SunsetEnd);
                ret.Volatility = this.Volatility.Combine(rhs.Volatility);
                ret.Phase = this.Phase.Combine(rhs.Phase);
                ret.PhaseLength = this.PhaseLength.Combine(rhs.PhaseLength);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool SunriseBegin;
            public bool SunriseEnd;
            public bool SunsetBegin;
            public bool SunsetEnd;
            public bool Volatility;
            public bool Phase;
            public bool PhaseLength;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.SunriseBegin = defaultOn;
                this.SunriseEnd = defaultOn;
                this.SunsetBegin = defaultOn;
                this.SunsetEnd = defaultOn;
                this.Volatility = defaultOn;
                this.Phase = defaultOn;
                this.PhaseLength = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((SunriseBegin, null));
                ret.Add((SunriseEnd, null));
                ret.Add((SunsetBegin, null));
                ret.Add((SunsetEnd, null));
                ret.Add((Volatility, null));
                ret.Add((Phase, null));
                ret.Add((PhaseLength, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = ClimateData_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ClimateDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ClimateDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static ClimateData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new ClimateData();
            ((ClimateDataSetterCommon)((IClimateDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ClimateData item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ClimateDataSetterCommon)((IClimateDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ClimateData GetNew()
        {
            return new ClimateData();
        }

    }
    #endregion

    #region Interface
    public partial interface IClimateData :
        IClimateDataGetter,
        ILoquiObjectSetter<IClimateData>
    {
        new DateTime SunriseBegin { get; set; }
        new DateTime SunriseEnd { get; set; }
        new DateTime SunsetBegin { get; set; }
        new DateTime SunsetEnd { get; set; }
        new Byte Volatility { get; set; }
        new Climate.MoonPhase Phase { get; set; }
        new Byte PhaseLength { get; set; }
    }

    public partial interface IClimateDataGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IClimateDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => ClimateData_Registration.Instance;
        DateTime SunriseBegin { get; }
        DateTime SunriseEnd { get; }
        DateTime SunsetBegin { get; }
        DateTime SunsetEnd { get; }
        Byte Volatility { get; }
        Climate.MoonPhase Phase { get; }
        Byte PhaseLength { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ClimateDataMixIn
    {
        public static void Clear(this IClimateData item)
        {
            ((ClimateDataSetterCommon)((IClimateDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ClimateData.Mask<bool> GetEqualsMask(
            this IClimateDataGetter item,
            IClimateDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ClimateDataCommon)((IClimateDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IClimateDataGetter item,
            string? name = null,
            ClimateData.Mask<bool>? printMask = null)
        {
            return ((ClimateDataCommon)((IClimateDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IClimateDataGetter item,
            FileGeneration fg,
            string? name = null,
            ClimateData.Mask<bool>? printMask = null)
        {
            ((ClimateDataCommon)((IClimateDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IClimateDataGetter item,
            IClimateDataGetter rhs,
            ClimateData.TranslationMask? equalsMask = null)
        {
            return ((ClimateDataCommon)((IClimateDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IClimateData lhs,
            IClimateDataGetter rhs)
        {
            ((ClimateDataSetterTranslationCommon)((IClimateDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IClimateData lhs,
            IClimateDataGetter rhs,
            ClimateData.TranslationMask? copyMask = null)
        {
            ((ClimateDataSetterTranslationCommon)((IClimateDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IClimateData lhs,
            IClimateDataGetter rhs,
            out ClimateData.ErrorMask errorMask,
            ClimateData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ClimateDataSetterTranslationCommon)((IClimateDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ClimateData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IClimateData lhs,
            IClimateDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ClimateDataSetterTranslationCommon)((IClimateDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ClimateData DeepCopy(
            this IClimateDataGetter item,
            ClimateData.TranslationMask? copyMask = null)
        {
            return ((ClimateDataSetterTranslationCommon)((IClimateDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ClimateData DeepCopy(
            this IClimateDataGetter item,
            out ClimateData.ErrorMask errorMask,
            ClimateData.TranslationMask? copyMask = null)
        {
            return ((ClimateDataSetterTranslationCommon)((IClimateDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ClimateData DeepCopy(
            this IClimateDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ClimateDataSetterTranslationCommon)((IClimateDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IClimateData item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((ClimateDataSetterCommon)((IClimateDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum ClimateData_FieldIndex
    {
        SunriseBegin = 0,
        SunriseEnd = 1,
        SunsetBegin = 2,
        SunsetEnd = 3,
        Volatility = 4,
        Phase = 5,
        PhaseLength = 6,
    }
    #endregion

    #region Registration
    public partial class ClimateData_Registration : ILoquiRegistration
    {
        public static readonly ClimateData_Registration Instance = new ClimateData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 179,
            version: 0);

        public const string GUID = "765abd7c-fef0-4833-9020-ab4b8b215f18";

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(ClimateData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ClimateData.ErrorMask);

        public static readonly Type ClassType = typeof(ClimateData);

        public static readonly Type GetterType = typeof(IClimateDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IClimateData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.ClimateData";

        public const string Name = "ClimateData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TNAM;
        public static readonly Type BinaryWriteTranslation = typeof(ClimateDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ClimateDataSetterCommon
    {
        public static readonly ClimateDataSetterCommon Instance = new ClimateDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IClimateData item)
        {
            ClearPartial();
            item.SunriseBegin = default;
            item.SunriseEnd = default;
            item.SunsetBegin = default;
            item.SunsetEnd = default;
            item.Volatility = default;
            item.Phase = default;
            item.PhaseLength = default;
        }
        
        #region Mutagen
        public void RemapLinks(IClimateData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IClimateData item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.TNAM),
                translationParams?.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ClimateDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class ClimateDataCommon
    {
        public static readonly ClimateDataCommon Instance = new ClimateDataCommon();

        public ClimateData.Mask<bool> GetEqualsMask(
            IClimateDataGetter item,
            IClimateDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ClimateData.Mask<bool>(false);
            ((ClimateDataCommon)((IClimateDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IClimateDataGetter item,
            IClimateDataGetter rhs,
            ClimateData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.SunriseBegin = item.SunriseBegin == rhs.SunriseBegin;
            ret.SunriseEnd = item.SunriseEnd == rhs.SunriseEnd;
            ret.SunsetBegin = item.SunsetBegin == rhs.SunsetBegin;
            ret.SunsetEnd = item.SunsetEnd == rhs.SunsetEnd;
            ret.Volatility = item.Volatility == rhs.Volatility;
            ret.Phase = item.Phase == rhs.Phase;
            ret.PhaseLength = item.PhaseLength == rhs.PhaseLength;
        }
        
        public string ToString(
            IClimateDataGetter item,
            string? name = null,
            ClimateData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IClimateDataGetter item,
            FileGeneration fg,
            string? name = null,
            ClimateData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ClimateData =>");
            }
            else
            {
                fg.AppendLine($"{name} (ClimateData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IClimateDataGetter item,
            FileGeneration fg,
            ClimateData.Mask<bool>? printMask = null)
        {
            if (printMask?.SunriseBegin ?? true)
            {
                fg.AppendItem(item.SunriseBegin, "SunriseBegin");
            }
            if (printMask?.SunriseEnd ?? true)
            {
                fg.AppendItem(item.SunriseEnd, "SunriseEnd");
            }
            if (printMask?.SunsetBegin ?? true)
            {
                fg.AppendItem(item.SunsetBegin, "SunsetBegin");
            }
            if (printMask?.SunsetEnd ?? true)
            {
                fg.AppendItem(item.SunsetEnd, "SunsetEnd");
            }
            if (printMask?.Volatility ?? true)
            {
                fg.AppendItem(item.Volatility, "Volatility");
            }
            if (printMask?.Phase ?? true)
            {
                fg.AppendItem(item.Phase, "Phase");
            }
            if (printMask?.PhaseLength ?? true)
            {
                fg.AppendItem(item.PhaseLength, "PhaseLength");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IClimateDataGetter? lhs,
            IClimateDataGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)ClimateData_FieldIndex.SunriseBegin) ?? true))
            {
                if (lhs.SunriseBegin != rhs.SunriseBegin) return false;
            }
            if ((crystal?.GetShouldTranslate((int)ClimateData_FieldIndex.SunriseEnd) ?? true))
            {
                if (lhs.SunriseEnd != rhs.SunriseEnd) return false;
            }
            if ((crystal?.GetShouldTranslate((int)ClimateData_FieldIndex.SunsetBegin) ?? true))
            {
                if (lhs.SunsetBegin != rhs.SunsetBegin) return false;
            }
            if ((crystal?.GetShouldTranslate((int)ClimateData_FieldIndex.SunsetEnd) ?? true))
            {
                if (lhs.SunsetEnd != rhs.SunsetEnd) return false;
            }
            if ((crystal?.GetShouldTranslate((int)ClimateData_FieldIndex.Volatility) ?? true))
            {
                if (lhs.Volatility != rhs.Volatility) return false;
            }
            if ((crystal?.GetShouldTranslate((int)ClimateData_FieldIndex.Phase) ?? true))
            {
                if (lhs.Phase != rhs.Phase) return false;
            }
            if ((crystal?.GetShouldTranslate((int)ClimateData_FieldIndex.PhaseLength) ?? true))
            {
                if (lhs.PhaseLength != rhs.PhaseLength) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IClimateDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.SunriseBegin);
            hash.Add(item.SunriseEnd);
            hash.Add(item.SunsetBegin);
            hash.Add(item.SunsetEnd);
            hash.Add(item.Volatility);
            hash.Add(item.Phase);
            hash.Add(item.PhaseLength);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ClimateData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> GetContainedFormLinks(IClimateDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class ClimateDataSetterTranslationCommon
    {
        public static readonly ClimateDataSetterTranslationCommon Instance = new ClimateDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IClimateData item,
            IClimateDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)ClimateData_FieldIndex.SunriseBegin) ?? true))
            {
                item.SunriseBegin = rhs.SunriseBegin;
            }
            if ((copyMask?.GetShouldTranslate((int)ClimateData_FieldIndex.SunriseEnd) ?? true))
            {
                item.SunriseEnd = rhs.SunriseEnd;
            }
            if ((copyMask?.GetShouldTranslate((int)ClimateData_FieldIndex.SunsetBegin) ?? true))
            {
                item.SunsetBegin = rhs.SunsetBegin;
            }
            if ((copyMask?.GetShouldTranslate((int)ClimateData_FieldIndex.SunsetEnd) ?? true))
            {
                item.SunsetEnd = rhs.SunsetEnd;
            }
            if ((copyMask?.GetShouldTranslate((int)ClimateData_FieldIndex.Volatility) ?? true))
            {
                item.Volatility = rhs.Volatility;
            }
            if ((copyMask?.GetShouldTranslate((int)ClimateData_FieldIndex.Phase) ?? true))
            {
                item.Phase = rhs.Phase;
            }
            if ((copyMask?.GetShouldTranslate((int)ClimateData_FieldIndex.PhaseLength) ?? true))
            {
                item.PhaseLength = rhs.PhaseLength;
            }
        }
        
        #endregion
        
        public ClimateData DeepCopy(
            IClimateDataGetter item,
            ClimateData.TranslationMask? copyMask = null)
        {
            ClimateData ret = (ClimateData)((ClimateDataCommon)((IClimateDataGetter)item).CommonInstance()!).GetNew();
            ((ClimateDataSetterTranslationCommon)((IClimateDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ClimateData DeepCopy(
            IClimateDataGetter item,
            out ClimateData.ErrorMask errorMask,
            ClimateData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ClimateData ret = (ClimateData)((ClimateDataCommon)((IClimateDataGetter)item).CommonInstance()!).GetNew();
            ((ClimateDataSetterTranslationCommon)((IClimateDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ClimateData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ClimateData DeepCopy(
            IClimateDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ClimateData ret = (ClimateData)((ClimateDataCommon)((IClimateDataGetter)item).CommonInstance()!).GetNew();
            ((ClimateDataSetterTranslationCommon)((IClimateDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class ClimateData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ClimateData_Registration.Instance;
        public static ClimateData_Registration StaticRegistration => ClimateData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ClimateDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ClimateDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ClimateDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IClimateDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IClimateDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IClimateDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ClimateDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ClimateDataBinaryWriteTranslation Instance = new ClimateDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            IClimateDataGetter item,
            MutagenWriter writer)
        {
            ClimateDataBinaryWriteTranslation.WriteBinarySunriseBegin(
                writer: writer,
                item: item);
            ClimateDataBinaryWriteTranslation.WriteBinarySunriseEnd(
                writer: writer,
                item: item);
            ClimateDataBinaryWriteTranslation.WriteBinarySunsetBegin(
                writer: writer,
                item: item);
            ClimateDataBinaryWriteTranslation.WriteBinarySunsetEnd(
                writer: writer,
                item: item);
            writer.Write(item.Volatility);
            ClimateDataBinaryWriteTranslation.WriteBinaryPhase(
                writer: writer,
                item: item);
            ClimateDataBinaryWriteTranslation.WriteBinaryPhaseLength(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinarySunriseBeginCustom(
            MutagenWriter writer,
            IClimateDataGetter item);

        public static void WriteBinarySunriseBegin(
            MutagenWriter writer,
            IClimateDataGetter item)
        {
            WriteBinarySunriseBeginCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinarySunriseEndCustom(
            MutagenWriter writer,
            IClimateDataGetter item);

        public static void WriteBinarySunriseEnd(
            MutagenWriter writer,
            IClimateDataGetter item)
        {
            WriteBinarySunriseEndCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinarySunsetBeginCustom(
            MutagenWriter writer,
            IClimateDataGetter item);

        public static void WriteBinarySunsetBegin(
            MutagenWriter writer,
            IClimateDataGetter item)
        {
            WriteBinarySunsetBeginCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinarySunsetEndCustom(
            MutagenWriter writer,
            IClimateDataGetter item);

        public static void WriteBinarySunsetEnd(
            MutagenWriter writer,
            IClimateDataGetter item)
        {
            WriteBinarySunsetEndCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryPhaseCustom(
            MutagenWriter writer,
            IClimateDataGetter item);

        public static void WriteBinaryPhase(
            MutagenWriter writer,
            IClimateDataGetter item)
        {
            WriteBinaryPhaseCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryPhaseLengthCustom(
            MutagenWriter writer,
            IClimateDataGetter item);

        public static void WriteBinaryPhaseLength(
            MutagenWriter writer,
            IClimateDataGetter item)
        {
            WriteBinaryPhaseLengthCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IClimateDataGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.TNAM),
                overflowRecord: translationParams?.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (IClimateDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class ClimateDataBinaryCreateTranslation
    {
        public readonly static ClimateDataBinaryCreateTranslation Instance = new ClimateDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IClimateData item,
            MutagenFrame frame)
        {
            ClimateDataBinaryCreateTranslation.FillBinarySunriseBeginCustom(
                frame: frame,
                item: item);
            ClimateDataBinaryCreateTranslation.FillBinarySunriseEndCustom(
                frame: frame,
                item: item);
            ClimateDataBinaryCreateTranslation.FillBinarySunsetBeginCustom(
                frame: frame,
                item: item);
            ClimateDataBinaryCreateTranslation.FillBinarySunsetEndCustom(
                frame: frame,
                item: item);
            item.Volatility = frame.ReadUInt8();
            ClimateDataBinaryCreateTranslation.FillBinaryPhaseCustom(
                frame: frame,
                item: item);
            ClimateDataBinaryCreateTranslation.FillBinaryPhaseLengthCustom(
                frame: frame,
                item: item);
        }

        public static partial void FillBinarySunriseBeginCustom(
            MutagenFrame frame,
            IClimateData item);

        public static partial void FillBinarySunriseEndCustom(
            MutagenFrame frame,
            IClimateData item);

        public static partial void FillBinarySunsetBeginCustom(
            MutagenFrame frame,
            IClimateData item);

        public static partial void FillBinarySunsetEndCustom(
            MutagenFrame frame,
            IClimateData item);

        public static partial void FillBinaryPhaseCustom(
            MutagenFrame frame,
            IClimateData item);

        public static partial void FillBinaryPhaseLengthCustom(
            MutagenFrame frame,
            IClimateData item);

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ClimateDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IClimateDataGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ClimateDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ClimateDataBinaryOverlay :
        PluginBinaryOverlay,
        IClimateDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ClimateData_Registration.Instance;
        public static ClimateData_Registration StaticRegistration => ClimateData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ClimateDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ClimateDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IClimateDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IClimateDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IClimateDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ClimateDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((ClimateDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public DateTime SunriseBegin => GetSunriseBeginCustom(location: 0x0);
        public DateTime SunriseEnd => GetSunriseEndCustom(location: 0x1);
        public DateTime SunsetBegin => GetSunsetBeginCustom(location: 0x2);
        public DateTime SunsetEnd => GetSunsetEndCustom(location: 0x3);
        public Byte Volatility => _data.Span[0x4];
        public Climate.MoonPhase Phase => GetPhaseCustom(location: 0x5);
        #region PhaseLength
        public Byte PhaseLength => GetPhaseLengthCustom(location: 0x6);
        protected int PhaseLengthEndingPos;
        partial void CustomPhaseLengthEndPos();
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ClimateDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ClimateDataBinaryOverlay ClimateDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new ClimateDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants, parseParams),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ClimateDataBinaryOverlay ClimateDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return ClimateDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ClimateDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IClimateDataGetter rhs) return false;
            return ((ClimateDataCommon)((IClimateDataGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IClimateDataGetter? obj)
        {
            return ((ClimateDataCommon)((IClimateDataGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ClimateDataCommon)((IClimateDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

