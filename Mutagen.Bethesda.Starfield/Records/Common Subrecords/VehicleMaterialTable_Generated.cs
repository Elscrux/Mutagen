/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class VehicleMaterialTable :
        IEquatable<IVehicleMaterialTableGetter>,
        ILoquiObjectSetter<VehicleMaterialTable>,
        IVehicleMaterialTable
    {
        #region Ctor
        public VehicleMaterialTable()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MaterialID
        public Guid MaterialID { get; set; } = default(Guid);
        #endregion
        #region AudioRules
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<VehicleAudioRule> _AudioRules = new ExtendedList<VehicleAudioRule>();
        public ExtendedList<VehicleAudioRule> AudioRules
        {
            get => this._AudioRules;
            init => this._AudioRules = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IVehicleAudioRuleGetter> IVehicleMaterialTableGetter.AudioRules => _AudioRules;
        #endregion

        #endregion
        #region VfxRules
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<VehicleVfxRule> _VfxRules = new ExtendedList<VehicleVfxRule>();
        public ExtendedList<VehicleVfxRule> VfxRules
        {
            get => this._VfxRules;
            init => this._VfxRules = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IVehicleVfxRuleGetter> IVehicleMaterialTableGetter.VfxRules => _VfxRules;
        #endregion

        #endregion
        #region FrictionRules
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<VehicleFrictionRule> _FrictionRules = new ExtendedList<VehicleFrictionRule>();
        public ExtendedList<VehicleFrictionRule> FrictionRules
        {
            get => this._FrictionRules;
            init => this._FrictionRules = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IVehicleFrictionRuleGetter> IVehicleMaterialTableGetter.FrictionRules => _FrictionRules;
        #endregion

        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            VehicleMaterialTableMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IVehicleMaterialTableGetter rhs) return false;
            return ((VehicleMaterialTableCommon)((IVehicleMaterialTableGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IVehicleMaterialTableGetter? obj)
        {
            return ((VehicleMaterialTableCommon)((IVehicleMaterialTableGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((VehicleMaterialTableCommon)((IVehicleMaterialTableGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.MaterialID = initialValue;
                this.AudioRules = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, VehicleAudioRule.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, VehicleAudioRule.Mask<TItem>?>>());
                this.VfxRules = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, VehicleVfxRule.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, VehicleVfxRule.Mask<TItem>?>>());
                this.FrictionRules = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, VehicleFrictionRule.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, VehicleFrictionRule.Mask<TItem>?>>());
            }

            public Mask(
                TItem MaterialID,
                TItem AudioRules,
                TItem VfxRules,
                TItem FrictionRules)
            {
                this.MaterialID = MaterialID;
                this.AudioRules = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, VehicleAudioRule.Mask<TItem>?>>?>(AudioRules, Enumerable.Empty<MaskItemIndexed<TItem, VehicleAudioRule.Mask<TItem>?>>());
                this.VfxRules = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, VehicleVfxRule.Mask<TItem>?>>?>(VfxRules, Enumerable.Empty<MaskItemIndexed<TItem, VehicleVfxRule.Mask<TItem>?>>());
                this.FrictionRules = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, VehicleFrictionRule.Mask<TItem>?>>?>(FrictionRules, Enumerable.Empty<MaskItemIndexed<TItem, VehicleFrictionRule.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem MaterialID;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, VehicleAudioRule.Mask<TItem>?>>?>? AudioRules;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, VehicleVfxRule.Mask<TItem>?>>?>? VfxRules;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, VehicleFrictionRule.Mask<TItem>?>>?>? FrictionRules;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.MaterialID, rhs.MaterialID)) return false;
                if (!object.Equals(this.AudioRules, rhs.AudioRules)) return false;
                if (!object.Equals(this.VfxRules, rhs.VfxRules)) return false;
                if (!object.Equals(this.FrictionRules, rhs.FrictionRules)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.MaterialID);
                hash.Add(this.AudioRules);
                hash.Add(this.VfxRules);
                hash.Add(this.FrictionRules);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.MaterialID)) return false;
                if (this.AudioRules != null)
                {
                    if (!eval(this.AudioRules.Overall)) return false;
                    if (this.AudioRules.Specific != null)
                    {
                        foreach (var item in this.AudioRules.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.VfxRules != null)
                {
                    if (!eval(this.VfxRules.Overall)) return false;
                    if (this.VfxRules.Specific != null)
                    {
                        foreach (var item in this.VfxRules.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.FrictionRules != null)
                {
                    if (!eval(this.FrictionRules.Overall)) return false;
                    if (this.FrictionRules.Specific != null)
                    {
                        foreach (var item in this.FrictionRules.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.MaterialID)) return true;
                if (this.AudioRules != null)
                {
                    if (eval(this.AudioRules.Overall)) return true;
                    if (this.AudioRules.Specific != null)
                    {
                        foreach (var item in this.AudioRules.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.VfxRules != null)
                {
                    if (eval(this.VfxRules.Overall)) return true;
                    if (this.VfxRules.Specific != null)
                    {
                        foreach (var item in this.VfxRules.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.FrictionRules != null)
                {
                    if (eval(this.FrictionRules.Overall)) return true;
                    if (this.FrictionRules.Specific != null)
                    {
                        foreach (var item in this.FrictionRules.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new VehicleMaterialTable.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.MaterialID = eval(this.MaterialID);
                if (AudioRules != null)
                {
                    obj.AudioRules = new MaskItem<R, IEnumerable<MaskItemIndexed<R, VehicleAudioRule.Mask<R>?>>?>(eval(this.AudioRules.Overall), Enumerable.Empty<MaskItemIndexed<R, VehicleAudioRule.Mask<R>?>>());
                    if (AudioRules.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, VehicleAudioRule.Mask<R>?>>();
                        obj.AudioRules.Specific = l;
                        foreach (var item in AudioRules.Specific)
                        {
                            MaskItemIndexed<R, VehicleAudioRule.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, VehicleAudioRule.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (VfxRules != null)
                {
                    obj.VfxRules = new MaskItem<R, IEnumerable<MaskItemIndexed<R, VehicleVfxRule.Mask<R>?>>?>(eval(this.VfxRules.Overall), Enumerable.Empty<MaskItemIndexed<R, VehicleVfxRule.Mask<R>?>>());
                    if (VfxRules.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, VehicleVfxRule.Mask<R>?>>();
                        obj.VfxRules.Specific = l;
                        foreach (var item in VfxRules.Specific)
                        {
                            MaskItemIndexed<R, VehicleVfxRule.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, VehicleVfxRule.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (FrictionRules != null)
                {
                    obj.FrictionRules = new MaskItem<R, IEnumerable<MaskItemIndexed<R, VehicleFrictionRule.Mask<R>?>>?>(eval(this.FrictionRules.Overall), Enumerable.Empty<MaskItemIndexed<R, VehicleFrictionRule.Mask<R>?>>());
                    if (FrictionRules.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, VehicleFrictionRule.Mask<R>?>>();
                        obj.FrictionRules.Specific = l;
                        foreach (var item in FrictionRules.Specific)
                        {
                            MaskItemIndexed<R, VehicleFrictionRule.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, VehicleFrictionRule.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(VehicleMaterialTable.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, VehicleMaterialTable.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(VehicleMaterialTable.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.MaterialID ?? true)
                    {
                        sb.AppendItem(MaterialID, "MaterialID");
                    }
                    if ((printMask?.AudioRules?.Overall ?? true)
                        && AudioRules is {} AudioRulesItem)
                    {
                        sb.AppendLine("AudioRules =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(AudioRulesItem.Overall);
                            if (AudioRulesItem.Specific != null)
                            {
                                foreach (var subItem in AudioRulesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.VfxRules?.Overall ?? true)
                        && VfxRules is {} VfxRulesItem)
                    {
                        sb.AppendLine("VfxRules =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(VfxRulesItem.Overall);
                            if (VfxRulesItem.Specific != null)
                            {
                                foreach (var subItem in VfxRulesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.FrictionRules?.Overall ?? true)
                        && FrictionRules is {} FrictionRulesItem)
                    {
                        sb.AppendLine("FrictionRules =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(FrictionRulesItem.Overall);
                            if (FrictionRulesItem.Specific != null)
                            {
                                foreach (var subItem in FrictionRulesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? MaterialID;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, VehicleAudioRule.ErrorMask?>>?>? AudioRules;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, VehicleVfxRule.ErrorMask?>>?>? VfxRules;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, VehicleFrictionRule.ErrorMask?>>?>? FrictionRules;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                VehicleMaterialTable_FieldIndex enu = (VehicleMaterialTable_FieldIndex)index;
                switch (enu)
                {
                    case VehicleMaterialTable_FieldIndex.MaterialID:
                        return MaterialID;
                    case VehicleMaterialTable_FieldIndex.AudioRules:
                        return AudioRules;
                    case VehicleMaterialTable_FieldIndex.VfxRules:
                        return VfxRules;
                    case VehicleMaterialTable_FieldIndex.FrictionRules:
                        return FrictionRules;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                VehicleMaterialTable_FieldIndex enu = (VehicleMaterialTable_FieldIndex)index;
                switch (enu)
                {
                    case VehicleMaterialTable_FieldIndex.MaterialID:
                        this.MaterialID = ex;
                        break;
                    case VehicleMaterialTable_FieldIndex.AudioRules:
                        this.AudioRules = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, VehicleAudioRule.ErrorMask?>>?>(ex, null);
                        break;
                    case VehicleMaterialTable_FieldIndex.VfxRules:
                        this.VfxRules = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, VehicleVfxRule.ErrorMask?>>?>(ex, null);
                        break;
                    case VehicleMaterialTable_FieldIndex.FrictionRules:
                        this.FrictionRules = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, VehicleFrictionRule.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                VehicleMaterialTable_FieldIndex enu = (VehicleMaterialTable_FieldIndex)index;
                switch (enu)
                {
                    case VehicleMaterialTable_FieldIndex.MaterialID:
                        this.MaterialID = (Exception?)obj;
                        break;
                    case VehicleMaterialTable_FieldIndex.AudioRules:
                        this.AudioRules = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, VehicleAudioRule.ErrorMask?>>?>)obj;
                        break;
                    case VehicleMaterialTable_FieldIndex.VfxRules:
                        this.VfxRules = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, VehicleVfxRule.ErrorMask?>>?>)obj;
                        break;
                    case VehicleMaterialTable_FieldIndex.FrictionRules:
                        this.FrictionRules = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, VehicleFrictionRule.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (MaterialID != null) return true;
                if (AudioRules != null) return true;
                if (VfxRules != null) return true;
                if (FrictionRules != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(MaterialID, "MaterialID");
                }
                if (AudioRules is {} AudioRulesItem)
                {
                    sb.AppendLine("AudioRules =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(AudioRulesItem.Overall);
                        if (AudioRulesItem.Specific != null)
                        {
                            foreach (var subItem in AudioRulesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (VfxRules is {} VfxRulesItem)
                {
                    sb.AppendLine("VfxRules =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(VfxRulesItem.Overall);
                        if (VfxRulesItem.Specific != null)
                        {
                            foreach (var subItem in VfxRulesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (FrictionRules is {} FrictionRulesItem)
                {
                    sb.AppendLine("FrictionRules =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(FrictionRulesItem.Overall);
                        if (FrictionRulesItem.Specific != null)
                        {
                            foreach (var subItem in FrictionRulesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.MaterialID = this.MaterialID.Combine(rhs.MaterialID);
                ret.AudioRules = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, VehicleAudioRule.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.AudioRules?.Overall, rhs.AudioRules?.Overall), Noggog.ExceptionExt.Combine(this.AudioRules?.Specific, rhs.AudioRules?.Specific));
                ret.VfxRules = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, VehicleVfxRule.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.VfxRules?.Overall, rhs.VfxRules?.Overall), Noggog.ExceptionExt.Combine(this.VfxRules?.Specific, rhs.VfxRules?.Specific));
                ret.FrictionRules = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, VehicleFrictionRule.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.FrictionRules?.Overall, rhs.FrictionRules?.Overall), Noggog.ExceptionExt.Combine(this.FrictionRules?.Specific, rhs.FrictionRules?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool MaterialID;
            public VehicleAudioRule.TranslationMask? AudioRules;
            public VehicleVfxRule.TranslationMask? VfxRules;
            public VehicleFrictionRule.TranslationMask? FrictionRules;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.MaterialID = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((MaterialID, null));
                ret.Add((AudioRules == null ? DefaultOn : !AudioRules.GetCrystal().CopyNothing, AudioRules?.GetCrystal()));
                ret.Add((VfxRules == null ? DefaultOn : !VfxRules.GetCrystal().CopyNothing, VfxRules?.GetCrystal()));
                ret.Add((FrictionRules == null ? DefaultOn : !FrictionRules.GetCrystal().CopyNothing, FrictionRules?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => VehicleMaterialTableCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => VehicleMaterialTableSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => VehicleMaterialTableBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((VehicleMaterialTableBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static VehicleMaterialTable CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new VehicleMaterialTable();
            ((VehicleMaterialTableSetterCommon)((IVehicleMaterialTableGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out VehicleMaterialTable item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((VehicleMaterialTableSetterCommon)((IVehicleMaterialTableGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static VehicleMaterialTable GetNew()
        {
            return new VehicleMaterialTable();
        }

    }
    #endregion

    #region Interface
    public partial interface IVehicleMaterialTable :
        IFormLinkContainer,
        ILoquiObjectSetter<IVehicleMaterialTable>,
        IVehicleMaterialTableGetter
    {
        new Guid MaterialID { get; set; }
        new ExtendedList<VehicleAudioRule> AudioRules { get; }
        new ExtendedList<VehicleVfxRule> VfxRules { get; }
        new ExtendedList<VehicleFrictionRule> FrictionRules { get; }
    }

    public partial interface IVehicleMaterialTableGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IVehicleMaterialTableGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => VehicleMaterialTable_Registration.Instance;
        Guid MaterialID { get; }
        IReadOnlyList<IVehicleAudioRuleGetter> AudioRules { get; }
        IReadOnlyList<IVehicleVfxRuleGetter> VfxRules { get; }
        IReadOnlyList<IVehicleFrictionRuleGetter> FrictionRules { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class VehicleMaterialTableMixIn
    {
        public static void Clear(this IVehicleMaterialTable item)
        {
            ((VehicleMaterialTableSetterCommon)((IVehicleMaterialTableGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static VehicleMaterialTable.Mask<bool> GetEqualsMask(
            this IVehicleMaterialTableGetter item,
            IVehicleMaterialTableGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((VehicleMaterialTableCommon)((IVehicleMaterialTableGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IVehicleMaterialTableGetter item,
            string? name = null,
            VehicleMaterialTable.Mask<bool>? printMask = null)
        {
            return ((VehicleMaterialTableCommon)((IVehicleMaterialTableGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IVehicleMaterialTableGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            VehicleMaterialTable.Mask<bool>? printMask = null)
        {
            ((VehicleMaterialTableCommon)((IVehicleMaterialTableGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IVehicleMaterialTableGetter item,
            IVehicleMaterialTableGetter rhs,
            VehicleMaterialTable.TranslationMask? equalsMask = null)
        {
            return ((VehicleMaterialTableCommon)((IVehicleMaterialTableGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IVehicleMaterialTable lhs,
            IVehicleMaterialTableGetter rhs)
        {
            ((VehicleMaterialTableSetterTranslationCommon)((IVehicleMaterialTableGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IVehicleMaterialTable lhs,
            IVehicleMaterialTableGetter rhs,
            VehicleMaterialTable.TranslationMask? copyMask = null)
        {
            ((VehicleMaterialTableSetterTranslationCommon)((IVehicleMaterialTableGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IVehicleMaterialTable lhs,
            IVehicleMaterialTableGetter rhs,
            out VehicleMaterialTable.ErrorMask errorMask,
            VehicleMaterialTable.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((VehicleMaterialTableSetterTranslationCommon)((IVehicleMaterialTableGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = VehicleMaterialTable.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IVehicleMaterialTable lhs,
            IVehicleMaterialTableGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((VehicleMaterialTableSetterTranslationCommon)((IVehicleMaterialTableGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static VehicleMaterialTable DeepCopy(
            this IVehicleMaterialTableGetter item,
            VehicleMaterialTable.TranslationMask? copyMask = null)
        {
            return ((VehicleMaterialTableSetterTranslationCommon)((IVehicleMaterialTableGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static VehicleMaterialTable DeepCopy(
            this IVehicleMaterialTableGetter item,
            out VehicleMaterialTable.ErrorMask errorMask,
            VehicleMaterialTable.TranslationMask? copyMask = null)
        {
            return ((VehicleMaterialTableSetterTranslationCommon)((IVehicleMaterialTableGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static VehicleMaterialTable DeepCopy(
            this IVehicleMaterialTableGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((VehicleMaterialTableSetterTranslationCommon)((IVehicleMaterialTableGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IVehicleMaterialTable item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((VehicleMaterialTableSetterCommon)((IVehicleMaterialTableGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum VehicleMaterialTable_FieldIndex
    {
        MaterialID = 0,
        AudioRules = 1,
        VfxRules = 2,
        FrictionRules = 3,
    }
    #endregion

    #region Registration
    internal partial class VehicleMaterialTable_Registration : ILoquiRegistration
    {
        public static readonly VehicleMaterialTable_Registration Instance = new VehicleMaterialTable_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(VehicleMaterialTable.Mask<>);

        public static readonly Type ErrorMaskType = typeof(VehicleMaterialTable.ErrorMask);

        public static readonly Type ClassType = typeof(VehicleMaterialTable);

        public static readonly Type GetterType = typeof(IVehicleMaterialTableGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IVehicleMaterialTable);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.VehicleMaterialTable";

        public const string Name = "VehicleMaterialTable";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.VMRT;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.VMRT);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(VehicleMaterialTableBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class VehicleMaterialTableSetterCommon
    {
        public static readonly VehicleMaterialTableSetterCommon Instance = new VehicleMaterialTableSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IVehicleMaterialTable item)
        {
            ClearPartial();
            item.MaterialID = default(Guid);
            item.AudioRules.Clear();
            item.VfxRules.Clear();
            item.FrictionRules.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IVehicleMaterialTable obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.VfxRules.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IVehicleMaterialTable item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.VMRT),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: VehicleMaterialTableBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class VehicleMaterialTableCommon
    {
        public static readonly VehicleMaterialTableCommon Instance = new VehicleMaterialTableCommon();

        public VehicleMaterialTable.Mask<bool> GetEqualsMask(
            IVehicleMaterialTableGetter item,
            IVehicleMaterialTableGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new VehicleMaterialTable.Mask<bool>(false);
            ((VehicleMaterialTableCommon)((IVehicleMaterialTableGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IVehicleMaterialTableGetter item,
            IVehicleMaterialTableGetter rhs,
            VehicleMaterialTable.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.MaterialID = item.MaterialID == rhs.MaterialID;
            ret.AudioRules = item.AudioRules.CollectionEqualsHelper(
                rhs.AudioRules,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.VfxRules = item.VfxRules.CollectionEqualsHelper(
                rhs.VfxRules,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.FrictionRules = item.FrictionRules.CollectionEqualsHelper(
                rhs.FrictionRules,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string Print(
            IVehicleMaterialTableGetter item,
            string? name = null,
            VehicleMaterialTable.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IVehicleMaterialTableGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            VehicleMaterialTable.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"VehicleMaterialTable =>");
            }
            else
            {
                sb.AppendLine($"{name} (VehicleMaterialTable) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IVehicleMaterialTableGetter item,
            StructuredStringBuilder sb,
            VehicleMaterialTable.Mask<bool>? printMask = null)
        {
            if (printMask?.MaterialID ?? true)
            {
                sb.AppendItem(item.MaterialID, "MaterialID");
            }
            if (printMask?.AudioRules?.Overall ?? true)
            {
                sb.AppendLine("AudioRules =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.AudioRules)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.VfxRules?.Overall ?? true)
            {
                sb.AppendLine("VfxRules =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.VfxRules)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.FrictionRules?.Overall ?? true)
            {
                sb.AppendLine("FrictionRules =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.FrictionRules)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IVehicleMaterialTableGetter? lhs,
            IVehicleMaterialTableGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)VehicleMaterialTable_FieldIndex.MaterialID) ?? true))
            {
                if (lhs.MaterialID != rhs.MaterialID) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleMaterialTable_FieldIndex.AudioRules) ?? true))
            {
                if (!lhs.AudioRules.SequenceEqual(rhs.AudioRules, (l, r) => ((VehicleAudioRuleCommon)((IVehicleAudioRuleGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)VehicleMaterialTable_FieldIndex.AudioRules)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleMaterialTable_FieldIndex.VfxRules) ?? true))
            {
                if (!lhs.VfxRules.SequenceEqual(rhs.VfxRules, (l, r) => ((VehicleVfxRuleCommon)((IVehicleVfxRuleGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)VehicleMaterialTable_FieldIndex.VfxRules)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleMaterialTable_FieldIndex.FrictionRules) ?? true))
            {
                if (!lhs.FrictionRules.SequenceEqual(rhs.FrictionRules, (l, r) => ((VehicleFrictionRuleCommon)((IVehicleFrictionRuleGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)VehicleMaterialTable_FieldIndex.FrictionRules)))) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IVehicleMaterialTableGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.MaterialID);
            hash.Add(item.AudioRules);
            hash.Add(item.VfxRules);
            hash.Add(item.FrictionRules);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return VehicleMaterialTable.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IVehicleMaterialTableGetter obj)
        {
            foreach (var item in obj.VfxRules.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class VehicleMaterialTableSetterTranslationCommon
    {
        public static readonly VehicleMaterialTableSetterTranslationCommon Instance = new VehicleMaterialTableSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IVehicleMaterialTable item,
            IVehicleMaterialTableGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)VehicleMaterialTable_FieldIndex.MaterialID) ?? true))
            {
                item.MaterialID = rhs.MaterialID;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleMaterialTable_FieldIndex.AudioRules) ?? true))
            {
                errorMask?.PushIndex((int)VehicleMaterialTable_FieldIndex.AudioRules);
                try
                {
                    item.AudioRules.SetTo(
                        rhs.AudioRules
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleMaterialTable_FieldIndex.VfxRules) ?? true))
            {
                errorMask?.PushIndex((int)VehicleMaterialTable_FieldIndex.VfxRules);
                try
                {
                    item.VfxRules.SetTo(
                        rhs.VfxRules
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleMaterialTable_FieldIndex.FrictionRules) ?? true))
            {
                errorMask?.PushIndex((int)VehicleMaterialTable_FieldIndex.FrictionRules);
                try
                {
                    item.FrictionRules.SetTo(
                        rhs.FrictionRules
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IVehicleMaterialTable item,
            IVehicleMaterialTableGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public VehicleMaterialTable DeepCopy(
            IVehicleMaterialTableGetter item,
            VehicleMaterialTable.TranslationMask? copyMask = null)
        {
            VehicleMaterialTable ret = (VehicleMaterialTable)((VehicleMaterialTableCommon)((IVehicleMaterialTableGetter)item).CommonInstance()!).GetNew();
            ((VehicleMaterialTableSetterTranslationCommon)((IVehicleMaterialTableGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public VehicleMaterialTable DeepCopy(
            IVehicleMaterialTableGetter item,
            out VehicleMaterialTable.ErrorMask errorMask,
            VehicleMaterialTable.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            VehicleMaterialTable ret = (VehicleMaterialTable)((VehicleMaterialTableCommon)((IVehicleMaterialTableGetter)item).CommonInstance()!).GetNew();
            ((VehicleMaterialTableSetterTranslationCommon)((IVehicleMaterialTableGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = VehicleMaterialTable.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public VehicleMaterialTable DeepCopy(
            IVehicleMaterialTableGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            VehicleMaterialTable ret = (VehicleMaterialTable)((VehicleMaterialTableCommon)((IVehicleMaterialTableGetter)item).CommonInstance()!).GetNew();
            ((VehicleMaterialTableSetterTranslationCommon)((IVehicleMaterialTableGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class VehicleMaterialTable
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => VehicleMaterialTable_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => VehicleMaterialTable_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => VehicleMaterialTableCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return VehicleMaterialTableSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => VehicleMaterialTableSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IVehicleMaterialTableGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IVehicleMaterialTableGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IVehicleMaterialTableGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class VehicleMaterialTableBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly VehicleMaterialTableBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IVehicleMaterialTableGetter item,
            MutagenWriter writer)
        {
            GuidBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MaterialID);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IVehicleAudioRuleGetter>.Instance.Write(
                writer: writer,
                items: item.AudioRules,
                countLengthLength: 8,
                transl: (MutagenWriter subWriter, IVehicleAudioRuleGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((VehicleAudioRuleBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IVehicleVfxRuleGetter>.Instance.Write(
                writer: writer,
                items: item.VfxRules,
                countLengthLength: 8,
                transl: (MutagenWriter subWriter, IVehicleVfxRuleGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((VehicleVfxRuleBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IVehicleFrictionRuleGetter>.Instance.Write(
                writer: writer,
                items: item.FrictionRules,
                countLengthLength: 8,
                transl: (MutagenWriter subWriter, IVehicleFrictionRuleGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((VehicleFrictionRuleBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IVehicleMaterialTableGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.VMRT),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IVehicleMaterialTableGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class VehicleMaterialTableBinaryCreateTranslation
    {
        public static readonly VehicleMaterialTableBinaryCreateTranslation Instance = new VehicleMaterialTableBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IVehicleMaterialTable item,
            MutagenFrame frame)
        {
            item.MaterialID = GuidBinaryTranslation.Instance.Parse(reader: frame);
            item.AudioRules.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<VehicleAudioRule>.Instance.Parse(
                    amount: checked((int)frame.ReadUInt64()),
                    reader: frame,
                    transl: VehicleAudioRule.TryCreateFromBinary));
            item.VfxRules.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<VehicleVfxRule>.Instance.Parse(
                    amount: checked((int)frame.ReadUInt64()),
                    reader: frame,
                    transl: VehicleVfxRule.TryCreateFromBinary));
            item.FrictionRules.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<VehicleFrictionRule>.Instance.Parse(
                    amount: checked((int)frame.ReadUInt64()),
                    reader: frame,
                    transl: VehicleFrictionRule.TryCreateFromBinary));
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class VehicleMaterialTableBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IVehicleMaterialTableGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((VehicleMaterialTableBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class VehicleMaterialTableBinaryOverlay :
        PluginBinaryOverlay,
        IVehicleMaterialTableGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => VehicleMaterialTable_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => VehicleMaterialTable_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => VehicleMaterialTableCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => VehicleMaterialTableSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IVehicleMaterialTableGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IVehicleMaterialTableGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IVehicleMaterialTableGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => VehicleMaterialTableCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => VehicleMaterialTableBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((VehicleMaterialTableBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Guid MaterialID => new Guid(_structData.Slice(0x0, 0x10).Slice(0, 16));
        #region AudioRules
        public IReadOnlyList<IVehicleAudioRuleGetter> AudioRules { get; private set; } = null!;
        protected int AudioRulesEndingPos;
        #endregion
        #region VfxRules
        public IReadOnlyList<IVehicleVfxRuleGetter> VfxRules { get; private set; } = null!;
        protected int VfxRulesEndingPos;
        #endregion
        #region FrictionRules
        public IReadOnlyList<IVehicleFrictionRuleGetter> FrictionRules { get; private set; } = null!;
        protected int FrictionRulesEndingPos;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected VehicleMaterialTableBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static void VehicleMaterialTableParseEndingPositions(
            VehicleMaterialTableBinaryOverlay ret,
            BinaryOverlayFactoryPackage package)
        {
            {
                var tempStream = new OverlayStream(ret._structData, package)
                {
                    Position = 0x10
                };
                ret.AudioRules = BinaryOverlayList.EagerFactoryByPrependedCount(tempStream, package, 8, (s, p) => VehicleAudioRuleBinaryOverlay.VehicleAudioRuleFactory(s, p));
                ret.AudioRulesEndingPos = tempStream.Position;
            }
            {
                var tempStream = new OverlayStream(ret._structData, package)
                {
                    Position = ret.AudioRulesEndingPos
                };
                ret.VfxRules = BinaryOverlayList.EagerFactoryByPrependedCount(tempStream, package, 8, (s, p) => VehicleVfxRuleBinaryOverlay.VehicleVfxRuleFactory(s, p));
                ret.VfxRulesEndingPos = tempStream.Position;
            }
            {
                var tempStream = new OverlayStream(ret._structData, package)
                {
                    Position = ret.VfxRulesEndingPos
                };
                ret.FrictionRules = BinaryOverlayList.EagerFactoryByPrependedCount(tempStream, package, 8, (s, p) => VehicleFrictionRuleBinaryOverlay.VehicleFrictionRuleFactory(s, p));
                ret.FrictionRulesEndingPos = tempStream.Position;
            }
        }

        public static IVehicleMaterialTableGetter VehicleMaterialTableFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new VehicleMaterialTableBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            VehicleMaterialTableParseEndingPositions(ret, package);
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IVehicleMaterialTableGetter VehicleMaterialTableFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return VehicleMaterialTableFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            VehicleMaterialTableMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IVehicleMaterialTableGetter rhs) return false;
            return ((VehicleMaterialTableCommon)((IVehicleMaterialTableGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IVehicleMaterialTableGetter? obj)
        {
            return ((VehicleMaterialTableCommon)((IVehicleMaterialTableGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((VehicleMaterialTableCommon)((IVehicleMaterialTableGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

