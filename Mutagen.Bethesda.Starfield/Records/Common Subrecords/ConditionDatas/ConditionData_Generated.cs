/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    /// <summary>
    /// Implemented by: [UnknownConditionData, GetEventDataConditionData, GetWantBlockingConditionData, GetDistanceConditionData, GetLockedConditionData, GetPosConditionData, GetAngleConditionData, GetStartingPosConditionData, GetStartingAngleConditionData, GetSecondsPassedConditionData, GetValueConditionData, GetCurrentTimeConditionData, GetScaleConditionData, IsMovingConditionData, IsTurningConditionData, GetLineOfSightConditionData, GetInSameCellConditionData, GetDisabledConditionData, MenuPausedConditionData, GetCameraShipSizeConditionData, GetDiseaseConditionData, GetClothingValueConditionData, SameFactionConditionData, SameRaceConditionData, SameSexConditionData, GetDetectedConditionData, GetDeadConditionData, GetItemCountConditionData, GetGoldConditionData, GetSleepingConditionData, GetTalkedToPCConditionData, GetQuestRunningConditionData, GetStageConditionData, GetStageDoneConditionData, GetFactionRankDifferenceConditionData, GetAlarmedConditionData, IsRainingConditionData, GetAttackedConditionData, GetIsCreatureConditionData, GetLockLevelConditionData, GetShouldAttackConditionData, GetInCellConditionData, GetIsClassConditionData, GetIsRaceConditionData, GetIsSexConditionData, GetInFactionConditionData, GetIsIDConditionData, GetFactionRankConditionData, GetGlobalValueConditionData, IsSnowingConditionData, GetRandomPercentConditionData, WouldBeStealingConditionData, GetLevelConditionData, IsRotatingConditionData, GetDeadCountConditionData, GetIsAlertedConditionData, GetPlayerControlsDisabledConditionData, GetHeadingAngleConditionData, IsWeaponMagicOutConditionData, IsTorchOutConditionData, IsShieldOutConditionData, IsFacingUpConditionData, GetKnockedStateConditionData, GetWeaponAnimTypeConditionData, IsWeaponSkillTypeConditionData, GetDistanceFromCelestialBodyConditionData, IsWaitingConditionData, IsIdlePlayingConditionData, IsIntimidatedbyPlayerConditionData, IsPlayerInRegionConditionData, GetActorAggroRadiusViolatedConditionData, GetCrimeConditionData, IsGreetingPlayerConditionData, IsGuardConditionData, GetStaminaPercentageConditionData, HasBeenReadConditionData, GetDyingConditionData, GetSceneActionPercentConditionData, WouldRefuseCommandConditionData, SameFactionAsPCConditionData, SameRaceAsPCConditionData, SameSexAsPCConditionData, GetIsReferenceConditionData, IsTalkingConditionData, GetComponentCountConditionData, GetCurrentAIProcedureConditionData, GetTrespassWarningLevelConditionData, IsTrespassingConditionData, IsInMyOwnedCellConditionData, GetWindSpeedConditionData, GetCurrentWeatherPercentConditionData, GetIsCurrentWeatherConditionData, IsContinuingPackagePCNearConditionData, GetIsCrimeFactionConditionData, CanHaveFlamesConditionData, HasFlamesConditionData, GetOpenStateConditionData, GetSittingConditionData, GetIsCurrentPackageConditionData, IsCurrentFurnitureRefConditionData, IsCurrentFurnitureObjConditionData, GetDayOfWeekConditionData, GetTalkedToPCParamConditionData, IsPCSleepingConditionData, IsPCAMurdererConditionData, HasSameEditorLocationAsRefConditionData, HasSameEditorLocationAsRefAliasConditionData, GetEquippedConditionData, IsSwimmingConditionData, GetAmountSoldStolenConditionData, GetIgnoreCrimeConditionData, GetPCExpelledConditionData, GetPCFactionMurderConditionData, GetPCEnemyofFactionConditionData, GetPCFactionAttackConditionData, GetDestroyedConditionData, HasMagicEffectConditionData, GetDefaultOpenConditionData, IsSpellTargetConditionData, GetVATSModeConditionData, GetPersuasionNumberConditionData, GetVampireFeedConditionData, GetCannibalConditionData, GetIsClassDefaultConditionData, GetClassDefaultMatchConditionData, GetInCellParamConditionData, GetPlayerDialogueInputConditionData, GetVatsTargetHeightConditionData, GetIsGhostConditionData, GetUnconsciousConditionData, GetRestrainedConditionData, GetIsUsedItemConditionData, GetIsUsedItemTypeConditionData, IsScenePlayingConditionData, IsInDialogueWithPlayerConditionData, GetLocationExploredConditionData, GetIsPlayableRaceConditionData, GetOffersServicesNowConditionData, HasAssociationTypeConditionData, HasFamilyRelationshipConditionData, HasParentRelationshipConditionData, IsWarningAboutConditionData, IsWeaponOutConditionData, HasSpellConditionData, IsTimePassingConditionData, IsPleasantConditionData, IsCloudyConditionData, IsSmallBumpConditionData, AnimAction_EffectHasKeywordConditionData, GetBaseValueConditionData, IsOwnerConditionData, IsCellOwnerConditionData, IsHorseStolenConditionData, IsLeftUpConditionData, IsSneakingConditionData, IsRunningConditionData, GetFriendHitConditionData, IsInCombatConditionData, IsInInteriorConditionData, IsWaterObjectConditionData, GetPlayerActionConditionData, IsActorUsingATorchConditionData, IsXBoxConditionData, GetInWorldspaceConditionData, GetPCMiscStatConditionData, GetPairedAnimationConditionData, IsActorAVictimConditionData, GetTotalPersuasionNumberConditionData, GetIdleDoneOnceConditionData, GetNoRumorsConditionData, GetCombatStateConditionData, GetWithinPackageLocationConditionData, IsRidingMountConditionData, IsFleeingConditionData, IsInDangerousWaterConditionData, GetIgnoreFriendlyHitsConditionData, IsPlayersLastRiddenMountConditionData, IsActorConditionData, IsEssentialConditionData, IsPlayerMovingIntoNewSpaceConditionData, GetIsCurrentLocationConditionData, GetIsCurrentLocationAliasConditionData, GetTimeDeadConditionData, HasLinkedRefConditionData, IsChildConditionData, GetStolenItemValueNoCrimeConditionData, GetLastPlayerActionConditionData, IsPlayerActionActiveConditionData, IsTalkingActivatorActorConditionData, IsInListConditionData, GetStolenItemValueConditionData, GetCrimeGoldViolentConditionData, GetCrimeGoldNonviolentConditionData, IsOwnedByConditionData, GetCommandDistanceConditionData, GetCommandLocationDistanceConditionData, GetHitLocationConditionData, IsPC1stPersonConditionData, GetCauseofDeathConditionData, IsWeaponInListConditionData, IsBribedbyPlayerConditionData, GetRelationshipRankConditionData, GetStrongestEnemyHasKeywordConditionData, GetVATSValueConditionData, IsKillerConditionData, IsPlayerInShipTargetingModeConditionData, GetFactionCombatReactionConditionData, IsShipTargetInShipTargetingModeConditionData, ExistsConditionData, GetGroupMemberCountConditionData, GetGroupTargetCountConditionData, GetIsVoiceTypeConditionData, GetPlantedExplosiveConditionData, IsScenePackageRunningConditionData, GetHealthPercentageConditionData, GetActiveBoostDurationConditionData, GetIsObjectTypeConditionData, PlayerVisualDetectionConditionData, PlayerAudioDetectionConditionData, GetIsCreatureTypeConditionData, HasKeyConditionData, IsFurnitureEntryTypeConditionData, GetInCurrentLocationFormListConditionData, GetInZoneConditionData, GetVelocityConditionData, GetGraphVariableFloatConditionData, HasPerkConditionData, GetFactionRelationConditionData, IsLastIdlePlayedConditionData, GetPlayerTeammateConditionData, GetPlayerTeammateCountConditionData, GetActorCrimePlayerEnemyConditionData, GetCrimeGoldConditionData, IsPlayerGrabbedRefConditionData, GetKeywordItemCountConditionData, GetDestructionStageConditionData, GetIsAlignmentConditionData, IsProtectedConditionData, GetThreatRatioConditionData, GetIsUsedItemEquipTypeConditionData, GetPlayerActivatedConditionData, GetFullyEnabledActorsInHighConditionData, IsCarryableConditionData, GetConcussedConditionData, GetBiomeScanPercentConditionData, GetMapMarkerVisibleConditionData, PlayerKnowsConditionData, GetPermanentValueConditionData, EPMagic_EffectIsDetrimentalConditionData, CanPayCrimeGoldConditionData, GetDaysInJailConditionData, EPAlchemyGetMakingPoisonConditionData, EPAlchemyEffectHasKeywordConditionData, GetAllowWorldInteractionsConditionData, GetPerkRankConditionData, GetLastHitCriticalConditionData, LastCrippledConditionConditionData, HasSharedPowerGridConditionData, IsCombatTargetConditionData, GetVATSRightAreaFreeConditionData, GetVATSLeftAreaFreeConditionData, GetVATSBackAreaFreeConditionData, GetVATSFrontAreaFreeConditionData, GetIsLockBrokenConditionData, IsWindowsPCConditionData, GetVATSRightTargetVisibleConditionData, GetVATSLeftTargetVisibleConditionData, GetVATSBackTargetVisibleConditionData, GetVATSFrontTargetVisibleConditionData, IsInCriticalStageConditionData, GetXPForNextLevelConditionData, GetInfamyConditionData, GetInfamyViolentConditionData, GetInfamyNonViolentConditionData, GetTypeCommandPerformingConditionData, GetQuestCompletedConditionData, GetSpeechChallengeSuccessSceneConditionData, IsGoreDisabledConditionData, IsSceneActionCompleteConditionData, GetActorsInHighConditionData, HasLoaded3DConditionData, HasKeywordConditionData, HasRefTypeConditionData, LocationHasKeywordConditionData, LocationHasRefTypeConditionData, GetIsEditorLocationConditionData, GetIsAliasRefConditionData, GetIsEditorLocationAliasConditionData, IsSprintingConditionData, IsBlockingConditionData, HasEquippedSpellConditionData, GetCurrentCastingTypeConditionData, GetCurrentDeliveryTypeConditionData, GetAttackStateConditionData, IsCloserToAThanBConditionData, LevelMinusPCLevelConditionData, IsBleedingOutConditionData, GetRelativeAngleConditionData, GetMovementDirectionConditionData, IsInSceneConditionData, GetRefTypeDeadCountConditionData, GetRefTypeAliveCountConditionData, GetIsFlyingConditionData, IsCurrentSpellConditionData, SpellHasKeywordConditionData, GetEquippedItemTypeConditionData, GetLocationAliasExploredConditionData, GetLocationAliasRefTypeDeadCountConditionData, GetLocationAliasRefTypeAliveCountConditionData, IsWardStateConditionData, IsInSameCurrentLocationAsRefConditionData, IsInSameCurrentLocationAsAliasConditionData, LocationAliasIsLocationConditionData, GetKeywordDataForLocationConditionData, GetKeywordDataForAliasConditionData, LocationAliasHasKeywordConditionData, IsNullPackageDataConditionData, GetNumericPackageDataConditionData, IsPlayerRadioOnConditionData, GetPlayerRadioFrequencyConditionData, GetHighestRelationshipRankConditionData, GetLowestRelationshipRankConditionData, HasAssociationTypeAnyConditionData, HasFamilyRelationshipAnyConditionData, GetPathingTargetOffsetConditionData, GetPathingTargetAngleOffsetConditionData, GetPathingTargetSpeedConditionData, GetPathingTargetSpeedAngleConditionData, GetMovementSpeedConditionData, GetInContainerConditionData, IsLocationLoadedConditionData, IsLocationAliasLoadedConditionData, IsDualCastingConditionData, GetVMQuestVariableConditionData, GetCombatAudioDetectionConditionData, GetCombatVisualDetectionConditionData, IsCastingConditionData, GetFlyingStateConditionData, IsInFavorStateConditionData, HasTwoHandedWeaponEquippedConditionData, IsFurnitureExitTypeConditionData, IsInFriendStatewithPlayerConditionData, GetWithinDistanceConditionData, GetValuePercentConditionData, IsUniqueConditionData, GetLastBumpDirectionConditionData, GetInfoChallangeSuccessConditionData, GetIsInjuredConditionData, GetIsCrashLandRequestConditionData, GetIsHastyLandRequestConditionData, IsLinkedToConditionData, GetKeywordDataForCurrentLocationConditionData, GetInSharedCrimeFactionConditionData, GetBribeSuccessConditionData, GetIntimidateSuccessConditionData, GetArrestedStateConditionData, GetArrestingActorConditionData, HasVMScriptConditionData, GetVMScriptVariableConditionData, GetWorkshopResourceDamageConditionData, HasValidRumorTopicConditionData, IsAttackingConditionData, IsPowerAttackingConditionData, IsLastHostileActorConditionData, GetGraphVariableIntConditionData, GetDockerOrientationConditionData, ShouldAttackKillConditionData, GetActivationHeightConditionData, SSLPI_ReplacePayloadHasKeywordConditionData, WornHasKeywordConditionData, GetPathingCurrentSpeedConditionData, GetPathingCurrentSpeedAngleConditionData, GetWorkshopObjectCountConditionData, EPMagic_SpellHasKeywordConditionData, GetNoBleedoutRecoveryConditionData, EPMagic_SpellHasSkillConditionData, IsAttackTypeConditionData, IsAllowedToFlyConditionData, HasMagicEffectOrSpellKeywordConditionData, IsCommandedActorConditionData, IsStaggeredConditionData, IsRecoilingConditionData, HasScopeWeaponEquippedConditionData, IsPathingConditionData, GetShouldHelpConditionData, HasBoundWeaponEquippedConditionData, GetCombatTargetHasKeywordConditionData, GetCombatGroupMemberCountConditionData, IsIgnoringCombatConditionData, GetLightLevelConditionData, SpellHasCastingPerkConditionData, IsBeingRiddenConditionData, IsUndeadConditionData, GetRealHoursPassedConditionData, IsUnlockedDoorConditionData, IsHostileToActorConditionData, GetTargetHeightConditionData, IsPoisonConditionData, WornApparelHasKeywordCountConditionData, GetItemHealthPercentConditionData, EffectWasDualCastConditionData, GetKnockStateEnumConditionData, DoesNotExistConditionData, GetSpeechChallengeSuccessGameConditionData, GetActorStanceConditionData, SpeechScenarioHasKeywordConditionData, CanProduceForWorkshopConditionData, CanFlyHereConditionData, EPIsDamageTypeConditionData, IsCurrentSpeechChallengeObjectConditionData, GetActorGunStateConditionData, GetVoiceLineLengthConditionData, ObjectTemplateItem_HasKeywordConditionData, ObjectTemplateItem_HasUniqueKeywordConditionData, ObjectTemplateItem_GetLevelConditionData, MovementIdleMatchesConditionData, GetActionDataConditionData, GetActionDataShortConditionData, GetActionDataByteConditionData, GetActionDataFlagConditionData, ModdedItemHasKeywordConditionData, GetAngryWithPlayerConditionData, IsCameraUnderWaterConditionData, IsActorRefOwnerConditionData, HasActorRefOwnerConditionData, GetLoadedAmmoCountConditionData, IsTimeSpanSunriseConditionData, IsTimeSpanMorningConditionData, IsTimeSpanAfternoonConditionData, IsTimeSpanEveningConditionData, IsTimeSpanSunsetConditionData, IsTimeSpanNightConditionData, IsTimeSpanMidnightConditionData, IsTimeSpanAnyDayConditionData, IsTimeSpanAnyNightConditionData, CurrentFurnitureHasKeywordConditionData, GetWeaponEquipIndexConditionData, IsOverEncumberedConditionData, IsPackageRequestingBlockedIdlesConditionData, GetActionDataIntConditionData, GetVATSRightMinusLeftAreaFreeConditionData, GetInIronSightsConditionData, GetActorStaggerDirectionConditionData, GetActorStaggerMagnitudeConditionData, WornCoversBipedSlotConditionData, GetInventoryValueConditionData, IsPlayerInConversationConditionData, IsInDialogueCameraConditionData, IsMyDialogueTargetPlayerConditionData, IsMyDialogueTargetActorConditionData, GetMyDialogueTargetDistanceConditionData, IsSeatOccupiedConditionData, IsPlayerRidingConditionData, IsTryingEventCameraConditionData, UseLeftSideCameraConditionData, GetNoteTypeConditionData, LocationHasPlayerOwnedWorkshopConditionData, IsStartingActionConditionData, IsMidActionConditionData, IsWeaponChargeAttackConditionData, IsInWorkshopModeConditionData, IsWeaponChargingHoldAttackConditionData, IsEncounterAbovePlayerLevelConditionData, IsMeleeAttackingConditionData, GetVATSQueuedTargetsUniqueConditionData, GetCurrentLocationExploredConditionData, IsPoweredConditionData, GetTransmitterDistanceConditionData, GetCameraPlaybackTimeConditionData, IsInWaterConditionData, GetWithinActivateDistanceConditionData, IsUnderWaterConditionData, IsInSameSpaceConditionData, LocationAllowsResetConditionData, GetVATSBackRightAreaFreeConditionData, GetVATSBackLeftAreaFreeConditionData, GetVATSBackRightTargetVisibleConditionData, GetVATSBackLeftTargetVisibleConditionData, GetVATSTargetLimbVisibleConditionData, IsPlayerListeningConditionData, GetPathingRequestedQuickTurnConditionData, EPIsCalculatingBaseDamageConditionData, GetReanimatingConditionData, GetCombatDialogueDataIntConditionData, IsDockedConditionData, IsDockedWithConditionData, GetLastDialogueCameraHasKeywordConditionData, GetActionDataFormConditionData, IsInSpaceConditionData, GetSpaceshipConditionData, ShipContainsRefConditionData, IsInSpaceshipConditionData, ShipHasActorInPilotSeatConditionData, ActorPackageHasRandomConversationsFlagOnConditionData, GetActorInShipPilotSeatConditionData, IsSpaceshipConditionData, GetInAcousticSpaceConditionData, CurrentShipLandedConditionData, IsDockedAsChildConditionData, PlayerHailResponseConditionData, IsHerdLeaderConditionData, HasHerdLeaderConditionData, GetPlayerHomeSpaceShipConditionData, IsTrueForConditionFormConditionData, GetNumElementsInRefCollectionConditionData, GetCurrentWeatherHasKeywordConditionData, IsSnappedToConditionData, HasKeywordOnNodeConditionData, HasKeywordOnStackedConditionData, HasVisualDetectionConditionData, HasSoundDetectionConditionData, IsSuppressedConditionData, IsSpaceshipEngineDestroyedConditionData, IsLandedConditionData, IsSpaceshipShieldsDestroyedConditionData, IsSpaceshipGravDriveDestroyedConditionData, GetNumberOfSpaceshipWeaponsDestroyedConditionData, GetIsCurrentLocationExactConditionData, GetIsEditorLocationExactConditionData, IsInThreatBackdownConditionData, IsInsidePrimitiveConditionData, GetCameraActorCountConditionData, GetIsCurrentLocationAliasExactConditionData, IsJailInSystemConditionData, BodyHasKeywordConditionData, BiomeHasKeywordConditionData, SystemHasKeywordConditionData, GetDistanceFromLocationWithKeywordConditionData, GetPlanetVisitedConditionData, IsLocalDayConditionData, SpeechChallengePreviousSceneHasKeywordConditionData, GetBiomeMaskValueConditionData, BodyIsTypeConditionData, BodyIsAtmosphereTypeConditionData, BodyIsTemperatureTypeConditionData, GetBodyTemperatureConditionData, GetBodyPressureConditionData, GetBodyGravityConditionData, GetBodySurveyPercentConditionData, IsPlayerLoiteringConditionData, IsResearchCompleteConditionData, BodyIsPlanetTraitKnownConditionData, HasPerkCategoryConditionData, HasPerkSkillGroupConditionData, CountAquiredPerkRanksByTypeConditionData, IsScannedConditionData, IsScannableKeywordRevealedConditionData, IsMyVictimConditionData, GetResourceScarcityConditionData, CheckContrabandStatusConditionData, IsPlayerSpaceFarTravellingConditionData, IsPlayerSpaceFarTravelDepartureConditionData, IsPlayerSpaceFarTravelArrivalConditionData, BiomeHasWeatherConditionData, GetSystemSurveyPercentConditionData, SystemBodyHasKeywordConditionData, GetShipGroupThreatRatioConditionData, IsOnGrazingTerrainConditionData, GetDistanceGalacticParsecConditionData, GetDistanceGalacticMegaMeterConditionData, GetShipToShipGroupThreatRatioConditionData, GetGroupMembersInRadiusCountConditionData, GetShipPiracyValueConditionData, GetDistanceFromCelestialBodyAliasParsecsConditionData, GetDistanceFromCelestialBodyAliasMegaMetersConditionData, IsInsidePrimitiveTopAndBottomConditionData, GetPlayerBountyCrimeFactionConditionData, GetIsFloatingConditionData, LocationOrParentHasKeywordConditionData, IsCelestialBodyScannedConditionData, IsActorReactionInCooldownConditionData, BiomeSupportsCreatureConditionData, EPMagic_SpellHasMagicEffectConditionData, IsFacingActorConditionData, IsSameVoiceTypeConditionData, GetValueCurrentLocationConditionData, IsBoostPackActiveConditionData, GetTimeSinceLastBoostPackEndedConditionData, EPGetLastCombatHitCriticalConditionData, EPGetLastCombatHitKillConditionData, EPGetLastCombatHitGunBashConditionData, EPIsLastCombatHitLimbInCategoryConditionData, IsEditorLocationInsidePrimitiveConditionData, GetIsPronounConditionData, GetDistanceGalacticLightYearsConditionData, GetDistanceFromCelestialBodyAliasLightyearsConditionData, IsOnPlayerHomeSpaceShipConditionData, EPMagic_EffectHasKeywordConditionData, EPMagic_SpellIsConditionData, IsPlayerSteadyingWeaponConditionData, ResourceVeinHasKeywordConditionData, GetLastCombatHitActorConsecutiveHitsConditionData, GetCurrentAndLastWeatherHaveKeywordConditionData, IsPCEquippedWeaponNthAttackConditionData, GetWaterDepthConditionData, AreHostileActorsNearConditionData, GetPlayerGravityScaleConditionData, IsInSameGroupConditionData, IsBoostPackHoveringConditionData, GetUsedWeightCapacityConditionFunctionConditionData, BodyHasResourceConditionData, GetPCIsReloadingConditionData, ActorExposedToSkyConditionData, GetQuestStartingConditionData, BodyHasResourceWithKeywordConditionData, GetShipReactorClassConditionData, ShipReactorHasClassKeywordConditionData, EPIsResistanceActorValueConditionData]
    /// </summary>
    public abstract partial class ConditionData :
        IConditionData,
        IEquatable<IConditionDataGetter>,
        ILoquiObjectSetter<ConditionData>
    {
        #region Ctor
        public ConditionData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region RunOnType
        public Condition.RunOnType RunOnType { get; set; } = default(Condition.RunOnType);
        #endregion
        #region Reference
        private readonly IFormLink<IStarfieldMajorRecordGetter> _Reference = new FormLink<IStarfieldMajorRecordGetter>();
        public IFormLink<IStarfieldMajorRecordGetter> Reference
        {
            get => _Reference;
            set => _Reference.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IStarfieldMajorRecordGetter> IConditionDataGetter.Reference => this.Reference;
        #endregion
        #region Unknown3
        public static readonly Int32 Unknown3Default = -1;
        public Int32 Unknown3 { get; set; } = Unknown3Default;
        #endregion
        #region UseAliases
        public Boolean UseAliases { get; set; } = default(Boolean);
        #endregion
        #region UsePackageData
        public Boolean UsePackageData { get; set; } = default(Boolean);
        #endregion

        #region To String

        public virtual void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ConditionDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IConditionDataGetter rhs) return false;
            return ((ConditionDataCommon)((IConditionDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IConditionDataGetter? obj)
        {
            return ((ConditionDataCommon)((IConditionDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ConditionDataCommon)((IConditionDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.RunOnType = initialValue;
                this.Reference = initialValue;
                this.Unknown3 = initialValue;
                this.UseAliases = initialValue;
                this.UsePackageData = initialValue;
            }

            public Mask(
                TItem RunOnType,
                TItem Reference,
                TItem Unknown3,
                TItem UseAliases,
                TItem UsePackageData)
            {
                this.RunOnType = RunOnType;
                this.Reference = Reference;
                this.Unknown3 = Unknown3;
                this.UseAliases = UseAliases;
                this.UsePackageData = UsePackageData;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem RunOnType;
            public TItem Reference;
            public TItem Unknown3;
            public TItem UseAliases;
            public TItem UsePackageData;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.RunOnType, rhs.RunOnType)) return false;
                if (!object.Equals(this.Reference, rhs.Reference)) return false;
                if (!object.Equals(this.Unknown3, rhs.Unknown3)) return false;
                if (!object.Equals(this.UseAliases, rhs.UseAliases)) return false;
                if (!object.Equals(this.UsePackageData, rhs.UsePackageData)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.RunOnType);
                hash.Add(this.Reference);
                hash.Add(this.Unknown3);
                hash.Add(this.UseAliases);
                hash.Add(this.UsePackageData);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public virtual bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.RunOnType)) return false;
                if (!eval(this.Reference)) return false;
                if (!eval(this.Unknown3)) return false;
                if (!eval(this.UseAliases)) return false;
                if (!eval(this.UsePackageData)) return false;
                return true;
            }
            #endregion

            #region Any
            public virtual bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.RunOnType)) return true;
                if (eval(this.Reference)) return true;
                if (eval(this.Unknown3)) return true;
                if (eval(this.UseAliases)) return true;
                if (eval(this.UsePackageData)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ConditionData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.RunOnType = eval(this.RunOnType);
                obj.Reference = eval(this.Reference);
                obj.Unknown3 = eval(this.Unknown3);
                obj.UseAliases = eval(this.UseAliases);
                obj.UsePackageData = eval(this.UsePackageData);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(ConditionData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, ConditionData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(ConditionData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.RunOnType ?? true)
                    {
                        sb.AppendItem(RunOnType, "RunOnType");
                    }
                    if (printMask?.Reference ?? true)
                    {
                        sb.AppendItem(Reference, "Reference");
                    }
                    if (printMask?.Unknown3 ?? true)
                    {
                        sb.AppendItem(Unknown3, "Unknown3");
                    }
                    if (printMask?.UseAliases ?? true)
                    {
                        sb.AppendItem(UseAliases, "UseAliases");
                    }
                    if (printMask?.UsePackageData ?? true)
                    {
                        sb.AppendItem(UsePackageData, "UsePackageData");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? RunOnType;
            public Exception? Reference;
            public Exception? Unknown3;
            public Exception? UseAliases;
            public Exception? UsePackageData;
            #endregion

            #region IErrorMask
            public virtual object? GetNthMask(int index)
            {
                ConditionData_FieldIndex enu = (ConditionData_FieldIndex)index;
                switch (enu)
                {
                    case ConditionData_FieldIndex.RunOnType:
                        return RunOnType;
                    case ConditionData_FieldIndex.Reference:
                        return Reference;
                    case ConditionData_FieldIndex.Unknown3:
                        return Unknown3;
                    case ConditionData_FieldIndex.UseAliases:
                        return UseAliases;
                    case ConditionData_FieldIndex.UsePackageData:
                        return UsePackageData;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual void SetNthException(int index, Exception ex)
            {
                ConditionData_FieldIndex enu = (ConditionData_FieldIndex)index;
                switch (enu)
                {
                    case ConditionData_FieldIndex.RunOnType:
                        this.RunOnType = ex;
                        break;
                    case ConditionData_FieldIndex.Reference:
                        this.Reference = ex;
                        break;
                    case ConditionData_FieldIndex.Unknown3:
                        this.Unknown3 = ex;
                        break;
                    case ConditionData_FieldIndex.UseAliases:
                        this.UseAliases = ex;
                        break;
                    case ConditionData_FieldIndex.UsePackageData:
                        this.UsePackageData = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual void SetNthMask(int index, object obj)
            {
                ConditionData_FieldIndex enu = (ConditionData_FieldIndex)index;
                switch (enu)
                {
                    case ConditionData_FieldIndex.RunOnType:
                        this.RunOnType = (Exception?)obj;
                        break;
                    case ConditionData_FieldIndex.Reference:
                        this.Reference = (Exception?)obj;
                        break;
                    case ConditionData_FieldIndex.Unknown3:
                        this.Unknown3 = (Exception?)obj;
                        break;
                    case ConditionData_FieldIndex.UseAliases:
                        this.UseAliases = (Exception?)obj;
                        break;
                    case ConditionData_FieldIndex.UsePackageData:
                        this.UsePackageData = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual bool IsInError()
            {
                if (Overall != null) return true;
                if (RunOnType != null) return true;
                if (Reference != null) return true;
                if (Unknown3 != null) return true;
                if (UseAliases != null) return true;
                if (UsePackageData != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public virtual void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected virtual void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(RunOnType, "RunOnType");
                }
                {
                    sb.AppendItem(Reference, "Reference");
                }
                {
                    sb.AppendItem(Unknown3, "Unknown3");
                }
                {
                    sb.AppendItem(UseAliases, "UseAliases");
                }
                {
                    sb.AppendItem(UsePackageData, "UsePackageData");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.RunOnType = this.RunOnType.Combine(rhs.RunOnType);
                ret.Reference = this.Reference.Combine(rhs.Reference);
                ret.Unknown3 = this.Unknown3.Combine(rhs.Unknown3);
                ret.UseAliases = this.UseAliases.Combine(rhs.UseAliases);
                ret.UsePackageData = this.UsePackageData.Combine(rhs.UsePackageData);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool RunOnType;
            public bool Reference;
            public bool Unknown3;
            public bool UseAliases;
            public bool UsePackageData;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.RunOnType = defaultOn;
                this.Reference = defaultOn;
                this.Unknown3 = defaultOn;
                this.UseAliases = defaultOn;
                this.UsePackageData = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected virtual void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((RunOnType, null));
                ret.Add((Reference, null));
                ret.Add((Unknown3, null));
                ret.Add((UseAliases, null));
                ret.Add((UsePackageData, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public virtual IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ConditionDataCommon.Instance.EnumerateFormLinks(this);
        public virtual void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ConditionDataSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object BinaryWriteTranslator => ConditionDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ConditionDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ConditionDataSetterCommon)((IConditionDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ConditionData GetNew()
        {
            throw new ArgumentException("New called on an abstract class.");
        }

    }
    #endregion

    #region Interface
    /// <summary>
    /// Implemented by: [UnknownConditionData, GetEventDataConditionData, GetWantBlockingConditionData, GetDistanceConditionData, GetLockedConditionData, GetPosConditionData, GetAngleConditionData, GetStartingPosConditionData, GetStartingAngleConditionData, GetSecondsPassedConditionData, GetValueConditionData, GetCurrentTimeConditionData, GetScaleConditionData, IsMovingConditionData, IsTurningConditionData, GetLineOfSightConditionData, GetInSameCellConditionData, GetDisabledConditionData, MenuPausedConditionData, GetCameraShipSizeConditionData, GetDiseaseConditionData, GetClothingValueConditionData, SameFactionConditionData, SameRaceConditionData, SameSexConditionData, GetDetectedConditionData, GetDeadConditionData, GetItemCountConditionData, GetGoldConditionData, GetSleepingConditionData, GetTalkedToPCConditionData, GetQuestRunningConditionData, GetStageConditionData, GetStageDoneConditionData, GetFactionRankDifferenceConditionData, GetAlarmedConditionData, IsRainingConditionData, GetAttackedConditionData, GetIsCreatureConditionData, GetLockLevelConditionData, GetShouldAttackConditionData, GetInCellConditionData, GetIsClassConditionData, GetIsRaceConditionData, GetIsSexConditionData, GetInFactionConditionData, GetIsIDConditionData, GetFactionRankConditionData, GetGlobalValueConditionData, IsSnowingConditionData, GetRandomPercentConditionData, WouldBeStealingConditionData, GetLevelConditionData, IsRotatingConditionData, GetDeadCountConditionData, GetIsAlertedConditionData, GetPlayerControlsDisabledConditionData, GetHeadingAngleConditionData, IsWeaponMagicOutConditionData, IsTorchOutConditionData, IsShieldOutConditionData, IsFacingUpConditionData, GetKnockedStateConditionData, GetWeaponAnimTypeConditionData, IsWeaponSkillTypeConditionData, GetDistanceFromCelestialBodyConditionData, IsWaitingConditionData, IsIdlePlayingConditionData, IsIntimidatedbyPlayerConditionData, IsPlayerInRegionConditionData, GetActorAggroRadiusViolatedConditionData, GetCrimeConditionData, IsGreetingPlayerConditionData, IsGuardConditionData, GetStaminaPercentageConditionData, HasBeenReadConditionData, GetDyingConditionData, GetSceneActionPercentConditionData, WouldRefuseCommandConditionData, SameFactionAsPCConditionData, SameRaceAsPCConditionData, SameSexAsPCConditionData, GetIsReferenceConditionData, IsTalkingConditionData, GetComponentCountConditionData, GetCurrentAIProcedureConditionData, GetTrespassWarningLevelConditionData, IsTrespassingConditionData, IsInMyOwnedCellConditionData, GetWindSpeedConditionData, GetCurrentWeatherPercentConditionData, GetIsCurrentWeatherConditionData, IsContinuingPackagePCNearConditionData, GetIsCrimeFactionConditionData, CanHaveFlamesConditionData, HasFlamesConditionData, GetOpenStateConditionData, GetSittingConditionData, GetIsCurrentPackageConditionData, IsCurrentFurnitureRefConditionData, IsCurrentFurnitureObjConditionData, GetDayOfWeekConditionData, GetTalkedToPCParamConditionData, IsPCSleepingConditionData, IsPCAMurdererConditionData, HasSameEditorLocationAsRefConditionData, HasSameEditorLocationAsRefAliasConditionData, GetEquippedConditionData, IsSwimmingConditionData, GetAmountSoldStolenConditionData, GetIgnoreCrimeConditionData, GetPCExpelledConditionData, GetPCFactionMurderConditionData, GetPCEnemyofFactionConditionData, GetPCFactionAttackConditionData, GetDestroyedConditionData, HasMagicEffectConditionData, GetDefaultOpenConditionData, IsSpellTargetConditionData, GetVATSModeConditionData, GetPersuasionNumberConditionData, GetVampireFeedConditionData, GetCannibalConditionData, GetIsClassDefaultConditionData, GetClassDefaultMatchConditionData, GetInCellParamConditionData, GetPlayerDialogueInputConditionData, GetVatsTargetHeightConditionData, GetIsGhostConditionData, GetUnconsciousConditionData, GetRestrainedConditionData, GetIsUsedItemConditionData, GetIsUsedItemTypeConditionData, IsScenePlayingConditionData, IsInDialogueWithPlayerConditionData, GetLocationExploredConditionData, GetIsPlayableRaceConditionData, GetOffersServicesNowConditionData, HasAssociationTypeConditionData, HasFamilyRelationshipConditionData, HasParentRelationshipConditionData, IsWarningAboutConditionData, IsWeaponOutConditionData, HasSpellConditionData, IsTimePassingConditionData, IsPleasantConditionData, IsCloudyConditionData, IsSmallBumpConditionData, AnimAction_EffectHasKeywordConditionData, GetBaseValueConditionData, IsOwnerConditionData, IsCellOwnerConditionData, IsHorseStolenConditionData, IsLeftUpConditionData, IsSneakingConditionData, IsRunningConditionData, GetFriendHitConditionData, IsInCombatConditionData, IsInInteriorConditionData, IsWaterObjectConditionData, GetPlayerActionConditionData, IsActorUsingATorchConditionData, IsXBoxConditionData, GetInWorldspaceConditionData, GetPCMiscStatConditionData, GetPairedAnimationConditionData, IsActorAVictimConditionData, GetTotalPersuasionNumberConditionData, GetIdleDoneOnceConditionData, GetNoRumorsConditionData, GetCombatStateConditionData, GetWithinPackageLocationConditionData, IsRidingMountConditionData, IsFleeingConditionData, IsInDangerousWaterConditionData, GetIgnoreFriendlyHitsConditionData, IsPlayersLastRiddenMountConditionData, IsActorConditionData, IsEssentialConditionData, IsPlayerMovingIntoNewSpaceConditionData, GetIsCurrentLocationConditionData, GetIsCurrentLocationAliasConditionData, GetTimeDeadConditionData, HasLinkedRefConditionData, IsChildConditionData, GetStolenItemValueNoCrimeConditionData, GetLastPlayerActionConditionData, IsPlayerActionActiveConditionData, IsTalkingActivatorActorConditionData, IsInListConditionData, GetStolenItemValueConditionData, GetCrimeGoldViolentConditionData, GetCrimeGoldNonviolentConditionData, IsOwnedByConditionData, GetCommandDistanceConditionData, GetCommandLocationDistanceConditionData, GetHitLocationConditionData, IsPC1stPersonConditionData, GetCauseofDeathConditionData, IsWeaponInListConditionData, IsBribedbyPlayerConditionData, GetRelationshipRankConditionData, GetStrongestEnemyHasKeywordConditionData, GetVATSValueConditionData, IsKillerConditionData, IsPlayerInShipTargetingModeConditionData, GetFactionCombatReactionConditionData, IsShipTargetInShipTargetingModeConditionData, ExistsConditionData, GetGroupMemberCountConditionData, GetGroupTargetCountConditionData, GetIsVoiceTypeConditionData, GetPlantedExplosiveConditionData, IsScenePackageRunningConditionData, GetHealthPercentageConditionData, GetActiveBoostDurationConditionData, GetIsObjectTypeConditionData, PlayerVisualDetectionConditionData, PlayerAudioDetectionConditionData, GetIsCreatureTypeConditionData, HasKeyConditionData, IsFurnitureEntryTypeConditionData, GetInCurrentLocationFormListConditionData, GetInZoneConditionData, GetVelocityConditionData, GetGraphVariableFloatConditionData, HasPerkConditionData, GetFactionRelationConditionData, IsLastIdlePlayedConditionData, GetPlayerTeammateConditionData, GetPlayerTeammateCountConditionData, GetActorCrimePlayerEnemyConditionData, GetCrimeGoldConditionData, IsPlayerGrabbedRefConditionData, GetKeywordItemCountConditionData, GetDestructionStageConditionData, GetIsAlignmentConditionData, IsProtectedConditionData, GetThreatRatioConditionData, GetIsUsedItemEquipTypeConditionData, GetPlayerActivatedConditionData, GetFullyEnabledActorsInHighConditionData, IsCarryableConditionData, GetConcussedConditionData, GetBiomeScanPercentConditionData, GetMapMarkerVisibleConditionData, PlayerKnowsConditionData, GetPermanentValueConditionData, EPMagic_EffectIsDetrimentalConditionData, CanPayCrimeGoldConditionData, GetDaysInJailConditionData, EPAlchemyGetMakingPoisonConditionData, EPAlchemyEffectHasKeywordConditionData, GetAllowWorldInteractionsConditionData, GetPerkRankConditionData, GetLastHitCriticalConditionData, LastCrippledConditionConditionData, HasSharedPowerGridConditionData, IsCombatTargetConditionData, GetVATSRightAreaFreeConditionData, GetVATSLeftAreaFreeConditionData, GetVATSBackAreaFreeConditionData, GetVATSFrontAreaFreeConditionData, GetIsLockBrokenConditionData, IsWindowsPCConditionData, GetVATSRightTargetVisibleConditionData, GetVATSLeftTargetVisibleConditionData, GetVATSBackTargetVisibleConditionData, GetVATSFrontTargetVisibleConditionData, IsInCriticalStageConditionData, GetXPForNextLevelConditionData, GetInfamyConditionData, GetInfamyViolentConditionData, GetInfamyNonViolentConditionData, GetTypeCommandPerformingConditionData, GetQuestCompletedConditionData, GetSpeechChallengeSuccessSceneConditionData, IsGoreDisabledConditionData, IsSceneActionCompleteConditionData, GetActorsInHighConditionData, HasLoaded3DConditionData, HasKeywordConditionData, HasRefTypeConditionData, LocationHasKeywordConditionData, LocationHasRefTypeConditionData, GetIsEditorLocationConditionData, GetIsAliasRefConditionData, GetIsEditorLocationAliasConditionData, IsSprintingConditionData, IsBlockingConditionData, HasEquippedSpellConditionData, GetCurrentCastingTypeConditionData, GetCurrentDeliveryTypeConditionData, GetAttackStateConditionData, IsCloserToAThanBConditionData, LevelMinusPCLevelConditionData, IsBleedingOutConditionData, GetRelativeAngleConditionData, GetMovementDirectionConditionData, IsInSceneConditionData, GetRefTypeDeadCountConditionData, GetRefTypeAliveCountConditionData, GetIsFlyingConditionData, IsCurrentSpellConditionData, SpellHasKeywordConditionData, GetEquippedItemTypeConditionData, GetLocationAliasExploredConditionData, GetLocationAliasRefTypeDeadCountConditionData, GetLocationAliasRefTypeAliveCountConditionData, IsWardStateConditionData, IsInSameCurrentLocationAsRefConditionData, IsInSameCurrentLocationAsAliasConditionData, LocationAliasIsLocationConditionData, GetKeywordDataForLocationConditionData, GetKeywordDataForAliasConditionData, LocationAliasHasKeywordConditionData, IsNullPackageDataConditionData, GetNumericPackageDataConditionData, IsPlayerRadioOnConditionData, GetPlayerRadioFrequencyConditionData, GetHighestRelationshipRankConditionData, GetLowestRelationshipRankConditionData, HasAssociationTypeAnyConditionData, HasFamilyRelationshipAnyConditionData, GetPathingTargetOffsetConditionData, GetPathingTargetAngleOffsetConditionData, GetPathingTargetSpeedConditionData, GetPathingTargetSpeedAngleConditionData, GetMovementSpeedConditionData, GetInContainerConditionData, IsLocationLoadedConditionData, IsLocationAliasLoadedConditionData, IsDualCastingConditionData, GetVMQuestVariableConditionData, GetCombatAudioDetectionConditionData, GetCombatVisualDetectionConditionData, IsCastingConditionData, GetFlyingStateConditionData, IsInFavorStateConditionData, HasTwoHandedWeaponEquippedConditionData, IsFurnitureExitTypeConditionData, IsInFriendStatewithPlayerConditionData, GetWithinDistanceConditionData, GetValuePercentConditionData, IsUniqueConditionData, GetLastBumpDirectionConditionData, GetInfoChallangeSuccessConditionData, GetIsInjuredConditionData, GetIsCrashLandRequestConditionData, GetIsHastyLandRequestConditionData, IsLinkedToConditionData, GetKeywordDataForCurrentLocationConditionData, GetInSharedCrimeFactionConditionData, GetBribeSuccessConditionData, GetIntimidateSuccessConditionData, GetArrestedStateConditionData, GetArrestingActorConditionData, HasVMScriptConditionData, GetVMScriptVariableConditionData, GetWorkshopResourceDamageConditionData, HasValidRumorTopicConditionData, IsAttackingConditionData, IsPowerAttackingConditionData, IsLastHostileActorConditionData, GetGraphVariableIntConditionData, GetDockerOrientationConditionData, ShouldAttackKillConditionData, GetActivationHeightConditionData, SSLPI_ReplacePayloadHasKeywordConditionData, WornHasKeywordConditionData, GetPathingCurrentSpeedConditionData, GetPathingCurrentSpeedAngleConditionData, GetWorkshopObjectCountConditionData, EPMagic_SpellHasKeywordConditionData, GetNoBleedoutRecoveryConditionData, EPMagic_SpellHasSkillConditionData, IsAttackTypeConditionData, IsAllowedToFlyConditionData, HasMagicEffectOrSpellKeywordConditionData, IsCommandedActorConditionData, IsStaggeredConditionData, IsRecoilingConditionData, HasScopeWeaponEquippedConditionData, IsPathingConditionData, GetShouldHelpConditionData, HasBoundWeaponEquippedConditionData, GetCombatTargetHasKeywordConditionData, GetCombatGroupMemberCountConditionData, IsIgnoringCombatConditionData, GetLightLevelConditionData, SpellHasCastingPerkConditionData, IsBeingRiddenConditionData, IsUndeadConditionData, GetRealHoursPassedConditionData, IsUnlockedDoorConditionData, IsHostileToActorConditionData, GetTargetHeightConditionData, IsPoisonConditionData, WornApparelHasKeywordCountConditionData, GetItemHealthPercentConditionData, EffectWasDualCastConditionData, GetKnockStateEnumConditionData, DoesNotExistConditionData, GetSpeechChallengeSuccessGameConditionData, GetActorStanceConditionData, SpeechScenarioHasKeywordConditionData, CanProduceForWorkshopConditionData, CanFlyHereConditionData, EPIsDamageTypeConditionData, IsCurrentSpeechChallengeObjectConditionData, GetActorGunStateConditionData, GetVoiceLineLengthConditionData, ObjectTemplateItem_HasKeywordConditionData, ObjectTemplateItem_HasUniqueKeywordConditionData, ObjectTemplateItem_GetLevelConditionData, MovementIdleMatchesConditionData, GetActionDataConditionData, GetActionDataShortConditionData, GetActionDataByteConditionData, GetActionDataFlagConditionData, ModdedItemHasKeywordConditionData, GetAngryWithPlayerConditionData, IsCameraUnderWaterConditionData, IsActorRefOwnerConditionData, HasActorRefOwnerConditionData, GetLoadedAmmoCountConditionData, IsTimeSpanSunriseConditionData, IsTimeSpanMorningConditionData, IsTimeSpanAfternoonConditionData, IsTimeSpanEveningConditionData, IsTimeSpanSunsetConditionData, IsTimeSpanNightConditionData, IsTimeSpanMidnightConditionData, IsTimeSpanAnyDayConditionData, IsTimeSpanAnyNightConditionData, CurrentFurnitureHasKeywordConditionData, GetWeaponEquipIndexConditionData, IsOverEncumberedConditionData, IsPackageRequestingBlockedIdlesConditionData, GetActionDataIntConditionData, GetVATSRightMinusLeftAreaFreeConditionData, GetInIronSightsConditionData, GetActorStaggerDirectionConditionData, GetActorStaggerMagnitudeConditionData, WornCoversBipedSlotConditionData, GetInventoryValueConditionData, IsPlayerInConversationConditionData, IsInDialogueCameraConditionData, IsMyDialogueTargetPlayerConditionData, IsMyDialogueTargetActorConditionData, GetMyDialogueTargetDistanceConditionData, IsSeatOccupiedConditionData, IsPlayerRidingConditionData, IsTryingEventCameraConditionData, UseLeftSideCameraConditionData, GetNoteTypeConditionData, LocationHasPlayerOwnedWorkshopConditionData, IsStartingActionConditionData, IsMidActionConditionData, IsWeaponChargeAttackConditionData, IsInWorkshopModeConditionData, IsWeaponChargingHoldAttackConditionData, IsEncounterAbovePlayerLevelConditionData, IsMeleeAttackingConditionData, GetVATSQueuedTargetsUniqueConditionData, GetCurrentLocationExploredConditionData, IsPoweredConditionData, GetTransmitterDistanceConditionData, GetCameraPlaybackTimeConditionData, IsInWaterConditionData, GetWithinActivateDistanceConditionData, IsUnderWaterConditionData, IsInSameSpaceConditionData, LocationAllowsResetConditionData, GetVATSBackRightAreaFreeConditionData, GetVATSBackLeftAreaFreeConditionData, GetVATSBackRightTargetVisibleConditionData, GetVATSBackLeftTargetVisibleConditionData, GetVATSTargetLimbVisibleConditionData, IsPlayerListeningConditionData, GetPathingRequestedQuickTurnConditionData, EPIsCalculatingBaseDamageConditionData, GetReanimatingConditionData, GetCombatDialogueDataIntConditionData, IsDockedConditionData, IsDockedWithConditionData, GetLastDialogueCameraHasKeywordConditionData, GetActionDataFormConditionData, IsInSpaceConditionData, GetSpaceshipConditionData, ShipContainsRefConditionData, IsInSpaceshipConditionData, ShipHasActorInPilotSeatConditionData, ActorPackageHasRandomConversationsFlagOnConditionData, GetActorInShipPilotSeatConditionData, IsSpaceshipConditionData, GetInAcousticSpaceConditionData, CurrentShipLandedConditionData, IsDockedAsChildConditionData, PlayerHailResponseConditionData, IsHerdLeaderConditionData, HasHerdLeaderConditionData, GetPlayerHomeSpaceShipConditionData, IsTrueForConditionFormConditionData, GetNumElementsInRefCollectionConditionData, GetCurrentWeatherHasKeywordConditionData, IsSnappedToConditionData, HasKeywordOnNodeConditionData, HasKeywordOnStackedConditionData, HasVisualDetectionConditionData, HasSoundDetectionConditionData, IsSuppressedConditionData, IsSpaceshipEngineDestroyedConditionData, IsLandedConditionData, IsSpaceshipShieldsDestroyedConditionData, IsSpaceshipGravDriveDestroyedConditionData, GetNumberOfSpaceshipWeaponsDestroyedConditionData, GetIsCurrentLocationExactConditionData, GetIsEditorLocationExactConditionData, IsInThreatBackdownConditionData, IsInsidePrimitiveConditionData, GetCameraActorCountConditionData, GetIsCurrentLocationAliasExactConditionData, IsJailInSystemConditionData, BodyHasKeywordConditionData, BiomeHasKeywordConditionData, SystemHasKeywordConditionData, GetDistanceFromLocationWithKeywordConditionData, GetPlanetVisitedConditionData, IsLocalDayConditionData, SpeechChallengePreviousSceneHasKeywordConditionData, GetBiomeMaskValueConditionData, BodyIsTypeConditionData, BodyIsAtmosphereTypeConditionData, BodyIsTemperatureTypeConditionData, GetBodyTemperatureConditionData, GetBodyPressureConditionData, GetBodyGravityConditionData, GetBodySurveyPercentConditionData, IsPlayerLoiteringConditionData, IsResearchCompleteConditionData, BodyIsPlanetTraitKnownConditionData, HasPerkCategoryConditionData, HasPerkSkillGroupConditionData, CountAquiredPerkRanksByTypeConditionData, IsScannedConditionData, IsScannableKeywordRevealedConditionData, IsMyVictimConditionData, GetResourceScarcityConditionData, CheckContrabandStatusConditionData, IsPlayerSpaceFarTravellingConditionData, IsPlayerSpaceFarTravelDepartureConditionData, IsPlayerSpaceFarTravelArrivalConditionData, BiomeHasWeatherConditionData, GetSystemSurveyPercentConditionData, SystemBodyHasKeywordConditionData, GetShipGroupThreatRatioConditionData, IsOnGrazingTerrainConditionData, GetDistanceGalacticParsecConditionData, GetDistanceGalacticMegaMeterConditionData, GetShipToShipGroupThreatRatioConditionData, GetGroupMembersInRadiusCountConditionData, GetShipPiracyValueConditionData, GetDistanceFromCelestialBodyAliasParsecsConditionData, GetDistanceFromCelestialBodyAliasMegaMetersConditionData, IsInsidePrimitiveTopAndBottomConditionData, GetPlayerBountyCrimeFactionConditionData, GetIsFloatingConditionData, LocationOrParentHasKeywordConditionData, IsCelestialBodyScannedConditionData, IsActorReactionInCooldownConditionData, BiomeSupportsCreatureConditionData, EPMagic_SpellHasMagicEffectConditionData, IsFacingActorConditionData, IsSameVoiceTypeConditionData, GetValueCurrentLocationConditionData, IsBoostPackActiveConditionData, GetTimeSinceLastBoostPackEndedConditionData, EPGetLastCombatHitCriticalConditionData, EPGetLastCombatHitKillConditionData, EPGetLastCombatHitGunBashConditionData, EPIsLastCombatHitLimbInCategoryConditionData, IsEditorLocationInsidePrimitiveConditionData, GetIsPronounConditionData, GetDistanceGalacticLightYearsConditionData, GetDistanceFromCelestialBodyAliasLightyearsConditionData, IsOnPlayerHomeSpaceShipConditionData, EPMagic_EffectHasKeywordConditionData, EPMagic_SpellIsConditionData, IsPlayerSteadyingWeaponConditionData, ResourceVeinHasKeywordConditionData, GetLastCombatHitActorConsecutiveHitsConditionData, GetCurrentAndLastWeatherHaveKeywordConditionData, IsPCEquippedWeaponNthAttackConditionData, GetWaterDepthConditionData, AreHostileActorsNearConditionData, GetPlayerGravityScaleConditionData, IsInSameGroupConditionData, IsBoostPackHoveringConditionData, GetUsedWeightCapacityConditionFunctionConditionData, BodyHasResourceConditionData, GetPCIsReloadingConditionData, ActorExposedToSkyConditionData, GetQuestStartingConditionData, BodyHasResourceWithKeywordConditionData, GetShipReactorClassConditionData, ShipReactorHasClassKeywordConditionData, EPIsResistanceActorValueConditionData]
    /// </summary>
    public partial interface IConditionData :
        IConditionDataGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IConditionData>
    {
        new Condition.RunOnType RunOnType { get; set; }
        new IFormLink<IStarfieldMajorRecordGetter> Reference { get; set; }
        new Int32 Unknown3 { get; set; }
        new Boolean UseAliases { get; set; }
        new Boolean UsePackageData { get; set; }
    }

    /// <summary>
    /// Implemented by: [UnknownConditionData, GetEventDataConditionData, GetWantBlockingConditionData, GetDistanceConditionData, GetLockedConditionData, GetPosConditionData, GetAngleConditionData, GetStartingPosConditionData, GetStartingAngleConditionData, GetSecondsPassedConditionData, GetValueConditionData, GetCurrentTimeConditionData, GetScaleConditionData, IsMovingConditionData, IsTurningConditionData, GetLineOfSightConditionData, GetInSameCellConditionData, GetDisabledConditionData, MenuPausedConditionData, GetCameraShipSizeConditionData, GetDiseaseConditionData, GetClothingValueConditionData, SameFactionConditionData, SameRaceConditionData, SameSexConditionData, GetDetectedConditionData, GetDeadConditionData, GetItemCountConditionData, GetGoldConditionData, GetSleepingConditionData, GetTalkedToPCConditionData, GetQuestRunningConditionData, GetStageConditionData, GetStageDoneConditionData, GetFactionRankDifferenceConditionData, GetAlarmedConditionData, IsRainingConditionData, GetAttackedConditionData, GetIsCreatureConditionData, GetLockLevelConditionData, GetShouldAttackConditionData, GetInCellConditionData, GetIsClassConditionData, GetIsRaceConditionData, GetIsSexConditionData, GetInFactionConditionData, GetIsIDConditionData, GetFactionRankConditionData, GetGlobalValueConditionData, IsSnowingConditionData, GetRandomPercentConditionData, WouldBeStealingConditionData, GetLevelConditionData, IsRotatingConditionData, GetDeadCountConditionData, GetIsAlertedConditionData, GetPlayerControlsDisabledConditionData, GetHeadingAngleConditionData, IsWeaponMagicOutConditionData, IsTorchOutConditionData, IsShieldOutConditionData, IsFacingUpConditionData, GetKnockedStateConditionData, GetWeaponAnimTypeConditionData, IsWeaponSkillTypeConditionData, GetDistanceFromCelestialBodyConditionData, IsWaitingConditionData, IsIdlePlayingConditionData, IsIntimidatedbyPlayerConditionData, IsPlayerInRegionConditionData, GetActorAggroRadiusViolatedConditionData, GetCrimeConditionData, IsGreetingPlayerConditionData, IsGuardConditionData, GetStaminaPercentageConditionData, HasBeenReadConditionData, GetDyingConditionData, GetSceneActionPercentConditionData, WouldRefuseCommandConditionData, SameFactionAsPCConditionData, SameRaceAsPCConditionData, SameSexAsPCConditionData, GetIsReferenceConditionData, IsTalkingConditionData, GetComponentCountConditionData, GetCurrentAIProcedureConditionData, GetTrespassWarningLevelConditionData, IsTrespassingConditionData, IsInMyOwnedCellConditionData, GetWindSpeedConditionData, GetCurrentWeatherPercentConditionData, GetIsCurrentWeatherConditionData, IsContinuingPackagePCNearConditionData, GetIsCrimeFactionConditionData, CanHaveFlamesConditionData, HasFlamesConditionData, GetOpenStateConditionData, GetSittingConditionData, GetIsCurrentPackageConditionData, IsCurrentFurnitureRefConditionData, IsCurrentFurnitureObjConditionData, GetDayOfWeekConditionData, GetTalkedToPCParamConditionData, IsPCSleepingConditionData, IsPCAMurdererConditionData, HasSameEditorLocationAsRefConditionData, HasSameEditorLocationAsRefAliasConditionData, GetEquippedConditionData, IsSwimmingConditionData, GetAmountSoldStolenConditionData, GetIgnoreCrimeConditionData, GetPCExpelledConditionData, GetPCFactionMurderConditionData, GetPCEnemyofFactionConditionData, GetPCFactionAttackConditionData, GetDestroyedConditionData, HasMagicEffectConditionData, GetDefaultOpenConditionData, IsSpellTargetConditionData, GetVATSModeConditionData, GetPersuasionNumberConditionData, GetVampireFeedConditionData, GetCannibalConditionData, GetIsClassDefaultConditionData, GetClassDefaultMatchConditionData, GetInCellParamConditionData, GetPlayerDialogueInputConditionData, GetVatsTargetHeightConditionData, GetIsGhostConditionData, GetUnconsciousConditionData, GetRestrainedConditionData, GetIsUsedItemConditionData, GetIsUsedItemTypeConditionData, IsScenePlayingConditionData, IsInDialogueWithPlayerConditionData, GetLocationExploredConditionData, GetIsPlayableRaceConditionData, GetOffersServicesNowConditionData, HasAssociationTypeConditionData, HasFamilyRelationshipConditionData, HasParentRelationshipConditionData, IsWarningAboutConditionData, IsWeaponOutConditionData, HasSpellConditionData, IsTimePassingConditionData, IsPleasantConditionData, IsCloudyConditionData, IsSmallBumpConditionData, AnimAction_EffectHasKeywordConditionData, GetBaseValueConditionData, IsOwnerConditionData, IsCellOwnerConditionData, IsHorseStolenConditionData, IsLeftUpConditionData, IsSneakingConditionData, IsRunningConditionData, GetFriendHitConditionData, IsInCombatConditionData, IsInInteriorConditionData, IsWaterObjectConditionData, GetPlayerActionConditionData, IsActorUsingATorchConditionData, IsXBoxConditionData, GetInWorldspaceConditionData, GetPCMiscStatConditionData, GetPairedAnimationConditionData, IsActorAVictimConditionData, GetTotalPersuasionNumberConditionData, GetIdleDoneOnceConditionData, GetNoRumorsConditionData, GetCombatStateConditionData, GetWithinPackageLocationConditionData, IsRidingMountConditionData, IsFleeingConditionData, IsInDangerousWaterConditionData, GetIgnoreFriendlyHitsConditionData, IsPlayersLastRiddenMountConditionData, IsActorConditionData, IsEssentialConditionData, IsPlayerMovingIntoNewSpaceConditionData, GetIsCurrentLocationConditionData, GetIsCurrentLocationAliasConditionData, GetTimeDeadConditionData, HasLinkedRefConditionData, IsChildConditionData, GetStolenItemValueNoCrimeConditionData, GetLastPlayerActionConditionData, IsPlayerActionActiveConditionData, IsTalkingActivatorActorConditionData, IsInListConditionData, GetStolenItemValueConditionData, GetCrimeGoldViolentConditionData, GetCrimeGoldNonviolentConditionData, IsOwnedByConditionData, GetCommandDistanceConditionData, GetCommandLocationDistanceConditionData, GetHitLocationConditionData, IsPC1stPersonConditionData, GetCauseofDeathConditionData, IsWeaponInListConditionData, IsBribedbyPlayerConditionData, GetRelationshipRankConditionData, GetStrongestEnemyHasKeywordConditionData, GetVATSValueConditionData, IsKillerConditionData, IsPlayerInShipTargetingModeConditionData, GetFactionCombatReactionConditionData, IsShipTargetInShipTargetingModeConditionData, ExistsConditionData, GetGroupMemberCountConditionData, GetGroupTargetCountConditionData, GetIsVoiceTypeConditionData, GetPlantedExplosiveConditionData, IsScenePackageRunningConditionData, GetHealthPercentageConditionData, GetActiveBoostDurationConditionData, GetIsObjectTypeConditionData, PlayerVisualDetectionConditionData, PlayerAudioDetectionConditionData, GetIsCreatureTypeConditionData, HasKeyConditionData, IsFurnitureEntryTypeConditionData, GetInCurrentLocationFormListConditionData, GetInZoneConditionData, GetVelocityConditionData, GetGraphVariableFloatConditionData, HasPerkConditionData, GetFactionRelationConditionData, IsLastIdlePlayedConditionData, GetPlayerTeammateConditionData, GetPlayerTeammateCountConditionData, GetActorCrimePlayerEnemyConditionData, GetCrimeGoldConditionData, IsPlayerGrabbedRefConditionData, GetKeywordItemCountConditionData, GetDestructionStageConditionData, GetIsAlignmentConditionData, IsProtectedConditionData, GetThreatRatioConditionData, GetIsUsedItemEquipTypeConditionData, GetPlayerActivatedConditionData, GetFullyEnabledActorsInHighConditionData, IsCarryableConditionData, GetConcussedConditionData, GetBiomeScanPercentConditionData, GetMapMarkerVisibleConditionData, PlayerKnowsConditionData, GetPermanentValueConditionData, EPMagic_EffectIsDetrimentalConditionData, CanPayCrimeGoldConditionData, GetDaysInJailConditionData, EPAlchemyGetMakingPoisonConditionData, EPAlchemyEffectHasKeywordConditionData, GetAllowWorldInteractionsConditionData, GetPerkRankConditionData, GetLastHitCriticalConditionData, LastCrippledConditionConditionData, HasSharedPowerGridConditionData, IsCombatTargetConditionData, GetVATSRightAreaFreeConditionData, GetVATSLeftAreaFreeConditionData, GetVATSBackAreaFreeConditionData, GetVATSFrontAreaFreeConditionData, GetIsLockBrokenConditionData, IsWindowsPCConditionData, GetVATSRightTargetVisibleConditionData, GetVATSLeftTargetVisibleConditionData, GetVATSBackTargetVisibleConditionData, GetVATSFrontTargetVisibleConditionData, IsInCriticalStageConditionData, GetXPForNextLevelConditionData, GetInfamyConditionData, GetInfamyViolentConditionData, GetInfamyNonViolentConditionData, GetTypeCommandPerformingConditionData, GetQuestCompletedConditionData, GetSpeechChallengeSuccessSceneConditionData, IsGoreDisabledConditionData, IsSceneActionCompleteConditionData, GetActorsInHighConditionData, HasLoaded3DConditionData, HasKeywordConditionData, HasRefTypeConditionData, LocationHasKeywordConditionData, LocationHasRefTypeConditionData, GetIsEditorLocationConditionData, GetIsAliasRefConditionData, GetIsEditorLocationAliasConditionData, IsSprintingConditionData, IsBlockingConditionData, HasEquippedSpellConditionData, GetCurrentCastingTypeConditionData, GetCurrentDeliveryTypeConditionData, GetAttackStateConditionData, IsCloserToAThanBConditionData, LevelMinusPCLevelConditionData, IsBleedingOutConditionData, GetRelativeAngleConditionData, GetMovementDirectionConditionData, IsInSceneConditionData, GetRefTypeDeadCountConditionData, GetRefTypeAliveCountConditionData, GetIsFlyingConditionData, IsCurrentSpellConditionData, SpellHasKeywordConditionData, GetEquippedItemTypeConditionData, GetLocationAliasExploredConditionData, GetLocationAliasRefTypeDeadCountConditionData, GetLocationAliasRefTypeAliveCountConditionData, IsWardStateConditionData, IsInSameCurrentLocationAsRefConditionData, IsInSameCurrentLocationAsAliasConditionData, LocationAliasIsLocationConditionData, GetKeywordDataForLocationConditionData, GetKeywordDataForAliasConditionData, LocationAliasHasKeywordConditionData, IsNullPackageDataConditionData, GetNumericPackageDataConditionData, IsPlayerRadioOnConditionData, GetPlayerRadioFrequencyConditionData, GetHighestRelationshipRankConditionData, GetLowestRelationshipRankConditionData, HasAssociationTypeAnyConditionData, HasFamilyRelationshipAnyConditionData, GetPathingTargetOffsetConditionData, GetPathingTargetAngleOffsetConditionData, GetPathingTargetSpeedConditionData, GetPathingTargetSpeedAngleConditionData, GetMovementSpeedConditionData, GetInContainerConditionData, IsLocationLoadedConditionData, IsLocationAliasLoadedConditionData, IsDualCastingConditionData, GetVMQuestVariableConditionData, GetCombatAudioDetectionConditionData, GetCombatVisualDetectionConditionData, IsCastingConditionData, GetFlyingStateConditionData, IsInFavorStateConditionData, HasTwoHandedWeaponEquippedConditionData, IsFurnitureExitTypeConditionData, IsInFriendStatewithPlayerConditionData, GetWithinDistanceConditionData, GetValuePercentConditionData, IsUniqueConditionData, GetLastBumpDirectionConditionData, GetInfoChallangeSuccessConditionData, GetIsInjuredConditionData, GetIsCrashLandRequestConditionData, GetIsHastyLandRequestConditionData, IsLinkedToConditionData, GetKeywordDataForCurrentLocationConditionData, GetInSharedCrimeFactionConditionData, GetBribeSuccessConditionData, GetIntimidateSuccessConditionData, GetArrestedStateConditionData, GetArrestingActorConditionData, HasVMScriptConditionData, GetVMScriptVariableConditionData, GetWorkshopResourceDamageConditionData, HasValidRumorTopicConditionData, IsAttackingConditionData, IsPowerAttackingConditionData, IsLastHostileActorConditionData, GetGraphVariableIntConditionData, GetDockerOrientationConditionData, ShouldAttackKillConditionData, GetActivationHeightConditionData, SSLPI_ReplacePayloadHasKeywordConditionData, WornHasKeywordConditionData, GetPathingCurrentSpeedConditionData, GetPathingCurrentSpeedAngleConditionData, GetWorkshopObjectCountConditionData, EPMagic_SpellHasKeywordConditionData, GetNoBleedoutRecoveryConditionData, EPMagic_SpellHasSkillConditionData, IsAttackTypeConditionData, IsAllowedToFlyConditionData, HasMagicEffectOrSpellKeywordConditionData, IsCommandedActorConditionData, IsStaggeredConditionData, IsRecoilingConditionData, HasScopeWeaponEquippedConditionData, IsPathingConditionData, GetShouldHelpConditionData, HasBoundWeaponEquippedConditionData, GetCombatTargetHasKeywordConditionData, GetCombatGroupMemberCountConditionData, IsIgnoringCombatConditionData, GetLightLevelConditionData, SpellHasCastingPerkConditionData, IsBeingRiddenConditionData, IsUndeadConditionData, GetRealHoursPassedConditionData, IsUnlockedDoorConditionData, IsHostileToActorConditionData, GetTargetHeightConditionData, IsPoisonConditionData, WornApparelHasKeywordCountConditionData, GetItemHealthPercentConditionData, EffectWasDualCastConditionData, GetKnockStateEnumConditionData, DoesNotExistConditionData, GetSpeechChallengeSuccessGameConditionData, GetActorStanceConditionData, SpeechScenarioHasKeywordConditionData, CanProduceForWorkshopConditionData, CanFlyHereConditionData, EPIsDamageTypeConditionData, IsCurrentSpeechChallengeObjectConditionData, GetActorGunStateConditionData, GetVoiceLineLengthConditionData, ObjectTemplateItem_HasKeywordConditionData, ObjectTemplateItem_HasUniqueKeywordConditionData, ObjectTemplateItem_GetLevelConditionData, MovementIdleMatchesConditionData, GetActionDataConditionData, GetActionDataShortConditionData, GetActionDataByteConditionData, GetActionDataFlagConditionData, ModdedItemHasKeywordConditionData, GetAngryWithPlayerConditionData, IsCameraUnderWaterConditionData, IsActorRefOwnerConditionData, HasActorRefOwnerConditionData, GetLoadedAmmoCountConditionData, IsTimeSpanSunriseConditionData, IsTimeSpanMorningConditionData, IsTimeSpanAfternoonConditionData, IsTimeSpanEveningConditionData, IsTimeSpanSunsetConditionData, IsTimeSpanNightConditionData, IsTimeSpanMidnightConditionData, IsTimeSpanAnyDayConditionData, IsTimeSpanAnyNightConditionData, CurrentFurnitureHasKeywordConditionData, GetWeaponEquipIndexConditionData, IsOverEncumberedConditionData, IsPackageRequestingBlockedIdlesConditionData, GetActionDataIntConditionData, GetVATSRightMinusLeftAreaFreeConditionData, GetInIronSightsConditionData, GetActorStaggerDirectionConditionData, GetActorStaggerMagnitudeConditionData, WornCoversBipedSlotConditionData, GetInventoryValueConditionData, IsPlayerInConversationConditionData, IsInDialogueCameraConditionData, IsMyDialogueTargetPlayerConditionData, IsMyDialogueTargetActorConditionData, GetMyDialogueTargetDistanceConditionData, IsSeatOccupiedConditionData, IsPlayerRidingConditionData, IsTryingEventCameraConditionData, UseLeftSideCameraConditionData, GetNoteTypeConditionData, LocationHasPlayerOwnedWorkshopConditionData, IsStartingActionConditionData, IsMidActionConditionData, IsWeaponChargeAttackConditionData, IsInWorkshopModeConditionData, IsWeaponChargingHoldAttackConditionData, IsEncounterAbovePlayerLevelConditionData, IsMeleeAttackingConditionData, GetVATSQueuedTargetsUniqueConditionData, GetCurrentLocationExploredConditionData, IsPoweredConditionData, GetTransmitterDistanceConditionData, GetCameraPlaybackTimeConditionData, IsInWaterConditionData, GetWithinActivateDistanceConditionData, IsUnderWaterConditionData, IsInSameSpaceConditionData, LocationAllowsResetConditionData, GetVATSBackRightAreaFreeConditionData, GetVATSBackLeftAreaFreeConditionData, GetVATSBackRightTargetVisibleConditionData, GetVATSBackLeftTargetVisibleConditionData, GetVATSTargetLimbVisibleConditionData, IsPlayerListeningConditionData, GetPathingRequestedQuickTurnConditionData, EPIsCalculatingBaseDamageConditionData, GetReanimatingConditionData, GetCombatDialogueDataIntConditionData, IsDockedConditionData, IsDockedWithConditionData, GetLastDialogueCameraHasKeywordConditionData, GetActionDataFormConditionData, IsInSpaceConditionData, GetSpaceshipConditionData, ShipContainsRefConditionData, IsInSpaceshipConditionData, ShipHasActorInPilotSeatConditionData, ActorPackageHasRandomConversationsFlagOnConditionData, GetActorInShipPilotSeatConditionData, IsSpaceshipConditionData, GetInAcousticSpaceConditionData, CurrentShipLandedConditionData, IsDockedAsChildConditionData, PlayerHailResponseConditionData, IsHerdLeaderConditionData, HasHerdLeaderConditionData, GetPlayerHomeSpaceShipConditionData, IsTrueForConditionFormConditionData, GetNumElementsInRefCollectionConditionData, GetCurrentWeatherHasKeywordConditionData, IsSnappedToConditionData, HasKeywordOnNodeConditionData, HasKeywordOnStackedConditionData, HasVisualDetectionConditionData, HasSoundDetectionConditionData, IsSuppressedConditionData, IsSpaceshipEngineDestroyedConditionData, IsLandedConditionData, IsSpaceshipShieldsDestroyedConditionData, IsSpaceshipGravDriveDestroyedConditionData, GetNumberOfSpaceshipWeaponsDestroyedConditionData, GetIsCurrentLocationExactConditionData, GetIsEditorLocationExactConditionData, IsInThreatBackdownConditionData, IsInsidePrimitiveConditionData, GetCameraActorCountConditionData, GetIsCurrentLocationAliasExactConditionData, IsJailInSystemConditionData, BodyHasKeywordConditionData, BiomeHasKeywordConditionData, SystemHasKeywordConditionData, GetDistanceFromLocationWithKeywordConditionData, GetPlanetVisitedConditionData, IsLocalDayConditionData, SpeechChallengePreviousSceneHasKeywordConditionData, GetBiomeMaskValueConditionData, BodyIsTypeConditionData, BodyIsAtmosphereTypeConditionData, BodyIsTemperatureTypeConditionData, GetBodyTemperatureConditionData, GetBodyPressureConditionData, GetBodyGravityConditionData, GetBodySurveyPercentConditionData, IsPlayerLoiteringConditionData, IsResearchCompleteConditionData, BodyIsPlanetTraitKnownConditionData, HasPerkCategoryConditionData, HasPerkSkillGroupConditionData, CountAquiredPerkRanksByTypeConditionData, IsScannedConditionData, IsScannableKeywordRevealedConditionData, IsMyVictimConditionData, GetResourceScarcityConditionData, CheckContrabandStatusConditionData, IsPlayerSpaceFarTravellingConditionData, IsPlayerSpaceFarTravelDepartureConditionData, IsPlayerSpaceFarTravelArrivalConditionData, BiomeHasWeatherConditionData, GetSystemSurveyPercentConditionData, SystemBodyHasKeywordConditionData, GetShipGroupThreatRatioConditionData, IsOnGrazingTerrainConditionData, GetDistanceGalacticParsecConditionData, GetDistanceGalacticMegaMeterConditionData, GetShipToShipGroupThreatRatioConditionData, GetGroupMembersInRadiusCountConditionData, GetShipPiracyValueConditionData, GetDistanceFromCelestialBodyAliasParsecsConditionData, GetDistanceFromCelestialBodyAliasMegaMetersConditionData, IsInsidePrimitiveTopAndBottomConditionData, GetPlayerBountyCrimeFactionConditionData, GetIsFloatingConditionData, LocationOrParentHasKeywordConditionData, IsCelestialBodyScannedConditionData, IsActorReactionInCooldownConditionData, BiomeSupportsCreatureConditionData, EPMagic_SpellHasMagicEffectConditionData, IsFacingActorConditionData, IsSameVoiceTypeConditionData, GetValueCurrentLocationConditionData, IsBoostPackActiveConditionData, GetTimeSinceLastBoostPackEndedConditionData, EPGetLastCombatHitCriticalConditionData, EPGetLastCombatHitKillConditionData, EPGetLastCombatHitGunBashConditionData, EPIsLastCombatHitLimbInCategoryConditionData, IsEditorLocationInsidePrimitiveConditionData, GetIsPronounConditionData, GetDistanceGalacticLightYearsConditionData, GetDistanceFromCelestialBodyAliasLightyearsConditionData, IsOnPlayerHomeSpaceShipConditionData, EPMagic_EffectHasKeywordConditionData, EPMagic_SpellIsConditionData, IsPlayerSteadyingWeaponConditionData, ResourceVeinHasKeywordConditionData, GetLastCombatHitActorConsecutiveHitsConditionData, GetCurrentAndLastWeatherHaveKeywordConditionData, IsPCEquippedWeaponNthAttackConditionData, GetWaterDepthConditionData, AreHostileActorsNearConditionData, GetPlayerGravityScaleConditionData, IsInSameGroupConditionData, IsBoostPackHoveringConditionData, GetUsedWeightCapacityConditionFunctionConditionData, BodyHasResourceConditionData, GetPCIsReloadingConditionData, ActorExposedToSkyConditionData, GetQuestStartingConditionData, BodyHasResourceWithKeywordConditionData, GetShipReactorClassConditionData, ShipReactorHasClassKeywordConditionData, EPIsResistanceActorValueConditionData]
    /// </summary>
    public partial interface IConditionDataGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IConditionDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => ConditionData_Registration.Instance;
        Condition.RunOnType RunOnType { get; }
        IFormLinkGetter<IStarfieldMajorRecordGetter> Reference { get; }
        Int32 Unknown3 { get; }
        Boolean UseAliases { get; }
        Boolean UsePackageData { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ConditionDataMixIn
    {
        public static void Clear(this IConditionData item)
        {
            ((ConditionDataSetterCommon)((IConditionDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ConditionData.Mask<bool> GetEqualsMask(
            this IConditionDataGetter item,
            IConditionDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ConditionDataCommon)((IConditionDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IConditionDataGetter item,
            string? name = null,
            ConditionData.Mask<bool>? printMask = null)
        {
            return ((ConditionDataCommon)((IConditionDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IConditionDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ConditionData.Mask<bool>? printMask = null)
        {
            ((ConditionDataCommon)((IConditionDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IConditionDataGetter item,
            IConditionDataGetter rhs,
            ConditionData.TranslationMask? equalsMask = null)
        {
            return ((ConditionDataCommon)((IConditionDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IConditionData lhs,
            IConditionDataGetter rhs)
        {
            ((ConditionDataSetterTranslationCommon)((IConditionDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IConditionData lhs,
            IConditionDataGetter rhs,
            ConditionData.TranslationMask? copyMask = null)
        {
            ((ConditionDataSetterTranslationCommon)((IConditionDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IConditionData lhs,
            IConditionDataGetter rhs,
            out ConditionData.ErrorMask errorMask,
            ConditionData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ConditionDataSetterTranslationCommon)((IConditionDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ConditionData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IConditionData lhs,
            IConditionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ConditionDataSetterTranslationCommon)((IConditionDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ConditionData DeepCopy(
            this IConditionDataGetter item,
            ConditionData.TranslationMask? copyMask = null)
        {
            return ((ConditionDataSetterTranslationCommon)((IConditionDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ConditionData DeepCopy(
            this IConditionDataGetter item,
            out ConditionData.ErrorMask errorMask,
            ConditionData.TranslationMask? copyMask = null)
        {
            return ((ConditionDataSetterTranslationCommon)((IConditionDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ConditionData DeepCopy(
            this IConditionDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ConditionDataSetterTranslationCommon)((IConditionDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IConditionData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ConditionDataSetterCommon)((IConditionDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum ConditionData_FieldIndex
    {
        RunOnType = 0,
        Reference = 1,
        Unknown3 = 2,
        UseAliases = 3,
        UsePackageData = 4,
    }
    #endregion

    #region Registration
    internal partial class ConditionData_Registration : ILoquiRegistration
    {
        public static readonly ConditionData_Registration Instance = new ConditionData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(ConditionData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ConditionData.ErrorMask);

        public static readonly Type ClassType = typeof(ConditionData);

        public static readonly Type GetterType = typeof(IConditionDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IConditionData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.ConditionData";

        public const string Name = "ConditionData";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(ConditionDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ConditionDataSetterCommon
    {
        public static readonly ConditionDataSetterCommon Instance = new ConditionDataSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IConditionData item)
        {
            ClearPartial();
            item.RunOnType = default(Condition.RunOnType);
            item.Reference.Clear();
            item.Unknown3 = ConditionData.Unknown3Default;
            item.UseAliases = default(Boolean);
            item.UsePackageData = default(Boolean);
        }
        
        #region Mutagen
        public void RemapLinks(IConditionData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Reference.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IConditionData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ConditionDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class ConditionDataCommon
    {
        public static readonly ConditionDataCommon Instance = new ConditionDataCommon();

        public ConditionData.Mask<bool> GetEqualsMask(
            IConditionDataGetter item,
            IConditionDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ConditionData.Mask<bool>(false);
            ((ConditionDataCommon)((IConditionDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IConditionDataGetter item,
            IConditionDataGetter rhs,
            ConditionData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.RunOnType = item.RunOnType == rhs.RunOnType;
            ret.Reference = item.Reference.Equals(rhs.Reference);
            ret.Unknown3 = item.Unknown3 == rhs.Unknown3;
            ret.UseAliases = item.UseAliases == rhs.UseAliases;
            ret.UsePackageData = item.UsePackageData == rhs.UsePackageData;
        }
        
        public string Print(
            IConditionDataGetter item,
            string? name = null,
            ConditionData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IConditionDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ConditionData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"ConditionData =>");
            }
            else
            {
                sb.AppendLine($"{name} (ConditionData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IConditionDataGetter item,
            StructuredStringBuilder sb,
            ConditionData.Mask<bool>? printMask = null)
        {
            if (printMask?.RunOnType ?? true)
            {
                sb.AppendItem(item.RunOnType, "RunOnType");
            }
            if (printMask?.Reference ?? true)
            {
                sb.AppendItem(item.Reference.FormKey, "Reference");
            }
            if (printMask?.Unknown3 ?? true)
            {
                sb.AppendItem(item.Unknown3, "Unknown3");
            }
            if (printMask?.UseAliases ?? true)
            {
                sb.AppendItem(item.UseAliases, "UseAliases");
            }
            if (printMask?.UsePackageData ?? true)
            {
                sb.AppendItem(item.UsePackageData, "UsePackageData");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IConditionDataGetter? lhs,
            IConditionDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)ConditionData_FieldIndex.RunOnType) ?? true))
            {
                if (lhs.RunOnType != rhs.RunOnType) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConditionData_FieldIndex.Reference) ?? true))
            {
                if (!lhs.Reference.Equals(rhs.Reference)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConditionData_FieldIndex.Unknown3) ?? true))
            {
                if (lhs.Unknown3 != rhs.Unknown3) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConditionData_FieldIndex.UseAliases) ?? true))
            {
                if (lhs.UseAliases != rhs.UseAliases) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConditionData_FieldIndex.UsePackageData) ?? true))
            {
                if (lhs.UsePackageData != rhs.UsePackageData) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IConditionDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.RunOnType);
            hash.Add(item.Reference);
            hash.Add(item.Unknown3);
            hash.Add(item.UseAliases);
            hash.Add(item.UsePackageData);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public virtual object GetNew()
        {
            return ConditionData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IConditionDataGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.Reference);
            yield break;
        }
        
        #endregion
        
    }
    internal partial class ConditionDataSetterTranslationCommon
    {
        public static readonly ConditionDataSetterTranslationCommon Instance = new ConditionDataSetterTranslationCommon();

        #region DeepCopyIn
        public virtual void DeepCopyIn(
            IConditionData item,
            IConditionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)ConditionData_FieldIndex.RunOnType) ?? true))
            {
                item.RunOnType = rhs.RunOnType;
            }
            if ((copyMask?.GetShouldTranslate((int)ConditionData_FieldIndex.Reference) ?? true))
            {
                item.Reference.SetTo(rhs.Reference.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)ConditionData_FieldIndex.Unknown3) ?? true))
            {
                item.Unknown3 = rhs.Unknown3;
            }
            if ((copyMask?.GetShouldTranslate((int)ConditionData_FieldIndex.UseAliases) ?? true))
            {
                item.UseAliases = rhs.UseAliases;
            }
            if ((copyMask?.GetShouldTranslate((int)ConditionData_FieldIndex.UsePackageData) ?? true))
            {
                item.UsePackageData = rhs.UsePackageData;
            }
        }
        
        #endregion
        
        public ConditionData DeepCopy(
            IConditionDataGetter item,
            ConditionData.TranslationMask? copyMask = null)
        {
            ConditionData ret = (ConditionData)((ConditionDataCommon)((IConditionDataGetter)item).CommonInstance()!).GetNew();
            ((ConditionDataSetterTranslationCommon)((IConditionDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ConditionData DeepCopy(
            IConditionDataGetter item,
            out ConditionData.ErrorMask errorMask,
            ConditionData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ConditionData ret = (ConditionData)((ConditionDataCommon)((IConditionDataGetter)item).CommonInstance()!).GetNew();
            ((ConditionDataSetterTranslationCommon)((IConditionDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ConditionData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ConditionData DeepCopy(
            IConditionDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ConditionData ret = (ConditionData)((ConditionDataCommon)((IConditionDataGetter)item).CommonInstance()!).GetNew();
            ((ConditionDataSetterTranslationCommon)((IConditionDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class ConditionData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ConditionData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => ConditionData_Registration.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonInstance() => ConditionDataCommon.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonSetterInstance()
        {
            return ConditionDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected virtual object CommonSetterTranslationInstance() => ConditionDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IConditionDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IConditionDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IConditionDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class ConditionDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly ConditionDataBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IConditionDataGetter item,
            MutagenWriter writer)
        {
        }

        public virtual void Write(
            MutagenWriter writer,
            IConditionDataGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public virtual void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IConditionDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ConditionDataBinaryCreateTranslation
    {
        public static readonly ConditionDataBinaryCreateTranslation Instance = new ConditionDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IConditionData item,
            MutagenFrame frame)
        {
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class ConditionDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IConditionDataGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ConditionDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal abstract partial class ConditionDataBinaryOverlay :
        PluginBinaryOverlay,
        IConditionDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ConditionData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => ConditionData_Registration.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonInstance() => ConditionDataCommon.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonSetterTranslationInstance() => ConditionDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IConditionDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IConditionDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IConditionDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public virtual IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ConditionDataCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object BinaryWriteTranslator => ConditionDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ConditionDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ConditionDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }


        #region To String

        public virtual void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ConditionDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IConditionDataGetter rhs) return false;
            return ((ConditionDataCommon)((IConditionDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IConditionDataGetter? obj)
        {
            return ((ConditionDataCommon)((IConditionDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ConditionDataCommon)((IConditionDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

