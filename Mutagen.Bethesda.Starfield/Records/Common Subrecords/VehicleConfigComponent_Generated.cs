/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class VehicleConfigComponent :
        AComponent,
        IEquatable<IVehicleConfigComponentGetter>,
        ILoquiObjectSetter<VehicleConfigComponent>,
        IVehicleConfigComponent
    {
        #region Ctor
        public VehicleConfigComponent()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region SuspensionBoneModifiers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IBoneModifierGetter>>? _SuspensionBoneModifiers;
        public ExtendedList<IFormLinkGetter<IBoneModifierGetter>>? SuspensionBoneModifiers
        {
            get => this._SuspensionBoneModifiers;
            set => this._SuspensionBoneModifiers = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IBoneModifierGetter>>? IVehicleConfigComponentGetter.SuspensionBoneModifiers => _SuspensionBoneModifiers;
        #endregion

        #endregion
        #region Config
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VehicleConfigData? _Config;
        public VehicleConfigData? Config
        {
            get => _Config;
            set => _Config = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVehicleConfigDataGetter? IVehicleConfigComponentGetter.Config => this.Config;
        #endregion
        #region MountedWeapon
        private readonly IFormLinkNullable<IWeaponGetter> _MountedWeapon = new FormLinkNullable<IWeaponGetter>();
        public IFormLinkNullable<IWeaponGetter> MountedWeapon
        {
            get => _MountedWeapon;
            set => _MountedWeapon.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IWeaponGetter> IVehicleConfigComponentGetter.MountedWeapon => this.MountedWeapon;
        #endregion
        #region Weapon
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VehicleWeaponData? _Weapon;
        public VehicleWeaponData? Weapon
        {
            get => _Weapon;
            set => _Weapon = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVehicleWeaponDataGetter? IVehicleConfigComponentGetter.Weapon => this.Weapon;
        #endregion
        #region WWise
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VehicleWWiseData? _WWise;
        public VehicleWWiseData? WWise
        {
            get => _WWise;
            set => _WWise = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVehicleWWiseDataGetter? IVehicleConfigComponentGetter.WWise => this.WWise;
        #endregion
        #region Material
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VehicleMaterialTable? _Material;
        public VehicleMaterialTable? Material
        {
            get => _Material;
            set => _Material = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVehicleMaterialTableGetter? IVehicleConfigComponentGetter.Material => this.Material;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            VehicleConfigComponentMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IVehicleConfigComponentGetter rhs) return false;
            return ((VehicleConfigComponentCommon)((IVehicleConfigComponentGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IVehicleConfigComponentGetter? obj)
        {
            return ((VehicleConfigComponentCommon)((IVehicleConfigComponentGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((VehicleConfigComponentCommon)((IVehicleConfigComponentGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AComponent.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.SuspensionBoneModifiers = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Config = new MaskItem<TItem, VehicleConfigData.Mask<TItem>?>(initialValue, new VehicleConfigData.Mask<TItem>(initialValue));
                this.MountedWeapon = initialValue;
                this.Weapon = new MaskItem<TItem, VehicleWeaponData.Mask<TItem>?>(initialValue, new VehicleWeaponData.Mask<TItem>(initialValue));
                this.WWise = new MaskItem<TItem, VehicleWWiseData.Mask<TItem>?>(initialValue, new VehicleWWiseData.Mask<TItem>(initialValue));
                this.Material = new MaskItem<TItem, VehicleMaterialTable.Mask<TItem>?>(initialValue, new VehicleMaterialTable.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem SuspensionBoneModifiers,
                TItem Config,
                TItem MountedWeapon,
                TItem Weapon,
                TItem WWise,
                TItem Material)
            : base()
            {
                this.SuspensionBoneModifiers = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(SuspensionBoneModifiers, Enumerable.Empty<(int Index, TItem Value)>());
                this.Config = new MaskItem<TItem, VehicleConfigData.Mask<TItem>?>(Config, new VehicleConfigData.Mask<TItem>(Config));
                this.MountedWeapon = MountedWeapon;
                this.Weapon = new MaskItem<TItem, VehicleWeaponData.Mask<TItem>?>(Weapon, new VehicleWeaponData.Mask<TItem>(Weapon));
                this.WWise = new MaskItem<TItem, VehicleWWiseData.Mask<TItem>?>(WWise, new VehicleWWiseData.Mask<TItem>(WWise));
                this.Material = new MaskItem<TItem, VehicleMaterialTable.Mask<TItem>?>(Material, new VehicleMaterialTable.Mask<TItem>(Material));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? SuspensionBoneModifiers;
            public MaskItem<TItem, VehicleConfigData.Mask<TItem>?>? Config { get; set; }
            public TItem MountedWeapon;
            public MaskItem<TItem, VehicleWeaponData.Mask<TItem>?>? Weapon { get; set; }
            public MaskItem<TItem, VehicleWWiseData.Mask<TItem>?>? WWise { get; set; }
            public MaskItem<TItem, VehicleMaterialTable.Mask<TItem>?>? Material { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.SuspensionBoneModifiers, rhs.SuspensionBoneModifiers)) return false;
                if (!object.Equals(this.Config, rhs.Config)) return false;
                if (!object.Equals(this.MountedWeapon, rhs.MountedWeapon)) return false;
                if (!object.Equals(this.Weapon, rhs.Weapon)) return false;
                if (!object.Equals(this.WWise, rhs.WWise)) return false;
                if (!object.Equals(this.Material, rhs.Material)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.SuspensionBoneModifiers);
                hash.Add(this.Config);
                hash.Add(this.MountedWeapon);
                hash.Add(this.Weapon);
                hash.Add(this.WWise);
                hash.Add(this.Material);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.SuspensionBoneModifiers != null)
                {
                    if (!eval(this.SuspensionBoneModifiers.Overall)) return false;
                    if (this.SuspensionBoneModifiers.Specific != null)
                    {
                        foreach (var item in this.SuspensionBoneModifiers.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Config != null)
                {
                    if (!eval(this.Config.Overall)) return false;
                    if (this.Config.Specific != null && !this.Config.Specific.All(eval)) return false;
                }
                if (!eval(this.MountedWeapon)) return false;
                if (Weapon != null)
                {
                    if (!eval(this.Weapon.Overall)) return false;
                    if (this.Weapon.Specific != null && !this.Weapon.Specific.All(eval)) return false;
                }
                if (WWise != null)
                {
                    if (!eval(this.WWise.Overall)) return false;
                    if (this.WWise.Specific != null && !this.WWise.Specific.All(eval)) return false;
                }
                if (Material != null)
                {
                    if (!eval(this.Material.Overall)) return false;
                    if (this.Material.Specific != null && !this.Material.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.SuspensionBoneModifiers != null)
                {
                    if (eval(this.SuspensionBoneModifiers.Overall)) return true;
                    if (this.SuspensionBoneModifiers.Specific != null)
                    {
                        foreach (var item in this.SuspensionBoneModifiers.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Config != null)
                {
                    if (eval(this.Config.Overall)) return true;
                    if (this.Config.Specific != null && this.Config.Specific.Any(eval)) return true;
                }
                if (eval(this.MountedWeapon)) return true;
                if (Weapon != null)
                {
                    if (eval(this.Weapon.Overall)) return true;
                    if (this.Weapon.Specific != null && this.Weapon.Specific.Any(eval)) return true;
                }
                if (WWise != null)
                {
                    if (eval(this.WWise.Overall)) return true;
                    if (this.WWise.Specific != null && this.WWise.Specific.Any(eval)) return true;
                }
                if (Material != null)
                {
                    if (eval(this.Material.Overall)) return true;
                    if (this.Material.Specific != null && this.Material.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new VehicleConfigComponent.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (SuspensionBoneModifiers != null)
                {
                    obj.SuspensionBoneModifiers = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.SuspensionBoneModifiers.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (SuspensionBoneModifiers.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.SuspensionBoneModifiers.Specific = l;
                        foreach (var item in SuspensionBoneModifiers.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Config = this.Config == null ? null : new MaskItem<R, VehicleConfigData.Mask<R>?>(eval(this.Config.Overall), this.Config.Specific?.Translate(eval));
                obj.MountedWeapon = eval(this.MountedWeapon);
                obj.Weapon = this.Weapon == null ? null : new MaskItem<R, VehicleWeaponData.Mask<R>?>(eval(this.Weapon.Overall), this.Weapon.Specific?.Translate(eval));
                obj.WWise = this.WWise == null ? null : new MaskItem<R, VehicleWWiseData.Mask<R>?>(eval(this.WWise.Overall), this.WWise.Specific?.Translate(eval));
                obj.Material = this.Material == null ? null : new MaskItem<R, VehicleMaterialTable.Mask<R>?>(eval(this.Material.Overall), this.Material.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(VehicleConfigComponent.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, VehicleConfigComponent.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(VehicleConfigComponent.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.SuspensionBoneModifiers?.Overall ?? true)
                        && SuspensionBoneModifiers is {} SuspensionBoneModifiersItem)
                    {
                        sb.AppendLine("SuspensionBoneModifiers =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SuspensionBoneModifiersItem.Overall);
                            if (SuspensionBoneModifiersItem.Specific != null)
                            {
                                foreach (var subItem in SuspensionBoneModifiersItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Config?.Overall ?? true)
                    {
                        Config?.Print(sb);
                    }
                    if (printMask?.MountedWeapon ?? true)
                    {
                        sb.AppendItem(MountedWeapon, "MountedWeapon");
                    }
                    if (printMask?.Weapon?.Overall ?? true)
                    {
                        Weapon?.Print(sb);
                    }
                    if (printMask?.WWise?.Overall ?? true)
                    {
                        WWise?.Print(sb);
                    }
                    if (printMask?.Material?.Overall ?? true)
                    {
                        Material?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            AComponent.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? SuspensionBoneModifiers;
            public MaskItem<Exception?, VehicleConfigData.ErrorMask?>? Config;
            public Exception? MountedWeapon;
            public MaskItem<Exception?, VehicleWeaponData.ErrorMask?>? Weapon;
            public MaskItem<Exception?, VehicleWWiseData.ErrorMask?>? WWise;
            public MaskItem<Exception?, VehicleMaterialTable.ErrorMask?>? Material;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                VehicleConfigComponent_FieldIndex enu = (VehicleConfigComponent_FieldIndex)index;
                switch (enu)
                {
                    case VehicleConfigComponent_FieldIndex.SuspensionBoneModifiers:
                        return SuspensionBoneModifiers;
                    case VehicleConfigComponent_FieldIndex.Config:
                        return Config;
                    case VehicleConfigComponent_FieldIndex.MountedWeapon:
                        return MountedWeapon;
                    case VehicleConfigComponent_FieldIndex.Weapon:
                        return Weapon;
                    case VehicleConfigComponent_FieldIndex.WWise:
                        return WWise;
                    case VehicleConfigComponent_FieldIndex.Material:
                        return Material;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                VehicleConfigComponent_FieldIndex enu = (VehicleConfigComponent_FieldIndex)index;
                switch (enu)
                {
                    case VehicleConfigComponent_FieldIndex.SuspensionBoneModifiers:
                        this.SuspensionBoneModifiers = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case VehicleConfigComponent_FieldIndex.Config:
                        this.Config = new MaskItem<Exception?, VehicleConfigData.ErrorMask?>(ex, null);
                        break;
                    case VehicleConfigComponent_FieldIndex.MountedWeapon:
                        this.MountedWeapon = ex;
                        break;
                    case VehicleConfigComponent_FieldIndex.Weapon:
                        this.Weapon = new MaskItem<Exception?, VehicleWeaponData.ErrorMask?>(ex, null);
                        break;
                    case VehicleConfigComponent_FieldIndex.WWise:
                        this.WWise = new MaskItem<Exception?, VehicleWWiseData.ErrorMask?>(ex, null);
                        break;
                    case VehicleConfigComponent_FieldIndex.Material:
                        this.Material = new MaskItem<Exception?, VehicleMaterialTable.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                VehicleConfigComponent_FieldIndex enu = (VehicleConfigComponent_FieldIndex)index;
                switch (enu)
                {
                    case VehicleConfigComponent_FieldIndex.SuspensionBoneModifiers:
                        this.SuspensionBoneModifiers = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case VehicleConfigComponent_FieldIndex.Config:
                        this.Config = (MaskItem<Exception?, VehicleConfigData.ErrorMask?>?)obj;
                        break;
                    case VehicleConfigComponent_FieldIndex.MountedWeapon:
                        this.MountedWeapon = (Exception?)obj;
                        break;
                    case VehicleConfigComponent_FieldIndex.Weapon:
                        this.Weapon = (MaskItem<Exception?, VehicleWeaponData.ErrorMask?>?)obj;
                        break;
                    case VehicleConfigComponent_FieldIndex.WWise:
                        this.WWise = (MaskItem<Exception?, VehicleWWiseData.ErrorMask?>?)obj;
                        break;
                    case VehicleConfigComponent_FieldIndex.Material:
                        this.Material = (MaskItem<Exception?, VehicleMaterialTable.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (SuspensionBoneModifiers != null) return true;
                if (Config != null) return true;
                if (MountedWeapon != null) return true;
                if (Weapon != null) return true;
                if (WWise != null) return true;
                if (Material != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (SuspensionBoneModifiers is {} SuspensionBoneModifiersItem)
                {
                    sb.AppendLine("SuspensionBoneModifiers =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SuspensionBoneModifiersItem.Overall);
                        if (SuspensionBoneModifiersItem.Specific != null)
                        {
                            foreach (var subItem in SuspensionBoneModifiersItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                Config?.Print(sb);
                {
                    sb.AppendItem(MountedWeapon, "MountedWeapon");
                }
                Weapon?.Print(sb);
                WWise?.Print(sb);
                Material?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.SuspensionBoneModifiers = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.SuspensionBoneModifiers?.Overall, rhs.SuspensionBoneModifiers?.Overall), Noggog.ExceptionExt.Combine(this.SuspensionBoneModifiers?.Specific, rhs.SuspensionBoneModifiers?.Specific));
                ret.Config = this.Config.Combine(rhs.Config, (l, r) => l.Combine(r));
                ret.MountedWeapon = this.MountedWeapon.Combine(rhs.MountedWeapon);
                ret.Weapon = this.Weapon.Combine(rhs.Weapon, (l, r) => l.Combine(r));
                ret.WWise = this.WWise.Combine(rhs.WWise, (l, r) => l.Combine(r));
                ret.Material = this.Material.Combine(rhs.Material, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AComponent.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool SuspensionBoneModifiers;
            public VehicleConfigData.TranslationMask? Config;
            public bool MountedWeapon;
            public VehicleWeaponData.TranslationMask? Weapon;
            public VehicleWWiseData.TranslationMask? WWise;
            public VehicleMaterialTable.TranslationMask? Material;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.SuspensionBoneModifiers = defaultOn;
                this.MountedWeapon = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((SuspensionBoneModifiers, null));
                ret.Add((Config != null ? Config.OnOverall : DefaultOn, Config?.GetCrystal()));
                ret.Add((MountedWeapon, null));
                ret.Add((Weapon != null ? Weapon.OnOverall : DefaultOn, Weapon?.GetCrystal()));
                ret.Add((WWise != null ? WWise.OnOverall : DefaultOn, WWise?.GetCrystal()));
                ret.Add((Material != null ? Material.OnOverall : DefaultOn, Material?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => VehicleConfigComponentCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => VehicleConfigComponentSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => VehicleConfigComponentBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((VehicleConfigComponentBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static VehicleConfigComponent CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new VehicleConfigComponent();
            ((VehicleConfigComponentSetterCommon)((IVehicleConfigComponentGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out VehicleConfigComponent item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((VehicleConfigComponentSetterCommon)((IVehicleConfigComponentGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new VehicleConfigComponent GetNew()
        {
            return new VehicleConfigComponent();
        }

    }
    #endregion

    #region Interface
    public partial interface IVehicleConfigComponent :
        IAComponent,
        IFormLinkContainer,
        ILoquiObjectSetter<IVehicleConfigComponent>,
        IVehicleConfigComponentGetter
    {
        new ExtendedList<IFormLinkGetter<IBoneModifierGetter>>? SuspensionBoneModifiers { get; set; }
        new VehicleConfigData? Config { get; set; }
        new IFormLinkNullable<IWeaponGetter> MountedWeapon { get; set; }
        new VehicleWeaponData? Weapon { get; set; }
        new VehicleWWiseData? WWise { get; set; }
        new VehicleMaterialTable? Material { get; set; }
    }

    public partial interface IVehicleConfigComponentGetter :
        IAComponentGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IVehicleConfigComponentGetter>
    {
        static new ILoquiRegistration StaticRegistration => VehicleConfigComponent_Registration.Instance;
        IReadOnlyList<IFormLinkGetter<IBoneModifierGetter>>? SuspensionBoneModifiers { get; }
        IVehicleConfigDataGetter? Config { get; }
        IFormLinkNullableGetter<IWeaponGetter> MountedWeapon { get; }
        IVehicleWeaponDataGetter? Weapon { get; }
        IVehicleWWiseDataGetter? WWise { get; }
        IVehicleMaterialTableGetter? Material { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class VehicleConfigComponentMixIn
    {
        public static void Clear(this IVehicleConfigComponent item)
        {
            ((VehicleConfigComponentSetterCommon)((IVehicleConfigComponentGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static VehicleConfigComponent.Mask<bool> GetEqualsMask(
            this IVehicleConfigComponentGetter item,
            IVehicleConfigComponentGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((VehicleConfigComponentCommon)((IVehicleConfigComponentGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IVehicleConfigComponentGetter item,
            string? name = null,
            VehicleConfigComponent.Mask<bool>? printMask = null)
        {
            return ((VehicleConfigComponentCommon)((IVehicleConfigComponentGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IVehicleConfigComponentGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            VehicleConfigComponent.Mask<bool>? printMask = null)
        {
            ((VehicleConfigComponentCommon)((IVehicleConfigComponentGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IVehicleConfigComponentGetter item,
            IVehicleConfigComponentGetter rhs,
            VehicleConfigComponent.TranslationMask? equalsMask = null)
        {
            return ((VehicleConfigComponentCommon)((IVehicleConfigComponentGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IVehicleConfigComponent lhs,
            IVehicleConfigComponentGetter rhs,
            out VehicleConfigComponent.ErrorMask errorMask,
            VehicleConfigComponent.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((VehicleConfigComponentSetterTranslationCommon)((IVehicleConfigComponentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = VehicleConfigComponent.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IVehicleConfigComponent lhs,
            IVehicleConfigComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((VehicleConfigComponentSetterTranslationCommon)((IVehicleConfigComponentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static VehicleConfigComponent DeepCopy(
            this IVehicleConfigComponentGetter item,
            VehicleConfigComponent.TranslationMask? copyMask = null)
        {
            return ((VehicleConfigComponentSetterTranslationCommon)((IVehicleConfigComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static VehicleConfigComponent DeepCopy(
            this IVehicleConfigComponentGetter item,
            out VehicleConfigComponent.ErrorMask errorMask,
            VehicleConfigComponent.TranslationMask? copyMask = null)
        {
            return ((VehicleConfigComponentSetterTranslationCommon)((IVehicleConfigComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static VehicleConfigComponent DeepCopy(
            this IVehicleConfigComponentGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((VehicleConfigComponentSetterTranslationCommon)((IVehicleConfigComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IVehicleConfigComponent item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((VehicleConfigComponentSetterCommon)((IVehicleConfigComponentGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum VehicleConfigComponent_FieldIndex
    {
        SuspensionBoneModifiers = 0,
        Config = 1,
        MountedWeapon = 2,
        Weapon = 3,
        WWise = 4,
        Material = 5,
    }
    #endregion

    #region Registration
    internal partial class VehicleConfigComponent_Registration : ILoquiRegistration
    {
        public static readonly VehicleConfigComponent_Registration Instance = new VehicleConfigComponent_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(VehicleConfigComponent.Mask<>);

        public static readonly Type ErrorMaskType = typeof(VehicleConfigComponent.ErrorMask);

        public static readonly Type ClassType = typeof(VehicleConfigComponent);

        public static readonly Type GetterType = typeof(IVehicleConfigComponentGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IVehicleConfigComponent);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.VehicleConfigComponent";

        public const string Name = "VehicleConfigComponent";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.BFCB;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.BFCB);
            var all = RecordCollection.Factory(
                RecordTypes.BFCB,
                RecordTypes.VCSB,
                RecordTypes.VCCD,
                RecordTypes.VCMT,
                RecordTypes.VCTT,
                RecordTypes.VWWD,
                RecordTypes.VMRT);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(VehicleConfigComponentBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class VehicleConfigComponentSetterCommon : AComponentSetterCommon
    {
        public new static readonly VehicleConfigComponentSetterCommon Instance = new VehicleConfigComponentSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IVehicleConfigComponent item)
        {
            ClearPartial();
            item.SuspensionBoneModifiers = null;
            item.Config = null;
            item.MountedWeapon.Clear();
            item.Weapon = null;
            item.WWise = null;
            item.Material = null;
            base.Clear(item);
        }
        
        public override void Clear(IAComponent item)
        {
            Clear(item: (IVehicleConfigComponent)item);
        }
        
        #region Mutagen
        public void RemapLinks(IVehicleConfigComponent obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.SuspensionBoneModifiers?.RemapLinks(mapping);
            obj.MountedWeapon.Relink(mapping);
            obj.WWise?.RemapLinks(mapping);
            obj.Material?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IVehicleConfigComponent item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: VehicleConfigComponentBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAComponent item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (VehicleConfigComponent)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class VehicleConfigComponentCommon : AComponentCommon
    {
        public new static readonly VehicleConfigComponentCommon Instance = new VehicleConfigComponentCommon();

        public VehicleConfigComponent.Mask<bool> GetEqualsMask(
            IVehicleConfigComponentGetter item,
            IVehicleConfigComponentGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new VehicleConfigComponent.Mask<bool>(false);
            ((VehicleConfigComponentCommon)((IVehicleConfigComponentGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IVehicleConfigComponentGetter item,
            IVehicleConfigComponentGetter rhs,
            VehicleConfigComponent.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.SuspensionBoneModifiers = item.SuspensionBoneModifiers.CollectionEqualsHelper(
                rhs.SuspensionBoneModifiers,
                (l, r) => object.Equals(l, r),
                include);
            ret.Config = EqualsMaskHelper.EqualsHelper(
                item.Config,
                rhs.Config,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.MountedWeapon = item.MountedWeapon.Equals(rhs.MountedWeapon);
            ret.Weapon = EqualsMaskHelper.EqualsHelper(
                item.Weapon,
                rhs.Weapon,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.WWise = EqualsMaskHelper.EqualsHelper(
                item.WWise,
                rhs.WWise,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Material = EqualsMaskHelper.EqualsHelper(
                item.Material,
                rhs.Material,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IVehicleConfigComponentGetter item,
            string? name = null,
            VehicleConfigComponent.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IVehicleConfigComponentGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            VehicleConfigComponent.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"VehicleConfigComponent =>");
            }
            else
            {
                sb.AppendLine($"{name} (VehicleConfigComponent) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IVehicleConfigComponentGetter item,
            StructuredStringBuilder sb,
            VehicleConfigComponent.Mask<bool>? printMask = null)
        {
            AComponentCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.SuspensionBoneModifiers?.Overall ?? true)
                && item.SuspensionBoneModifiers is {} SuspensionBoneModifiersItem)
            {
                sb.AppendLine("SuspensionBoneModifiers =>");
                using (sb.Brace())
                {
                    foreach (var subItem in SuspensionBoneModifiersItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Config?.Overall ?? true)
                && item.Config is {} ConfigItem)
            {
                ConfigItem?.Print(sb, "Config");
            }
            if (printMask?.MountedWeapon ?? true)
            {
                sb.AppendItem(item.MountedWeapon.FormKeyNullable, "MountedWeapon");
            }
            if ((printMask?.Weapon?.Overall ?? true)
                && item.Weapon is {} WeaponItem)
            {
                WeaponItem?.Print(sb, "Weapon");
            }
            if ((printMask?.WWise?.Overall ?? true)
                && item.WWise is {} WWiseItem)
            {
                WWiseItem?.Print(sb, "WWise");
            }
            if ((printMask?.Material?.Overall ?? true)
                && item.Material is {} MaterialItem)
            {
                MaterialItem?.Print(sb, "Material");
            }
        }
        
        public static VehicleConfigComponent_FieldIndex ConvertFieldIndex(AComponent_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IVehicleConfigComponentGetter? lhs,
            IVehicleConfigComponentGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAComponentGetter)lhs, (IAComponentGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigComponent_FieldIndex.SuspensionBoneModifiers) ?? true))
            {
                if (!lhs.SuspensionBoneModifiers.SequenceEqualNullable(rhs.SuspensionBoneModifiers)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigComponent_FieldIndex.Config) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Config, rhs.Config, out var lhsConfig, out var rhsConfig, out var isConfigEqual))
                {
                    if (!((VehicleConfigDataCommon)((IVehicleConfigDataGetter)lhsConfig).CommonInstance()!).Equals(lhsConfig, rhsConfig, equalsMask?.GetSubCrystal((int)VehicleConfigComponent_FieldIndex.Config))) return false;
                }
                else if (!isConfigEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigComponent_FieldIndex.MountedWeapon) ?? true))
            {
                if (!lhs.MountedWeapon.Equals(rhs.MountedWeapon)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigComponent_FieldIndex.Weapon) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Weapon, rhs.Weapon, out var lhsWeapon, out var rhsWeapon, out var isWeaponEqual))
                {
                    if (!((VehicleWeaponDataCommon)((IVehicleWeaponDataGetter)lhsWeapon).CommonInstance()!).Equals(lhsWeapon, rhsWeapon, equalsMask?.GetSubCrystal((int)VehicleConfigComponent_FieldIndex.Weapon))) return false;
                }
                else if (!isWeaponEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigComponent_FieldIndex.WWise) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.WWise, rhs.WWise, out var lhsWWise, out var rhsWWise, out var isWWiseEqual))
                {
                    if (!((VehicleWWiseDataCommon)((IVehicleWWiseDataGetter)lhsWWise).CommonInstance()!).Equals(lhsWWise, rhsWWise, equalsMask?.GetSubCrystal((int)VehicleConfigComponent_FieldIndex.WWise))) return false;
                }
                else if (!isWWiseEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigComponent_FieldIndex.Material) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Material, rhs.Material, out var lhsMaterial, out var rhsMaterial, out var isMaterialEqual))
                {
                    if (!((VehicleMaterialTableCommon)((IVehicleMaterialTableGetter)lhsMaterial).CommonInstance()!).Equals(lhsMaterial, rhsMaterial, equalsMask?.GetSubCrystal((int)VehicleConfigComponent_FieldIndex.Material))) return false;
                }
                else if (!isMaterialEqual) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAComponentGetter? lhs,
            IAComponentGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IVehicleConfigComponentGetter?)lhs,
                rhs: rhs as IVehicleConfigComponentGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IVehicleConfigComponentGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.SuspensionBoneModifiers);
            if (item.Config is {} Configitem)
            {
                hash.Add(Configitem);
            }
            hash.Add(item.MountedWeapon);
            if (item.Weapon is {} Weaponitem)
            {
                hash.Add(Weaponitem);
            }
            if (item.WWise is {} WWiseitem)
            {
                hash.Add(WWiseitem);
            }
            if (item.Material is {} Materialitem)
            {
                hash.Add(Materialitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAComponentGetter item)
        {
            return GetHashCode(item: (IVehicleConfigComponentGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return VehicleConfigComponent.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IVehicleConfigComponentGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.SuspensionBoneModifiers is {} SuspensionBoneModifiersItem)
            {
                foreach (var item in SuspensionBoneModifiersItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.MountedWeapon, out var MountedWeaponInfo))
            {
                yield return MountedWeaponInfo;
            }
            if (obj.WWise is {} WWiseItems)
            {
                foreach (var item in WWiseItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Material is {} MaterialItems)
            {
                foreach (var item in MaterialItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class VehicleConfigComponentSetterTranslationCommon : AComponentSetterTranslationCommon
    {
        public new static readonly VehicleConfigComponentSetterTranslationCommon Instance = new VehicleConfigComponentSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IVehicleConfigComponent item,
            IVehicleConfigComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAComponent)item,
                (IAComponentGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigComponent_FieldIndex.SuspensionBoneModifiers) ?? true))
            {
                errorMask?.PushIndex((int)VehicleConfigComponent_FieldIndex.SuspensionBoneModifiers);
                try
                {
                    if ((rhs.SuspensionBoneModifiers != null))
                    {
                        item.SuspensionBoneModifiers = 
                            rhs.SuspensionBoneModifiers
                                .Select(b => (IFormLinkGetter<IBoneModifierGetter>)new FormLink<IBoneModifierGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IBoneModifierGetter>>();
                    }
                    else
                    {
                        item.SuspensionBoneModifiers = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigComponent_FieldIndex.Config) ?? true))
            {
                errorMask?.PushIndex((int)VehicleConfigComponent_FieldIndex.Config);
                try
                {
                    if(rhs.Config is {} rhsConfig)
                    {
                        item.Config = rhsConfig.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)VehicleConfigComponent_FieldIndex.Config));
                    }
                    else
                    {
                        item.Config = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigComponent_FieldIndex.MountedWeapon) ?? true))
            {
                item.MountedWeapon.SetTo(rhs.MountedWeapon.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigComponent_FieldIndex.Weapon) ?? true))
            {
                errorMask?.PushIndex((int)VehicleConfigComponent_FieldIndex.Weapon);
                try
                {
                    if(rhs.Weapon is {} rhsWeapon)
                    {
                        item.Weapon = rhsWeapon.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)VehicleConfigComponent_FieldIndex.Weapon));
                    }
                    else
                    {
                        item.Weapon = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigComponent_FieldIndex.WWise) ?? true))
            {
                errorMask?.PushIndex((int)VehicleConfigComponent_FieldIndex.WWise);
                try
                {
                    if(rhs.WWise is {} rhsWWise)
                    {
                        item.WWise = rhsWWise.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)VehicleConfigComponent_FieldIndex.WWise));
                    }
                    else
                    {
                        item.WWise = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigComponent_FieldIndex.Material) ?? true))
            {
                errorMask?.PushIndex((int)VehicleConfigComponent_FieldIndex.Material);
                try
                {
                    if(rhs.Material is {} rhsMaterial)
                    {
                        item.Material = rhsMaterial.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)VehicleConfigComponent_FieldIndex.Material));
                    }
                    else
                    {
                        item.Material = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IVehicleConfigComponent item,
            IVehicleConfigComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        
        public override void DeepCopyIn(
            IAComponent item,
            IAComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IVehicleConfigComponent)item,
                rhs: (IVehicleConfigComponentGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public VehicleConfigComponent DeepCopy(
            IVehicleConfigComponentGetter item,
            VehicleConfigComponent.TranslationMask? copyMask = null)
        {
            VehicleConfigComponent ret = (VehicleConfigComponent)((VehicleConfigComponentCommon)((IVehicleConfigComponentGetter)item).CommonInstance()!).GetNew();
            ((VehicleConfigComponentSetterTranslationCommon)((IVehicleConfigComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public VehicleConfigComponent DeepCopy(
            IVehicleConfigComponentGetter item,
            out VehicleConfigComponent.ErrorMask errorMask,
            VehicleConfigComponent.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            VehicleConfigComponent ret = (VehicleConfigComponent)((VehicleConfigComponentCommon)((IVehicleConfigComponentGetter)item).CommonInstance()!).GetNew();
            ((VehicleConfigComponentSetterTranslationCommon)((IVehicleConfigComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = VehicleConfigComponent.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public VehicleConfigComponent DeepCopy(
            IVehicleConfigComponentGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            VehicleConfigComponent ret = (VehicleConfigComponent)((VehicleConfigComponentCommon)((IVehicleConfigComponentGetter)item).CommonInstance()!).GetNew();
            ((VehicleConfigComponentSetterTranslationCommon)((IVehicleConfigComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class VehicleConfigComponent
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => VehicleConfigComponent_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => VehicleConfigComponent_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => VehicleConfigComponentCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return VehicleConfigComponentSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => VehicleConfigComponentSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class VehicleConfigComponentBinaryWriteTranslation :
        AComponentBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly VehicleConfigComponentBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IVehicleConfigComponentGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            AComponentBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IBoneModifierGetter>>.Instance.Write(
                writer: writer,
                items: item.SuspensionBoneModifiers,
                recordType: translationParams.ConvertToCustom(RecordTypes.VCSB),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IBoneModifierGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            if (item.Config is {} ConfigItem)
            {
                ((VehicleConfigDataBinaryWriteTranslation)((IBinaryItem)ConfigItem).BinaryWriteTranslator).Write(
                    item: ConfigItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MountedWeapon,
                header: translationParams.ConvertToCustom(RecordTypes.VCMT));
            if (item.Weapon is {} WeaponItem)
            {
                ((VehicleWeaponDataBinaryWriteTranslation)((IBinaryItem)WeaponItem).BinaryWriteTranslator).Write(
                    item: WeaponItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.WWise is {} WWiseItem)
            {
                ((VehicleWWiseDataBinaryWriteTranslation)((IBinaryItem)WWiseItem).BinaryWriteTranslator).Write(
                    item: WWiseItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.Material is {} MaterialItem)
            {
                ((VehicleMaterialTableBinaryWriteTranslation)((IBinaryItem)MaterialItem).BinaryWriteTranslator).Write(
                    item: MaterialItem,
                    writer: writer,
                    translationParams: translationParams);
            }
        }

        public void Write(
            MutagenWriter writer,
            IVehicleConfigComponentGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, RecordTypes.BFCE)) { } // End Marker
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IVehicleConfigComponentGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IAComponentGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IVehicleConfigComponentGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class VehicleConfigComponentBinaryCreateTranslation : AComponentBinaryCreateTranslation
    {
        public new static readonly VehicleConfigComponentBinaryCreateTranslation Instance = new VehicleConfigComponentBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IVehicleConfigComponent item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VCSB:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SuspensionBoneModifiers = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IBoneModifierGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IBoneModifierGetter>>();
                    return (int)VehicleConfigComponent_FieldIndex.SuspensionBoneModifiers;
                }
                case RecordTypeInts.VCCD:
                {
                    item.Config = Mutagen.Bethesda.Starfield.VehicleConfigData.CreateFromBinary(frame: frame);
                    return (int)VehicleConfigComponent_FieldIndex.Config;
                }
                case RecordTypeInts.VCMT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MountedWeapon.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)VehicleConfigComponent_FieldIndex.MountedWeapon;
                }
                case RecordTypeInts.VCTT:
                {
                    item.Weapon = Mutagen.Bethesda.Starfield.VehicleWeaponData.CreateFromBinary(frame: frame);
                    return (int)VehicleConfigComponent_FieldIndex.Weapon;
                }
                case RecordTypeInts.VWWD:
                {
                    item.WWise = Mutagen.Bethesda.Starfield.VehicleWWiseData.CreateFromBinary(frame: frame);
                    return (int)VehicleConfigComponent_FieldIndex.WWise;
                }
                case RecordTypeInts.VMRT:
                {
                    item.Material = Mutagen.Bethesda.Starfield.VehicleMaterialTable.CreateFromBinary(frame: frame);
                    return (int)VehicleConfigComponent_FieldIndex.Material;
                }
                default:
                    return AComponentBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class VehicleConfigComponentBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class VehicleConfigComponentBinaryOverlay :
        AComponentBinaryOverlay,
        IVehicleConfigComponentGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => VehicleConfigComponent_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => VehicleConfigComponent_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => VehicleConfigComponentCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => VehicleConfigComponentSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => VehicleConfigComponentCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => VehicleConfigComponentBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((VehicleConfigComponentBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public IReadOnlyList<IFormLinkGetter<IBoneModifierGetter>>? SuspensionBoneModifiers { get; private set; }
        #region Config
        private RangeInt32? _ConfigLocation;
        public IVehicleConfigDataGetter? Config => _ConfigLocation.HasValue ? VehicleConfigDataBinaryOverlay.VehicleConfigDataFactory(_recordData.Slice(_ConfigLocation!.Value.Min), _package) : default;
        #endregion
        #region MountedWeapon
        private int? _MountedWeaponLocation;
        public IFormLinkNullableGetter<IWeaponGetter> MountedWeapon => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IWeaponGetter>(_package, _recordData, _MountedWeaponLocation);
        #endregion
        #region Weapon
        private RangeInt32? _WeaponLocation;
        public IVehicleWeaponDataGetter? Weapon => _WeaponLocation.HasValue ? VehicleWeaponDataBinaryOverlay.VehicleWeaponDataFactory(_recordData.Slice(_WeaponLocation!.Value.Min), _package) : default;
        #endregion
        #region WWise
        private RangeInt32? _WWiseLocation;
        public IVehicleWWiseDataGetter? WWise => _WWiseLocation.HasValue ? VehicleWWiseDataBinaryOverlay.VehicleWWiseDataFactory(_recordData.Slice(_WWiseLocation!.Value.Min), _package) : default;
        #endregion
        #region Material
        private RangeInt32? _MaterialLocation;
        public IVehicleMaterialTableGetter? Material => _MaterialLocation.HasValue ? VehicleMaterialTableBinaryOverlay.VehicleMaterialTableFactory(_recordData.Slice(_MaterialLocation!.Value.Min), _package) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected VehicleConfigComponentBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IVehicleConfigComponentGetter VehicleConfigComponentFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new VehicleConfigComponentBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IVehicleConfigComponentGetter VehicleConfigComponentFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return VehicleConfigComponentFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VCSB:
                {
                    this.SuspensionBoneModifiers = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IBoneModifierGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IBoneModifierGetter>(p, s));
                    return (int)VehicleConfigComponent_FieldIndex.SuspensionBoneModifiers;
                }
                case RecordTypeInts.VCCD:
                {
                    _ConfigLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)VehicleConfigComponent_FieldIndex.Config;
                }
                case RecordTypeInts.VCMT:
                {
                    _MountedWeaponLocation = (stream.Position - offset);
                    return (int)VehicleConfigComponent_FieldIndex.MountedWeapon;
                }
                case RecordTypeInts.VCTT:
                {
                    _WeaponLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)VehicleConfigComponent_FieldIndex.Weapon;
                }
                case RecordTypeInts.VWWD:
                {
                    _WWiseLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)VehicleConfigComponent_FieldIndex.WWise;
                }
                case RecordTypeInts.VMRT:
                {
                    _MaterialLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)VehicleConfigComponent_FieldIndex.Material;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            VehicleConfigComponentMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IVehicleConfigComponentGetter rhs) return false;
            return ((VehicleConfigComponentCommon)((IVehicleConfigComponentGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IVehicleConfigComponentGetter? obj)
        {
            return ((VehicleConfigComponentCommon)((IVehicleConfigComponentGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((VehicleConfigComponentCommon)((IVehicleConfigComponentGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

