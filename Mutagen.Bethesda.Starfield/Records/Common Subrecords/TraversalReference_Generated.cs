/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class TraversalReference :
        IEquatable<ITraversalReferenceGetter>,
        ILoquiObjectSetter<TraversalReference>,
        ITraversalReference
    {
        #region Ctor
        public TraversalReference()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Unknown1
        public Int32 Unknown1 { get; set; } = default(Int32);
        #endregion
        #region From
        public P3Float From { get; set; } = default(P3Float);
        #endregion
        #region To
        public P3Float To { get; set; } = default(P3Float);
        #endregion
        #region UnknownVector
        public P3Float UnknownVector { get; set; } = default(P3Float);
        #endregion
        #region Traversal
        private readonly IFormLinkNullable<ITraversalGetter> _Traversal = new FormLinkNullable<ITraversalGetter>();
        public IFormLinkNullable<ITraversalGetter> Traversal
        {
            get => _Traversal;
            set => _Traversal.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ITraversalGetter> ITraversalReferenceGetter.Traversal => this.Traversal;
        #endregion
        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unknown = new byte[8];
        public MemorySlice<Byte> Unknown
        {
            get => _Unknown;
            set => this._Unknown = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> ITraversalReferenceGetter.Unknown => this.Unknown;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TraversalReferenceMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ITraversalReferenceGetter rhs) return false;
            return ((TraversalReferenceCommon)((ITraversalReferenceGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITraversalReferenceGetter? obj)
        {
            return ((TraversalReferenceCommon)((ITraversalReferenceGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TraversalReferenceCommon)((ITraversalReferenceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Unknown1 = initialValue;
                this.From = initialValue;
                this.To = initialValue;
                this.UnknownVector = initialValue;
                this.Traversal = initialValue;
                this.Unknown = initialValue;
            }

            public Mask(
                TItem Unknown1,
                TItem From,
                TItem To,
                TItem UnknownVector,
                TItem Traversal,
                TItem Unknown)
            {
                this.Unknown1 = Unknown1;
                this.From = From;
                this.To = To;
                this.UnknownVector = UnknownVector;
                this.Traversal = Traversal;
                this.Unknown = Unknown;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Unknown1;
            public TItem From;
            public TItem To;
            public TItem UnknownVector;
            public TItem Traversal;
            public TItem Unknown;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Unknown1, rhs.Unknown1)) return false;
                if (!object.Equals(this.From, rhs.From)) return false;
                if (!object.Equals(this.To, rhs.To)) return false;
                if (!object.Equals(this.UnknownVector, rhs.UnknownVector)) return false;
                if (!object.Equals(this.Traversal, rhs.Traversal)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Unknown1);
                hash.Add(this.From);
                hash.Add(this.To);
                hash.Add(this.UnknownVector);
                hash.Add(this.Traversal);
                hash.Add(this.Unknown);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Unknown1)) return false;
                if (!eval(this.From)) return false;
                if (!eval(this.To)) return false;
                if (!eval(this.UnknownVector)) return false;
                if (!eval(this.Traversal)) return false;
                if (!eval(this.Unknown)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Unknown1)) return true;
                if (eval(this.From)) return true;
                if (eval(this.To)) return true;
                if (eval(this.UnknownVector)) return true;
                if (eval(this.Traversal)) return true;
                if (eval(this.Unknown)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new TraversalReference.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Unknown1 = eval(this.Unknown1);
                obj.From = eval(this.From);
                obj.To = eval(this.To);
                obj.UnknownVector = eval(this.UnknownVector);
                obj.Traversal = eval(this.Traversal);
                obj.Unknown = eval(this.Unknown);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(TraversalReference.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, TraversalReference.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(TraversalReference.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Unknown1 ?? true)
                    {
                        sb.AppendItem(Unknown1, "Unknown1");
                    }
                    if (printMask?.From ?? true)
                    {
                        sb.AppendItem(From, "From");
                    }
                    if (printMask?.To ?? true)
                    {
                        sb.AppendItem(To, "To");
                    }
                    if (printMask?.UnknownVector ?? true)
                    {
                        sb.AppendItem(UnknownVector, "UnknownVector");
                    }
                    if (printMask?.Traversal ?? true)
                    {
                        sb.AppendItem(Traversal, "Traversal");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Unknown1;
            public Exception? From;
            public Exception? To;
            public Exception? UnknownVector;
            public Exception? Traversal;
            public Exception? Unknown;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                TraversalReference_FieldIndex enu = (TraversalReference_FieldIndex)index;
                switch (enu)
                {
                    case TraversalReference_FieldIndex.Unknown1:
                        return Unknown1;
                    case TraversalReference_FieldIndex.From:
                        return From;
                    case TraversalReference_FieldIndex.To:
                        return To;
                    case TraversalReference_FieldIndex.UnknownVector:
                        return UnknownVector;
                    case TraversalReference_FieldIndex.Traversal:
                        return Traversal;
                    case TraversalReference_FieldIndex.Unknown:
                        return Unknown;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                TraversalReference_FieldIndex enu = (TraversalReference_FieldIndex)index;
                switch (enu)
                {
                    case TraversalReference_FieldIndex.Unknown1:
                        this.Unknown1 = ex;
                        break;
                    case TraversalReference_FieldIndex.From:
                        this.From = ex;
                        break;
                    case TraversalReference_FieldIndex.To:
                        this.To = ex;
                        break;
                    case TraversalReference_FieldIndex.UnknownVector:
                        this.UnknownVector = ex;
                        break;
                    case TraversalReference_FieldIndex.Traversal:
                        this.Traversal = ex;
                        break;
                    case TraversalReference_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                TraversalReference_FieldIndex enu = (TraversalReference_FieldIndex)index;
                switch (enu)
                {
                    case TraversalReference_FieldIndex.Unknown1:
                        this.Unknown1 = (Exception?)obj;
                        break;
                    case TraversalReference_FieldIndex.From:
                        this.From = (Exception?)obj;
                        break;
                    case TraversalReference_FieldIndex.To:
                        this.To = (Exception?)obj;
                        break;
                    case TraversalReference_FieldIndex.UnknownVector:
                        this.UnknownVector = (Exception?)obj;
                        break;
                    case TraversalReference_FieldIndex.Traversal:
                        this.Traversal = (Exception?)obj;
                        break;
                    case TraversalReference_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Unknown1 != null) return true;
                if (From != null) return true;
                if (To != null) return true;
                if (UnknownVector != null) return true;
                if (Traversal != null) return true;
                if (Unknown != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Unknown1, "Unknown1");
                }
                {
                    sb.AppendItem(From, "From");
                }
                {
                    sb.AppendItem(To, "To");
                }
                {
                    sb.AppendItem(UnknownVector, "UnknownVector");
                }
                {
                    sb.AppendItem(Traversal, "Traversal");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Unknown1 = this.Unknown1.Combine(rhs.Unknown1);
                ret.From = this.From.Combine(rhs.From);
                ret.To = this.To.Combine(rhs.To);
                ret.UnknownVector = this.UnknownVector.Combine(rhs.UnknownVector);
                ret.Traversal = this.Traversal.Combine(rhs.Traversal);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Unknown1;
            public bool From;
            public bool To;
            public bool UnknownVector;
            public bool Traversal;
            public bool Unknown;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Unknown1 = defaultOn;
                this.From = defaultOn;
                this.To = defaultOn;
                this.UnknownVector = defaultOn;
                this.Traversal = defaultOn;
                this.Unknown = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Unknown1, null));
                ret.Add((From, null));
                ret.Add((To, null));
                ret.Add((UnknownVector, null));
                ret.Add((Traversal, null));
                ret.Add((Unknown, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => TraversalReferenceCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => TraversalReferenceSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TraversalReferenceBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TraversalReferenceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static TraversalReference CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new TraversalReference();
            ((TraversalReferenceSetterCommon)((ITraversalReferenceGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out TraversalReference item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((TraversalReferenceSetterCommon)((ITraversalReferenceGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static TraversalReference GetNew()
        {
            return new TraversalReference();
        }

    }
    #endregion

    #region Interface
    public partial interface ITraversalReference :
        IFormLinkContainer,
        ILoquiObjectSetter<ITraversalReference>,
        ITraversalReferenceGetter
    {
        new Int32 Unknown1 { get; set; }
        new P3Float From { get; set; }
        new P3Float To { get; set; }
        new P3Float UnknownVector { get; set; }
        new IFormLinkNullable<ITraversalGetter> Traversal { get; set; }
        new MemorySlice<Byte> Unknown { get; set; }
    }

    public partial interface ITraversalReferenceGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ITraversalReferenceGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => TraversalReference_Registration.Instance;
        Int32 Unknown1 { get; }
        P3Float From { get; }
        P3Float To { get; }
        P3Float UnknownVector { get; }
        IFormLinkNullableGetter<ITraversalGetter> Traversal { get; }
        ReadOnlyMemorySlice<Byte> Unknown { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class TraversalReferenceMixIn
    {
        public static void Clear(this ITraversalReference item)
        {
            ((TraversalReferenceSetterCommon)((ITraversalReferenceGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static TraversalReference.Mask<bool> GetEqualsMask(
            this ITraversalReferenceGetter item,
            ITraversalReferenceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TraversalReferenceCommon)((ITraversalReferenceGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ITraversalReferenceGetter item,
            string? name = null,
            TraversalReference.Mask<bool>? printMask = null)
        {
            return ((TraversalReferenceCommon)((ITraversalReferenceGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ITraversalReferenceGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            TraversalReference.Mask<bool>? printMask = null)
        {
            ((TraversalReferenceCommon)((ITraversalReferenceGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ITraversalReferenceGetter item,
            ITraversalReferenceGetter rhs,
            TraversalReference.TranslationMask? equalsMask = null)
        {
            return ((TraversalReferenceCommon)((ITraversalReferenceGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ITraversalReference lhs,
            ITraversalReferenceGetter rhs)
        {
            ((TraversalReferenceSetterTranslationCommon)((ITraversalReferenceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ITraversalReference lhs,
            ITraversalReferenceGetter rhs,
            TraversalReference.TranslationMask? copyMask = null)
        {
            ((TraversalReferenceSetterTranslationCommon)((ITraversalReferenceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ITraversalReference lhs,
            ITraversalReferenceGetter rhs,
            out TraversalReference.ErrorMask errorMask,
            TraversalReference.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TraversalReferenceSetterTranslationCommon)((ITraversalReferenceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = TraversalReference.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITraversalReference lhs,
            ITraversalReferenceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TraversalReferenceSetterTranslationCommon)((ITraversalReferenceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static TraversalReference DeepCopy(
            this ITraversalReferenceGetter item,
            TraversalReference.TranslationMask? copyMask = null)
        {
            return ((TraversalReferenceSetterTranslationCommon)((ITraversalReferenceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static TraversalReference DeepCopy(
            this ITraversalReferenceGetter item,
            out TraversalReference.ErrorMask errorMask,
            TraversalReference.TranslationMask? copyMask = null)
        {
            return ((TraversalReferenceSetterTranslationCommon)((ITraversalReferenceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static TraversalReference DeepCopy(
            this ITraversalReferenceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TraversalReferenceSetterTranslationCommon)((ITraversalReferenceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ITraversalReference item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((TraversalReferenceSetterCommon)((ITraversalReferenceGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum TraversalReference_FieldIndex
    {
        Unknown1 = 0,
        From = 1,
        To = 2,
        UnknownVector = 3,
        Traversal = 4,
        Unknown = 5,
    }
    #endregion

    #region Registration
    internal partial class TraversalReference_Registration : ILoquiRegistration
    {
        public static readonly TraversalReference_Registration Instance = new TraversalReference_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(TraversalReference.Mask<>);

        public static readonly Type ErrorMaskType = typeof(TraversalReference.ErrorMask);

        public static readonly Type ClassType = typeof(TraversalReference);

        public static readonly Type GetterType = typeof(ITraversalReferenceGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITraversalReference);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.TraversalReference";

        public const string Name = "TraversalReference";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(TraversalReferenceBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class TraversalReferenceSetterCommon
    {
        public static readonly TraversalReferenceSetterCommon Instance = new TraversalReferenceSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITraversalReference item)
        {
            ClearPartial();
            item.Unknown1 = default(Int32);
            item.From = default(P3Float);
            item.To = default(P3Float);
            item.UnknownVector = default(P3Float);
            item.Traversal.Clear();
            item.Unknown = new byte[8];
        }
        
        #region Mutagen
        public void RemapLinks(ITraversalReference obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Traversal.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ITraversalReference item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: TraversalReferenceBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class TraversalReferenceCommon
    {
        public static readonly TraversalReferenceCommon Instance = new TraversalReferenceCommon();

        public TraversalReference.Mask<bool> GetEqualsMask(
            ITraversalReferenceGetter item,
            ITraversalReferenceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TraversalReference.Mask<bool>(false);
            ((TraversalReferenceCommon)((ITraversalReferenceGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITraversalReferenceGetter item,
            ITraversalReferenceGetter rhs,
            TraversalReference.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Unknown1 = item.Unknown1 == rhs.Unknown1;
            ret.From = item.From.Equals(rhs.From);
            ret.To = item.To.Equals(rhs.To);
            ret.UnknownVector = item.UnknownVector.Equals(rhs.UnknownVector);
            ret.Traversal = item.Traversal.Equals(rhs.Traversal);
            ret.Unknown = MemoryExtensions.SequenceEqual(item.Unknown.Span, rhs.Unknown.Span);
        }
        
        public string Print(
            ITraversalReferenceGetter item,
            string? name = null,
            TraversalReference.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ITraversalReferenceGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            TraversalReference.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"TraversalReference =>");
            }
            else
            {
                sb.AppendLine($"{name} (TraversalReference) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ITraversalReferenceGetter item,
            StructuredStringBuilder sb,
            TraversalReference.Mask<bool>? printMask = null)
        {
            if (printMask?.Unknown1 ?? true)
            {
                sb.AppendItem(item.Unknown1, "Unknown1");
            }
            if (printMask?.From ?? true)
            {
                sb.AppendItem(item.From, "From");
            }
            if (printMask?.To ?? true)
            {
                sb.AppendItem(item.To, "To");
            }
            if (printMask?.UnknownVector ?? true)
            {
                sb.AppendItem(item.UnknownVector, "UnknownVector");
            }
            if (printMask?.Traversal ?? true)
            {
                sb.AppendItem(item.Traversal.FormKeyNullable, "Traversal");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendLine($"Unknown => {SpanExt.ToHexString(item.Unknown)}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITraversalReferenceGetter? lhs,
            ITraversalReferenceGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)TraversalReference_FieldIndex.Unknown1) ?? true))
            {
                if (lhs.Unknown1 != rhs.Unknown1) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TraversalReference_FieldIndex.From) ?? true))
            {
                if (!lhs.From.Equals(rhs.From)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TraversalReference_FieldIndex.To) ?? true))
            {
                if (!lhs.To.Equals(rhs.To)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TraversalReference_FieldIndex.UnknownVector) ?? true))
            {
                if (!lhs.UnknownVector.Equals(rhs.UnknownVector)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TraversalReference_FieldIndex.Traversal) ?? true))
            {
                if (!lhs.Traversal.Equals(rhs.Traversal)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TraversalReference_FieldIndex.Unknown) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.Unknown.Span, rhs.Unknown.Span)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ITraversalReferenceGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Unknown1);
            hash.Add(item.From);
            hash.Add(item.To);
            hash.Add(item.UnknownVector);
            hash.Add(item.Traversal);
            hash.Add(item.Unknown);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return TraversalReference.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ITraversalReferenceGetter obj)
        {
            if (FormLinkInformation.TryFactory(obj.Traversal, out var TraversalInfo))
            {
                yield return TraversalInfo;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class TraversalReferenceSetterTranslationCommon
    {
        public static readonly TraversalReferenceSetterTranslationCommon Instance = new TraversalReferenceSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ITraversalReference item,
            ITraversalReferenceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)TraversalReference_FieldIndex.Unknown1) ?? true))
            {
                item.Unknown1 = rhs.Unknown1;
            }
            if ((copyMask?.GetShouldTranslate((int)TraversalReference_FieldIndex.From) ?? true))
            {
                item.From = rhs.From;
            }
            if ((copyMask?.GetShouldTranslate((int)TraversalReference_FieldIndex.To) ?? true))
            {
                item.To = rhs.To;
            }
            if ((copyMask?.GetShouldTranslate((int)TraversalReference_FieldIndex.UnknownVector) ?? true))
            {
                item.UnknownVector = rhs.UnknownVector;
            }
            if ((copyMask?.GetShouldTranslate((int)TraversalReference_FieldIndex.Traversal) ?? true))
            {
                item.Traversal.SetTo(rhs.Traversal.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)TraversalReference_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown.ToArray();
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ITraversalReference item,
            ITraversalReferenceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public TraversalReference DeepCopy(
            ITraversalReferenceGetter item,
            TraversalReference.TranslationMask? copyMask = null)
        {
            TraversalReference ret = (TraversalReference)((TraversalReferenceCommon)((ITraversalReferenceGetter)item).CommonInstance()!).GetNew();
            ((TraversalReferenceSetterTranslationCommon)((ITraversalReferenceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public TraversalReference DeepCopy(
            ITraversalReferenceGetter item,
            out TraversalReference.ErrorMask errorMask,
            TraversalReference.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            TraversalReference ret = (TraversalReference)((TraversalReferenceCommon)((ITraversalReferenceGetter)item).CommonInstance()!).GetNew();
            ((TraversalReferenceSetterTranslationCommon)((ITraversalReferenceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = TraversalReference.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public TraversalReference DeepCopy(
            ITraversalReferenceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            TraversalReference ret = (TraversalReference)((TraversalReferenceCommon)((ITraversalReferenceGetter)item).CommonInstance()!).GetNew();
            ((TraversalReferenceSetterTranslationCommon)((ITraversalReferenceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class TraversalReference
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TraversalReference_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => TraversalReference_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TraversalReferenceCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return TraversalReferenceSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TraversalReferenceSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITraversalReferenceGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ITraversalReferenceGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ITraversalReferenceGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class TraversalReferenceBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly TraversalReferenceBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ITraversalReferenceGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Unknown1);
            P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.From);
            P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.To);
            P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.UnknownVector);
            TraversalReferenceBinaryWriteTranslation.WriteBinaryTraversal(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryTraversalCustom(
            MutagenWriter writer,
            ITraversalReferenceGetter item);

        public static void WriteBinaryTraversal(
            MutagenWriter writer,
            ITraversalReferenceGetter item)
        {
            WriteBinaryTraversalCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            ITraversalReferenceGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ITraversalReferenceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class TraversalReferenceBinaryCreateTranslation
    {
        public static readonly TraversalReferenceBinaryCreateTranslation Instance = new TraversalReferenceBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ITraversalReference item,
            MutagenFrame frame)
        {
            item.Unknown1 = frame.ReadInt32();
            item.From = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.To = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.UnknownVector = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            if (frame.Complete) return;
            TraversalReferenceBinaryCreateTranslation.FillBinaryTraversalCustom(
                frame: frame,
                item: item);
        }

        public static partial void FillBinaryTraversalCustom(
            MutagenFrame frame,
            ITraversalReference item);

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class TraversalReferenceBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ITraversalReferenceGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TraversalReferenceBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class TraversalReferenceBinaryOverlay :
        PluginBinaryOverlay,
        ITraversalReferenceGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TraversalReference_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => TraversalReference_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TraversalReferenceCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TraversalReferenceSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITraversalReferenceGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ITraversalReferenceGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ITraversalReferenceGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => TraversalReferenceCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TraversalReferenceBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TraversalReferenceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Int32 Unknown1 => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0x0, 0x4));
        public P3Float From => P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_structData.Slice(0x4, 0xC));
        public P3Float To => P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_structData.Slice(0x10, 0xC));
        public P3Float UnknownVector => P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_structData.Slice(0x1C, 0xC));
        #region Traversal
        public partial IFormLinkNullableGetter<ITraversalGetter> GetTraversalCustom(int location);
        public IFormLinkNullableGetter<ITraversalGetter> Traversal => GetTraversalCustom(location: 0x28);
        protected int TraversalEndingPos;
        partial void CustomTraversalEndPos();
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected TraversalReferenceBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ITraversalReferenceGetter TraversalReferenceFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new TraversalReferenceBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += ret.TraversalEndingPos;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ITraversalReferenceGetter TraversalReferenceFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return TraversalReferenceFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TraversalReferenceMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ITraversalReferenceGetter rhs) return false;
            return ((TraversalReferenceCommon)((ITraversalReferenceGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITraversalReferenceGetter? obj)
        {
            return ((TraversalReferenceCommon)((ITraversalReferenceGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TraversalReferenceCommon)((ITraversalReferenceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

