/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class SpaceshipWeaponBindingsComponent :
        AComponent,
        IEquatable<ISpaceshipWeaponBindingsComponentGetter>,
        ILoquiObjectSetter<SpaceshipWeaponBindingsComponent>,
        ISpaceshipWeaponBindingsComponent
    {
        #region Ctor
        public SpaceshipWeaponBindingsComponent()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Slot1
        public Int32 Slot1 { get; set; } = default(Int32);
        #endregion
        #region Slot2
        public Int32 Slot2 { get; set; } = default(Int32);
        #endregion
        #region Slot3
        public Int32 Slot3 { get; set; } = default(Int32);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SpaceshipWeaponBindingsComponentMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISpaceshipWeaponBindingsComponentGetter rhs) return false;
            return ((SpaceshipWeaponBindingsComponentCommon)((ISpaceshipWeaponBindingsComponentGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISpaceshipWeaponBindingsComponentGetter? obj)
        {
            return ((SpaceshipWeaponBindingsComponentCommon)((ISpaceshipWeaponBindingsComponentGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SpaceshipWeaponBindingsComponentCommon)((ISpaceshipWeaponBindingsComponentGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AComponent.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Slot1 = initialValue;
                this.Slot2 = initialValue;
                this.Slot3 = initialValue;
            }

            public Mask(
                TItem Slot1,
                TItem Slot2,
                TItem Slot3)
            : base()
            {
                this.Slot1 = Slot1;
                this.Slot2 = Slot2;
                this.Slot3 = Slot3;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Slot1;
            public TItem Slot2;
            public TItem Slot3;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Slot1, rhs.Slot1)) return false;
                if (!object.Equals(this.Slot2, rhs.Slot2)) return false;
                if (!object.Equals(this.Slot3, rhs.Slot3)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Slot1);
                hash.Add(this.Slot2);
                hash.Add(this.Slot3);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Slot1)) return false;
                if (!eval(this.Slot2)) return false;
                if (!eval(this.Slot3)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Slot1)) return true;
                if (eval(this.Slot2)) return true;
                if (eval(this.Slot3)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SpaceshipWeaponBindingsComponent.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Slot1 = eval(this.Slot1);
                obj.Slot2 = eval(this.Slot2);
                obj.Slot3 = eval(this.Slot3);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(SpaceshipWeaponBindingsComponent.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, SpaceshipWeaponBindingsComponent.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(SpaceshipWeaponBindingsComponent.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Slot1 ?? true)
                    {
                        sb.AppendItem(Slot1, "Slot1");
                    }
                    if (printMask?.Slot2 ?? true)
                    {
                        sb.AppendItem(Slot2, "Slot2");
                    }
                    if (printMask?.Slot3 ?? true)
                    {
                        sb.AppendItem(Slot3, "Slot3");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            AComponent.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Slot1;
            public Exception? Slot2;
            public Exception? Slot3;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                SpaceshipWeaponBindingsComponent_FieldIndex enu = (SpaceshipWeaponBindingsComponent_FieldIndex)index;
                switch (enu)
                {
                    case SpaceshipWeaponBindingsComponent_FieldIndex.Slot1:
                        return Slot1;
                    case SpaceshipWeaponBindingsComponent_FieldIndex.Slot2:
                        return Slot2;
                    case SpaceshipWeaponBindingsComponent_FieldIndex.Slot3:
                        return Slot3;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                SpaceshipWeaponBindingsComponent_FieldIndex enu = (SpaceshipWeaponBindingsComponent_FieldIndex)index;
                switch (enu)
                {
                    case SpaceshipWeaponBindingsComponent_FieldIndex.Slot1:
                        this.Slot1 = ex;
                        break;
                    case SpaceshipWeaponBindingsComponent_FieldIndex.Slot2:
                        this.Slot2 = ex;
                        break;
                    case SpaceshipWeaponBindingsComponent_FieldIndex.Slot3:
                        this.Slot3 = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                SpaceshipWeaponBindingsComponent_FieldIndex enu = (SpaceshipWeaponBindingsComponent_FieldIndex)index;
                switch (enu)
                {
                    case SpaceshipWeaponBindingsComponent_FieldIndex.Slot1:
                        this.Slot1 = (Exception?)obj;
                        break;
                    case SpaceshipWeaponBindingsComponent_FieldIndex.Slot2:
                        this.Slot2 = (Exception?)obj;
                        break;
                    case SpaceshipWeaponBindingsComponent_FieldIndex.Slot3:
                        this.Slot3 = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Slot1 != null) return true;
                if (Slot2 != null) return true;
                if (Slot3 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Slot1, "Slot1");
                }
                {
                    sb.AppendItem(Slot2, "Slot2");
                }
                {
                    sb.AppendItem(Slot3, "Slot3");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Slot1 = this.Slot1.Combine(rhs.Slot1);
                ret.Slot2 = this.Slot2.Combine(rhs.Slot2);
                ret.Slot3 = this.Slot3.Combine(rhs.Slot3);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AComponent.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Slot1;
            public bool Slot2;
            public bool Slot3;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Slot1 = defaultOn;
                this.Slot2 = defaultOn;
                this.Slot3 = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Slot1, null));
                ret.Add((Slot2, null));
                ret.Add((Slot3, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SpaceshipWeaponBindingsComponentBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SpaceshipWeaponBindingsComponentBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static SpaceshipWeaponBindingsComponent CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new SpaceshipWeaponBindingsComponent();
            ((SpaceshipWeaponBindingsComponentSetterCommon)((ISpaceshipWeaponBindingsComponentGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SpaceshipWeaponBindingsComponent item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SpaceshipWeaponBindingsComponentSetterCommon)((ISpaceshipWeaponBindingsComponentGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new SpaceshipWeaponBindingsComponent GetNew()
        {
            return new SpaceshipWeaponBindingsComponent();
        }

    }
    #endregion

    #region Interface
    public partial interface ISpaceshipWeaponBindingsComponent :
        IAComponent,
        ILoquiObjectSetter<ISpaceshipWeaponBindingsComponent>,
        ISpaceshipWeaponBindingsComponentGetter
    {
        new Int32 Slot1 { get; set; }
        new Int32 Slot2 { get; set; }
        new Int32 Slot3 { get; set; }
    }

    public partial interface ISpaceshipWeaponBindingsComponentGetter :
        IAComponentGetter,
        IBinaryItem,
        ILoquiObject<ISpaceshipWeaponBindingsComponentGetter>
    {
        static new ILoquiRegistration StaticRegistration => SpaceshipWeaponBindingsComponent_Registration.Instance;
        Int32 Slot1 { get; }
        Int32 Slot2 { get; }
        Int32 Slot3 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SpaceshipWeaponBindingsComponentMixIn
    {
        public static void Clear(this ISpaceshipWeaponBindingsComponent item)
        {
            ((SpaceshipWeaponBindingsComponentSetterCommon)((ISpaceshipWeaponBindingsComponentGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SpaceshipWeaponBindingsComponent.Mask<bool> GetEqualsMask(
            this ISpaceshipWeaponBindingsComponentGetter item,
            ISpaceshipWeaponBindingsComponentGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SpaceshipWeaponBindingsComponentCommon)((ISpaceshipWeaponBindingsComponentGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ISpaceshipWeaponBindingsComponentGetter item,
            string? name = null,
            SpaceshipWeaponBindingsComponent.Mask<bool>? printMask = null)
        {
            return ((SpaceshipWeaponBindingsComponentCommon)((ISpaceshipWeaponBindingsComponentGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ISpaceshipWeaponBindingsComponentGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SpaceshipWeaponBindingsComponent.Mask<bool>? printMask = null)
        {
            ((SpaceshipWeaponBindingsComponentCommon)((ISpaceshipWeaponBindingsComponentGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISpaceshipWeaponBindingsComponentGetter item,
            ISpaceshipWeaponBindingsComponentGetter rhs,
            SpaceshipWeaponBindingsComponent.TranslationMask? equalsMask = null)
        {
            return ((SpaceshipWeaponBindingsComponentCommon)((ISpaceshipWeaponBindingsComponentGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISpaceshipWeaponBindingsComponent lhs,
            ISpaceshipWeaponBindingsComponentGetter rhs,
            out SpaceshipWeaponBindingsComponent.ErrorMask errorMask,
            SpaceshipWeaponBindingsComponent.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SpaceshipWeaponBindingsComponentSetterTranslationCommon)((ISpaceshipWeaponBindingsComponentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SpaceshipWeaponBindingsComponent.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISpaceshipWeaponBindingsComponent lhs,
            ISpaceshipWeaponBindingsComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SpaceshipWeaponBindingsComponentSetterTranslationCommon)((ISpaceshipWeaponBindingsComponentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SpaceshipWeaponBindingsComponent DeepCopy(
            this ISpaceshipWeaponBindingsComponentGetter item,
            SpaceshipWeaponBindingsComponent.TranslationMask? copyMask = null)
        {
            return ((SpaceshipWeaponBindingsComponentSetterTranslationCommon)((ISpaceshipWeaponBindingsComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SpaceshipWeaponBindingsComponent DeepCopy(
            this ISpaceshipWeaponBindingsComponentGetter item,
            out SpaceshipWeaponBindingsComponent.ErrorMask errorMask,
            SpaceshipWeaponBindingsComponent.TranslationMask? copyMask = null)
        {
            return ((SpaceshipWeaponBindingsComponentSetterTranslationCommon)((ISpaceshipWeaponBindingsComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SpaceshipWeaponBindingsComponent DeepCopy(
            this ISpaceshipWeaponBindingsComponentGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SpaceshipWeaponBindingsComponentSetterTranslationCommon)((ISpaceshipWeaponBindingsComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISpaceshipWeaponBindingsComponent item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((SpaceshipWeaponBindingsComponentSetterCommon)((ISpaceshipWeaponBindingsComponentGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum SpaceshipWeaponBindingsComponent_FieldIndex
    {
        Slot1 = 0,
        Slot2 = 1,
        Slot3 = 2,
    }
    #endregion

    #region Registration
    internal partial class SpaceshipWeaponBindingsComponent_Registration : ILoquiRegistration
    {
        public static readonly SpaceshipWeaponBindingsComponent_Registration Instance = new SpaceshipWeaponBindingsComponent_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(SpaceshipWeaponBindingsComponent.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SpaceshipWeaponBindingsComponent.ErrorMask);

        public static readonly Type ClassType = typeof(SpaceshipWeaponBindingsComponent);

        public static readonly Type GetterType = typeof(ISpaceshipWeaponBindingsComponentGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISpaceshipWeaponBindingsComponent);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.SpaceshipWeaponBindingsComponent";

        public const string Name = "SpaceshipWeaponBindingsComponent";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.BFCB;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.BFCB);
            var all = RecordCollection.Factory(
                RecordTypes.BFCB,
                RecordTypes.SHWB);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(SpaceshipWeaponBindingsComponentBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class SpaceshipWeaponBindingsComponentSetterCommon : AComponentSetterCommon
    {
        public new static readonly SpaceshipWeaponBindingsComponentSetterCommon Instance = new SpaceshipWeaponBindingsComponentSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISpaceshipWeaponBindingsComponent item)
        {
            ClearPartial();
            item.Slot1 = default(Int32);
            item.Slot2 = default(Int32);
            item.Slot3 = default(Int32);
            base.Clear(item);
        }
        
        public override void Clear(IAComponent item)
        {
            Clear(item: (ISpaceshipWeaponBindingsComponent)item);
        }
        
        #region Mutagen
        public void RemapLinks(ISpaceshipWeaponBindingsComponent obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISpaceshipWeaponBindingsComponent item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: SpaceshipWeaponBindingsComponentBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAComponent item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SpaceshipWeaponBindingsComponent)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class SpaceshipWeaponBindingsComponentCommon : AComponentCommon
    {
        public new static readonly SpaceshipWeaponBindingsComponentCommon Instance = new SpaceshipWeaponBindingsComponentCommon();

        public SpaceshipWeaponBindingsComponent.Mask<bool> GetEqualsMask(
            ISpaceshipWeaponBindingsComponentGetter item,
            ISpaceshipWeaponBindingsComponentGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SpaceshipWeaponBindingsComponent.Mask<bool>(false);
            ((SpaceshipWeaponBindingsComponentCommon)((ISpaceshipWeaponBindingsComponentGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISpaceshipWeaponBindingsComponentGetter item,
            ISpaceshipWeaponBindingsComponentGetter rhs,
            SpaceshipWeaponBindingsComponent.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Slot1 = item.Slot1 == rhs.Slot1;
            ret.Slot2 = item.Slot2 == rhs.Slot2;
            ret.Slot3 = item.Slot3 == rhs.Slot3;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ISpaceshipWeaponBindingsComponentGetter item,
            string? name = null,
            SpaceshipWeaponBindingsComponent.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISpaceshipWeaponBindingsComponentGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SpaceshipWeaponBindingsComponent.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"SpaceshipWeaponBindingsComponent =>");
            }
            else
            {
                sb.AppendLine($"{name} (SpaceshipWeaponBindingsComponent) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISpaceshipWeaponBindingsComponentGetter item,
            StructuredStringBuilder sb,
            SpaceshipWeaponBindingsComponent.Mask<bool>? printMask = null)
        {
            AComponentCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Slot1 ?? true)
            {
                sb.AppendItem(item.Slot1, "Slot1");
            }
            if (printMask?.Slot2 ?? true)
            {
                sb.AppendItem(item.Slot2, "Slot2");
            }
            if (printMask?.Slot3 ?? true)
            {
                sb.AppendItem(item.Slot3, "Slot3");
            }
        }
        
        public static SpaceshipWeaponBindingsComponent_FieldIndex ConvertFieldIndex(AComponent_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISpaceshipWeaponBindingsComponentGetter? lhs,
            ISpaceshipWeaponBindingsComponentGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAComponentGetter)lhs, (IAComponentGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)SpaceshipWeaponBindingsComponent_FieldIndex.Slot1) ?? true))
            {
                if (lhs.Slot1 != rhs.Slot1) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SpaceshipWeaponBindingsComponent_FieldIndex.Slot2) ?? true))
            {
                if (lhs.Slot2 != rhs.Slot2) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SpaceshipWeaponBindingsComponent_FieldIndex.Slot3) ?? true))
            {
                if (lhs.Slot3 != rhs.Slot3) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAComponentGetter? lhs,
            IAComponentGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISpaceshipWeaponBindingsComponentGetter?)lhs,
                rhs: rhs as ISpaceshipWeaponBindingsComponentGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ISpaceshipWeaponBindingsComponentGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Slot1);
            hash.Add(item.Slot2);
            hash.Add(item.Slot3);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAComponentGetter item)
        {
            return GetHashCode(item: (ISpaceshipWeaponBindingsComponentGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return SpaceshipWeaponBindingsComponent.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISpaceshipWeaponBindingsComponentGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class SpaceshipWeaponBindingsComponentSetterTranslationCommon : AComponentSetterTranslationCommon
    {
        public new static readonly SpaceshipWeaponBindingsComponentSetterTranslationCommon Instance = new SpaceshipWeaponBindingsComponentSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISpaceshipWeaponBindingsComponent item,
            ISpaceshipWeaponBindingsComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAComponent)item,
                (IAComponentGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)SpaceshipWeaponBindingsComponent_FieldIndex.Slot1) ?? true))
            {
                item.Slot1 = rhs.Slot1;
            }
            if ((copyMask?.GetShouldTranslate((int)SpaceshipWeaponBindingsComponent_FieldIndex.Slot2) ?? true))
            {
                item.Slot2 = rhs.Slot2;
            }
            if ((copyMask?.GetShouldTranslate((int)SpaceshipWeaponBindingsComponent_FieldIndex.Slot3) ?? true))
            {
                item.Slot3 = rhs.Slot3;
            }
        }
        
        
        public override void DeepCopyIn(
            IAComponent item,
            IAComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISpaceshipWeaponBindingsComponent)item,
                rhs: (ISpaceshipWeaponBindingsComponentGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public SpaceshipWeaponBindingsComponent DeepCopy(
            ISpaceshipWeaponBindingsComponentGetter item,
            SpaceshipWeaponBindingsComponent.TranslationMask? copyMask = null)
        {
            SpaceshipWeaponBindingsComponent ret = (SpaceshipWeaponBindingsComponent)((SpaceshipWeaponBindingsComponentCommon)((ISpaceshipWeaponBindingsComponentGetter)item).CommonInstance()!).GetNew();
            ((SpaceshipWeaponBindingsComponentSetterTranslationCommon)((ISpaceshipWeaponBindingsComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SpaceshipWeaponBindingsComponent DeepCopy(
            ISpaceshipWeaponBindingsComponentGetter item,
            out SpaceshipWeaponBindingsComponent.ErrorMask errorMask,
            SpaceshipWeaponBindingsComponent.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SpaceshipWeaponBindingsComponent ret = (SpaceshipWeaponBindingsComponent)((SpaceshipWeaponBindingsComponentCommon)((ISpaceshipWeaponBindingsComponentGetter)item).CommonInstance()!).GetNew();
            ((SpaceshipWeaponBindingsComponentSetterTranslationCommon)((ISpaceshipWeaponBindingsComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SpaceshipWeaponBindingsComponent.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SpaceshipWeaponBindingsComponent DeepCopy(
            ISpaceshipWeaponBindingsComponentGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SpaceshipWeaponBindingsComponent ret = (SpaceshipWeaponBindingsComponent)((SpaceshipWeaponBindingsComponentCommon)((ISpaceshipWeaponBindingsComponentGetter)item).CommonInstance()!).GetNew();
            ((SpaceshipWeaponBindingsComponentSetterTranslationCommon)((ISpaceshipWeaponBindingsComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class SpaceshipWeaponBindingsComponent
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SpaceshipWeaponBindingsComponent_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SpaceshipWeaponBindingsComponent_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SpaceshipWeaponBindingsComponentCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SpaceshipWeaponBindingsComponentSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SpaceshipWeaponBindingsComponentSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class SpaceshipWeaponBindingsComponentBinaryWriteTranslation :
        AComponentBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly SpaceshipWeaponBindingsComponentBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ISpaceshipWeaponBindingsComponentGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            AComponentBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.SHWB)))
            {
                writer.Write(item.Slot1);
                writer.Write(item.Slot2);
                writer.Write(item.Slot3);
            }
        }

        public void Write(
            MutagenWriter writer,
            ISpaceshipWeaponBindingsComponentGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, RecordTypes.BFCE)) { } // End Marker
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ISpaceshipWeaponBindingsComponentGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IAComponentGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISpaceshipWeaponBindingsComponentGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class SpaceshipWeaponBindingsComponentBinaryCreateTranslation : AComponentBinaryCreateTranslation
    {
        public new static readonly SpaceshipWeaponBindingsComponentBinaryCreateTranslation Instance = new SpaceshipWeaponBindingsComponentBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            ISpaceshipWeaponBindingsComponent item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.SHWB:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.Slot1 = dataFrame.ReadInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.Slot2 = dataFrame.ReadInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.Slot3 = dataFrame.ReadInt32();
                    return (int)SpaceshipWeaponBindingsComponent_FieldIndex.Slot3;
                }
                default:
                    return AComponentBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class SpaceshipWeaponBindingsComponentBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class SpaceshipWeaponBindingsComponentBinaryOverlay :
        AComponentBinaryOverlay,
        ISpaceshipWeaponBindingsComponentGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SpaceshipWeaponBindingsComponent_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SpaceshipWeaponBindingsComponent_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SpaceshipWeaponBindingsComponentCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SpaceshipWeaponBindingsComponentSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SpaceshipWeaponBindingsComponentBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SpaceshipWeaponBindingsComponentBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        private RangeInt32? _SHWBLocation;
        #region Slot1
        private int _Slot1Location => _SHWBLocation!.Value.Min;
        private bool _Slot1_IsSet => _SHWBLocation.HasValue;
        public Int32 Slot1 => _Slot1_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_recordData.Slice(_Slot1Location, 4)) : default(Int32);
        #endregion
        #region Slot2
        private int _Slot2Location => _SHWBLocation!.Value.Min + 0x4;
        private bool _Slot2_IsSet => _SHWBLocation.HasValue;
        public Int32 Slot2 => _Slot2_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_recordData.Slice(_Slot2Location, 4)) : default(Int32);
        #endregion
        #region Slot3
        private int _Slot3Location => _SHWBLocation!.Value.Min + 0x8;
        private bool _Slot3_IsSet => _SHWBLocation.HasValue;
        public Int32 Slot3 => _Slot3_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_recordData.Slice(_Slot3Location, 4)) : default(Int32);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SpaceshipWeaponBindingsComponentBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ISpaceshipWeaponBindingsComponentGetter SpaceshipWeaponBindingsComponentFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new SpaceshipWeaponBindingsComponentBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ISpaceshipWeaponBindingsComponentGetter SpaceshipWeaponBindingsComponentFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return SpaceshipWeaponBindingsComponentFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.SHWB:
                {
                    _SHWBLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)SpaceshipWeaponBindingsComponent_FieldIndex.Slot3;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SpaceshipWeaponBindingsComponentMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISpaceshipWeaponBindingsComponentGetter rhs) return false;
            return ((SpaceshipWeaponBindingsComponentCommon)((ISpaceshipWeaponBindingsComponentGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISpaceshipWeaponBindingsComponentGetter? obj)
        {
            return ((SpaceshipWeaponBindingsComponentCommon)((ISpaceshipWeaponBindingsComponentGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SpaceshipWeaponBindingsComponentCommon)((ISpaceshipWeaponBindingsComponentGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

