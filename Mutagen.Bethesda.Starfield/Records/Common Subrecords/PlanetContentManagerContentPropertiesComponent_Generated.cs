/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class PlanetContentManagerContentPropertiesComponent :
        AComponent,
        IEquatable<IPlanetContentManagerContentPropertiesComponentGetter>,
        ILoquiObjectSetter<PlanetContentManagerContentPropertiesComponent>,
        IPlanetContentManagerContentPropertiesComponent
    {
        #region Ctor
        public PlanetContentManagerContentPropertiesComponent()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ZNAM
        public UInt32? ZNAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IPlanetContentManagerContentPropertiesComponentGetter.ZNAM => this.ZNAM;
        #endregion
        #region YNAM
        public Byte? YNAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte? IPlanetContentManagerContentPropertiesComponentGetter.YNAM => this.YNAM;
        #endregion
        #region XNAM
        public UInt32? XNAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IPlanetContentManagerContentPropertiesComponentGetter.XNAM => this.XNAM;
        #endregion
        #region WNAM
        public UInt32? WNAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IPlanetContentManagerContentPropertiesComponentGetter.WNAM => this.WNAM;
        #endregion
        #region VNAM
        public Byte? VNAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte? IPlanetContentManagerContentPropertiesComponentGetter.VNAM => this.VNAM;
        #endregion
        #region UNAM
        public UInt32? UNAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IPlanetContentManagerContentPropertiesComponentGetter.UNAM => this.UNAM;
        #endregion
        #region NAM1
        public Single? NAM1 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlanetContentManagerContentPropertiesComponentGetter.NAM1 => this.NAM1;
        #endregion
        #region Global
        private readonly IFormLinkNullable<IGlobalGetter> _Global = new FormLinkNullable<IGlobalGetter>();
        public IFormLinkNullable<IGlobalGetter> Global
        {
            get => _Global;
            set => _Global.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IGlobalGetter> IPlanetContentManagerContentPropertiesComponentGetter.Global => this.Global;
        #endregion
        #region NAM3
        public UInt32? NAM3 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IPlanetContentManagerContentPropertiesComponentGetter.NAM3 => this.NAM3;
        #endregion
        #region NAM4
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _NAM4;
        public MemorySlice<Byte>? NAM4
        {
            get => this._NAM4;
            set => this._NAM4 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlanetContentManagerContentPropertiesComponentGetter.NAM4 => this.NAM4;
        #endregion
        #region NAM5
        public UInt32? NAM5 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IPlanetContentManagerContentPropertiesComponentGetter.NAM5 => this.NAM5;
        #endregion
        #region NAM6
        public UInt32? NAM6 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IPlanetContentManagerContentPropertiesComponentGetter.NAM6 => this.NAM6;
        #endregion
        #region NAM7
        public UInt32? NAM7 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IPlanetContentManagerContentPropertiesComponentGetter.NAM7 => this.NAM7;
        #endregion
        #region NAM8
        public Byte? NAM8 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte? IPlanetContentManagerContentPropertiesComponentGetter.NAM8 => this.NAM8;
        #endregion
        #region NAM9
        public UInt32? NAM9 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IPlanetContentManagerContentPropertiesComponentGetter.NAM9 => this.NAM9;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition>? _Conditions;
        public ExtendedList<Condition>? Conditions
        {
            get => this._Conditions;
            set => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter>? IPlanetContentManagerContentPropertiesComponentGetter.Conditions => _Conditions;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlanetContentManagerContentPropertiesComponentMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPlanetContentManagerContentPropertiesComponentGetter rhs) return false;
            return ((PlanetContentManagerContentPropertiesComponentCommon)((IPlanetContentManagerContentPropertiesComponentGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlanetContentManagerContentPropertiesComponentGetter? obj)
        {
            return ((PlanetContentManagerContentPropertiesComponentCommon)((IPlanetContentManagerContentPropertiesComponentGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlanetContentManagerContentPropertiesComponentCommon)((IPlanetContentManagerContentPropertiesComponentGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AComponent.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ZNAM = initialValue;
                this.YNAM = initialValue;
                this.XNAM = initialValue;
                this.WNAM = initialValue;
                this.VNAM = initialValue;
                this.UNAM = initialValue;
                this.NAM1 = initialValue;
                this.Global = initialValue;
                this.NAM3 = initialValue;
                this.NAM4 = initialValue;
                this.NAM5 = initialValue;
                this.NAM6 = initialValue;
                this.NAM7 = initialValue;
                this.NAM8 = initialValue;
                this.NAM9 = initialValue;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
            }

            public Mask(
                TItem ZNAM,
                TItem YNAM,
                TItem XNAM,
                TItem WNAM,
                TItem VNAM,
                TItem UNAM,
                TItem NAM1,
                TItem Global,
                TItem NAM3,
                TItem NAM4,
                TItem NAM5,
                TItem NAM6,
                TItem NAM7,
                TItem NAM8,
                TItem NAM9,
                TItem Conditions)
            : base()
            {
                this.ZNAM = ZNAM;
                this.YNAM = YNAM;
                this.XNAM = XNAM;
                this.WNAM = WNAM;
                this.VNAM = VNAM;
                this.UNAM = UNAM;
                this.NAM1 = NAM1;
                this.Global = Global;
                this.NAM3 = NAM3;
                this.NAM4 = NAM4;
                this.NAM5 = NAM5;
                this.NAM6 = NAM6;
                this.NAM7 = NAM7;
                this.NAM8 = NAM8;
                this.NAM9 = NAM9;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem ZNAM;
            public TItem YNAM;
            public TItem XNAM;
            public TItem WNAM;
            public TItem VNAM;
            public TItem UNAM;
            public TItem NAM1;
            public TItem Global;
            public TItem NAM3;
            public TItem NAM4;
            public TItem NAM5;
            public TItem NAM6;
            public TItem NAM7;
            public TItem NAM8;
            public TItem NAM9;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ZNAM, rhs.ZNAM)) return false;
                if (!object.Equals(this.YNAM, rhs.YNAM)) return false;
                if (!object.Equals(this.XNAM, rhs.XNAM)) return false;
                if (!object.Equals(this.WNAM, rhs.WNAM)) return false;
                if (!object.Equals(this.VNAM, rhs.VNAM)) return false;
                if (!object.Equals(this.UNAM, rhs.UNAM)) return false;
                if (!object.Equals(this.NAM1, rhs.NAM1)) return false;
                if (!object.Equals(this.Global, rhs.Global)) return false;
                if (!object.Equals(this.NAM3, rhs.NAM3)) return false;
                if (!object.Equals(this.NAM4, rhs.NAM4)) return false;
                if (!object.Equals(this.NAM5, rhs.NAM5)) return false;
                if (!object.Equals(this.NAM6, rhs.NAM6)) return false;
                if (!object.Equals(this.NAM7, rhs.NAM7)) return false;
                if (!object.Equals(this.NAM8, rhs.NAM8)) return false;
                if (!object.Equals(this.NAM9, rhs.NAM9)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ZNAM);
                hash.Add(this.YNAM);
                hash.Add(this.XNAM);
                hash.Add(this.WNAM);
                hash.Add(this.VNAM);
                hash.Add(this.UNAM);
                hash.Add(this.NAM1);
                hash.Add(this.Global);
                hash.Add(this.NAM3);
                hash.Add(this.NAM4);
                hash.Add(this.NAM5);
                hash.Add(this.NAM6);
                hash.Add(this.NAM7);
                hash.Add(this.NAM8);
                hash.Add(this.NAM9);
                hash.Add(this.Conditions);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.ZNAM)) return false;
                if (!eval(this.YNAM)) return false;
                if (!eval(this.XNAM)) return false;
                if (!eval(this.WNAM)) return false;
                if (!eval(this.VNAM)) return false;
                if (!eval(this.UNAM)) return false;
                if (!eval(this.NAM1)) return false;
                if (!eval(this.Global)) return false;
                if (!eval(this.NAM3)) return false;
                if (!eval(this.NAM4)) return false;
                if (!eval(this.NAM5)) return false;
                if (!eval(this.NAM6)) return false;
                if (!eval(this.NAM7)) return false;
                if (!eval(this.NAM8)) return false;
                if (!eval(this.NAM9)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.ZNAM)) return true;
                if (eval(this.YNAM)) return true;
                if (eval(this.XNAM)) return true;
                if (eval(this.WNAM)) return true;
                if (eval(this.VNAM)) return true;
                if (eval(this.UNAM)) return true;
                if (eval(this.NAM1)) return true;
                if (eval(this.Global)) return true;
                if (eval(this.NAM3)) return true;
                if (eval(this.NAM4)) return true;
                if (eval(this.NAM5)) return true;
                if (eval(this.NAM6)) return true;
                if (eval(this.NAM7)) return true;
                if (eval(this.NAM8)) return true;
                if (eval(this.NAM9)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PlanetContentManagerContentPropertiesComponent.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ZNAM = eval(this.ZNAM);
                obj.YNAM = eval(this.YNAM);
                obj.XNAM = eval(this.XNAM);
                obj.WNAM = eval(this.WNAM);
                obj.VNAM = eval(this.VNAM);
                obj.UNAM = eval(this.UNAM);
                obj.NAM1 = eval(this.NAM1);
                obj.Global = eval(this.Global);
                obj.NAM3 = eval(this.NAM3);
                obj.NAM4 = eval(this.NAM4);
                obj.NAM5 = eval(this.NAM5);
                obj.NAM6 = eval(this.NAM6);
                obj.NAM7 = eval(this.NAM7);
                obj.NAM8 = eval(this.NAM8);
                obj.NAM9 = eval(this.NAM9);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(PlanetContentManagerContentPropertiesComponent.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, PlanetContentManagerContentPropertiesComponent.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(PlanetContentManagerContentPropertiesComponent.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ZNAM ?? true)
                    {
                        sb.AppendItem(ZNAM, "ZNAM");
                    }
                    if (printMask?.YNAM ?? true)
                    {
                        sb.AppendItem(YNAM, "YNAM");
                    }
                    if (printMask?.XNAM ?? true)
                    {
                        sb.AppendItem(XNAM, "XNAM");
                    }
                    if (printMask?.WNAM ?? true)
                    {
                        sb.AppendItem(WNAM, "WNAM");
                    }
                    if (printMask?.VNAM ?? true)
                    {
                        sb.AppendItem(VNAM, "VNAM");
                    }
                    if (printMask?.UNAM ?? true)
                    {
                        sb.AppendItem(UNAM, "UNAM");
                    }
                    if (printMask?.NAM1 ?? true)
                    {
                        sb.AppendItem(NAM1, "NAM1");
                    }
                    if (printMask?.Global ?? true)
                    {
                        sb.AppendItem(Global, "Global");
                    }
                    if (printMask?.NAM3 ?? true)
                    {
                        sb.AppendItem(NAM3, "NAM3");
                    }
                    if (printMask?.NAM4 ?? true)
                    {
                        sb.AppendItem(NAM4, "NAM4");
                    }
                    if (printMask?.NAM5 ?? true)
                    {
                        sb.AppendItem(NAM5, "NAM5");
                    }
                    if (printMask?.NAM6 ?? true)
                    {
                        sb.AppendItem(NAM6, "NAM6");
                    }
                    if (printMask?.NAM7 ?? true)
                    {
                        sb.AppendItem(NAM7, "NAM7");
                    }
                    if (printMask?.NAM8 ?? true)
                    {
                        sb.AppendItem(NAM8, "NAM8");
                    }
                    if (printMask?.NAM9 ?? true)
                    {
                        sb.AppendItem(NAM9, "NAM9");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        sb.AppendLine("Conditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            AComponent.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? ZNAM;
            public Exception? YNAM;
            public Exception? XNAM;
            public Exception? WNAM;
            public Exception? VNAM;
            public Exception? UNAM;
            public Exception? NAM1;
            public Exception? Global;
            public Exception? NAM3;
            public Exception? NAM4;
            public Exception? NAM5;
            public Exception? NAM6;
            public Exception? NAM7;
            public Exception? NAM8;
            public Exception? NAM9;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                PlanetContentManagerContentPropertiesComponent_FieldIndex enu = (PlanetContentManagerContentPropertiesComponent_FieldIndex)index;
                switch (enu)
                {
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.ZNAM:
                        return ZNAM;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.YNAM:
                        return YNAM;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.XNAM:
                        return XNAM;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.WNAM:
                        return WNAM;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.VNAM:
                        return VNAM;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.UNAM:
                        return UNAM;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM1:
                        return NAM1;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.Global:
                        return Global;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM3:
                        return NAM3;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM4:
                        return NAM4;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM5:
                        return NAM5;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM6:
                        return NAM6;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM7:
                        return NAM7;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM8:
                        return NAM8;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM9:
                        return NAM9;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.Conditions:
                        return Conditions;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                PlanetContentManagerContentPropertiesComponent_FieldIndex enu = (PlanetContentManagerContentPropertiesComponent_FieldIndex)index;
                switch (enu)
                {
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.ZNAM:
                        this.ZNAM = ex;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.YNAM:
                        this.YNAM = ex;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.XNAM:
                        this.XNAM = ex;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.WNAM:
                        this.WNAM = ex;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.VNAM:
                        this.VNAM = ex;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.UNAM:
                        this.UNAM = ex;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM1:
                        this.NAM1 = ex;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.Global:
                        this.Global = ex;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM3:
                        this.NAM3 = ex;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM4:
                        this.NAM4 = ex;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM5:
                        this.NAM5 = ex;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM6:
                        this.NAM6 = ex;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM7:
                        this.NAM7 = ex;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM8:
                        this.NAM8 = ex;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM9:
                        this.NAM9 = ex;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                PlanetContentManagerContentPropertiesComponent_FieldIndex enu = (PlanetContentManagerContentPropertiesComponent_FieldIndex)index;
                switch (enu)
                {
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.ZNAM:
                        this.ZNAM = (Exception?)obj;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.YNAM:
                        this.YNAM = (Exception?)obj;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.XNAM:
                        this.XNAM = (Exception?)obj;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.WNAM:
                        this.WNAM = (Exception?)obj;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.VNAM:
                        this.VNAM = (Exception?)obj;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.UNAM:
                        this.UNAM = (Exception?)obj;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM1:
                        this.NAM1 = (Exception?)obj;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.Global:
                        this.Global = (Exception?)obj;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM3:
                        this.NAM3 = (Exception?)obj;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM4:
                        this.NAM4 = (Exception?)obj;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM5:
                        this.NAM5 = (Exception?)obj;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM6:
                        this.NAM6 = (Exception?)obj;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM7:
                        this.NAM7 = (Exception?)obj;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM8:
                        this.NAM8 = (Exception?)obj;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM9:
                        this.NAM9 = (Exception?)obj;
                        break;
                    case PlanetContentManagerContentPropertiesComponent_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ZNAM != null) return true;
                if (YNAM != null) return true;
                if (XNAM != null) return true;
                if (WNAM != null) return true;
                if (VNAM != null) return true;
                if (UNAM != null) return true;
                if (NAM1 != null) return true;
                if (Global != null) return true;
                if (NAM3 != null) return true;
                if (NAM4 != null) return true;
                if (NAM5 != null) return true;
                if (NAM6 != null) return true;
                if (NAM7 != null) return true;
                if (NAM8 != null) return true;
                if (NAM9 != null) return true;
                if (Conditions != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(ZNAM, "ZNAM");
                }
                {
                    sb.AppendItem(YNAM, "YNAM");
                }
                {
                    sb.AppendItem(XNAM, "XNAM");
                }
                {
                    sb.AppendItem(WNAM, "WNAM");
                }
                {
                    sb.AppendItem(VNAM, "VNAM");
                }
                {
                    sb.AppendItem(UNAM, "UNAM");
                }
                {
                    sb.AppendItem(NAM1, "NAM1");
                }
                {
                    sb.AppendItem(Global, "Global");
                }
                {
                    sb.AppendItem(NAM3, "NAM3");
                }
                {
                    sb.AppendItem(NAM4, "NAM4");
                }
                {
                    sb.AppendItem(NAM5, "NAM5");
                }
                {
                    sb.AppendItem(NAM6, "NAM6");
                }
                {
                    sb.AppendItem(NAM7, "NAM7");
                }
                {
                    sb.AppendItem(NAM8, "NAM8");
                }
                {
                    sb.AppendItem(NAM9, "NAM9");
                }
                if (Conditions is {} ConditionsItem)
                {
                    sb.AppendLine("Conditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ZNAM = this.ZNAM.Combine(rhs.ZNAM);
                ret.YNAM = this.YNAM.Combine(rhs.YNAM);
                ret.XNAM = this.XNAM.Combine(rhs.XNAM);
                ret.WNAM = this.WNAM.Combine(rhs.WNAM);
                ret.VNAM = this.VNAM.Combine(rhs.VNAM);
                ret.UNAM = this.UNAM.Combine(rhs.UNAM);
                ret.NAM1 = this.NAM1.Combine(rhs.NAM1);
                ret.Global = this.Global.Combine(rhs.Global);
                ret.NAM3 = this.NAM3.Combine(rhs.NAM3);
                ret.NAM4 = this.NAM4.Combine(rhs.NAM4);
                ret.NAM5 = this.NAM5.Combine(rhs.NAM5);
                ret.NAM6 = this.NAM6.Combine(rhs.NAM6);
                ret.NAM7 = this.NAM7.Combine(rhs.NAM7);
                ret.NAM8 = this.NAM8.Combine(rhs.NAM8);
                ret.NAM9 = this.NAM9.Combine(rhs.NAM9);
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), Noggog.ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AComponent.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool ZNAM;
            public bool YNAM;
            public bool XNAM;
            public bool WNAM;
            public bool VNAM;
            public bool UNAM;
            public bool NAM1;
            public bool Global;
            public bool NAM3;
            public bool NAM4;
            public bool NAM5;
            public bool NAM6;
            public bool NAM7;
            public bool NAM8;
            public bool NAM9;
            public Condition.TranslationMask? Conditions;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.ZNAM = defaultOn;
                this.YNAM = defaultOn;
                this.XNAM = defaultOn;
                this.WNAM = defaultOn;
                this.VNAM = defaultOn;
                this.UNAM = defaultOn;
                this.NAM1 = defaultOn;
                this.Global = defaultOn;
                this.NAM3 = defaultOn;
                this.NAM4 = defaultOn;
                this.NAM5 = defaultOn;
                this.NAM6 = defaultOn;
                this.NAM7 = defaultOn;
                this.NAM8 = defaultOn;
                this.NAM9 = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ZNAM, null));
                ret.Add((YNAM, null));
                ret.Add((XNAM, null));
                ret.Add((WNAM, null));
                ret.Add((VNAM, null));
                ret.Add((UNAM, null));
                ret.Add((NAM1, null));
                ret.Add((Global, null));
                ret.Add((NAM3, null));
                ret.Add((NAM4, null));
                ret.Add((NAM5, null));
                ret.Add((NAM6, null));
                ret.Add((NAM7, null));
                ret.Add((NAM8, null));
                ret.Add((NAM9, null));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PlanetContentManagerContentPropertiesComponentCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PlanetContentManagerContentPropertiesComponentSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlanetContentManagerContentPropertiesComponentBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlanetContentManagerContentPropertiesComponentBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static PlanetContentManagerContentPropertiesComponent CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new PlanetContentManagerContentPropertiesComponent();
            ((PlanetContentManagerContentPropertiesComponentSetterCommon)((IPlanetContentManagerContentPropertiesComponentGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PlanetContentManagerContentPropertiesComponent item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((PlanetContentManagerContentPropertiesComponentSetterCommon)((IPlanetContentManagerContentPropertiesComponentGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new PlanetContentManagerContentPropertiesComponent GetNew()
        {
            return new PlanetContentManagerContentPropertiesComponent();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlanetContentManagerContentPropertiesComponent :
        IAComponent,
        IFormLinkContainer,
        ILoquiObjectSetter<IPlanetContentManagerContentPropertiesComponent>,
        IPlanetContentManagerContentPropertiesComponentGetter
    {
        new UInt32? ZNAM { get; set; }
        new Byte? YNAM { get; set; }
        new UInt32? XNAM { get; set; }
        new UInt32? WNAM { get; set; }
        new Byte? VNAM { get; set; }
        new UInt32? UNAM { get; set; }
        new Single? NAM1 { get; set; }
        new IFormLinkNullable<IGlobalGetter> Global { get; set; }
        new UInt32? NAM3 { get; set; }
        new MemorySlice<Byte>? NAM4 { get; set; }
        new UInt32? NAM5 { get; set; }
        new UInt32? NAM6 { get; set; }
        new UInt32? NAM7 { get; set; }
        new Byte? NAM8 { get; set; }
        new UInt32? NAM9 { get; set; }
        new ExtendedList<Condition>? Conditions { get; set; }
    }

    public partial interface IPlanetContentManagerContentPropertiesComponentGetter :
        IAComponentGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IPlanetContentManagerContentPropertiesComponentGetter>
    {
        static new ILoquiRegistration StaticRegistration => PlanetContentManagerContentPropertiesComponent_Registration.Instance;
        UInt32? ZNAM { get; }
        Byte? YNAM { get; }
        UInt32? XNAM { get; }
        UInt32? WNAM { get; }
        Byte? VNAM { get; }
        UInt32? UNAM { get; }
        Single? NAM1 { get; }
        IFormLinkNullableGetter<IGlobalGetter> Global { get; }
        UInt32? NAM3 { get; }
        ReadOnlyMemorySlice<Byte>? NAM4 { get; }
        UInt32? NAM5 { get; }
        UInt32? NAM6 { get; }
        UInt32? NAM7 { get; }
        Byte? NAM8 { get; }
        UInt32? NAM9 { get; }
        IReadOnlyList<IConditionGetter>? Conditions { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PlanetContentManagerContentPropertiesComponentMixIn
    {
        public static void Clear(this IPlanetContentManagerContentPropertiesComponent item)
        {
            ((PlanetContentManagerContentPropertiesComponentSetterCommon)((IPlanetContentManagerContentPropertiesComponentGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PlanetContentManagerContentPropertiesComponent.Mask<bool> GetEqualsMask(
            this IPlanetContentManagerContentPropertiesComponentGetter item,
            IPlanetContentManagerContentPropertiesComponentGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlanetContentManagerContentPropertiesComponentCommon)((IPlanetContentManagerContentPropertiesComponentGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IPlanetContentManagerContentPropertiesComponentGetter item,
            string? name = null,
            PlanetContentManagerContentPropertiesComponent.Mask<bool>? printMask = null)
        {
            return ((PlanetContentManagerContentPropertiesComponentCommon)((IPlanetContentManagerContentPropertiesComponentGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IPlanetContentManagerContentPropertiesComponentGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlanetContentManagerContentPropertiesComponent.Mask<bool>? printMask = null)
        {
            ((PlanetContentManagerContentPropertiesComponentCommon)((IPlanetContentManagerContentPropertiesComponentGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPlanetContentManagerContentPropertiesComponentGetter item,
            IPlanetContentManagerContentPropertiesComponentGetter rhs,
            PlanetContentManagerContentPropertiesComponent.TranslationMask? equalsMask = null)
        {
            return ((PlanetContentManagerContentPropertiesComponentCommon)((IPlanetContentManagerContentPropertiesComponentGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPlanetContentManagerContentPropertiesComponent lhs,
            IPlanetContentManagerContentPropertiesComponentGetter rhs,
            out PlanetContentManagerContentPropertiesComponent.ErrorMask errorMask,
            PlanetContentManagerContentPropertiesComponent.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PlanetContentManagerContentPropertiesComponentSetterTranslationCommon)((IPlanetContentManagerContentPropertiesComponentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PlanetContentManagerContentPropertiesComponent.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPlanetContentManagerContentPropertiesComponent lhs,
            IPlanetContentManagerContentPropertiesComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PlanetContentManagerContentPropertiesComponentSetterTranslationCommon)((IPlanetContentManagerContentPropertiesComponentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PlanetContentManagerContentPropertiesComponent DeepCopy(
            this IPlanetContentManagerContentPropertiesComponentGetter item,
            PlanetContentManagerContentPropertiesComponent.TranslationMask? copyMask = null)
        {
            return ((PlanetContentManagerContentPropertiesComponentSetterTranslationCommon)((IPlanetContentManagerContentPropertiesComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PlanetContentManagerContentPropertiesComponent DeepCopy(
            this IPlanetContentManagerContentPropertiesComponentGetter item,
            out PlanetContentManagerContentPropertiesComponent.ErrorMask errorMask,
            PlanetContentManagerContentPropertiesComponent.TranslationMask? copyMask = null)
        {
            return ((PlanetContentManagerContentPropertiesComponentSetterTranslationCommon)((IPlanetContentManagerContentPropertiesComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PlanetContentManagerContentPropertiesComponent DeepCopy(
            this IPlanetContentManagerContentPropertiesComponentGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PlanetContentManagerContentPropertiesComponentSetterTranslationCommon)((IPlanetContentManagerContentPropertiesComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPlanetContentManagerContentPropertiesComponent item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((PlanetContentManagerContentPropertiesComponentSetterCommon)((IPlanetContentManagerContentPropertiesComponentGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum PlanetContentManagerContentPropertiesComponent_FieldIndex
    {
        ZNAM = 0,
        YNAM = 1,
        XNAM = 2,
        WNAM = 3,
        VNAM = 4,
        UNAM = 5,
        NAM1 = 6,
        Global = 7,
        NAM3 = 8,
        NAM4 = 9,
        NAM5 = 10,
        NAM6 = 11,
        NAM7 = 12,
        NAM8 = 13,
        NAM9 = 14,
        Conditions = 15,
    }
    #endregion

    #region Registration
    internal partial class PlanetContentManagerContentPropertiesComponent_Registration : ILoquiRegistration
    {
        public static readonly PlanetContentManagerContentPropertiesComponent_Registration Instance = new PlanetContentManagerContentPropertiesComponent_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 16;

        public const ushort FieldCount = 16;

        public static readonly Type MaskType = typeof(PlanetContentManagerContentPropertiesComponent.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlanetContentManagerContentPropertiesComponent.ErrorMask);

        public static readonly Type ClassType = typeof(PlanetContentManagerContentPropertiesComponent);

        public static readonly Type GetterType = typeof(IPlanetContentManagerContentPropertiesComponentGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlanetContentManagerContentPropertiesComponent);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.PlanetContentManagerContentPropertiesComponent";

        public const string Name = "PlanetContentManagerContentPropertiesComponent";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.BFCB;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.BFCB);
            var all = RecordCollection.Factory(
                RecordTypes.BFCB,
                RecordTypes.ZNAM,
                RecordTypes.YNAM,
                RecordTypes.XNAM,
                RecordTypes.WNAM,
                RecordTypes.VNAM,
                RecordTypes.UNAM,
                RecordTypes.NAM1,
                RecordTypes.NAM2,
                RecordTypes.NAM3,
                RecordTypes.NAM4,
                RecordTypes.NAM5,
                RecordTypes.NAM6,
                RecordTypes.NAM7,
                RecordTypes.NAM8,
                RecordTypes.NAM9,
                RecordTypes.CTDA,
                RecordTypes.CITC,
                RecordTypes.CIS1,
                RecordTypes.CIS2);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(PlanetContentManagerContentPropertiesComponentBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class PlanetContentManagerContentPropertiesComponentSetterCommon : AComponentSetterCommon
    {
        public new static readonly PlanetContentManagerContentPropertiesComponentSetterCommon Instance = new PlanetContentManagerContentPropertiesComponentSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlanetContentManagerContentPropertiesComponent item)
        {
            ClearPartial();
            item.ZNAM = default;
            item.YNAM = default;
            item.XNAM = default;
            item.WNAM = default;
            item.VNAM = default;
            item.UNAM = default;
            item.NAM1 = default;
            item.Global.Clear();
            item.NAM3 = default;
            item.NAM4 = default;
            item.NAM5 = default;
            item.NAM6 = default;
            item.NAM7 = default;
            item.NAM8 = default;
            item.NAM9 = default;
            item.Conditions = null;
            base.Clear(item);
        }
        
        public override void Clear(IAComponent item)
        {
            Clear(item: (IPlanetContentManagerContentPropertiesComponent)item);
        }
        
        #region Mutagen
        public void RemapLinks(IPlanetContentManagerContentPropertiesComponent obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Global.Relink(mapping);
            obj.Conditions?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPlanetContentManagerContentPropertiesComponent item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: PlanetContentManagerContentPropertiesComponentBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAComponent item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (PlanetContentManagerContentPropertiesComponent)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class PlanetContentManagerContentPropertiesComponentCommon : AComponentCommon
    {
        public new static readonly PlanetContentManagerContentPropertiesComponentCommon Instance = new PlanetContentManagerContentPropertiesComponentCommon();

        public PlanetContentManagerContentPropertiesComponent.Mask<bool> GetEqualsMask(
            IPlanetContentManagerContentPropertiesComponentGetter item,
            IPlanetContentManagerContentPropertiesComponentGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlanetContentManagerContentPropertiesComponent.Mask<bool>(false);
            ((PlanetContentManagerContentPropertiesComponentCommon)((IPlanetContentManagerContentPropertiesComponentGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlanetContentManagerContentPropertiesComponentGetter item,
            IPlanetContentManagerContentPropertiesComponentGetter rhs,
            PlanetContentManagerContentPropertiesComponent.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ZNAM = item.ZNAM == rhs.ZNAM;
            ret.YNAM = item.YNAM == rhs.YNAM;
            ret.XNAM = item.XNAM == rhs.XNAM;
            ret.WNAM = item.WNAM == rhs.WNAM;
            ret.VNAM = item.VNAM == rhs.VNAM;
            ret.UNAM = item.UNAM == rhs.UNAM;
            ret.NAM1 = item.NAM1.EqualsWithin(rhs.NAM1);
            ret.Global = item.Global.Equals(rhs.Global);
            ret.NAM3 = item.NAM3 == rhs.NAM3;
            ret.NAM4 = MemorySliceExt.SequenceEqual(item.NAM4, rhs.NAM4);
            ret.NAM5 = item.NAM5 == rhs.NAM5;
            ret.NAM6 = item.NAM6 == rhs.NAM6;
            ret.NAM7 = item.NAM7 == rhs.NAM7;
            ret.NAM8 = item.NAM8 == rhs.NAM8;
            ret.NAM9 = item.NAM9 == rhs.NAM9;
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IPlanetContentManagerContentPropertiesComponentGetter item,
            string? name = null,
            PlanetContentManagerContentPropertiesComponent.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IPlanetContentManagerContentPropertiesComponentGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlanetContentManagerContentPropertiesComponent.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"PlanetContentManagerContentPropertiesComponent =>");
            }
            else
            {
                sb.AppendLine($"{name} (PlanetContentManagerContentPropertiesComponent) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IPlanetContentManagerContentPropertiesComponentGetter item,
            StructuredStringBuilder sb,
            PlanetContentManagerContentPropertiesComponent.Mask<bool>? printMask = null)
        {
            AComponentCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.ZNAM ?? true)
                && item.ZNAM is {} ZNAMItem)
            {
                sb.AppendItem(ZNAMItem, "ZNAM");
            }
            if ((printMask?.YNAM ?? true)
                && item.YNAM is {} YNAMItem)
            {
                sb.AppendItem(YNAMItem, "YNAM");
            }
            if ((printMask?.XNAM ?? true)
                && item.XNAM is {} XNAMItem)
            {
                sb.AppendItem(XNAMItem, "XNAM");
            }
            if ((printMask?.WNAM ?? true)
                && item.WNAM is {} WNAMItem)
            {
                sb.AppendItem(WNAMItem, "WNAM");
            }
            if ((printMask?.VNAM ?? true)
                && item.VNAM is {} VNAMItem)
            {
                sb.AppendItem(VNAMItem, "VNAM");
            }
            if ((printMask?.UNAM ?? true)
                && item.UNAM is {} UNAMItem)
            {
                sb.AppendItem(UNAMItem, "UNAM");
            }
            if ((printMask?.NAM1 ?? true)
                && item.NAM1 is {} NAM1Item)
            {
                sb.AppendItem(NAM1Item, "NAM1");
            }
            if (printMask?.Global ?? true)
            {
                sb.AppendItem(item.Global.FormKeyNullable, "Global");
            }
            if ((printMask?.NAM3 ?? true)
                && item.NAM3 is {} NAM3Item)
            {
                sb.AppendItem(NAM3Item, "NAM3");
            }
            if ((printMask?.NAM4 ?? true)
                && item.NAM4 is {} NAM4Item)
            {
                sb.AppendLine($"NAM4 => {SpanExt.ToHexString(NAM4Item)}");
            }
            if ((printMask?.NAM5 ?? true)
                && item.NAM5 is {} NAM5Item)
            {
                sb.AppendItem(NAM5Item, "NAM5");
            }
            if ((printMask?.NAM6 ?? true)
                && item.NAM6 is {} NAM6Item)
            {
                sb.AppendItem(NAM6Item, "NAM6");
            }
            if ((printMask?.NAM7 ?? true)
                && item.NAM7 is {} NAM7Item)
            {
                sb.AppendItem(NAM7Item, "NAM7");
            }
            if ((printMask?.NAM8 ?? true)
                && item.NAM8 is {} NAM8Item)
            {
                sb.AppendItem(NAM8Item, "NAM8");
            }
            if ((printMask?.NAM9 ?? true)
                && item.NAM9 is {} NAM9Item)
            {
                sb.AppendItem(NAM9Item, "NAM9");
            }
            if ((printMask?.Conditions?.Overall ?? true)
                && item.Conditions is {} ConditionsItem)
            {
                sb.AppendLine("Conditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ConditionsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static PlanetContentManagerContentPropertiesComponent_FieldIndex ConvertFieldIndex(AComponent_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlanetContentManagerContentPropertiesComponentGetter? lhs,
            IPlanetContentManagerContentPropertiesComponentGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAComponentGetter)lhs, (IAComponentGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.ZNAM) ?? true))
            {
                if (lhs.ZNAM != rhs.ZNAM) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.YNAM) ?? true))
            {
                if (lhs.YNAM != rhs.YNAM) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.XNAM) ?? true))
            {
                if (lhs.XNAM != rhs.XNAM) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.WNAM) ?? true))
            {
                if (lhs.WNAM != rhs.WNAM) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.VNAM) ?? true))
            {
                if (lhs.VNAM != rhs.VNAM) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.UNAM) ?? true))
            {
                if (lhs.UNAM != rhs.UNAM) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM1) ?? true))
            {
                if (!lhs.NAM1.EqualsWithin(rhs.NAM1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.Global) ?? true))
            {
                if (!lhs.Global.Equals(rhs.Global)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM3) ?? true))
            {
                if (lhs.NAM3 != rhs.NAM3) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM4) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.NAM4, rhs.NAM4)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM5) ?? true))
            {
                if (lhs.NAM5 != rhs.NAM5) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM6) ?? true))
            {
                if (lhs.NAM6 != rhs.NAM6) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM7) ?? true))
            {
                if (lhs.NAM7 != rhs.NAM7) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM8) ?? true))
            {
                if (lhs.NAM8 != rhs.NAM8) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM9) ?? true))
            {
                if (lhs.NAM9 != rhs.NAM9) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqualNullable(rhs.Conditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.Conditions)))) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAComponentGetter? lhs,
            IAComponentGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IPlanetContentManagerContentPropertiesComponentGetter?)lhs,
                rhs: rhs as IPlanetContentManagerContentPropertiesComponentGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IPlanetContentManagerContentPropertiesComponentGetter item)
        {
            var hash = new HashCode();
            if (item.ZNAM is {} ZNAMitem)
            {
                hash.Add(ZNAMitem);
            }
            if (item.YNAM is {} YNAMitem)
            {
                hash.Add(YNAMitem);
            }
            if (item.XNAM is {} XNAMitem)
            {
                hash.Add(XNAMitem);
            }
            if (item.WNAM is {} WNAMitem)
            {
                hash.Add(WNAMitem);
            }
            if (item.VNAM is {} VNAMitem)
            {
                hash.Add(VNAMitem);
            }
            if (item.UNAM is {} UNAMitem)
            {
                hash.Add(UNAMitem);
            }
            if (item.NAM1 is {} NAM1item)
            {
                hash.Add(NAM1item);
            }
            hash.Add(item.Global);
            if (item.NAM3 is {} NAM3item)
            {
                hash.Add(NAM3item);
            }
            if (item.NAM4 is {} NAM4Item)
            {
                hash.Add(NAM4Item);
            }
            if (item.NAM5 is {} NAM5item)
            {
                hash.Add(NAM5item);
            }
            if (item.NAM6 is {} NAM6item)
            {
                hash.Add(NAM6item);
            }
            if (item.NAM7 is {} NAM7item)
            {
                hash.Add(NAM7item);
            }
            if (item.NAM8 is {} NAM8item)
            {
                hash.Add(NAM8item);
            }
            if (item.NAM9 is {} NAM9item)
            {
                hash.Add(NAM9item);
            }
            hash.Add(item.Conditions);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAComponentGetter item)
        {
            return GetHashCode(item: (IPlanetContentManagerContentPropertiesComponentGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return PlanetContentManagerContentPropertiesComponent.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IPlanetContentManagerContentPropertiesComponentGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (FormLinkInformation.TryFactory(obj.Global, out var GlobalInfo))
            {
                yield return GlobalInfo;
            }
            if (obj.Conditions is {} ConditionsItem)
            {
                foreach (var item in ConditionsItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class PlanetContentManagerContentPropertiesComponentSetterTranslationCommon : AComponentSetterTranslationCommon
    {
        public new static readonly PlanetContentManagerContentPropertiesComponentSetterTranslationCommon Instance = new PlanetContentManagerContentPropertiesComponentSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPlanetContentManagerContentPropertiesComponent item,
            IPlanetContentManagerContentPropertiesComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAComponent)item,
                (IAComponentGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.ZNAM) ?? true))
            {
                item.ZNAM = rhs.ZNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.YNAM) ?? true))
            {
                item.YNAM = rhs.YNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.XNAM) ?? true))
            {
                item.XNAM = rhs.XNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.WNAM) ?? true))
            {
                item.WNAM = rhs.WNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.VNAM) ?? true))
            {
                item.VNAM = rhs.VNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.UNAM) ?? true))
            {
                item.UNAM = rhs.UNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM1) ?? true))
            {
                item.NAM1 = rhs.NAM1;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.Global) ?? true))
            {
                item.Global.SetTo(rhs.Global.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM3) ?? true))
            {
                item.NAM3 = rhs.NAM3;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM4) ?? true))
            {
                if(rhs.NAM4 is {} NAM4rhs)
                {
                    item.NAM4 = NAM4rhs.ToArray();
                }
                else
                {
                    item.NAM4 = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM5) ?? true))
            {
                item.NAM5 = rhs.NAM5;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM6) ?? true))
            {
                item.NAM6 = rhs.NAM6;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM7) ?? true))
            {
                item.NAM7 = rhs.NAM7;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM8) ?? true))
            {
                item.NAM8 = rhs.NAM8;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM9) ?? true))
            {
                item.NAM9 = rhs.NAM9;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)PlanetContentManagerContentPropertiesComponent_FieldIndex.Conditions);
                try
                {
                    if ((rhs.Conditions != null))
                    {
                        item.Conditions = 
                            rhs.Conditions
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<Condition>();
                    }
                    else
                    {
                        item.Conditions = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        
        public override void DeepCopyIn(
            IAComponent item,
            IAComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlanetContentManagerContentPropertiesComponent)item,
                rhs: (IPlanetContentManagerContentPropertiesComponentGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public PlanetContentManagerContentPropertiesComponent DeepCopy(
            IPlanetContentManagerContentPropertiesComponentGetter item,
            PlanetContentManagerContentPropertiesComponent.TranslationMask? copyMask = null)
        {
            PlanetContentManagerContentPropertiesComponent ret = (PlanetContentManagerContentPropertiesComponent)((PlanetContentManagerContentPropertiesComponentCommon)((IPlanetContentManagerContentPropertiesComponentGetter)item).CommonInstance()!).GetNew();
            ((PlanetContentManagerContentPropertiesComponentSetterTranslationCommon)((IPlanetContentManagerContentPropertiesComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PlanetContentManagerContentPropertiesComponent DeepCopy(
            IPlanetContentManagerContentPropertiesComponentGetter item,
            out PlanetContentManagerContentPropertiesComponent.ErrorMask errorMask,
            PlanetContentManagerContentPropertiesComponent.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PlanetContentManagerContentPropertiesComponent ret = (PlanetContentManagerContentPropertiesComponent)((PlanetContentManagerContentPropertiesComponentCommon)((IPlanetContentManagerContentPropertiesComponentGetter)item).CommonInstance()!).GetNew();
            ((PlanetContentManagerContentPropertiesComponentSetterTranslationCommon)((IPlanetContentManagerContentPropertiesComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PlanetContentManagerContentPropertiesComponent.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PlanetContentManagerContentPropertiesComponent DeepCopy(
            IPlanetContentManagerContentPropertiesComponentGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PlanetContentManagerContentPropertiesComponent ret = (PlanetContentManagerContentPropertiesComponent)((PlanetContentManagerContentPropertiesComponentCommon)((IPlanetContentManagerContentPropertiesComponentGetter)item).CommonInstance()!).GetNew();
            ((PlanetContentManagerContentPropertiesComponentSetterTranslationCommon)((IPlanetContentManagerContentPropertiesComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class PlanetContentManagerContentPropertiesComponent
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlanetContentManagerContentPropertiesComponent_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => PlanetContentManagerContentPropertiesComponent_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlanetContentManagerContentPropertiesComponentCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PlanetContentManagerContentPropertiesComponentSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlanetContentManagerContentPropertiesComponentSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class PlanetContentManagerContentPropertiesComponentBinaryWriteTranslation :
        AComponentBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly PlanetContentManagerContentPropertiesComponentBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IPlanetContentManagerContentPropertiesComponentGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            AComponentBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.ZNAM,
                header: translationParams.ConvertToCustom(RecordTypes.ZNAM));
            ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.YNAM,
                header: translationParams.ConvertToCustom(RecordTypes.YNAM));
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.XNAM,
                header: translationParams.ConvertToCustom(RecordTypes.XNAM));
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.WNAM,
                header: translationParams.ConvertToCustom(RecordTypes.WNAM));
            ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.VNAM,
                header: translationParams.ConvertToCustom(RecordTypes.VNAM));
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.UNAM,
                header: translationParams.ConvertToCustom(RecordTypes.UNAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.NAM1,
                header: translationParams.ConvertToCustom(RecordTypes.NAM1));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Global,
                header: translationParams.ConvertToCustom(RecordTypes.NAM2));
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.NAM3,
                header: translationParams.ConvertToCustom(RecordTypes.NAM3));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.NAM4,
                header: translationParams.ConvertToCustom(RecordTypes.NAM4));
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.NAM5,
                header: translationParams.ConvertToCustom(RecordTypes.NAM5));
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.NAM6,
                header: translationParams.ConvertToCustom(RecordTypes.NAM6));
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.NAM7,
                header: translationParams.ConvertToCustom(RecordTypes.NAM7));
            ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.NAM8,
                header: translationParams.ConvertToCustom(RecordTypes.NAM8));
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.NAM9,
                header: translationParams.ConvertToCustom(RecordTypes.NAM9));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Conditions,
                counterType: RecordTypes.CITC,
                counterLength: 4,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IPlanetContentManagerContentPropertiesComponentGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, RecordTypes.BFCE)) { } // End Marker
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IPlanetContentManagerContentPropertiesComponentGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IAComponentGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IPlanetContentManagerContentPropertiesComponentGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class PlanetContentManagerContentPropertiesComponentBinaryCreateTranslation : AComponentBinaryCreateTranslation
    {
        public new static readonly PlanetContentManagerContentPropertiesComponentBinaryCreateTranslation Instance = new PlanetContentManagerContentPropertiesComponentBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IPlanetContentManagerContentPropertiesComponent item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.ZNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ZNAM = frame.ReadUInt32();
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.ZNAM;
                }
                case RecordTypeInts.YNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.YNAM = frame.ReadUInt8();
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.YNAM;
                }
                case RecordTypeInts.XNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XNAM = frame.ReadUInt32();
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.XNAM;
                }
                case RecordTypeInts.WNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WNAM = frame.ReadUInt32();
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.WNAM;
                }
                case RecordTypeInts.VNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VNAM = frame.ReadUInt8();
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.VNAM;
                }
                case RecordTypeInts.UNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.UNAM = frame.ReadUInt32();
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.UNAM;
                }
                case RecordTypeInts.NAM1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM1 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM1;
                }
                case RecordTypeInts.NAM2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Global.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.Global;
                }
                case RecordTypeInts.NAM3:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM3 = frame.ReadUInt32();
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM3;
                }
                case RecordTypeInts.NAM4:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM4 = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM4;
                }
                case RecordTypeInts.NAM5:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM5 = frame.ReadUInt32();
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM5;
                }
                case RecordTypeInts.NAM6:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM6 = frame.ReadUInt32();
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM6;
                }
                case RecordTypeInts.NAM7:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM7 = frame.ReadUInt32();
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM7;
                }
                case RecordTypeInts.NAM8:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM8 = frame.ReadUInt8();
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM8;
                }
                case RecordTypeInts.NAM9:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM9 = frame.ReadUInt32();
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM9;
                }
                case RecordTypeInts.CTDA:
                case RecordTypeInts.CITC:
                {
                    item.Conditions = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.CITC,
                            triggeringRecord: Condition_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary)
                        .CastExtendedList<Condition>();
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.Conditions;
                }
                default:
                    return AComponentBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class PlanetContentManagerContentPropertiesComponentBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class PlanetContentManagerContentPropertiesComponentBinaryOverlay :
        AComponentBinaryOverlay,
        IPlanetContentManagerContentPropertiesComponentGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlanetContentManagerContentPropertiesComponent_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => PlanetContentManagerContentPropertiesComponent_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlanetContentManagerContentPropertiesComponentCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlanetContentManagerContentPropertiesComponentSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PlanetContentManagerContentPropertiesComponentCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlanetContentManagerContentPropertiesComponentBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlanetContentManagerContentPropertiesComponentBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region ZNAM
        private int? _ZNAMLocation;
        public UInt32? ZNAM => _ZNAMLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ZNAMLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region YNAM
        private int? _YNAMLocation;
        public Byte? YNAM => _YNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _YNAMLocation.Value, _package.MetaData.Constants)[0] : default(Byte?);
        #endregion
        #region XNAM
        private int? _XNAMLocation;
        public UInt32? XNAM => _XNAMLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _XNAMLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region WNAM
        private int? _WNAMLocation;
        public UInt32? WNAM => _WNAMLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _WNAMLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region VNAM
        private int? _VNAMLocation;
        public Byte? VNAM => _VNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _VNAMLocation.Value, _package.MetaData.Constants)[0] : default(Byte?);
        #endregion
        #region UNAM
        private int? _UNAMLocation;
        public UInt32? UNAM => _UNAMLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _UNAMLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region NAM1
        private int? _NAM1Location;
        public Single? NAM1 => _NAM1Location.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _NAM1Location.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region Global
        private int? _GlobalLocation;
        public IFormLinkNullableGetter<IGlobalGetter> Global => _GlobalLocation.HasValue ? new FormLinkNullable<IGlobalGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _GlobalLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IGlobalGetter>.Null;
        #endregion
        #region NAM3
        private int? _NAM3Location;
        public UInt32? NAM3 => _NAM3Location.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NAM3Location.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region NAM4
        private int? _NAM4Location;
        public ReadOnlyMemorySlice<Byte>? NAM4 => _NAM4Location.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _NAM4Location.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region NAM5
        private int? _NAM5Location;
        public UInt32? NAM5 => _NAM5Location.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NAM5Location.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region NAM6
        private int? _NAM6Location;
        public UInt32? NAM6 => _NAM6Location.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NAM6Location.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region NAM7
        private int? _NAM7Location;
        public UInt32? NAM7 => _NAM7Location.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NAM7Location.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region NAM8
        private int? _NAM8Location;
        public Byte? NAM8 => _NAM8Location.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _NAM8Location.Value, _package.MetaData.Constants)[0] : default(Byte?);
        #endregion
        #region NAM9
        private int? _NAM9Location;
        public UInt32? NAM9 => _NAM9Location.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NAM9Location.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        public IReadOnlyList<IConditionGetter>? Conditions { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PlanetContentManagerContentPropertiesComponentBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IPlanetContentManagerContentPropertiesComponentGetter PlanetContentManagerContentPropertiesComponentFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new PlanetContentManagerContentPropertiesComponentBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IPlanetContentManagerContentPropertiesComponentGetter PlanetContentManagerContentPropertiesComponentFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return PlanetContentManagerContentPropertiesComponentFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.ZNAM:
                {
                    _ZNAMLocation = (stream.Position - offset);
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.ZNAM;
                }
                case RecordTypeInts.YNAM:
                {
                    _YNAMLocation = (stream.Position - offset);
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.YNAM;
                }
                case RecordTypeInts.XNAM:
                {
                    _XNAMLocation = (stream.Position - offset);
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.XNAM;
                }
                case RecordTypeInts.WNAM:
                {
                    _WNAMLocation = (stream.Position - offset);
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.WNAM;
                }
                case RecordTypeInts.VNAM:
                {
                    _VNAMLocation = (stream.Position - offset);
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.VNAM;
                }
                case RecordTypeInts.UNAM:
                {
                    _UNAMLocation = (stream.Position - offset);
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.UNAM;
                }
                case RecordTypeInts.NAM1:
                {
                    _NAM1Location = (stream.Position - offset);
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM1;
                }
                case RecordTypeInts.NAM2:
                {
                    _GlobalLocation = (stream.Position - offset);
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.Global;
                }
                case RecordTypeInts.NAM3:
                {
                    _NAM3Location = (stream.Position - offset);
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM3;
                }
                case RecordTypeInts.NAM4:
                {
                    _NAM4Location = (stream.Position - offset);
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM4;
                }
                case RecordTypeInts.NAM5:
                {
                    _NAM5Location = (stream.Position - offset);
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM5;
                }
                case RecordTypeInts.NAM6:
                {
                    _NAM6Location = (stream.Position - offset);
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM6;
                }
                case RecordTypeInts.NAM7:
                {
                    _NAM7Location = (stream.Position - offset);
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM7;
                }
                case RecordTypeInts.NAM8:
                {
                    _NAM8Location = (stream.Position - offset);
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM8;
                }
                case RecordTypeInts.NAM9:
                {
                    _NAM9Location = (stream.Position - offset);
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.NAM9;
                }
                case RecordTypeInts.CTDA:
                case RecordTypeInts.CITC:
                {
                    this.Conditions = BinaryOverlayList.FactoryByCountPerItem<IConditionGetter>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        trigger: Condition_Registration.TriggerSpecs,
                        countType: RecordTypes.CITC,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new OverlayStream(s, p), p, recConv),
                        skipHeader: false);
                    return (int)PlanetContentManagerContentPropertiesComponent_FieldIndex.Conditions;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlanetContentManagerContentPropertiesComponentMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPlanetContentManagerContentPropertiesComponentGetter rhs) return false;
            return ((PlanetContentManagerContentPropertiesComponentCommon)((IPlanetContentManagerContentPropertiesComponentGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlanetContentManagerContentPropertiesComponentGetter? obj)
        {
            return ((PlanetContentManagerContentPropertiesComponentCommon)((IPlanetContentManagerContentPropertiesComponentGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlanetContentManagerContentPropertiesComponentCommon)((IPlanetContentManagerContentPropertiesComponentGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

