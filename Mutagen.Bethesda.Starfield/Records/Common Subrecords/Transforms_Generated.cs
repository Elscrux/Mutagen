/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class Transforms :
        IEquatable<ITransformsGetter>,
        ILoquiObjectSetter<Transforms>,
        ITransforms
    {
        #region Ctor
        public Transforms()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Versioning
        public Transforms.VersioningBreaks Versioning { get; set; } = default(Transforms.VersioningBreaks);
        #endregion
        #region InventoryIcon
        private readonly IFormLink<ITransformGetter> _InventoryIcon = new FormLink<ITransformGetter>();
        public IFormLink<ITransformGetter> InventoryIcon
        {
            get => _InventoryIcon;
            set => _InventoryIcon.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ITransformGetter> ITransformsGetter.InventoryIcon => this.InventoryIcon;
        #endregion
        #region Outpost
        private readonly IFormLink<ITransformGetter> _Outpost = new FormLink<ITransformGetter>();
        public IFormLink<ITransformGetter> Outpost
        {
            get => _Outpost;
            set => _Outpost.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ITransformGetter> ITransformsGetter.Outpost => this.Outpost;
        #endregion
        #region Ship
        private readonly IFormLink<ITransformGetter> _Ship = new FormLink<ITransformGetter>();
        public IFormLink<ITransformGetter> Ship
        {
            get => _Ship;
            set => _Ship.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ITransformGetter> ITransformsGetter.Ship => this.Ship;
        #endregion
        #region Preview
        private readonly IFormLink<ITransformGetter> _Preview = new FormLink<ITransformGetter>();
        public IFormLink<ITransformGetter> Preview
        {
            get => _Preview;
            set => _Preview.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ITransformGetter> ITransformsGetter.Preview => this.Preview;
        #endregion
        #region Inventory
        private readonly IFormLink<ITransformGetter> _Inventory = new FormLink<ITransformGetter>();
        public IFormLink<ITransformGetter> Inventory
        {
            get => _Inventory;
            set => _Inventory.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ITransformGetter> ITransformsGetter.Inventory => this.Inventory;
        #endregion
        #region Workbench
        private readonly IFormLink<ITransformGetter> _Workbench = new FormLink<ITransformGetter>();
        public IFormLink<ITransformGetter> Workbench
        {
            get => _Workbench;
            set => _Workbench.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ITransformGetter> ITransformsGetter.Workbench => this.Workbench;
        #endregion
        #region MainGameUI
        private readonly IFormLink<ITransformGetter> _MainGameUI = new FormLink<ITransformGetter>();
        public IFormLink<ITransformGetter> MainGameUI
        {
            get => _MainGameUI;
            set => _MainGameUI.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ITransformGetter> ITransformsGetter.MainGameUI => this.MainGameUI;
        #endregion
        #region Unknown
        private readonly IFormLink<ITransformGetter> _Unknown = new FormLink<ITransformGetter>();
        public IFormLink<ITransformGetter> Unknown
        {
            get => _Unknown;
            set => _Unknown.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ITransformGetter> ITransformsGetter.Unknown => this.Unknown;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TransformsMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ITransformsGetter rhs) return false;
            return ((TransformsCommon)((ITransformsGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITransformsGetter? obj)
        {
            return ((TransformsCommon)((ITransformsGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TransformsCommon)((ITransformsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Versioning = initialValue;
                this.InventoryIcon = initialValue;
                this.Outpost = initialValue;
                this.Ship = initialValue;
                this.Preview = initialValue;
                this.Inventory = initialValue;
                this.Workbench = initialValue;
                this.MainGameUI = initialValue;
                this.Unknown = initialValue;
            }

            public Mask(
                TItem Versioning,
                TItem InventoryIcon,
                TItem Outpost,
                TItem Ship,
                TItem Preview,
                TItem Inventory,
                TItem Workbench,
                TItem MainGameUI,
                TItem Unknown)
            {
                this.Versioning = Versioning;
                this.InventoryIcon = InventoryIcon;
                this.Outpost = Outpost;
                this.Ship = Ship;
                this.Preview = Preview;
                this.Inventory = Inventory;
                this.Workbench = Workbench;
                this.MainGameUI = MainGameUI;
                this.Unknown = Unknown;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Versioning;
            public TItem InventoryIcon;
            public TItem Outpost;
            public TItem Ship;
            public TItem Preview;
            public TItem Inventory;
            public TItem Workbench;
            public TItem MainGameUI;
            public TItem Unknown;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Versioning, rhs.Versioning)) return false;
                if (!object.Equals(this.InventoryIcon, rhs.InventoryIcon)) return false;
                if (!object.Equals(this.Outpost, rhs.Outpost)) return false;
                if (!object.Equals(this.Ship, rhs.Ship)) return false;
                if (!object.Equals(this.Preview, rhs.Preview)) return false;
                if (!object.Equals(this.Inventory, rhs.Inventory)) return false;
                if (!object.Equals(this.Workbench, rhs.Workbench)) return false;
                if (!object.Equals(this.MainGameUI, rhs.MainGameUI)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Versioning);
                hash.Add(this.InventoryIcon);
                hash.Add(this.Outpost);
                hash.Add(this.Ship);
                hash.Add(this.Preview);
                hash.Add(this.Inventory);
                hash.Add(this.Workbench);
                hash.Add(this.MainGameUI);
                hash.Add(this.Unknown);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Versioning)) return false;
                if (!eval(this.InventoryIcon)) return false;
                if (!eval(this.Outpost)) return false;
                if (!eval(this.Ship)) return false;
                if (!eval(this.Preview)) return false;
                if (!eval(this.Inventory)) return false;
                if (!eval(this.Workbench)) return false;
                if (!eval(this.MainGameUI)) return false;
                if (!eval(this.Unknown)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Versioning)) return true;
                if (eval(this.InventoryIcon)) return true;
                if (eval(this.Outpost)) return true;
                if (eval(this.Ship)) return true;
                if (eval(this.Preview)) return true;
                if (eval(this.Inventory)) return true;
                if (eval(this.Workbench)) return true;
                if (eval(this.MainGameUI)) return true;
                if (eval(this.Unknown)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Transforms.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Versioning = eval(this.Versioning);
                obj.InventoryIcon = eval(this.InventoryIcon);
                obj.Outpost = eval(this.Outpost);
                obj.Ship = eval(this.Ship);
                obj.Preview = eval(this.Preview);
                obj.Inventory = eval(this.Inventory);
                obj.Workbench = eval(this.Workbench);
                obj.MainGameUI = eval(this.MainGameUI);
                obj.Unknown = eval(this.Unknown);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Transforms.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Transforms.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Transforms.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Versioning ?? true)
                    {
                        sb.AppendItem(Versioning, "Versioning");
                    }
                    if (printMask?.InventoryIcon ?? true)
                    {
                        sb.AppendItem(InventoryIcon, "InventoryIcon");
                    }
                    if (printMask?.Outpost ?? true)
                    {
                        sb.AppendItem(Outpost, "Outpost");
                    }
                    if (printMask?.Ship ?? true)
                    {
                        sb.AppendItem(Ship, "Ship");
                    }
                    if (printMask?.Preview ?? true)
                    {
                        sb.AppendItem(Preview, "Preview");
                    }
                    if (printMask?.Inventory ?? true)
                    {
                        sb.AppendItem(Inventory, "Inventory");
                    }
                    if (printMask?.Workbench ?? true)
                    {
                        sb.AppendItem(Workbench, "Workbench");
                    }
                    if (printMask?.MainGameUI ?? true)
                    {
                        sb.AppendItem(MainGameUI, "MainGameUI");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Versioning;
            public Exception? InventoryIcon;
            public Exception? Outpost;
            public Exception? Ship;
            public Exception? Preview;
            public Exception? Inventory;
            public Exception? Workbench;
            public Exception? MainGameUI;
            public Exception? Unknown;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Transforms_FieldIndex enu = (Transforms_FieldIndex)index;
                switch (enu)
                {
                    case Transforms_FieldIndex.Versioning:
                        return Versioning;
                    case Transforms_FieldIndex.InventoryIcon:
                        return InventoryIcon;
                    case Transforms_FieldIndex.Outpost:
                        return Outpost;
                    case Transforms_FieldIndex.Ship:
                        return Ship;
                    case Transforms_FieldIndex.Preview:
                        return Preview;
                    case Transforms_FieldIndex.Inventory:
                        return Inventory;
                    case Transforms_FieldIndex.Workbench:
                        return Workbench;
                    case Transforms_FieldIndex.MainGameUI:
                        return MainGameUI;
                    case Transforms_FieldIndex.Unknown:
                        return Unknown;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Transforms_FieldIndex enu = (Transforms_FieldIndex)index;
                switch (enu)
                {
                    case Transforms_FieldIndex.Versioning:
                        this.Versioning = ex;
                        break;
                    case Transforms_FieldIndex.InventoryIcon:
                        this.InventoryIcon = ex;
                        break;
                    case Transforms_FieldIndex.Outpost:
                        this.Outpost = ex;
                        break;
                    case Transforms_FieldIndex.Ship:
                        this.Ship = ex;
                        break;
                    case Transforms_FieldIndex.Preview:
                        this.Preview = ex;
                        break;
                    case Transforms_FieldIndex.Inventory:
                        this.Inventory = ex;
                        break;
                    case Transforms_FieldIndex.Workbench:
                        this.Workbench = ex;
                        break;
                    case Transforms_FieldIndex.MainGameUI:
                        this.MainGameUI = ex;
                        break;
                    case Transforms_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Transforms_FieldIndex enu = (Transforms_FieldIndex)index;
                switch (enu)
                {
                    case Transforms_FieldIndex.Versioning:
                        this.Versioning = (Exception?)obj;
                        break;
                    case Transforms_FieldIndex.InventoryIcon:
                        this.InventoryIcon = (Exception?)obj;
                        break;
                    case Transforms_FieldIndex.Outpost:
                        this.Outpost = (Exception?)obj;
                        break;
                    case Transforms_FieldIndex.Ship:
                        this.Ship = (Exception?)obj;
                        break;
                    case Transforms_FieldIndex.Preview:
                        this.Preview = (Exception?)obj;
                        break;
                    case Transforms_FieldIndex.Inventory:
                        this.Inventory = (Exception?)obj;
                        break;
                    case Transforms_FieldIndex.Workbench:
                        this.Workbench = (Exception?)obj;
                        break;
                    case Transforms_FieldIndex.MainGameUI:
                        this.MainGameUI = (Exception?)obj;
                        break;
                    case Transforms_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Versioning != null) return true;
                if (InventoryIcon != null) return true;
                if (Outpost != null) return true;
                if (Ship != null) return true;
                if (Preview != null) return true;
                if (Inventory != null) return true;
                if (Workbench != null) return true;
                if (MainGameUI != null) return true;
                if (Unknown != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Versioning, "Versioning");
                }
                {
                    sb.AppendItem(InventoryIcon, "InventoryIcon");
                }
                {
                    sb.AppendItem(Outpost, "Outpost");
                }
                {
                    sb.AppendItem(Ship, "Ship");
                }
                {
                    sb.AppendItem(Preview, "Preview");
                }
                {
                    sb.AppendItem(Inventory, "Inventory");
                }
                {
                    sb.AppendItem(Workbench, "Workbench");
                }
                {
                    sb.AppendItem(MainGameUI, "MainGameUI");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Versioning = this.Versioning.Combine(rhs.Versioning);
                ret.InventoryIcon = this.InventoryIcon.Combine(rhs.InventoryIcon);
                ret.Outpost = this.Outpost.Combine(rhs.Outpost);
                ret.Ship = this.Ship.Combine(rhs.Ship);
                ret.Preview = this.Preview.Combine(rhs.Preview);
                ret.Inventory = this.Inventory.Combine(rhs.Inventory);
                ret.Workbench = this.Workbench.Combine(rhs.Workbench);
                ret.MainGameUI = this.MainGameUI.Combine(rhs.MainGameUI);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Versioning;
            public bool InventoryIcon;
            public bool Outpost;
            public bool Ship;
            public bool Preview;
            public bool Inventory;
            public bool Workbench;
            public bool MainGameUI;
            public bool Unknown;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Versioning = defaultOn;
                this.InventoryIcon = defaultOn;
                this.Outpost = defaultOn;
                this.Ship = defaultOn;
                this.Preview = defaultOn;
                this.Inventory = defaultOn;
                this.Workbench = defaultOn;
                this.MainGameUI = defaultOn;
                this.Unknown = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Versioning, null));
                ret.Add((InventoryIcon, null));
                ret.Add((Outpost, null));
                ret.Add((Ship, null));
                ret.Add((Preview, null));
                ret.Add((Inventory, null));
                ret.Add((Workbench, null));
                ret.Add((MainGameUI, null));
                ret.Add((Unknown, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        [Flags]
        public enum VersioningBreaks
        {
            Break0 = 1
        }
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => TransformsCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => TransformsSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TransformsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TransformsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static Transforms CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Transforms();
            ((TransformsSetterCommon)((ITransformsGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Transforms item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((TransformsSetterCommon)((ITransformsGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Transforms GetNew()
        {
            return new Transforms();
        }

    }
    #endregion

    #region Interface
    public partial interface ITransforms :
        IFormLinkContainer,
        ILoquiObjectSetter<ITransforms>,
        ITransformsGetter
    {
        new Transforms.VersioningBreaks Versioning { get; set; }
        new IFormLink<ITransformGetter> InventoryIcon { get; set; }
        new IFormLink<ITransformGetter> Outpost { get; set; }
        new IFormLink<ITransformGetter> Ship { get; set; }
        new IFormLink<ITransformGetter> Preview { get; set; }
        new IFormLink<ITransformGetter> Inventory { get; set; }
        new IFormLink<ITransformGetter> Workbench { get; set; }
        new IFormLink<ITransformGetter> MainGameUI { get; set; }
        new IFormLink<ITransformGetter> Unknown { get; set; }
    }

    public partial interface ITransformsGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ITransformsGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => Transforms_Registration.Instance;
        Transforms.VersioningBreaks Versioning { get; }
        IFormLinkGetter<ITransformGetter> InventoryIcon { get; }
        IFormLinkGetter<ITransformGetter> Outpost { get; }
        IFormLinkGetter<ITransformGetter> Ship { get; }
        IFormLinkGetter<ITransformGetter> Preview { get; }
        IFormLinkGetter<ITransformGetter> Inventory { get; }
        IFormLinkGetter<ITransformGetter> Workbench { get; }
        IFormLinkGetter<ITransformGetter> MainGameUI { get; }
        IFormLinkGetter<ITransformGetter> Unknown { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class TransformsMixIn
    {
        public static void Clear(this ITransforms item)
        {
            ((TransformsSetterCommon)((ITransformsGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Transforms.Mask<bool> GetEqualsMask(
            this ITransformsGetter item,
            ITransformsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TransformsCommon)((ITransformsGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ITransformsGetter item,
            string? name = null,
            Transforms.Mask<bool>? printMask = null)
        {
            return ((TransformsCommon)((ITransformsGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ITransformsGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Transforms.Mask<bool>? printMask = null)
        {
            ((TransformsCommon)((ITransformsGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ITransformsGetter item,
            ITransformsGetter rhs,
            Transforms.TranslationMask? equalsMask = null)
        {
            return ((TransformsCommon)((ITransformsGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ITransforms lhs,
            ITransformsGetter rhs)
        {
            ((TransformsSetterTranslationCommon)((ITransformsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ITransforms lhs,
            ITransformsGetter rhs,
            Transforms.TranslationMask? copyMask = null)
        {
            ((TransformsSetterTranslationCommon)((ITransformsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ITransforms lhs,
            ITransformsGetter rhs,
            out Transforms.ErrorMask errorMask,
            Transforms.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TransformsSetterTranslationCommon)((ITransformsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Transforms.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITransforms lhs,
            ITransformsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TransformsSetterTranslationCommon)((ITransformsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Transforms DeepCopy(
            this ITransformsGetter item,
            Transforms.TranslationMask? copyMask = null)
        {
            return ((TransformsSetterTranslationCommon)((ITransformsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Transforms DeepCopy(
            this ITransformsGetter item,
            out Transforms.ErrorMask errorMask,
            Transforms.TranslationMask? copyMask = null)
        {
            return ((TransformsSetterTranslationCommon)((ITransformsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Transforms DeepCopy(
            this ITransformsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TransformsSetterTranslationCommon)((ITransformsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ITransforms item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((TransformsSetterCommon)((ITransformsGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Transforms_FieldIndex
    {
        Versioning = 0,
        InventoryIcon = 1,
        Outpost = 2,
        Ship = 3,
        Preview = 4,
        Inventory = 5,
        Workbench = 6,
        MainGameUI = 7,
        Unknown = 8,
    }
    #endregion

    #region Registration
    internal partial class Transforms_Registration : ILoquiRegistration
    {
        public static readonly Transforms_Registration Instance = new Transforms_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(Transforms.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Transforms.ErrorMask);

        public static readonly Type ClassType = typeof(Transforms);

        public static readonly Type GetterType = typeof(ITransformsGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITransforms);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.Transforms";

        public const string Name = "Transforms";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.PTT2;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.PTT2);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(TransformsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class TransformsSetterCommon
    {
        public static readonly TransformsSetterCommon Instance = new TransformsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITransforms item)
        {
            ClearPartial();
            item.Versioning = default(Transforms.VersioningBreaks);
            item.InventoryIcon.Clear();
            item.Outpost.Clear();
            item.Ship.Clear();
            item.Preview.Clear();
            item.Inventory.Clear();
            item.Workbench.Clear();
            item.MainGameUI.Clear();
            item.Unknown.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(ITransforms obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.InventoryIcon.Relink(mapping);
            obj.Outpost.Relink(mapping);
            obj.Ship.Relink(mapping);
            obj.Preview.Relink(mapping);
            obj.Inventory.Relink(mapping);
            obj.Workbench.Relink(mapping);
            obj.MainGameUI.Relink(mapping);
            if (obj.Versioning.HasFlag(Transforms.VersioningBreaks.Break0)) return;
            obj.Unknown.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ITransforms item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.PTT2),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: TransformsBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class TransformsCommon
    {
        public static readonly TransformsCommon Instance = new TransformsCommon();

        public Transforms.Mask<bool> GetEqualsMask(
            ITransformsGetter item,
            ITransformsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Transforms.Mask<bool>(false);
            ((TransformsCommon)((ITransformsGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITransformsGetter item,
            ITransformsGetter rhs,
            Transforms.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Versioning = item.Versioning == rhs.Versioning;
            ret.InventoryIcon = item.InventoryIcon.Equals(rhs.InventoryIcon);
            ret.Outpost = item.Outpost.Equals(rhs.Outpost);
            ret.Ship = item.Ship.Equals(rhs.Ship);
            ret.Preview = item.Preview.Equals(rhs.Preview);
            ret.Inventory = item.Inventory.Equals(rhs.Inventory);
            ret.Workbench = item.Workbench.Equals(rhs.Workbench);
            ret.MainGameUI = item.MainGameUI.Equals(rhs.MainGameUI);
            ret.Unknown = item.Unknown.Equals(rhs.Unknown);
        }
        
        public string Print(
            ITransformsGetter item,
            string? name = null,
            Transforms.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ITransformsGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Transforms.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Transforms =>");
            }
            else
            {
                sb.AppendLine($"{name} (Transforms) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ITransformsGetter item,
            StructuredStringBuilder sb,
            Transforms.Mask<bool>? printMask = null)
        {
            if (printMask?.Versioning ?? true)
            {
                sb.AppendItem(item.Versioning, "Versioning");
            }
            if (printMask?.InventoryIcon ?? true)
            {
                sb.AppendItem(item.InventoryIcon.FormKey, "InventoryIcon");
            }
            if (printMask?.Outpost ?? true)
            {
                sb.AppendItem(item.Outpost.FormKey, "Outpost");
            }
            if (printMask?.Ship ?? true)
            {
                sb.AppendItem(item.Ship.FormKey, "Ship");
            }
            if (printMask?.Preview ?? true)
            {
                sb.AppendItem(item.Preview.FormKey, "Preview");
            }
            if (printMask?.Inventory ?? true)
            {
                sb.AppendItem(item.Inventory.FormKey, "Inventory");
            }
            if (printMask?.Workbench ?? true)
            {
                sb.AppendItem(item.Workbench.FormKey, "Workbench");
            }
            if (printMask?.MainGameUI ?? true)
            {
                sb.AppendItem(item.MainGameUI.FormKey, "MainGameUI");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown.FormKey, "Unknown");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITransformsGetter? lhs,
            ITransformsGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)Transforms_FieldIndex.Versioning) ?? true))
            {
                if (lhs.Versioning != rhs.Versioning) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Transforms_FieldIndex.InventoryIcon) ?? true))
            {
                if (!lhs.InventoryIcon.Equals(rhs.InventoryIcon)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Transforms_FieldIndex.Outpost) ?? true))
            {
                if (!lhs.Outpost.Equals(rhs.Outpost)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Transforms_FieldIndex.Ship) ?? true))
            {
                if (!lhs.Ship.Equals(rhs.Ship)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Transforms_FieldIndex.Preview) ?? true))
            {
                if (!lhs.Preview.Equals(rhs.Preview)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Transforms_FieldIndex.Inventory) ?? true))
            {
                if (!lhs.Inventory.Equals(rhs.Inventory)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Transforms_FieldIndex.Workbench) ?? true))
            {
                if (!lhs.Workbench.Equals(rhs.Workbench)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Transforms_FieldIndex.MainGameUI) ?? true))
            {
                if (!lhs.MainGameUI.Equals(rhs.MainGameUI)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Transforms_FieldIndex.Unknown) ?? true))
            {
                if (!lhs.Unknown.Equals(rhs.Unknown)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ITransformsGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Versioning);
            hash.Add(item.InventoryIcon);
            hash.Add(item.Outpost);
            hash.Add(item.Ship);
            hash.Add(item.Preview);
            hash.Add(item.Inventory);
            hash.Add(item.Workbench);
            hash.Add(item.MainGameUI);
            hash.Add(item.Unknown);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Transforms.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ITransformsGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.InventoryIcon);
            yield return FormLinkInformation.Factory(obj.Outpost);
            yield return FormLinkInformation.Factory(obj.Ship);
            yield return FormLinkInformation.Factory(obj.Preview);
            yield return FormLinkInformation.Factory(obj.Inventory);
            yield return FormLinkInformation.Factory(obj.Workbench);
            yield return FormLinkInformation.Factory(obj.MainGameUI);
            if (obj.Versioning.HasFlag(Transforms.VersioningBreaks.Break0)) yield break;
            yield return FormLinkInformation.Factory(obj.Unknown);
            yield break;
        }
        
        #endregion
        
    }
    internal partial class TransformsSetterTranslationCommon
    {
        public static readonly TransformsSetterTranslationCommon Instance = new TransformsSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ITransforms item,
            ITransformsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)Transforms_FieldIndex.Versioning) ?? true))
            {
                item.Versioning = rhs.Versioning;
            }
            if ((copyMask?.GetShouldTranslate((int)Transforms_FieldIndex.InventoryIcon) ?? true))
            {
                item.InventoryIcon.SetTo(rhs.InventoryIcon.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Transforms_FieldIndex.Outpost) ?? true))
            {
                item.Outpost.SetTo(rhs.Outpost.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Transforms_FieldIndex.Ship) ?? true))
            {
                item.Ship.SetTo(rhs.Ship.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Transforms_FieldIndex.Preview) ?? true))
            {
                item.Preview.SetTo(rhs.Preview.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Transforms_FieldIndex.Inventory) ?? true))
            {
                item.Inventory.SetTo(rhs.Inventory.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Transforms_FieldIndex.Workbench) ?? true))
            {
                item.Workbench.SetTo(rhs.Workbench.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Transforms_FieldIndex.MainGameUI) ?? true))
            {
                item.MainGameUI.SetTo(rhs.MainGameUI.FormKey);
            }
            if (rhs.Versioning.HasFlag(Transforms.VersioningBreaks.Break0)) return;
            if ((copyMask?.GetShouldTranslate((int)Transforms_FieldIndex.Unknown) ?? true))
            {
                item.Unknown.SetTo(rhs.Unknown.FormKey);
            }
        }
        
        #endregion
        
        public Transforms DeepCopy(
            ITransformsGetter item,
            Transforms.TranslationMask? copyMask = null)
        {
            Transforms ret = (Transforms)((TransformsCommon)((ITransformsGetter)item).CommonInstance()!).GetNew();
            ((TransformsSetterTranslationCommon)((ITransformsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Transforms DeepCopy(
            ITransformsGetter item,
            out Transforms.ErrorMask errorMask,
            Transforms.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Transforms ret = (Transforms)((TransformsCommon)((ITransformsGetter)item).CommonInstance()!).GetNew();
            ((TransformsSetterTranslationCommon)((ITransformsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Transforms.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Transforms DeepCopy(
            ITransformsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Transforms ret = (Transforms)((TransformsCommon)((ITransformsGetter)item).CommonInstance()!).GetNew();
            ((TransformsSetterTranslationCommon)((ITransformsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Transforms
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Transforms_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => Transforms_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TransformsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return TransformsSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TransformsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITransformsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ITransformsGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ITransformsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class TransformsBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly TransformsBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ITransformsGetter item,
            MutagenWriter writer)
        {
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.InventoryIcon);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Outpost);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Ship);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Preview);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Inventory);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Workbench);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MainGameUI);
            if (!item.Versioning.HasFlag(Transforms.VersioningBreaks.Break0))
            {
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Unknown);
            }
        }

        public void Write(
            MutagenWriter writer,
            ITransformsGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.PTT2),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ITransformsGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class TransformsBinaryCreateTranslation
    {
        public static readonly TransformsBinaryCreateTranslation Instance = new TransformsBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ITransforms item,
            MutagenFrame frame)
        {
            item.InventoryIcon.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.Outpost.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.Ship.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.Preview.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.Inventory.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.Workbench.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.MainGameUI.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            if (frame.Complete)
            {
                item.Versioning |= Transforms.VersioningBreaks.Break0;
                return;
            }
            item.Unknown.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class TransformsBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ITransformsGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TransformsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class TransformsBinaryOverlay :
        PluginBinaryOverlay,
        ITransformsGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Transforms_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => Transforms_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TransformsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TransformsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITransformsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ITransformsGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ITransformsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => TransformsCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TransformsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TransformsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Transforms.VersioningBreaks Versioning { get; private set; }
        public IFormLinkGetter<ITransformGetter> InventoryIcon => new FormLink<ITransformGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_structData.Span.Slice(0x0, 0x4))));
        public IFormLinkGetter<ITransformGetter> Outpost => new FormLink<ITransformGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_structData.Span.Slice(0x4, 0x4))));
        public IFormLinkGetter<ITransformGetter> Ship => new FormLink<ITransformGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_structData.Span.Slice(0x8, 0x4))));
        public IFormLinkGetter<ITransformGetter> Preview => new FormLink<ITransformGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_structData.Span.Slice(0xC, 0x4))));
        public IFormLinkGetter<ITransformGetter> Inventory => new FormLink<ITransformGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_structData.Span.Slice(0x10, 0x4))));
        public IFormLinkGetter<ITransformGetter> Workbench => new FormLink<ITransformGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_structData.Span.Slice(0x14, 0x4))));
        public IFormLinkGetter<ITransformGetter> MainGameUI => new FormLink<ITransformGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_structData.Span.Slice(0x18, 0x4))));
        public IFormLinkGetter<ITransformGetter> Unknown => _structData.Length <= 0x1C ? FormLink<ITransformGetter>.Null : new FormLink<ITransformGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_structData.Span.Slice(0x1C, 0x4))));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected TransformsBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ITransformsGetter TransformsFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x20,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new TransformsBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            if (ret._structData.Length <= 0x1C)
            {
                ret.Versioning |= Transforms.VersioningBreaks.Break0;
            }
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ITransformsGetter TransformsFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return TransformsFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TransformsMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ITransformsGetter rhs) return false;
            return ((TransformsCommon)((ITransformsGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITransformsGetter? obj)
        {
            return ((TransformsCommon)((ITransformsGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TransformsCommon)((ITransformsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

