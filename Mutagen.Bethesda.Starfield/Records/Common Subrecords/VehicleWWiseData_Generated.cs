/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class VehicleWWiseData :
        IEquatable<IVehicleWWiseDataGetter>,
        ILoquiObjectSetter<VehicleWWiseData>,
        IVehicleWWiseData
    {
        #region Ctor
        public VehicleWWiseData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MotorSound
        public SoundReference MotorSound { get; set; } = new SoundReference();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter IVehicleWWiseDataGetter.MotorSound => MotorSound;
        #endregion
        #region TireSoundFrontLeft
        public SoundReference TireSoundFrontLeft { get; set; } = new SoundReference();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter IVehicleWWiseDataGetter.TireSoundFrontLeft => TireSoundFrontLeft;
        #endregion
        #region TireSoundFrontRight
        public SoundReference TireSoundFrontRight { get; set; } = new SoundReference();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter IVehicleWWiseDataGetter.TireSoundFrontRight => TireSoundFrontRight;
        #endregion
        #region TireSoundRearLeft
        public SoundReference TireSoundRearLeft { get; set; } = new SoundReference();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter IVehicleWWiseDataGetter.TireSoundRearLeft => TireSoundRearLeft;
        #endregion
        #region TireSoundRearRight
        public SoundReference TireSoundRearRight { get; set; } = new SoundReference();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter IVehicleWWiseDataGetter.TireSoundRearRight => TireSoundRearRight;
        #endregion
        #region HeadlightOn
        public SoundReference HeadlightOn { get; set; } = new SoundReference();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter IVehicleWWiseDataGetter.HeadlightOn => HeadlightOn;
        #endregion
        #region HeadlightOff
        public SoundReference HeadlightOff { get; set; } = new SoundReference();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter IVehicleWWiseDataGetter.HeadlightOff => HeadlightOff;
        #endregion
        #region LandingSoundGround
        public SoundReference LandingSoundGround { get; set; } = new SoundReference();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter IVehicleWWiseDataGetter.LandingSoundGround => LandingSoundGround;
        #endregion
        #region LandingSoundWater
        public SoundReference LandingSoundWater { get; set; } = new SoundReference();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter IVehicleWWiseDataGetter.LandingSoundWater => LandingSoundWater;
        #endregion
        #region HornSound
        public SoundReference HornSound { get; set; } = new SoundReference();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter IVehicleWWiseDataGetter.HornSound => HornSound;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            VehicleWWiseDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IVehicleWWiseDataGetter rhs) return false;
            return ((VehicleWWiseDataCommon)((IVehicleWWiseDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IVehicleWWiseDataGetter? obj)
        {
            return ((VehicleWWiseDataCommon)((IVehicleWWiseDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((VehicleWWiseDataCommon)((IVehicleWWiseDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.MotorSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.TireSoundFrontLeft = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.TireSoundFrontRight = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.TireSoundRearLeft = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.TireSoundRearRight = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.HeadlightOn = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.HeadlightOff = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.LandingSoundGround = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.LandingSoundWater = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.HornSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MotorSound,
                TItem TireSoundFrontLeft,
                TItem TireSoundFrontRight,
                TItem TireSoundRearLeft,
                TItem TireSoundRearRight,
                TItem HeadlightOn,
                TItem HeadlightOff,
                TItem LandingSoundGround,
                TItem LandingSoundWater,
                TItem HornSound)
            {
                this.MotorSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(MotorSound, new SoundReference.Mask<TItem>(MotorSound));
                this.TireSoundFrontLeft = new MaskItem<TItem, SoundReference.Mask<TItem>?>(TireSoundFrontLeft, new SoundReference.Mask<TItem>(TireSoundFrontLeft));
                this.TireSoundFrontRight = new MaskItem<TItem, SoundReference.Mask<TItem>?>(TireSoundFrontRight, new SoundReference.Mask<TItem>(TireSoundFrontRight));
                this.TireSoundRearLeft = new MaskItem<TItem, SoundReference.Mask<TItem>?>(TireSoundRearLeft, new SoundReference.Mask<TItem>(TireSoundRearLeft));
                this.TireSoundRearRight = new MaskItem<TItem, SoundReference.Mask<TItem>?>(TireSoundRearRight, new SoundReference.Mask<TItem>(TireSoundRearRight));
                this.HeadlightOn = new MaskItem<TItem, SoundReference.Mask<TItem>?>(HeadlightOn, new SoundReference.Mask<TItem>(HeadlightOn));
                this.HeadlightOff = new MaskItem<TItem, SoundReference.Mask<TItem>?>(HeadlightOff, new SoundReference.Mask<TItem>(HeadlightOff));
                this.LandingSoundGround = new MaskItem<TItem, SoundReference.Mask<TItem>?>(LandingSoundGround, new SoundReference.Mask<TItem>(LandingSoundGround));
                this.LandingSoundWater = new MaskItem<TItem, SoundReference.Mask<TItem>?>(LandingSoundWater, new SoundReference.Mask<TItem>(LandingSoundWater));
                this.HornSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(HornSound, new SoundReference.Mask<TItem>(HornSound));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? MotorSound { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? TireSoundFrontLeft { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? TireSoundFrontRight { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? TireSoundRearLeft { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? TireSoundRearRight { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? HeadlightOn { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? HeadlightOff { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? LandingSoundGround { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? LandingSoundWater { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? HornSound { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.MotorSound, rhs.MotorSound)) return false;
                if (!object.Equals(this.TireSoundFrontLeft, rhs.TireSoundFrontLeft)) return false;
                if (!object.Equals(this.TireSoundFrontRight, rhs.TireSoundFrontRight)) return false;
                if (!object.Equals(this.TireSoundRearLeft, rhs.TireSoundRearLeft)) return false;
                if (!object.Equals(this.TireSoundRearRight, rhs.TireSoundRearRight)) return false;
                if (!object.Equals(this.HeadlightOn, rhs.HeadlightOn)) return false;
                if (!object.Equals(this.HeadlightOff, rhs.HeadlightOff)) return false;
                if (!object.Equals(this.LandingSoundGround, rhs.LandingSoundGround)) return false;
                if (!object.Equals(this.LandingSoundWater, rhs.LandingSoundWater)) return false;
                if (!object.Equals(this.HornSound, rhs.HornSound)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.MotorSound);
                hash.Add(this.TireSoundFrontLeft);
                hash.Add(this.TireSoundFrontRight);
                hash.Add(this.TireSoundRearLeft);
                hash.Add(this.TireSoundRearRight);
                hash.Add(this.HeadlightOn);
                hash.Add(this.HeadlightOff);
                hash.Add(this.LandingSoundGround);
                hash.Add(this.LandingSoundWater);
                hash.Add(this.HornSound);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (MotorSound != null)
                {
                    if (!eval(this.MotorSound.Overall)) return false;
                    if (this.MotorSound.Specific != null && !this.MotorSound.Specific.All(eval)) return false;
                }
                if (TireSoundFrontLeft != null)
                {
                    if (!eval(this.TireSoundFrontLeft.Overall)) return false;
                    if (this.TireSoundFrontLeft.Specific != null && !this.TireSoundFrontLeft.Specific.All(eval)) return false;
                }
                if (TireSoundFrontRight != null)
                {
                    if (!eval(this.TireSoundFrontRight.Overall)) return false;
                    if (this.TireSoundFrontRight.Specific != null && !this.TireSoundFrontRight.Specific.All(eval)) return false;
                }
                if (TireSoundRearLeft != null)
                {
                    if (!eval(this.TireSoundRearLeft.Overall)) return false;
                    if (this.TireSoundRearLeft.Specific != null && !this.TireSoundRearLeft.Specific.All(eval)) return false;
                }
                if (TireSoundRearRight != null)
                {
                    if (!eval(this.TireSoundRearRight.Overall)) return false;
                    if (this.TireSoundRearRight.Specific != null && !this.TireSoundRearRight.Specific.All(eval)) return false;
                }
                if (HeadlightOn != null)
                {
                    if (!eval(this.HeadlightOn.Overall)) return false;
                    if (this.HeadlightOn.Specific != null && !this.HeadlightOn.Specific.All(eval)) return false;
                }
                if (HeadlightOff != null)
                {
                    if (!eval(this.HeadlightOff.Overall)) return false;
                    if (this.HeadlightOff.Specific != null && !this.HeadlightOff.Specific.All(eval)) return false;
                }
                if (LandingSoundGround != null)
                {
                    if (!eval(this.LandingSoundGround.Overall)) return false;
                    if (this.LandingSoundGround.Specific != null && !this.LandingSoundGround.Specific.All(eval)) return false;
                }
                if (LandingSoundWater != null)
                {
                    if (!eval(this.LandingSoundWater.Overall)) return false;
                    if (this.LandingSoundWater.Specific != null && !this.LandingSoundWater.Specific.All(eval)) return false;
                }
                if (HornSound != null)
                {
                    if (!eval(this.HornSound.Overall)) return false;
                    if (this.HornSound.Specific != null && !this.HornSound.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (MotorSound != null)
                {
                    if (eval(this.MotorSound.Overall)) return true;
                    if (this.MotorSound.Specific != null && this.MotorSound.Specific.Any(eval)) return true;
                }
                if (TireSoundFrontLeft != null)
                {
                    if (eval(this.TireSoundFrontLeft.Overall)) return true;
                    if (this.TireSoundFrontLeft.Specific != null && this.TireSoundFrontLeft.Specific.Any(eval)) return true;
                }
                if (TireSoundFrontRight != null)
                {
                    if (eval(this.TireSoundFrontRight.Overall)) return true;
                    if (this.TireSoundFrontRight.Specific != null && this.TireSoundFrontRight.Specific.Any(eval)) return true;
                }
                if (TireSoundRearLeft != null)
                {
                    if (eval(this.TireSoundRearLeft.Overall)) return true;
                    if (this.TireSoundRearLeft.Specific != null && this.TireSoundRearLeft.Specific.Any(eval)) return true;
                }
                if (TireSoundRearRight != null)
                {
                    if (eval(this.TireSoundRearRight.Overall)) return true;
                    if (this.TireSoundRearRight.Specific != null && this.TireSoundRearRight.Specific.Any(eval)) return true;
                }
                if (HeadlightOn != null)
                {
                    if (eval(this.HeadlightOn.Overall)) return true;
                    if (this.HeadlightOn.Specific != null && this.HeadlightOn.Specific.Any(eval)) return true;
                }
                if (HeadlightOff != null)
                {
                    if (eval(this.HeadlightOff.Overall)) return true;
                    if (this.HeadlightOff.Specific != null && this.HeadlightOff.Specific.Any(eval)) return true;
                }
                if (LandingSoundGround != null)
                {
                    if (eval(this.LandingSoundGround.Overall)) return true;
                    if (this.LandingSoundGround.Specific != null && this.LandingSoundGround.Specific.Any(eval)) return true;
                }
                if (LandingSoundWater != null)
                {
                    if (eval(this.LandingSoundWater.Overall)) return true;
                    if (this.LandingSoundWater.Specific != null && this.LandingSoundWater.Specific.Any(eval)) return true;
                }
                if (HornSound != null)
                {
                    if (eval(this.HornSound.Overall)) return true;
                    if (this.HornSound.Specific != null && this.HornSound.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new VehicleWWiseData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.MotorSound = this.MotorSound == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.MotorSound.Overall), this.MotorSound.Specific?.Translate(eval));
                obj.TireSoundFrontLeft = this.TireSoundFrontLeft == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.TireSoundFrontLeft.Overall), this.TireSoundFrontLeft.Specific?.Translate(eval));
                obj.TireSoundFrontRight = this.TireSoundFrontRight == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.TireSoundFrontRight.Overall), this.TireSoundFrontRight.Specific?.Translate(eval));
                obj.TireSoundRearLeft = this.TireSoundRearLeft == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.TireSoundRearLeft.Overall), this.TireSoundRearLeft.Specific?.Translate(eval));
                obj.TireSoundRearRight = this.TireSoundRearRight == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.TireSoundRearRight.Overall), this.TireSoundRearRight.Specific?.Translate(eval));
                obj.HeadlightOn = this.HeadlightOn == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.HeadlightOn.Overall), this.HeadlightOn.Specific?.Translate(eval));
                obj.HeadlightOff = this.HeadlightOff == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.HeadlightOff.Overall), this.HeadlightOff.Specific?.Translate(eval));
                obj.LandingSoundGround = this.LandingSoundGround == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.LandingSoundGround.Overall), this.LandingSoundGround.Specific?.Translate(eval));
                obj.LandingSoundWater = this.LandingSoundWater == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.LandingSoundWater.Overall), this.LandingSoundWater.Specific?.Translate(eval));
                obj.HornSound = this.HornSound == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.HornSound.Overall), this.HornSound.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(VehicleWWiseData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, VehicleWWiseData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(VehicleWWiseData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.MotorSound?.Overall ?? true)
                    {
                        MotorSound?.Print(sb);
                    }
                    if (printMask?.TireSoundFrontLeft?.Overall ?? true)
                    {
                        TireSoundFrontLeft?.Print(sb);
                    }
                    if (printMask?.TireSoundFrontRight?.Overall ?? true)
                    {
                        TireSoundFrontRight?.Print(sb);
                    }
                    if (printMask?.TireSoundRearLeft?.Overall ?? true)
                    {
                        TireSoundRearLeft?.Print(sb);
                    }
                    if (printMask?.TireSoundRearRight?.Overall ?? true)
                    {
                        TireSoundRearRight?.Print(sb);
                    }
                    if (printMask?.HeadlightOn?.Overall ?? true)
                    {
                        HeadlightOn?.Print(sb);
                    }
                    if (printMask?.HeadlightOff?.Overall ?? true)
                    {
                        HeadlightOff?.Print(sb);
                    }
                    if (printMask?.LandingSoundGround?.Overall ?? true)
                    {
                        LandingSoundGround?.Print(sb);
                    }
                    if (printMask?.LandingSoundWater?.Overall ?? true)
                    {
                        LandingSoundWater?.Print(sb);
                    }
                    if (printMask?.HornSound?.Overall ?? true)
                    {
                        HornSound?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, SoundReference.ErrorMask?>? MotorSound;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? TireSoundFrontLeft;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? TireSoundFrontRight;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? TireSoundRearLeft;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? TireSoundRearRight;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? HeadlightOn;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? HeadlightOff;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? LandingSoundGround;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? LandingSoundWater;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? HornSound;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                VehicleWWiseData_FieldIndex enu = (VehicleWWiseData_FieldIndex)index;
                switch (enu)
                {
                    case VehicleWWiseData_FieldIndex.MotorSound:
                        return MotorSound;
                    case VehicleWWiseData_FieldIndex.TireSoundFrontLeft:
                        return TireSoundFrontLeft;
                    case VehicleWWiseData_FieldIndex.TireSoundFrontRight:
                        return TireSoundFrontRight;
                    case VehicleWWiseData_FieldIndex.TireSoundRearLeft:
                        return TireSoundRearLeft;
                    case VehicleWWiseData_FieldIndex.TireSoundRearRight:
                        return TireSoundRearRight;
                    case VehicleWWiseData_FieldIndex.HeadlightOn:
                        return HeadlightOn;
                    case VehicleWWiseData_FieldIndex.HeadlightOff:
                        return HeadlightOff;
                    case VehicleWWiseData_FieldIndex.LandingSoundGround:
                        return LandingSoundGround;
                    case VehicleWWiseData_FieldIndex.LandingSoundWater:
                        return LandingSoundWater;
                    case VehicleWWiseData_FieldIndex.HornSound:
                        return HornSound;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                VehicleWWiseData_FieldIndex enu = (VehicleWWiseData_FieldIndex)index;
                switch (enu)
                {
                    case VehicleWWiseData_FieldIndex.MotorSound:
                        this.MotorSound = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case VehicleWWiseData_FieldIndex.TireSoundFrontLeft:
                        this.TireSoundFrontLeft = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case VehicleWWiseData_FieldIndex.TireSoundFrontRight:
                        this.TireSoundFrontRight = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case VehicleWWiseData_FieldIndex.TireSoundRearLeft:
                        this.TireSoundRearLeft = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case VehicleWWiseData_FieldIndex.TireSoundRearRight:
                        this.TireSoundRearRight = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case VehicleWWiseData_FieldIndex.HeadlightOn:
                        this.HeadlightOn = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case VehicleWWiseData_FieldIndex.HeadlightOff:
                        this.HeadlightOff = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case VehicleWWiseData_FieldIndex.LandingSoundGround:
                        this.LandingSoundGround = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case VehicleWWiseData_FieldIndex.LandingSoundWater:
                        this.LandingSoundWater = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case VehicleWWiseData_FieldIndex.HornSound:
                        this.HornSound = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                VehicleWWiseData_FieldIndex enu = (VehicleWWiseData_FieldIndex)index;
                switch (enu)
                {
                    case VehicleWWiseData_FieldIndex.MotorSound:
                        this.MotorSound = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case VehicleWWiseData_FieldIndex.TireSoundFrontLeft:
                        this.TireSoundFrontLeft = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case VehicleWWiseData_FieldIndex.TireSoundFrontRight:
                        this.TireSoundFrontRight = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case VehicleWWiseData_FieldIndex.TireSoundRearLeft:
                        this.TireSoundRearLeft = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case VehicleWWiseData_FieldIndex.TireSoundRearRight:
                        this.TireSoundRearRight = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case VehicleWWiseData_FieldIndex.HeadlightOn:
                        this.HeadlightOn = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case VehicleWWiseData_FieldIndex.HeadlightOff:
                        this.HeadlightOff = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case VehicleWWiseData_FieldIndex.LandingSoundGround:
                        this.LandingSoundGround = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case VehicleWWiseData_FieldIndex.LandingSoundWater:
                        this.LandingSoundWater = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case VehicleWWiseData_FieldIndex.HornSound:
                        this.HornSound = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (MotorSound != null) return true;
                if (TireSoundFrontLeft != null) return true;
                if (TireSoundFrontRight != null) return true;
                if (TireSoundRearLeft != null) return true;
                if (TireSoundRearRight != null) return true;
                if (HeadlightOn != null) return true;
                if (HeadlightOff != null) return true;
                if (LandingSoundGround != null) return true;
                if (LandingSoundWater != null) return true;
                if (HornSound != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                MotorSound?.Print(sb);
                TireSoundFrontLeft?.Print(sb);
                TireSoundFrontRight?.Print(sb);
                TireSoundRearLeft?.Print(sb);
                TireSoundRearRight?.Print(sb);
                HeadlightOn?.Print(sb);
                HeadlightOff?.Print(sb);
                LandingSoundGround?.Print(sb);
                LandingSoundWater?.Print(sb);
                HornSound?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.MotorSound = this.MotorSound.Combine(rhs.MotorSound, (l, r) => l.Combine(r));
                ret.TireSoundFrontLeft = this.TireSoundFrontLeft.Combine(rhs.TireSoundFrontLeft, (l, r) => l.Combine(r));
                ret.TireSoundFrontRight = this.TireSoundFrontRight.Combine(rhs.TireSoundFrontRight, (l, r) => l.Combine(r));
                ret.TireSoundRearLeft = this.TireSoundRearLeft.Combine(rhs.TireSoundRearLeft, (l, r) => l.Combine(r));
                ret.TireSoundRearRight = this.TireSoundRearRight.Combine(rhs.TireSoundRearRight, (l, r) => l.Combine(r));
                ret.HeadlightOn = this.HeadlightOn.Combine(rhs.HeadlightOn, (l, r) => l.Combine(r));
                ret.HeadlightOff = this.HeadlightOff.Combine(rhs.HeadlightOff, (l, r) => l.Combine(r));
                ret.LandingSoundGround = this.LandingSoundGround.Combine(rhs.LandingSoundGround, (l, r) => l.Combine(r));
                ret.LandingSoundWater = this.LandingSoundWater.Combine(rhs.LandingSoundWater, (l, r) => l.Combine(r));
                ret.HornSound = this.HornSound.Combine(rhs.HornSound, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public SoundReference.TranslationMask? MotorSound;
            public SoundReference.TranslationMask? TireSoundFrontLeft;
            public SoundReference.TranslationMask? TireSoundFrontRight;
            public SoundReference.TranslationMask? TireSoundRearLeft;
            public SoundReference.TranslationMask? TireSoundRearRight;
            public SoundReference.TranslationMask? HeadlightOn;
            public SoundReference.TranslationMask? HeadlightOff;
            public SoundReference.TranslationMask? LandingSoundGround;
            public SoundReference.TranslationMask? LandingSoundWater;
            public SoundReference.TranslationMask? HornSound;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((MotorSound != null ? MotorSound.OnOverall : DefaultOn, MotorSound?.GetCrystal()));
                ret.Add((TireSoundFrontLeft != null ? TireSoundFrontLeft.OnOverall : DefaultOn, TireSoundFrontLeft?.GetCrystal()));
                ret.Add((TireSoundFrontRight != null ? TireSoundFrontRight.OnOverall : DefaultOn, TireSoundFrontRight?.GetCrystal()));
                ret.Add((TireSoundRearLeft != null ? TireSoundRearLeft.OnOverall : DefaultOn, TireSoundRearLeft?.GetCrystal()));
                ret.Add((TireSoundRearRight != null ? TireSoundRearRight.OnOverall : DefaultOn, TireSoundRearRight?.GetCrystal()));
                ret.Add((HeadlightOn != null ? HeadlightOn.OnOverall : DefaultOn, HeadlightOn?.GetCrystal()));
                ret.Add((HeadlightOff != null ? HeadlightOff.OnOverall : DefaultOn, HeadlightOff?.GetCrystal()));
                ret.Add((LandingSoundGround != null ? LandingSoundGround.OnOverall : DefaultOn, LandingSoundGround?.GetCrystal()));
                ret.Add((LandingSoundWater != null ? LandingSoundWater.OnOverall : DefaultOn, LandingSoundWater?.GetCrystal()));
                ret.Add((HornSound != null ? HornSound.OnOverall : DefaultOn, HornSound?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => VehicleWWiseDataCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => VehicleWWiseDataSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => VehicleWWiseDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((VehicleWWiseDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static VehicleWWiseData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new VehicleWWiseData();
            ((VehicleWWiseDataSetterCommon)((IVehicleWWiseDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out VehicleWWiseData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((VehicleWWiseDataSetterCommon)((IVehicleWWiseDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static VehicleWWiseData GetNew()
        {
            return new VehicleWWiseData();
        }

    }
    #endregion

    #region Interface
    public partial interface IVehicleWWiseData :
        IFormLinkContainer,
        ILoquiObjectSetter<IVehicleWWiseData>,
        IVehicleWWiseDataGetter
    {
        new SoundReference MotorSound { get; set; }
        new SoundReference TireSoundFrontLeft { get; set; }
        new SoundReference TireSoundFrontRight { get; set; }
        new SoundReference TireSoundRearLeft { get; set; }
        new SoundReference TireSoundRearRight { get; set; }
        new SoundReference HeadlightOn { get; set; }
        new SoundReference HeadlightOff { get; set; }
        new SoundReference LandingSoundGround { get; set; }
        new SoundReference LandingSoundWater { get; set; }
        new SoundReference HornSound { get; set; }
    }

    public partial interface IVehicleWWiseDataGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IVehicleWWiseDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => VehicleWWiseData_Registration.Instance;
        ISoundReferenceGetter MotorSound { get; }
        ISoundReferenceGetter TireSoundFrontLeft { get; }
        ISoundReferenceGetter TireSoundFrontRight { get; }
        ISoundReferenceGetter TireSoundRearLeft { get; }
        ISoundReferenceGetter TireSoundRearRight { get; }
        ISoundReferenceGetter HeadlightOn { get; }
        ISoundReferenceGetter HeadlightOff { get; }
        ISoundReferenceGetter LandingSoundGround { get; }
        ISoundReferenceGetter LandingSoundWater { get; }
        ISoundReferenceGetter HornSound { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class VehicleWWiseDataMixIn
    {
        public static void Clear(this IVehicleWWiseData item)
        {
            ((VehicleWWiseDataSetterCommon)((IVehicleWWiseDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static VehicleWWiseData.Mask<bool> GetEqualsMask(
            this IVehicleWWiseDataGetter item,
            IVehicleWWiseDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((VehicleWWiseDataCommon)((IVehicleWWiseDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IVehicleWWiseDataGetter item,
            string? name = null,
            VehicleWWiseData.Mask<bool>? printMask = null)
        {
            return ((VehicleWWiseDataCommon)((IVehicleWWiseDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IVehicleWWiseDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            VehicleWWiseData.Mask<bool>? printMask = null)
        {
            ((VehicleWWiseDataCommon)((IVehicleWWiseDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IVehicleWWiseDataGetter item,
            IVehicleWWiseDataGetter rhs,
            VehicleWWiseData.TranslationMask? equalsMask = null)
        {
            return ((VehicleWWiseDataCommon)((IVehicleWWiseDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IVehicleWWiseData lhs,
            IVehicleWWiseDataGetter rhs)
        {
            ((VehicleWWiseDataSetterTranslationCommon)((IVehicleWWiseDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IVehicleWWiseData lhs,
            IVehicleWWiseDataGetter rhs,
            VehicleWWiseData.TranslationMask? copyMask = null)
        {
            ((VehicleWWiseDataSetterTranslationCommon)((IVehicleWWiseDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IVehicleWWiseData lhs,
            IVehicleWWiseDataGetter rhs,
            out VehicleWWiseData.ErrorMask errorMask,
            VehicleWWiseData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((VehicleWWiseDataSetterTranslationCommon)((IVehicleWWiseDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = VehicleWWiseData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IVehicleWWiseData lhs,
            IVehicleWWiseDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((VehicleWWiseDataSetterTranslationCommon)((IVehicleWWiseDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static VehicleWWiseData DeepCopy(
            this IVehicleWWiseDataGetter item,
            VehicleWWiseData.TranslationMask? copyMask = null)
        {
            return ((VehicleWWiseDataSetterTranslationCommon)((IVehicleWWiseDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static VehicleWWiseData DeepCopy(
            this IVehicleWWiseDataGetter item,
            out VehicleWWiseData.ErrorMask errorMask,
            VehicleWWiseData.TranslationMask? copyMask = null)
        {
            return ((VehicleWWiseDataSetterTranslationCommon)((IVehicleWWiseDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static VehicleWWiseData DeepCopy(
            this IVehicleWWiseDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((VehicleWWiseDataSetterTranslationCommon)((IVehicleWWiseDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IVehicleWWiseData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((VehicleWWiseDataSetterCommon)((IVehicleWWiseDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum VehicleWWiseData_FieldIndex
    {
        MotorSound = 0,
        TireSoundFrontLeft = 1,
        TireSoundFrontRight = 2,
        TireSoundRearLeft = 3,
        TireSoundRearRight = 4,
        HeadlightOn = 5,
        HeadlightOff = 6,
        LandingSoundGround = 7,
        LandingSoundWater = 8,
        HornSound = 9,
    }
    #endregion

    #region Registration
    internal partial class VehicleWWiseData_Registration : ILoquiRegistration
    {
        public static readonly VehicleWWiseData_Registration Instance = new VehicleWWiseData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 10;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(VehicleWWiseData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(VehicleWWiseData.ErrorMask);

        public static readonly Type ClassType = typeof(VehicleWWiseData);

        public static readonly Type GetterType = typeof(IVehicleWWiseDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IVehicleWWiseData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.VehicleWWiseData";

        public const string Name = "VehicleWWiseData";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.VWWD;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.VWWD);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(VehicleWWiseDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class VehicleWWiseDataSetterCommon
    {
        public static readonly VehicleWWiseDataSetterCommon Instance = new VehicleWWiseDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IVehicleWWiseData item)
        {
            ClearPartial();
            item.MotorSound.Clear();
            item.TireSoundFrontLeft.Clear();
            item.TireSoundFrontRight.Clear();
            item.TireSoundRearLeft.Clear();
            item.TireSoundRearRight.Clear();
            item.HeadlightOn.Clear();
            item.HeadlightOff.Clear();
            item.LandingSoundGround.Clear();
            item.LandingSoundWater.Clear();
            item.HornSound.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IVehicleWWiseData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.MotorSound.RemapLinks(mapping);
            obj.TireSoundFrontLeft.RemapLinks(mapping);
            obj.TireSoundFrontRight.RemapLinks(mapping);
            obj.TireSoundRearLeft.RemapLinks(mapping);
            obj.TireSoundRearRight.RemapLinks(mapping);
            obj.HeadlightOn.RemapLinks(mapping);
            obj.HeadlightOff.RemapLinks(mapping);
            obj.LandingSoundGround.RemapLinks(mapping);
            obj.LandingSoundWater.RemapLinks(mapping);
            obj.HornSound.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IVehicleWWiseData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.VWWD),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: VehicleWWiseDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class VehicleWWiseDataCommon
    {
        public static readonly VehicleWWiseDataCommon Instance = new VehicleWWiseDataCommon();

        public VehicleWWiseData.Mask<bool> GetEqualsMask(
            IVehicleWWiseDataGetter item,
            IVehicleWWiseDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new VehicleWWiseData.Mask<bool>(false);
            ((VehicleWWiseDataCommon)((IVehicleWWiseDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IVehicleWWiseDataGetter item,
            IVehicleWWiseDataGetter rhs,
            VehicleWWiseData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.MotorSound = MaskItemExt.Factory(item.MotorSound.GetEqualsMask(rhs.MotorSound, include), include);
            ret.TireSoundFrontLeft = MaskItemExt.Factory(item.TireSoundFrontLeft.GetEqualsMask(rhs.TireSoundFrontLeft, include), include);
            ret.TireSoundFrontRight = MaskItemExt.Factory(item.TireSoundFrontRight.GetEqualsMask(rhs.TireSoundFrontRight, include), include);
            ret.TireSoundRearLeft = MaskItemExt.Factory(item.TireSoundRearLeft.GetEqualsMask(rhs.TireSoundRearLeft, include), include);
            ret.TireSoundRearRight = MaskItemExt.Factory(item.TireSoundRearRight.GetEqualsMask(rhs.TireSoundRearRight, include), include);
            ret.HeadlightOn = MaskItemExt.Factory(item.HeadlightOn.GetEqualsMask(rhs.HeadlightOn, include), include);
            ret.HeadlightOff = MaskItemExt.Factory(item.HeadlightOff.GetEqualsMask(rhs.HeadlightOff, include), include);
            ret.LandingSoundGround = MaskItemExt.Factory(item.LandingSoundGround.GetEqualsMask(rhs.LandingSoundGround, include), include);
            ret.LandingSoundWater = MaskItemExt.Factory(item.LandingSoundWater.GetEqualsMask(rhs.LandingSoundWater, include), include);
            ret.HornSound = MaskItemExt.Factory(item.HornSound.GetEqualsMask(rhs.HornSound, include), include);
        }
        
        public string Print(
            IVehicleWWiseDataGetter item,
            string? name = null,
            VehicleWWiseData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IVehicleWWiseDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            VehicleWWiseData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"VehicleWWiseData =>");
            }
            else
            {
                sb.AppendLine($"{name} (VehicleWWiseData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IVehicleWWiseDataGetter item,
            StructuredStringBuilder sb,
            VehicleWWiseData.Mask<bool>? printMask = null)
        {
            if (printMask?.MotorSound?.Overall ?? true)
            {
                item.MotorSound?.Print(sb, "MotorSound");
            }
            if (printMask?.TireSoundFrontLeft?.Overall ?? true)
            {
                item.TireSoundFrontLeft?.Print(sb, "TireSoundFrontLeft");
            }
            if (printMask?.TireSoundFrontRight?.Overall ?? true)
            {
                item.TireSoundFrontRight?.Print(sb, "TireSoundFrontRight");
            }
            if (printMask?.TireSoundRearLeft?.Overall ?? true)
            {
                item.TireSoundRearLeft?.Print(sb, "TireSoundRearLeft");
            }
            if (printMask?.TireSoundRearRight?.Overall ?? true)
            {
                item.TireSoundRearRight?.Print(sb, "TireSoundRearRight");
            }
            if (printMask?.HeadlightOn?.Overall ?? true)
            {
                item.HeadlightOn?.Print(sb, "HeadlightOn");
            }
            if (printMask?.HeadlightOff?.Overall ?? true)
            {
                item.HeadlightOff?.Print(sb, "HeadlightOff");
            }
            if (printMask?.LandingSoundGround?.Overall ?? true)
            {
                item.LandingSoundGround?.Print(sb, "LandingSoundGround");
            }
            if (printMask?.LandingSoundWater?.Overall ?? true)
            {
                item.LandingSoundWater?.Print(sb, "LandingSoundWater");
            }
            if (printMask?.HornSound?.Overall ?? true)
            {
                item.HornSound?.Print(sb, "HornSound");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IVehicleWWiseDataGetter? lhs,
            IVehicleWWiseDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.MotorSound) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MotorSound, rhs.MotorSound, out var lhsMotorSound, out var rhsMotorSound, out var isMotorSoundEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsMotorSound).CommonInstance()!).Equals(lhsMotorSound, rhsMotorSound, equalsMask?.GetSubCrystal((int)VehicleWWiseData_FieldIndex.MotorSound))) return false;
                }
                else if (!isMotorSoundEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.TireSoundFrontLeft) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.TireSoundFrontLeft, rhs.TireSoundFrontLeft, out var lhsTireSoundFrontLeft, out var rhsTireSoundFrontLeft, out var isTireSoundFrontLeftEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsTireSoundFrontLeft).CommonInstance()!).Equals(lhsTireSoundFrontLeft, rhsTireSoundFrontLeft, equalsMask?.GetSubCrystal((int)VehicleWWiseData_FieldIndex.TireSoundFrontLeft))) return false;
                }
                else if (!isTireSoundFrontLeftEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.TireSoundFrontRight) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.TireSoundFrontRight, rhs.TireSoundFrontRight, out var lhsTireSoundFrontRight, out var rhsTireSoundFrontRight, out var isTireSoundFrontRightEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsTireSoundFrontRight).CommonInstance()!).Equals(lhsTireSoundFrontRight, rhsTireSoundFrontRight, equalsMask?.GetSubCrystal((int)VehicleWWiseData_FieldIndex.TireSoundFrontRight))) return false;
                }
                else if (!isTireSoundFrontRightEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.TireSoundRearLeft) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.TireSoundRearLeft, rhs.TireSoundRearLeft, out var lhsTireSoundRearLeft, out var rhsTireSoundRearLeft, out var isTireSoundRearLeftEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsTireSoundRearLeft).CommonInstance()!).Equals(lhsTireSoundRearLeft, rhsTireSoundRearLeft, equalsMask?.GetSubCrystal((int)VehicleWWiseData_FieldIndex.TireSoundRearLeft))) return false;
                }
                else if (!isTireSoundRearLeftEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.TireSoundRearRight) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.TireSoundRearRight, rhs.TireSoundRearRight, out var lhsTireSoundRearRight, out var rhsTireSoundRearRight, out var isTireSoundRearRightEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsTireSoundRearRight).CommonInstance()!).Equals(lhsTireSoundRearRight, rhsTireSoundRearRight, equalsMask?.GetSubCrystal((int)VehicleWWiseData_FieldIndex.TireSoundRearRight))) return false;
                }
                else if (!isTireSoundRearRightEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.HeadlightOn) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.HeadlightOn, rhs.HeadlightOn, out var lhsHeadlightOn, out var rhsHeadlightOn, out var isHeadlightOnEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsHeadlightOn).CommonInstance()!).Equals(lhsHeadlightOn, rhsHeadlightOn, equalsMask?.GetSubCrystal((int)VehicleWWiseData_FieldIndex.HeadlightOn))) return false;
                }
                else if (!isHeadlightOnEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.HeadlightOff) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.HeadlightOff, rhs.HeadlightOff, out var lhsHeadlightOff, out var rhsHeadlightOff, out var isHeadlightOffEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsHeadlightOff).CommonInstance()!).Equals(lhsHeadlightOff, rhsHeadlightOff, equalsMask?.GetSubCrystal((int)VehicleWWiseData_FieldIndex.HeadlightOff))) return false;
                }
                else if (!isHeadlightOffEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.LandingSoundGround) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LandingSoundGround, rhs.LandingSoundGround, out var lhsLandingSoundGround, out var rhsLandingSoundGround, out var isLandingSoundGroundEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsLandingSoundGround).CommonInstance()!).Equals(lhsLandingSoundGround, rhsLandingSoundGround, equalsMask?.GetSubCrystal((int)VehicleWWiseData_FieldIndex.LandingSoundGround))) return false;
                }
                else if (!isLandingSoundGroundEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.LandingSoundWater) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LandingSoundWater, rhs.LandingSoundWater, out var lhsLandingSoundWater, out var rhsLandingSoundWater, out var isLandingSoundWaterEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsLandingSoundWater).CommonInstance()!).Equals(lhsLandingSoundWater, rhsLandingSoundWater, equalsMask?.GetSubCrystal((int)VehicleWWiseData_FieldIndex.LandingSoundWater))) return false;
                }
                else if (!isLandingSoundWaterEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.HornSound) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.HornSound, rhs.HornSound, out var lhsHornSound, out var rhsHornSound, out var isHornSoundEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsHornSound).CommonInstance()!).Equals(lhsHornSound, rhsHornSound, equalsMask?.GetSubCrystal((int)VehicleWWiseData_FieldIndex.HornSound))) return false;
                }
                else if (!isHornSoundEqual) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IVehicleWWiseDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.MotorSound);
            hash.Add(item.TireSoundFrontLeft);
            hash.Add(item.TireSoundFrontRight);
            hash.Add(item.TireSoundRearLeft);
            hash.Add(item.TireSoundRearRight);
            hash.Add(item.HeadlightOn);
            hash.Add(item.HeadlightOff);
            hash.Add(item.LandingSoundGround);
            hash.Add(item.LandingSoundWater);
            hash.Add(item.HornSound);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return VehicleWWiseData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IVehicleWWiseDataGetter obj)
        {
            foreach (var item in obj.MotorSound.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.TireSoundFrontLeft.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.TireSoundFrontRight.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.TireSoundRearLeft.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.TireSoundRearRight.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.HeadlightOn.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.HeadlightOff.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.LandingSoundGround.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.LandingSoundWater.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.HornSound.EnumerateFormLinks())
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class VehicleWWiseDataSetterTranslationCommon
    {
        public static readonly VehicleWWiseDataSetterTranslationCommon Instance = new VehicleWWiseDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IVehicleWWiseData item,
            IVehicleWWiseDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.MotorSound) ?? true))
            {
                errorMask?.PushIndex((int)VehicleWWiseData_FieldIndex.MotorSound);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.MotorSound) ?? true))
                    {
                        item.MotorSound = rhs.MotorSound.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)VehicleWWiseData_FieldIndex.MotorSound),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.TireSoundFrontLeft) ?? true))
            {
                errorMask?.PushIndex((int)VehicleWWiseData_FieldIndex.TireSoundFrontLeft);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.TireSoundFrontLeft) ?? true))
                    {
                        item.TireSoundFrontLeft = rhs.TireSoundFrontLeft.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)VehicleWWiseData_FieldIndex.TireSoundFrontLeft),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.TireSoundFrontRight) ?? true))
            {
                errorMask?.PushIndex((int)VehicleWWiseData_FieldIndex.TireSoundFrontRight);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.TireSoundFrontRight) ?? true))
                    {
                        item.TireSoundFrontRight = rhs.TireSoundFrontRight.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)VehicleWWiseData_FieldIndex.TireSoundFrontRight),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.TireSoundRearLeft) ?? true))
            {
                errorMask?.PushIndex((int)VehicleWWiseData_FieldIndex.TireSoundRearLeft);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.TireSoundRearLeft) ?? true))
                    {
                        item.TireSoundRearLeft = rhs.TireSoundRearLeft.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)VehicleWWiseData_FieldIndex.TireSoundRearLeft),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.TireSoundRearRight) ?? true))
            {
                errorMask?.PushIndex((int)VehicleWWiseData_FieldIndex.TireSoundRearRight);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.TireSoundRearRight) ?? true))
                    {
                        item.TireSoundRearRight = rhs.TireSoundRearRight.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)VehicleWWiseData_FieldIndex.TireSoundRearRight),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.HeadlightOn) ?? true))
            {
                errorMask?.PushIndex((int)VehicleWWiseData_FieldIndex.HeadlightOn);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.HeadlightOn) ?? true))
                    {
                        item.HeadlightOn = rhs.HeadlightOn.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)VehicleWWiseData_FieldIndex.HeadlightOn),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.HeadlightOff) ?? true))
            {
                errorMask?.PushIndex((int)VehicleWWiseData_FieldIndex.HeadlightOff);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.HeadlightOff) ?? true))
                    {
                        item.HeadlightOff = rhs.HeadlightOff.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)VehicleWWiseData_FieldIndex.HeadlightOff),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.LandingSoundGround) ?? true))
            {
                errorMask?.PushIndex((int)VehicleWWiseData_FieldIndex.LandingSoundGround);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.LandingSoundGround) ?? true))
                    {
                        item.LandingSoundGround = rhs.LandingSoundGround.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)VehicleWWiseData_FieldIndex.LandingSoundGround),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.LandingSoundWater) ?? true))
            {
                errorMask?.PushIndex((int)VehicleWWiseData_FieldIndex.LandingSoundWater);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.LandingSoundWater) ?? true))
                    {
                        item.LandingSoundWater = rhs.LandingSoundWater.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)VehicleWWiseData_FieldIndex.LandingSoundWater),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.HornSound) ?? true))
            {
                errorMask?.PushIndex((int)VehicleWWiseData_FieldIndex.HornSound);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)VehicleWWiseData_FieldIndex.HornSound) ?? true))
                    {
                        item.HornSound = rhs.HornSound.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)VehicleWWiseData_FieldIndex.HornSound),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IVehicleWWiseData item,
            IVehicleWWiseDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public VehicleWWiseData DeepCopy(
            IVehicleWWiseDataGetter item,
            VehicleWWiseData.TranslationMask? copyMask = null)
        {
            VehicleWWiseData ret = (VehicleWWiseData)((VehicleWWiseDataCommon)((IVehicleWWiseDataGetter)item).CommonInstance()!).GetNew();
            ((VehicleWWiseDataSetterTranslationCommon)((IVehicleWWiseDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public VehicleWWiseData DeepCopy(
            IVehicleWWiseDataGetter item,
            out VehicleWWiseData.ErrorMask errorMask,
            VehicleWWiseData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            VehicleWWiseData ret = (VehicleWWiseData)((VehicleWWiseDataCommon)((IVehicleWWiseDataGetter)item).CommonInstance()!).GetNew();
            ((VehicleWWiseDataSetterTranslationCommon)((IVehicleWWiseDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = VehicleWWiseData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public VehicleWWiseData DeepCopy(
            IVehicleWWiseDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            VehicleWWiseData ret = (VehicleWWiseData)((VehicleWWiseDataCommon)((IVehicleWWiseDataGetter)item).CommonInstance()!).GetNew();
            ((VehicleWWiseDataSetterTranslationCommon)((IVehicleWWiseDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class VehicleWWiseData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => VehicleWWiseData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => VehicleWWiseData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => VehicleWWiseDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return VehicleWWiseDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => VehicleWWiseDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IVehicleWWiseDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IVehicleWWiseDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IVehicleWWiseDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class VehicleWWiseDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly VehicleWWiseDataBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IVehicleWWiseDataGetter item,
            MutagenWriter writer)
        {
            var MotorSoundItem = item.MotorSound;
            ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)MotorSoundItem).BinaryWriteTranslator).Write(
                item: MotorSoundItem,
                writer: writer);
            var TireSoundFrontLeftItem = item.TireSoundFrontLeft;
            ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)TireSoundFrontLeftItem).BinaryWriteTranslator).Write(
                item: TireSoundFrontLeftItem,
                writer: writer);
            var TireSoundFrontRightItem = item.TireSoundFrontRight;
            ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)TireSoundFrontRightItem).BinaryWriteTranslator).Write(
                item: TireSoundFrontRightItem,
                writer: writer);
            var TireSoundRearLeftItem = item.TireSoundRearLeft;
            ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)TireSoundRearLeftItem).BinaryWriteTranslator).Write(
                item: TireSoundRearLeftItem,
                writer: writer);
            var TireSoundRearRightItem = item.TireSoundRearRight;
            ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)TireSoundRearRightItem).BinaryWriteTranslator).Write(
                item: TireSoundRearRightItem,
                writer: writer);
            var HeadlightOnItem = item.HeadlightOn;
            ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)HeadlightOnItem).BinaryWriteTranslator).Write(
                item: HeadlightOnItem,
                writer: writer);
            var HeadlightOffItem = item.HeadlightOff;
            ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)HeadlightOffItem).BinaryWriteTranslator).Write(
                item: HeadlightOffItem,
                writer: writer);
            var LandingSoundGroundItem = item.LandingSoundGround;
            ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)LandingSoundGroundItem).BinaryWriteTranslator).Write(
                item: LandingSoundGroundItem,
                writer: writer);
            var LandingSoundWaterItem = item.LandingSoundWater;
            ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)LandingSoundWaterItem).BinaryWriteTranslator).Write(
                item: LandingSoundWaterItem,
                writer: writer);
            var HornSoundItem = item.HornSound;
            ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)HornSoundItem).BinaryWriteTranslator).Write(
                item: HornSoundItem,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            IVehicleWWiseDataGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.VWWD),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IVehicleWWiseDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class VehicleWWiseDataBinaryCreateTranslation
    {
        public static readonly VehicleWWiseDataBinaryCreateTranslation Instance = new VehicleWWiseDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IVehicleWWiseData item,
            MutagenFrame frame)
        {
            item.MotorSound = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
            item.TireSoundFrontLeft = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
            item.TireSoundFrontRight = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
            item.TireSoundRearLeft = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
            item.TireSoundRearRight = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
            item.HeadlightOn = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
            item.HeadlightOff = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
            item.LandingSoundGround = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
            item.LandingSoundWater = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
            item.HornSound = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class VehicleWWiseDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IVehicleWWiseDataGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((VehicleWWiseDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class VehicleWWiseDataBinaryOverlay :
        PluginBinaryOverlay,
        IVehicleWWiseDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => VehicleWWiseData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => VehicleWWiseData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => VehicleWWiseDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => VehicleWWiseDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IVehicleWWiseDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IVehicleWWiseDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IVehicleWWiseDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => VehicleWWiseDataCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => VehicleWWiseDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((VehicleWWiseDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public ISoundReferenceGetter MotorSound => SoundReferenceBinaryOverlay.SoundReferenceFactory(_structData, _package, default(TypedParseParams));
        public ISoundReferenceGetter TireSoundFrontLeft => SoundReferenceBinaryOverlay.SoundReferenceFactory(_structData.Slice(0x28), _package, default(TypedParseParams));
        public ISoundReferenceGetter TireSoundFrontRight => SoundReferenceBinaryOverlay.SoundReferenceFactory(_structData.Slice(0x50), _package, default(TypedParseParams));
        public ISoundReferenceGetter TireSoundRearLeft => SoundReferenceBinaryOverlay.SoundReferenceFactory(_structData.Slice(0x78), _package, default(TypedParseParams));
        public ISoundReferenceGetter TireSoundRearRight => SoundReferenceBinaryOverlay.SoundReferenceFactory(_structData.Slice(0xA0), _package, default(TypedParseParams));
        public ISoundReferenceGetter HeadlightOn => SoundReferenceBinaryOverlay.SoundReferenceFactory(_structData.Slice(0xC8), _package, default(TypedParseParams));
        public ISoundReferenceGetter HeadlightOff => SoundReferenceBinaryOverlay.SoundReferenceFactory(_structData.Slice(0xF0), _package, default(TypedParseParams));
        public ISoundReferenceGetter LandingSoundGround => SoundReferenceBinaryOverlay.SoundReferenceFactory(_structData.Slice(0x118), _package, default(TypedParseParams));
        public ISoundReferenceGetter LandingSoundWater => SoundReferenceBinaryOverlay.SoundReferenceFactory(_structData.Slice(0x140), _package, default(TypedParseParams));
        public ISoundReferenceGetter HornSound => SoundReferenceBinaryOverlay.SoundReferenceFactory(_structData.Slice(0x168), _package, default(TypedParseParams));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected VehicleWWiseDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IVehicleWWiseDataGetter VehicleWWiseDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x190,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new VehicleWWiseDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x190 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IVehicleWWiseDataGetter VehicleWWiseDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return VehicleWWiseDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            VehicleWWiseDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IVehicleWWiseDataGetter rhs) return false;
            return ((VehicleWWiseDataCommon)((IVehicleWWiseDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IVehicleWWiseDataGetter? obj)
        {
            return ((VehicleWWiseDataCommon)((IVehicleWWiseDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((VehicleWWiseDataCommon)((IVehicleWWiseDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

