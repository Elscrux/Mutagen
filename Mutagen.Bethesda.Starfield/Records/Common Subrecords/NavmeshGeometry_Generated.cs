/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class NavmeshGeometry :
        IEquatable<INavmeshGeometryGetter>,
        ILoquiObjectSetter<NavmeshGeometry>,
        INavmeshGeometry
    {
        #region Ctor
        public NavmeshGeometry()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region NavmeshVersion
        public static readonly UInt32 NavmeshVersionDefault = 17;
        public UInt32 NavmeshVersion { get; set; } = NavmeshVersionDefault;
        #endregion
        #region CrcHash
        public static readonly UInt32 CrcHashDefault = 0xA5E9A03C;
        public UInt32 CrcHash { get; set; } = CrcHashDefault;
        #endregion
        #region Parent
        public ANavmeshParent Parent { get; set; } = default!;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IANavmeshParentGetter INavmeshGeometryGetter.Parent => Parent;
        #endregion
        #region Vertices
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<NavmeshVertex> _Vertices = new ExtendedList<NavmeshVertex>();
        public ExtendedList<NavmeshVertex> Vertices
        {
            get => this._Vertices;
            init => this._Vertices = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<INavmeshVertexGetter> INavmeshGeometryGetter.Vertices => _Vertices;
        #endregion

        #endregion
        #region UnknownEnd
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _UnknownEnd = new byte[0];
        public MemorySlice<Byte> UnknownEnd
        {
            get => _UnknownEnd;
            set => this._UnknownEnd = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> INavmeshGeometryGetter.UnknownEnd => this.UnknownEnd;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NavmeshGeometryMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INavmeshGeometryGetter rhs) return false;
            return ((NavmeshGeometryCommon)((INavmeshGeometryGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INavmeshGeometryGetter? obj)
        {
            return ((NavmeshGeometryCommon)((INavmeshGeometryGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NavmeshGeometryCommon)((INavmeshGeometryGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.NavmeshVersion = initialValue;
                this.CrcHash = initialValue;
                this.Parent = new MaskItem<TItem, ANavmeshParent.Mask<TItem>?>(initialValue, new ANavmeshParent.Mask<TItem>(initialValue));
                this.Vertices = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavmeshVertex.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, NavmeshVertex.Mask<TItem>?>>());
                this.UnknownEnd = initialValue;
            }

            public Mask(
                TItem NavmeshVersion,
                TItem CrcHash,
                TItem Parent,
                TItem Vertices,
                TItem UnknownEnd)
            {
                this.NavmeshVersion = NavmeshVersion;
                this.CrcHash = CrcHash;
                this.Parent = new MaskItem<TItem, ANavmeshParent.Mask<TItem>?>(Parent, new ANavmeshParent.Mask<TItem>(Parent));
                this.Vertices = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavmeshVertex.Mask<TItem>?>>?>(Vertices, Enumerable.Empty<MaskItemIndexed<TItem, NavmeshVertex.Mask<TItem>?>>());
                this.UnknownEnd = UnknownEnd;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem NavmeshVersion;
            public TItem CrcHash;
            public MaskItem<TItem, ANavmeshParent.Mask<TItem>?>? Parent { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavmeshVertex.Mask<TItem>?>>?>? Vertices;
            public TItem UnknownEnd;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.NavmeshVersion, rhs.NavmeshVersion)) return false;
                if (!object.Equals(this.CrcHash, rhs.CrcHash)) return false;
                if (!object.Equals(this.Parent, rhs.Parent)) return false;
                if (!object.Equals(this.Vertices, rhs.Vertices)) return false;
                if (!object.Equals(this.UnknownEnd, rhs.UnknownEnd)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.NavmeshVersion);
                hash.Add(this.CrcHash);
                hash.Add(this.Parent);
                hash.Add(this.Vertices);
                hash.Add(this.UnknownEnd);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.NavmeshVersion)) return false;
                if (!eval(this.CrcHash)) return false;
                if (Parent != null)
                {
                    if (!eval(this.Parent.Overall)) return false;
                    if (this.Parent.Specific != null && !this.Parent.Specific.All(eval)) return false;
                }
                if (this.Vertices != null)
                {
                    if (!eval(this.Vertices.Overall)) return false;
                    if (this.Vertices.Specific != null)
                    {
                        foreach (var item in this.Vertices.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.UnknownEnd)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.NavmeshVersion)) return true;
                if (eval(this.CrcHash)) return true;
                if (Parent != null)
                {
                    if (eval(this.Parent.Overall)) return true;
                    if (this.Parent.Specific != null && this.Parent.Specific.Any(eval)) return true;
                }
                if (this.Vertices != null)
                {
                    if (eval(this.Vertices.Overall)) return true;
                    if (this.Vertices.Specific != null)
                    {
                        foreach (var item in this.Vertices.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.UnknownEnd)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new NavmeshGeometry.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.NavmeshVersion = eval(this.NavmeshVersion);
                obj.CrcHash = eval(this.CrcHash);
                obj.Parent = this.Parent == null ? null : new MaskItem<R, ANavmeshParent.Mask<R>?>(eval(this.Parent.Overall), this.Parent.Specific?.Translate(eval));
                if (Vertices != null)
                {
                    obj.Vertices = new MaskItem<R, IEnumerable<MaskItemIndexed<R, NavmeshVertex.Mask<R>?>>?>(eval(this.Vertices.Overall), Enumerable.Empty<MaskItemIndexed<R, NavmeshVertex.Mask<R>?>>());
                    if (Vertices.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, NavmeshVertex.Mask<R>?>>();
                        obj.Vertices.Specific = l;
                        foreach (var item in Vertices.Specific)
                        {
                            MaskItemIndexed<R, NavmeshVertex.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, NavmeshVertex.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.UnknownEnd = eval(this.UnknownEnd);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(NavmeshGeometry.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, NavmeshGeometry.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(NavmeshGeometry.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.NavmeshVersion ?? true)
                    {
                        sb.AppendItem(NavmeshVersion, "NavmeshVersion");
                    }
                    if (printMask?.CrcHash ?? true)
                    {
                        sb.AppendItem(CrcHash, "CrcHash");
                    }
                    if (printMask?.Parent?.Overall ?? true)
                    {
                        Parent?.Print(sb);
                    }
                    if ((printMask?.Vertices?.Overall ?? true)
                        && Vertices is {} VerticesItem)
                    {
                        sb.AppendLine("Vertices =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(VerticesItem.Overall);
                            if (VerticesItem.Specific != null)
                            {
                                foreach (var subItem in VerticesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.UnknownEnd ?? true)
                    {
                        sb.AppendItem(UnknownEnd, "UnknownEnd");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? NavmeshVersion;
            public Exception? CrcHash;
            public MaskItem<Exception?, ANavmeshParent.ErrorMask?>? Parent;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshVertex.ErrorMask?>>?>? Vertices;
            public Exception? UnknownEnd;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                NavmeshGeometry_FieldIndex enu = (NavmeshGeometry_FieldIndex)index;
                switch (enu)
                {
                    case NavmeshGeometry_FieldIndex.NavmeshVersion:
                        return NavmeshVersion;
                    case NavmeshGeometry_FieldIndex.CrcHash:
                        return CrcHash;
                    case NavmeshGeometry_FieldIndex.Parent:
                        return Parent;
                    case NavmeshGeometry_FieldIndex.Vertices:
                        return Vertices;
                    case NavmeshGeometry_FieldIndex.UnknownEnd:
                        return UnknownEnd;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                NavmeshGeometry_FieldIndex enu = (NavmeshGeometry_FieldIndex)index;
                switch (enu)
                {
                    case NavmeshGeometry_FieldIndex.NavmeshVersion:
                        this.NavmeshVersion = ex;
                        break;
                    case NavmeshGeometry_FieldIndex.CrcHash:
                        this.CrcHash = ex;
                        break;
                    case NavmeshGeometry_FieldIndex.Parent:
                        this.Parent = new MaskItem<Exception?, ANavmeshParent.ErrorMask?>(ex, null);
                        break;
                    case NavmeshGeometry_FieldIndex.Vertices:
                        this.Vertices = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshVertex.ErrorMask?>>?>(ex, null);
                        break;
                    case NavmeshGeometry_FieldIndex.UnknownEnd:
                        this.UnknownEnd = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                NavmeshGeometry_FieldIndex enu = (NavmeshGeometry_FieldIndex)index;
                switch (enu)
                {
                    case NavmeshGeometry_FieldIndex.NavmeshVersion:
                        this.NavmeshVersion = (Exception?)obj;
                        break;
                    case NavmeshGeometry_FieldIndex.CrcHash:
                        this.CrcHash = (Exception?)obj;
                        break;
                    case NavmeshGeometry_FieldIndex.Parent:
                        this.Parent = (MaskItem<Exception?, ANavmeshParent.ErrorMask?>?)obj;
                        break;
                    case NavmeshGeometry_FieldIndex.Vertices:
                        this.Vertices = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshVertex.ErrorMask?>>?>)obj;
                        break;
                    case NavmeshGeometry_FieldIndex.UnknownEnd:
                        this.UnknownEnd = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (NavmeshVersion != null) return true;
                if (CrcHash != null) return true;
                if (Parent != null) return true;
                if (Vertices != null) return true;
                if (UnknownEnd != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(NavmeshVersion, "NavmeshVersion");
                }
                {
                    sb.AppendItem(CrcHash, "CrcHash");
                }
                Parent?.Print(sb);
                if (Vertices is {} VerticesItem)
                {
                    sb.AppendLine("Vertices =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(VerticesItem.Overall);
                        if (VerticesItem.Specific != null)
                        {
                            foreach (var subItem in VerticesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(UnknownEnd, "UnknownEnd");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.NavmeshVersion = this.NavmeshVersion.Combine(rhs.NavmeshVersion);
                ret.CrcHash = this.CrcHash.Combine(rhs.CrcHash);
                ret.Parent = this.Parent.Combine(rhs.Parent, (l, r) => l.Combine(r));
                ret.Vertices = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshVertex.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Vertices?.Overall, rhs.Vertices?.Overall), Noggog.ExceptionExt.Combine(this.Vertices?.Specific, rhs.Vertices?.Specific));
                ret.UnknownEnd = this.UnknownEnd.Combine(rhs.UnknownEnd);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool NavmeshVersion;
            public bool CrcHash;
            public ANavmeshParent.TranslationMask? Parent;
            public NavmeshVertex.TranslationMask? Vertices;
            public bool UnknownEnd;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.NavmeshVersion = defaultOn;
                this.CrcHash = defaultOn;
                this.UnknownEnd = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((NavmeshVersion, null));
                ret.Add((CrcHash, null));
                ret.Add((Parent != null ? Parent.OnOverall : DefaultOn, Parent?.GetCrystal()));
                ret.Add((Vertices == null ? DefaultOn : !Vertices.GetCrystal().CopyNothing, Vertices?.GetCrystal()));
                ret.Add((UnknownEnd, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => NavmeshGeometryCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => NavmeshGeometrySetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NavmeshGeometryBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NavmeshGeometryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static NavmeshGeometry CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new NavmeshGeometry();
            ((NavmeshGeometrySetterCommon)((INavmeshGeometryGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out NavmeshGeometry item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((NavmeshGeometrySetterCommon)((INavmeshGeometryGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static NavmeshGeometry GetNew()
        {
            return new NavmeshGeometry();
        }

    }
    #endregion

    #region Interface
    public partial interface INavmeshGeometry :
        IFormLinkContainer,
        ILoquiObjectSetter<INavmeshGeometry>,
        INavmeshGeometryGetter
    {
        new UInt32 NavmeshVersion { get; set; }
        new UInt32 CrcHash { get; set; }
        new ANavmeshParent Parent { get; set; }
        new ExtendedList<NavmeshVertex> Vertices { get; }
        new MemorySlice<Byte> UnknownEnd { get; set; }
    }

    public partial interface INavmeshGeometryGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<INavmeshGeometryGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => NavmeshGeometry_Registration.Instance;
        UInt32 NavmeshVersion { get; }
        UInt32 CrcHash { get; }
        IANavmeshParentGetter Parent { get; }
        IReadOnlyList<INavmeshVertexGetter> Vertices { get; }
        ReadOnlyMemorySlice<Byte> UnknownEnd { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class NavmeshGeometryMixIn
    {
        public static void Clear(this INavmeshGeometry item)
        {
            ((NavmeshGeometrySetterCommon)((INavmeshGeometryGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static NavmeshGeometry.Mask<bool> GetEqualsMask(
            this INavmeshGeometryGetter item,
            INavmeshGeometryGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NavmeshGeometryCommon)((INavmeshGeometryGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this INavmeshGeometryGetter item,
            string? name = null,
            NavmeshGeometry.Mask<bool>? printMask = null)
        {
            return ((NavmeshGeometryCommon)((INavmeshGeometryGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this INavmeshGeometryGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NavmeshGeometry.Mask<bool>? printMask = null)
        {
            ((NavmeshGeometryCommon)((INavmeshGeometryGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INavmeshGeometryGetter item,
            INavmeshGeometryGetter rhs,
            NavmeshGeometry.TranslationMask? equalsMask = null)
        {
            return ((NavmeshGeometryCommon)((INavmeshGeometryGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this INavmeshGeometry lhs,
            INavmeshGeometryGetter rhs)
        {
            ((NavmeshGeometrySetterTranslationCommon)((INavmeshGeometryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INavmeshGeometry lhs,
            INavmeshGeometryGetter rhs,
            NavmeshGeometry.TranslationMask? copyMask = null)
        {
            ((NavmeshGeometrySetterTranslationCommon)((INavmeshGeometryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INavmeshGeometry lhs,
            INavmeshGeometryGetter rhs,
            out NavmeshGeometry.ErrorMask errorMask,
            NavmeshGeometry.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NavmeshGeometrySetterTranslationCommon)((INavmeshGeometryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = NavmeshGeometry.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INavmeshGeometry lhs,
            INavmeshGeometryGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NavmeshGeometrySetterTranslationCommon)((INavmeshGeometryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static NavmeshGeometry DeepCopy(
            this INavmeshGeometryGetter item,
            NavmeshGeometry.TranslationMask? copyMask = null)
        {
            return ((NavmeshGeometrySetterTranslationCommon)((INavmeshGeometryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NavmeshGeometry DeepCopy(
            this INavmeshGeometryGetter item,
            out NavmeshGeometry.ErrorMask errorMask,
            NavmeshGeometry.TranslationMask? copyMask = null)
        {
            return ((NavmeshGeometrySetterTranslationCommon)((INavmeshGeometryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NavmeshGeometry DeepCopy(
            this INavmeshGeometryGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NavmeshGeometrySetterTranslationCommon)((INavmeshGeometryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this INavmeshGeometry item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((NavmeshGeometrySetterCommon)((INavmeshGeometryGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum NavmeshGeometry_FieldIndex
    {
        NavmeshVersion = 0,
        CrcHash = 1,
        Parent = 2,
        Vertices = 3,
        UnknownEnd = 4,
    }
    #endregion

    #region Registration
    internal partial class NavmeshGeometry_Registration : ILoquiRegistration
    {
        public static readonly NavmeshGeometry_Registration Instance = new NavmeshGeometry_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(NavmeshGeometry.Mask<>);

        public static readonly Type ErrorMaskType = typeof(NavmeshGeometry.ErrorMask);

        public static readonly Type ClassType = typeof(NavmeshGeometry);

        public static readonly Type GetterType = typeof(INavmeshGeometryGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INavmeshGeometry);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.NavmeshGeometry";

        public const string Name = "NavmeshGeometry";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.NVNM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.NVNM);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(NavmeshGeometryBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class NavmeshGeometrySetterCommon
    {
        public static readonly NavmeshGeometrySetterCommon Instance = new NavmeshGeometrySetterCommon();

        partial void ClearPartial();
        
        public void Clear(INavmeshGeometry item)
        {
            ClearPartial();
            item.NavmeshVersion = NavmeshGeometry.NavmeshVersionDefault;
            item.CrcHash = NavmeshGeometry.CrcHashDefault;
            item.Parent.Clear();
            item.Vertices.Clear();
            item.UnknownEnd = Array.Empty<byte>();
        }
        
        #region Mutagen
        public void RemapLinks(INavmeshGeometry obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Parent.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INavmeshGeometry item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.NVNM),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: NavmeshGeometryBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class NavmeshGeometryCommon
    {
        public static readonly NavmeshGeometryCommon Instance = new NavmeshGeometryCommon();

        public NavmeshGeometry.Mask<bool> GetEqualsMask(
            INavmeshGeometryGetter item,
            INavmeshGeometryGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NavmeshGeometry.Mask<bool>(false);
            ((NavmeshGeometryCommon)((INavmeshGeometryGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INavmeshGeometryGetter item,
            INavmeshGeometryGetter rhs,
            NavmeshGeometry.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.NavmeshVersion = item.NavmeshVersion == rhs.NavmeshVersion;
            ret.CrcHash = item.CrcHash == rhs.CrcHash;
            ret.Parent = MaskItemExt.Factory(item.Parent.GetEqualsMask(rhs.Parent, include), include);
            ret.Vertices = item.Vertices.CollectionEqualsHelper(
                rhs.Vertices,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.UnknownEnd = MemoryExtensions.SequenceEqual(item.UnknownEnd.Span, rhs.UnknownEnd.Span);
        }
        
        public string Print(
            INavmeshGeometryGetter item,
            string? name = null,
            NavmeshGeometry.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            INavmeshGeometryGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NavmeshGeometry.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"NavmeshGeometry =>");
            }
            else
            {
                sb.AppendLine($"{name} (NavmeshGeometry) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            INavmeshGeometryGetter item,
            StructuredStringBuilder sb,
            NavmeshGeometry.Mask<bool>? printMask = null)
        {
            if (printMask?.NavmeshVersion ?? true)
            {
                sb.AppendItem(item.NavmeshVersion, "NavmeshVersion");
            }
            if (printMask?.CrcHash ?? true)
            {
                sb.AppendItem(item.CrcHash, "CrcHash");
            }
            if (printMask?.Parent?.Overall ?? true)
            {
                item.Parent?.Print(sb, "Parent");
            }
            if (printMask?.Vertices?.Overall ?? true)
            {
                sb.AppendLine("Vertices =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Vertices)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.UnknownEnd ?? true)
            {
                sb.AppendLine($"UnknownEnd => {SpanExt.ToHexString(item.UnknownEnd)}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INavmeshGeometryGetter? lhs,
            INavmeshGeometryGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.NavmeshVersion) ?? true))
            {
                if (lhs.NavmeshVersion != rhs.NavmeshVersion) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.CrcHash) ?? true))
            {
                if (lhs.CrcHash != rhs.CrcHash) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.Parent) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Parent, rhs.Parent, out var lhsParent, out var rhsParent, out var isParentEqual))
                {
                    if (!((ANavmeshParentCommon)((IANavmeshParentGetter)lhsParent).CommonInstance()!).Equals(lhsParent, rhsParent, equalsMask?.GetSubCrystal((int)NavmeshGeometry_FieldIndex.Parent))) return false;
                }
                else if (!isParentEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.Vertices) ?? true))
            {
                if (!lhs.Vertices.SequenceEqual(rhs.Vertices, (l, r) => ((NavmeshVertexCommon)((INavmeshVertexGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)NavmeshGeometry_FieldIndex.Vertices)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.UnknownEnd) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.UnknownEnd.Span, rhs.UnknownEnd.Span)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(INavmeshGeometryGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.NavmeshVersion);
            hash.Add(item.CrcHash);
            hash.Add(item.Parent);
            hash.Add(item.Vertices);
            hash.Add(item.UnknownEnd);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return NavmeshGeometry.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(INavmeshGeometryGetter obj)
        {
            if (obj.Parent is IFormLinkContainerGetter ParentlinkCont)
            {
                foreach (var item in ParentlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class NavmeshGeometrySetterTranslationCommon
    {
        public static readonly NavmeshGeometrySetterTranslationCommon Instance = new NavmeshGeometrySetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            INavmeshGeometry item,
            INavmeshGeometryGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.NavmeshVersion) ?? true))
            {
                item.NavmeshVersion = rhs.NavmeshVersion;
            }
            if ((copyMask?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.CrcHash) ?? true))
            {
                item.CrcHash = rhs.CrcHash;
            }
            if ((copyMask?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.Parent) ?? true))
            {
                errorMask?.PushIndex((int)NavmeshGeometry_FieldIndex.Parent);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.Parent) ?? true))
                    {
                        item.Parent = rhs.Parent.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)NavmeshGeometry_FieldIndex.Parent),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.Vertices) ?? true))
            {
                errorMask?.PushIndex((int)NavmeshGeometry_FieldIndex.Vertices);
                try
                {
                    item.Vertices.SetTo(
                        rhs.Vertices
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NavmeshGeometry_FieldIndex.UnknownEnd) ?? true))
            {
                item.UnknownEnd = rhs.UnknownEnd.ToArray();
            }
        }
        
        #endregion
        
        public NavmeshGeometry DeepCopy(
            INavmeshGeometryGetter item,
            NavmeshGeometry.TranslationMask? copyMask = null)
        {
            NavmeshGeometry ret = (NavmeshGeometry)((NavmeshGeometryCommon)((INavmeshGeometryGetter)item).CommonInstance()!).GetNew();
            ((NavmeshGeometrySetterTranslationCommon)((INavmeshGeometryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public NavmeshGeometry DeepCopy(
            INavmeshGeometryGetter item,
            out NavmeshGeometry.ErrorMask errorMask,
            NavmeshGeometry.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            NavmeshGeometry ret = (NavmeshGeometry)((NavmeshGeometryCommon)((INavmeshGeometryGetter)item).CommonInstance()!).GetNew();
            ((NavmeshGeometrySetterTranslationCommon)((INavmeshGeometryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = NavmeshGeometry.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public NavmeshGeometry DeepCopy(
            INavmeshGeometryGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            NavmeshGeometry ret = (NavmeshGeometry)((NavmeshGeometryCommon)((INavmeshGeometryGetter)item).CommonInstance()!).GetNew();
            ((NavmeshGeometrySetterTranslationCommon)((INavmeshGeometryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class NavmeshGeometry
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NavmeshGeometry_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => NavmeshGeometry_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NavmeshGeometryCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return NavmeshGeometrySetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NavmeshGeometrySetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INavmeshGeometryGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object INavmeshGeometryGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object INavmeshGeometryGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class NavmeshGeometryBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly NavmeshGeometryBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            INavmeshGeometryGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.NavmeshVersion);
            writer.Write(item.CrcHash);
            NavmeshGeometryBinaryWriteTranslation.WriteBinaryParent(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<INavmeshVertexGetter>.Instance.Write(
                writer: writer,
                items: item.Vertices,
                countLengthLength: 4,
                transl: (MutagenWriter subWriter, INavmeshVertexGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((NavmeshVertexBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.UnknownEnd);
        }

        public static partial void WriteBinaryParentCustom(
            MutagenWriter writer,
            INavmeshGeometryGetter item);

        public static void WriteBinaryParent(
            MutagenWriter writer,
            INavmeshGeometryGetter item)
        {
            WriteBinaryParentCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            INavmeshGeometryGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.NVNM),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (INavmeshGeometryGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class NavmeshGeometryBinaryCreateTranslation
    {
        public static readonly NavmeshGeometryBinaryCreateTranslation Instance = new NavmeshGeometryBinaryCreateTranslation();

        public static void FillBinaryStructs(
            INavmeshGeometry item,
            MutagenFrame frame)
        {
            item.NavmeshVersion = frame.ReadUInt32();
            item.CrcHash = frame.ReadUInt32();
            NavmeshGeometryBinaryCreateTranslation.FillBinaryParentCustom(
                frame: frame,
                item: item);
            item.Vertices.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<NavmeshVertex>.Instance.Parse(
                    amount: frame.ReadInt32(),
                    reader: frame,
                    transl: NavmeshVertex.TryCreateFromBinary));
            item.UnknownEnd = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
        }

        public static partial void FillBinaryParentCustom(
            MutagenFrame frame,
            INavmeshGeometry item);

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class NavmeshGeometryBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this INavmeshGeometryGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NavmeshGeometryBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class NavmeshGeometryBinaryOverlay :
        PluginBinaryOverlay,
        INavmeshGeometryGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NavmeshGeometry_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => NavmeshGeometry_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NavmeshGeometryCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NavmeshGeometrySetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INavmeshGeometryGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? INavmeshGeometryGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object INavmeshGeometryGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => NavmeshGeometryCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NavmeshGeometryBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NavmeshGeometryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public UInt32 NavmeshVersion => BinaryPrimitives.ReadUInt32LittleEndian(_structData.Slice(0x0, 0x4));
        public UInt32 CrcHash => BinaryPrimitives.ReadUInt32LittleEndian(_structData.Slice(0x4, 0x4));
        #region Parent
        public partial IANavmeshParentGetter GetParentCustom(int location);
        public IANavmeshParentGetter Parent => GetParentCustom(location: 0x8);
        #endregion
        #region Vertices
        public IReadOnlyList<INavmeshVertexGetter> Vertices => BinaryOverlayList.FactoryByCountLength<INavmeshVertexGetter>(_structData.Slice(0x10), _package, 16, countLength: 4, (s, p) => NavmeshVertexBinaryOverlay.NavmeshVertexFactory(s, p));
        protected int VerticesEndingPos;
        #endregion
        #region UnknownEnd
        public ReadOnlyMemorySlice<Byte> UnknownEnd => _structData.Span.Slice(VerticesEndingPos).ToArray();
        protected int UnknownEndEndingPos;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NavmeshGeometryBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static void NavmeshGeometryParseEndingPositions(
            NavmeshGeometryBinaryOverlay ret,
            BinaryOverlayFactoryPackage package)
        {
            ret.VerticesEndingPos = 0x10 + BinaryPrimitives.ReadInt32LittleEndian(ret._structData.Slice(0x10)) * 16 + 4;
        }

        public static INavmeshGeometryGetter NavmeshGeometryFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new NavmeshGeometryBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            NavmeshGeometryParseEndingPositions(ret, package);
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static INavmeshGeometryGetter NavmeshGeometryFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return NavmeshGeometryFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NavmeshGeometryMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INavmeshGeometryGetter rhs) return false;
            return ((NavmeshGeometryCommon)((INavmeshGeometryGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INavmeshGeometryGetter? obj)
        {
            return ((NavmeshGeometryCommon)((INavmeshGeometryGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NavmeshGeometryCommon)((INavmeshGeometryGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

