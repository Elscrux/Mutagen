/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class AmbientColors :
        IAmbientColors,
        IEquatable<IAmbientColorsGetter>,
        ILoquiObjectSetter<AmbientColors>
    {
        #region Ctor
        public AmbientColors()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region DirectionalXPlus
        public Color DirectionalXPlus { get; set; } = default(Color);
        #endregion
        #region DirectionalXMinus
        public Color DirectionalXMinus { get; set; } = default(Color);
        #endregion
        #region DirectionalYPlus
        public Color DirectionalYPlus { get; set; } = default(Color);
        #endregion
        #region DirectionalYMinus
        public Color DirectionalYMinus { get; set; } = default(Color);
        #endregion
        #region DirectionalZPlus
        public Color DirectionalZPlus { get; set; } = default(Color);
        #endregion
        #region DirectionalZMinus
        public Color DirectionalZMinus { get; set; } = default(Color);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            AmbientColorsMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IAmbientColorsGetter rhs) return false;
            return ((AmbientColorsCommon)((IAmbientColorsGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAmbientColorsGetter? obj)
        {
            return ((AmbientColorsCommon)((IAmbientColorsGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((AmbientColorsCommon)((IAmbientColorsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.DirectionalXPlus = initialValue;
                this.DirectionalXMinus = initialValue;
                this.DirectionalYPlus = initialValue;
                this.DirectionalYMinus = initialValue;
                this.DirectionalZPlus = initialValue;
                this.DirectionalZMinus = initialValue;
            }

            public Mask(
                TItem DirectionalXPlus,
                TItem DirectionalXMinus,
                TItem DirectionalYPlus,
                TItem DirectionalYMinus,
                TItem DirectionalZPlus,
                TItem DirectionalZMinus)
            {
                this.DirectionalXPlus = DirectionalXPlus;
                this.DirectionalXMinus = DirectionalXMinus;
                this.DirectionalYPlus = DirectionalYPlus;
                this.DirectionalYMinus = DirectionalYMinus;
                this.DirectionalZPlus = DirectionalZPlus;
                this.DirectionalZMinus = DirectionalZMinus;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem DirectionalXPlus;
            public TItem DirectionalXMinus;
            public TItem DirectionalYPlus;
            public TItem DirectionalYMinus;
            public TItem DirectionalZPlus;
            public TItem DirectionalZMinus;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.DirectionalXPlus, rhs.DirectionalXPlus)) return false;
                if (!object.Equals(this.DirectionalXMinus, rhs.DirectionalXMinus)) return false;
                if (!object.Equals(this.DirectionalYPlus, rhs.DirectionalYPlus)) return false;
                if (!object.Equals(this.DirectionalYMinus, rhs.DirectionalYMinus)) return false;
                if (!object.Equals(this.DirectionalZPlus, rhs.DirectionalZPlus)) return false;
                if (!object.Equals(this.DirectionalZMinus, rhs.DirectionalZMinus)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.DirectionalXPlus);
                hash.Add(this.DirectionalXMinus);
                hash.Add(this.DirectionalYPlus);
                hash.Add(this.DirectionalYMinus);
                hash.Add(this.DirectionalZPlus);
                hash.Add(this.DirectionalZMinus);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.DirectionalXPlus)) return false;
                if (!eval(this.DirectionalXMinus)) return false;
                if (!eval(this.DirectionalYPlus)) return false;
                if (!eval(this.DirectionalYMinus)) return false;
                if (!eval(this.DirectionalZPlus)) return false;
                if (!eval(this.DirectionalZMinus)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.DirectionalXPlus)) return true;
                if (eval(this.DirectionalXMinus)) return true;
                if (eval(this.DirectionalYPlus)) return true;
                if (eval(this.DirectionalYMinus)) return true;
                if (eval(this.DirectionalZPlus)) return true;
                if (eval(this.DirectionalZMinus)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AmbientColors.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.DirectionalXPlus = eval(this.DirectionalXPlus);
                obj.DirectionalXMinus = eval(this.DirectionalXMinus);
                obj.DirectionalYPlus = eval(this.DirectionalYPlus);
                obj.DirectionalYMinus = eval(this.DirectionalYMinus);
                obj.DirectionalZPlus = eval(this.DirectionalZPlus);
                obj.DirectionalZMinus = eval(this.DirectionalZMinus);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(AmbientColors.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, AmbientColors.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(AmbientColors.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.DirectionalXPlus ?? true)
                    {
                        sb.AppendItem(DirectionalXPlus, "DirectionalXPlus");
                    }
                    if (printMask?.DirectionalXMinus ?? true)
                    {
                        sb.AppendItem(DirectionalXMinus, "DirectionalXMinus");
                    }
                    if (printMask?.DirectionalYPlus ?? true)
                    {
                        sb.AppendItem(DirectionalYPlus, "DirectionalYPlus");
                    }
                    if (printMask?.DirectionalYMinus ?? true)
                    {
                        sb.AppendItem(DirectionalYMinus, "DirectionalYMinus");
                    }
                    if (printMask?.DirectionalZPlus ?? true)
                    {
                        sb.AppendItem(DirectionalZPlus, "DirectionalZPlus");
                    }
                    if (printMask?.DirectionalZMinus ?? true)
                    {
                        sb.AppendItem(DirectionalZMinus, "DirectionalZMinus");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? DirectionalXPlus;
            public Exception? DirectionalXMinus;
            public Exception? DirectionalYPlus;
            public Exception? DirectionalYMinus;
            public Exception? DirectionalZPlus;
            public Exception? DirectionalZMinus;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                AmbientColors_FieldIndex enu = (AmbientColors_FieldIndex)index;
                switch (enu)
                {
                    case AmbientColors_FieldIndex.DirectionalXPlus:
                        return DirectionalXPlus;
                    case AmbientColors_FieldIndex.DirectionalXMinus:
                        return DirectionalXMinus;
                    case AmbientColors_FieldIndex.DirectionalYPlus:
                        return DirectionalYPlus;
                    case AmbientColors_FieldIndex.DirectionalYMinus:
                        return DirectionalYMinus;
                    case AmbientColors_FieldIndex.DirectionalZPlus:
                        return DirectionalZPlus;
                    case AmbientColors_FieldIndex.DirectionalZMinus:
                        return DirectionalZMinus;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                AmbientColors_FieldIndex enu = (AmbientColors_FieldIndex)index;
                switch (enu)
                {
                    case AmbientColors_FieldIndex.DirectionalXPlus:
                        this.DirectionalXPlus = ex;
                        break;
                    case AmbientColors_FieldIndex.DirectionalXMinus:
                        this.DirectionalXMinus = ex;
                        break;
                    case AmbientColors_FieldIndex.DirectionalYPlus:
                        this.DirectionalYPlus = ex;
                        break;
                    case AmbientColors_FieldIndex.DirectionalYMinus:
                        this.DirectionalYMinus = ex;
                        break;
                    case AmbientColors_FieldIndex.DirectionalZPlus:
                        this.DirectionalZPlus = ex;
                        break;
                    case AmbientColors_FieldIndex.DirectionalZMinus:
                        this.DirectionalZMinus = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                AmbientColors_FieldIndex enu = (AmbientColors_FieldIndex)index;
                switch (enu)
                {
                    case AmbientColors_FieldIndex.DirectionalXPlus:
                        this.DirectionalXPlus = (Exception?)obj;
                        break;
                    case AmbientColors_FieldIndex.DirectionalXMinus:
                        this.DirectionalXMinus = (Exception?)obj;
                        break;
                    case AmbientColors_FieldIndex.DirectionalYPlus:
                        this.DirectionalYPlus = (Exception?)obj;
                        break;
                    case AmbientColors_FieldIndex.DirectionalYMinus:
                        this.DirectionalYMinus = (Exception?)obj;
                        break;
                    case AmbientColors_FieldIndex.DirectionalZPlus:
                        this.DirectionalZPlus = (Exception?)obj;
                        break;
                    case AmbientColors_FieldIndex.DirectionalZMinus:
                        this.DirectionalZMinus = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (DirectionalXPlus != null) return true;
                if (DirectionalXMinus != null) return true;
                if (DirectionalYPlus != null) return true;
                if (DirectionalYMinus != null) return true;
                if (DirectionalZPlus != null) return true;
                if (DirectionalZMinus != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(DirectionalXPlus, "DirectionalXPlus");
                }
                {
                    sb.AppendItem(DirectionalXMinus, "DirectionalXMinus");
                }
                {
                    sb.AppendItem(DirectionalYPlus, "DirectionalYPlus");
                }
                {
                    sb.AppendItem(DirectionalYMinus, "DirectionalYMinus");
                }
                {
                    sb.AppendItem(DirectionalZPlus, "DirectionalZPlus");
                }
                {
                    sb.AppendItem(DirectionalZMinus, "DirectionalZMinus");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.DirectionalXPlus = this.DirectionalXPlus.Combine(rhs.DirectionalXPlus);
                ret.DirectionalXMinus = this.DirectionalXMinus.Combine(rhs.DirectionalXMinus);
                ret.DirectionalYPlus = this.DirectionalYPlus.Combine(rhs.DirectionalYPlus);
                ret.DirectionalYMinus = this.DirectionalYMinus.Combine(rhs.DirectionalYMinus);
                ret.DirectionalZPlus = this.DirectionalZPlus.Combine(rhs.DirectionalZPlus);
                ret.DirectionalZMinus = this.DirectionalZMinus.Combine(rhs.DirectionalZMinus);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool DirectionalXPlus;
            public bool DirectionalXMinus;
            public bool DirectionalYPlus;
            public bool DirectionalYMinus;
            public bool DirectionalZPlus;
            public bool DirectionalZMinus;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.DirectionalXPlus = defaultOn;
                this.DirectionalXMinus = defaultOn;
                this.DirectionalYPlus = defaultOn;
                this.DirectionalYMinus = defaultOn;
                this.DirectionalZPlus = defaultOn;
                this.DirectionalZMinus = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((DirectionalXPlus, null));
                ret.Add((DirectionalXMinus, null));
                ret.Add((DirectionalYPlus, null));
                ret.Add((DirectionalYMinus, null));
                ret.Add((DirectionalZPlus, null));
                ret.Add((DirectionalZMinus, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => AmbientColorsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AmbientColorsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static AmbientColors CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new AmbientColors();
            ((AmbientColorsSetterCommon)((IAmbientColorsGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out AmbientColors item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((AmbientColorsSetterCommon)((IAmbientColorsGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static AmbientColors GetNew()
        {
            return new AmbientColors();
        }

    }
    #endregion

    #region Interface
    public partial interface IAmbientColors :
        IAmbientColorsGetter,
        ILoquiObjectSetter<IAmbientColors>
    {
        new Color DirectionalXPlus { get; set; }
        new Color DirectionalXMinus { get; set; }
        new Color DirectionalYPlus { get; set; }
        new Color DirectionalYMinus { get; set; }
        new Color DirectionalZPlus { get; set; }
        new Color DirectionalZMinus { get; set; }
    }

    public partial interface IAmbientColorsGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IAmbientColorsGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => AmbientColors_Registration.Instance;
        Color DirectionalXPlus { get; }
        Color DirectionalXMinus { get; }
        Color DirectionalYPlus { get; }
        Color DirectionalYMinus { get; }
        Color DirectionalZPlus { get; }
        Color DirectionalZMinus { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class AmbientColorsMixIn
    {
        public static void Clear(this IAmbientColors item)
        {
            ((AmbientColorsSetterCommon)((IAmbientColorsGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AmbientColors.Mask<bool> GetEqualsMask(
            this IAmbientColorsGetter item,
            IAmbientColorsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AmbientColorsCommon)((IAmbientColorsGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IAmbientColorsGetter item,
            string? name = null,
            AmbientColors.Mask<bool>? printMask = null)
        {
            return ((AmbientColorsCommon)((IAmbientColorsGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IAmbientColorsGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            AmbientColors.Mask<bool>? printMask = null)
        {
            ((AmbientColorsCommon)((IAmbientColorsGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IAmbientColorsGetter item,
            IAmbientColorsGetter rhs,
            AmbientColors.TranslationMask? equalsMask = null)
        {
            return ((AmbientColorsCommon)((IAmbientColorsGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IAmbientColors lhs,
            IAmbientColorsGetter rhs)
        {
            ((AmbientColorsSetterTranslationCommon)((IAmbientColorsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IAmbientColors lhs,
            IAmbientColorsGetter rhs,
            AmbientColors.TranslationMask? copyMask = null)
        {
            ((AmbientColorsSetterTranslationCommon)((IAmbientColorsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IAmbientColors lhs,
            IAmbientColorsGetter rhs,
            out AmbientColors.ErrorMask errorMask,
            AmbientColors.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AmbientColorsSetterTranslationCommon)((IAmbientColorsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = AmbientColors.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAmbientColors lhs,
            IAmbientColorsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AmbientColorsSetterTranslationCommon)((IAmbientColorsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static AmbientColors DeepCopy(
            this IAmbientColorsGetter item,
            AmbientColors.TranslationMask? copyMask = null)
        {
            return ((AmbientColorsSetterTranslationCommon)((IAmbientColorsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AmbientColors DeepCopy(
            this IAmbientColorsGetter item,
            out AmbientColors.ErrorMask errorMask,
            AmbientColors.TranslationMask? copyMask = null)
        {
            return ((AmbientColorsSetterTranslationCommon)((IAmbientColorsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AmbientColors DeepCopy(
            this IAmbientColorsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AmbientColorsSetterTranslationCommon)((IAmbientColorsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IAmbientColors item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((AmbientColorsSetterCommon)((IAmbientColorsGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum AmbientColors_FieldIndex
    {
        DirectionalXPlus = 0,
        DirectionalXMinus = 1,
        DirectionalYPlus = 2,
        DirectionalYMinus = 3,
        DirectionalZPlus = 4,
        DirectionalZMinus = 5,
    }
    #endregion

    #region Registration
    internal partial class AmbientColors_Registration : ILoquiRegistration
    {
        public static readonly AmbientColors_Registration Instance = new AmbientColors_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(AmbientColors.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AmbientColors.ErrorMask);

        public static readonly Type ClassType = typeof(AmbientColors);

        public static readonly Type GetterType = typeof(IAmbientColorsGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAmbientColors);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.AmbientColors";

        public const string Name = "AmbientColors";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(AmbientColorsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class AmbientColorsSetterCommon
    {
        public static readonly AmbientColorsSetterCommon Instance = new AmbientColorsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IAmbientColors item)
        {
            ClearPartial();
            item.DirectionalXPlus = default(Color);
            item.DirectionalXMinus = default(Color);
            item.DirectionalYPlus = default(Color);
            item.DirectionalYMinus = default(Color);
            item.DirectionalZPlus = default(Color);
            item.DirectionalZMinus = default(Color);
        }
        
        #region Mutagen
        public void RemapLinks(IAmbientColors obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAmbientColors item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: AmbientColorsBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class AmbientColorsCommon
    {
        public static readonly AmbientColorsCommon Instance = new AmbientColorsCommon();

        public AmbientColors.Mask<bool> GetEqualsMask(
            IAmbientColorsGetter item,
            IAmbientColorsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AmbientColors.Mask<bool>(false);
            ((AmbientColorsCommon)((IAmbientColorsGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAmbientColorsGetter item,
            IAmbientColorsGetter rhs,
            AmbientColors.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.DirectionalXPlus = item.DirectionalXPlus.ColorOnlyEquals(rhs.DirectionalXPlus);
            ret.DirectionalXMinus = item.DirectionalXMinus.ColorOnlyEquals(rhs.DirectionalXMinus);
            ret.DirectionalYPlus = item.DirectionalYPlus.ColorOnlyEquals(rhs.DirectionalYPlus);
            ret.DirectionalYMinus = item.DirectionalYMinus.ColorOnlyEquals(rhs.DirectionalYMinus);
            ret.DirectionalZPlus = item.DirectionalZPlus.ColorOnlyEquals(rhs.DirectionalZPlus);
            ret.DirectionalZMinus = item.DirectionalZMinus.ColorOnlyEquals(rhs.DirectionalZMinus);
        }
        
        public string Print(
            IAmbientColorsGetter item,
            string? name = null,
            AmbientColors.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IAmbientColorsGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            AmbientColors.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"AmbientColors =>");
            }
            else
            {
                sb.AppendLine($"{name} (AmbientColors) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IAmbientColorsGetter item,
            StructuredStringBuilder sb,
            AmbientColors.Mask<bool>? printMask = null)
        {
            if (printMask?.DirectionalXPlus ?? true)
            {
                sb.AppendItem(item.DirectionalXPlus, "DirectionalXPlus");
            }
            if (printMask?.DirectionalXMinus ?? true)
            {
                sb.AppendItem(item.DirectionalXMinus, "DirectionalXMinus");
            }
            if (printMask?.DirectionalYPlus ?? true)
            {
                sb.AppendItem(item.DirectionalYPlus, "DirectionalYPlus");
            }
            if (printMask?.DirectionalYMinus ?? true)
            {
                sb.AppendItem(item.DirectionalYMinus, "DirectionalYMinus");
            }
            if (printMask?.DirectionalZPlus ?? true)
            {
                sb.AppendItem(item.DirectionalZPlus, "DirectionalZPlus");
            }
            if (printMask?.DirectionalZMinus ?? true)
            {
                sb.AppendItem(item.DirectionalZMinus, "DirectionalZMinus");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAmbientColorsGetter? lhs,
            IAmbientColorsGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)AmbientColors_FieldIndex.DirectionalXPlus) ?? true))
            {
                if (!lhs.DirectionalXPlus.ColorOnlyEquals(rhs.DirectionalXPlus)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AmbientColors_FieldIndex.DirectionalXMinus) ?? true))
            {
                if (!lhs.DirectionalXMinus.ColorOnlyEquals(rhs.DirectionalXMinus)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AmbientColors_FieldIndex.DirectionalYPlus) ?? true))
            {
                if (!lhs.DirectionalYPlus.ColorOnlyEquals(rhs.DirectionalYPlus)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AmbientColors_FieldIndex.DirectionalYMinus) ?? true))
            {
                if (!lhs.DirectionalYMinus.ColorOnlyEquals(rhs.DirectionalYMinus)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AmbientColors_FieldIndex.DirectionalZPlus) ?? true))
            {
                if (!lhs.DirectionalZPlus.ColorOnlyEquals(rhs.DirectionalZPlus)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AmbientColors_FieldIndex.DirectionalZMinus) ?? true))
            {
                if (!lhs.DirectionalZMinus.ColorOnlyEquals(rhs.DirectionalZMinus)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IAmbientColorsGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.DirectionalXPlus);
            hash.Add(item.DirectionalXMinus);
            hash.Add(item.DirectionalYPlus);
            hash.Add(item.DirectionalYMinus);
            hash.Add(item.DirectionalZPlus);
            hash.Add(item.DirectionalZMinus);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return AmbientColors.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IAmbientColorsGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class AmbientColorsSetterTranslationCommon
    {
        public static readonly AmbientColorsSetterTranslationCommon Instance = new AmbientColorsSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IAmbientColors item,
            IAmbientColorsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)AmbientColors_FieldIndex.DirectionalXPlus) ?? true))
            {
                item.DirectionalXPlus = rhs.DirectionalXPlus;
            }
            if ((copyMask?.GetShouldTranslate((int)AmbientColors_FieldIndex.DirectionalXMinus) ?? true))
            {
                item.DirectionalXMinus = rhs.DirectionalXMinus;
            }
            if ((copyMask?.GetShouldTranslate((int)AmbientColors_FieldIndex.DirectionalYPlus) ?? true))
            {
                item.DirectionalYPlus = rhs.DirectionalYPlus;
            }
            if ((copyMask?.GetShouldTranslate((int)AmbientColors_FieldIndex.DirectionalYMinus) ?? true))
            {
                item.DirectionalYMinus = rhs.DirectionalYMinus;
            }
            if ((copyMask?.GetShouldTranslate((int)AmbientColors_FieldIndex.DirectionalZPlus) ?? true))
            {
                item.DirectionalZPlus = rhs.DirectionalZPlus;
            }
            if ((copyMask?.GetShouldTranslate((int)AmbientColors_FieldIndex.DirectionalZMinus) ?? true))
            {
                item.DirectionalZMinus = rhs.DirectionalZMinus;
            }
        }
        
        #endregion
        
        public AmbientColors DeepCopy(
            IAmbientColorsGetter item,
            AmbientColors.TranslationMask? copyMask = null)
        {
            AmbientColors ret = (AmbientColors)((AmbientColorsCommon)((IAmbientColorsGetter)item).CommonInstance()!).GetNew();
            ((AmbientColorsSetterTranslationCommon)((IAmbientColorsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public AmbientColors DeepCopy(
            IAmbientColorsGetter item,
            out AmbientColors.ErrorMask errorMask,
            AmbientColors.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AmbientColors ret = (AmbientColors)((AmbientColorsCommon)((IAmbientColorsGetter)item).CommonInstance()!).GetNew();
            ((AmbientColorsSetterTranslationCommon)((IAmbientColorsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = AmbientColors.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public AmbientColors DeepCopy(
            IAmbientColorsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AmbientColors ret = (AmbientColors)((AmbientColorsCommon)((IAmbientColorsGetter)item).CommonInstance()!).GetNew();
            ((AmbientColorsSetterTranslationCommon)((IAmbientColorsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class AmbientColors
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AmbientColors_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => AmbientColors_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => AmbientColorsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return AmbientColorsSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => AmbientColorsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IAmbientColorsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IAmbientColorsGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IAmbientColorsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class AmbientColorsBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly AmbientColorsBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IAmbientColorsGetter item,
            MutagenWriter writer)
        {
            ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DirectionalXPlus);
            ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DirectionalXMinus);
            ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DirectionalYPlus);
            ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DirectionalYMinus);
            ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DirectionalZPlus);
            ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DirectionalZMinus);
        }

        public void Write(
            MutagenWriter writer,
            IAmbientColorsGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IAmbientColorsGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class AmbientColorsBinaryCreateTranslation
    {
        public static readonly AmbientColorsBinaryCreateTranslation Instance = new AmbientColorsBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IAmbientColors item,
            MutagenFrame frame)
        {
            item.DirectionalXPlus = frame.ReadColor(ColorBinaryType.Alpha);
            item.DirectionalXMinus = frame.ReadColor(ColorBinaryType.Alpha);
            item.DirectionalYPlus = frame.ReadColor(ColorBinaryType.Alpha);
            item.DirectionalYMinus = frame.ReadColor(ColorBinaryType.Alpha);
            item.DirectionalZPlus = frame.ReadColor(ColorBinaryType.Alpha);
            item.DirectionalZMinus = frame.ReadColor(ColorBinaryType.Alpha);
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class AmbientColorsBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IAmbientColorsGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AmbientColorsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class AmbientColorsBinaryOverlay :
        PluginBinaryOverlay,
        IAmbientColorsGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AmbientColors_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => AmbientColors_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => AmbientColorsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => AmbientColorsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IAmbientColorsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IAmbientColorsGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IAmbientColorsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => AmbientColorsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AmbientColorsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Color DirectionalXPlus => _structData.Slice(0x0, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Color DirectionalXMinus => _structData.Slice(0x4, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Color DirectionalYPlus => _structData.Slice(0x8, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Color DirectionalYMinus => _structData.Slice(0xC, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Color DirectionalZPlus => _structData.Slice(0x10, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Color DirectionalZMinus => _structData.Slice(0x14, 0x4).ReadColor(ColorBinaryType.Alpha);
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected AmbientColorsBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IAmbientColorsGetter AmbientColorsFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x18,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new AmbientColorsBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x18;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IAmbientColorsGetter AmbientColorsFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return AmbientColorsFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            AmbientColorsMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IAmbientColorsGetter rhs) return false;
            return ((AmbientColorsCommon)((IAmbientColorsGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAmbientColorsGetter? obj)
        {
            return ((AmbientColorsCommon)((IAmbientColorsGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((AmbientColorsCommon)((IAmbientColorsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

