/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class Light :
        StarfieldMajorRecord,
        IEquatable<ILightGetter>,
        ILightInternal,
        ILoquiObjectSetter<Light>
    {
        #region Ctor
        protected Light()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        /// <summary>
        /// Aspects: IScripted
        /// </summary>
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? ILightGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #region Aspects
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IScriptedGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter ILightGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region ODTY
        public Single? ODTY { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ILightGetter.ODTY => this.ODTY;
        #endregion
        #region ODRT
        public Single? ODRT { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ILightGetter.ODRT => this.ODRT;
        #endregion
        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> ILightGetter.Components => _Components;
        #endregion

        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? ILightGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? ILightGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region DAT2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _DAT2;
        public MemorySlice<Byte>? DAT2
        {
            get => this._DAT2;
            set => this._DAT2 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ILightGetter.DAT2 => this.DAT2;
        #endregion
        #region Gobo
        public String? Gobo { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ILightGetter.Gobo => this.Gobo;
        #endregion
        #region Lens
        private readonly IFormLinkNullable<ILensFlareGetter> _Lens = new FormLinkNullable<ILensFlareGetter>();
        public IFormLinkNullable<ILensFlareGetter> Lens
        {
            get => _Lens;
            set => _Lens.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ILensFlareGetter> ILightGetter.Lens => this.Lens;
        #endregion
        #region FLBD
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _FLBD;
        public MemorySlice<Byte>? FLBD
        {
            get => this._FLBD;
            set => this._FLBD = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ILightGetter.FLBD => this.FLBD;
        #endregion
        #region FLRD
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _FLRD;
        public MemorySlice<Byte>? FLRD
        {
            get => this._FLRD;
            set => this._FLRD = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ILightGetter.FLRD => this.FLRD;
        #endregion
        #region FLGD
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _FLGD;
        public MemorySlice<Byte>? FLGD
        {
            get => this._FLGD;
            set => this._FLGD = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ILightGetter.FLGD => this.FLGD;
        #endregion
        #region LLLD
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _LLLD;
        public MemorySlice<Byte>? LLLD
        {
            get => this._LLLD;
            set => this._LLLD = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ILightGetter.LLLD => this.LLLD;
        #endregion
        #region FLAD
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _FLAD;
        public MemorySlice<Byte>? FLAD
        {
            get => this._FLAD;
            set => this._FLAD = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ILightGetter.FLAD => this.FLAD;
        #endregion
        #region FVLD
        public Single? FVLD { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ILightGetter.FVLD => this.FVLD;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            LightMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.ODTY = initialValue;
                this.ODRT = initialValue;
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.DAT2 = initialValue;
                this.Gobo = initialValue;
                this.Lens = initialValue;
                this.FLBD = initialValue;
                this.FLRD = initialValue;
                this.FLGD = initialValue;
                this.LLLD = initialValue;
                this.FLAD = initialValue;
                this.FVLD = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem VirtualMachineAdapter,
                TItem ObjectBounds,
                TItem ODTY,
                TItem ODRT,
                TItem Components,
                TItem Model,
                TItem Keywords,
                TItem DAT2,
                TItem Gobo,
                TItem Lens,
                TItem FLBD,
                TItem FLRD,
                TItem FLGD,
                TItem LLLD,
                TItem FLAD,
                TItem FVLD)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.ODTY = ODTY;
                this.ODRT = ODRT;
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.DAT2 = DAT2;
                this.Gobo = Gobo;
                this.Lens = Lens;
                this.FLBD = FLBD;
                this.FLRD = FLRD;
                this.FLGD = FLGD;
                this.LLLD = LLLD;
                this.FLAD = FLAD;
                this.FVLD = FVLD;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem ODTY;
            public TItem ODRT;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public TItem DAT2;
            public TItem Gobo;
            public TItem Lens;
            public TItem FLBD;
            public TItem FLRD;
            public TItem FLGD;
            public TItem LLLD;
            public TItem FLAD;
            public TItem FVLD;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.ODTY, rhs.ODTY)) return false;
                if (!object.Equals(this.ODRT, rhs.ODRT)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.DAT2, rhs.DAT2)) return false;
                if (!object.Equals(this.Gobo, rhs.Gobo)) return false;
                if (!object.Equals(this.Lens, rhs.Lens)) return false;
                if (!object.Equals(this.FLBD, rhs.FLBD)) return false;
                if (!object.Equals(this.FLRD, rhs.FLRD)) return false;
                if (!object.Equals(this.FLGD, rhs.FLGD)) return false;
                if (!object.Equals(this.LLLD, rhs.LLLD)) return false;
                if (!object.Equals(this.FLAD, rhs.FLAD)) return false;
                if (!object.Equals(this.FVLD, rhs.FVLD)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.ObjectBounds);
                hash.Add(this.ODTY);
                hash.Add(this.ODRT);
                hash.Add(this.Components);
                hash.Add(this.Model);
                hash.Add(this.Keywords);
                hash.Add(this.DAT2);
                hash.Add(this.Gobo);
                hash.Add(this.Lens);
                hash.Add(this.FLBD);
                hash.Add(this.FLRD);
                hash.Add(this.FLGD);
                hash.Add(this.LLLD);
                hash.Add(this.FLAD);
                hash.Add(this.FVLD);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.ODTY)) return false;
                if (!eval(this.ODRT)) return false;
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.DAT2)) return false;
                if (!eval(this.Gobo)) return false;
                if (!eval(this.Lens)) return false;
                if (!eval(this.FLBD)) return false;
                if (!eval(this.FLRD)) return false;
                if (!eval(this.FLGD)) return false;
                if (!eval(this.LLLD)) return false;
                if (!eval(this.FLAD)) return false;
                if (!eval(this.FVLD)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.ODTY)) return true;
                if (eval(this.ODRT)) return true;
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.DAT2)) return true;
                if (eval(this.Gobo)) return true;
                if (eval(this.Lens)) return true;
                if (eval(this.FLBD)) return true;
                if (eval(this.FLRD)) return true;
                if (eval(this.FLGD)) return true;
                if (eval(this.LLLD)) return true;
                if (eval(this.FLAD)) return true;
                if (eval(this.FVLD)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Light.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.ODTY = eval(this.ODTY);
                obj.ODRT = eval(this.ODRT);
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.DAT2 = eval(this.DAT2);
                obj.Gobo = eval(this.Gobo);
                obj.Lens = eval(this.Lens);
                obj.FLBD = eval(this.FLBD);
                obj.FLRD = eval(this.FLRD);
                obj.FLGD = eval(this.FLGD);
                obj.LLLD = eval(this.LLLD);
                obj.FLAD = eval(this.FLAD);
                obj.FVLD = eval(this.FVLD);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Light.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Light.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Light.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.Print(sb);
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.Print(sb);
                    }
                    if (printMask?.ODTY ?? true)
                    {
                        sb.AppendItem(ODTY, "ODTY");
                    }
                    if (printMask?.ODRT ?? true)
                    {
                        sb.AppendItem(ODRT, "ODRT");
                    }
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.Print(sb);
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.DAT2 ?? true)
                    {
                        sb.AppendItem(DAT2, "DAT2");
                    }
                    if (printMask?.Gobo ?? true)
                    {
                        sb.AppendItem(Gobo, "Gobo");
                    }
                    if (printMask?.Lens ?? true)
                    {
                        sb.AppendItem(Lens, "Lens");
                    }
                    if (printMask?.FLBD ?? true)
                    {
                        sb.AppendItem(FLBD, "FLBD");
                    }
                    if (printMask?.FLRD ?? true)
                    {
                        sb.AppendItem(FLRD, "FLRD");
                    }
                    if (printMask?.FLGD ?? true)
                    {
                        sb.AppendItem(FLGD, "FLGD");
                    }
                    if (printMask?.LLLD ?? true)
                    {
                        sb.AppendItem(LLLD, "LLLD");
                    }
                    if (printMask?.FLAD ?? true)
                    {
                        sb.AppendItem(FLAD, "FLAD");
                    }
                    if (printMask?.FVLD ?? true)
                    {
                        sb.AppendItem(FVLD, "FVLD");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? ODTY;
            public Exception? ODRT;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public Exception? DAT2;
            public Exception? Gobo;
            public Exception? Lens;
            public Exception? FLBD;
            public Exception? FLRD;
            public Exception? FLGD;
            public Exception? LLLD;
            public Exception? FLAD;
            public Exception? FVLD;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Light_FieldIndex enu = (Light_FieldIndex)index;
                switch (enu)
                {
                    case Light_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Light_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Light_FieldIndex.ODTY:
                        return ODTY;
                    case Light_FieldIndex.ODRT:
                        return ODRT;
                    case Light_FieldIndex.Components:
                        return Components;
                    case Light_FieldIndex.Model:
                        return Model;
                    case Light_FieldIndex.Keywords:
                        return Keywords;
                    case Light_FieldIndex.DAT2:
                        return DAT2;
                    case Light_FieldIndex.Gobo:
                        return Gobo;
                    case Light_FieldIndex.Lens:
                        return Lens;
                    case Light_FieldIndex.FLBD:
                        return FLBD;
                    case Light_FieldIndex.FLRD:
                        return FLRD;
                    case Light_FieldIndex.FLGD:
                        return FLGD;
                    case Light_FieldIndex.LLLD:
                        return LLLD;
                    case Light_FieldIndex.FLAD:
                        return FLAD;
                    case Light_FieldIndex.FVLD:
                        return FVLD;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Light_FieldIndex enu = (Light_FieldIndex)index;
                switch (enu)
                {
                    case Light_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case Light_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Light_FieldIndex.ODTY:
                        this.ODTY = ex;
                        break;
                    case Light_FieldIndex.ODRT:
                        this.ODRT = ex;
                        break;
                    case Light_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case Light_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Light_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Light_FieldIndex.DAT2:
                        this.DAT2 = ex;
                        break;
                    case Light_FieldIndex.Gobo:
                        this.Gobo = ex;
                        break;
                    case Light_FieldIndex.Lens:
                        this.Lens = ex;
                        break;
                    case Light_FieldIndex.FLBD:
                        this.FLBD = ex;
                        break;
                    case Light_FieldIndex.FLRD:
                        this.FLRD = ex;
                        break;
                    case Light_FieldIndex.FLGD:
                        this.FLGD = ex;
                        break;
                    case Light_FieldIndex.LLLD:
                        this.LLLD = ex;
                        break;
                    case Light_FieldIndex.FLAD:
                        this.FLAD = ex;
                        break;
                    case Light_FieldIndex.FVLD:
                        this.FVLD = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Light_FieldIndex enu = (Light_FieldIndex)index;
                switch (enu)
                {
                    case Light_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case Light_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Light_FieldIndex.ODTY:
                        this.ODTY = (Exception?)obj;
                        break;
                    case Light_FieldIndex.ODRT:
                        this.ODRT = (Exception?)obj;
                        break;
                    case Light_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case Light_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Light_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Light_FieldIndex.DAT2:
                        this.DAT2 = (Exception?)obj;
                        break;
                    case Light_FieldIndex.Gobo:
                        this.Gobo = (Exception?)obj;
                        break;
                    case Light_FieldIndex.Lens:
                        this.Lens = (Exception?)obj;
                        break;
                    case Light_FieldIndex.FLBD:
                        this.FLBD = (Exception?)obj;
                        break;
                    case Light_FieldIndex.FLRD:
                        this.FLRD = (Exception?)obj;
                        break;
                    case Light_FieldIndex.FLGD:
                        this.FLGD = (Exception?)obj;
                        break;
                    case Light_FieldIndex.LLLD:
                        this.LLLD = (Exception?)obj;
                        break;
                    case Light_FieldIndex.FLAD:
                        this.FLAD = (Exception?)obj;
                        break;
                    case Light_FieldIndex.FVLD:
                        this.FVLD = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (ObjectBounds != null) return true;
                if (ODTY != null) return true;
                if (ODRT != null) return true;
                if (Components != null) return true;
                if (Model != null) return true;
                if (Keywords != null) return true;
                if (DAT2 != null) return true;
                if (Gobo != null) return true;
                if (Lens != null) return true;
                if (FLBD != null) return true;
                if (FLRD != null) return true;
                if (FLGD != null) return true;
                if (LLLD != null) return true;
                if (FLAD != null) return true;
                if (FVLD != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                VirtualMachineAdapter?.Print(sb);
                ObjectBounds?.Print(sb);
                {
                    sb.AppendItem(ODTY, "ODTY");
                }
                {
                    sb.AppendItem(ODRT, "ODRT");
                }
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                Model?.Print(sb);
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(DAT2, "DAT2");
                }
                {
                    sb.AppendItem(Gobo, "Gobo");
                }
                {
                    sb.AppendItem(Lens, "Lens");
                }
                {
                    sb.AppendItem(FLBD, "FLBD");
                }
                {
                    sb.AppendItem(FLRD, "FLRD");
                }
                {
                    sb.AppendItem(FLGD, "FLGD");
                }
                {
                    sb.AppendItem(LLLD, "LLLD");
                }
                {
                    sb.AppendItem(FLAD, "FLAD");
                }
                {
                    sb.AppendItem(FVLD, "FVLD");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.ODTY = this.ODTY.Combine(rhs.ODTY);
                ret.ODRT = this.ODRT.Combine(rhs.ODRT);
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.DAT2 = this.DAT2.Combine(rhs.DAT2);
                ret.Gobo = this.Gobo.Combine(rhs.Gobo);
                ret.Lens = this.Lens.Combine(rhs.Lens);
                ret.FLBD = this.FLBD.Combine(rhs.FLBD);
                ret.FLRD = this.FLRD.Combine(rhs.FLRD);
                ret.FLGD = this.FLGD.Combine(rhs.FLGD);
                ret.LLLD = this.LLLD.Combine(rhs.LLLD);
                ret.FLAD = this.FLAD.Combine(rhs.FLAD);
                ret.FVLD = this.FVLD.Combine(rhs.FVLD);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool ODTY;
            public bool ODRT;
            public AComponent.TranslationMask? Components;
            public Model.TranslationMask? Model;
            public bool Keywords;
            public bool DAT2;
            public bool Gobo;
            public bool Lens;
            public bool FLBD;
            public bool FLRD;
            public bool FLGD;
            public bool LLLD;
            public bool FLAD;
            public bool FVLD;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.ODTY = defaultOn;
                this.ODRT = defaultOn;
                this.Keywords = defaultOn;
                this.DAT2 = defaultOn;
                this.Gobo = defaultOn;
                this.Lens = defaultOn;
                this.FLBD = defaultOn;
                this.FLRD = defaultOn;
                this.FLGD = defaultOn;
                this.LLLD = defaultOn;
                this.FLAD = defaultOn;
                this.FVLD = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((ODTY, null));
                ret.Add((ODRT, null));
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((Keywords, null));
                ret.Add((DAT2, null));
                ret.Add((Gobo, null));
                ret.Add((Lens, null));
                ret.Add((FLBD, null));
                ret.Add((FLRD, null));
                ret.Add((FLGD, null));
                ret.Add((LLLD, null));
                ret.Add((FLAD, null));
                ret.Add((FVLD, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Light_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => LightCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LightSetterCommon.Instance.RemapLinks(this, mapping);
        public Light(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Light(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Light(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Light(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public Light(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Light>.ToString(this);
        }

        protected override Type LinkType => typeof(ILight);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => LightCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => LightSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => LightSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => LightSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ILightGetter rhs) return false;
            return ((LightCommon)((ILightGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ILightGetter? obj)
        {
            return ((LightCommon)((ILightGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((LightCommon)((ILightGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LightBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LightBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Light CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Light();
            ((LightSetterCommon)((ILightGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Light item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((LightSetterCommon)((ILightGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Light GetNew()
        {
            return new Light();
        }

    }
    #endregion

    #region Interface
    public partial interface ILight :
        IAssetLinkContainer,
        IBaseObject,
        IEmittance,
        IFormLinkContainer,
        IKeyworded<IKeywordGetter>,
        ILightGetter,
        ILoquiObjectSetter<ILightInternal>,
        IModeled,
        IObjectBounded,
        IScripted,
        IStarfieldMajorRecordInternal
    {
        /// <summary>
        /// Aspects: IScripted
        /// </summary>
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        new Single? ODTY { get; set; }
        new Single? ODRT { get; set; }
        new ExtendedList<AComponent> Components { get; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new MemorySlice<Byte>? DAT2 { get; set; }
        new String? Gobo { get; set; }
        new IFormLinkNullable<ILensFlareGetter> Lens { get; set; }
        new MemorySlice<Byte>? FLBD { get; set; }
        new MemorySlice<Byte>? FLRD { get; set; }
        new MemorySlice<Byte>? FLGD { get; set; }
        new MemorySlice<Byte>? LLLD { get; set; }
        new MemorySlice<Byte>? FLAD { get; set; }
        new Single? FVLD { get; set; }
        #region Mutagen
        new Light.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface ILightInternal :
        IStarfieldMajorRecordInternal,
        ILight,
        ILightGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.LIGH)]
    public partial interface ILightGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBaseObjectGetter,
        IBinaryItem,
        IEmittanceGetter,
        IFormLinkContainerGetter,
        IHaveVirtualMachineAdapterGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<ILightGetter>,
        IMapsToGetter<ILightGetter>,
        IModeledGetter,
        IObjectBoundedGetter,
        IScriptedGetter
    {
        static new ILoquiRegistration StaticRegistration => Light_Registration.Instance;
        #region VirtualMachineAdapter
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapterGetter, IScriptedGetter
        /// </summary>
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        Single? ODTY { get; }
        Single? ODRT { get; }
        IReadOnlyList<IAComponentGetter> Components { get; }
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        ReadOnlyMemorySlice<Byte>? DAT2 { get; }
        String? Gobo { get; }
        IFormLinkNullableGetter<ILensFlareGetter> Lens { get; }
        ReadOnlyMemorySlice<Byte>? FLBD { get; }
        ReadOnlyMemorySlice<Byte>? FLRD { get; }
        ReadOnlyMemorySlice<Byte>? FLGD { get; }
        ReadOnlyMemorySlice<Byte>? LLLD { get; }
        ReadOnlyMemorySlice<Byte>? FLAD { get; }
        Single? FVLD { get; }

        #region Mutagen
        Light.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class LightMixIn
    {
        public static void Clear(this ILightInternal item)
        {
            ((LightSetterCommon)((ILightGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Light.Mask<bool> GetEqualsMask(
            this ILightGetter item,
            ILightGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LightCommon)((ILightGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ILightGetter item,
            string? name = null,
            Light.Mask<bool>? printMask = null)
        {
            return ((LightCommon)((ILightGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ILightGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Light.Mask<bool>? printMask = null)
        {
            ((LightCommon)((ILightGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ILightGetter item,
            ILightGetter rhs,
            Light.TranslationMask? equalsMask = null)
        {
            return ((LightCommon)((ILightGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ILightInternal lhs,
            ILightGetter rhs,
            out Light.ErrorMask errorMask,
            Light.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LightSetterTranslationCommon)((ILightGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Light.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILightInternal lhs,
            ILightGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LightSetterTranslationCommon)((ILightGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Light DeepCopy(
            this ILightGetter item,
            Light.TranslationMask? copyMask = null)
        {
            return ((LightSetterTranslationCommon)((ILightGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Light DeepCopy(
            this ILightGetter item,
            out Light.ErrorMask errorMask,
            Light.TranslationMask? copyMask = null)
        {
            return ((LightSetterTranslationCommon)((ILightGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Light DeepCopy(
            this ILightGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LightSetterTranslationCommon)((ILightGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Light Duplicate(
            this ILightGetter item,
            FormKey formKey,
            Light.TranslationMask? copyMask = null)
        {
            return ((LightCommon)((ILightGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Light Duplicate(
            this ILightGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((LightCommon)((ILightGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ILightInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((LightSetterCommon)((ILightGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Light_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        VirtualMachineAdapter = 7,
        ObjectBounds = 8,
        ODTY = 9,
        ODRT = 10,
        Components = 11,
        Model = 12,
        Keywords = 13,
        DAT2 = 14,
        Gobo = 15,
        Lens = 16,
        FLBD = 17,
        FLRD = 18,
        FLGD = 19,
        LLLD = 20,
        FLAD = 21,
        FVLD = 22,
    }
    #endregion

    #region Registration
    internal partial class Light_Registration : ILoquiRegistration
    {
        public static readonly Light_Registration Instance = new Light_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 16;

        public const ushort FieldCount = 23;

        public static readonly Type MaskType = typeof(Light.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Light.ErrorMask);

        public static readonly Type ClassType = typeof(Light);

        public static readonly Type GetterType = typeof(ILightGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILight);

        public static readonly Type? InternalSetterType = typeof(ILightInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.Light";

        public const string Name = "Light";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.LIGH;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.LIGH);
            var all = RecordCollection.Factory(
                RecordTypes.LIGH,
                RecordTypes.VMAD,
                RecordTypes.XXXX,
                RecordTypes.OBND,
                RecordTypes.ODTY,
                RecordTypes.ODRT,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.MODL,
                RecordTypes.MODT,
                RecordTypes.MOLM,
                RecordTypes.DMDC,
                RecordTypes.BLMS,
                RecordTypes.FLLD,
                RecordTypes.XFLG,
                RecordTypes.MODC,
                RecordTypes.MODF,
                RecordTypes.KWDA,
                RecordTypes.KSIZ,
                RecordTypes.DAT2,
                RecordTypes.NAM0,
                RecordTypes.LNAM,
                RecordTypes.FLBD,
                RecordTypes.FLRD,
                RecordTypes.FLGD,
                RecordTypes.LLLD,
                RecordTypes.FLAD,
                RecordTypes.FVLD);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(LightBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class LightSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly LightSetterCommon Instance = new LightSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILightInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.ObjectBounds.Clear();
            item.ODTY = default;
            item.ODRT = default;
            item.Components.Clear();
            item.Model = null;
            item.Keywords = null;
            item.DAT2 = default;
            item.Gobo = default;
            item.Lens.Clear();
            item.FLBD = default;
            item.FLRD = default;
            item.FLGD = default;
            item.LLLD = default;
            item.FLAD = default;
            item.FVLD = default;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (ILightInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ILightInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ILight obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.Components.RemapLinks(mapping);
            obj.Model?.RemapLinks(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.Lens.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(ILight obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            ILight obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
            obj.Model?.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILightInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ILightInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: LightBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: LightBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Light)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Light)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class LightCommon : StarfieldMajorRecordCommon
    {
        public new static readonly LightCommon Instance = new LightCommon();

        public Light.Mask<bool> GetEqualsMask(
            ILightGetter item,
            ILightGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Light.Mask<bool>(false);
            ((LightCommon)((ILightGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILightGetter item,
            ILightGetter rhs,
            Light.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.ODTY = item.ODTY.EqualsWithin(rhs.ODTY);
            ret.ODRT = item.ODRT.EqualsWithin(rhs.ODRT);
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.DAT2 = MemorySliceExt.SequenceEqual(item.DAT2, rhs.DAT2);
            ret.Gobo = string.Equals(item.Gobo, rhs.Gobo);
            ret.Lens = item.Lens.Equals(rhs.Lens);
            ret.FLBD = MemorySliceExt.SequenceEqual(item.FLBD, rhs.FLBD);
            ret.FLRD = MemorySliceExt.SequenceEqual(item.FLRD, rhs.FLRD);
            ret.FLGD = MemorySliceExt.SequenceEqual(item.FLGD, rhs.FLGD);
            ret.LLLD = MemorySliceExt.SequenceEqual(item.LLLD, rhs.LLLD);
            ret.FLAD = MemorySliceExt.SequenceEqual(item.FLAD, rhs.FLAD);
            ret.FVLD = item.FVLD.EqualsWithin(rhs.FVLD);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ILightGetter item,
            string? name = null,
            Light.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ILightGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Light.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Light =>");
            }
            else
            {
                sb.AppendLine($"{name} (Light) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ILightGetter item,
            StructuredStringBuilder sb,
            Light.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                VirtualMachineAdapterItem?.Print(sb, "VirtualMachineAdapter");
            }
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.Print(sb, "ObjectBounds");
            }
            if ((printMask?.ODTY ?? true)
                && item.ODTY is {} ODTYItem)
            {
                sb.AppendItem(ODTYItem, "ODTY");
            }
            if ((printMask?.ODRT ?? true)
                && item.ODRT is {} ODRTItem)
            {
                sb.AppendItem(ODRTItem, "ODRT");
            }
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.Print(sb, "Model");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.DAT2 ?? true)
                && item.DAT2 is {} DAT2Item)
            {
                sb.AppendLine($"DAT2 => {SpanExt.ToHexString(DAT2Item)}");
            }
            if ((printMask?.Gobo ?? true)
                && item.Gobo is {} GoboItem)
            {
                sb.AppendItem(GoboItem, "Gobo");
            }
            if (printMask?.Lens ?? true)
            {
                sb.AppendItem(item.Lens.FormKeyNullable, "Lens");
            }
            if ((printMask?.FLBD ?? true)
                && item.FLBD is {} FLBDItem)
            {
                sb.AppendLine($"FLBD => {SpanExt.ToHexString(FLBDItem)}");
            }
            if ((printMask?.FLRD ?? true)
                && item.FLRD is {} FLRDItem)
            {
                sb.AppendLine($"FLRD => {SpanExt.ToHexString(FLRDItem)}");
            }
            if ((printMask?.FLGD ?? true)
                && item.FLGD is {} FLGDItem)
            {
                sb.AppendLine($"FLGD => {SpanExt.ToHexString(FLGDItem)}");
            }
            if ((printMask?.LLLD ?? true)
                && item.LLLD is {} LLLDItem)
            {
                sb.AppendLine($"LLLD => {SpanExt.ToHexString(LLLDItem)}");
            }
            if ((printMask?.FLAD ?? true)
                && item.FLAD is {} FLADItem)
            {
                sb.AppendLine($"FLAD => {SpanExt.ToHexString(FLADItem)}");
            }
            if ((printMask?.FVLD ?? true)
                && item.FVLD is {} FVLDItem)
            {
                sb.AppendItem(FVLDItem, "FVLD");
            }
        }
        
        public static Light_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Light_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (Light_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (Light_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (Light_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (Light_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (Light_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (Light_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Light_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Light_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Light_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Light_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Light_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILightGetter? lhs,
            ILightGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Light_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter, out var lhsVirtualMachineAdapter, out var rhsVirtualMachineAdapter, out var isVirtualMachineAdapterEqual))
                {
                    if (!((VirtualMachineAdapterCommon)((IVirtualMachineAdapterGetter)lhsVirtualMachineAdapter).CommonInstance()!).Equals(lhsVirtualMachineAdapter, rhsVirtualMachineAdapter, equalsMask?.GetSubCrystal((int)Light_FieldIndex.VirtualMachineAdapter))) return false;
                }
                else if (!isVirtualMachineAdapterEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Light_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, equalsMask?.GetSubCrystal((int)Light_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Light_FieldIndex.ODTY) ?? true))
            {
                if (!lhs.ODTY.EqualsWithin(rhs.ODTY)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Light_FieldIndex.ODRT) ?? true))
            {
                if (!lhs.ODRT.EqualsWithin(rhs.ODRT)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Light_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Light_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Light_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, equalsMask?.GetSubCrystal((int)Light_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Light_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Light_FieldIndex.DAT2) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.DAT2, rhs.DAT2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Light_FieldIndex.Gobo) ?? true))
            {
                if (!string.Equals(lhs.Gobo, rhs.Gobo)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Light_FieldIndex.Lens) ?? true))
            {
                if (!lhs.Lens.Equals(rhs.Lens)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Light_FieldIndex.FLBD) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.FLBD, rhs.FLBD)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Light_FieldIndex.FLRD) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.FLRD, rhs.FLRD)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Light_FieldIndex.FLGD) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.FLGD, rhs.FLGD)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Light_FieldIndex.LLLD) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.LLLD, rhs.LLLD)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Light_FieldIndex.FLAD) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.FLAD, rhs.FLAD)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Light_FieldIndex.FVLD) ?? true))
            {
                if (!lhs.FVLD.EqualsWithin(rhs.FVLD)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ILightGetter?)lhs,
                rhs: rhs as ILightGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ILightGetter?)lhs,
                rhs: rhs as ILightGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ILightGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapteritem)
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.ObjectBounds);
            if (item.ODTY is {} ODTYitem)
            {
                hash.Add(ODTYitem);
            }
            if (item.ODRT is {} ODRTitem)
            {
                hash.Add(ODRTitem);
            }
            hash.Add(item.Components);
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.Keywords);
            if (item.DAT2 is {} DAT2Item)
            {
                hash.Add(DAT2Item);
            }
            if (item.Gobo is {} Goboitem)
            {
                hash.Add(Goboitem);
            }
            hash.Add(item.Lens);
            if (item.FLBD is {} FLBDItem)
            {
                hash.Add(FLBDItem);
            }
            if (item.FLRD is {} FLRDItem)
            {
                hash.Add(FLRDItem);
            }
            if (item.FLGD is {} FLGDItem)
            {
                hash.Add(FLGDItem);
            }
            if (item.LLLD is {} LLLDItem)
            {
                hash.Add(LLLDItem);
            }
            if (item.FLAD is {} FLADItem)
            {
                hash.Add(FLADItem);
            }
            if (item.FVLD is {} FVLDitem)
            {
                hash.Add(FVLDitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (ILightGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ILightGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Light.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ILightGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.Lens, out var LensInfo))
            {
                yield return LensInfo;
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(ILightGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            if (queryCategories.HasFlag(AssetLinkQuery.Listed))
            {
                foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                    .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
                {
                    yield return item;
                }
                if (obj.Model is {} ModelItems)
                {
                    foreach (var item in ModelItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                    {
                        yield return item;
                    }
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Light Duplicate(
            ILightGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Light(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ILightGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ILightGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class LightSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly LightSetterTranslationCommon Instance = new LightSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ILightInternal item,
            ILightGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ILight item,
            ILightGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Light_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter is {} rhsVirtualMachineAdapter)
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Light_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Light_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Light_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.ODTY) ?? true))
            {
                item.ODTY = rhs.ODTY;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.ODRT) ?? true))
            {
                item.ODRT = rhs.ODRT;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)Light_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Light_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Light_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Light_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.DAT2) ?? true))
            {
                if(rhs.DAT2 is {} DAT2rhs)
                {
                    item.DAT2 = DAT2rhs.ToArray();
                }
                else
                {
                    item.DAT2 = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Gobo) ?? true))
            {
                item.Gobo = rhs.Gobo;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Lens) ?? true))
            {
                item.Lens.SetTo(rhs.Lens.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.FLBD) ?? true))
            {
                if(rhs.FLBD is {} FLBDrhs)
                {
                    item.FLBD = FLBDrhs.ToArray();
                }
                else
                {
                    item.FLBD = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.FLRD) ?? true))
            {
                if(rhs.FLRD is {} FLRDrhs)
                {
                    item.FLRD = FLRDrhs.ToArray();
                }
                else
                {
                    item.FLRD = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.FLGD) ?? true))
            {
                if(rhs.FLGD is {} FLGDrhs)
                {
                    item.FLGD = FLGDrhs.ToArray();
                }
                else
                {
                    item.FLGD = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.LLLD) ?? true))
            {
                if(rhs.LLLD is {} LLLDrhs)
                {
                    item.LLLD = LLLDrhs.ToArray();
                }
                else
                {
                    item.LLLD = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.FLAD) ?? true))
            {
                if(rhs.FLAD is {} FLADrhs)
                {
                    item.FLAD = FLADrhs.ToArray();
                }
                else
                {
                    item.FLAD = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.FVLD) ?? true))
            {
                item.FVLD = rhs.FVLD;
            }
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILightInternal)item,
                rhs: (ILightGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILight)item,
                rhs: (ILightGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILightInternal)item,
                rhs: (ILightGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILight)item,
                rhs: (ILightGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Light DeepCopy(
            ILightGetter item,
            Light.TranslationMask? copyMask = null)
        {
            Light ret = (Light)((LightCommon)((ILightGetter)item).CommonInstance()!).GetNew();
            ((LightSetterTranslationCommon)((ILightGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Light DeepCopy(
            ILightGetter item,
            out Light.ErrorMask errorMask,
            Light.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Light ret = (Light)((LightCommon)((ILightGetter)item).CommonInstance()!).GetNew();
            ((LightSetterTranslationCommon)((ILightGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Light.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Light DeepCopy(
            ILightGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Light ret = (Light)((LightCommon)((ILightGetter)item).CommonInstance()!).GetNew();
            ((LightSetterTranslationCommon)((ILightGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Light
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Light_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Light_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LightCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return LightSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LightSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class LightBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly LightBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ILightGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    translationParams: translationParams.With(RecordTypes.XXXX));
            }
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.ODTY,
                header: translationParams.ConvertToCustom(RecordTypes.ODTY));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.ODRT,
                header: translationParams.ConvertToCustom(RecordTypes.ODRT));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.DAT2,
                header: translationParams.ConvertToCustom(RecordTypes.DAT2));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Gobo,
                header: translationParams.ConvertToCustom(RecordTypes.NAM0),
                binaryType: StringBinaryType.NullTerminate);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Lens,
                header: translationParams.ConvertToCustom(RecordTypes.LNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FLBD,
                header: translationParams.ConvertToCustom(RecordTypes.FLBD));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FLRD,
                header: translationParams.ConvertToCustom(RecordTypes.FLRD));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FLGD,
                header: translationParams.ConvertToCustom(RecordTypes.FLGD));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.LLLD,
                header: translationParams.ConvertToCustom(RecordTypes.LLLD));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FLAD,
                header: translationParams.ConvertToCustom(RecordTypes.FLAD));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.FVLD,
                header: translationParams.ConvertToCustom(RecordTypes.FVLD));
        }

        public void Write(
            MutagenWriter writer,
            ILightGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Record(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.LIGH)))
            {
                try
                {
                    StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded(
                        item: item,
                        writer: writer);
                    if (!item.IsDeleted)
                    {
                        writer.MetaData.FormVersion = item.FormVersion;
                        WriteRecordTypes(
                            item: item,
                            writer: writer,
                            translationParams: translationParams);
                        writer.MetaData.FormVersion = null;
                    }
                }
                catch (Exception ex)
                {
                    throw RecordException.Enrich(ex, item);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ILightGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ILightGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ILightGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class LightBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly LightBinaryCreateTranslation Instance = new LightBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.LIGH;
        public static ParseResult FillBinaryRecordTypes(
            ILightInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Starfield.VirtualMachineAdapter.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(lastParsed.LengthOverride).DoNotShortCircuit());
                    return (int)Light_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Starfield.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Light_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ODTY:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ODTY = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Light_FieldIndex.ODTY;
                }
                case RecordTypeInts.ODRT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ODRT = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Light_FieldIndex.ODRT;
                }
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)Light_FieldIndex.Components;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MOLM:
                case RecordTypeInts.DMDC:
                case RecordTypeInts.BLMS:
                case RecordTypeInts.FLLD:
                case RecordTypeInts.XFLG:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODF:
                {
                    item.Model = Mutagen.Bethesda.Starfield.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Light_FieldIndex.Model;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Light_FieldIndex.Keywords;
                }
                case RecordTypeInts.DAT2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DAT2 = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Light_FieldIndex.DAT2;
                }
                case RecordTypeInts.NAM0:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Gobo = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Light_FieldIndex.Gobo;
                }
                case RecordTypeInts.LNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Lens.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Light_FieldIndex.Lens;
                }
                case RecordTypeInts.FLBD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FLBD = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Light_FieldIndex.FLBD;
                }
                case RecordTypeInts.FLRD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FLRD = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Light_FieldIndex.FLRD;
                }
                case RecordTypeInts.FLGD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FLGD = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Light_FieldIndex.FLGD;
                }
                case RecordTypeInts.LLLD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LLLD = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Light_FieldIndex.LLLD;
                }
                case RecordTypeInts.FLAD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FLAD = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Light_FieldIndex.FLAD;
                }
                case RecordTypeInts.FVLD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FVLD = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Light_FieldIndex.FVLD;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class LightBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class LightBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        ILightGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Light_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Light_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LightCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LightSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => LightCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => LightCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LightBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LightBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ILight);

        public Light.MajorFlag MajorFlags => (Light.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private int? _VirtualMachineAdapterLengthOverride;
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(_recordData.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package, TypedParseParams.FromLengthOverride(_VirtualMachineAdapterLengthOverride)) : default;
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(_recordData.Slice(_ObjectBoundsLocation!.Value.Min), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region ODTY
        private int? _ODTYLocation;
        public Single? ODTY => _ODTYLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ODTYLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region ODRT
        private int? _ODRTLocation;
        public Single? ODRT => _ODRTLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ODRTLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = Array.Empty<IAComponentGetter>();
        public IModelGetter? Model { get; private set; }
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #region DAT2
        private int? _DAT2Location;
        public ReadOnlyMemorySlice<Byte>? DAT2 => _DAT2Location.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _DAT2Location.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Gobo
        private int? _GoboLocation;
        public String? Gobo => _GoboLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _GoboLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region Lens
        private int? _LensLocation;
        public IFormLinkNullableGetter<ILensFlareGetter> Lens => FormKeyBinaryTranslation.Instance.OverlayNullableHelper<ILensFlareGetter>(_LensLocation, _package, _recordData);
        #endregion
        #region FLBD
        private int? _FLBDLocation;
        public ReadOnlyMemorySlice<Byte>? FLBD => _FLBDLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FLBDLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region FLRD
        private int? _FLRDLocation;
        public ReadOnlyMemorySlice<Byte>? FLRD => _FLRDLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FLRDLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region FLGD
        private int? _FLGDLocation;
        public ReadOnlyMemorySlice<Byte>? FLGD => _FLGDLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FLGDLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region LLLD
        private int? _LLLDLocation;
        public ReadOnlyMemorySlice<Byte>? LLLD => _LLLDLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _LLLDLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region FLAD
        private int? _FLADLocation;
        public ReadOnlyMemorySlice<Byte>? FLAD => _FLADLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FLADLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region FVLD
        private int? _FVLDLocation;
        public Single? FVLD => _FVLDLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FVLDLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected LightBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ILightGetter LightFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new LightBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ILightGetter LightFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return LightFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    _VirtualMachineAdapterLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)Light_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Light_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ODTY:
                {
                    _ODTYLocation = (stream.Position - offset);
                    return (int)Light_FieldIndex.ODTY;
                }
                case RecordTypeInts.ODRT:
                {
                    _ODRTLocation = (stream.Position - offset);
                    return (int)Light_FieldIndex.ODRT;
                }
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)Light_FieldIndex.Components;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MOLM:
                case RecordTypeInts.DMDC:
                case RecordTypeInts.BLMS:
                case RecordTypeInts.FLLD:
                case RecordTypeInts.XFLG:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODF:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Light_FieldIndex.Model;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        trigger: RecordTypes.KWDA,
                        getter: (s, p) => new FormLink<IKeywordGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    return (int)Light_FieldIndex.Keywords;
                }
                case RecordTypeInts.DAT2:
                {
                    _DAT2Location = (stream.Position - offset);
                    return (int)Light_FieldIndex.DAT2;
                }
                case RecordTypeInts.NAM0:
                {
                    _GoboLocation = (stream.Position - offset);
                    return (int)Light_FieldIndex.Gobo;
                }
                case RecordTypeInts.LNAM:
                {
                    _LensLocation = (stream.Position - offset);
                    return (int)Light_FieldIndex.Lens;
                }
                case RecordTypeInts.FLBD:
                {
                    _FLBDLocation = (stream.Position - offset);
                    return (int)Light_FieldIndex.FLBD;
                }
                case RecordTypeInts.FLRD:
                {
                    _FLRDLocation = (stream.Position - offset);
                    return (int)Light_FieldIndex.FLRD;
                }
                case RecordTypeInts.FLGD:
                {
                    _FLGDLocation = (stream.Position - offset);
                    return (int)Light_FieldIndex.FLGD;
                }
                case RecordTypeInts.LLLD:
                {
                    _LLLDLocation = (stream.Position - offset);
                    return (int)Light_FieldIndex.LLLD;
                }
                case RecordTypeInts.FLAD:
                {
                    _FLADLocation = (stream.Position - offset);
                    return (int)Light_FieldIndex.FLAD;
                }
                case RecordTypeInts.FVLD:
                {
                    _FVLDLocation = (stream.Position - offset);
                    return (int)Light_FieldIndex.FVLD;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            LightMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Light>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ILightGetter rhs) return false;
            return ((LightCommon)((ILightGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ILightGetter? obj)
        {
            return ((LightCommon)((ILightGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((LightCommon)((ILightGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

