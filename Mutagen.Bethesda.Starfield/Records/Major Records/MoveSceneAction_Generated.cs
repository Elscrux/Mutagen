/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class MoveSceneAction :
        ASceneAction,
        IEquatable<IMoveSceneActionGetter>,
        ILoquiObjectSetter<MoveSceneAction>,
        IMoveSceneAction
    {
        #region Ctor
        public MoveSceneAction()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region DNAM
        public Boolean DNAM { get; set; } = default(Boolean);
        #endregion
        #region NVCI
        public Boolean NVCI { get; set; } = default(Boolean);
        #endregion
        #region ALLA
        public Int32 ALLA { get; set; } = default(Int32);
        #endregion
        #region REPL
        private readonly IFormLink<IPlacedGetter> _REPL = new FormLink<IPlacedGetter>();
        public IFormLink<IPlacedGetter> REPL
        {
            get => _REPL;
            set => _REPL.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IPlacedGetter> IMoveSceneActionGetter.REPL => this.REPL;
        #endregion
        #region HNAM
        public Single HNAM { get; set; } = default(Single);
        #endregion
        #region VCLR
        public Single VCLR { get; set; } = default(Single);
        #endregion
        #region VNML
        public Single VNML { get; set; } = default(Single);
        #endregion
        #region FLMV
        public Int32 FLMV { get; set; } = default(Int32);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            MoveSceneActionMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IMoveSceneActionGetter rhs) return false;
            return ((MoveSceneActionCommon)((IMoveSceneActionGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IMoveSceneActionGetter? obj)
        {
            return ((MoveSceneActionCommon)((IMoveSceneActionGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((MoveSceneActionCommon)((IMoveSceneActionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            ASceneAction.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.DNAM = initialValue;
                this.NVCI = initialValue;
                this.ALLA = initialValue;
                this.REPL = initialValue;
                this.HNAM = initialValue;
                this.VCLR = initialValue;
                this.VNML = initialValue;
                this.FLMV = initialValue;
            }

            public Mask(
                TItem Name,
                TItem SceneNotes,
                TItem AliasID,
                TItem Index,
                TItem Flags,
                TItem StartPhase,
                TItem EndPhase,
                TItem DNAM,
                TItem NVCI,
                TItem ALLA,
                TItem REPL,
                TItem HNAM,
                TItem VCLR,
                TItem VNML,
                TItem FLMV)
            : base(
                Name: Name,
                SceneNotes: SceneNotes,
                AliasID: AliasID,
                Index: Index,
                Flags: Flags,
                StartPhase: StartPhase,
                EndPhase: EndPhase)
            {
                this.DNAM = DNAM;
                this.NVCI = NVCI;
                this.ALLA = ALLA;
                this.REPL = REPL;
                this.HNAM = HNAM;
                this.VCLR = VCLR;
                this.VNML = VNML;
                this.FLMV = FLMV;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem DNAM;
            public TItem NVCI;
            public TItem ALLA;
            public TItem REPL;
            public TItem HNAM;
            public TItem VCLR;
            public TItem VNML;
            public TItem FLMV;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.DNAM, rhs.DNAM)) return false;
                if (!object.Equals(this.NVCI, rhs.NVCI)) return false;
                if (!object.Equals(this.ALLA, rhs.ALLA)) return false;
                if (!object.Equals(this.REPL, rhs.REPL)) return false;
                if (!object.Equals(this.HNAM, rhs.HNAM)) return false;
                if (!object.Equals(this.VCLR, rhs.VCLR)) return false;
                if (!object.Equals(this.VNML, rhs.VNML)) return false;
                if (!object.Equals(this.FLMV, rhs.FLMV)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.DNAM);
                hash.Add(this.NVCI);
                hash.Add(this.ALLA);
                hash.Add(this.REPL);
                hash.Add(this.HNAM);
                hash.Add(this.VCLR);
                hash.Add(this.VNML);
                hash.Add(this.FLMV);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.DNAM)) return false;
                if (!eval(this.NVCI)) return false;
                if (!eval(this.ALLA)) return false;
                if (!eval(this.REPL)) return false;
                if (!eval(this.HNAM)) return false;
                if (!eval(this.VCLR)) return false;
                if (!eval(this.VNML)) return false;
                if (!eval(this.FLMV)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.DNAM)) return true;
                if (eval(this.NVCI)) return true;
                if (eval(this.ALLA)) return true;
                if (eval(this.REPL)) return true;
                if (eval(this.HNAM)) return true;
                if (eval(this.VCLR)) return true;
                if (eval(this.VNML)) return true;
                if (eval(this.FLMV)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new MoveSceneAction.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.DNAM = eval(this.DNAM);
                obj.NVCI = eval(this.NVCI);
                obj.ALLA = eval(this.ALLA);
                obj.REPL = eval(this.REPL);
                obj.HNAM = eval(this.HNAM);
                obj.VCLR = eval(this.VCLR);
                obj.VNML = eval(this.VNML);
                obj.FLMV = eval(this.FLMV);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(MoveSceneAction.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, MoveSceneAction.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(MoveSceneAction.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.DNAM ?? true)
                    {
                        sb.AppendItem(DNAM, "DNAM");
                    }
                    if (printMask?.NVCI ?? true)
                    {
                        sb.AppendItem(NVCI, "NVCI");
                    }
                    if (printMask?.ALLA ?? true)
                    {
                        sb.AppendItem(ALLA, "ALLA");
                    }
                    if (printMask?.REPL ?? true)
                    {
                        sb.AppendItem(REPL, "REPL");
                    }
                    if (printMask?.HNAM ?? true)
                    {
                        sb.AppendItem(HNAM, "HNAM");
                    }
                    if (printMask?.VCLR ?? true)
                    {
                        sb.AppendItem(VCLR, "VCLR");
                    }
                    if (printMask?.VNML ?? true)
                    {
                        sb.AppendItem(VNML, "VNML");
                    }
                    if (printMask?.FLMV ?? true)
                    {
                        sb.AppendItem(FLMV, "FLMV");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            ASceneAction.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? DNAM;
            public Exception? NVCI;
            public Exception? ALLA;
            public Exception? REPL;
            public Exception? HNAM;
            public Exception? VCLR;
            public Exception? VNML;
            public Exception? FLMV;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                MoveSceneAction_FieldIndex enu = (MoveSceneAction_FieldIndex)index;
                switch (enu)
                {
                    case MoveSceneAction_FieldIndex.DNAM:
                        return DNAM;
                    case MoveSceneAction_FieldIndex.NVCI:
                        return NVCI;
                    case MoveSceneAction_FieldIndex.ALLA:
                        return ALLA;
                    case MoveSceneAction_FieldIndex.REPL:
                        return REPL;
                    case MoveSceneAction_FieldIndex.HNAM:
                        return HNAM;
                    case MoveSceneAction_FieldIndex.VCLR:
                        return VCLR;
                    case MoveSceneAction_FieldIndex.VNML:
                        return VNML;
                    case MoveSceneAction_FieldIndex.FLMV:
                        return FLMV;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                MoveSceneAction_FieldIndex enu = (MoveSceneAction_FieldIndex)index;
                switch (enu)
                {
                    case MoveSceneAction_FieldIndex.DNAM:
                        this.DNAM = ex;
                        break;
                    case MoveSceneAction_FieldIndex.NVCI:
                        this.NVCI = ex;
                        break;
                    case MoveSceneAction_FieldIndex.ALLA:
                        this.ALLA = ex;
                        break;
                    case MoveSceneAction_FieldIndex.REPL:
                        this.REPL = ex;
                        break;
                    case MoveSceneAction_FieldIndex.HNAM:
                        this.HNAM = ex;
                        break;
                    case MoveSceneAction_FieldIndex.VCLR:
                        this.VCLR = ex;
                        break;
                    case MoveSceneAction_FieldIndex.VNML:
                        this.VNML = ex;
                        break;
                    case MoveSceneAction_FieldIndex.FLMV:
                        this.FLMV = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                MoveSceneAction_FieldIndex enu = (MoveSceneAction_FieldIndex)index;
                switch (enu)
                {
                    case MoveSceneAction_FieldIndex.DNAM:
                        this.DNAM = (Exception?)obj;
                        break;
                    case MoveSceneAction_FieldIndex.NVCI:
                        this.NVCI = (Exception?)obj;
                        break;
                    case MoveSceneAction_FieldIndex.ALLA:
                        this.ALLA = (Exception?)obj;
                        break;
                    case MoveSceneAction_FieldIndex.REPL:
                        this.REPL = (Exception?)obj;
                        break;
                    case MoveSceneAction_FieldIndex.HNAM:
                        this.HNAM = (Exception?)obj;
                        break;
                    case MoveSceneAction_FieldIndex.VCLR:
                        this.VCLR = (Exception?)obj;
                        break;
                    case MoveSceneAction_FieldIndex.VNML:
                        this.VNML = (Exception?)obj;
                        break;
                    case MoveSceneAction_FieldIndex.FLMV:
                        this.FLMV = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (DNAM != null) return true;
                if (NVCI != null) return true;
                if (ALLA != null) return true;
                if (REPL != null) return true;
                if (HNAM != null) return true;
                if (VCLR != null) return true;
                if (VNML != null) return true;
                if (FLMV != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(DNAM, "DNAM");
                }
                {
                    sb.AppendItem(NVCI, "NVCI");
                }
                {
                    sb.AppendItem(ALLA, "ALLA");
                }
                {
                    sb.AppendItem(REPL, "REPL");
                }
                {
                    sb.AppendItem(HNAM, "HNAM");
                }
                {
                    sb.AppendItem(VCLR, "VCLR");
                }
                {
                    sb.AppendItem(VNML, "VNML");
                }
                {
                    sb.AppendItem(FLMV, "FLMV");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.DNAM = this.DNAM.Combine(rhs.DNAM);
                ret.NVCI = this.NVCI.Combine(rhs.NVCI);
                ret.ALLA = this.ALLA.Combine(rhs.ALLA);
                ret.REPL = this.REPL.Combine(rhs.REPL);
                ret.HNAM = this.HNAM.Combine(rhs.HNAM);
                ret.VCLR = this.VCLR.Combine(rhs.VCLR);
                ret.VNML = this.VNML.Combine(rhs.VNML);
                ret.FLMV = this.FLMV.Combine(rhs.FLMV);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ASceneAction.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool DNAM;
            public bool NVCI;
            public bool ALLA;
            public bool REPL;
            public bool HNAM;
            public bool VCLR;
            public bool VNML;
            public bool FLMV;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.DNAM = defaultOn;
                this.NVCI = defaultOn;
                this.ALLA = defaultOn;
                this.REPL = defaultOn;
                this.HNAM = defaultOn;
                this.VCLR = defaultOn;
                this.VNML = defaultOn;
                this.FLMV = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((DNAM, null));
                ret.Add((NVCI, null));
                ret.Add((ALLA, null));
                ret.Add((REPL, null));
                ret.Add((HNAM, null));
                ret.Add((VCLR, null));
                ret.Add((VNML, null));
                ret.Add((FLMV, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => MoveSceneActionCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => MoveSceneActionSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MoveSceneActionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MoveSceneActionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static MoveSceneAction CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new MoveSceneAction();
            ((MoveSceneActionSetterCommon)((IMoveSceneActionGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out MoveSceneAction item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((MoveSceneActionSetterCommon)((IMoveSceneActionGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new MoveSceneAction GetNew()
        {
            return new MoveSceneAction();
        }

    }
    #endregion

    #region Interface
    public partial interface IMoveSceneAction :
        IASceneAction,
        IFormLinkContainer,
        ILoquiObjectSetter<IMoveSceneAction>,
        IMoveSceneActionGetter,
        INamedRequired
    {
        new Boolean DNAM { get; set; }
        new Boolean NVCI { get; set; }
        new Int32 ALLA { get; set; }
        new IFormLink<IPlacedGetter> REPL { get; set; }
        new Single HNAM { get; set; }
        new Single VCLR { get; set; }
        new Single VNML { get; set; }
        new Int32 FLMV { get; set; }
    }

    public partial interface IMoveSceneActionGetter :
        IASceneActionGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IMoveSceneActionGetter>,
        INamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => MoveSceneAction_Registration.Instance;
        Boolean DNAM { get; }
        Boolean NVCI { get; }
        Int32 ALLA { get; }
        IFormLinkGetter<IPlacedGetter> REPL { get; }
        Single HNAM { get; }
        Single VCLR { get; }
        Single VNML { get; }
        Int32 FLMV { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class MoveSceneActionMixIn
    {
        public static void Clear(this IMoveSceneAction item)
        {
            ((MoveSceneActionSetterCommon)((IMoveSceneActionGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static MoveSceneAction.Mask<bool> GetEqualsMask(
            this IMoveSceneActionGetter item,
            IMoveSceneActionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MoveSceneActionCommon)((IMoveSceneActionGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IMoveSceneActionGetter item,
            string? name = null,
            MoveSceneAction.Mask<bool>? printMask = null)
        {
            return ((MoveSceneActionCommon)((IMoveSceneActionGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IMoveSceneActionGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            MoveSceneAction.Mask<bool>? printMask = null)
        {
            ((MoveSceneActionCommon)((IMoveSceneActionGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IMoveSceneActionGetter item,
            IMoveSceneActionGetter rhs,
            MoveSceneAction.TranslationMask? equalsMask = null)
        {
            return ((MoveSceneActionCommon)((IMoveSceneActionGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IMoveSceneAction lhs,
            IMoveSceneActionGetter rhs,
            out MoveSceneAction.ErrorMask errorMask,
            MoveSceneAction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((MoveSceneActionSetterTranslationCommon)((IMoveSceneActionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = MoveSceneAction.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IMoveSceneAction lhs,
            IMoveSceneActionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((MoveSceneActionSetterTranslationCommon)((IMoveSceneActionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static MoveSceneAction DeepCopy(
            this IMoveSceneActionGetter item,
            MoveSceneAction.TranslationMask? copyMask = null)
        {
            return ((MoveSceneActionSetterTranslationCommon)((IMoveSceneActionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static MoveSceneAction DeepCopy(
            this IMoveSceneActionGetter item,
            out MoveSceneAction.ErrorMask errorMask,
            MoveSceneAction.TranslationMask? copyMask = null)
        {
            return ((MoveSceneActionSetterTranslationCommon)((IMoveSceneActionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static MoveSceneAction DeepCopy(
            this IMoveSceneActionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((MoveSceneActionSetterTranslationCommon)((IMoveSceneActionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IMoveSceneAction item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((MoveSceneActionSetterCommon)((IMoveSceneActionGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum MoveSceneAction_FieldIndex
    {
        Name = 0,
        SceneNotes = 1,
        AliasID = 2,
        Index = 3,
        Flags = 4,
        StartPhase = 5,
        EndPhase = 6,
        DNAM = 7,
        NVCI = 8,
        ALLA = 9,
        REPL = 10,
        HNAM = 11,
        VCLR = 12,
        VNML = 13,
        FLMV = 14,
    }
    #endregion

    #region Registration
    internal partial class MoveSceneAction_Registration : ILoquiRegistration
    {
        public static readonly MoveSceneAction_Registration Instance = new MoveSceneAction_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(MoveSceneAction.Mask<>);

        public static readonly Type ErrorMaskType = typeof(MoveSceneAction.ErrorMask);

        public static readonly Type ClassType = typeof(MoveSceneAction);

        public static readonly Type GetterType = typeof(IMoveSceneActionGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMoveSceneAction);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.MoveSceneAction";

        public const string Name = "MoveSceneAction";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.NAM0;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.NAM0);
            var all = RecordCollection.Factory(
                RecordTypes.NAM0,
                RecordTypes.DNAM,
                RecordTypes.NVCI,
                RecordTypes.ALLA,
                RecordTypes.REPL,
                RecordTypes.HNAM,
                RecordTypes.VCLR,
                RecordTypes.VNML,
                RecordTypes.FLMV);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(MoveSceneActionBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class MoveSceneActionSetterCommon : ASceneActionSetterCommon
    {
        public new static readonly MoveSceneActionSetterCommon Instance = new MoveSceneActionSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IMoveSceneAction item)
        {
            ClearPartial();
            item.DNAM = default(Boolean);
            item.NVCI = default(Boolean);
            item.ALLA = default(Int32);
            item.REPL.Clear();
            item.HNAM = default(Single);
            item.VCLR = default(Single);
            item.VNML = default(Single);
            item.FLMV = default(Int32);
            base.Clear(item);
        }
        
        public override void Clear(IASceneAction item)
        {
            Clear(item: (IMoveSceneAction)item);
        }
        
        #region Mutagen
        public void RemapLinks(IMoveSceneAction obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.REPL.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IMoveSceneAction item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: MoveSceneActionBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IASceneAction item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (MoveSceneAction)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class MoveSceneActionCommon : ASceneActionCommon
    {
        public new static readonly MoveSceneActionCommon Instance = new MoveSceneActionCommon();

        public MoveSceneAction.Mask<bool> GetEqualsMask(
            IMoveSceneActionGetter item,
            IMoveSceneActionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MoveSceneAction.Mask<bool>(false);
            ((MoveSceneActionCommon)((IMoveSceneActionGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMoveSceneActionGetter item,
            IMoveSceneActionGetter rhs,
            MoveSceneAction.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.DNAM = item.DNAM == rhs.DNAM;
            ret.NVCI = item.NVCI == rhs.NVCI;
            ret.ALLA = item.ALLA == rhs.ALLA;
            ret.REPL = item.REPL.Equals(rhs.REPL);
            ret.HNAM = item.HNAM.EqualsWithin(rhs.HNAM);
            ret.VCLR = item.VCLR.EqualsWithin(rhs.VCLR);
            ret.VNML = item.VNML.EqualsWithin(rhs.VNML);
            ret.FLMV = item.FLMV == rhs.FLMV;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IMoveSceneActionGetter item,
            string? name = null,
            MoveSceneAction.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IMoveSceneActionGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            MoveSceneAction.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"MoveSceneAction =>");
            }
            else
            {
                sb.AppendLine($"{name} (MoveSceneAction) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IMoveSceneActionGetter item,
            StructuredStringBuilder sb,
            MoveSceneAction.Mask<bool>? printMask = null)
        {
            ASceneActionCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.DNAM ?? true)
            {
                sb.AppendItem(item.DNAM, "DNAM");
            }
            if (printMask?.NVCI ?? true)
            {
                sb.AppendItem(item.NVCI, "NVCI");
            }
            if (printMask?.ALLA ?? true)
            {
                sb.AppendItem(item.ALLA, "ALLA");
            }
            if (printMask?.REPL ?? true)
            {
                sb.AppendItem(item.REPL.FormKey, "REPL");
            }
            if (printMask?.HNAM ?? true)
            {
                sb.AppendItem(item.HNAM, "HNAM");
            }
            if (printMask?.VCLR ?? true)
            {
                sb.AppendItem(item.VCLR, "VCLR");
            }
            if (printMask?.VNML ?? true)
            {
                sb.AppendItem(item.VNML, "VNML");
            }
            if (printMask?.FLMV ?? true)
            {
                sb.AppendItem(item.FLMV, "FLMV");
            }
        }
        
        public static MoveSceneAction_FieldIndex ConvertFieldIndex(ASceneAction_FieldIndex index)
        {
            switch (index)
            {
                case ASceneAction_FieldIndex.Name:
                    return (MoveSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.SceneNotes:
                    return (MoveSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.AliasID:
                    return (MoveSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.Index:
                    return (MoveSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.Flags:
                    return (MoveSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.StartPhase:
                    return (MoveSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.EndPhase:
                    return (MoveSceneAction_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMoveSceneActionGetter? lhs,
            IMoveSceneActionGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IASceneActionGetter)lhs, (IASceneActionGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)MoveSceneAction_FieldIndex.DNAM) ?? true))
            {
                if (lhs.DNAM != rhs.DNAM) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MoveSceneAction_FieldIndex.NVCI) ?? true))
            {
                if (lhs.NVCI != rhs.NVCI) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MoveSceneAction_FieldIndex.ALLA) ?? true))
            {
                if (lhs.ALLA != rhs.ALLA) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MoveSceneAction_FieldIndex.REPL) ?? true))
            {
                if (!lhs.REPL.Equals(rhs.REPL)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MoveSceneAction_FieldIndex.HNAM) ?? true))
            {
                if (!lhs.HNAM.EqualsWithin(rhs.HNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MoveSceneAction_FieldIndex.VCLR) ?? true))
            {
                if (!lhs.VCLR.EqualsWithin(rhs.VCLR)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MoveSceneAction_FieldIndex.VNML) ?? true))
            {
                if (!lhs.VNML.EqualsWithin(rhs.VNML)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MoveSceneAction_FieldIndex.FLMV) ?? true))
            {
                if (lhs.FLMV != rhs.FLMV) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IASceneActionGetter? lhs,
            IASceneActionGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IMoveSceneActionGetter?)lhs,
                rhs: rhs as IMoveSceneActionGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IMoveSceneActionGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.DNAM);
            hash.Add(item.NVCI);
            hash.Add(item.ALLA);
            hash.Add(item.REPL);
            hash.Add(item.HNAM);
            hash.Add(item.VCLR);
            hash.Add(item.VNML);
            hash.Add(item.FLMV);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IASceneActionGetter item)
        {
            return GetHashCode(item: (IMoveSceneActionGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return MoveSceneAction.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IMoveSceneActionGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield return FormLinkInformation.Factory(obj.REPL);
            yield break;
        }
        
        #endregion
        
    }
    internal partial class MoveSceneActionSetterTranslationCommon : ASceneActionSetterTranslationCommon
    {
        public new static readonly MoveSceneActionSetterTranslationCommon Instance = new MoveSceneActionSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IMoveSceneAction item,
            IMoveSceneActionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IASceneAction)item,
                (IASceneActionGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)MoveSceneAction_FieldIndex.DNAM) ?? true))
            {
                item.DNAM = rhs.DNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)MoveSceneAction_FieldIndex.NVCI) ?? true))
            {
                item.NVCI = rhs.NVCI;
            }
            if ((copyMask?.GetShouldTranslate((int)MoveSceneAction_FieldIndex.ALLA) ?? true))
            {
                item.ALLA = rhs.ALLA;
            }
            if ((copyMask?.GetShouldTranslate((int)MoveSceneAction_FieldIndex.REPL) ?? true))
            {
                item.REPL.SetTo(rhs.REPL.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MoveSceneAction_FieldIndex.HNAM) ?? true))
            {
                item.HNAM = rhs.HNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)MoveSceneAction_FieldIndex.VCLR) ?? true))
            {
                item.VCLR = rhs.VCLR;
            }
            if ((copyMask?.GetShouldTranslate((int)MoveSceneAction_FieldIndex.VNML) ?? true))
            {
                item.VNML = rhs.VNML;
            }
            if ((copyMask?.GetShouldTranslate((int)MoveSceneAction_FieldIndex.FLMV) ?? true))
            {
                item.FLMV = rhs.FLMV;
            }
        }
        
        
        public override void DeepCopyIn(
            IASceneAction item,
            IASceneActionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMoveSceneAction)item,
                rhs: (IMoveSceneActionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public MoveSceneAction DeepCopy(
            IMoveSceneActionGetter item,
            MoveSceneAction.TranslationMask? copyMask = null)
        {
            MoveSceneAction ret = (MoveSceneAction)((MoveSceneActionCommon)((IMoveSceneActionGetter)item).CommonInstance()!).GetNew();
            ((MoveSceneActionSetterTranslationCommon)((IMoveSceneActionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public MoveSceneAction DeepCopy(
            IMoveSceneActionGetter item,
            out MoveSceneAction.ErrorMask errorMask,
            MoveSceneAction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            MoveSceneAction ret = (MoveSceneAction)((MoveSceneActionCommon)((IMoveSceneActionGetter)item).CommonInstance()!).GetNew();
            ((MoveSceneActionSetterTranslationCommon)((IMoveSceneActionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = MoveSceneAction.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public MoveSceneAction DeepCopy(
            IMoveSceneActionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            MoveSceneAction ret = (MoveSceneAction)((MoveSceneActionCommon)((IMoveSceneActionGetter)item).CommonInstance()!).GetNew();
            ((MoveSceneActionSetterTranslationCommon)((IMoveSceneActionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class MoveSceneAction
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MoveSceneAction_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => MoveSceneAction_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MoveSceneActionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return MoveSceneActionSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MoveSceneActionSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class MoveSceneActionBinaryWriteTranslation :
        ASceneActionBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly MoveSceneActionBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IMoveSceneActionGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            ASceneActionBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.DNAM,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.NVCI,
                header: translationParams.ConvertToCustom(RecordTypes.NVCI));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ALLA,
                header: translationParams.ConvertToCustom(RecordTypes.ALLA));
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.REPL,
                header: translationParams.ConvertToCustom(RecordTypes.REPL));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.HNAM,
                header: translationParams.ConvertToCustom(RecordTypes.HNAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.VCLR,
                header: translationParams.ConvertToCustom(RecordTypes.VCLR));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.VNML,
                header: translationParams.ConvertToCustom(RecordTypes.VNML));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FLMV,
                header: translationParams.ConvertToCustom(RecordTypes.FLMV));
        }

        public void Write(
            MutagenWriter writer,
            IMoveSceneActionGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IMoveSceneActionGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IASceneActionGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IMoveSceneActionGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class MoveSceneActionBinaryCreateTranslation : ASceneActionBinaryCreateTranslation
    {
        public new static readonly MoveSceneActionBinaryCreateTranslation Instance = new MoveSceneActionBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IMoveSceneAction item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DNAM:
                {
                    item.DNAM = true;
                    return (int)MoveSceneAction_FieldIndex.DNAM;
                }
                case RecordTypeInts.NVCI:
                {
                    item.NVCI = true;
                    return (int)MoveSceneAction_FieldIndex.NVCI;
                }
                case RecordTypeInts.ALLA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ALLA = frame.ReadInt32();
                    return (int)MoveSceneAction_FieldIndex.ALLA;
                }
                case RecordTypeInts.REPL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.REPL.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)MoveSceneAction_FieldIndex.REPL;
                }
                case RecordTypeInts.HNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HNAM = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)MoveSceneAction_FieldIndex.HNAM;
                }
                case RecordTypeInts.VCLR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VCLR = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)MoveSceneAction_FieldIndex.VCLR;
                }
                case RecordTypeInts.VNML:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VNML = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)MoveSceneAction_FieldIndex.VNML;
                }
                case RecordTypeInts.FLMV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FLMV = frame.ReadInt32();
                    return (int)MoveSceneAction_FieldIndex.FLMV;
                }
                default:
                    return ASceneActionBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class MoveSceneActionBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class MoveSceneActionBinaryOverlay :
        ASceneActionBinaryOverlay,
        IMoveSceneActionGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MoveSceneAction_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => MoveSceneAction_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MoveSceneActionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MoveSceneActionSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => MoveSceneActionCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MoveSceneActionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MoveSceneActionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region DNAM
        private int? _DNAMLocation;
        public Boolean DNAM => _DNAMLocation.HasValue ? true : default(Boolean);
        #endregion
        #region NVCI
        private int? _NVCILocation;
        public Boolean NVCI => _NVCILocation.HasValue ? true : default(Boolean);
        #endregion
        #region ALLA
        private int? _ALLALocation;
        public Int32 ALLA => _ALLALocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ALLALocation.Value, _package.MetaData.Constants)) : default(Int32);
        #endregion
        #region REPL
        private int? _REPLLocation;
        public IFormLinkGetter<IPlacedGetter> REPL => _REPLLocation.HasValue ? new FormLink<IPlacedGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _REPLLocation.Value, _package.MetaData.Constants)))) : FormLink<IPlacedGetter>.Null;
        #endregion
        #region HNAM
        private int? _HNAMLocation;
        public Single HNAM => _HNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _HNAMLocation.Value, _package.MetaData.Constants).Float() : default(Single);
        #endregion
        #region VCLR
        private int? _VCLRLocation;
        public Single VCLR => _VCLRLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _VCLRLocation.Value, _package.MetaData.Constants).Float() : default(Single);
        #endregion
        #region VNML
        private int? _VNMLLocation;
        public Single VNML => _VNMLLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _VNMLLocation.Value, _package.MetaData.Constants).Float() : default(Single);
        #endregion
        #region FLMV
        private int? _FLMVLocation;
        public Int32 FLMV => _FLMVLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FLMVLocation.Value, _package.MetaData.Constants)) : default(Int32);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected MoveSceneActionBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IMoveSceneActionGetter MoveSceneActionFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new MoveSceneActionBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IMoveSceneActionGetter MoveSceneActionFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return MoveSceneActionFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DNAM:
                {
                    _DNAMLocation = (stream.Position - offset);
                    return (int)MoveSceneAction_FieldIndex.DNAM;
                }
                case RecordTypeInts.NVCI:
                {
                    _NVCILocation = (stream.Position - offset);
                    return (int)MoveSceneAction_FieldIndex.NVCI;
                }
                case RecordTypeInts.ALLA:
                {
                    _ALLALocation = (stream.Position - offset);
                    return (int)MoveSceneAction_FieldIndex.ALLA;
                }
                case RecordTypeInts.REPL:
                {
                    _REPLLocation = (stream.Position - offset);
                    return (int)MoveSceneAction_FieldIndex.REPL;
                }
                case RecordTypeInts.HNAM:
                {
                    _HNAMLocation = (stream.Position - offset);
                    return (int)MoveSceneAction_FieldIndex.HNAM;
                }
                case RecordTypeInts.VCLR:
                {
                    _VCLRLocation = (stream.Position - offset);
                    return (int)MoveSceneAction_FieldIndex.VCLR;
                }
                case RecordTypeInts.VNML:
                {
                    _VNMLLocation = (stream.Position - offset);
                    return (int)MoveSceneAction_FieldIndex.VNML;
                }
                case RecordTypeInts.FLMV:
                {
                    _FLMVLocation = (stream.Position - offset);
                    return (int)MoveSceneAction_FieldIndex.FLMV;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            MoveSceneActionMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IMoveSceneActionGetter rhs) return false;
            return ((MoveSceneActionCommon)((IMoveSceneActionGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IMoveSceneActionGetter? obj)
        {
            return ((MoveSceneActionCommon)((IMoveSceneActionGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((MoveSceneActionCommon)((IMoveSceneActionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

