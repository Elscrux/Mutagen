/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class SoundKeywordMappingItem :
        IEquatable<ISoundKeywordMappingItemGetter>,
        ILoquiObjectSetter<SoundKeywordMappingItem>,
        ISoundKeywordMappingItem
    {
        #region Ctor
        public SoundKeywordMappingItem()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region RSMC
        public UInt32? RSMC { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? ISoundKeywordMappingItemGetter.RSMC => this.RSMC;
        #endregion
        #region RSMH
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundReference? _RSMH;
        public SoundReference? RSMH
        {
            get => _RSMH;
            set => _RSMH = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter? ISoundKeywordMappingItemGetter.RSMH => this.RSMH;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SoundKeywordMappingItemMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISoundKeywordMappingItemGetter rhs) return false;
            return ((SoundKeywordMappingItemCommon)((ISoundKeywordMappingItemGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISoundKeywordMappingItemGetter? obj)
        {
            return ((SoundKeywordMappingItemCommon)((ISoundKeywordMappingItemGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SoundKeywordMappingItemCommon)((ISoundKeywordMappingItemGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.RSMC = initialValue;
                this.RSMH = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem RSMC,
                TItem RSMH)
            {
                this.RSMC = RSMC;
                this.RSMH = new MaskItem<TItem, SoundReference.Mask<TItem>?>(RSMH, new SoundReference.Mask<TItem>(RSMH));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem RSMC;
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? RSMH { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.RSMC, rhs.RSMC)) return false;
                if (!object.Equals(this.RSMH, rhs.RSMH)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.RSMC);
                hash.Add(this.RSMH);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.RSMC)) return false;
                if (RSMH != null)
                {
                    if (!eval(this.RSMH.Overall)) return false;
                    if (this.RSMH.Specific != null && !this.RSMH.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.RSMC)) return true;
                if (RSMH != null)
                {
                    if (eval(this.RSMH.Overall)) return true;
                    if (this.RSMH.Specific != null && this.RSMH.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SoundKeywordMappingItem.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.RSMC = eval(this.RSMC);
                obj.RSMH = this.RSMH == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.RSMH.Overall), this.RSMH.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(SoundKeywordMappingItem.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, SoundKeywordMappingItem.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(SoundKeywordMappingItem.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.RSMC ?? true)
                    {
                        sb.AppendItem(RSMC, "RSMC");
                    }
                    if (printMask?.RSMH?.Overall ?? true)
                    {
                        RSMH?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? RSMC;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? RSMH;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                SoundKeywordMappingItem_FieldIndex enu = (SoundKeywordMappingItem_FieldIndex)index;
                switch (enu)
                {
                    case SoundKeywordMappingItem_FieldIndex.RSMC:
                        return RSMC;
                    case SoundKeywordMappingItem_FieldIndex.RSMH:
                        return RSMH;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                SoundKeywordMappingItem_FieldIndex enu = (SoundKeywordMappingItem_FieldIndex)index;
                switch (enu)
                {
                    case SoundKeywordMappingItem_FieldIndex.RSMC:
                        this.RSMC = ex;
                        break;
                    case SoundKeywordMappingItem_FieldIndex.RSMH:
                        this.RSMH = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                SoundKeywordMappingItem_FieldIndex enu = (SoundKeywordMappingItem_FieldIndex)index;
                switch (enu)
                {
                    case SoundKeywordMappingItem_FieldIndex.RSMC:
                        this.RSMC = (Exception?)obj;
                        break;
                    case SoundKeywordMappingItem_FieldIndex.RSMH:
                        this.RSMH = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (RSMC != null) return true;
                if (RSMH != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(RSMC, "RSMC");
                }
                RSMH?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.RSMC = this.RSMC.Combine(rhs.RSMC);
                ret.RSMH = this.RSMH.Combine(rhs.RSMH, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool RSMC;
            public SoundReference.TranslationMask? RSMH;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.RSMC = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((RSMC, null));
                ret.Add((RSMH != null ? RSMH.OnOverall : DefaultOn, RSMH?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SoundKeywordMappingItemCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SoundKeywordMappingItemSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => SoundKeywordMappingItemBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SoundKeywordMappingItemBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static SoundKeywordMappingItem CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new SoundKeywordMappingItem();
            ((SoundKeywordMappingItemSetterCommon)((ISoundKeywordMappingItemGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SoundKeywordMappingItem item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SoundKeywordMappingItemSetterCommon)((ISoundKeywordMappingItemGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static SoundKeywordMappingItem GetNew()
        {
            return new SoundKeywordMappingItem();
        }

    }
    #endregion

    #region Interface
    public partial interface ISoundKeywordMappingItem :
        IFormLinkContainer,
        ILoquiObjectSetter<ISoundKeywordMappingItem>,
        ISoundKeywordMappingItemGetter
    {
        new UInt32? RSMC { get; set; }
        new SoundReference? RSMH { get; set; }
    }

    public partial interface ISoundKeywordMappingItemGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ISoundKeywordMappingItemGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => SoundKeywordMappingItem_Registration.Instance;
        UInt32? RSMC { get; }
        ISoundReferenceGetter? RSMH { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SoundKeywordMappingItemMixIn
    {
        public static void Clear(this ISoundKeywordMappingItem item)
        {
            ((SoundKeywordMappingItemSetterCommon)((ISoundKeywordMappingItemGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SoundKeywordMappingItem.Mask<bool> GetEqualsMask(
            this ISoundKeywordMappingItemGetter item,
            ISoundKeywordMappingItemGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SoundKeywordMappingItemCommon)((ISoundKeywordMappingItemGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ISoundKeywordMappingItemGetter item,
            string? name = null,
            SoundKeywordMappingItem.Mask<bool>? printMask = null)
        {
            return ((SoundKeywordMappingItemCommon)((ISoundKeywordMappingItemGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ISoundKeywordMappingItemGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SoundKeywordMappingItem.Mask<bool>? printMask = null)
        {
            ((SoundKeywordMappingItemCommon)((ISoundKeywordMappingItemGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISoundKeywordMappingItemGetter item,
            ISoundKeywordMappingItemGetter rhs,
            SoundKeywordMappingItem.TranslationMask? equalsMask = null)
        {
            return ((SoundKeywordMappingItemCommon)((ISoundKeywordMappingItemGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISoundKeywordMappingItem lhs,
            ISoundKeywordMappingItemGetter rhs)
        {
            ((SoundKeywordMappingItemSetterTranslationCommon)((ISoundKeywordMappingItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ISoundKeywordMappingItem lhs,
            ISoundKeywordMappingItemGetter rhs,
            SoundKeywordMappingItem.TranslationMask? copyMask = null)
        {
            ((SoundKeywordMappingItemSetterTranslationCommon)((ISoundKeywordMappingItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ISoundKeywordMappingItem lhs,
            ISoundKeywordMappingItemGetter rhs,
            out SoundKeywordMappingItem.ErrorMask errorMask,
            SoundKeywordMappingItem.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SoundKeywordMappingItemSetterTranslationCommon)((ISoundKeywordMappingItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SoundKeywordMappingItem.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISoundKeywordMappingItem lhs,
            ISoundKeywordMappingItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SoundKeywordMappingItemSetterTranslationCommon)((ISoundKeywordMappingItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SoundKeywordMappingItem DeepCopy(
            this ISoundKeywordMappingItemGetter item,
            SoundKeywordMappingItem.TranslationMask? copyMask = null)
        {
            return ((SoundKeywordMappingItemSetterTranslationCommon)((ISoundKeywordMappingItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SoundKeywordMappingItem DeepCopy(
            this ISoundKeywordMappingItemGetter item,
            out SoundKeywordMappingItem.ErrorMask errorMask,
            SoundKeywordMappingItem.TranslationMask? copyMask = null)
        {
            return ((SoundKeywordMappingItemSetterTranslationCommon)((ISoundKeywordMappingItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SoundKeywordMappingItem DeepCopy(
            this ISoundKeywordMappingItemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SoundKeywordMappingItemSetterTranslationCommon)((ISoundKeywordMappingItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISoundKeywordMappingItem item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((SoundKeywordMappingItemSetterCommon)((ISoundKeywordMappingItemGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum SoundKeywordMappingItem_FieldIndex
    {
        RSMC = 0,
        RSMH = 1,
    }
    #endregion

    #region Registration
    internal partial class SoundKeywordMappingItem_Registration : ILoquiRegistration
    {
        public static readonly SoundKeywordMappingItem_Registration Instance = new SoundKeywordMappingItem_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(SoundKeywordMappingItem.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SoundKeywordMappingItem.ErrorMask);

        public static readonly Type ClassType = typeof(SoundKeywordMappingItem);

        public static readonly Type GetterType = typeof(ISoundKeywordMappingItemGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISoundKeywordMappingItem);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.SoundKeywordMappingItem";

        public const string Name = "SoundKeywordMappingItem";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(
                RecordTypes.RSMC,
                RecordTypes.RSMH);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(SoundKeywordMappingItemBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class SoundKeywordMappingItemSetterCommon
    {
        public static readonly SoundKeywordMappingItemSetterCommon Instance = new SoundKeywordMappingItemSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISoundKeywordMappingItem item)
        {
            ClearPartial();
            item.RSMC = default;
            item.RSMH = null;
        }
        
        #region Mutagen
        public void RemapLinks(ISoundKeywordMappingItem obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.RSMH?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISoundKeywordMappingItem item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: SoundKeywordMappingItemBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class SoundKeywordMappingItemCommon
    {
        public static readonly SoundKeywordMappingItemCommon Instance = new SoundKeywordMappingItemCommon();

        public SoundKeywordMappingItem.Mask<bool> GetEqualsMask(
            ISoundKeywordMappingItemGetter item,
            ISoundKeywordMappingItemGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SoundKeywordMappingItem.Mask<bool>(false);
            ((SoundKeywordMappingItemCommon)((ISoundKeywordMappingItemGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISoundKeywordMappingItemGetter item,
            ISoundKeywordMappingItemGetter rhs,
            SoundKeywordMappingItem.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.RSMC = item.RSMC == rhs.RSMC;
            ret.RSMH = EqualsMaskHelper.EqualsHelper(
                item.RSMH,
                rhs.RSMH,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string Print(
            ISoundKeywordMappingItemGetter item,
            string? name = null,
            SoundKeywordMappingItem.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISoundKeywordMappingItemGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SoundKeywordMappingItem.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"SoundKeywordMappingItem =>");
            }
            else
            {
                sb.AppendLine($"{name} (SoundKeywordMappingItem) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISoundKeywordMappingItemGetter item,
            StructuredStringBuilder sb,
            SoundKeywordMappingItem.Mask<bool>? printMask = null)
        {
            if ((printMask?.RSMC ?? true)
                && item.RSMC is {} RSMCItem)
            {
                sb.AppendItem(RSMCItem, "RSMC");
            }
            if ((printMask?.RSMH?.Overall ?? true)
                && item.RSMH is {} RSMHItem)
            {
                RSMHItem?.Print(sb, "RSMH");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISoundKeywordMappingItemGetter? lhs,
            ISoundKeywordMappingItemGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)SoundKeywordMappingItem_FieldIndex.RSMC) ?? true))
            {
                if (lhs.RSMC != rhs.RSMC) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundKeywordMappingItem_FieldIndex.RSMH) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.RSMH, rhs.RSMH, out var lhsRSMH, out var rhsRSMH, out var isRSMHEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsRSMH).CommonInstance()!).Equals(lhsRSMH, rhsRSMH, equalsMask?.GetSubCrystal((int)SoundKeywordMappingItem_FieldIndex.RSMH))) return false;
                }
                else if (!isRSMHEqual) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ISoundKeywordMappingItemGetter item)
        {
            var hash = new HashCode();
            if (item.RSMC is {} RSMCitem)
            {
                hash.Add(RSMCitem);
            }
            if (item.RSMH is {} RSMHitem)
            {
                hash.Add(RSMHitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return SoundKeywordMappingItem.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISoundKeywordMappingItemGetter obj)
        {
            if (obj.RSMH is {} RSMHItems)
            {
                foreach (var item in RSMHItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class SoundKeywordMappingItemSetterTranslationCommon
    {
        public static readonly SoundKeywordMappingItemSetterTranslationCommon Instance = new SoundKeywordMappingItemSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISoundKeywordMappingItem item,
            ISoundKeywordMappingItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)SoundKeywordMappingItem_FieldIndex.RSMC) ?? true))
            {
                item.RSMC = rhs.RSMC;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundKeywordMappingItem_FieldIndex.RSMH) ?? true))
            {
                errorMask?.PushIndex((int)SoundKeywordMappingItem_FieldIndex.RSMH);
                try
                {
                    if(rhs.RSMH is {} rhsRSMH)
                    {
                        item.RSMH = rhsRSMH.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)SoundKeywordMappingItem_FieldIndex.RSMH));
                    }
                    else
                    {
                        item.RSMH = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public SoundKeywordMappingItem DeepCopy(
            ISoundKeywordMappingItemGetter item,
            SoundKeywordMappingItem.TranslationMask? copyMask = null)
        {
            SoundKeywordMappingItem ret = (SoundKeywordMappingItem)((SoundKeywordMappingItemCommon)((ISoundKeywordMappingItemGetter)item).CommonInstance()!).GetNew();
            ((SoundKeywordMappingItemSetterTranslationCommon)((ISoundKeywordMappingItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SoundKeywordMappingItem DeepCopy(
            ISoundKeywordMappingItemGetter item,
            out SoundKeywordMappingItem.ErrorMask errorMask,
            SoundKeywordMappingItem.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SoundKeywordMappingItem ret = (SoundKeywordMappingItem)((SoundKeywordMappingItemCommon)((ISoundKeywordMappingItemGetter)item).CommonInstance()!).GetNew();
            ((SoundKeywordMappingItemSetterTranslationCommon)((ISoundKeywordMappingItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SoundKeywordMappingItem.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SoundKeywordMappingItem DeepCopy(
            ISoundKeywordMappingItemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SoundKeywordMappingItem ret = (SoundKeywordMappingItem)((SoundKeywordMappingItemCommon)((ISoundKeywordMappingItemGetter)item).CommonInstance()!).GetNew();
            ((SoundKeywordMappingItemSetterTranslationCommon)((ISoundKeywordMappingItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class SoundKeywordMappingItem
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundKeywordMappingItem_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => SoundKeywordMappingItem_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SoundKeywordMappingItemCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return SoundKeywordMappingItemSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SoundKeywordMappingItemSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISoundKeywordMappingItemGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ISoundKeywordMappingItemGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ISoundKeywordMappingItemGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class SoundKeywordMappingItemBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly SoundKeywordMappingItemBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ISoundKeywordMappingItemGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.RSMC,
                header: translationParams.ConvertToCustom(RecordTypes.RSMC));
            if (item.RSMH is {} RSMHItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.RSMH))
                {
                    ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)RSMHItem).BinaryWriteTranslator).Write(
                        item: RSMHItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            ISoundKeywordMappingItemGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ISoundKeywordMappingItemGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class SoundKeywordMappingItemBinaryCreateTranslation
    {
        public static readonly SoundKeywordMappingItemBinaryCreateTranslation Instance = new SoundKeywordMappingItemBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            ISoundKeywordMappingItem item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.RSMC:
                {
                    if (lastParsed.ShortCircuit((int)SoundKeywordMappingItem_FieldIndex.RSMC, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RSMC = frame.ReadUInt32();
                    return (int)SoundKeywordMappingItem_FieldIndex.RSMC;
                }
                case RecordTypeInts.RSMH:
                {
                    if (lastParsed.ShortCircuit((int)SoundKeywordMappingItem_FieldIndex.RSMH, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.RSMH = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
                    return (int)SoundKeywordMappingItem_FieldIndex.RSMH;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class SoundKeywordMappingItemBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ISoundKeywordMappingItemGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SoundKeywordMappingItemBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class SoundKeywordMappingItemBinaryOverlay :
        PluginBinaryOverlay,
        ISoundKeywordMappingItemGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundKeywordMappingItem_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => SoundKeywordMappingItem_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SoundKeywordMappingItemCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SoundKeywordMappingItemSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISoundKeywordMappingItemGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ISoundKeywordMappingItemGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ISoundKeywordMappingItemGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SoundKeywordMappingItemCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => SoundKeywordMappingItemBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SoundKeywordMappingItemBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region RSMC
        private int? _RSMCLocation;
        public UInt32? RSMC => _RSMCLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _RSMCLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        public ISoundReferenceGetter? RSMH { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SoundKeywordMappingItemBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ISoundKeywordMappingItemGetter SoundKeywordMappingItemFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new SoundKeywordMappingItemBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ISoundKeywordMappingItemGetter SoundKeywordMappingItemFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return SoundKeywordMappingItemFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.RSMC:
                {
                    if (lastParsed.ShortCircuit((int)SoundKeywordMappingItem_FieldIndex.RSMC, translationParams)) return ParseResult.Stop;
                    _RSMCLocation = (stream.Position - offset);
                    return (int)SoundKeywordMappingItem_FieldIndex.RSMC;
                }
                case RecordTypeInts.RSMH:
                {
                    if (lastParsed.ShortCircuit((int)SoundKeywordMappingItem_FieldIndex.RSMH, translationParams)) return ParseResult.Stop;
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.RSMH = SoundReferenceBinaryOverlay.SoundReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)SoundKeywordMappingItem_FieldIndex.RSMH;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SoundKeywordMappingItemMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISoundKeywordMappingItemGetter rhs) return false;
            return ((SoundKeywordMappingItemCommon)((ISoundKeywordMappingItemGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISoundKeywordMappingItemGetter? obj)
        {
            return ((SoundKeywordMappingItemCommon)((ISoundKeywordMappingItemGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SoundKeywordMappingItemCommon)((ISoundKeywordMappingItemGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

