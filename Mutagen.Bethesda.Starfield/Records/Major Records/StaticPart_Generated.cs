/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class StaticPart :
        IEquatable<IStaticPartGetter>,
        ILoquiObjectSetter<StaticPart>,
        IStaticPart
    {
        #region Ctor
        public StaticPart()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Static
        private readonly IFormLink<IStaticTargetGetter> _Static = new FormLink<IStaticTargetGetter>();
        public IFormLink<IStaticTargetGetter> Static
        {
            get => _Static;
            set => _Static.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IStaticTargetGetter> IStaticPartGetter.Static => this.Static;
        #endregion
        #region Unknown
        public Int32 Unknown { get; set; } = default(Int32);
        #endregion
        #region Placements
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<StaticPlacement>? _Placements;
        public ExtendedList<StaticPlacement>? Placements
        {
            get => this._Placements;
            set => this._Placements = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IStaticPlacementGetter>? IStaticPartGetter.Placements => _Placements;
        #endregion

        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            StaticPartMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IStaticPartGetter rhs) return false;
            return ((StaticPartCommon)((IStaticPartGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IStaticPartGetter? obj)
        {
            return ((StaticPartCommon)((IStaticPartGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((StaticPartCommon)((IStaticPartGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Static = initialValue;
                this.Unknown = initialValue;
                this.Placements = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, StaticPlacement.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, StaticPlacement.Mask<TItem>?>>());
            }

            public Mask(
                TItem Static,
                TItem Unknown,
                TItem Placements)
            {
                this.Static = Static;
                this.Unknown = Unknown;
                this.Placements = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, StaticPlacement.Mask<TItem>?>>?>(Placements, Enumerable.Empty<MaskItemIndexed<TItem, StaticPlacement.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Static;
            public TItem Unknown;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, StaticPlacement.Mask<TItem>?>>?>? Placements;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Static, rhs.Static)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Placements, rhs.Placements)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Static);
                hash.Add(this.Unknown);
                hash.Add(this.Placements);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Static)) return false;
                if (!eval(this.Unknown)) return false;
                if (this.Placements != null)
                {
                    if (!eval(this.Placements.Overall)) return false;
                    if (this.Placements.Specific != null)
                    {
                        foreach (var item in this.Placements.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Static)) return true;
                if (eval(this.Unknown)) return true;
                if (this.Placements != null)
                {
                    if (eval(this.Placements.Overall)) return true;
                    if (this.Placements.Specific != null)
                    {
                        foreach (var item in this.Placements.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new StaticPart.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Static = eval(this.Static);
                obj.Unknown = eval(this.Unknown);
                if (Placements != null)
                {
                    obj.Placements = new MaskItem<R, IEnumerable<MaskItemIndexed<R, StaticPlacement.Mask<R>?>>?>(eval(this.Placements.Overall), Enumerable.Empty<MaskItemIndexed<R, StaticPlacement.Mask<R>?>>());
                    if (Placements.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, StaticPlacement.Mask<R>?>>();
                        obj.Placements.Specific = l;
                        foreach (var item in Placements.Specific)
                        {
                            MaskItemIndexed<R, StaticPlacement.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, StaticPlacement.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(StaticPart.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, StaticPart.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(StaticPart.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Static ?? true)
                    {
                        sb.AppendItem(Static, "Static");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if ((printMask?.Placements?.Overall ?? true)
                        && Placements is {} PlacementsItem)
                    {
                        sb.AppendLine("Placements =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PlacementsItem.Overall);
                            if (PlacementsItem.Specific != null)
                            {
                                foreach (var subItem in PlacementsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Static;
            public Exception? Unknown;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, StaticPlacement.ErrorMask?>>?>? Placements;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                StaticPart_FieldIndex enu = (StaticPart_FieldIndex)index;
                switch (enu)
                {
                    case StaticPart_FieldIndex.Static:
                        return Static;
                    case StaticPart_FieldIndex.Unknown:
                        return Unknown;
                    case StaticPart_FieldIndex.Placements:
                        return Placements;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                StaticPart_FieldIndex enu = (StaticPart_FieldIndex)index;
                switch (enu)
                {
                    case StaticPart_FieldIndex.Static:
                        this.Static = ex;
                        break;
                    case StaticPart_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case StaticPart_FieldIndex.Placements:
                        this.Placements = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, StaticPlacement.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                StaticPart_FieldIndex enu = (StaticPart_FieldIndex)index;
                switch (enu)
                {
                    case StaticPart_FieldIndex.Static:
                        this.Static = (Exception?)obj;
                        break;
                    case StaticPart_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case StaticPart_FieldIndex.Placements:
                        this.Placements = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, StaticPlacement.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Static != null) return true;
                if (Unknown != null) return true;
                if (Placements != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Static, "Static");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                if (Placements is {} PlacementsItem)
                {
                    sb.AppendLine("Placements =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PlacementsItem.Overall);
                        if (PlacementsItem.Specific != null)
                        {
                            foreach (var subItem in PlacementsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Static = this.Static.Combine(rhs.Static);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Placements = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, StaticPlacement.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Placements?.Overall, rhs.Placements?.Overall), Noggog.ExceptionExt.Combine(this.Placements?.Specific, rhs.Placements?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Static;
            public bool Unknown;
            public StaticPlacement.TranslationMask? Placements;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Static = defaultOn;
                this.Unknown = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Static, null));
                ret.Add((Unknown, null));
                ret.Add((Placements == null ? DefaultOn : !Placements.GetCrystal().CopyNothing, Placements?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => StaticPartCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => StaticPartSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => StaticPartBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((StaticPartBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static StaticPart CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new StaticPart();
            ((StaticPartSetterCommon)((IStaticPartGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out StaticPart item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((StaticPartSetterCommon)((IStaticPartGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static StaticPart GetNew()
        {
            return new StaticPart();
        }

    }
    #endregion

    #region Interface
    public partial interface IStaticPart :
        IFormLinkContainer,
        ILoquiObjectSetter<IStaticPart>,
        IStaticPartGetter
    {
        new IFormLink<IStaticTargetGetter> Static { get; set; }
        new Int32 Unknown { get; set; }
        new ExtendedList<StaticPlacement>? Placements { get; set; }
    }

    public partial interface IStaticPartGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IStaticPartGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => StaticPart_Registration.Instance;
        IFormLinkGetter<IStaticTargetGetter> Static { get; }
        Int32 Unknown { get; }
        IReadOnlyList<IStaticPlacementGetter>? Placements { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class StaticPartMixIn
    {
        public static void Clear(this IStaticPart item)
        {
            ((StaticPartSetterCommon)((IStaticPartGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static StaticPart.Mask<bool> GetEqualsMask(
            this IStaticPartGetter item,
            IStaticPartGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((StaticPartCommon)((IStaticPartGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IStaticPartGetter item,
            string? name = null,
            StaticPart.Mask<bool>? printMask = null)
        {
            return ((StaticPartCommon)((IStaticPartGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IStaticPartGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            StaticPart.Mask<bool>? printMask = null)
        {
            ((StaticPartCommon)((IStaticPartGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IStaticPartGetter item,
            IStaticPartGetter rhs,
            StaticPart.TranslationMask? equalsMask = null)
        {
            return ((StaticPartCommon)((IStaticPartGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IStaticPart lhs,
            IStaticPartGetter rhs)
        {
            ((StaticPartSetterTranslationCommon)((IStaticPartGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IStaticPart lhs,
            IStaticPartGetter rhs,
            StaticPart.TranslationMask? copyMask = null)
        {
            ((StaticPartSetterTranslationCommon)((IStaticPartGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IStaticPart lhs,
            IStaticPartGetter rhs,
            out StaticPart.ErrorMask errorMask,
            StaticPart.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((StaticPartSetterTranslationCommon)((IStaticPartGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = StaticPart.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IStaticPart lhs,
            IStaticPartGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((StaticPartSetterTranslationCommon)((IStaticPartGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static StaticPart DeepCopy(
            this IStaticPartGetter item,
            StaticPart.TranslationMask? copyMask = null)
        {
            return ((StaticPartSetterTranslationCommon)((IStaticPartGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static StaticPart DeepCopy(
            this IStaticPartGetter item,
            out StaticPart.ErrorMask errorMask,
            StaticPart.TranslationMask? copyMask = null)
        {
            return ((StaticPartSetterTranslationCommon)((IStaticPartGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static StaticPart DeepCopy(
            this IStaticPartGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((StaticPartSetterTranslationCommon)((IStaticPartGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IStaticPart item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((StaticPartSetterCommon)((IStaticPartGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum StaticPart_FieldIndex
    {
        Static = 0,
        Unknown = 1,
        Placements = 2,
    }
    #endregion

    #region Registration
    internal partial class StaticPart_Registration : ILoquiRegistration
    {
        public static readonly StaticPart_Registration Instance = new StaticPart_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(StaticPart.Mask<>);

        public static readonly Type ErrorMaskType = typeof(StaticPart.ErrorMask);

        public static readonly Type ClassType = typeof(StaticPart);

        public static readonly Type GetterType = typeof(IStaticPartGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IStaticPart);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.StaticPart";

        public const string Name = "StaticPart";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ONAM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.ONAM);
            var all = RecordCollection.Factory(
                RecordTypes.ONAM,
                RecordTypes.DATA);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(StaticPartBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class StaticPartSetterCommon
    {
        public static readonly StaticPartSetterCommon Instance = new StaticPartSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IStaticPart item)
        {
            ClearPartial();
            item.Static.Clear();
            item.Unknown = default(Int32);
            item.Placements = null;
        }
        
        #region Mutagen
        public void RemapLinks(IStaticPart obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Static.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IStaticPart item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: StaticPartBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class StaticPartCommon
    {
        public static readonly StaticPartCommon Instance = new StaticPartCommon();

        public StaticPart.Mask<bool> GetEqualsMask(
            IStaticPartGetter item,
            IStaticPartGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new StaticPart.Mask<bool>(false);
            ((StaticPartCommon)((IStaticPartGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IStaticPartGetter item,
            IStaticPartGetter rhs,
            StaticPart.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Static = item.Static.Equals(rhs.Static);
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.Placements = item.Placements.CollectionEqualsHelper(
                rhs.Placements,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string Print(
            IStaticPartGetter item,
            string? name = null,
            StaticPart.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IStaticPartGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            StaticPart.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"StaticPart =>");
            }
            else
            {
                sb.AppendLine($"{name} (StaticPart) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IStaticPartGetter item,
            StructuredStringBuilder sb,
            StaticPart.Mask<bool>? printMask = null)
        {
            if (printMask?.Static ?? true)
            {
                sb.AppendItem(item.Static.FormKey, "Static");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
            if ((printMask?.Placements?.Overall ?? true)
                && item.Placements is {} PlacementsItem)
            {
                sb.AppendLine("Placements =>");
                using (sb.Brace())
                {
                    foreach (var subItem in PlacementsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IStaticPartGetter? lhs,
            IStaticPartGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)StaticPart_FieldIndex.Static) ?? true))
            {
                if (!lhs.Static.Equals(rhs.Static)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StaticPart_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StaticPart_FieldIndex.Placements) ?? true))
            {
                if (!lhs.Placements.SequenceEqualNullable(rhs.Placements, (l, r) => ((StaticPlacementCommon)((IStaticPlacementGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)StaticPart_FieldIndex.Placements)))) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IStaticPartGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Static);
            hash.Add(item.Unknown);
            hash.Add(item.Placements);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return StaticPart.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IStaticPartGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.Static);
            yield break;
        }
        
        #endregion
        
    }
    internal partial class StaticPartSetterTranslationCommon
    {
        public static readonly StaticPartSetterTranslationCommon Instance = new StaticPartSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IStaticPart item,
            IStaticPartGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)StaticPart_FieldIndex.Static) ?? true))
            {
                item.Static.SetTo(rhs.Static.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)StaticPart_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)StaticPart_FieldIndex.Placements) ?? true))
            {
                errorMask?.PushIndex((int)StaticPart_FieldIndex.Placements);
                try
                {
                    if ((rhs.Placements != null))
                    {
                        item.Placements = 
                            rhs.Placements
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<StaticPlacement>();
                    }
                    else
                    {
                        item.Placements = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public StaticPart DeepCopy(
            IStaticPartGetter item,
            StaticPart.TranslationMask? copyMask = null)
        {
            StaticPart ret = (StaticPart)((StaticPartCommon)((IStaticPartGetter)item).CommonInstance()!).GetNew();
            ((StaticPartSetterTranslationCommon)((IStaticPartGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public StaticPart DeepCopy(
            IStaticPartGetter item,
            out StaticPart.ErrorMask errorMask,
            StaticPart.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            StaticPart ret = (StaticPart)((StaticPartCommon)((IStaticPartGetter)item).CommonInstance()!).GetNew();
            ((StaticPartSetterTranslationCommon)((IStaticPartGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = StaticPart.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public StaticPart DeepCopy(
            IStaticPartGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            StaticPart ret = (StaticPart)((StaticPartCommon)((IStaticPartGetter)item).CommonInstance()!).GetNew();
            ((StaticPartSetterTranslationCommon)((IStaticPartGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class StaticPart
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => StaticPart_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => StaticPart_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => StaticPartCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return StaticPartSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => StaticPartSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IStaticPartGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IStaticPartGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IStaticPartGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class StaticPartBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly StaticPartBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IStaticPartGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.ONAM)))
            {
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Static);
                writer.Write(item.Unknown);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IStaticPlacementGetter>.Instance.Write(
                writer: writer,
                items: item.Placements,
                recordType: translationParams.ConvertToCustom(RecordTypes.DATA),
                transl: (MutagenWriter subWriter, IStaticPlacementGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((StaticPlacementBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IStaticPartGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IStaticPartGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class StaticPartBinaryCreateTranslation
    {
        public static readonly StaticPartBinaryCreateTranslation Instance = new StaticPartBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IStaticPart item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.ONAM:
                {
                    if (lastParsed.ShortCircuit((int)StaticPart_FieldIndex.Unknown, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.Static.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.Unknown = dataFrame.ReadInt32();
                    return (int)StaticPart_FieldIndex.Unknown;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Placements = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<StaticPlacement>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: StaticPlacement.TryCreateFromBinary)
                        .CastExtendedList<StaticPlacement>();
                    return (int)StaticPart_FieldIndex.Placements;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class StaticPartBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IStaticPartGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((StaticPartBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class StaticPartBinaryOverlay :
        PluginBinaryOverlay,
        IStaticPartGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => StaticPart_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => StaticPart_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => StaticPartCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => StaticPartSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IStaticPartGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IStaticPartGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IStaticPartGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => StaticPartCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => StaticPartBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((StaticPartBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        private RangeInt32? _ONAMLocation;
        #region Static
        private int _StaticLocation => _ONAMLocation!.Value.Min;
        private bool _Static_IsSet => _ONAMLocation.HasValue;
        public IFormLinkGetter<IStaticTargetGetter> Static => _Static_IsSet ? new FormLink<IStaticTargetGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Span.Slice(_StaticLocation, 0x4)))) : FormLink<IStaticTargetGetter>.Null;
        #endregion
        #region Unknown
        private int _UnknownLocation => _ONAMLocation!.Value.Min + 0x4;
        private bool _Unknown_IsSet => _ONAMLocation.HasValue;
        public Int32 Unknown => _Unknown_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_recordData.Slice(_UnknownLocation, 4)) : default(Int32);
        #endregion
        public IReadOnlyList<IStaticPlacementGetter>? Placements { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected StaticPartBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IStaticPartGetter StaticPartFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new StaticPartBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IStaticPartGetter StaticPartFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return StaticPartFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.ONAM:
                {
                    if (lastParsed.ShortCircuit((int)StaticPart_FieldIndex.Unknown, translationParams)) return ParseResult.Stop;
                    _ONAMLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)StaticPart_FieldIndex.Unknown;
                }
                case RecordTypeInts.DATA:
                {
                    var subMeta = stream.ReadSubrecordHeader();
                    var subLen = finalPos - stream.Position;
                    this.Placements = BinaryOverlayList.FactoryByStartIndex<IStaticPlacementGetter>(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 28,
                        getter: (s, p) => StaticPlacementBinaryOverlay.StaticPlacementFactory(s, p));
                    stream.Position += subLen;
                    return (int)StaticPart_FieldIndex.Placements;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            StaticPartMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IStaticPartGetter rhs) return false;
            return ((StaticPartCommon)((IStaticPartGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IStaticPartGetter? obj)
        {
            return ((StaticPartCommon)((IStaticPartGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((StaticPartCommon)((IStaticPartGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

