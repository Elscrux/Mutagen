/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class ObjectModInclude :
        IEquatable<IObjectModIncludeGetter>,
        ILoquiObjectSetter<ObjectModInclude>,
        IObjectModInclude
    {
        #region Ctor
        public ObjectModInclude()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Mod
        private readonly IFormLink<IAObjectModificationGetter> _Mod = new FormLink<IAObjectModificationGetter>();
        public IFormLink<IAObjectModificationGetter> Mod
        {
            get => _Mod;
            set => _Mod.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IAObjectModificationGetter> IObjectModIncludeGetter.Mod => this.Mod;
        #endregion
        #region MinimumLevel
        public Byte MinimumLevel { get; set; } = default(Byte);
        #endregion
        #region Optional
        public Boolean Optional { get; set; } = default(Boolean);
        #endregion
        #region DoNotUseAll
        public Boolean DoNotUseAll { get; set; } = default(Boolean);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ObjectModIncludeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IObjectModIncludeGetter rhs) return false;
            return ((ObjectModIncludeCommon)((IObjectModIncludeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IObjectModIncludeGetter? obj)
        {
            return ((ObjectModIncludeCommon)((IObjectModIncludeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ObjectModIncludeCommon)((IObjectModIncludeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Mod = initialValue;
                this.MinimumLevel = initialValue;
                this.Optional = initialValue;
                this.DoNotUseAll = initialValue;
            }

            public Mask(
                TItem Mod,
                TItem MinimumLevel,
                TItem Optional,
                TItem DoNotUseAll)
            {
                this.Mod = Mod;
                this.MinimumLevel = MinimumLevel;
                this.Optional = Optional;
                this.DoNotUseAll = DoNotUseAll;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Mod;
            public TItem MinimumLevel;
            public TItem Optional;
            public TItem DoNotUseAll;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Mod, rhs.Mod)) return false;
                if (!object.Equals(this.MinimumLevel, rhs.MinimumLevel)) return false;
                if (!object.Equals(this.Optional, rhs.Optional)) return false;
                if (!object.Equals(this.DoNotUseAll, rhs.DoNotUseAll)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Mod);
                hash.Add(this.MinimumLevel);
                hash.Add(this.Optional);
                hash.Add(this.DoNotUseAll);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Mod)) return false;
                if (!eval(this.MinimumLevel)) return false;
                if (!eval(this.Optional)) return false;
                if (!eval(this.DoNotUseAll)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Mod)) return true;
                if (eval(this.MinimumLevel)) return true;
                if (eval(this.Optional)) return true;
                if (eval(this.DoNotUseAll)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ObjectModInclude.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Mod = eval(this.Mod);
                obj.MinimumLevel = eval(this.MinimumLevel);
                obj.Optional = eval(this.Optional);
                obj.DoNotUseAll = eval(this.DoNotUseAll);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(ObjectModInclude.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, ObjectModInclude.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(ObjectModInclude.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Mod ?? true)
                    {
                        sb.AppendItem(Mod, "Mod");
                    }
                    if (printMask?.MinimumLevel ?? true)
                    {
                        sb.AppendItem(MinimumLevel, "MinimumLevel");
                    }
                    if (printMask?.Optional ?? true)
                    {
                        sb.AppendItem(Optional, "Optional");
                    }
                    if (printMask?.DoNotUseAll ?? true)
                    {
                        sb.AppendItem(DoNotUseAll, "DoNotUseAll");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Mod;
            public Exception? MinimumLevel;
            public Exception? Optional;
            public Exception? DoNotUseAll;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ObjectModInclude_FieldIndex enu = (ObjectModInclude_FieldIndex)index;
                switch (enu)
                {
                    case ObjectModInclude_FieldIndex.Mod:
                        return Mod;
                    case ObjectModInclude_FieldIndex.MinimumLevel:
                        return MinimumLevel;
                    case ObjectModInclude_FieldIndex.Optional:
                        return Optional;
                    case ObjectModInclude_FieldIndex.DoNotUseAll:
                        return DoNotUseAll;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                ObjectModInclude_FieldIndex enu = (ObjectModInclude_FieldIndex)index;
                switch (enu)
                {
                    case ObjectModInclude_FieldIndex.Mod:
                        this.Mod = ex;
                        break;
                    case ObjectModInclude_FieldIndex.MinimumLevel:
                        this.MinimumLevel = ex;
                        break;
                    case ObjectModInclude_FieldIndex.Optional:
                        this.Optional = ex;
                        break;
                    case ObjectModInclude_FieldIndex.DoNotUseAll:
                        this.DoNotUseAll = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                ObjectModInclude_FieldIndex enu = (ObjectModInclude_FieldIndex)index;
                switch (enu)
                {
                    case ObjectModInclude_FieldIndex.Mod:
                        this.Mod = (Exception?)obj;
                        break;
                    case ObjectModInclude_FieldIndex.MinimumLevel:
                        this.MinimumLevel = (Exception?)obj;
                        break;
                    case ObjectModInclude_FieldIndex.Optional:
                        this.Optional = (Exception?)obj;
                        break;
                    case ObjectModInclude_FieldIndex.DoNotUseAll:
                        this.DoNotUseAll = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Mod != null) return true;
                if (MinimumLevel != null) return true;
                if (Optional != null) return true;
                if (DoNotUseAll != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Mod, "Mod");
                }
                {
                    sb.AppendItem(MinimumLevel, "MinimumLevel");
                }
                {
                    sb.AppendItem(Optional, "Optional");
                }
                {
                    sb.AppendItem(DoNotUseAll, "DoNotUseAll");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Mod = this.Mod.Combine(rhs.Mod);
                ret.MinimumLevel = this.MinimumLevel.Combine(rhs.MinimumLevel);
                ret.Optional = this.Optional.Combine(rhs.Optional);
                ret.DoNotUseAll = this.DoNotUseAll.Combine(rhs.DoNotUseAll);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Mod;
            public bool MinimumLevel;
            public bool Optional;
            public bool DoNotUseAll;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Mod = defaultOn;
                this.MinimumLevel = defaultOn;
                this.Optional = defaultOn;
                this.DoNotUseAll = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Mod, null));
                ret.Add((MinimumLevel, null));
                ret.Add((Optional, null));
                ret.Add((DoNotUseAll, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ObjectModIncludeCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ObjectModIncludeSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ObjectModIncludeBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ObjectModIncludeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static ObjectModInclude CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new ObjectModInclude();
            ((ObjectModIncludeSetterCommon)((IObjectModIncludeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ObjectModInclude item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ObjectModIncludeSetterCommon)((IObjectModIncludeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ObjectModInclude GetNew()
        {
            return new ObjectModInclude();
        }

    }
    #endregion

    #region Interface
    public partial interface IObjectModInclude :
        IFormLinkContainer,
        ILoquiObjectSetter<IObjectModInclude>,
        IObjectModIncludeGetter
    {
        new IFormLink<IAObjectModificationGetter> Mod { get; set; }
        new Byte MinimumLevel { get; set; }
        new Boolean Optional { get; set; }
        new Boolean DoNotUseAll { get; set; }
    }

    public partial interface IObjectModIncludeGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IObjectModIncludeGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => ObjectModInclude_Registration.Instance;
        IFormLinkGetter<IAObjectModificationGetter> Mod { get; }
        Byte MinimumLevel { get; }
        Boolean Optional { get; }
        Boolean DoNotUseAll { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ObjectModIncludeMixIn
    {
        public static void Clear(this IObjectModInclude item)
        {
            ((ObjectModIncludeSetterCommon)((IObjectModIncludeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ObjectModInclude.Mask<bool> GetEqualsMask(
            this IObjectModIncludeGetter item,
            IObjectModIncludeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ObjectModIncludeCommon)((IObjectModIncludeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IObjectModIncludeGetter item,
            string? name = null,
            ObjectModInclude.Mask<bool>? printMask = null)
        {
            return ((ObjectModIncludeCommon)((IObjectModIncludeGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IObjectModIncludeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ObjectModInclude.Mask<bool>? printMask = null)
        {
            ((ObjectModIncludeCommon)((IObjectModIncludeGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IObjectModIncludeGetter item,
            IObjectModIncludeGetter rhs,
            ObjectModInclude.TranslationMask? equalsMask = null)
        {
            return ((ObjectModIncludeCommon)((IObjectModIncludeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IObjectModInclude lhs,
            IObjectModIncludeGetter rhs)
        {
            ((ObjectModIncludeSetterTranslationCommon)((IObjectModIncludeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IObjectModInclude lhs,
            IObjectModIncludeGetter rhs,
            ObjectModInclude.TranslationMask? copyMask = null)
        {
            ((ObjectModIncludeSetterTranslationCommon)((IObjectModIncludeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IObjectModInclude lhs,
            IObjectModIncludeGetter rhs,
            out ObjectModInclude.ErrorMask errorMask,
            ObjectModInclude.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ObjectModIncludeSetterTranslationCommon)((IObjectModIncludeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ObjectModInclude.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IObjectModInclude lhs,
            IObjectModIncludeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ObjectModIncludeSetterTranslationCommon)((IObjectModIncludeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ObjectModInclude DeepCopy(
            this IObjectModIncludeGetter item,
            ObjectModInclude.TranslationMask? copyMask = null)
        {
            return ((ObjectModIncludeSetterTranslationCommon)((IObjectModIncludeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ObjectModInclude DeepCopy(
            this IObjectModIncludeGetter item,
            out ObjectModInclude.ErrorMask errorMask,
            ObjectModInclude.TranslationMask? copyMask = null)
        {
            return ((ObjectModIncludeSetterTranslationCommon)((IObjectModIncludeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ObjectModInclude DeepCopy(
            this IObjectModIncludeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ObjectModIncludeSetterTranslationCommon)((IObjectModIncludeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IObjectModInclude item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ObjectModIncludeSetterCommon)((IObjectModIncludeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum ObjectModInclude_FieldIndex
    {
        Mod = 0,
        MinimumLevel = 1,
        Optional = 2,
        DoNotUseAll = 3,
    }
    #endregion

    #region Registration
    internal partial class ObjectModInclude_Registration : ILoquiRegistration
    {
        public static readonly ObjectModInclude_Registration Instance = new ObjectModInclude_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(ObjectModInclude.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ObjectModInclude.ErrorMask);

        public static readonly Type ClassType = typeof(ObjectModInclude);

        public static readonly Type GetterType = typeof(IObjectModIncludeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IObjectModInclude);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.ObjectModInclude";

        public const string Name = "ObjectModInclude";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(ObjectModIncludeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ObjectModIncludeSetterCommon
    {
        public static readonly ObjectModIncludeSetterCommon Instance = new ObjectModIncludeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IObjectModInclude item)
        {
            ClearPartial();
            item.Mod.Clear();
            item.MinimumLevel = default(Byte);
            item.Optional = default(Boolean);
            item.DoNotUseAll = default(Boolean);
        }
        
        #region Mutagen
        public void RemapLinks(IObjectModInclude obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Mod.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IObjectModInclude item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ObjectModIncludeBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class ObjectModIncludeCommon
    {
        public static readonly ObjectModIncludeCommon Instance = new ObjectModIncludeCommon();

        public ObjectModInclude.Mask<bool> GetEqualsMask(
            IObjectModIncludeGetter item,
            IObjectModIncludeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ObjectModInclude.Mask<bool>(false);
            ((ObjectModIncludeCommon)((IObjectModIncludeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IObjectModIncludeGetter item,
            IObjectModIncludeGetter rhs,
            ObjectModInclude.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Mod = item.Mod.Equals(rhs.Mod);
            ret.MinimumLevel = item.MinimumLevel == rhs.MinimumLevel;
            ret.Optional = item.Optional == rhs.Optional;
            ret.DoNotUseAll = item.DoNotUseAll == rhs.DoNotUseAll;
        }
        
        public string Print(
            IObjectModIncludeGetter item,
            string? name = null,
            ObjectModInclude.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IObjectModIncludeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ObjectModInclude.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"ObjectModInclude =>");
            }
            else
            {
                sb.AppendLine($"{name} (ObjectModInclude) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IObjectModIncludeGetter item,
            StructuredStringBuilder sb,
            ObjectModInclude.Mask<bool>? printMask = null)
        {
            if (printMask?.Mod ?? true)
            {
                sb.AppendItem(item.Mod.FormKey, "Mod");
            }
            if (printMask?.MinimumLevel ?? true)
            {
                sb.AppendItem(item.MinimumLevel, "MinimumLevel");
            }
            if (printMask?.Optional ?? true)
            {
                sb.AppendItem(item.Optional, "Optional");
            }
            if (printMask?.DoNotUseAll ?? true)
            {
                sb.AppendItem(item.DoNotUseAll, "DoNotUseAll");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IObjectModIncludeGetter? lhs,
            IObjectModIncludeGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)ObjectModInclude_FieldIndex.Mod) ?? true))
            {
                if (!lhs.Mod.Equals(rhs.Mod)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectModInclude_FieldIndex.MinimumLevel) ?? true))
            {
                if (lhs.MinimumLevel != rhs.MinimumLevel) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectModInclude_FieldIndex.Optional) ?? true))
            {
                if (lhs.Optional != rhs.Optional) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectModInclude_FieldIndex.DoNotUseAll) ?? true))
            {
                if (lhs.DoNotUseAll != rhs.DoNotUseAll) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IObjectModIncludeGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Mod);
            hash.Add(item.MinimumLevel);
            hash.Add(item.Optional);
            hash.Add(item.DoNotUseAll);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ObjectModInclude.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IObjectModIncludeGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.Mod);
            yield break;
        }
        
        #endregion
        
    }
    internal partial class ObjectModIncludeSetterTranslationCommon
    {
        public static readonly ObjectModIncludeSetterTranslationCommon Instance = new ObjectModIncludeSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IObjectModInclude item,
            IObjectModIncludeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)ObjectModInclude_FieldIndex.Mod) ?? true))
            {
                item.Mod.SetTo(rhs.Mod.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectModInclude_FieldIndex.MinimumLevel) ?? true))
            {
                item.MinimumLevel = rhs.MinimumLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectModInclude_FieldIndex.Optional) ?? true))
            {
                item.Optional = rhs.Optional;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectModInclude_FieldIndex.DoNotUseAll) ?? true))
            {
                item.DoNotUseAll = rhs.DoNotUseAll;
            }
        }
        
        #endregion
        
        public ObjectModInclude DeepCopy(
            IObjectModIncludeGetter item,
            ObjectModInclude.TranslationMask? copyMask = null)
        {
            ObjectModInclude ret = (ObjectModInclude)((ObjectModIncludeCommon)((IObjectModIncludeGetter)item).CommonInstance()!).GetNew();
            ((ObjectModIncludeSetterTranslationCommon)((IObjectModIncludeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ObjectModInclude DeepCopy(
            IObjectModIncludeGetter item,
            out ObjectModInclude.ErrorMask errorMask,
            ObjectModInclude.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ObjectModInclude ret = (ObjectModInclude)((ObjectModIncludeCommon)((IObjectModIncludeGetter)item).CommonInstance()!).GetNew();
            ((ObjectModIncludeSetterTranslationCommon)((IObjectModIncludeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ObjectModInclude.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ObjectModInclude DeepCopy(
            IObjectModIncludeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ObjectModInclude ret = (ObjectModInclude)((ObjectModIncludeCommon)((IObjectModIncludeGetter)item).CommonInstance()!).GetNew();
            ((ObjectModIncludeSetterTranslationCommon)((IObjectModIncludeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class ObjectModInclude
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ObjectModInclude_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => ObjectModInclude_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ObjectModIncludeCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ObjectModIncludeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ObjectModIncludeSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IObjectModIncludeGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IObjectModIncludeGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IObjectModIncludeGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class ObjectModIncludeBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly ObjectModIncludeBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IObjectModIncludeGetter item,
            MutagenWriter writer)
        {
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Mod);
            writer.Write(item.MinimumLevel);
            writer.Write(item.Optional);
            writer.Write(item.DoNotUseAll);
        }

        public void Write(
            MutagenWriter writer,
            IObjectModIncludeGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IObjectModIncludeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ObjectModIncludeBinaryCreateTranslation
    {
        public static readonly ObjectModIncludeBinaryCreateTranslation Instance = new ObjectModIncludeBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IObjectModInclude item,
            MutagenFrame frame)
        {
            item.Mod.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.MinimumLevel = frame.ReadUInt8();
            item.Optional = frame.ReadBoolean();
            item.DoNotUseAll = frame.ReadBoolean();
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class ObjectModIncludeBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IObjectModIncludeGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ObjectModIncludeBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class ObjectModIncludeBinaryOverlay :
        PluginBinaryOverlay,
        IObjectModIncludeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ObjectModInclude_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => ObjectModInclude_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ObjectModIncludeCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ObjectModIncludeSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IObjectModIncludeGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IObjectModIncludeGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IObjectModIncludeGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ObjectModIncludeCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ObjectModIncludeBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ObjectModIncludeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public IFormLinkGetter<IAObjectModificationGetter> Mod => FormLinkBinaryTranslation.Instance.OverlayFactory<IAObjectModificationGetter>(_package, _structData.Span.Slice(0x0, 0x4));
        public Byte MinimumLevel => _structData.Span[0x4];
        public Boolean Optional => _structData.Slice(0x5, 0x1)[0] >= 1;
        public Boolean DoNotUseAll => _structData.Slice(0x6, 0x1)[0] >= 1;
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ObjectModIncludeBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IObjectModIncludeGetter ObjectModIncludeFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x7,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new ObjectModIncludeBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x7;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IObjectModIncludeGetter ObjectModIncludeFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ObjectModIncludeFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ObjectModIncludeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IObjectModIncludeGetter rhs) return false;
            return ((ObjectModIncludeCommon)((IObjectModIncludeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IObjectModIncludeGetter? obj)
        {
            return ((ObjectModIncludeCommon)((IObjectModIncludeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ObjectModIncludeCommon)((IObjectModIncludeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

