/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class SnapLink :
        IEquatable<ISnapLinkGetter>,
        ILoquiObjectSetter<SnapLink>,
        ISnapLink
    {
        #region Ctor
        public SnapLink()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region LinkedReference
        private readonly IFormLink<IPlacedObjectGetter> _LinkedReference = new FormLink<IPlacedObjectGetter>();
        public IFormLink<IPlacedObjectGetter> LinkedReference
        {
            get => _LinkedReference;
            set => _LinkedReference.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IPlacedObjectGetter> ISnapLinkGetter.LinkedReference => this.LinkedReference;
        #endregion
        #region Links
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<SnapLinkItem> _Links = new ExtendedList<SnapLinkItem>();
        public ExtendedList<SnapLinkItem> Links
        {
            get => this._Links;
            init => this._Links = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ISnapLinkItemGetter> ISnapLinkGetter.Links => _Links;
        #endregion

        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SnapLinkMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISnapLinkGetter rhs) return false;
            return ((SnapLinkCommon)((ISnapLinkGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISnapLinkGetter? obj)
        {
            return ((SnapLinkCommon)((ISnapLinkGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SnapLinkCommon)((ISnapLinkGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.LinkedReference = initialValue;
                this.Links = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SnapLinkItem.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, SnapLinkItem.Mask<TItem>?>>());
            }

            public Mask(
                TItem LinkedReference,
                TItem Links)
            {
                this.LinkedReference = LinkedReference;
                this.Links = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SnapLinkItem.Mask<TItem>?>>?>(Links, Enumerable.Empty<MaskItemIndexed<TItem, SnapLinkItem.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem LinkedReference;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SnapLinkItem.Mask<TItem>?>>?>? Links;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.LinkedReference, rhs.LinkedReference)) return false;
                if (!object.Equals(this.Links, rhs.Links)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.LinkedReference);
                hash.Add(this.Links);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.LinkedReference)) return false;
                if (this.Links != null)
                {
                    if (!eval(this.Links.Overall)) return false;
                    if (this.Links.Specific != null)
                    {
                        foreach (var item in this.Links.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.LinkedReference)) return true;
                if (this.Links != null)
                {
                    if (eval(this.Links.Overall)) return true;
                    if (this.Links.Specific != null)
                    {
                        foreach (var item in this.Links.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SnapLink.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.LinkedReference = eval(this.LinkedReference);
                if (Links != null)
                {
                    obj.Links = new MaskItem<R, IEnumerable<MaskItemIndexed<R, SnapLinkItem.Mask<R>?>>?>(eval(this.Links.Overall), Enumerable.Empty<MaskItemIndexed<R, SnapLinkItem.Mask<R>?>>());
                    if (Links.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, SnapLinkItem.Mask<R>?>>();
                        obj.Links.Specific = l;
                        foreach (var item in Links.Specific)
                        {
                            MaskItemIndexed<R, SnapLinkItem.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, SnapLinkItem.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(SnapLink.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, SnapLink.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(SnapLink.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.LinkedReference ?? true)
                    {
                        sb.AppendItem(LinkedReference, "LinkedReference");
                    }
                    if ((printMask?.Links?.Overall ?? true)
                        && Links is {} LinksItem)
                    {
                        sb.AppendLine("Links =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(LinksItem.Overall);
                            if (LinksItem.Specific != null)
                            {
                                foreach (var subItem in LinksItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? LinkedReference;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SnapLinkItem.ErrorMask?>>?>? Links;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                SnapLink_FieldIndex enu = (SnapLink_FieldIndex)index;
                switch (enu)
                {
                    case SnapLink_FieldIndex.LinkedReference:
                        return LinkedReference;
                    case SnapLink_FieldIndex.Links:
                        return Links;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                SnapLink_FieldIndex enu = (SnapLink_FieldIndex)index;
                switch (enu)
                {
                    case SnapLink_FieldIndex.LinkedReference:
                        this.LinkedReference = ex;
                        break;
                    case SnapLink_FieldIndex.Links:
                        this.Links = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SnapLinkItem.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                SnapLink_FieldIndex enu = (SnapLink_FieldIndex)index;
                switch (enu)
                {
                    case SnapLink_FieldIndex.LinkedReference:
                        this.LinkedReference = (Exception?)obj;
                        break;
                    case SnapLink_FieldIndex.Links:
                        this.Links = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SnapLinkItem.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (LinkedReference != null) return true;
                if (Links != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(LinkedReference, "LinkedReference");
                }
                if (Links is {} LinksItem)
                {
                    sb.AppendLine("Links =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(LinksItem.Overall);
                        if (LinksItem.Specific != null)
                        {
                            foreach (var subItem in LinksItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.LinkedReference = this.LinkedReference.Combine(rhs.LinkedReference);
                ret.Links = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SnapLinkItem.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Links?.Overall, rhs.Links?.Overall), Noggog.ExceptionExt.Combine(this.Links?.Specific, rhs.Links?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool LinkedReference;
            public SnapLinkItem.TranslationMask? Links;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.LinkedReference = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((LinkedReference, null));
                ret.Add((Links == null ? DefaultOn : !Links.GetCrystal().CopyNothing, Links?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SnapLinkCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SnapLinkSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => SnapLinkBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SnapLinkBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static SnapLink CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new SnapLink();
            ((SnapLinkSetterCommon)((ISnapLinkGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SnapLink item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SnapLinkSetterCommon)((ISnapLinkGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static SnapLink GetNew()
        {
            return new SnapLink();
        }

    }
    #endregion

    #region Interface
    public partial interface ISnapLink :
        IFormLinkContainer,
        ILoquiObjectSetter<ISnapLink>,
        ISnapLinkGetter
    {
        new IFormLink<IPlacedObjectGetter> LinkedReference { get; set; }
        new ExtendedList<SnapLinkItem> Links { get; }
    }

    public partial interface ISnapLinkGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ISnapLinkGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => SnapLink_Registration.Instance;
        IFormLinkGetter<IPlacedObjectGetter> LinkedReference { get; }
        IReadOnlyList<ISnapLinkItemGetter> Links { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SnapLinkMixIn
    {
        public static void Clear(this ISnapLink item)
        {
            ((SnapLinkSetterCommon)((ISnapLinkGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SnapLink.Mask<bool> GetEqualsMask(
            this ISnapLinkGetter item,
            ISnapLinkGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SnapLinkCommon)((ISnapLinkGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ISnapLinkGetter item,
            string? name = null,
            SnapLink.Mask<bool>? printMask = null)
        {
            return ((SnapLinkCommon)((ISnapLinkGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ISnapLinkGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SnapLink.Mask<bool>? printMask = null)
        {
            ((SnapLinkCommon)((ISnapLinkGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISnapLinkGetter item,
            ISnapLinkGetter rhs,
            SnapLink.TranslationMask? equalsMask = null)
        {
            return ((SnapLinkCommon)((ISnapLinkGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISnapLink lhs,
            ISnapLinkGetter rhs)
        {
            ((SnapLinkSetterTranslationCommon)((ISnapLinkGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ISnapLink lhs,
            ISnapLinkGetter rhs,
            SnapLink.TranslationMask? copyMask = null)
        {
            ((SnapLinkSetterTranslationCommon)((ISnapLinkGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ISnapLink lhs,
            ISnapLinkGetter rhs,
            out SnapLink.ErrorMask errorMask,
            SnapLink.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SnapLinkSetterTranslationCommon)((ISnapLinkGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SnapLink.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISnapLink lhs,
            ISnapLinkGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SnapLinkSetterTranslationCommon)((ISnapLinkGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SnapLink DeepCopy(
            this ISnapLinkGetter item,
            SnapLink.TranslationMask? copyMask = null)
        {
            return ((SnapLinkSetterTranslationCommon)((ISnapLinkGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SnapLink DeepCopy(
            this ISnapLinkGetter item,
            out SnapLink.ErrorMask errorMask,
            SnapLink.TranslationMask? copyMask = null)
        {
            return ((SnapLinkSetterTranslationCommon)((ISnapLinkGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SnapLink DeepCopy(
            this ISnapLinkGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SnapLinkSetterTranslationCommon)((ISnapLinkGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISnapLink item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((SnapLinkSetterCommon)((ISnapLinkGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum SnapLink_FieldIndex
    {
        LinkedReference = 0,
        Links = 1,
    }
    #endregion

    #region Registration
    internal partial class SnapLink_Registration : ILoquiRegistration
    {
        public static readonly SnapLink_Registration Instance = new SnapLink_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(SnapLink.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SnapLink.ErrorMask);

        public static readonly Type ClassType = typeof(SnapLink);

        public static readonly Type GetterType = typeof(ISnapLinkGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISnapLink);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.SnapLink";

        public const string Name = "SnapLink";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(SnapLinkBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class SnapLinkSetterCommon
    {
        public static readonly SnapLinkSetterCommon Instance = new SnapLinkSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISnapLink item)
        {
            ClearPartial();
            item.LinkedReference.Clear();
            item.Links.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(ISnapLink obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.LinkedReference.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISnapLink item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: SnapLinkBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class SnapLinkCommon
    {
        public static readonly SnapLinkCommon Instance = new SnapLinkCommon();

        public SnapLink.Mask<bool> GetEqualsMask(
            ISnapLinkGetter item,
            ISnapLinkGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SnapLink.Mask<bool>(false);
            ((SnapLinkCommon)((ISnapLinkGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISnapLinkGetter item,
            ISnapLinkGetter rhs,
            SnapLink.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.LinkedReference = item.LinkedReference.Equals(rhs.LinkedReference);
            ret.Links = item.Links.CollectionEqualsHelper(
                rhs.Links,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string Print(
            ISnapLinkGetter item,
            string? name = null,
            SnapLink.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISnapLinkGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SnapLink.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"SnapLink =>");
            }
            else
            {
                sb.AppendLine($"{name} (SnapLink) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISnapLinkGetter item,
            StructuredStringBuilder sb,
            SnapLink.Mask<bool>? printMask = null)
        {
            if (printMask?.LinkedReference ?? true)
            {
                sb.AppendItem(item.LinkedReference.FormKey, "LinkedReference");
            }
            if (printMask?.Links?.Overall ?? true)
            {
                sb.AppendLine("Links =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Links)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISnapLinkGetter? lhs,
            ISnapLinkGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)SnapLink_FieldIndex.LinkedReference) ?? true))
            {
                if (!lhs.LinkedReference.Equals(rhs.LinkedReference)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SnapLink_FieldIndex.Links) ?? true))
            {
                if (!lhs.Links.SequenceEqual(rhs.Links, (l, r) => ((SnapLinkItemCommon)((ISnapLinkItemGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)SnapLink_FieldIndex.Links)))) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ISnapLinkGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.LinkedReference);
            hash.Add(item.Links);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return SnapLink.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISnapLinkGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.LinkedReference);
            yield break;
        }
        
        #endregion
        
    }
    internal partial class SnapLinkSetterTranslationCommon
    {
        public static readonly SnapLinkSetterTranslationCommon Instance = new SnapLinkSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISnapLink item,
            ISnapLinkGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)SnapLink_FieldIndex.LinkedReference) ?? true))
            {
                item.LinkedReference.SetTo(rhs.LinkedReference.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)SnapLink_FieldIndex.Links) ?? true))
            {
                errorMask?.PushIndex((int)SnapLink_FieldIndex.Links);
                try
                {
                    item.Links.SetTo(
                        rhs.Links
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public SnapLink DeepCopy(
            ISnapLinkGetter item,
            SnapLink.TranslationMask? copyMask = null)
        {
            SnapLink ret = (SnapLink)((SnapLinkCommon)((ISnapLinkGetter)item).CommonInstance()!).GetNew();
            ((SnapLinkSetterTranslationCommon)((ISnapLinkGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SnapLink DeepCopy(
            ISnapLinkGetter item,
            out SnapLink.ErrorMask errorMask,
            SnapLink.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SnapLink ret = (SnapLink)((SnapLinkCommon)((ISnapLinkGetter)item).CommonInstance()!).GetNew();
            ((SnapLinkSetterTranslationCommon)((ISnapLinkGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SnapLink.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SnapLink DeepCopy(
            ISnapLinkGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SnapLink ret = (SnapLink)((SnapLinkCommon)((ISnapLinkGetter)item).CommonInstance()!).GetNew();
            ((SnapLinkSetterTranslationCommon)((ISnapLinkGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class SnapLink
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SnapLink_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => SnapLink_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SnapLinkCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return SnapLinkSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SnapLinkSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISnapLinkGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ISnapLinkGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ISnapLinkGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class SnapLinkBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly SnapLinkBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ISnapLinkGetter item,
            MutagenWriter writer)
        {
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.LinkedReference);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ISnapLinkItemGetter>.Instance.Write(
                writer: writer,
                items: item.Links,
                transl: (MutagenWriter subWriter, ISnapLinkItemGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((SnapLinkItemBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            ISnapLinkGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ISnapLinkGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class SnapLinkBinaryCreateTranslation
    {
        public static readonly SnapLinkBinaryCreateTranslation Instance = new SnapLinkBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ISnapLink item,
            MutagenFrame frame)
        {
            item.LinkedReference.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.Links.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<SnapLinkItem>.Instance.Parse(
                    reader: frame,
                    transl: SnapLinkItem.TryCreateFromBinary));
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class SnapLinkBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ISnapLinkGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SnapLinkBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class SnapLinkBinaryOverlay :
        PluginBinaryOverlay,
        ISnapLinkGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SnapLink_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => SnapLink_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SnapLinkCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SnapLinkSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISnapLinkGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ISnapLinkGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ISnapLinkGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SnapLinkCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => SnapLinkBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SnapLinkBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public IFormLinkGetter<IPlacedObjectGetter> LinkedReference => new FormLink<IPlacedObjectGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_structData.Span.Slice(0x0, 0x4))));
        #region Links
        public IReadOnlyList<ISnapLinkItemGetter> Links => BinaryOverlayList.FactoryByLazyParse<ISnapLinkItemGetter>(_structData.Slice(0x4), _package, (s, p) => SnapLinkItemBinaryOverlay.SnapLinkItemFactory(s, p));
        protected int LinksEndingPos;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SnapLinkBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static void SnapLinkParseEndingPositions(
            SnapLinkBinaryOverlay ret,
            BinaryOverlayFactoryPackage package)
        {
            ret.LinksEndingPos = ret._structData.Length;
        }

        public static ISnapLinkGetter SnapLinkFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new SnapLinkBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            SnapLinkParseEndingPositions(ret, package);
            stream.Position += ret.LinksEndingPos;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ISnapLinkGetter SnapLinkFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return SnapLinkFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SnapLinkMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISnapLinkGetter rhs) return false;
            return ((SnapLinkCommon)((ISnapLinkGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISnapLinkGetter? obj)
        {
            return ((SnapLinkCommon)((ISnapLinkGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SnapLinkCommon)((ISnapLinkGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

