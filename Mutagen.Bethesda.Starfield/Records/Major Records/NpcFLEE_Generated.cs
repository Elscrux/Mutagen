/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class NpcFLEE :
        IEquatable<INpcFLEEGetter>,
        ILoquiObjectSetter<NpcFLEE>,
        INpcFLEE
    {
        #region Ctor
        public NpcFLEE()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region UnknownLink1
        private readonly IFormLink<IStarfieldMajorRecordGetter> _UnknownLink1 = new FormLink<IStarfieldMajorRecordGetter>();
        public IFormLink<IStarfieldMajorRecordGetter> UnknownLink1
        {
            get => _UnknownLink1;
            set => _UnknownLink1.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IStarfieldMajorRecordGetter> INpcFLEEGetter.UnknownLink1 => this.UnknownLink1;
        #endregion
        #region UnknownLink2
        private readonly IFormLink<IStarfieldMajorRecordGetter> _UnknownLink2 = new FormLink<IStarfieldMajorRecordGetter>();
        public IFormLink<IStarfieldMajorRecordGetter> UnknownLink2
        {
            get => _UnknownLink2;
            set => _UnknownLink2.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IStarfieldMajorRecordGetter> INpcFLEEGetter.UnknownLink2 => this.UnknownLink2;
        #endregion
        #region UnknownLink3
        private readonly IFormLink<IStarfieldMajorRecordGetter> _UnknownLink3 = new FormLink<IStarfieldMajorRecordGetter>();
        public IFormLink<IStarfieldMajorRecordGetter> UnknownLink3
        {
            get => _UnknownLink3;
            set => _UnknownLink3.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IStarfieldMajorRecordGetter> INpcFLEEGetter.UnknownLink3 => this.UnknownLink3;
        #endregion
        #region UnknownFloat1
        public Single UnknownFloat1 { get; set; } = default(Single);
        #endregion
        #region UnknownFloat2
        public Single UnknownFloat2 { get; set; } = default(Single);
        #endregion
        #region UnknownInt
        public Int32 UnknownInt { get; set; } = default(Int32);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NpcFLEEMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INpcFLEEGetter rhs) return false;
            return ((NpcFLEECommon)((INpcFLEEGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INpcFLEEGetter? obj)
        {
            return ((NpcFLEECommon)((INpcFLEEGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NpcFLEECommon)((INpcFLEEGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.UnknownLink1 = initialValue;
                this.UnknownLink2 = initialValue;
                this.UnknownLink3 = initialValue;
                this.UnknownFloat1 = initialValue;
                this.UnknownFloat2 = initialValue;
                this.UnknownInt = initialValue;
            }

            public Mask(
                TItem UnknownLink1,
                TItem UnknownLink2,
                TItem UnknownLink3,
                TItem UnknownFloat1,
                TItem UnknownFloat2,
                TItem UnknownInt)
            {
                this.UnknownLink1 = UnknownLink1;
                this.UnknownLink2 = UnknownLink2;
                this.UnknownLink3 = UnknownLink3;
                this.UnknownFloat1 = UnknownFloat1;
                this.UnknownFloat2 = UnknownFloat2;
                this.UnknownInt = UnknownInt;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem UnknownLink1;
            public TItem UnknownLink2;
            public TItem UnknownLink3;
            public TItem UnknownFloat1;
            public TItem UnknownFloat2;
            public TItem UnknownInt;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.UnknownLink1, rhs.UnknownLink1)) return false;
                if (!object.Equals(this.UnknownLink2, rhs.UnknownLink2)) return false;
                if (!object.Equals(this.UnknownLink3, rhs.UnknownLink3)) return false;
                if (!object.Equals(this.UnknownFloat1, rhs.UnknownFloat1)) return false;
                if (!object.Equals(this.UnknownFloat2, rhs.UnknownFloat2)) return false;
                if (!object.Equals(this.UnknownInt, rhs.UnknownInt)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.UnknownLink1);
                hash.Add(this.UnknownLink2);
                hash.Add(this.UnknownLink3);
                hash.Add(this.UnknownFloat1);
                hash.Add(this.UnknownFloat2);
                hash.Add(this.UnknownInt);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.UnknownLink1)) return false;
                if (!eval(this.UnknownLink2)) return false;
                if (!eval(this.UnknownLink3)) return false;
                if (!eval(this.UnknownFloat1)) return false;
                if (!eval(this.UnknownFloat2)) return false;
                if (!eval(this.UnknownInt)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.UnknownLink1)) return true;
                if (eval(this.UnknownLink2)) return true;
                if (eval(this.UnknownLink3)) return true;
                if (eval(this.UnknownFloat1)) return true;
                if (eval(this.UnknownFloat2)) return true;
                if (eval(this.UnknownInt)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new NpcFLEE.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.UnknownLink1 = eval(this.UnknownLink1);
                obj.UnknownLink2 = eval(this.UnknownLink2);
                obj.UnknownLink3 = eval(this.UnknownLink3);
                obj.UnknownFloat1 = eval(this.UnknownFloat1);
                obj.UnknownFloat2 = eval(this.UnknownFloat2);
                obj.UnknownInt = eval(this.UnknownInt);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(NpcFLEE.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, NpcFLEE.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(NpcFLEE.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.UnknownLink1 ?? true)
                    {
                        sb.AppendItem(UnknownLink1, "UnknownLink1");
                    }
                    if (printMask?.UnknownLink2 ?? true)
                    {
                        sb.AppendItem(UnknownLink2, "UnknownLink2");
                    }
                    if (printMask?.UnknownLink3 ?? true)
                    {
                        sb.AppendItem(UnknownLink3, "UnknownLink3");
                    }
                    if (printMask?.UnknownFloat1 ?? true)
                    {
                        sb.AppendItem(UnknownFloat1, "UnknownFloat1");
                    }
                    if (printMask?.UnknownFloat2 ?? true)
                    {
                        sb.AppendItem(UnknownFloat2, "UnknownFloat2");
                    }
                    if (printMask?.UnknownInt ?? true)
                    {
                        sb.AppendItem(UnknownInt, "UnknownInt");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? UnknownLink1;
            public Exception? UnknownLink2;
            public Exception? UnknownLink3;
            public Exception? UnknownFloat1;
            public Exception? UnknownFloat2;
            public Exception? UnknownInt;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                NpcFLEE_FieldIndex enu = (NpcFLEE_FieldIndex)index;
                switch (enu)
                {
                    case NpcFLEE_FieldIndex.UnknownLink1:
                        return UnknownLink1;
                    case NpcFLEE_FieldIndex.UnknownLink2:
                        return UnknownLink2;
                    case NpcFLEE_FieldIndex.UnknownLink3:
                        return UnknownLink3;
                    case NpcFLEE_FieldIndex.UnknownFloat1:
                        return UnknownFloat1;
                    case NpcFLEE_FieldIndex.UnknownFloat2:
                        return UnknownFloat2;
                    case NpcFLEE_FieldIndex.UnknownInt:
                        return UnknownInt;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                NpcFLEE_FieldIndex enu = (NpcFLEE_FieldIndex)index;
                switch (enu)
                {
                    case NpcFLEE_FieldIndex.UnknownLink1:
                        this.UnknownLink1 = ex;
                        break;
                    case NpcFLEE_FieldIndex.UnknownLink2:
                        this.UnknownLink2 = ex;
                        break;
                    case NpcFLEE_FieldIndex.UnknownLink3:
                        this.UnknownLink3 = ex;
                        break;
                    case NpcFLEE_FieldIndex.UnknownFloat1:
                        this.UnknownFloat1 = ex;
                        break;
                    case NpcFLEE_FieldIndex.UnknownFloat2:
                        this.UnknownFloat2 = ex;
                        break;
                    case NpcFLEE_FieldIndex.UnknownInt:
                        this.UnknownInt = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                NpcFLEE_FieldIndex enu = (NpcFLEE_FieldIndex)index;
                switch (enu)
                {
                    case NpcFLEE_FieldIndex.UnknownLink1:
                        this.UnknownLink1 = (Exception?)obj;
                        break;
                    case NpcFLEE_FieldIndex.UnknownLink2:
                        this.UnknownLink2 = (Exception?)obj;
                        break;
                    case NpcFLEE_FieldIndex.UnknownLink3:
                        this.UnknownLink3 = (Exception?)obj;
                        break;
                    case NpcFLEE_FieldIndex.UnknownFloat1:
                        this.UnknownFloat1 = (Exception?)obj;
                        break;
                    case NpcFLEE_FieldIndex.UnknownFloat2:
                        this.UnknownFloat2 = (Exception?)obj;
                        break;
                    case NpcFLEE_FieldIndex.UnknownInt:
                        this.UnknownInt = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (UnknownLink1 != null) return true;
                if (UnknownLink2 != null) return true;
                if (UnknownLink3 != null) return true;
                if (UnknownFloat1 != null) return true;
                if (UnknownFloat2 != null) return true;
                if (UnknownInt != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(UnknownLink1, "UnknownLink1");
                }
                {
                    sb.AppendItem(UnknownLink2, "UnknownLink2");
                }
                {
                    sb.AppendItem(UnknownLink3, "UnknownLink3");
                }
                {
                    sb.AppendItem(UnknownFloat1, "UnknownFloat1");
                }
                {
                    sb.AppendItem(UnknownFloat2, "UnknownFloat2");
                }
                {
                    sb.AppendItem(UnknownInt, "UnknownInt");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.UnknownLink1 = this.UnknownLink1.Combine(rhs.UnknownLink1);
                ret.UnknownLink2 = this.UnknownLink2.Combine(rhs.UnknownLink2);
                ret.UnknownLink3 = this.UnknownLink3.Combine(rhs.UnknownLink3);
                ret.UnknownFloat1 = this.UnknownFloat1.Combine(rhs.UnknownFloat1);
                ret.UnknownFloat2 = this.UnknownFloat2.Combine(rhs.UnknownFloat2);
                ret.UnknownInt = this.UnknownInt.Combine(rhs.UnknownInt);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool UnknownLink1;
            public bool UnknownLink2;
            public bool UnknownLink3;
            public bool UnknownFloat1;
            public bool UnknownFloat2;
            public bool UnknownInt;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.UnknownLink1 = defaultOn;
                this.UnknownLink2 = defaultOn;
                this.UnknownLink3 = defaultOn;
                this.UnknownFloat1 = defaultOn;
                this.UnknownFloat2 = defaultOn;
                this.UnknownInt = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((UnknownLink1, null));
                ret.Add((UnknownLink2, null));
                ret.Add((UnknownLink3, null));
                ret.Add((UnknownFloat1, null));
                ret.Add((UnknownFloat2, null));
                ret.Add((UnknownInt, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => NpcFLEECommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => NpcFLEESetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NpcFLEEBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcFLEEBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static NpcFLEE CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new NpcFLEE();
            ((NpcFLEESetterCommon)((INpcFLEEGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out NpcFLEE item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((NpcFLEESetterCommon)((INpcFLEEGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static NpcFLEE GetNew()
        {
            return new NpcFLEE();
        }

    }
    #endregion

    #region Interface
    public partial interface INpcFLEE :
        IFormLinkContainer,
        ILoquiObjectSetter<INpcFLEE>,
        INpcFLEEGetter
    {
        new IFormLink<IStarfieldMajorRecordGetter> UnknownLink1 { get; set; }
        new IFormLink<IStarfieldMajorRecordGetter> UnknownLink2 { get; set; }
        new IFormLink<IStarfieldMajorRecordGetter> UnknownLink3 { get; set; }
        new Single UnknownFloat1 { get; set; }
        new Single UnknownFloat2 { get; set; }
        new Int32 UnknownInt { get; set; }
    }

    public partial interface INpcFLEEGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<INpcFLEEGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => NpcFLEE_Registration.Instance;
        IFormLinkGetter<IStarfieldMajorRecordGetter> UnknownLink1 { get; }
        IFormLinkGetter<IStarfieldMajorRecordGetter> UnknownLink2 { get; }
        IFormLinkGetter<IStarfieldMajorRecordGetter> UnknownLink3 { get; }
        Single UnknownFloat1 { get; }
        Single UnknownFloat2 { get; }
        Int32 UnknownInt { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class NpcFLEEMixIn
    {
        public static void Clear(this INpcFLEE item)
        {
            ((NpcFLEESetterCommon)((INpcFLEEGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static NpcFLEE.Mask<bool> GetEqualsMask(
            this INpcFLEEGetter item,
            INpcFLEEGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NpcFLEECommon)((INpcFLEEGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this INpcFLEEGetter item,
            string? name = null,
            NpcFLEE.Mask<bool>? printMask = null)
        {
            return ((NpcFLEECommon)((INpcFLEEGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this INpcFLEEGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NpcFLEE.Mask<bool>? printMask = null)
        {
            ((NpcFLEECommon)((INpcFLEEGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INpcFLEEGetter item,
            INpcFLEEGetter rhs,
            NpcFLEE.TranslationMask? equalsMask = null)
        {
            return ((NpcFLEECommon)((INpcFLEEGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this INpcFLEE lhs,
            INpcFLEEGetter rhs)
        {
            ((NpcFLEESetterTranslationCommon)((INpcFLEEGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INpcFLEE lhs,
            INpcFLEEGetter rhs,
            NpcFLEE.TranslationMask? copyMask = null)
        {
            ((NpcFLEESetterTranslationCommon)((INpcFLEEGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INpcFLEE lhs,
            INpcFLEEGetter rhs,
            out NpcFLEE.ErrorMask errorMask,
            NpcFLEE.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NpcFLEESetterTranslationCommon)((INpcFLEEGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = NpcFLEE.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INpcFLEE lhs,
            INpcFLEEGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NpcFLEESetterTranslationCommon)((INpcFLEEGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static NpcFLEE DeepCopy(
            this INpcFLEEGetter item,
            NpcFLEE.TranslationMask? copyMask = null)
        {
            return ((NpcFLEESetterTranslationCommon)((INpcFLEEGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NpcFLEE DeepCopy(
            this INpcFLEEGetter item,
            out NpcFLEE.ErrorMask errorMask,
            NpcFLEE.TranslationMask? copyMask = null)
        {
            return ((NpcFLEESetterTranslationCommon)((INpcFLEEGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NpcFLEE DeepCopy(
            this INpcFLEEGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NpcFLEESetterTranslationCommon)((INpcFLEEGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this INpcFLEE item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((NpcFLEESetterCommon)((INpcFLEEGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum NpcFLEE_FieldIndex
    {
        UnknownLink1 = 0,
        UnknownLink2 = 1,
        UnknownLink3 = 2,
        UnknownFloat1 = 3,
        UnknownFloat2 = 4,
        UnknownInt = 5,
    }
    #endregion

    #region Registration
    internal partial class NpcFLEE_Registration : ILoquiRegistration
    {
        public static readonly NpcFLEE_Registration Instance = new NpcFLEE_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(NpcFLEE.Mask<>);

        public static readonly Type ErrorMaskType = typeof(NpcFLEE.ErrorMask);

        public static readonly Type ClassType = typeof(NpcFLEE);

        public static readonly Type GetterType = typeof(INpcFLEEGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INpcFLEE);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.NpcFLEE";

        public const string Name = "NpcFLEE";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.FLEE;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.FLEE);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(NpcFLEEBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class NpcFLEESetterCommon
    {
        public static readonly NpcFLEESetterCommon Instance = new NpcFLEESetterCommon();

        partial void ClearPartial();
        
        public void Clear(INpcFLEE item)
        {
            ClearPartial();
            item.UnknownLink1.Clear();
            item.UnknownLink2.Clear();
            item.UnknownLink3.Clear();
            item.UnknownFloat1 = default(Single);
            item.UnknownFloat2 = default(Single);
            item.UnknownInt = default(Int32);
        }
        
        #region Mutagen
        public void RemapLinks(INpcFLEE obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.UnknownLink1.Relink(mapping);
            obj.UnknownLink2.Relink(mapping);
            obj.UnknownLink3.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INpcFLEE item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.FLEE),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: NpcFLEEBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class NpcFLEECommon
    {
        public static readonly NpcFLEECommon Instance = new NpcFLEECommon();

        public NpcFLEE.Mask<bool> GetEqualsMask(
            INpcFLEEGetter item,
            INpcFLEEGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NpcFLEE.Mask<bool>(false);
            ((NpcFLEECommon)((INpcFLEEGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INpcFLEEGetter item,
            INpcFLEEGetter rhs,
            NpcFLEE.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.UnknownLink1 = item.UnknownLink1.Equals(rhs.UnknownLink1);
            ret.UnknownLink2 = item.UnknownLink2.Equals(rhs.UnknownLink2);
            ret.UnknownLink3 = item.UnknownLink3.Equals(rhs.UnknownLink3);
            ret.UnknownFloat1 = item.UnknownFloat1.EqualsWithin(rhs.UnknownFloat1);
            ret.UnknownFloat2 = item.UnknownFloat2.EqualsWithin(rhs.UnknownFloat2);
            ret.UnknownInt = item.UnknownInt == rhs.UnknownInt;
        }
        
        public string Print(
            INpcFLEEGetter item,
            string? name = null,
            NpcFLEE.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            INpcFLEEGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NpcFLEE.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"NpcFLEE =>");
            }
            else
            {
                sb.AppendLine($"{name} (NpcFLEE) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            INpcFLEEGetter item,
            StructuredStringBuilder sb,
            NpcFLEE.Mask<bool>? printMask = null)
        {
            if (printMask?.UnknownLink1 ?? true)
            {
                sb.AppendItem(item.UnknownLink1.FormKey, "UnknownLink1");
            }
            if (printMask?.UnknownLink2 ?? true)
            {
                sb.AppendItem(item.UnknownLink2.FormKey, "UnknownLink2");
            }
            if (printMask?.UnknownLink3 ?? true)
            {
                sb.AppendItem(item.UnknownLink3.FormKey, "UnknownLink3");
            }
            if (printMask?.UnknownFloat1 ?? true)
            {
                sb.AppendItem(item.UnknownFloat1, "UnknownFloat1");
            }
            if (printMask?.UnknownFloat2 ?? true)
            {
                sb.AppendItem(item.UnknownFloat2, "UnknownFloat2");
            }
            if (printMask?.UnknownInt ?? true)
            {
                sb.AppendItem(item.UnknownInt, "UnknownInt");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INpcFLEEGetter? lhs,
            INpcFLEEGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)NpcFLEE_FieldIndex.UnknownLink1) ?? true))
            {
                if (!lhs.UnknownLink1.Equals(rhs.UnknownLink1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcFLEE_FieldIndex.UnknownLink2) ?? true))
            {
                if (!lhs.UnknownLink2.Equals(rhs.UnknownLink2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcFLEE_FieldIndex.UnknownLink3) ?? true))
            {
                if (!lhs.UnknownLink3.Equals(rhs.UnknownLink3)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcFLEE_FieldIndex.UnknownFloat1) ?? true))
            {
                if (!lhs.UnknownFloat1.EqualsWithin(rhs.UnknownFloat1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcFLEE_FieldIndex.UnknownFloat2) ?? true))
            {
                if (!lhs.UnknownFloat2.EqualsWithin(rhs.UnknownFloat2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcFLEE_FieldIndex.UnknownInt) ?? true))
            {
                if (lhs.UnknownInt != rhs.UnknownInt) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(INpcFLEEGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.UnknownLink1);
            hash.Add(item.UnknownLink2);
            hash.Add(item.UnknownLink3);
            hash.Add(item.UnknownFloat1);
            hash.Add(item.UnknownFloat2);
            hash.Add(item.UnknownInt);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return NpcFLEE.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(INpcFLEEGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.UnknownLink1);
            yield return FormLinkInformation.Factory(obj.UnknownLink2);
            yield return FormLinkInformation.Factory(obj.UnknownLink3);
            yield break;
        }
        
        #endregion
        
    }
    internal partial class NpcFLEESetterTranslationCommon
    {
        public static readonly NpcFLEESetterTranslationCommon Instance = new NpcFLEESetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            INpcFLEE item,
            INpcFLEEGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)NpcFLEE_FieldIndex.UnknownLink1) ?? true))
            {
                item.UnknownLink1.SetTo(rhs.UnknownLink1.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFLEE_FieldIndex.UnknownLink2) ?? true))
            {
                item.UnknownLink2.SetTo(rhs.UnknownLink2.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFLEE_FieldIndex.UnknownLink3) ?? true))
            {
                item.UnknownLink3.SetTo(rhs.UnknownLink3.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFLEE_FieldIndex.UnknownFloat1) ?? true))
            {
                item.UnknownFloat1 = rhs.UnknownFloat1;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFLEE_FieldIndex.UnknownFloat2) ?? true))
            {
                item.UnknownFloat2 = rhs.UnknownFloat2;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFLEE_FieldIndex.UnknownInt) ?? true))
            {
                item.UnknownInt = rhs.UnknownInt;
            }
        }
        
        #endregion
        
        public NpcFLEE DeepCopy(
            INpcFLEEGetter item,
            NpcFLEE.TranslationMask? copyMask = null)
        {
            NpcFLEE ret = (NpcFLEE)((NpcFLEECommon)((INpcFLEEGetter)item).CommonInstance()!).GetNew();
            ((NpcFLEESetterTranslationCommon)((INpcFLEEGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public NpcFLEE DeepCopy(
            INpcFLEEGetter item,
            out NpcFLEE.ErrorMask errorMask,
            NpcFLEE.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            NpcFLEE ret = (NpcFLEE)((NpcFLEECommon)((INpcFLEEGetter)item).CommonInstance()!).GetNew();
            ((NpcFLEESetterTranslationCommon)((INpcFLEEGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = NpcFLEE.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public NpcFLEE DeepCopy(
            INpcFLEEGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            NpcFLEE ret = (NpcFLEE)((NpcFLEECommon)((INpcFLEEGetter)item).CommonInstance()!).GetNew();
            ((NpcFLEESetterTranslationCommon)((INpcFLEEGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class NpcFLEE
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NpcFLEE_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => NpcFLEE_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NpcFLEECommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return NpcFLEESetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NpcFLEESetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INpcFLEEGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object INpcFLEEGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object INpcFLEEGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class NpcFLEEBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly NpcFLEEBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            INpcFLEEGetter item,
            MutagenWriter writer)
        {
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.UnknownLink1);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.UnknownLink2);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.UnknownLink3);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.UnknownFloat1);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.UnknownFloat2);
            writer.Write(item.UnknownInt);
        }

        public void Write(
            MutagenWriter writer,
            INpcFLEEGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.FLEE),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (INpcFLEEGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class NpcFLEEBinaryCreateTranslation
    {
        public static readonly NpcFLEEBinaryCreateTranslation Instance = new NpcFLEEBinaryCreateTranslation();

        public static void FillBinaryStructs(
            INpcFLEE item,
            MutagenFrame frame)
        {
            item.UnknownLink1.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.UnknownLink2.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.UnknownLink3.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.UnknownFloat1 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.UnknownFloat2 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.UnknownInt = frame.ReadInt32();
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class NpcFLEEBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this INpcFLEEGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcFLEEBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class NpcFLEEBinaryOverlay :
        PluginBinaryOverlay,
        INpcFLEEGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NpcFLEE_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => NpcFLEE_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NpcFLEECommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NpcFLEESetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INpcFLEEGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? INpcFLEEGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object INpcFLEEGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => NpcFLEECommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NpcFLEEBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcFLEEBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public IFormLinkGetter<IStarfieldMajorRecordGetter> UnknownLink1 => new FormLink<IStarfieldMajorRecordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_structData.Span.Slice(0x0, 0x4))));
        public IFormLinkGetter<IStarfieldMajorRecordGetter> UnknownLink2 => new FormLink<IStarfieldMajorRecordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_structData.Span.Slice(0x4, 0x4))));
        public IFormLinkGetter<IStarfieldMajorRecordGetter> UnknownLink3 => new FormLink<IStarfieldMajorRecordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_structData.Span.Slice(0x8, 0x4))));
        public Single UnknownFloat1 => _structData.Slice(0xC, 0x4).Float();
        public Single UnknownFloat2 => _structData.Slice(0x10, 0x4).Float();
        public Int32 UnknownInt => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0x14, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NpcFLEEBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static INpcFLEEGetter NpcFLEEFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x18,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new NpcFLEEBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x18 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static INpcFLEEGetter NpcFLEEFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return NpcFLEEFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NpcFLEEMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INpcFLEEGetter rhs) return false;
            return ((NpcFLEECommon)((INpcFLEEGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INpcFLEEGetter? obj)
        {
            return ((NpcFLEECommon)((INpcFLEEGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NpcFLEECommon)((INpcFLEEGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

