/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class CollectionAlias :
        ICollectionAlias,
        IEquatable<ICollectionAliasGetter>,
        ILoquiObjectSetter<CollectionAlias>
    {
        #region Ctor
        public CollectionAlias()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ID
        public UInt32? ID { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? ICollectionAliasGetter.ID => this.ID;
        #endregion
        #region MaxInitialFillCount
        public Byte MaxInitialFillCount { get; set; } = default(Byte);
        #endregion
        #region ALAM
        public Int32? ALAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? ICollectionAliasGetter.ALAM => this.ALAM;
        #endregion
        #region ReferenceAlias
        public QuestReferenceAlias ReferenceAlias { get; set; } = new QuestReferenceAlias();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IQuestReferenceAliasGetter ICollectionAliasGetter.ReferenceAlias => ReferenceAlias;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CollectionAliasMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICollectionAliasGetter rhs) return false;
            return ((CollectionAliasCommon)((ICollectionAliasGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICollectionAliasGetter? obj)
        {
            return ((CollectionAliasCommon)((ICollectionAliasGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CollectionAliasCommon)((ICollectionAliasGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.ID = initialValue;
                this.MaxInitialFillCount = initialValue;
                this.ALAM = initialValue;
                this.ReferenceAlias = new MaskItem<TItem, QuestReferenceAlias.Mask<TItem>?>(initialValue, new QuestReferenceAlias.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem ID,
                TItem MaxInitialFillCount,
                TItem ALAM,
                TItem ReferenceAlias)
            {
                this.ID = ID;
                this.MaxInitialFillCount = MaxInitialFillCount;
                this.ALAM = ALAM;
                this.ReferenceAlias = new MaskItem<TItem, QuestReferenceAlias.Mask<TItem>?>(ReferenceAlias, new QuestReferenceAlias.Mask<TItem>(ReferenceAlias));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem ID;
            public TItem MaxInitialFillCount;
            public TItem ALAM;
            public MaskItem<TItem, QuestReferenceAlias.Mask<TItem>?>? ReferenceAlias { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.ID, rhs.ID)) return false;
                if (!object.Equals(this.MaxInitialFillCount, rhs.MaxInitialFillCount)) return false;
                if (!object.Equals(this.ALAM, rhs.ALAM)) return false;
                if (!object.Equals(this.ReferenceAlias, rhs.ReferenceAlias)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ID);
                hash.Add(this.MaxInitialFillCount);
                hash.Add(this.ALAM);
                hash.Add(this.ReferenceAlias);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.ID)) return false;
                if (!eval(this.MaxInitialFillCount)) return false;
                if (!eval(this.ALAM)) return false;
                if (ReferenceAlias != null)
                {
                    if (!eval(this.ReferenceAlias.Overall)) return false;
                    if (this.ReferenceAlias.Specific != null && !this.ReferenceAlias.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.ID)) return true;
                if (eval(this.MaxInitialFillCount)) return true;
                if (eval(this.ALAM)) return true;
                if (ReferenceAlias != null)
                {
                    if (eval(this.ReferenceAlias.Overall)) return true;
                    if (this.ReferenceAlias.Specific != null && this.ReferenceAlias.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CollectionAlias.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.ID = eval(this.ID);
                obj.MaxInitialFillCount = eval(this.MaxInitialFillCount);
                obj.ALAM = eval(this.ALAM);
                obj.ReferenceAlias = this.ReferenceAlias == null ? null : new MaskItem<R, QuestReferenceAlias.Mask<R>?>(eval(this.ReferenceAlias.Overall), this.ReferenceAlias.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(CollectionAlias.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, CollectionAlias.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(CollectionAlias.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ID ?? true)
                    {
                        sb.AppendItem(ID, "ID");
                    }
                    if (printMask?.MaxInitialFillCount ?? true)
                    {
                        sb.AppendItem(MaxInitialFillCount, "MaxInitialFillCount");
                    }
                    if (printMask?.ALAM ?? true)
                    {
                        sb.AppendItem(ALAM, "ALAM");
                    }
                    if (printMask?.ReferenceAlias?.Overall ?? true)
                    {
                        ReferenceAlias?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? ID;
            public Exception? MaxInitialFillCount;
            public Exception? ALAM;
            public MaskItem<Exception?, QuestReferenceAlias.ErrorMask?>? ReferenceAlias;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                CollectionAlias_FieldIndex enu = (CollectionAlias_FieldIndex)index;
                switch (enu)
                {
                    case CollectionAlias_FieldIndex.ID:
                        return ID;
                    case CollectionAlias_FieldIndex.MaxInitialFillCount:
                        return MaxInitialFillCount;
                    case CollectionAlias_FieldIndex.ALAM:
                        return ALAM;
                    case CollectionAlias_FieldIndex.ReferenceAlias:
                        return ReferenceAlias;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                CollectionAlias_FieldIndex enu = (CollectionAlias_FieldIndex)index;
                switch (enu)
                {
                    case CollectionAlias_FieldIndex.ID:
                        this.ID = ex;
                        break;
                    case CollectionAlias_FieldIndex.MaxInitialFillCount:
                        this.MaxInitialFillCount = ex;
                        break;
                    case CollectionAlias_FieldIndex.ALAM:
                        this.ALAM = ex;
                        break;
                    case CollectionAlias_FieldIndex.ReferenceAlias:
                        this.ReferenceAlias = new MaskItem<Exception?, QuestReferenceAlias.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                CollectionAlias_FieldIndex enu = (CollectionAlias_FieldIndex)index;
                switch (enu)
                {
                    case CollectionAlias_FieldIndex.ID:
                        this.ID = (Exception?)obj;
                        break;
                    case CollectionAlias_FieldIndex.MaxInitialFillCount:
                        this.MaxInitialFillCount = (Exception?)obj;
                        break;
                    case CollectionAlias_FieldIndex.ALAM:
                        this.ALAM = (Exception?)obj;
                        break;
                    case CollectionAlias_FieldIndex.ReferenceAlias:
                        this.ReferenceAlias = (MaskItem<Exception?, QuestReferenceAlias.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (ID != null) return true;
                if (MaxInitialFillCount != null) return true;
                if (ALAM != null) return true;
                if (ReferenceAlias != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(ID, "ID");
                }
                {
                    sb.AppendItem(MaxInitialFillCount, "MaxInitialFillCount");
                }
                {
                    sb.AppendItem(ALAM, "ALAM");
                }
                ReferenceAlias?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ID = this.ID.Combine(rhs.ID);
                ret.MaxInitialFillCount = this.MaxInitialFillCount.Combine(rhs.MaxInitialFillCount);
                ret.ALAM = this.ALAM.Combine(rhs.ALAM);
                ret.ReferenceAlias = this.ReferenceAlias.Combine(rhs.ReferenceAlias, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool ID;
            public bool MaxInitialFillCount;
            public bool ALAM;
            public QuestReferenceAlias.TranslationMask? ReferenceAlias;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.ID = defaultOn;
                this.MaxInitialFillCount = defaultOn;
                this.ALAM = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((ID, null));
                ret.Add((MaxInitialFillCount, null));
                ret.Add((ALAM, null));
                ret.Add((ReferenceAlias != null ? ReferenceAlias.OnOverall : DefaultOn, ReferenceAlias?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => CollectionAliasCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CollectionAliasSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CollectionAliasBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CollectionAliasBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static CollectionAlias CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new CollectionAlias();
            ((CollectionAliasSetterCommon)((ICollectionAliasGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CollectionAlias item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((CollectionAliasSetterCommon)((ICollectionAliasGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static CollectionAlias GetNew()
        {
            return new CollectionAlias();
        }

    }
    #endregion

    #region Interface
    public partial interface ICollectionAlias :
        ICollectionAliasGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<ICollectionAlias>
    {
        new UInt32? ID { get; set; }
        new Byte MaxInitialFillCount { get; set; }
        new Int32? ALAM { get; set; }
        new QuestReferenceAlias ReferenceAlias { get; set; }
    }

    public partial interface ICollectionAliasGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ICollectionAliasGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => CollectionAlias_Registration.Instance;
        UInt32? ID { get; }
        Byte MaxInitialFillCount { get; }
        Int32? ALAM { get; }
        IQuestReferenceAliasGetter ReferenceAlias { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CollectionAliasMixIn
    {
        public static void Clear(this ICollectionAlias item)
        {
            ((CollectionAliasSetterCommon)((ICollectionAliasGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CollectionAlias.Mask<bool> GetEqualsMask(
            this ICollectionAliasGetter item,
            ICollectionAliasGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CollectionAliasCommon)((ICollectionAliasGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ICollectionAliasGetter item,
            string? name = null,
            CollectionAlias.Mask<bool>? printMask = null)
        {
            return ((CollectionAliasCommon)((ICollectionAliasGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ICollectionAliasGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            CollectionAlias.Mask<bool>? printMask = null)
        {
            ((CollectionAliasCommon)((ICollectionAliasGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICollectionAliasGetter item,
            ICollectionAliasGetter rhs,
            CollectionAlias.TranslationMask? equalsMask = null)
        {
            return ((CollectionAliasCommon)((ICollectionAliasGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ICollectionAlias lhs,
            ICollectionAliasGetter rhs)
        {
            ((CollectionAliasSetterTranslationCommon)((ICollectionAliasGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICollectionAlias lhs,
            ICollectionAliasGetter rhs,
            CollectionAlias.TranslationMask? copyMask = null)
        {
            ((CollectionAliasSetterTranslationCommon)((ICollectionAliasGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICollectionAlias lhs,
            ICollectionAliasGetter rhs,
            out CollectionAlias.ErrorMask errorMask,
            CollectionAlias.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CollectionAliasSetterTranslationCommon)((ICollectionAliasGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = CollectionAlias.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICollectionAlias lhs,
            ICollectionAliasGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CollectionAliasSetterTranslationCommon)((ICollectionAliasGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static CollectionAlias DeepCopy(
            this ICollectionAliasGetter item,
            CollectionAlias.TranslationMask? copyMask = null)
        {
            return ((CollectionAliasSetterTranslationCommon)((ICollectionAliasGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CollectionAlias DeepCopy(
            this ICollectionAliasGetter item,
            out CollectionAlias.ErrorMask errorMask,
            CollectionAlias.TranslationMask? copyMask = null)
        {
            return ((CollectionAliasSetterTranslationCommon)((ICollectionAliasGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CollectionAlias DeepCopy(
            this ICollectionAliasGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CollectionAliasSetterTranslationCommon)((ICollectionAliasGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICollectionAlias item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((CollectionAliasSetterCommon)((ICollectionAliasGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum CollectionAlias_FieldIndex
    {
        ID = 0,
        MaxInitialFillCount = 1,
        ALAM = 2,
        ReferenceAlias = 3,
    }
    #endregion

    #region Registration
    internal partial class CollectionAlias_Registration : ILoquiRegistration
    {
        public static readonly CollectionAlias_Registration Instance = new CollectionAlias_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(CollectionAlias.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CollectionAlias.ErrorMask);

        public static readonly Type ClassType = typeof(CollectionAlias);

        public static readonly Type GetterType = typeof(ICollectionAliasGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICollectionAlias);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.CollectionAlias";

        public const string Name = "CollectionAlias";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(
                RecordTypes.ALCS,
                RecordTypes.ALMI);
            var all = RecordCollection.Factory(
                RecordTypes.ALCS,
                RecordTypes.ALMI,
                RecordTypes.ALAM,
                RecordTypes.ALST);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(CollectionAliasBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class CollectionAliasSetterCommon
    {
        public static readonly CollectionAliasSetterCommon Instance = new CollectionAliasSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICollectionAlias item)
        {
            ClearPartial();
            item.ID = default;
            item.MaxInitialFillCount = default(Byte);
            item.ALAM = default;
            item.ReferenceAlias.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(ICollectionAlias obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.ReferenceAlias.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICollectionAlias item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: CollectionAliasBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class CollectionAliasCommon
    {
        public static readonly CollectionAliasCommon Instance = new CollectionAliasCommon();

        public CollectionAlias.Mask<bool> GetEqualsMask(
            ICollectionAliasGetter item,
            ICollectionAliasGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CollectionAlias.Mask<bool>(false);
            ((CollectionAliasCommon)((ICollectionAliasGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICollectionAliasGetter item,
            ICollectionAliasGetter rhs,
            CollectionAlias.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ID = item.ID == rhs.ID;
            ret.MaxInitialFillCount = item.MaxInitialFillCount == rhs.MaxInitialFillCount;
            ret.ALAM = item.ALAM == rhs.ALAM;
            ret.ReferenceAlias = MaskItemExt.Factory(item.ReferenceAlias.GetEqualsMask(rhs.ReferenceAlias, include), include);
        }
        
        public string Print(
            ICollectionAliasGetter item,
            string? name = null,
            CollectionAlias.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ICollectionAliasGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            CollectionAlias.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"CollectionAlias =>");
            }
            else
            {
                sb.AppendLine($"{name} (CollectionAlias) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ICollectionAliasGetter item,
            StructuredStringBuilder sb,
            CollectionAlias.Mask<bool>? printMask = null)
        {
            if ((printMask?.ID ?? true)
                && item.ID is {} IDItem)
            {
                sb.AppendItem(IDItem, "ID");
            }
            if (printMask?.MaxInitialFillCount ?? true)
            {
                sb.AppendItem(item.MaxInitialFillCount, "MaxInitialFillCount");
            }
            if ((printMask?.ALAM ?? true)
                && item.ALAM is {} ALAMItem)
            {
                sb.AppendItem(ALAMItem, "ALAM");
            }
            if (printMask?.ReferenceAlias?.Overall ?? true)
            {
                item.ReferenceAlias?.Print(sb, "ReferenceAlias");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICollectionAliasGetter? lhs,
            ICollectionAliasGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)CollectionAlias_FieldIndex.ID) ?? true))
            {
                if (lhs.ID != rhs.ID) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CollectionAlias_FieldIndex.MaxInitialFillCount) ?? true))
            {
                if (lhs.MaxInitialFillCount != rhs.MaxInitialFillCount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CollectionAlias_FieldIndex.ALAM) ?? true))
            {
                if (lhs.ALAM != rhs.ALAM) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CollectionAlias_FieldIndex.ReferenceAlias) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ReferenceAlias, rhs.ReferenceAlias, out var lhsReferenceAlias, out var rhsReferenceAlias, out var isReferenceAliasEqual))
                {
                    if (!((QuestReferenceAliasCommon)((IQuestReferenceAliasGetter)lhsReferenceAlias).CommonInstance()!).Equals(lhsReferenceAlias, rhsReferenceAlias, equalsMask?.GetSubCrystal((int)CollectionAlias_FieldIndex.ReferenceAlias))) return false;
                }
                else if (!isReferenceAliasEqual) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ICollectionAliasGetter item)
        {
            var hash = new HashCode();
            if (item.ID is {} IDitem)
            {
                hash.Add(IDitem);
            }
            hash.Add(item.MaxInitialFillCount);
            if (item.ALAM is {} ALAMitem)
            {
                hash.Add(ALAMitem);
            }
            hash.Add(item.ReferenceAlias);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return CollectionAlias.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ICollectionAliasGetter obj)
        {
            foreach (var item in obj.ReferenceAlias.EnumerateFormLinks())
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class CollectionAliasSetterTranslationCommon
    {
        public static readonly CollectionAliasSetterTranslationCommon Instance = new CollectionAliasSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICollectionAlias item,
            ICollectionAliasGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)CollectionAlias_FieldIndex.ID) ?? true))
            {
                item.ID = rhs.ID;
            }
            if ((copyMask?.GetShouldTranslate((int)CollectionAlias_FieldIndex.MaxInitialFillCount) ?? true))
            {
                item.MaxInitialFillCount = rhs.MaxInitialFillCount;
            }
            if ((copyMask?.GetShouldTranslate((int)CollectionAlias_FieldIndex.ALAM) ?? true))
            {
                item.ALAM = rhs.ALAM;
            }
            if ((copyMask?.GetShouldTranslate((int)CollectionAlias_FieldIndex.ReferenceAlias) ?? true))
            {
                errorMask?.PushIndex((int)CollectionAlias_FieldIndex.ReferenceAlias);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)CollectionAlias_FieldIndex.ReferenceAlias) ?? true))
                    {
                        item.ReferenceAlias = rhs.ReferenceAlias.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)CollectionAlias_FieldIndex.ReferenceAlias),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ICollectionAlias item,
            ICollectionAliasGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public CollectionAlias DeepCopy(
            ICollectionAliasGetter item,
            CollectionAlias.TranslationMask? copyMask = null)
        {
            CollectionAlias ret = (CollectionAlias)((CollectionAliasCommon)((ICollectionAliasGetter)item).CommonInstance()!).GetNew();
            ((CollectionAliasSetterTranslationCommon)((ICollectionAliasGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public CollectionAlias DeepCopy(
            ICollectionAliasGetter item,
            out CollectionAlias.ErrorMask errorMask,
            CollectionAlias.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CollectionAlias ret = (CollectionAlias)((CollectionAliasCommon)((ICollectionAliasGetter)item).CommonInstance()!).GetNew();
            ((CollectionAliasSetterTranslationCommon)((ICollectionAliasGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = CollectionAlias.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public CollectionAlias DeepCopy(
            ICollectionAliasGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CollectionAlias ret = (CollectionAlias)((CollectionAliasCommon)((ICollectionAliasGetter)item).CommonInstance()!).GetNew();
            ((CollectionAliasSetterTranslationCommon)((ICollectionAliasGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class CollectionAlias
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CollectionAlias_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => CollectionAlias_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CollectionAliasCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return CollectionAliasSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CollectionAliasSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICollectionAliasGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ICollectionAliasGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ICollectionAliasGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class CollectionAliasBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly CollectionAliasBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ICollectionAliasGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.ID,
                header: translationParams.ConvertToCustom(RecordTypes.ALCS));
            ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.MaxInitialFillCount,
                header: translationParams.ConvertToCustom(RecordTypes.ALMI));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.ALAM,
                header: translationParams.ConvertToCustom(RecordTypes.ALAM));
            var ReferenceAliasItem = item.ReferenceAlias;
            ((QuestReferenceAliasBinaryWriteTranslation)((IBinaryItem)ReferenceAliasItem).BinaryWriteTranslator).Write(
                item: ReferenceAliasItem,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            ICollectionAliasGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ICollectionAliasGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class CollectionAliasBinaryCreateTranslation
    {
        public static readonly CollectionAliasBinaryCreateTranslation Instance = new CollectionAliasBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            ICollectionAlias item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.ALCS:
                {
                    if (lastParsed.ShortCircuit((int)CollectionAlias_FieldIndex.ID, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ID = frame.ReadUInt32();
                    return (int)CollectionAlias_FieldIndex.ID;
                }
                case RecordTypeInts.ALMI:
                {
                    if (lastParsed.ShortCircuit((int)CollectionAlias_FieldIndex.MaxInitialFillCount, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MaxInitialFillCount = frame.ReadUInt8();
                    return (int)CollectionAlias_FieldIndex.MaxInitialFillCount;
                }
                case RecordTypeInts.ALAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ALAM = frame.ReadInt32();
                    return (int)CollectionAlias_FieldIndex.ALAM;
                }
                case RecordTypeInts.ALST:
                {
                    item.ReferenceAlias = Mutagen.Bethesda.Starfield.QuestReferenceAlias.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)CollectionAlias_FieldIndex.ReferenceAlias;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class CollectionAliasBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ICollectionAliasGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CollectionAliasBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class CollectionAliasBinaryOverlay :
        PluginBinaryOverlay,
        ICollectionAliasGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CollectionAlias_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => CollectionAlias_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CollectionAliasCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CollectionAliasSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICollectionAliasGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ICollectionAliasGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ICollectionAliasGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => CollectionAliasCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CollectionAliasBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CollectionAliasBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region ID
        private int? _IDLocation;
        public UInt32? ID => _IDLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _IDLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region MaxInitialFillCount
        private int? _MaxInitialFillCountLocation;
        public Byte MaxInitialFillCount => _MaxInitialFillCountLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _MaxInitialFillCountLocation.Value, _package.MetaData.Constants)[0] : default(Byte);
        #endregion
        #region ALAM
        private int? _ALAMLocation;
        public Int32? ALAM => _ALAMLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ALAMLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region ReferenceAlias
        private IQuestReferenceAliasGetter? _ReferenceAlias;
        public IQuestReferenceAliasGetter ReferenceAlias => _ReferenceAlias ?? new QuestReferenceAlias();
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CollectionAliasBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ICollectionAliasGetter CollectionAliasFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new CollectionAliasBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ICollectionAliasGetter CollectionAliasFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return CollectionAliasFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.ALCS:
                {
                    if (lastParsed.ShortCircuit((int)CollectionAlias_FieldIndex.ID, translationParams)) return ParseResult.Stop;
                    _IDLocation = (stream.Position - offset);
                    return (int)CollectionAlias_FieldIndex.ID;
                }
                case RecordTypeInts.ALMI:
                {
                    if (lastParsed.ShortCircuit((int)CollectionAlias_FieldIndex.MaxInitialFillCount, translationParams)) return ParseResult.Stop;
                    _MaxInitialFillCountLocation = (stream.Position - offset);
                    return (int)CollectionAlias_FieldIndex.MaxInitialFillCount;
                }
                case RecordTypeInts.ALAM:
                {
                    _ALAMLocation = (stream.Position - offset);
                    return (int)CollectionAlias_FieldIndex.ALAM;
                }
                case RecordTypeInts.ALST:
                {
                    this._ReferenceAlias = QuestReferenceAliasBinaryOverlay.QuestReferenceAliasFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)CollectionAlias_FieldIndex.ReferenceAlias;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CollectionAliasMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICollectionAliasGetter rhs) return false;
            return ((CollectionAliasCommon)((ICollectionAliasGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICollectionAliasGetter? obj)
        {
            return ((CollectionAliasCommon)((ICollectionAliasGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CollectionAliasCommon)((ICollectionAliasGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

