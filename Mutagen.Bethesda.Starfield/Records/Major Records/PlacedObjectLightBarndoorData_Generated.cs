/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class PlacedObjectLightBarndoorData :
        IEquatable<IPlacedObjectLightBarndoorDataGetter>,
        ILoquiObjectSetter<PlacedObjectLightBarndoorData>,
        IPlacedObjectLightBarndoorData
    {
        #region Ctor
        public PlacedObjectLightBarndoorData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Bottom
        public Single Bottom { get; set; } = default(Single);
        #endregion
        #region Right
        public Single Right { get; set; } = default(Single);
        #endregion
        #region Left
        public Single Left { get; set; } = default(Single);
        #endregion
        #region Top
        public Single Top { get; set; } = default(Single);
        #endregion
        #region FalloffIntensity
        public Single FalloffIntensity { get; set; } = default(Single);
        #endregion
        #region HasBarndoor
        public Boolean HasBarndoor { get; set; } = default(Boolean);
        #endregion
        #region HasFalloff
        public Boolean HasFalloff { get; set; } = default(Boolean);
        #endregion
        #region Unused
        public UInt16 Unused { get; set; } = default(UInt16);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlacedObjectLightBarndoorDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPlacedObjectLightBarndoorDataGetter rhs) return false;
            return ((PlacedObjectLightBarndoorDataCommon)((IPlacedObjectLightBarndoorDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlacedObjectLightBarndoorDataGetter? obj)
        {
            return ((PlacedObjectLightBarndoorDataCommon)((IPlacedObjectLightBarndoorDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlacedObjectLightBarndoorDataCommon)((IPlacedObjectLightBarndoorDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Bottom = initialValue;
                this.Right = initialValue;
                this.Left = initialValue;
                this.Top = initialValue;
                this.FalloffIntensity = initialValue;
                this.HasBarndoor = initialValue;
                this.HasFalloff = initialValue;
                this.Unused = initialValue;
            }

            public Mask(
                TItem Bottom,
                TItem Right,
                TItem Left,
                TItem Top,
                TItem FalloffIntensity,
                TItem HasBarndoor,
                TItem HasFalloff,
                TItem Unused)
            {
                this.Bottom = Bottom;
                this.Right = Right;
                this.Left = Left;
                this.Top = Top;
                this.FalloffIntensity = FalloffIntensity;
                this.HasBarndoor = HasBarndoor;
                this.HasFalloff = HasFalloff;
                this.Unused = Unused;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Bottom;
            public TItem Right;
            public TItem Left;
            public TItem Top;
            public TItem FalloffIntensity;
            public TItem HasBarndoor;
            public TItem HasFalloff;
            public TItem Unused;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Bottom, rhs.Bottom)) return false;
                if (!object.Equals(this.Right, rhs.Right)) return false;
                if (!object.Equals(this.Left, rhs.Left)) return false;
                if (!object.Equals(this.Top, rhs.Top)) return false;
                if (!object.Equals(this.FalloffIntensity, rhs.FalloffIntensity)) return false;
                if (!object.Equals(this.HasBarndoor, rhs.HasBarndoor)) return false;
                if (!object.Equals(this.HasFalloff, rhs.HasFalloff)) return false;
                if (!object.Equals(this.Unused, rhs.Unused)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Bottom);
                hash.Add(this.Right);
                hash.Add(this.Left);
                hash.Add(this.Top);
                hash.Add(this.FalloffIntensity);
                hash.Add(this.HasBarndoor);
                hash.Add(this.HasFalloff);
                hash.Add(this.Unused);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Bottom)) return false;
                if (!eval(this.Right)) return false;
                if (!eval(this.Left)) return false;
                if (!eval(this.Top)) return false;
                if (!eval(this.FalloffIntensity)) return false;
                if (!eval(this.HasBarndoor)) return false;
                if (!eval(this.HasFalloff)) return false;
                if (!eval(this.Unused)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Bottom)) return true;
                if (eval(this.Right)) return true;
                if (eval(this.Left)) return true;
                if (eval(this.Top)) return true;
                if (eval(this.FalloffIntensity)) return true;
                if (eval(this.HasBarndoor)) return true;
                if (eval(this.HasFalloff)) return true;
                if (eval(this.Unused)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PlacedObjectLightBarndoorData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Bottom = eval(this.Bottom);
                obj.Right = eval(this.Right);
                obj.Left = eval(this.Left);
                obj.Top = eval(this.Top);
                obj.FalloffIntensity = eval(this.FalloffIntensity);
                obj.HasBarndoor = eval(this.HasBarndoor);
                obj.HasFalloff = eval(this.HasFalloff);
                obj.Unused = eval(this.Unused);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(PlacedObjectLightBarndoorData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, PlacedObjectLightBarndoorData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(PlacedObjectLightBarndoorData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Bottom ?? true)
                    {
                        sb.AppendItem(Bottom, "Bottom");
                    }
                    if (printMask?.Right ?? true)
                    {
                        sb.AppendItem(Right, "Right");
                    }
                    if (printMask?.Left ?? true)
                    {
                        sb.AppendItem(Left, "Left");
                    }
                    if (printMask?.Top ?? true)
                    {
                        sb.AppendItem(Top, "Top");
                    }
                    if (printMask?.FalloffIntensity ?? true)
                    {
                        sb.AppendItem(FalloffIntensity, "FalloffIntensity");
                    }
                    if (printMask?.HasBarndoor ?? true)
                    {
                        sb.AppendItem(HasBarndoor, "HasBarndoor");
                    }
                    if (printMask?.HasFalloff ?? true)
                    {
                        sb.AppendItem(HasFalloff, "HasFalloff");
                    }
                    if (printMask?.Unused ?? true)
                    {
                        sb.AppendItem(Unused, "Unused");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Bottom;
            public Exception? Right;
            public Exception? Left;
            public Exception? Top;
            public Exception? FalloffIntensity;
            public Exception? HasBarndoor;
            public Exception? HasFalloff;
            public Exception? Unused;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                PlacedObjectLightBarndoorData_FieldIndex enu = (PlacedObjectLightBarndoorData_FieldIndex)index;
                switch (enu)
                {
                    case PlacedObjectLightBarndoorData_FieldIndex.Bottom:
                        return Bottom;
                    case PlacedObjectLightBarndoorData_FieldIndex.Right:
                        return Right;
                    case PlacedObjectLightBarndoorData_FieldIndex.Left:
                        return Left;
                    case PlacedObjectLightBarndoorData_FieldIndex.Top:
                        return Top;
                    case PlacedObjectLightBarndoorData_FieldIndex.FalloffIntensity:
                        return FalloffIntensity;
                    case PlacedObjectLightBarndoorData_FieldIndex.HasBarndoor:
                        return HasBarndoor;
                    case PlacedObjectLightBarndoorData_FieldIndex.HasFalloff:
                        return HasFalloff;
                    case PlacedObjectLightBarndoorData_FieldIndex.Unused:
                        return Unused;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                PlacedObjectLightBarndoorData_FieldIndex enu = (PlacedObjectLightBarndoorData_FieldIndex)index;
                switch (enu)
                {
                    case PlacedObjectLightBarndoorData_FieldIndex.Bottom:
                        this.Bottom = ex;
                        break;
                    case PlacedObjectLightBarndoorData_FieldIndex.Right:
                        this.Right = ex;
                        break;
                    case PlacedObjectLightBarndoorData_FieldIndex.Left:
                        this.Left = ex;
                        break;
                    case PlacedObjectLightBarndoorData_FieldIndex.Top:
                        this.Top = ex;
                        break;
                    case PlacedObjectLightBarndoorData_FieldIndex.FalloffIntensity:
                        this.FalloffIntensity = ex;
                        break;
                    case PlacedObjectLightBarndoorData_FieldIndex.HasBarndoor:
                        this.HasBarndoor = ex;
                        break;
                    case PlacedObjectLightBarndoorData_FieldIndex.HasFalloff:
                        this.HasFalloff = ex;
                        break;
                    case PlacedObjectLightBarndoorData_FieldIndex.Unused:
                        this.Unused = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                PlacedObjectLightBarndoorData_FieldIndex enu = (PlacedObjectLightBarndoorData_FieldIndex)index;
                switch (enu)
                {
                    case PlacedObjectLightBarndoorData_FieldIndex.Bottom:
                        this.Bottom = (Exception?)obj;
                        break;
                    case PlacedObjectLightBarndoorData_FieldIndex.Right:
                        this.Right = (Exception?)obj;
                        break;
                    case PlacedObjectLightBarndoorData_FieldIndex.Left:
                        this.Left = (Exception?)obj;
                        break;
                    case PlacedObjectLightBarndoorData_FieldIndex.Top:
                        this.Top = (Exception?)obj;
                        break;
                    case PlacedObjectLightBarndoorData_FieldIndex.FalloffIntensity:
                        this.FalloffIntensity = (Exception?)obj;
                        break;
                    case PlacedObjectLightBarndoorData_FieldIndex.HasBarndoor:
                        this.HasBarndoor = (Exception?)obj;
                        break;
                    case PlacedObjectLightBarndoorData_FieldIndex.HasFalloff:
                        this.HasFalloff = (Exception?)obj;
                        break;
                    case PlacedObjectLightBarndoorData_FieldIndex.Unused:
                        this.Unused = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Bottom != null) return true;
                if (Right != null) return true;
                if (Left != null) return true;
                if (Top != null) return true;
                if (FalloffIntensity != null) return true;
                if (HasBarndoor != null) return true;
                if (HasFalloff != null) return true;
                if (Unused != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Bottom, "Bottom");
                }
                {
                    sb.AppendItem(Right, "Right");
                }
                {
                    sb.AppendItem(Left, "Left");
                }
                {
                    sb.AppendItem(Top, "Top");
                }
                {
                    sb.AppendItem(FalloffIntensity, "FalloffIntensity");
                }
                {
                    sb.AppendItem(HasBarndoor, "HasBarndoor");
                }
                {
                    sb.AppendItem(HasFalloff, "HasFalloff");
                }
                {
                    sb.AppendItem(Unused, "Unused");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Bottom = this.Bottom.Combine(rhs.Bottom);
                ret.Right = this.Right.Combine(rhs.Right);
                ret.Left = this.Left.Combine(rhs.Left);
                ret.Top = this.Top.Combine(rhs.Top);
                ret.FalloffIntensity = this.FalloffIntensity.Combine(rhs.FalloffIntensity);
                ret.HasBarndoor = this.HasBarndoor.Combine(rhs.HasBarndoor);
                ret.HasFalloff = this.HasFalloff.Combine(rhs.HasFalloff);
                ret.Unused = this.Unused.Combine(rhs.Unused);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Bottom;
            public bool Right;
            public bool Left;
            public bool Top;
            public bool FalloffIntensity;
            public bool HasBarndoor;
            public bool HasFalloff;
            public bool Unused;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Bottom = defaultOn;
                this.Right = defaultOn;
                this.Left = defaultOn;
                this.Top = defaultOn;
                this.FalloffIntensity = defaultOn;
                this.HasBarndoor = defaultOn;
                this.HasFalloff = defaultOn;
                this.Unused = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Bottom, null));
                ret.Add((Right, null));
                ret.Add((Left, null));
                ret.Add((Top, null));
                ret.Add((FalloffIntensity, null));
                ret.Add((HasBarndoor, null));
                ret.Add((HasFalloff, null));
                ret.Add((Unused, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PlacedObjectLightBarndoorDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlacedObjectLightBarndoorDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static PlacedObjectLightBarndoorData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new PlacedObjectLightBarndoorData();
            ((PlacedObjectLightBarndoorDataSetterCommon)((IPlacedObjectLightBarndoorDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PlacedObjectLightBarndoorData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((PlacedObjectLightBarndoorDataSetterCommon)((IPlacedObjectLightBarndoorDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static PlacedObjectLightBarndoorData GetNew()
        {
            return new PlacedObjectLightBarndoorData();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlacedObjectLightBarndoorData :
        ILoquiObjectSetter<IPlacedObjectLightBarndoorData>,
        IPlacedObjectLightBarndoorDataGetter
    {
        new Single Bottom { get; set; }
        new Single Right { get; set; }
        new Single Left { get; set; }
        new Single Top { get; set; }
        new Single FalloffIntensity { get; set; }
        new Boolean HasBarndoor { get; set; }
        new Boolean HasFalloff { get; set; }
        new UInt16 Unused { get; set; }
    }

    public partial interface IPlacedObjectLightBarndoorDataGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IPlacedObjectLightBarndoorDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => PlacedObjectLightBarndoorData_Registration.Instance;
        Single Bottom { get; }
        Single Right { get; }
        Single Left { get; }
        Single Top { get; }
        Single FalloffIntensity { get; }
        Boolean HasBarndoor { get; }
        Boolean HasFalloff { get; }
        UInt16 Unused { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PlacedObjectLightBarndoorDataMixIn
    {
        public static void Clear(this IPlacedObjectLightBarndoorData item)
        {
            ((PlacedObjectLightBarndoorDataSetterCommon)((IPlacedObjectLightBarndoorDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PlacedObjectLightBarndoorData.Mask<bool> GetEqualsMask(
            this IPlacedObjectLightBarndoorDataGetter item,
            IPlacedObjectLightBarndoorDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlacedObjectLightBarndoorDataCommon)((IPlacedObjectLightBarndoorDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IPlacedObjectLightBarndoorDataGetter item,
            string? name = null,
            PlacedObjectLightBarndoorData.Mask<bool>? printMask = null)
        {
            return ((PlacedObjectLightBarndoorDataCommon)((IPlacedObjectLightBarndoorDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IPlacedObjectLightBarndoorDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlacedObjectLightBarndoorData.Mask<bool>? printMask = null)
        {
            ((PlacedObjectLightBarndoorDataCommon)((IPlacedObjectLightBarndoorDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPlacedObjectLightBarndoorDataGetter item,
            IPlacedObjectLightBarndoorDataGetter rhs,
            PlacedObjectLightBarndoorData.TranslationMask? equalsMask = null)
        {
            return ((PlacedObjectLightBarndoorDataCommon)((IPlacedObjectLightBarndoorDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPlacedObjectLightBarndoorData lhs,
            IPlacedObjectLightBarndoorDataGetter rhs)
        {
            ((PlacedObjectLightBarndoorDataSetterTranslationCommon)((IPlacedObjectLightBarndoorDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPlacedObjectLightBarndoorData lhs,
            IPlacedObjectLightBarndoorDataGetter rhs,
            PlacedObjectLightBarndoorData.TranslationMask? copyMask = null)
        {
            ((PlacedObjectLightBarndoorDataSetterTranslationCommon)((IPlacedObjectLightBarndoorDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPlacedObjectLightBarndoorData lhs,
            IPlacedObjectLightBarndoorDataGetter rhs,
            out PlacedObjectLightBarndoorData.ErrorMask errorMask,
            PlacedObjectLightBarndoorData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PlacedObjectLightBarndoorDataSetterTranslationCommon)((IPlacedObjectLightBarndoorDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PlacedObjectLightBarndoorData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPlacedObjectLightBarndoorData lhs,
            IPlacedObjectLightBarndoorDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PlacedObjectLightBarndoorDataSetterTranslationCommon)((IPlacedObjectLightBarndoorDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PlacedObjectLightBarndoorData DeepCopy(
            this IPlacedObjectLightBarndoorDataGetter item,
            PlacedObjectLightBarndoorData.TranslationMask? copyMask = null)
        {
            return ((PlacedObjectLightBarndoorDataSetterTranslationCommon)((IPlacedObjectLightBarndoorDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PlacedObjectLightBarndoorData DeepCopy(
            this IPlacedObjectLightBarndoorDataGetter item,
            out PlacedObjectLightBarndoorData.ErrorMask errorMask,
            PlacedObjectLightBarndoorData.TranslationMask? copyMask = null)
        {
            return ((PlacedObjectLightBarndoorDataSetterTranslationCommon)((IPlacedObjectLightBarndoorDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PlacedObjectLightBarndoorData DeepCopy(
            this IPlacedObjectLightBarndoorDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PlacedObjectLightBarndoorDataSetterTranslationCommon)((IPlacedObjectLightBarndoorDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPlacedObjectLightBarndoorData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((PlacedObjectLightBarndoorDataSetterCommon)((IPlacedObjectLightBarndoorDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum PlacedObjectLightBarndoorData_FieldIndex
    {
        Bottom = 0,
        Right = 1,
        Left = 2,
        Top = 3,
        FalloffIntensity = 4,
        HasBarndoor = 5,
        HasFalloff = 6,
        Unused = 7,
    }
    #endregion

    #region Registration
    internal partial class PlacedObjectLightBarndoorData_Registration : ILoquiRegistration
    {
        public static readonly PlacedObjectLightBarndoorData_Registration Instance = new PlacedObjectLightBarndoorData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(PlacedObjectLightBarndoorData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlacedObjectLightBarndoorData.ErrorMask);

        public static readonly Type ClassType = typeof(PlacedObjectLightBarndoorData);

        public static readonly Type GetterType = typeof(IPlacedObjectLightBarndoorDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlacedObjectLightBarndoorData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.PlacedObjectLightBarndoorData";

        public const string Name = "PlacedObjectLightBarndoorData";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.XLBD;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.XLBD);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(PlacedObjectLightBarndoorDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class PlacedObjectLightBarndoorDataSetterCommon
    {
        public static readonly PlacedObjectLightBarndoorDataSetterCommon Instance = new PlacedObjectLightBarndoorDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlacedObjectLightBarndoorData item)
        {
            ClearPartial();
            item.Bottom = default(Single);
            item.Right = default(Single);
            item.Left = default(Single);
            item.Top = default(Single);
            item.FalloffIntensity = default(Single);
            item.HasBarndoor = default(Boolean);
            item.HasFalloff = default(Boolean);
            item.Unused = default(UInt16);
        }
        
        #region Mutagen
        public void RemapLinks(IPlacedObjectLightBarndoorData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPlacedObjectLightBarndoorData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.XLBD),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: PlacedObjectLightBarndoorDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class PlacedObjectLightBarndoorDataCommon
    {
        public static readonly PlacedObjectLightBarndoorDataCommon Instance = new PlacedObjectLightBarndoorDataCommon();

        public PlacedObjectLightBarndoorData.Mask<bool> GetEqualsMask(
            IPlacedObjectLightBarndoorDataGetter item,
            IPlacedObjectLightBarndoorDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlacedObjectLightBarndoorData.Mask<bool>(false);
            ((PlacedObjectLightBarndoorDataCommon)((IPlacedObjectLightBarndoorDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlacedObjectLightBarndoorDataGetter item,
            IPlacedObjectLightBarndoorDataGetter rhs,
            PlacedObjectLightBarndoorData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Bottom = item.Bottom.EqualsWithin(rhs.Bottom);
            ret.Right = item.Right.EqualsWithin(rhs.Right);
            ret.Left = item.Left.EqualsWithin(rhs.Left);
            ret.Top = item.Top.EqualsWithin(rhs.Top);
            ret.FalloffIntensity = item.FalloffIntensity.EqualsWithin(rhs.FalloffIntensity);
            ret.HasBarndoor = item.HasBarndoor == rhs.HasBarndoor;
            ret.HasFalloff = item.HasFalloff == rhs.HasFalloff;
            ret.Unused = item.Unused == rhs.Unused;
        }
        
        public string Print(
            IPlacedObjectLightBarndoorDataGetter item,
            string? name = null,
            PlacedObjectLightBarndoorData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IPlacedObjectLightBarndoorDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlacedObjectLightBarndoorData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"PlacedObjectLightBarndoorData =>");
            }
            else
            {
                sb.AppendLine($"{name} (PlacedObjectLightBarndoorData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IPlacedObjectLightBarndoorDataGetter item,
            StructuredStringBuilder sb,
            PlacedObjectLightBarndoorData.Mask<bool>? printMask = null)
        {
            if (printMask?.Bottom ?? true)
            {
                sb.AppendItem(item.Bottom, "Bottom");
            }
            if (printMask?.Right ?? true)
            {
                sb.AppendItem(item.Right, "Right");
            }
            if (printMask?.Left ?? true)
            {
                sb.AppendItem(item.Left, "Left");
            }
            if (printMask?.Top ?? true)
            {
                sb.AppendItem(item.Top, "Top");
            }
            if (printMask?.FalloffIntensity ?? true)
            {
                sb.AppendItem(item.FalloffIntensity, "FalloffIntensity");
            }
            if (printMask?.HasBarndoor ?? true)
            {
                sb.AppendItem(item.HasBarndoor, "HasBarndoor");
            }
            if (printMask?.HasFalloff ?? true)
            {
                sb.AppendItem(item.HasFalloff, "HasFalloff");
            }
            if (printMask?.Unused ?? true)
            {
                sb.AppendItem(item.Unused, "Unused");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlacedObjectLightBarndoorDataGetter? lhs,
            IPlacedObjectLightBarndoorDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectLightBarndoorData_FieldIndex.Bottom) ?? true))
            {
                if (!lhs.Bottom.EqualsWithin(rhs.Bottom)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectLightBarndoorData_FieldIndex.Right) ?? true))
            {
                if (!lhs.Right.EqualsWithin(rhs.Right)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectLightBarndoorData_FieldIndex.Left) ?? true))
            {
                if (!lhs.Left.EqualsWithin(rhs.Left)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectLightBarndoorData_FieldIndex.Top) ?? true))
            {
                if (!lhs.Top.EqualsWithin(rhs.Top)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectLightBarndoorData_FieldIndex.FalloffIntensity) ?? true))
            {
                if (!lhs.FalloffIntensity.EqualsWithin(rhs.FalloffIntensity)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectLightBarndoorData_FieldIndex.HasBarndoor) ?? true))
            {
                if (lhs.HasBarndoor != rhs.HasBarndoor) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectLightBarndoorData_FieldIndex.HasFalloff) ?? true))
            {
                if (lhs.HasFalloff != rhs.HasFalloff) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectLightBarndoorData_FieldIndex.Unused) ?? true))
            {
                if (lhs.Unused != rhs.Unused) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IPlacedObjectLightBarndoorDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Bottom);
            hash.Add(item.Right);
            hash.Add(item.Left);
            hash.Add(item.Top);
            hash.Add(item.FalloffIntensity);
            hash.Add(item.HasBarndoor);
            hash.Add(item.HasFalloff);
            hash.Add(item.Unused);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return PlacedObjectLightBarndoorData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IPlacedObjectLightBarndoorDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class PlacedObjectLightBarndoorDataSetterTranslationCommon
    {
        public static readonly PlacedObjectLightBarndoorDataSetterTranslationCommon Instance = new PlacedObjectLightBarndoorDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPlacedObjectLightBarndoorData item,
            IPlacedObjectLightBarndoorDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectLightBarndoorData_FieldIndex.Bottom) ?? true))
            {
                item.Bottom = rhs.Bottom;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectLightBarndoorData_FieldIndex.Right) ?? true))
            {
                item.Right = rhs.Right;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectLightBarndoorData_FieldIndex.Left) ?? true))
            {
                item.Left = rhs.Left;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectLightBarndoorData_FieldIndex.Top) ?? true))
            {
                item.Top = rhs.Top;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectLightBarndoorData_FieldIndex.FalloffIntensity) ?? true))
            {
                item.FalloffIntensity = rhs.FalloffIntensity;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectLightBarndoorData_FieldIndex.HasBarndoor) ?? true))
            {
                item.HasBarndoor = rhs.HasBarndoor;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectLightBarndoorData_FieldIndex.HasFalloff) ?? true))
            {
                item.HasFalloff = rhs.HasFalloff;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectLightBarndoorData_FieldIndex.Unused) ?? true))
            {
                item.Unused = rhs.Unused;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IPlacedObjectLightBarndoorData item,
            IPlacedObjectLightBarndoorDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public PlacedObjectLightBarndoorData DeepCopy(
            IPlacedObjectLightBarndoorDataGetter item,
            PlacedObjectLightBarndoorData.TranslationMask? copyMask = null)
        {
            PlacedObjectLightBarndoorData ret = (PlacedObjectLightBarndoorData)((PlacedObjectLightBarndoorDataCommon)((IPlacedObjectLightBarndoorDataGetter)item).CommonInstance()!).GetNew();
            ((PlacedObjectLightBarndoorDataSetterTranslationCommon)((IPlacedObjectLightBarndoorDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PlacedObjectLightBarndoorData DeepCopy(
            IPlacedObjectLightBarndoorDataGetter item,
            out PlacedObjectLightBarndoorData.ErrorMask errorMask,
            PlacedObjectLightBarndoorData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PlacedObjectLightBarndoorData ret = (PlacedObjectLightBarndoorData)((PlacedObjectLightBarndoorDataCommon)((IPlacedObjectLightBarndoorDataGetter)item).CommonInstance()!).GetNew();
            ((PlacedObjectLightBarndoorDataSetterTranslationCommon)((IPlacedObjectLightBarndoorDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PlacedObjectLightBarndoorData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PlacedObjectLightBarndoorData DeepCopy(
            IPlacedObjectLightBarndoorDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PlacedObjectLightBarndoorData ret = (PlacedObjectLightBarndoorData)((PlacedObjectLightBarndoorDataCommon)((IPlacedObjectLightBarndoorDataGetter)item).CommonInstance()!).GetNew();
            ((PlacedObjectLightBarndoorDataSetterTranslationCommon)((IPlacedObjectLightBarndoorDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class PlacedObjectLightBarndoorData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedObjectLightBarndoorData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => PlacedObjectLightBarndoorData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PlacedObjectLightBarndoorDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return PlacedObjectLightBarndoorDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PlacedObjectLightBarndoorDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPlacedObjectLightBarndoorDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IPlacedObjectLightBarndoorDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IPlacedObjectLightBarndoorDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class PlacedObjectLightBarndoorDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly PlacedObjectLightBarndoorDataBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IPlacedObjectLightBarndoorDataGetter item,
            MutagenWriter writer)
        {
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Bottom);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Right);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Left);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Top);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FalloffIntensity);
            writer.Write(item.HasBarndoor);
            writer.Write(item.HasFalloff);
            writer.Write(item.Unused);
        }

        public void Write(
            MutagenWriter writer,
            IPlacedObjectLightBarndoorDataGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.XLBD),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IPlacedObjectLightBarndoorDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class PlacedObjectLightBarndoorDataBinaryCreateTranslation
    {
        public static readonly PlacedObjectLightBarndoorDataBinaryCreateTranslation Instance = new PlacedObjectLightBarndoorDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IPlacedObjectLightBarndoorData item,
            MutagenFrame frame)
        {
            item.Bottom = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Right = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Left = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Top = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.FalloffIntensity = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.HasBarndoor = frame.ReadBoolean();
            item.HasFalloff = frame.ReadBoolean();
            item.Unused = frame.ReadUInt16();
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class PlacedObjectLightBarndoorDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IPlacedObjectLightBarndoorDataGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlacedObjectLightBarndoorDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class PlacedObjectLightBarndoorDataBinaryOverlay :
        PluginBinaryOverlay,
        IPlacedObjectLightBarndoorDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedObjectLightBarndoorData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => PlacedObjectLightBarndoorData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PlacedObjectLightBarndoorDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PlacedObjectLightBarndoorDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPlacedObjectLightBarndoorDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IPlacedObjectLightBarndoorDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IPlacedObjectLightBarndoorDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PlacedObjectLightBarndoorDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlacedObjectLightBarndoorDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Single Bottom => _structData.Slice(0x0, 0x4).Float();
        public Single Right => _structData.Slice(0x4, 0x4).Float();
        public Single Left => _structData.Slice(0x8, 0x4).Float();
        public Single Top => _structData.Slice(0xC, 0x4).Float();
        public Single FalloffIntensity => _structData.Slice(0x10, 0x4).Float();
        public Boolean HasBarndoor => _structData.Slice(0x14, 0x1)[0] >= 1;
        public Boolean HasFalloff => _structData.Slice(0x15, 0x1)[0] >= 1;
        public UInt16 Unused => BinaryPrimitives.ReadUInt16LittleEndian(_structData.Slice(0x16, 0x2));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PlacedObjectLightBarndoorDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IPlacedObjectLightBarndoorDataGetter PlacedObjectLightBarndoorDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x18,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new PlacedObjectLightBarndoorDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x18 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IPlacedObjectLightBarndoorDataGetter PlacedObjectLightBarndoorDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return PlacedObjectLightBarndoorDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlacedObjectLightBarndoorDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPlacedObjectLightBarndoorDataGetter rhs) return false;
            return ((PlacedObjectLightBarndoorDataCommon)((IPlacedObjectLightBarndoorDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlacedObjectLightBarndoorDataGetter? obj)
        {
            return ((PlacedObjectLightBarndoorDataCommon)((IPlacedObjectLightBarndoorDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlacedObjectLightBarndoorDataCommon)((IPlacedObjectLightBarndoorDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

