/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class TimerSceneAction :
        ASceneAction,
        IEquatable<ITimerSceneActionGetter>,
        ILoquiObjectSetter<TimerSceneAction>,
        ITimerSceneAction
    {
        #region Ctor
        public TimerSceneAction()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MaxSeconds
        public Single? MaxSeconds { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ITimerSceneActionGetter.MaxSeconds => this.MaxSeconds;
        #endregion
        #region MinSeconds
        public Single? MinSeconds { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ITimerSceneActionGetter.MinSeconds => this.MinSeconds;
        #endregion
        #region HNAM
        public Boolean HNAM { get; set; } = default(Boolean);
        #endregion
        #region SCQS
        public Int16? SCQS { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int16? ITimerSceneActionGetter.SCQS => this.SCQS;
        #endregion
        #region INTV
        public Int16? INTV { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int16? ITimerSceneActionGetter.INTV => this.INTV;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TimerSceneActionMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ITimerSceneActionGetter rhs) return false;
            return ((TimerSceneActionCommon)((ITimerSceneActionGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITimerSceneActionGetter? obj)
        {
            return ((TimerSceneActionCommon)((ITimerSceneActionGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TimerSceneActionCommon)((ITimerSceneActionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            ASceneAction.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.MaxSeconds = initialValue;
                this.MinSeconds = initialValue;
                this.HNAM = initialValue;
                this.SCQS = initialValue;
                this.INTV = initialValue;
            }

            public Mask(
                TItem Name,
                TItem SceneNotes,
                TItem AliasID,
                TItem Index,
                TItem Flags,
                TItem StartPhase,
                TItem EndPhase,
                TItem MaxSeconds,
                TItem MinSeconds,
                TItem HNAM,
                TItem SCQS,
                TItem INTV)
            : base(
                Name: Name,
                SceneNotes: SceneNotes,
                AliasID: AliasID,
                Index: Index,
                Flags: Flags,
                StartPhase: StartPhase,
                EndPhase: EndPhase)
            {
                this.MaxSeconds = MaxSeconds;
                this.MinSeconds = MinSeconds;
                this.HNAM = HNAM;
                this.SCQS = SCQS;
                this.INTV = INTV;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem MaxSeconds;
            public TItem MinSeconds;
            public TItem HNAM;
            public TItem SCQS;
            public TItem INTV;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.MaxSeconds, rhs.MaxSeconds)) return false;
                if (!object.Equals(this.MinSeconds, rhs.MinSeconds)) return false;
                if (!object.Equals(this.HNAM, rhs.HNAM)) return false;
                if (!object.Equals(this.SCQS, rhs.SCQS)) return false;
                if (!object.Equals(this.INTV, rhs.INTV)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.MaxSeconds);
                hash.Add(this.MinSeconds);
                hash.Add(this.HNAM);
                hash.Add(this.SCQS);
                hash.Add(this.INTV);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.MaxSeconds)) return false;
                if (!eval(this.MinSeconds)) return false;
                if (!eval(this.HNAM)) return false;
                if (!eval(this.SCQS)) return false;
                if (!eval(this.INTV)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.MaxSeconds)) return true;
                if (eval(this.MinSeconds)) return true;
                if (eval(this.HNAM)) return true;
                if (eval(this.SCQS)) return true;
                if (eval(this.INTV)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new TimerSceneAction.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.MaxSeconds = eval(this.MaxSeconds);
                obj.MinSeconds = eval(this.MinSeconds);
                obj.HNAM = eval(this.HNAM);
                obj.SCQS = eval(this.SCQS);
                obj.INTV = eval(this.INTV);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(TimerSceneAction.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, TimerSceneAction.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(TimerSceneAction.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.MaxSeconds ?? true)
                    {
                        sb.AppendItem(MaxSeconds, "MaxSeconds");
                    }
                    if (printMask?.MinSeconds ?? true)
                    {
                        sb.AppendItem(MinSeconds, "MinSeconds");
                    }
                    if (printMask?.HNAM ?? true)
                    {
                        sb.AppendItem(HNAM, "HNAM");
                    }
                    if (printMask?.SCQS ?? true)
                    {
                        sb.AppendItem(SCQS, "SCQS");
                    }
                    if (printMask?.INTV ?? true)
                    {
                        sb.AppendItem(INTV, "INTV");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            ASceneAction.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? MaxSeconds;
            public Exception? MinSeconds;
            public Exception? HNAM;
            public Exception? SCQS;
            public Exception? INTV;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                TimerSceneAction_FieldIndex enu = (TimerSceneAction_FieldIndex)index;
                switch (enu)
                {
                    case TimerSceneAction_FieldIndex.MaxSeconds:
                        return MaxSeconds;
                    case TimerSceneAction_FieldIndex.MinSeconds:
                        return MinSeconds;
                    case TimerSceneAction_FieldIndex.HNAM:
                        return HNAM;
                    case TimerSceneAction_FieldIndex.SCQS:
                        return SCQS;
                    case TimerSceneAction_FieldIndex.INTV:
                        return INTV;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                TimerSceneAction_FieldIndex enu = (TimerSceneAction_FieldIndex)index;
                switch (enu)
                {
                    case TimerSceneAction_FieldIndex.MaxSeconds:
                        this.MaxSeconds = ex;
                        break;
                    case TimerSceneAction_FieldIndex.MinSeconds:
                        this.MinSeconds = ex;
                        break;
                    case TimerSceneAction_FieldIndex.HNAM:
                        this.HNAM = ex;
                        break;
                    case TimerSceneAction_FieldIndex.SCQS:
                        this.SCQS = ex;
                        break;
                    case TimerSceneAction_FieldIndex.INTV:
                        this.INTV = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                TimerSceneAction_FieldIndex enu = (TimerSceneAction_FieldIndex)index;
                switch (enu)
                {
                    case TimerSceneAction_FieldIndex.MaxSeconds:
                        this.MaxSeconds = (Exception?)obj;
                        break;
                    case TimerSceneAction_FieldIndex.MinSeconds:
                        this.MinSeconds = (Exception?)obj;
                        break;
                    case TimerSceneAction_FieldIndex.HNAM:
                        this.HNAM = (Exception?)obj;
                        break;
                    case TimerSceneAction_FieldIndex.SCQS:
                        this.SCQS = (Exception?)obj;
                        break;
                    case TimerSceneAction_FieldIndex.INTV:
                        this.INTV = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (MaxSeconds != null) return true;
                if (MinSeconds != null) return true;
                if (HNAM != null) return true;
                if (SCQS != null) return true;
                if (INTV != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(MaxSeconds, "MaxSeconds");
                }
                {
                    sb.AppendItem(MinSeconds, "MinSeconds");
                }
                {
                    sb.AppendItem(HNAM, "HNAM");
                }
                {
                    sb.AppendItem(SCQS, "SCQS");
                }
                {
                    sb.AppendItem(INTV, "INTV");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.MaxSeconds = this.MaxSeconds.Combine(rhs.MaxSeconds);
                ret.MinSeconds = this.MinSeconds.Combine(rhs.MinSeconds);
                ret.HNAM = this.HNAM.Combine(rhs.HNAM);
                ret.SCQS = this.SCQS.Combine(rhs.SCQS);
                ret.INTV = this.INTV.Combine(rhs.INTV);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ASceneAction.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool MaxSeconds;
            public bool MinSeconds;
            public bool HNAM;
            public bool SCQS;
            public bool INTV;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.MaxSeconds = defaultOn;
                this.MinSeconds = defaultOn;
                this.HNAM = defaultOn;
                this.SCQS = defaultOn;
                this.INTV = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((MaxSeconds, null));
                ret.Add((MinSeconds, null));
                ret.Add((HNAM, null));
                ret.Add((SCQS, null));
                ret.Add((INTV, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TimerSceneActionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TimerSceneActionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static TimerSceneAction CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new TimerSceneAction();
            ((TimerSceneActionSetterCommon)((ITimerSceneActionGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out TimerSceneAction item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((TimerSceneActionSetterCommon)((ITimerSceneActionGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new TimerSceneAction GetNew()
        {
            return new TimerSceneAction();
        }

    }
    #endregion

    #region Interface
    public partial interface ITimerSceneAction :
        IASceneAction,
        ILoquiObjectSetter<ITimerSceneAction>,
        INamedRequired,
        ITimerSceneActionGetter
    {
        new Single? MaxSeconds { get; set; }
        new Single? MinSeconds { get; set; }
        new Boolean HNAM { get; set; }
        new Int16? SCQS { get; set; }
        new Int16? INTV { get; set; }
    }

    public partial interface ITimerSceneActionGetter :
        IASceneActionGetter,
        IBinaryItem,
        ILoquiObject<ITimerSceneActionGetter>,
        INamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => TimerSceneAction_Registration.Instance;
        Single? MaxSeconds { get; }
        Single? MinSeconds { get; }
        Boolean HNAM { get; }
        Int16? SCQS { get; }
        Int16? INTV { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class TimerSceneActionMixIn
    {
        public static void Clear(this ITimerSceneAction item)
        {
            ((TimerSceneActionSetterCommon)((ITimerSceneActionGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static TimerSceneAction.Mask<bool> GetEqualsMask(
            this ITimerSceneActionGetter item,
            ITimerSceneActionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TimerSceneActionCommon)((ITimerSceneActionGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ITimerSceneActionGetter item,
            string? name = null,
            TimerSceneAction.Mask<bool>? printMask = null)
        {
            return ((TimerSceneActionCommon)((ITimerSceneActionGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ITimerSceneActionGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            TimerSceneAction.Mask<bool>? printMask = null)
        {
            ((TimerSceneActionCommon)((ITimerSceneActionGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ITimerSceneActionGetter item,
            ITimerSceneActionGetter rhs,
            TimerSceneAction.TranslationMask? equalsMask = null)
        {
            return ((TimerSceneActionCommon)((ITimerSceneActionGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ITimerSceneAction lhs,
            ITimerSceneActionGetter rhs,
            out TimerSceneAction.ErrorMask errorMask,
            TimerSceneAction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TimerSceneActionSetterTranslationCommon)((ITimerSceneActionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = TimerSceneAction.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITimerSceneAction lhs,
            ITimerSceneActionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TimerSceneActionSetterTranslationCommon)((ITimerSceneActionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static TimerSceneAction DeepCopy(
            this ITimerSceneActionGetter item,
            TimerSceneAction.TranslationMask? copyMask = null)
        {
            return ((TimerSceneActionSetterTranslationCommon)((ITimerSceneActionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static TimerSceneAction DeepCopy(
            this ITimerSceneActionGetter item,
            out TimerSceneAction.ErrorMask errorMask,
            TimerSceneAction.TranslationMask? copyMask = null)
        {
            return ((TimerSceneActionSetterTranslationCommon)((ITimerSceneActionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static TimerSceneAction DeepCopy(
            this ITimerSceneActionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TimerSceneActionSetterTranslationCommon)((ITimerSceneActionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ITimerSceneAction item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((TimerSceneActionSetterCommon)((ITimerSceneActionGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum TimerSceneAction_FieldIndex
    {
        Name = 0,
        SceneNotes = 1,
        AliasID = 2,
        Index = 3,
        Flags = 4,
        StartPhase = 5,
        EndPhase = 6,
        MaxSeconds = 7,
        MinSeconds = 8,
        HNAM = 9,
        SCQS = 10,
        INTV = 11,
    }
    #endregion

    #region Registration
    internal partial class TimerSceneAction_Registration : ILoquiRegistration
    {
        public static readonly TimerSceneAction_Registration Instance = new TimerSceneAction_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 12;

        public static readonly Type MaskType = typeof(TimerSceneAction.Mask<>);

        public static readonly Type ErrorMaskType = typeof(TimerSceneAction.ErrorMask);

        public static readonly Type ClassType = typeof(TimerSceneAction);

        public static readonly Type GetterType = typeof(ITimerSceneActionGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITimerSceneAction);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.TimerSceneAction";

        public const string Name = "TimerSceneAction";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.NAM0;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.NAM0);
            var all = RecordCollection.Factory(
                RecordTypes.NAM0,
                RecordTypes.SNAM,
                RecordTypes.TNAM,
                RecordTypes.HNAM,
                RecordTypes.SCQS,
                RecordTypes.INTV);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(TimerSceneActionBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class TimerSceneActionSetterCommon : ASceneActionSetterCommon
    {
        public new static readonly TimerSceneActionSetterCommon Instance = new TimerSceneActionSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITimerSceneAction item)
        {
            ClearPartial();
            item.MaxSeconds = default;
            item.MinSeconds = default;
            item.HNAM = default(Boolean);
            item.SCQS = default;
            item.INTV = default;
            base.Clear(item);
        }
        
        public override void Clear(IASceneAction item)
        {
            Clear(item: (ITimerSceneAction)item);
        }
        
        #region Mutagen
        public void RemapLinks(ITimerSceneAction obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ITimerSceneAction item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: TimerSceneActionBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IASceneAction item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (TimerSceneAction)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class TimerSceneActionCommon : ASceneActionCommon
    {
        public new static readonly TimerSceneActionCommon Instance = new TimerSceneActionCommon();

        public TimerSceneAction.Mask<bool> GetEqualsMask(
            ITimerSceneActionGetter item,
            ITimerSceneActionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TimerSceneAction.Mask<bool>(false);
            ((TimerSceneActionCommon)((ITimerSceneActionGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITimerSceneActionGetter item,
            ITimerSceneActionGetter rhs,
            TimerSceneAction.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.MaxSeconds = item.MaxSeconds.EqualsWithin(rhs.MaxSeconds);
            ret.MinSeconds = item.MinSeconds.EqualsWithin(rhs.MinSeconds);
            ret.HNAM = item.HNAM == rhs.HNAM;
            ret.SCQS = item.SCQS == rhs.SCQS;
            ret.INTV = item.INTV == rhs.INTV;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ITimerSceneActionGetter item,
            string? name = null,
            TimerSceneAction.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ITimerSceneActionGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            TimerSceneAction.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"TimerSceneAction =>");
            }
            else
            {
                sb.AppendLine($"{name} (TimerSceneAction) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ITimerSceneActionGetter item,
            StructuredStringBuilder sb,
            TimerSceneAction.Mask<bool>? printMask = null)
        {
            ASceneActionCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.MaxSeconds ?? true)
                && item.MaxSeconds is {} MaxSecondsItem)
            {
                sb.AppendItem(MaxSecondsItem, "MaxSeconds");
            }
            if ((printMask?.MinSeconds ?? true)
                && item.MinSeconds is {} MinSecondsItem)
            {
                sb.AppendItem(MinSecondsItem, "MinSeconds");
            }
            if (printMask?.HNAM ?? true)
            {
                sb.AppendItem(item.HNAM, "HNAM");
            }
            if ((printMask?.SCQS ?? true)
                && item.SCQS is {} SCQSItem)
            {
                sb.AppendItem(SCQSItem, "SCQS");
            }
            if ((printMask?.INTV ?? true)
                && item.INTV is {} INTVItem)
            {
                sb.AppendItem(INTVItem, "INTV");
            }
        }
        
        public static TimerSceneAction_FieldIndex ConvertFieldIndex(ASceneAction_FieldIndex index)
        {
            switch (index)
            {
                case ASceneAction_FieldIndex.Name:
                    return (TimerSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.SceneNotes:
                    return (TimerSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.AliasID:
                    return (TimerSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.Index:
                    return (TimerSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.Flags:
                    return (TimerSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.StartPhase:
                    return (TimerSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.EndPhase:
                    return (TimerSceneAction_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITimerSceneActionGetter? lhs,
            ITimerSceneActionGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IASceneActionGetter)lhs, (IASceneActionGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)TimerSceneAction_FieldIndex.MaxSeconds) ?? true))
            {
                if (!lhs.MaxSeconds.EqualsWithin(rhs.MaxSeconds)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TimerSceneAction_FieldIndex.MinSeconds) ?? true))
            {
                if (!lhs.MinSeconds.EqualsWithin(rhs.MinSeconds)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TimerSceneAction_FieldIndex.HNAM) ?? true))
            {
                if (lhs.HNAM != rhs.HNAM) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TimerSceneAction_FieldIndex.SCQS) ?? true))
            {
                if (lhs.SCQS != rhs.SCQS) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TimerSceneAction_FieldIndex.INTV) ?? true))
            {
                if (lhs.INTV != rhs.INTV) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IASceneActionGetter? lhs,
            IASceneActionGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ITimerSceneActionGetter?)lhs,
                rhs: rhs as ITimerSceneActionGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ITimerSceneActionGetter item)
        {
            var hash = new HashCode();
            if (item.MaxSeconds is {} MaxSecondsitem)
            {
                hash.Add(MaxSecondsitem);
            }
            if (item.MinSeconds is {} MinSecondsitem)
            {
                hash.Add(MinSecondsitem);
            }
            hash.Add(item.HNAM);
            if (item.SCQS is {} SCQSitem)
            {
                hash.Add(SCQSitem);
            }
            if (item.INTV is {} INTVitem)
            {
                hash.Add(INTVitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IASceneActionGetter item)
        {
            return GetHashCode(item: (ITimerSceneActionGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return TimerSceneAction.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ITimerSceneActionGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class TimerSceneActionSetterTranslationCommon : ASceneActionSetterTranslationCommon
    {
        public new static readonly TimerSceneActionSetterTranslationCommon Instance = new TimerSceneActionSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ITimerSceneAction item,
            ITimerSceneActionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IASceneAction)item,
                (IASceneActionGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)TimerSceneAction_FieldIndex.MaxSeconds) ?? true))
            {
                item.MaxSeconds = rhs.MaxSeconds;
            }
            if ((copyMask?.GetShouldTranslate((int)TimerSceneAction_FieldIndex.MinSeconds) ?? true))
            {
                item.MinSeconds = rhs.MinSeconds;
            }
            if ((copyMask?.GetShouldTranslate((int)TimerSceneAction_FieldIndex.HNAM) ?? true))
            {
                item.HNAM = rhs.HNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)TimerSceneAction_FieldIndex.SCQS) ?? true))
            {
                item.SCQS = rhs.SCQS;
            }
            if ((copyMask?.GetShouldTranslate((int)TimerSceneAction_FieldIndex.INTV) ?? true))
            {
                item.INTV = rhs.INTV;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ITimerSceneAction item,
            ITimerSceneActionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        
        public override void DeepCopyIn(
            IASceneAction item,
            IASceneActionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITimerSceneAction)item,
                rhs: (ITimerSceneActionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public TimerSceneAction DeepCopy(
            ITimerSceneActionGetter item,
            TimerSceneAction.TranslationMask? copyMask = null)
        {
            TimerSceneAction ret = (TimerSceneAction)((TimerSceneActionCommon)((ITimerSceneActionGetter)item).CommonInstance()!).GetNew();
            ((TimerSceneActionSetterTranslationCommon)((ITimerSceneActionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public TimerSceneAction DeepCopy(
            ITimerSceneActionGetter item,
            out TimerSceneAction.ErrorMask errorMask,
            TimerSceneAction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            TimerSceneAction ret = (TimerSceneAction)((TimerSceneActionCommon)((ITimerSceneActionGetter)item).CommonInstance()!).GetNew();
            ((TimerSceneActionSetterTranslationCommon)((ITimerSceneActionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = TimerSceneAction.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public TimerSceneAction DeepCopy(
            ITimerSceneActionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            TimerSceneAction ret = (TimerSceneAction)((TimerSceneActionCommon)((ITimerSceneActionGetter)item).CommonInstance()!).GetNew();
            ((TimerSceneActionSetterTranslationCommon)((ITimerSceneActionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class TimerSceneAction
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TimerSceneAction_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => TimerSceneAction_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TimerSceneActionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return TimerSceneActionSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TimerSceneActionSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class TimerSceneActionBinaryWriteTranslation :
        ASceneActionBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly TimerSceneActionBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ITimerSceneActionGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            ASceneActionBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.MaxSeconds,
                header: translationParams.ConvertToCustom(RecordTypes.SNAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.MinSeconds,
                header: translationParams.ConvertToCustom(RecordTypes.TNAM));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.HNAM,
                header: translationParams.ConvertToCustom(RecordTypes.HNAM));
            Int16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.SCQS,
                header: translationParams.ConvertToCustom(RecordTypes.SCQS));
            Int16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.INTV,
                header: translationParams.ConvertToCustom(RecordTypes.INTV));
        }

        public void Write(
            MutagenWriter writer,
            ITimerSceneActionGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ITimerSceneActionGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IASceneActionGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ITimerSceneActionGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class TimerSceneActionBinaryCreateTranslation : ASceneActionBinaryCreateTranslation
    {
        public new static readonly TimerSceneActionBinaryCreateTranslation Instance = new TimerSceneActionBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            ITimerSceneAction item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.SNAM:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)ASceneAction_FieldIndex.Flags)
                    {
                        return ASceneActionBinaryCreateTranslation.FillBinaryRecordTypes(
                            item: item,
                            frame: frame,
                            lastParsed: lastParsed,
                            recordParseCount: recordParseCount,
                            nextRecordType: nextRecordType,
                            contentLength: contentLength,
                            translationParams: translationParams.WithNoConverter());
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)ASceneAction_FieldIndex.EndPhase)
                    {
                        frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                        item.MaxSeconds = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                        return new ParseResult((int)TimerSceneAction_FieldIndex.MaxSeconds, nextRecordType);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(nextRecordType) ?? 0)
                        {
                            case 0:
                                return ASceneActionBinaryCreateTranslation.FillBinaryRecordTypes(
                                    item: item,
                                    frame: frame,
                                    lastParsed: lastParsed,
                                    recordParseCount: recordParseCount,
                                    nextRecordType: nextRecordType,
                                    contentLength: contentLength,
                                    translationParams: translationParams.WithNoConverter());
                            case 1:
                                frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                                item.MaxSeconds = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                                return new ParseResult((int)TimerSceneAction_FieldIndex.MaxSeconds, nextRecordType);
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MinSeconds = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)TimerSceneAction_FieldIndex.MinSeconds;
                }
                case RecordTypeInts.HNAM:
                {
                    item.HNAM = true;
                    return (int)TimerSceneAction_FieldIndex.HNAM;
                }
                case RecordTypeInts.SCQS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SCQS = frame.ReadInt16();
                    return (int)TimerSceneAction_FieldIndex.SCQS;
                }
                case RecordTypeInts.INTV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.INTV = frame.ReadInt16();
                    return (int)TimerSceneAction_FieldIndex.INTV;
                }
                default:
                    return ASceneActionBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class TimerSceneActionBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class TimerSceneActionBinaryOverlay :
        ASceneActionBinaryOverlay,
        ITimerSceneActionGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TimerSceneAction_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => TimerSceneAction_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TimerSceneActionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TimerSceneActionSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TimerSceneActionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TimerSceneActionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region MaxSeconds
        private int? _MaxSecondsLocation;
        public Single? MaxSeconds => _MaxSecondsLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _MaxSecondsLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region MinSeconds
        private int? _MinSecondsLocation;
        public Single? MinSeconds => _MinSecondsLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _MinSecondsLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region HNAM
        private int? _HNAMLocation;
        public Boolean HNAM => _HNAMLocation.HasValue ? true : default(Boolean);
        #endregion
        #region SCQS
        private int? _SCQSLocation;
        public Int16? SCQS => _SCQSLocation.HasValue ? BinaryPrimitives.ReadInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _SCQSLocation.Value, _package.MetaData.Constants)) : default(Int16?);
        #endregion
        #region INTV
        private int? _INTVLocation;
        public Int16? INTV => _INTVLocation.HasValue ? BinaryPrimitives.ReadInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _INTVLocation.Value, _package.MetaData.Constants)) : default(Int16?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected TimerSceneActionBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ITimerSceneActionGetter TimerSceneActionFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new TimerSceneActionBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ITimerSceneActionGetter TimerSceneActionFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return TimerSceneActionFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.SNAM:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)ASceneAction_FieldIndex.Flags)
                    {
                        return base.FillRecordType(
                            stream: stream,
                            finalPos: finalPos,
                            offset: offset,
                            type: type,
                            lastParsed: lastParsed,
                            recordParseCount: recordParseCount,
                            translationParams: translationParams.WithNoConverter());
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)ASceneAction_FieldIndex.EndPhase)
                    {
                        _MaxSecondsLocation = (stream.Position - offset);
                        return new ParseResult((int)TimerSceneAction_FieldIndex.MaxSeconds, type);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(type) ?? 0)
                        {
                            case 0:
                            {
                                return base.FillRecordType(
                                    stream: stream,
                                    finalPos: finalPos,
                                    offset: offset,
                                    type: type,
                                    lastParsed: lastParsed,
                                    recordParseCount: recordParseCount,
                                    translationParams: translationParams.WithNoConverter());
                            }
                            case 1:
                            {
                                _MaxSecondsLocation = (stream.Position - offset);
                                return new ParseResult((int)TimerSceneAction_FieldIndex.MaxSeconds, type);
                            }
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.TNAM:
                {
                    _MinSecondsLocation = (stream.Position - offset);
                    return (int)TimerSceneAction_FieldIndex.MinSeconds;
                }
                case RecordTypeInts.HNAM:
                {
                    _HNAMLocation = (stream.Position - offset);
                    return (int)TimerSceneAction_FieldIndex.HNAM;
                }
                case RecordTypeInts.SCQS:
                {
                    _SCQSLocation = (stream.Position - offset);
                    return (int)TimerSceneAction_FieldIndex.SCQS;
                }
                case RecordTypeInts.INTV:
                {
                    _INTVLocation = (stream.Position - offset);
                    return (int)TimerSceneAction_FieldIndex.INTV;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TimerSceneActionMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ITimerSceneActionGetter rhs) return false;
            return ((TimerSceneActionCommon)((ITimerSceneActionGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITimerSceneActionGetter? obj)
        {
            return ((TimerSceneActionCommon)((ITimerSceneActionGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TimerSceneActionCommon)((ITimerSceneActionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

