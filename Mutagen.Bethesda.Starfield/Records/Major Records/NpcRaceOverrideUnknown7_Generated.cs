/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class NpcRaceOverrideUnknown7 :
        IEquatable<INpcRaceOverrideUnknown7Getter>,
        ILoquiObjectSetter<NpcRaceOverrideUnknown7>,
        INpcRaceOverrideUnknown7
    {
        #region Ctor
        public NpcRaceOverrideUnknown7()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region UnknownUInt8
        public Byte UnknownUInt8 { get; set; } = default(Byte);
        #endregion
        #region UnknownFloat1
        public Single UnknownFloat1 { get; set; } = default(Single);
        #endregion
        #region UnknownFloat2
        public Single UnknownFloat2 { get; set; } = default(Single);
        #endregion
        #region UnknownFloat3
        public Single UnknownFloat3 { get; set; } = default(Single);
        #endregion
        #region UnknownFloat4
        public Single UnknownFloat4 { get; set; } = default(Single);
        #endregion
        #region UnknownFloat5
        public Single UnknownFloat5 { get; set; } = default(Single);
        #endregion
        #region UnknownFloat6
        public Single UnknownFloat6 { get; set; } = default(Single);
        #endregion
        #region UnknownFloat7
        public Single UnknownFloat7 { get; set; } = default(Single);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NpcRaceOverrideUnknown7MixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INpcRaceOverrideUnknown7Getter rhs) return false;
            return ((NpcRaceOverrideUnknown7Common)((INpcRaceOverrideUnknown7Getter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INpcRaceOverrideUnknown7Getter? obj)
        {
            return ((NpcRaceOverrideUnknown7Common)((INpcRaceOverrideUnknown7Getter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NpcRaceOverrideUnknown7Common)((INpcRaceOverrideUnknown7Getter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.UnknownUInt8 = initialValue;
                this.UnknownFloat1 = initialValue;
                this.UnknownFloat2 = initialValue;
                this.UnknownFloat3 = initialValue;
                this.UnknownFloat4 = initialValue;
                this.UnknownFloat5 = initialValue;
                this.UnknownFloat6 = initialValue;
                this.UnknownFloat7 = initialValue;
            }

            public Mask(
                TItem UnknownUInt8,
                TItem UnknownFloat1,
                TItem UnknownFloat2,
                TItem UnknownFloat3,
                TItem UnknownFloat4,
                TItem UnknownFloat5,
                TItem UnknownFloat6,
                TItem UnknownFloat7)
            {
                this.UnknownUInt8 = UnknownUInt8;
                this.UnknownFloat1 = UnknownFloat1;
                this.UnknownFloat2 = UnknownFloat2;
                this.UnknownFloat3 = UnknownFloat3;
                this.UnknownFloat4 = UnknownFloat4;
                this.UnknownFloat5 = UnknownFloat5;
                this.UnknownFloat6 = UnknownFloat6;
                this.UnknownFloat7 = UnknownFloat7;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem UnknownUInt8;
            public TItem UnknownFloat1;
            public TItem UnknownFloat2;
            public TItem UnknownFloat3;
            public TItem UnknownFloat4;
            public TItem UnknownFloat5;
            public TItem UnknownFloat6;
            public TItem UnknownFloat7;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.UnknownUInt8, rhs.UnknownUInt8)) return false;
                if (!object.Equals(this.UnknownFloat1, rhs.UnknownFloat1)) return false;
                if (!object.Equals(this.UnknownFloat2, rhs.UnknownFloat2)) return false;
                if (!object.Equals(this.UnknownFloat3, rhs.UnknownFloat3)) return false;
                if (!object.Equals(this.UnknownFloat4, rhs.UnknownFloat4)) return false;
                if (!object.Equals(this.UnknownFloat5, rhs.UnknownFloat5)) return false;
                if (!object.Equals(this.UnknownFloat6, rhs.UnknownFloat6)) return false;
                if (!object.Equals(this.UnknownFloat7, rhs.UnknownFloat7)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.UnknownUInt8);
                hash.Add(this.UnknownFloat1);
                hash.Add(this.UnknownFloat2);
                hash.Add(this.UnknownFloat3);
                hash.Add(this.UnknownFloat4);
                hash.Add(this.UnknownFloat5);
                hash.Add(this.UnknownFloat6);
                hash.Add(this.UnknownFloat7);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.UnknownUInt8)) return false;
                if (!eval(this.UnknownFloat1)) return false;
                if (!eval(this.UnknownFloat2)) return false;
                if (!eval(this.UnknownFloat3)) return false;
                if (!eval(this.UnknownFloat4)) return false;
                if (!eval(this.UnknownFloat5)) return false;
                if (!eval(this.UnknownFloat6)) return false;
                if (!eval(this.UnknownFloat7)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.UnknownUInt8)) return true;
                if (eval(this.UnknownFloat1)) return true;
                if (eval(this.UnknownFloat2)) return true;
                if (eval(this.UnknownFloat3)) return true;
                if (eval(this.UnknownFloat4)) return true;
                if (eval(this.UnknownFloat5)) return true;
                if (eval(this.UnknownFloat6)) return true;
                if (eval(this.UnknownFloat7)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new NpcRaceOverrideUnknown7.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.UnknownUInt8 = eval(this.UnknownUInt8);
                obj.UnknownFloat1 = eval(this.UnknownFloat1);
                obj.UnknownFloat2 = eval(this.UnknownFloat2);
                obj.UnknownFloat3 = eval(this.UnknownFloat3);
                obj.UnknownFloat4 = eval(this.UnknownFloat4);
                obj.UnknownFloat5 = eval(this.UnknownFloat5);
                obj.UnknownFloat6 = eval(this.UnknownFloat6);
                obj.UnknownFloat7 = eval(this.UnknownFloat7);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(NpcRaceOverrideUnknown7.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, NpcRaceOverrideUnknown7.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(NpcRaceOverrideUnknown7.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.UnknownUInt8 ?? true)
                    {
                        sb.AppendItem(UnknownUInt8, "UnknownUInt8");
                    }
                    if (printMask?.UnknownFloat1 ?? true)
                    {
                        sb.AppendItem(UnknownFloat1, "UnknownFloat1");
                    }
                    if (printMask?.UnknownFloat2 ?? true)
                    {
                        sb.AppendItem(UnknownFloat2, "UnknownFloat2");
                    }
                    if (printMask?.UnknownFloat3 ?? true)
                    {
                        sb.AppendItem(UnknownFloat3, "UnknownFloat3");
                    }
                    if (printMask?.UnknownFloat4 ?? true)
                    {
                        sb.AppendItem(UnknownFloat4, "UnknownFloat4");
                    }
                    if (printMask?.UnknownFloat5 ?? true)
                    {
                        sb.AppendItem(UnknownFloat5, "UnknownFloat5");
                    }
                    if (printMask?.UnknownFloat6 ?? true)
                    {
                        sb.AppendItem(UnknownFloat6, "UnknownFloat6");
                    }
                    if (printMask?.UnknownFloat7 ?? true)
                    {
                        sb.AppendItem(UnknownFloat7, "UnknownFloat7");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? UnknownUInt8;
            public Exception? UnknownFloat1;
            public Exception? UnknownFloat2;
            public Exception? UnknownFloat3;
            public Exception? UnknownFloat4;
            public Exception? UnknownFloat5;
            public Exception? UnknownFloat6;
            public Exception? UnknownFloat7;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                NpcRaceOverrideUnknown7_FieldIndex enu = (NpcRaceOverrideUnknown7_FieldIndex)index;
                switch (enu)
                {
                    case NpcRaceOverrideUnknown7_FieldIndex.UnknownUInt8:
                        return UnknownUInt8;
                    case NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat1:
                        return UnknownFloat1;
                    case NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat2:
                        return UnknownFloat2;
                    case NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat3:
                        return UnknownFloat3;
                    case NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat4:
                        return UnknownFloat4;
                    case NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat5:
                        return UnknownFloat5;
                    case NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat6:
                        return UnknownFloat6;
                    case NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat7:
                        return UnknownFloat7;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                NpcRaceOverrideUnknown7_FieldIndex enu = (NpcRaceOverrideUnknown7_FieldIndex)index;
                switch (enu)
                {
                    case NpcRaceOverrideUnknown7_FieldIndex.UnknownUInt8:
                        this.UnknownUInt8 = ex;
                        break;
                    case NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat1:
                        this.UnknownFloat1 = ex;
                        break;
                    case NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat2:
                        this.UnknownFloat2 = ex;
                        break;
                    case NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat3:
                        this.UnknownFloat3 = ex;
                        break;
                    case NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat4:
                        this.UnknownFloat4 = ex;
                        break;
                    case NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat5:
                        this.UnknownFloat5 = ex;
                        break;
                    case NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat6:
                        this.UnknownFloat6 = ex;
                        break;
                    case NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat7:
                        this.UnknownFloat7 = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                NpcRaceOverrideUnknown7_FieldIndex enu = (NpcRaceOverrideUnknown7_FieldIndex)index;
                switch (enu)
                {
                    case NpcRaceOverrideUnknown7_FieldIndex.UnknownUInt8:
                        this.UnknownUInt8 = (Exception?)obj;
                        break;
                    case NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat1:
                        this.UnknownFloat1 = (Exception?)obj;
                        break;
                    case NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat2:
                        this.UnknownFloat2 = (Exception?)obj;
                        break;
                    case NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat3:
                        this.UnknownFloat3 = (Exception?)obj;
                        break;
                    case NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat4:
                        this.UnknownFloat4 = (Exception?)obj;
                        break;
                    case NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat5:
                        this.UnknownFloat5 = (Exception?)obj;
                        break;
                    case NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat6:
                        this.UnknownFloat6 = (Exception?)obj;
                        break;
                    case NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat7:
                        this.UnknownFloat7 = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (UnknownUInt8 != null) return true;
                if (UnknownFloat1 != null) return true;
                if (UnknownFloat2 != null) return true;
                if (UnknownFloat3 != null) return true;
                if (UnknownFloat4 != null) return true;
                if (UnknownFloat5 != null) return true;
                if (UnknownFloat6 != null) return true;
                if (UnknownFloat7 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(UnknownUInt8, "UnknownUInt8");
                }
                {
                    sb.AppendItem(UnknownFloat1, "UnknownFloat1");
                }
                {
                    sb.AppendItem(UnknownFloat2, "UnknownFloat2");
                }
                {
                    sb.AppendItem(UnknownFloat3, "UnknownFloat3");
                }
                {
                    sb.AppendItem(UnknownFloat4, "UnknownFloat4");
                }
                {
                    sb.AppendItem(UnknownFloat5, "UnknownFloat5");
                }
                {
                    sb.AppendItem(UnknownFloat6, "UnknownFloat6");
                }
                {
                    sb.AppendItem(UnknownFloat7, "UnknownFloat7");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.UnknownUInt8 = this.UnknownUInt8.Combine(rhs.UnknownUInt8);
                ret.UnknownFloat1 = this.UnknownFloat1.Combine(rhs.UnknownFloat1);
                ret.UnknownFloat2 = this.UnknownFloat2.Combine(rhs.UnknownFloat2);
                ret.UnknownFloat3 = this.UnknownFloat3.Combine(rhs.UnknownFloat3);
                ret.UnknownFloat4 = this.UnknownFloat4.Combine(rhs.UnknownFloat4);
                ret.UnknownFloat5 = this.UnknownFloat5.Combine(rhs.UnknownFloat5);
                ret.UnknownFloat6 = this.UnknownFloat6.Combine(rhs.UnknownFloat6);
                ret.UnknownFloat7 = this.UnknownFloat7.Combine(rhs.UnknownFloat7);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool UnknownUInt8;
            public bool UnknownFloat1;
            public bool UnknownFloat2;
            public bool UnknownFloat3;
            public bool UnknownFloat4;
            public bool UnknownFloat5;
            public bool UnknownFloat6;
            public bool UnknownFloat7;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.UnknownUInt8 = defaultOn;
                this.UnknownFloat1 = defaultOn;
                this.UnknownFloat2 = defaultOn;
                this.UnknownFloat3 = defaultOn;
                this.UnknownFloat4 = defaultOn;
                this.UnknownFloat5 = defaultOn;
                this.UnknownFloat6 = defaultOn;
                this.UnknownFloat7 = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((UnknownUInt8, null));
                ret.Add((UnknownFloat1, null));
                ret.Add((UnknownFloat2, null));
                ret.Add((UnknownFloat3, null));
                ret.Add((UnknownFloat4, null));
                ret.Add((UnknownFloat5, null));
                ret.Add((UnknownFloat6, null));
                ret.Add((UnknownFloat7, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NpcRaceOverrideUnknown7BinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcRaceOverrideUnknown7BinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static NpcRaceOverrideUnknown7 CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new NpcRaceOverrideUnknown7();
            ((NpcRaceOverrideUnknown7SetterCommon)((INpcRaceOverrideUnknown7Getter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out NpcRaceOverrideUnknown7 item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((NpcRaceOverrideUnknown7SetterCommon)((INpcRaceOverrideUnknown7Getter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static NpcRaceOverrideUnknown7 GetNew()
        {
            return new NpcRaceOverrideUnknown7();
        }

    }
    #endregion

    #region Interface
    public partial interface INpcRaceOverrideUnknown7 :
        ILoquiObjectSetter<INpcRaceOverrideUnknown7>,
        INpcRaceOverrideUnknown7Getter
    {
        new Byte UnknownUInt8 { get; set; }
        new Single UnknownFloat1 { get; set; }
        new Single UnknownFloat2 { get; set; }
        new Single UnknownFloat3 { get; set; }
        new Single UnknownFloat4 { get; set; }
        new Single UnknownFloat5 { get; set; }
        new Single UnknownFloat6 { get; set; }
        new Single UnknownFloat7 { get; set; }
    }

    public partial interface INpcRaceOverrideUnknown7Getter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<INpcRaceOverrideUnknown7Getter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => NpcRaceOverrideUnknown7_Registration.Instance;
        Byte UnknownUInt8 { get; }
        Single UnknownFloat1 { get; }
        Single UnknownFloat2 { get; }
        Single UnknownFloat3 { get; }
        Single UnknownFloat4 { get; }
        Single UnknownFloat5 { get; }
        Single UnknownFloat6 { get; }
        Single UnknownFloat7 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class NpcRaceOverrideUnknown7MixIn
    {
        public static void Clear(this INpcRaceOverrideUnknown7 item)
        {
            ((NpcRaceOverrideUnknown7SetterCommon)((INpcRaceOverrideUnknown7Getter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static NpcRaceOverrideUnknown7.Mask<bool> GetEqualsMask(
            this INpcRaceOverrideUnknown7Getter item,
            INpcRaceOverrideUnknown7Getter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NpcRaceOverrideUnknown7Common)((INpcRaceOverrideUnknown7Getter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this INpcRaceOverrideUnknown7Getter item,
            string? name = null,
            NpcRaceOverrideUnknown7.Mask<bool>? printMask = null)
        {
            return ((NpcRaceOverrideUnknown7Common)((INpcRaceOverrideUnknown7Getter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this INpcRaceOverrideUnknown7Getter item,
            StructuredStringBuilder sb,
            string? name = null,
            NpcRaceOverrideUnknown7.Mask<bool>? printMask = null)
        {
            ((NpcRaceOverrideUnknown7Common)((INpcRaceOverrideUnknown7Getter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INpcRaceOverrideUnknown7Getter item,
            INpcRaceOverrideUnknown7Getter rhs,
            NpcRaceOverrideUnknown7.TranslationMask? equalsMask = null)
        {
            return ((NpcRaceOverrideUnknown7Common)((INpcRaceOverrideUnknown7Getter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this INpcRaceOverrideUnknown7 lhs,
            INpcRaceOverrideUnknown7Getter rhs)
        {
            ((NpcRaceOverrideUnknown7SetterTranslationCommon)((INpcRaceOverrideUnknown7Getter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INpcRaceOverrideUnknown7 lhs,
            INpcRaceOverrideUnknown7Getter rhs,
            NpcRaceOverrideUnknown7.TranslationMask? copyMask = null)
        {
            ((NpcRaceOverrideUnknown7SetterTranslationCommon)((INpcRaceOverrideUnknown7Getter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INpcRaceOverrideUnknown7 lhs,
            INpcRaceOverrideUnknown7Getter rhs,
            out NpcRaceOverrideUnknown7.ErrorMask errorMask,
            NpcRaceOverrideUnknown7.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NpcRaceOverrideUnknown7SetterTranslationCommon)((INpcRaceOverrideUnknown7Getter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = NpcRaceOverrideUnknown7.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INpcRaceOverrideUnknown7 lhs,
            INpcRaceOverrideUnknown7Getter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NpcRaceOverrideUnknown7SetterTranslationCommon)((INpcRaceOverrideUnknown7Getter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static NpcRaceOverrideUnknown7 DeepCopy(
            this INpcRaceOverrideUnknown7Getter item,
            NpcRaceOverrideUnknown7.TranslationMask? copyMask = null)
        {
            return ((NpcRaceOverrideUnknown7SetterTranslationCommon)((INpcRaceOverrideUnknown7Getter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NpcRaceOverrideUnknown7 DeepCopy(
            this INpcRaceOverrideUnknown7Getter item,
            out NpcRaceOverrideUnknown7.ErrorMask errorMask,
            NpcRaceOverrideUnknown7.TranslationMask? copyMask = null)
        {
            return ((NpcRaceOverrideUnknown7SetterTranslationCommon)((INpcRaceOverrideUnknown7Getter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NpcRaceOverrideUnknown7 DeepCopy(
            this INpcRaceOverrideUnknown7Getter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NpcRaceOverrideUnknown7SetterTranslationCommon)((INpcRaceOverrideUnknown7Getter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this INpcRaceOverrideUnknown7 item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((NpcRaceOverrideUnknown7SetterCommon)((INpcRaceOverrideUnknown7Getter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum NpcRaceOverrideUnknown7_FieldIndex
    {
        UnknownUInt8 = 0,
        UnknownFloat1 = 1,
        UnknownFloat2 = 2,
        UnknownFloat3 = 3,
        UnknownFloat4 = 4,
        UnknownFloat5 = 5,
        UnknownFloat6 = 6,
        UnknownFloat7 = 7,
    }
    #endregion

    #region Registration
    internal partial class NpcRaceOverrideUnknown7_Registration : ILoquiRegistration
    {
        public static readonly NpcRaceOverrideUnknown7_Registration Instance = new NpcRaceOverrideUnknown7_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(NpcRaceOverrideUnknown7.Mask<>);

        public static readonly Type ErrorMaskType = typeof(NpcRaceOverrideUnknown7.ErrorMask);

        public static readonly Type ClassType = typeof(NpcRaceOverrideUnknown7);

        public static readonly Type GetterType = typeof(INpcRaceOverrideUnknown7Getter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INpcRaceOverrideUnknown7);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.NpcRaceOverrideUnknown7";

        public const string Name = "NpcRaceOverrideUnknown7";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(NpcRaceOverrideUnknown7BinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class NpcRaceOverrideUnknown7SetterCommon
    {
        public static readonly NpcRaceOverrideUnknown7SetterCommon Instance = new NpcRaceOverrideUnknown7SetterCommon();

        partial void ClearPartial();
        
        public void Clear(INpcRaceOverrideUnknown7 item)
        {
            ClearPartial();
            item.UnknownUInt8 = default(Byte);
            item.UnknownFloat1 = default(Single);
            item.UnknownFloat2 = default(Single);
            item.UnknownFloat3 = default(Single);
            item.UnknownFloat4 = default(Single);
            item.UnknownFloat5 = default(Single);
            item.UnknownFloat6 = default(Single);
            item.UnknownFloat7 = default(Single);
        }
        
        #region Mutagen
        public void RemapLinks(INpcRaceOverrideUnknown7 obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INpcRaceOverrideUnknown7 item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: NpcRaceOverrideUnknown7BinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class NpcRaceOverrideUnknown7Common
    {
        public static readonly NpcRaceOverrideUnknown7Common Instance = new NpcRaceOverrideUnknown7Common();

        public NpcRaceOverrideUnknown7.Mask<bool> GetEqualsMask(
            INpcRaceOverrideUnknown7Getter item,
            INpcRaceOverrideUnknown7Getter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NpcRaceOverrideUnknown7.Mask<bool>(false);
            ((NpcRaceOverrideUnknown7Common)((INpcRaceOverrideUnknown7Getter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INpcRaceOverrideUnknown7Getter item,
            INpcRaceOverrideUnknown7Getter rhs,
            NpcRaceOverrideUnknown7.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.UnknownUInt8 = item.UnknownUInt8 == rhs.UnknownUInt8;
            ret.UnknownFloat1 = item.UnknownFloat1.EqualsWithin(rhs.UnknownFloat1);
            ret.UnknownFloat2 = item.UnknownFloat2.EqualsWithin(rhs.UnknownFloat2);
            ret.UnknownFloat3 = item.UnknownFloat3.EqualsWithin(rhs.UnknownFloat3);
            ret.UnknownFloat4 = item.UnknownFloat4.EqualsWithin(rhs.UnknownFloat4);
            ret.UnknownFloat5 = item.UnknownFloat5.EqualsWithin(rhs.UnknownFloat5);
            ret.UnknownFloat6 = item.UnknownFloat6.EqualsWithin(rhs.UnknownFloat6);
            ret.UnknownFloat7 = item.UnknownFloat7.EqualsWithin(rhs.UnknownFloat7);
        }
        
        public string Print(
            INpcRaceOverrideUnknown7Getter item,
            string? name = null,
            NpcRaceOverrideUnknown7.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            INpcRaceOverrideUnknown7Getter item,
            StructuredStringBuilder sb,
            string? name = null,
            NpcRaceOverrideUnknown7.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"NpcRaceOverrideUnknown7 =>");
            }
            else
            {
                sb.AppendLine($"{name} (NpcRaceOverrideUnknown7) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            INpcRaceOverrideUnknown7Getter item,
            StructuredStringBuilder sb,
            NpcRaceOverrideUnknown7.Mask<bool>? printMask = null)
        {
            if (printMask?.UnknownUInt8 ?? true)
            {
                sb.AppendItem(item.UnknownUInt8, "UnknownUInt8");
            }
            if (printMask?.UnknownFloat1 ?? true)
            {
                sb.AppendItem(item.UnknownFloat1, "UnknownFloat1");
            }
            if (printMask?.UnknownFloat2 ?? true)
            {
                sb.AppendItem(item.UnknownFloat2, "UnknownFloat2");
            }
            if (printMask?.UnknownFloat3 ?? true)
            {
                sb.AppendItem(item.UnknownFloat3, "UnknownFloat3");
            }
            if (printMask?.UnknownFloat4 ?? true)
            {
                sb.AppendItem(item.UnknownFloat4, "UnknownFloat4");
            }
            if (printMask?.UnknownFloat5 ?? true)
            {
                sb.AppendItem(item.UnknownFloat5, "UnknownFloat5");
            }
            if (printMask?.UnknownFloat6 ?? true)
            {
                sb.AppendItem(item.UnknownFloat6, "UnknownFloat6");
            }
            if (printMask?.UnknownFloat7 ?? true)
            {
                sb.AppendItem(item.UnknownFloat7, "UnknownFloat7");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INpcRaceOverrideUnknown7Getter? lhs,
            INpcRaceOverrideUnknown7Getter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)NpcRaceOverrideUnknown7_FieldIndex.UnknownUInt8) ?? true))
            {
                if (lhs.UnknownUInt8 != rhs.UnknownUInt8) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat1) ?? true))
            {
                if (!lhs.UnknownFloat1.EqualsWithin(rhs.UnknownFloat1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat2) ?? true))
            {
                if (!lhs.UnknownFloat2.EqualsWithin(rhs.UnknownFloat2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat3) ?? true))
            {
                if (!lhs.UnknownFloat3.EqualsWithin(rhs.UnknownFloat3)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat4) ?? true))
            {
                if (!lhs.UnknownFloat4.EqualsWithin(rhs.UnknownFloat4)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat5) ?? true))
            {
                if (!lhs.UnknownFloat5.EqualsWithin(rhs.UnknownFloat5)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat6) ?? true))
            {
                if (!lhs.UnknownFloat6.EqualsWithin(rhs.UnknownFloat6)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat7) ?? true))
            {
                if (!lhs.UnknownFloat7.EqualsWithin(rhs.UnknownFloat7)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(INpcRaceOverrideUnknown7Getter item)
        {
            var hash = new HashCode();
            hash.Add(item.UnknownUInt8);
            hash.Add(item.UnknownFloat1);
            hash.Add(item.UnknownFloat2);
            hash.Add(item.UnknownFloat3);
            hash.Add(item.UnknownFloat4);
            hash.Add(item.UnknownFloat5);
            hash.Add(item.UnknownFloat6);
            hash.Add(item.UnknownFloat7);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return NpcRaceOverrideUnknown7.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(INpcRaceOverrideUnknown7Getter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class NpcRaceOverrideUnknown7SetterTranslationCommon
    {
        public static readonly NpcRaceOverrideUnknown7SetterTranslationCommon Instance = new NpcRaceOverrideUnknown7SetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            INpcRaceOverrideUnknown7 item,
            INpcRaceOverrideUnknown7Getter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)NpcRaceOverrideUnknown7_FieldIndex.UnknownUInt8) ?? true))
            {
                item.UnknownUInt8 = rhs.UnknownUInt8;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat1) ?? true))
            {
                item.UnknownFloat1 = rhs.UnknownFloat1;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat2) ?? true))
            {
                item.UnknownFloat2 = rhs.UnknownFloat2;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat3) ?? true))
            {
                item.UnknownFloat3 = rhs.UnknownFloat3;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat4) ?? true))
            {
                item.UnknownFloat4 = rhs.UnknownFloat4;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat5) ?? true))
            {
                item.UnknownFloat5 = rhs.UnknownFloat5;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat6) ?? true))
            {
                item.UnknownFloat6 = rhs.UnknownFloat6;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRaceOverrideUnknown7_FieldIndex.UnknownFloat7) ?? true))
            {
                item.UnknownFloat7 = rhs.UnknownFloat7;
            }
        }
        
        #endregion
        
        public NpcRaceOverrideUnknown7 DeepCopy(
            INpcRaceOverrideUnknown7Getter item,
            NpcRaceOverrideUnknown7.TranslationMask? copyMask = null)
        {
            NpcRaceOverrideUnknown7 ret = (NpcRaceOverrideUnknown7)((NpcRaceOverrideUnknown7Common)((INpcRaceOverrideUnknown7Getter)item).CommonInstance()!).GetNew();
            ((NpcRaceOverrideUnknown7SetterTranslationCommon)((INpcRaceOverrideUnknown7Getter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public NpcRaceOverrideUnknown7 DeepCopy(
            INpcRaceOverrideUnknown7Getter item,
            out NpcRaceOverrideUnknown7.ErrorMask errorMask,
            NpcRaceOverrideUnknown7.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            NpcRaceOverrideUnknown7 ret = (NpcRaceOverrideUnknown7)((NpcRaceOverrideUnknown7Common)((INpcRaceOverrideUnknown7Getter)item).CommonInstance()!).GetNew();
            ((NpcRaceOverrideUnknown7SetterTranslationCommon)((INpcRaceOverrideUnknown7Getter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = NpcRaceOverrideUnknown7.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public NpcRaceOverrideUnknown7 DeepCopy(
            INpcRaceOverrideUnknown7Getter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            NpcRaceOverrideUnknown7 ret = (NpcRaceOverrideUnknown7)((NpcRaceOverrideUnknown7Common)((INpcRaceOverrideUnknown7Getter)item).CommonInstance()!).GetNew();
            ((NpcRaceOverrideUnknown7SetterTranslationCommon)((INpcRaceOverrideUnknown7Getter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class NpcRaceOverrideUnknown7
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NpcRaceOverrideUnknown7_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => NpcRaceOverrideUnknown7_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NpcRaceOverrideUnknown7Common.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return NpcRaceOverrideUnknown7SetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NpcRaceOverrideUnknown7SetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INpcRaceOverrideUnknown7Getter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object INpcRaceOverrideUnknown7Getter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object INpcRaceOverrideUnknown7Getter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class NpcRaceOverrideUnknown7BinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly NpcRaceOverrideUnknown7BinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            INpcRaceOverrideUnknown7Getter item,
            MutagenWriter writer)
        {
            writer.Write(item.UnknownUInt8);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.UnknownFloat1);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.UnknownFloat2);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.UnknownFloat3);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.UnknownFloat4);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.UnknownFloat5);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.UnknownFloat6);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.UnknownFloat7);
        }

        public void Write(
            MutagenWriter writer,
            INpcRaceOverrideUnknown7Getter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (INpcRaceOverrideUnknown7Getter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class NpcRaceOverrideUnknown7BinaryCreateTranslation
    {
        public static readonly NpcRaceOverrideUnknown7BinaryCreateTranslation Instance = new NpcRaceOverrideUnknown7BinaryCreateTranslation();

        public static void FillBinaryStructs(
            INpcRaceOverrideUnknown7 item,
            MutagenFrame frame)
        {
            item.UnknownUInt8 = frame.ReadUInt8();
            item.UnknownFloat1 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.UnknownFloat2 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.UnknownFloat3 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.UnknownFloat4 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.UnknownFloat5 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.UnknownFloat6 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.UnknownFloat7 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class NpcRaceOverrideUnknown7BinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this INpcRaceOverrideUnknown7Getter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcRaceOverrideUnknown7BinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class NpcRaceOverrideUnknown7BinaryOverlay :
        PluginBinaryOverlay,
        INpcRaceOverrideUnknown7Getter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NpcRaceOverrideUnknown7_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => NpcRaceOverrideUnknown7_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NpcRaceOverrideUnknown7Common.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NpcRaceOverrideUnknown7SetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INpcRaceOverrideUnknown7Getter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? INpcRaceOverrideUnknown7Getter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object INpcRaceOverrideUnknown7Getter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NpcRaceOverrideUnknown7BinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcRaceOverrideUnknown7BinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Byte UnknownUInt8 => _structData.Span[0x0];
        public Single UnknownFloat1 => _structData.Slice(0x1, 0x4).Float();
        public Single UnknownFloat2 => _structData.Slice(0x5, 0x4).Float();
        public Single UnknownFloat3 => _structData.Slice(0x9, 0x4).Float();
        public Single UnknownFloat4 => _structData.Slice(0xD, 0x4).Float();
        public Single UnknownFloat5 => _structData.Slice(0x11, 0x4).Float();
        public Single UnknownFloat6 => _structData.Slice(0x15, 0x4).Float();
        public Single UnknownFloat7 => _structData.Slice(0x19, 0x4).Float();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NpcRaceOverrideUnknown7BinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static INpcRaceOverrideUnknown7Getter NpcRaceOverrideUnknown7Factory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x1D,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new NpcRaceOverrideUnknown7BinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x1D;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static INpcRaceOverrideUnknown7Getter NpcRaceOverrideUnknown7Factory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return NpcRaceOverrideUnknown7Factory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NpcRaceOverrideUnknown7MixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INpcRaceOverrideUnknown7Getter rhs) return false;
            return ((NpcRaceOverrideUnknown7Common)((INpcRaceOverrideUnknown7Getter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INpcRaceOverrideUnknown7Getter? obj)
        {
            return ((NpcRaceOverrideUnknown7Common)((INpcRaceOverrideUnknown7Getter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NpcRaceOverrideUnknown7Common)((INpcRaceOverrideUnknown7Getter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

