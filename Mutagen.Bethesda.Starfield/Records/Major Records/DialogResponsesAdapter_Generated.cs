/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class DialogResponsesAdapter :
        AVirtualMachineAdapter,
        IDialogResponsesAdapter,
        IEquatable<IDialogResponsesAdapterGetter>,
        ILoquiObjectSetter<DialogResponsesAdapter>
    {
        #region Ctor
        public DialogResponsesAdapter()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ScriptFragments
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ScriptFragments? _ScriptFragments;
        public ScriptFragments? ScriptFragments
        {
            get => _ScriptFragments;
            set => _ScriptFragments = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IScriptFragmentsGetter? IDialogResponsesAdapterGetter.ScriptFragments => this.ScriptFragments;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DialogResponsesAdapterMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IDialogResponsesAdapterGetter rhs) return false;
            return ((DialogResponsesAdapterCommon)((IDialogResponsesAdapterGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDialogResponsesAdapterGetter? obj)
        {
            return ((DialogResponsesAdapterCommon)((IDialogResponsesAdapterGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DialogResponsesAdapterCommon)((IDialogResponsesAdapterGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AVirtualMachineAdapter.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ScriptFragments = new MaskItem<TItem, ScriptFragments.Mask<TItem>?>(initialValue, new ScriptFragments.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Version,
                TItem ObjectFormat,
                TItem Scripts,
                TItem ScriptFragments)
            : base(
                Version: Version,
                ObjectFormat: ObjectFormat,
                Scripts: Scripts)
            {
                this.ScriptFragments = new MaskItem<TItem, ScriptFragments.Mask<TItem>?>(ScriptFragments, new ScriptFragments.Mask<TItem>(ScriptFragments));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ScriptFragments.Mask<TItem>?>? ScriptFragments { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ScriptFragments, rhs.ScriptFragments)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ScriptFragments);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ScriptFragments != null)
                {
                    if (!eval(this.ScriptFragments.Overall)) return false;
                    if (this.ScriptFragments.Specific != null && !this.ScriptFragments.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ScriptFragments != null)
                {
                    if (eval(this.ScriptFragments.Overall)) return true;
                    if (this.ScriptFragments.Specific != null && this.ScriptFragments.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DialogResponsesAdapter.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ScriptFragments = this.ScriptFragments == null ? null : new MaskItem<R, ScriptFragments.Mask<R>?>(eval(this.ScriptFragments.Overall), this.ScriptFragments.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(DialogResponsesAdapter.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, DialogResponsesAdapter.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(DialogResponsesAdapter.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ScriptFragments?.Overall ?? true)
                    {
                        ScriptFragments?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            AVirtualMachineAdapter.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ScriptFragments.ErrorMask?>? ScriptFragments;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                DialogResponsesAdapter_FieldIndex enu = (DialogResponsesAdapter_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponsesAdapter_FieldIndex.ScriptFragments:
                        return ScriptFragments;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                DialogResponsesAdapter_FieldIndex enu = (DialogResponsesAdapter_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponsesAdapter_FieldIndex.ScriptFragments:
                        this.ScriptFragments = new MaskItem<Exception?, ScriptFragments.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                DialogResponsesAdapter_FieldIndex enu = (DialogResponsesAdapter_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponsesAdapter_FieldIndex.ScriptFragments:
                        this.ScriptFragments = (MaskItem<Exception?, ScriptFragments.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ScriptFragments != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                ScriptFragments?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ScriptFragments = this.ScriptFragments.Combine(rhs.ScriptFragments, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AVirtualMachineAdapter.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ScriptFragments.TranslationMask? ScriptFragments;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ScriptFragments != null ? ScriptFragments.OnOverall : DefaultOn, ScriptFragments?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => DialogResponsesAdapterCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogResponsesAdapterSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DialogResponsesAdapterBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DialogResponsesAdapterBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static DialogResponsesAdapter CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new DialogResponsesAdapter();
            ((DialogResponsesAdapterSetterCommon)((IDialogResponsesAdapterGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out DialogResponsesAdapter item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((DialogResponsesAdapterSetterCommon)((IDialogResponsesAdapterGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new DialogResponsesAdapter GetNew()
        {
            return new DialogResponsesAdapter();
        }

    }
    #endregion

    #region Interface
    public partial interface IDialogResponsesAdapter :
        IAVirtualMachineAdapter,
        IDialogResponsesAdapterGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IDialogResponsesAdapter>
    {
        new ScriptFragments? ScriptFragments { get; set; }
    }

    public partial interface IDialogResponsesAdapterGetter :
        IAVirtualMachineAdapterGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IDialogResponsesAdapterGetter>
    {
        static new ILoquiRegistration StaticRegistration => DialogResponsesAdapter_Registration.Instance;
        IScriptFragmentsGetter? ScriptFragments { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class DialogResponsesAdapterMixIn
    {
        public static void Clear(this IDialogResponsesAdapter item)
        {
            ((DialogResponsesAdapterSetterCommon)((IDialogResponsesAdapterGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DialogResponsesAdapter.Mask<bool> GetEqualsMask(
            this IDialogResponsesAdapterGetter item,
            IDialogResponsesAdapterGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DialogResponsesAdapterCommon)((IDialogResponsesAdapterGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IDialogResponsesAdapterGetter item,
            string? name = null,
            DialogResponsesAdapter.Mask<bool>? printMask = null)
        {
            return ((DialogResponsesAdapterCommon)((IDialogResponsesAdapterGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IDialogResponsesAdapterGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            DialogResponsesAdapter.Mask<bool>? printMask = null)
        {
            ((DialogResponsesAdapterCommon)((IDialogResponsesAdapterGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IDialogResponsesAdapterGetter item,
            IDialogResponsesAdapterGetter rhs,
            DialogResponsesAdapter.TranslationMask? equalsMask = null)
        {
            return ((DialogResponsesAdapterCommon)((IDialogResponsesAdapterGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IDialogResponsesAdapter lhs,
            IDialogResponsesAdapterGetter rhs,
            out DialogResponsesAdapter.ErrorMask errorMask,
            DialogResponsesAdapter.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DialogResponsesAdapterSetterTranslationCommon)((IDialogResponsesAdapterGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = DialogResponsesAdapter.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDialogResponsesAdapter lhs,
            IDialogResponsesAdapterGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DialogResponsesAdapterSetterTranslationCommon)((IDialogResponsesAdapterGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static DialogResponsesAdapter DeepCopy(
            this IDialogResponsesAdapterGetter item,
            DialogResponsesAdapter.TranslationMask? copyMask = null)
        {
            return ((DialogResponsesAdapterSetterTranslationCommon)((IDialogResponsesAdapterGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DialogResponsesAdapter DeepCopy(
            this IDialogResponsesAdapterGetter item,
            out DialogResponsesAdapter.ErrorMask errorMask,
            DialogResponsesAdapter.TranslationMask? copyMask = null)
        {
            return ((DialogResponsesAdapterSetterTranslationCommon)((IDialogResponsesAdapterGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DialogResponsesAdapter DeepCopy(
            this IDialogResponsesAdapterGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DialogResponsesAdapterSetterTranslationCommon)((IDialogResponsesAdapterGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IDialogResponsesAdapter item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((DialogResponsesAdapterSetterCommon)((IDialogResponsesAdapterGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum DialogResponsesAdapter_FieldIndex
    {
        Version = 0,
        ObjectFormat = 1,
        Scripts = 2,
        ScriptFragments = 3,
    }
    #endregion

    #region Registration
    internal partial class DialogResponsesAdapter_Registration : ILoquiRegistration
    {
        public static readonly DialogResponsesAdapter_Registration Instance = new DialogResponsesAdapter_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(DialogResponsesAdapter.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DialogResponsesAdapter.ErrorMask);

        public static readonly Type ClassType = typeof(DialogResponsesAdapter);

        public static readonly Type GetterType = typeof(IDialogResponsesAdapterGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDialogResponsesAdapter);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.DialogResponsesAdapter";

        public const string Name = "DialogResponsesAdapter";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.VMAD;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.VMAD);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(DialogResponsesAdapterBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class DialogResponsesAdapterSetterCommon : AVirtualMachineAdapterSetterCommon
    {
        public new static readonly DialogResponsesAdapterSetterCommon Instance = new DialogResponsesAdapterSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDialogResponsesAdapter item)
        {
            ClearPartial();
            item.ScriptFragments = null;
            base.Clear(item);
        }
        
        public override void Clear(IAVirtualMachineAdapter item)
        {
            Clear(item: (IDialogResponsesAdapter)item);
        }
        
        #region Mutagen
        public void RemapLinks(IDialogResponsesAdapter obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.ScriptFragments?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IDialogResponsesAdapter item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.VMAD),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: DialogResponsesAdapterBinaryCreateTranslation.FillBinaryStructs);
        }
        
        public override void CopyInFromBinary(
            IAVirtualMachineAdapter item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (DialogResponsesAdapter)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class DialogResponsesAdapterCommon : AVirtualMachineAdapterCommon
    {
        public new static readonly DialogResponsesAdapterCommon Instance = new DialogResponsesAdapterCommon();

        public DialogResponsesAdapter.Mask<bool> GetEqualsMask(
            IDialogResponsesAdapterGetter item,
            IDialogResponsesAdapterGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DialogResponsesAdapter.Mask<bool>(false);
            ((DialogResponsesAdapterCommon)((IDialogResponsesAdapterGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDialogResponsesAdapterGetter item,
            IDialogResponsesAdapterGetter rhs,
            DialogResponsesAdapter.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ScriptFragments = EqualsMaskHelper.EqualsHelper(
                item.ScriptFragments,
                rhs.ScriptFragments,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IDialogResponsesAdapterGetter item,
            string? name = null,
            DialogResponsesAdapter.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IDialogResponsesAdapterGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            DialogResponsesAdapter.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"DialogResponsesAdapter =>");
            }
            else
            {
                sb.AppendLine($"{name} (DialogResponsesAdapter) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IDialogResponsesAdapterGetter item,
            StructuredStringBuilder sb,
            DialogResponsesAdapter.Mask<bool>? printMask = null)
        {
            AVirtualMachineAdapterCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.ScriptFragments?.Overall ?? true)
                && item.ScriptFragments is {} ScriptFragmentsItem)
            {
                ScriptFragmentsItem?.Print(sb, "ScriptFragments");
            }
        }
        
        public static DialogResponsesAdapter_FieldIndex ConvertFieldIndex(AVirtualMachineAdapter_FieldIndex index)
        {
            switch (index)
            {
                case AVirtualMachineAdapter_FieldIndex.Version:
                    return (DialogResponsesAdapter_FieldIndex)((int)index);
                case AVirtualMachineAdapter_FieldIndex.ObjectFormat:
                    return (DialogResponsesAdapter_FieldIndex)((int)index);
                case AVirtualMachineAdapter_FieldIndex.Scripts:
                    return (DialogResponsesAdapter_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDialogResponsesAdapterGetter? lhs,
            IDialogResponsesAdapterGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAVirtualMachineAdapterGetter)lhs, (IAVirtualMachineAdapterGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)DialogResponsesAdapter_FieldIndex.ScriptFragments) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ScriptFragments, rhs.ScriptFragments, out var lhsScriptFragments, out var rhsScriptFragments, out var isScriptFragmentsEqual))
                {
                    if (!((ScriptFragmentsCommon)((IScriptFragmentsGetter)lhsScriptFragments).CommonInstance()!).Equals(lhsScriptFragments, rhsScriptFragments, equalsMask?.GetSubCrystal((int)DialogResponsesAdapter_FieldIndex.ScriptFragments))) return false;
                }
                else if (!isScriptFragmentsEqual) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAVirtualMachineAdapterGetter? lhs,
            IAVirtualMachineAdapterGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IDialogResponsesAdapterGetter?)lhs,
                rhs: rhs as IDialogResponsesAdapterGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IDialogResponsesAdapterGetter item)
        {
            var hash = new HashCode();
            if (item.ScriptFragments is {} ScriptFragmentsitem)
            {
                hash.Add(ScriptFragmentsitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAVirtualMachineAdapterGetter item)
        {
            return GetHashCode(item: (IDialogResponsesAdapterGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return DialogResponsesAdapter.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IDialogResponsesAdapterGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.ScriptFragments is IFormLinkContainerGetter ScriptFragmentslinkCont)
            {
                foreach (var item in ScriptFragmentslinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class DialogResponsesAdapterSetterTranslationCommon : AVirtualMachineAdapterSetterTranslationCommon
    {
        public new static readonly DialogResponsesAdapterSetterTranslationCommon Instance = new DialogResponsesAdapterSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IDialogResponsesAdapter item,
            IDialogResponsesAdapterGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAVirtualMachineAdapter)item,
                (IAVirtualMachineAdapterGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)DialogResponsesAdapter_FieldIndex.ScriptFragments) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponsesAdapter_FieldIndex.ScriptFragments);
                try
                {
                    if(rhs.ScriptFragments is {} rhsScriptFragments)
                    {
                        item.ScriptFragments = rhsScriptFragments.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)DialogResponsesAdapter_FieldIndex.ScriptFragments));
                    }
                    else
                    {
                        item.ScriptFragments = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        
        public override void DeepCopyIn(
            IAVirtualMachineAdapter item,
            IAVirtualMachineAdapterGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogResponsesAdapter)item,
                rhs: (IDialogResponsesAdapterGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public DialogResponsesAdapter DeepCopy(
            IDialogResponsesAdapterGetter item,
            DialogResponsesAdapter.TranslationMask? copyMask = null)
        {
            DialogResponsesAdapter ret = (DialogResponsesAdapter)((DialogResponsesAdapterCommon)((IDialogResponsesAdapterGetter)item).CommonInstance()!).GetNew();
            ((DialogResponsesAdapterSetterTranslationCommon)((IDialogResponsesAdapterGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public DialogResponsesAdapter DeepCopy(
            IDialogResponsesAdapterGetter item,
            out DialogResponsesAdapter.ErrorMask errorMask,
            DialogResponsesAdapter.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DialogResponsesAdapter ret = (DialogResponsesAdapter)((DialogResponsesAdapterCommon)((IDialogResponsesAdapterGetter)item).CommonInstance()!).GetNew();
            ((DialogResponsesAdapterSetterTranslationCommon)((IDialogResponsesAdapterGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = DialogResponsesAdapter.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public DialogResponsesAdapter DeepCopy(
            IDialogResponsesAdapterGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DialogResponsesAdapter ret = (DialogResponsesAdapter)((DialogResponsesAdapterCommon)((IDialogResponsesAdapterGetter)item).CommonInstance()!).GetNew();
            ((DialogResponsesAdapterSetterTranslationCommon)((IDialogResponsesAdapterGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class DialogResponsesAdapter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogResponsesAdapter_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => DialogResponsesAdapter_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DialogResponsesAdapterCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return DialogResponsesAdapterSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DialogResponsesAdapterSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class DialogResponsesAdapterBinaryWriteTranslation :
        AVirtualMachineAdapterBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly DialogResponsesAdapterBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IDialogResponsesAdapterGetter item,
            MutagenWriter writer)
        {
            AVirtualMachineAdapterBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            DialogResponsesAdapterBinaryWriteTranslation.WriteBinaryScriptFragments(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryScriptFragmentsCustom(
            MutagenWriter writer,
            IDialogResponsesAdapterGetter item);

        public static void WriteBinaryScriptFragments(
            MutagenWriter writer,
            IDialogResponsesAdapterGetter item)
        {
            WriteBinaryScriptFragmentsCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IDialogResponsesAdapterGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.VMAD),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IDialogResponsesAdapterGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IAVirtualMachineAdapterGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IDialogResponsesAdapterGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class DialogResponsesAdapterBinaryCreateTranslation : AVirtualMachineAdapterBinaryCreateTranslation
    {
        public new static readonly DialogResponsesAdapterBinaryCreateTranslation Instance = new DialogResponsesAdapterBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IDialogResponsesAdapter item,
            MutagenFrame frame)
        {
            AVirtualMachineAdapterBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            if (frame.Complete) return;
            DialogResponsesAdapterBinaryCreateTranslation.FillBinaryScriptFragmentsCustom(
                frame: frame,
                item: item);
        }

        public static partial void FillBinaryScriptFragmentsCustom(
            MutagenFrame frame,
            IDialogResponsesAdapter item);

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class DialogResponsesAdapterBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class DialogResponsesAdapterBinaryOverlay :
        AVirtualMachineAdapterBinaryOverlay,
        IDialogResponsesAdapterGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogResponsesAdapter_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => DialogResponsesAdapter_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DialogResponsesAdapterCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DialogResponsesAdapterSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => DialogResponsesAdapterCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DialogResponsesAdapterBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DialogResponsesAdapterBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region ScriptFragments
        public partial IScriptFragmentsGetter? GetScriptFragmentsCustom(int location);
        public IScriptFragmentsGetter? ScriptFragments => GetScriptFragmentsCustom(location: ScriptsEndingPos);
        protected int ScriptFragmentsEndingPos;
        partial void CustomScriptFragmentsEndPos();
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected DialogResponsesAdapterBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static void DialogResponsesAdapterParseEndingPositions(
            DialogResponsesAdapterBinaryOverlay ret,
            BinaryOverlayFactoryPackage package)
        {
            ret.CustomScriptFragmentsEndPos();
        }

        public static IDialogResponsesAdapterGetter DialogResponsesAdapterFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new DialogResponsesAdapterBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            DialogResponsesAdapterParseEndingPositions(ret, package);
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IDialogResponsesAdapterGetter DialogResponsesAdapterFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return DialogResponsesAdapterFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DialogResponsesAdapterMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IDialogResponsesAdapterGetter rhs) return false;
            return ((DialogResponsesAdapterCommon)((IDialogResponsesAdapterGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDialogResponsesAdapterGetter? obj)
        {
            return ((DialogResponsesAdapterCommon)((IDialogResponsesAdapterGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DialogResponsesAdapterCommon)((IDialogResponsesAdapterGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

