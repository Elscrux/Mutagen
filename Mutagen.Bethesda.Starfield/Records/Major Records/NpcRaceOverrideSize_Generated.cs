/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class NpcRaceOverrideSize :
        IEquatable<INpcRaceOverrideSizeGetter>,
        ILoquiObjectSetter<NpcRaceOverrideSize>,
        INpcRaceOverrideSize
    {
        #region Ctor
        public NpcRaceOverrideSize()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Size
        public Size Size { get; set; } = default(Size);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NpcRaceOverrideSizeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INpcRaceOverrideSizeGetter rhs) return false;
            return ((NpcRaceOverrideSizeCommon)((INpcRaceOverrideSizeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INpcRaceOverrideSizeGetter? obj)
        {
            return ((NpcRaceOverrideSizeCommon)((INpcRaceOverrideSizeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NpcRaceOverrideSizeCommon)((INpcRaceOverrideSizeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem Size)
            {
                this.Size = Size;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Size;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Size, rhs.Size)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Size);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Size)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Size)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new NpcRaceOverrideSize.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Size = eval(this.Size);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(NpcRaceOverrideSize.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, NpcRaceOverrideSize.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(NpcRaceOverrideSize.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Size ?? true)
                    {
                        sb.AppendItem(Size, "Size");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Size;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                NpcRaceOverrideSize_FieldIndex enu = (NpcRaceOverrideSize_FieldIndex)index;
                switch (enu)
                {
                    case NpcRaceOverrideSize_FieldIndex.Size:
                        return Size;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                NpcRaceOverrideSize_FieldIndex enu = (NpcRaceOverrideSize_FieldIndex)index;
                switch (enu)
                {
                    case NpcRaceOverrideSize_FieldIndex.Size:
                        this.Size = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                NpcRaceOverrideSize_FieldIndex enu = (NpcRaceOverrideSize_FieldIndex)index;
                switch (enu)
                {
                    case NpcRaceOverrideSize_FieldIndex.Size:
                        this.Size = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Size != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Size, "Size");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Size = this.Size.Combine(rhs.Size);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Size;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Size = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Size, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NpcRaceOverrideSizeBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcRaceOverrideSizeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static NpcRaceOverrideSize CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new NpcRaceOverrideSize();
            ((NpcRaceOverrideSizeSetterCommon)((INpcRaceOverrideSizeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out NpcRaceOverrideSize item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((NpcRaceOverrideSizeSetterCommon)((INpcRaceOverrideSizeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static NpcRaceOverrideSize GetNew()
        {
            return new NpcRaceOverrideSize();
        }

    }
    #endregion

    #region Interface
    public partial interface INpcRaceOverrideSize :
        ILoquiObjectSetter<INpcRaceOverrideSize>,
        INpcRaceOverrideSizeGetter
    {
        new Size Size { get; set; }
    }

    public partial interface INpcRaceOverrideSizeGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<INpcRaceOverrideSizeGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => NpcRaceOverrideSize_Registration.Instance;
        Size Size { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class NpcRaceOverrideSizeMixIn
    {
        public static void Clear(this INpcRaceOverrideSize item)
        {
            ((NpcRaceOverrideSizeSetterCommon)((INpcRaceOverrideSizeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static NpcRaceOverrideSize.Mask<bool> GetEqualsMask(
            this INpcRaceOverrideSizeGetter item,
            INpcRaceOverrideSizeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NpcRaceOverrideSizeCommon)((INpcRaceOverrideSizeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this INpcRaceOverrideSizeGetter item,
            string? name = null,
            NpcRaceOverrideSize.Mask<bool>? printMask = null)
        {
            return ((NpcRaceOverrideSizeCommon)((INpcRaceOverrideSizeGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this INpcRaceOverrideSizeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NpcRaceOverrideSize.Mask<bool>? printMask = null)
        {
            ((NpcRaceOverrideSizeCommon)((INpcRaceOverrideSizeGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INpcRaceOverrideSizeGetter item,
            INpcRaceOverrideSizeGetter rhs,
            NpcRaceOverrideSize.TranslationMask? equalsMask = null)
        {
            return ((NpcRaceOverrideSizeCommon)((INpcRaceOverrideSizeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this INpcRaceOverrideSize lhs,
            INpcRaceOverrideSizeGetter rhs)
        {
            ((NpcRaceOverrideSizeSetterTranslationCommon)((INpcRaceOverrideSizeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INpcRaceOverrideSize lhs,
            INpcRaceOverrideSizeGetter rhs,
            NpcRaceOverrideSize.TranslationMask? copyMask = null)
        {
            ((NpcRaceOverrideSizeSetterTranslationCommon)((INpcRaceOverrideSizeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INpcRaceOverrideSize lhs,
            INpcRaceOverrideSizeGetter rhs,
            out NpcRaceOverrideSize.ErrorMask errorMask,
            NpcRaceOverrideSize.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NpcRaceOverrideSizeSetterTranslationCommon)((INpcRaceOverrideSizeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = NpcRaceOverrideSize.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INpcRaceOverrideSize lhs,
            INpcRaceOverrideSizeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NpcRaceOverrideSizeSetterTranslationCommon)((INpcRaceOverrideSizeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static NpcRaceOverrideSize DeepCopy(
            this INpcRaceOverrideSizeGetter item,
            NpcRaceOverrideSize.TranslationMask? copyMask = null)
        {
            return ((NpcRaceOverrideSizeSetterTranslationCommon)((INpcRaceOverrideSizeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NpcRaceOverrideSize DeepCopy(
            this INpcRaceOverrideSizeGetter item,
            out NpcRaceOverrideSize.ErrorMask errorMask,
            NpcRaceOverrideSize.TranslationMask? copyMask = null)
        {
            return ((NpcRaceOverrideSizeSetterTranslationCommon)((INpcRaceOverrideSizeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NpcRaceOverrideSize DeepCopy(
            this INpcRaceOverrideSizeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NpcRaceOverrideSizeSetterTranslationCommon)((INpcRaceOverrideSizeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this INpcRaceOverrideSize item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((NpcRaceOverrideSizeSetterCommon)((INpcRaceOverrideSizeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum NpcRaceOverrideSize_FieldIndex
    {
        Size = 0,
    }
    #endregion

    #region Registration
    internal partial class NpcRaceOverrideSize_Registration : ILoquiRegistration
    {
        public static readonly NpcRaceOverrideSize_Registration Instance = new NpcRaceOverrideSize_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(NpcRaceOverrideSize.Mask<>);

        public static readonly Type ErrorMaskType = typeof(NpcRaceOverrideSize.ErrorMask);

        public static readonly Type ClassType = typeof(NpcRaceOverrideSize);

        public static readonly Type GetterType = typeof(INpcRaceOverrideSizeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INpcRaceOverrideSize);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.NpcRaceOverrideSize";

        public const string Name = "NpcRaceOverrideSize";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(NpcRaceOverrideSizeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class NpcRaceOverrideSizeSetterCommon
    {
        public static readonly NpcRaceOverrideSizeSetterCommon Instance = new NpcRaceOverrideSizeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(INpcRaceOverrideSize item)
        {
            ClearPartial();
            item.Size = default(Size);
        }
        
        #region Mutagen
        public void RemapLinks(INpcRaceOverrideSize obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INpcRaceOverrideSize item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: NpcRaceOverrideSizeBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class NpcRaceOverrideSizeCommon
    {
        public static readonly NpcRaceOverrideSizeCommon Instance = new NpcRaceOverrideSizeCommon();

        public NpcRaceOverrideSize.Mask<bool> GetEqualsMask(
            INpcRaceOverrideSizeGetter item,
            INpcRaceOverrideSizeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NpcRaceOverrideSize.Mask<bool>(false);
            ((NpcRaceOverrideSizeCommon)((INpcRaceOverrideSizeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INpcRaceOverrideSizeGetter item,
            INpcRaceOverrideSizeGetter rhs,
            NpcRaceOverrideSize.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Size = item.Size == rhs.Size;
        }
        
        public string Print(
            INpcRaceOverrideSizeGetter item,
            string? name = null,
            NpcRaceOverrideSize.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            INpcRaceOverrideSizeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NpcRaceOverrideSize.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"NpcRaceOverrideSize =>");
            }
            else
            {
                sb.AppendLine($"{name} (NpcRaceOverrideSize) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            INpcRaceOverrideSizeGetter item,
            StructuredStringBuilder sb,
            NpcRaceOverrideSize.Mask<bool>? printMask = null)
        {
            if (printMask?.Size ?? true)
            {
                sb.AppendItem(item.Size, "Size");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INpcRaceOverrideSizeGetter? lhs,
            INpcRaceOverrideSizeGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)NpcRaceOverrideSize_FieldIndex.Size) ?? true))
            {
                if (lhs.Size != rhs.Size) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(INpcRaceOverrideSizeGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Size);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return NpcRaceOverrideSize.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(INpcRaceOverrideSizeGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class NpcRaceOverrideSizeSetterTranslationCommon
    {
        public static readonly NpcRaceOverrideSizeSetterTranslationCommon Instance = new NpcRaceOverrideSizeSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            INpcRaceOverrideSize item,
            INpcRaceOverrideSizeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)NpcRaceOverrideSize_FieldIndex.Size) ?? true))
            {
                item.Size = rhs.Size;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            INpcRaceOverrideSize item,
            INpcRaceOverrideSizeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public NpcRaceOverrideSize DeepCopy(
            INpcRaceOverrideSizeGetter item,
            NpcRaceOverrideSize.TranslationMask? copyMask = null)
        {
            NpcRaceOverrideSize ret = (NpcRaceOverrideSize)((NpcRaceOverrideSizeCommon)((INpcRaceOverrideSizeGetter)item).CommonInstance()!).GetNew();
            ((NpcRaceOverrideSizeSetterTranslationCommon)((INpcRaceOverrideSizeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public NpcRaceOverrideSize DeepCopy(
            INpcRaceOverrideSizeGetter item,
            out NpcRaceOverrideSize.ErrorMask errorMask,
            NpcRaceOverrideSize.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            NpcRaceOverrideSize ret = (NpcRaceOverrideSize)((NpcRaceOverrideSizeCommon)((INpcRaceOverrideSizeGetter)item).CommonInstance()!).GetNew();
            ((NpcRaceOverrideSizeSetterTranslationCommon)((INpcRaceOverrideSizeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = NpcRaceOverrideSize.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public NpcRaceOverrideSize DeepCopy(
            INpcRaceOverrideSizeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            NpcRaceOverrideSize ret = (NpcRaceOverrideSize)((NpcRaceOverrideSizeCommon)((INpcRaceOverrideSizeGetter)item).CommonInstance()!).GetNew();
            ((NpcRaceOverrideSizeSetterTranslationCommon)((INpcRaceOverrideSizeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class NpcRaceOverrideSize
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NpcRaceOverrideSize_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => NpcRaceOverrideSize_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NpcRaceOverrideSizeCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return NpcRaceOverrideSizeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NpcRaceOverrideSizeSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INpcRaceOverrideSizeGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object INpcRaceOverrideSizeGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object INpcRaceOverrideSizeGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class NpcRaceOverrideSizeBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly NpcRaceOverrideSizeBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            INpcRaceOverrideSizeGetter item,
            MutagenWriter writer)
        {
            EnumBinaryTranslation<Size, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Size,
                length: 4);
        }

        public void Write(
            MutagenWriter writer,
            INpcRaceOverrideSizeGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (INpcRaceOverrideSizeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class NpcRaceOverrideSizeBinaryCreateTranslation
    {
        public static readonly NpcRaceOverrideSizeBinaryCreateTranslation Instance = new NpcRaceOverrideSizeBinaryCreateTranslation();

        public static void FillBinaryStructs(
            INpcRaceOverrideSize item,
            MutagenFrame frame)
        {
            item.Size = EnumBinaryTranslation<Size, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class NpcRaceOverrideSizeBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this INpcRaceOverrideSizeGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcRaceOverrideSizeBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class NpcRaceOverrideSizeBinaryOverlay :
        PluginBinaryOverlay,
        INpcRaceOverrideSizeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NpcRaceOverrideSize_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => NpcRaceOverrideSize_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NpcRaceOverrideSizeCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NpcRaceOverrideSizeSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INpcRaceOverrideSizeGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? INpcRaceOverrideSizeGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object INpcRaceOverrideSizeGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NpcRaceOverrideSizeBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcRaceOverrideSizeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Size Size => (Size)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0x0, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NpcRaceOverrideSizeBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static INpcRaceOverrideSizeGetter NpcRaceOverrideSizeFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x4,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new NpcRaceOverrideSizeBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x4;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static INpcRaceOverrideSizeGetter NpcRaceOverrideSizeFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return NpcRaceOverrideSizeFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NpcRaceOverrideSizeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INpcRaceOverrideSizeGetter rhs) return false;
            return ((NpcRaceOverrideSizeCommon)((INpcRaceOverrideSizeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INpcRaceOverrideSizeGetter? obj)
        {
            return ((NpcRaceOverrideSizeCommon)((INpcRaceOverrideSizeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NpcRaceOverrideSizeCommon)((INpcRaceOverrideSizeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

