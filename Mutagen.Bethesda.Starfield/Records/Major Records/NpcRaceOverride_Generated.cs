/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class NpcRaceOverride :
        IEquatable<INpcRaceOverrideGetter>,
        ILoquiObjectSetter<NpcRaceOverride>,
        INpcRaceOverride
    {
        #region Ctor
        public NpcRaceOverride()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Size
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NpcRaceOverrideSize? _Size;
        public NpcRaceOverrideSize? Size
        {
            get => _Size;
            set => _Size = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INpcRaceOverrideSizeGetter? INpcRaceOverrideGetter.Size => this.Size;
        #endregion
        #region Unknown1
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NpcRaceOverrideUnknown1? _Unknown1;
        public NpcRaceOverrideUnknown1? Unknown1
        {
            get => _Unknown1;
            set => _Unknown1 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INpcRaceOverrideUnknown1Getter? INpcRaceOverrideGetter.Unknown1 => this.Unknown1;
        #endregion
        #region Unknown2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NpcRaceOverrideUnknown2? _Unknown2;
        public NpcRaceOverrideUnknown2? Unknown2
        {
            get => _Unknown2;
            set => _Unknown2 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INpcRaceOverrideUnknown2Getter? INpcRaceOverrideGetter.Unknown2 => this.Unknown2;
        #endregion
        #region UnarmedWeapon
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NpcRaceOverrideUnarmedWeapon? _UnarmedWeapon;
        public NpcRaceOverrideUnarmedWeapon? UnarmedWeapon
        {
            get => _UnarmedWeapon;
            set => _UnarmedWeapon = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INpcRaceOverrideUnarmedWeaponGetter? INpcRaceOverrideGetter.UnarmedWeapon => this.UnarmedWeapon;
        #endregion
        #region Flag
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NpcRaceOverrideFlag? _Flag;
        public NpcRaceOverrideFlag? Flag
        {
            get => _Flag;
            set => _Flag = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INpcRaceOverrideFlagGetter? INpcRaceOverrideGetter.Flag => this.Flag;
        #endregion
        #region Unknown5
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NpcRaceOverrideUnknown5? _Unknown5;
        public NpcRaceOverrideUnknown5? Unknown5
        {
            get => _Unknown5;
            set => _Unknown5 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INpcRaceOverrideUnknown5Getter? INpcRaceOverrideGetter.Unknown5 => this.Unknown5;
        #endregion
        #region General
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NpcRaceOverrideGeneral? _General;
        public NpcRaceOverrideGeneral? General
        {
            get => _General;
            set => _General = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INpcRaceOverrideGeneralGetter? INpcRaceOverrideGetter.General => this.General;
        #endregion
        #region Unknown7
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NpcRaceOverrideUnknown7? _Unknown7;
        public NpcRaceOverrideUnknown7? Unknown7
        {
            get => _Unknown7;
            set => _Unknown7 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INpcRaceOverrideUnknown7Getter? INpcRaceOverrideGetter.Unknown7 => this.Unknown7;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NpcRaceOverrideMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INpcRaceOverrideGetter rhs) return false;
            return ((NpcRaceOverrideCommon)((INpcRaceOverrideGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INpcRaceOverrideGetter? obj)
        {
            return ((NpcRaceOverrideCommon)((INpcRaceOverrideGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NpcRaceOverrideCommon)((INpcRaceOverrideGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Size = new MaskItem<TItem, NpcRaceOverrideSize.Mask<TItem>?>(initialValue, new NpcRaceOverrideSize.Mask<TItem>(initialValue));
                this.Unknown1 = new MaskItem<TItem, NpcRaceOverrideUnknown1.Mask<TItem>?>(initialValue, new NpcRaceOverrideUnknown1.Mask<TItem>(initialValue));
                this.Unknown2 = new MaskItem<TItem, NpcRaceOverrideUnknown2.Mask<TItem>?>(initialValue, new NpcRaceOverrideUnknown2.Mask<TItem>(initialValue));
                this.UnarmedWeapon = new MaskItem<TItem, NpcRaceOverrideUnarmedWeapon.Mask<TItem>?>(initialValue, new NpcRaceOverrideUnarmedWeapon.Mask<TItem>(initialValue));
                this.Flag = new MaskItem<TItem, NpcRaceOverrideFlag.Mask<TItem>?>(initialValue, new NpcRaceOverrideFlag.Mask<TItem>(initialValue));
                this.Unknown5 = new MaskItem<TItem, NpcRaceOverrideUnknown5.Mask<TItem>?>(initialValue, new NpcRaceOverrideUnknown5.Mask<TItem>(initialValue));
                this.General = new MaskItem<TItem, NpcRaceOverrideGeneral.Mask<TItem>?>(initialValue, new NpcRaceOverrideGeneral.Mask<TItem>(initialValue));
                this.Unknown7 = new MaskItem<TItem, NpcRaceOverrideUnknown7.Mask<TItem>?>(initialValue, new NpcRaceOverrideUnknown7.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Size,
                TItem Unknown1,
                TItem Unknown2,
                TItem UnarmedWeapon,
                TItem Flag,
                TItem Unknown5,
                TItem General,
                TItem Unknown7)
            {
                this.Size = new MaskItem<TItem, NpcRaceOverrideSize.Mask<TItem>?>(Size, new NpcRaceOverrideSize.Mask<TItem>(Size));
                this.Unknown1 = new MaskItem<TItem, NpcRaceOverrideUnknown1.Mask<TItem>?>(Unknown1, new NpcRaceOverrideUnknown1.Mask<TItem>(Unknown1));
                this.Unknown2 = new MaskItem<TItem, NpcRaceOverrideUnknown2.Mask<TItem>?>(Unknown2, new NpcRaceOverrideUnknown2.Mask<TItem>(Unknown2));
                this.UnarmedWeapon = new MaskItem<TItem, NpcRaceOverrideUnarmedWeapon.Mask<TItem>?>(UnarmedWeapon, new NpcRaceOverrideUnarmedWeapon.Mask<TItem>(UnarmedWeapon));
                this.Flag = new MaskItem<TItem, NpcRaceOverrideFlag.Mask<TItem>?>(Flag, new NpcRaceOverrideFlag.Mask<TItem>(Flag));
                this.Unknown5 = new MaskItem<TItem, NpcRaceOverrideUnknown5.Mask<TItem>?>(Unknown5, new NpcRaceOverrideUnknown5.Mask<TItem>(Unknown5));
                this.General = new MaskItem<TItem, NpcRaceOverrideGeneral.Mask<TItem>?>(General, new NpcRaceOverrideGeneral.Mask<TItem>(General));
                this.Unknown7 = new MaskItem<TItem, NpcRaceOverrideUnknown7.Mask<TItem>?>(Unknown7, new NpcRaceOverrideUnknown7.Mask<TItem>(Unknown7));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, NpcRaceOverrideSize.Mask<TItem>?>? Size { get; set; }
            public MaskItem<TItem, NpcRaceOverrideUnknown1.Mask<TItem>?>? Unknown1 { get; set; }
            public MaskItem<TItem, NpcRaceOverrideUnknown2.Mask<TItem>?>? Unknown2 { get; set; }
            public MaskItem<TItem, NpcRaceOverrideUnarmedWeapon.Mask<TItem>?>? UnarmedWeapon { get; set; }
            public MaskItem<TItem, NpcRaceOverrideFlag.Mask<TItem>?>? Flag { get; set; }
            public MaskItem<TItem, NpcRaceOverrideUnknown5.Mask<TItem>?>? Unknown5 { get; set; }
            public MaskItem<TItem, NpcRaceOverrideGeneral.Mask<TItem>?>? General { get; set; }
            public MaskItem<TItem, NpcRaceOverrideUnknown7.Mask<TItem>?>? Unknown7 { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Size, rhs.Size)) return false;
                if (!object.Equals(this.Unknown1, rhs.Unknown1)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.UnarmedWeapon, rhs.UnarmedWeapon)) return false;
                if (!object.Equals(this.Flag, rhs.Flag)) return false;
                if (!object.Equals(this.Unknown5, rhs.Unknown5)) return false;
                if (!object.Equals(this.General, rhs.General)) return false;
                if (!object.Equals(this.Unknown7, rhs.Unknown7)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Size);
                hash.Add(this.Unknown1);
                hash.Add(this.Unknown2);
                hash.Add(this.UnarmedWeapon);
                hash.Add(this.Flag);
                hash.Add(this.Unknown5);
                hash.Add(this.General);
                hash.Add(this.Unknown7);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (Size != null)
                {
                    if (!eval(this.Size.Overall)) return false;
                    if (this.Size.Specific != null && !this.Size.Specific.All(eval)) return false;
                }
                if (Unknown1 != null)
                {
                    if (!eval(this.Unknown1.Overall)) return false;
                    if (this.Unknown1.Specific != null && !this.Unknown1.Specific.All(eval)) return false;
                }
                if (Unknown2 != null)
                {
                    if (!eval(this.Unknown2.Overall)) return false;
                    if (this.Unknown2.Specific != null && !this.Unknown2.Specific.All(eval)) return false;
                }
                if (UnarmedWeapon != null)
                {
                    if (!eval(this.UnarmedWeapon.Overall)) return false;
                    if (this.UnarmedWeapon.Specific != null && !this.UnarmedWeapon.Specific.All(eval)) return false;
                }
                if (Flag != null)
                {
                    if (!eval(this.Flag.Overall)) return false;
                    if (this.Flag.Specific != null && !this.Flag.Specific.All(eval)) return false;
                }
                if (Unknown5 != null)
                {
                    if (!eval(this.Unknown5.Overall)) return false;
                    if (this.Unknown5.Specific != null && !this.Unknown5.Specific.All(eval)) return false;
                }
                if (General != null)
                {
                    if (!eval(this.General.Overall)) return false;
                    if (this.General.Specific != null && !this.General.Specific.All(eval)) return false;
                }
                if (Unknown7 != null)
                {
                    if (!eval(this.Unknown7.Overall)) return false;
                    if (this.Unknown7.Specific != null && !this.Unknown7.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (Size != null)
                {
                    if (eval(this.Size.Overall)) return true;
                    if (this.Size.Specific != null && this.Size.Specific.Any(eval)) return true;
                }
                if (Unknown1 != null)
                {
                    if (eval(this.Unknown1.Overall)) return true;
                    if (this.Unknown1.Specific != null && this.Unknown1.Specific.Any(eval)) return true;
                }
                if (Unknown2 != null)
                {
                    if (eval(this.Unknown2.Overall)) return true;
                    if (this.Unknown2.Specific != null && this.Unknown2.Specific.Any(eval)) return true;
                }
                if (UnarmedWeapon != null)
                {
                    if (eval(this.UnarmedWeapon.Overall)) return true;
                    if (this.UnarmedWeapon.Specific != null && this.UnarmedWeapon.Specific.Any(eval)) return true;
                }
                if (Flag != null)
                {
                    if (eval(this.Flag.Overall)) return true;
                    if (this.Flag.Specific != null && this.Flag.Specific.Any(eval)) return true;
                }
                if (Unknown5 != null)
                {
                    if (eval(this.Unknown5.Overall)) return true;
                    if (this.Unknown5.Specific != null && this.Unknown5.Specific.Any(eval)) return true;
                }
                if (General != null)
                {
                    if (eval(this.General.Overall)) return true;
                    if (this.General.Specific != null && this.General.Specific.Any(eval)) return true;
                }
                if (Unknown7 != null)
                {
                    if (eval(this.Unknown7.Overall)) return true;
                    if (this.Unknown7.Specific != null && this.Unknown7.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new NpcRaceOverride.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Size = this.Size == null ? null : new MaskItem<R, NpcRaceOverrideSize.Mask<R>?>(eval(this.Size.Overall), this.Size.Specific?.Translate(eval));
                obj.Unknown1 = this.Unknown1 == null ? null : new MaskItem<R, NpcRaceOverrideUnknown1.Mask<R>?>(eval(this.Unknown1.Overall), this.Unknown1.Specific?.Translate(eval));
                obj.Unknown2 = this.Unknown2 == null ? null : new MaskItem<R, NpcRaceOverrideUnknown2.Mask<R>?>(eval(this.Unknown2.Overall), this.Unknown2.Specific?.Translate(eval));
                obj.UnarmedWeapon = this.UnarmedWeapon == null ? null : new MaskItem<R, NpcRaceOverrideUnarmedWeapon.Mask<R>?>(eval(this.UnarmedWeapon.Overall), this.UnarmedWeapon.Specific?.Translate(eval));
                obj.Flag = this.Flag == null ? null : new MaskItem<R, NpcRaceOverrideFlag.Mask<R>?>(eval(this.Flag.Overall), this.Flag.Specific?.Translate(eval));
                obj.Unknown5 = this.Unknown5 == null ? null : new MaskItem<R, NpcRaceOverrideUnknown5.Mask<R>?>(eval(this.Unknown5.Overall), this.Unknown5.Specific?.Translate(eval));
                obj.General = this.General == null ? null : new MaskItem<R, NpcRaceOverrideGeneral.Mask<R>?>(eval(this.General.Overall), this.General.Specific?.Translate(eval));
                obj.Unknown7 = this.Unknown7 == null ? null : new MaskItem<R, NpcRaceOverrideUnknown7.Mask<R>?>(eval(this.Unknown7.Overall), this.Unknown7.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(NpcRaceOverride.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, NpcRaceOverride.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(NpcRaceOverride.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Size?.Overall ?? true)
                    {
                        Size?.Print(sb);
                    }
                    if (printMask?.Unknown1?.Overall ?? true)
                    {
                        Unknown1?.Print(sb);
                    }
                    if (printMask?.Unknown2?.Overall ?? true)
                    {
                        Unknown2?.Print(sb);
                    }
                    if (printMask?.UnarmedWeapon?.Overall ?? true)
                    {
                        UnarmedWeapon?.Print(sb);
                    }
                    if (printMask?.Flag?.Overall ?? true)
                    {
                        Flag?.Print(sb);
                    }
                    if (printMask?.Unknown5?.Overall ?? true)
                    {
                        Unknown5?.Print(sb);
                    }
                    if (printMask?.General?.Overall ?? true)
                    {
                        General?.Print(sb);
                    }
                    if (printMask?.Unknown7?.Overall ?? true)
                    {
                        Unknown7?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, NpcRaceOverrideSize.ErrorMask?>? Size;
            public MaskItem<Exception?, NpcRaceOverrideUnknown1.ErrorMask?>? Unknown1;
            public MaskItem<Exception?, NpcRaceOverrideUnknown2.ErrorMask?>? Unknown2;
            public MaskItem<Exception?, NpcRaceOverrideUnarmedWeapon.ErrorMask?>? UnarmedWeapon;
            public MaskItem<Exception?, NpcRaceOverrideFlag.ErrorMask?>? Flag;
            public MaskItem<Exception?, NpcRaceOverrideUnknown5.ErrorMask?>? Unknown5;
            public MaskItem<Exception?, NpcRaceOverrideGeneral.ErrorMask?>? General;
            public MaskItem<Exception?, NpcRaceOverrideUnknown7.ErrorMask?>? Unknown7;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                NpcRaceOverride_FieldIndex enu = (NpcRaceOverride_FieldIndex)index;
                switch (enu)
                {
                    case NpcRaceOverride_FieldIndex.Size:
                        return Size;
                    case NpcRaceOverride_FieldIndex.Unknown1:
                        return Unknown1;
                    case NpcRaceOverride_FieldIndex.Unknown2:
                        return Unknown2;
                    case NpcRaceOverride_FieldIndex.UnarmedWeapon:
                        return UnarmedWeapon;
                    case NpcRaceOverride_FieldIndex.Flag:
                        return Flag;
                    case NpcRaceOverride_FieldIndex.Unknown5:
                        return Unknown5;
                    case NpcRaceOverride_FieldIndex.General:
                        return General;
                    case NpcRaceOverride_FieldIndex.Unknown7:
                        return Unknown7;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                NpcRaceOverride_FieldIndex enu = (NpcRaceOverride_FieldIndex)index;
                switch (enu)
                {
                    case NpcRaceOverride_FieldIndex.Size:
                        this.Size = new MaskItem<Exception?, NpcRaceOverrideSize.ErrorMask?>(ex, null);
                        break;
                    case NpcRaceOverride_FieldIndex.Unknown1:
                        this.Unknown1 = new MaskItem<Exception?, NpcRaceOverrideUnknown1.ErrorMask?>(ex, null);
                        break;
                    case NpcRaceOverride_FieldIndex.Unknown2:
                        this.Unknown2 = new MaskItem<Exception?, NpcRaceOverrideUnknown2.ErrorMask?>(ex, null);
                        break;
                    case NpcRaceOverride_FieldIndex.UnarmedWeapon:
                        this.UnarmedWeapon = new MaskItem<Exception?, NpcRaceOverrideUnarmedWeapon.ErrorMask?>(ex, null);
                        break;
                    case NpcRaceOverride_FieldIndex.Flag:
                        this.Flag = new MaskItem<Exception?, NpcRaceOverrideFlag.ErrorMask?>(ex, null);
                        break;
                    case NpcRaceOverride_FieldIndex.Unknown5:
                        this.Unknown5 = new MaskItem<Exception?, NpcRaceOverrideUnknown5.ErrorMask?>(ex, null);
                        break;
                    case NpcRaceOverride_FieldIndex.General:
                        this.General = new MaskItem<Exception?, NpcRaceOverrideGeneral.ErrorMask?>(ex, null);
                        break;
                    case NpcRaceOverride_FieldIndex.Unknown7:
                        this.Unknown7 = new MaskItem<Exception?, NpcRaceOverrideUnknown7.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                NpcRaceOverride_FieldIndex enu = (NpcRaceOverride_FieldIndex)index;
                switch (enu)
                {
                    case NpcRaceOverride_FieldIndex.Size:
                        this.Size = (MaskItem<Exception?, NpcRaceOverrideSize.ErrorMask?>?)obj;
                        break;
                    case NpcRaceOverride_FieldIndex.Unknown1:
                        this.Unknown1 = (MaskItem<Exception?, NpcRaceOverrideUnknown1.ErrorMask?>?)obj;
                        break;
                    case NpcRaceOverride_FieldIndex.Unknown2:
                        this.Unknown2 = (MaskItem<Exception?, NpcRaceOverrideUnknown2.ErrorMask?>?)obj;
                        break;
                    case NpcRaceOverride_FieldIndex.UnarmedWeapon:
                        this.UnarmedWeapon = (MaskItem<Exception?, NpcRaceOverrideUnarmedWeapon.ErrorMask?>?)obj;
                        break;
                    case NpcRaceOverride_FieldIndex.Flag:
                        this.Flag = (MaskItem<Exception?, NpcRaceOverrideFlag.ErrorMask?>?)obj;
                        break;
                    case NpcRaceOverride_FieldIndex.Unknown5:
                        this.Unknown5 = (MaskItem<Exception?, NpcRaceOverrideUnknown5.ErrorMask?>?)obj;
                        break;
                    case NpcRaceOverride_FieldIndex.General:
                        this.General = (MaskItem<Exception?, NpcRaceOverrideGeneral.ErrorMask?>?)obj;
                        break;
                    case NpcRaceOverride_FieldIndex.Unknown7:
                        this.Unknown7 = (MaskItem<Exception?, NpcRaceOverrideUnknown7.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Size != null) return true;
                if (Unknown1 != null) return true;
                if (Unknown2 != null) return true;
                if (UnarmedWeapon != null) return true;
                if (Flag != null) return true;
                if (Unknown5 != null) return true;
                if (General != null) return true;
                if (Unknown7 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                Size?.Print(sb);
                Unknown1?.Print(sb);
                Unknown2?.Print(sb);
                UnarmedWeapon?.Print(sb);
                Flag?.Print(sb);
                Unknown5?.Print(sb);
                General?.Print(sb);
                Unknown7?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Size = this.Size.Combine(rhs.Size, (l, r) => l.Combine(r));
                ret.Unknown1 = this.Unknown1.Combine(rhs.Unknown1, (l, r) => l.Combine(r));
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2, (l, r) => l.Combine(r));
                ret.UnarmedWeapon = this.UnarmedWeapon.Combine(rhs.UnarmedWeapon, (l, r) => l.Combine(r));
                ret.Flag = this.Flag.Combine(rhs.Flag, (l, r) => l.Combine(r));
                ret.Unknown5 = this.Unknown5.Combine(rhs.Unknown5, (l, r) => l.Combine(r));
                ret.General = this.General.Combine(rhs.General, (l, r) => l.Combine(r));
                ret.Unknown7 = this.Unknown7.Combine(rhs.Unknown7, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public NpcRaceOverrideSize.TranslationMask? Size;
            public NpcRaceOverrideUnknown1.TranslationMask? Unknown1;
            public NpcRaceOverrideUnknown2.TranslationMask? Unknown2;
            public NpcRaceOverrideUnarmedWeapon.TranslationMask? UnarmedWeapon;
            public NpcRaceOverrideFlag.TranslationMask? Flag;
            public NpcRaceOverrideUnknown5.TranslationMask? Unknown5;
            public NpcRaceOverrideGeneral.TranslationMask? General;
            public NpcRaceOverrideUnknown7.TranslationMask? Unknown7;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Size != null ? Size.OnOverall : DefaultOn, Size?.GetCrystal()));
                ret.Add((Unknown1 != null ? Unknown1.OnOverall : DefaultOn, Unknown1?.GetCrystal()));
                ret.Add((Unknown2 != null ? Unknown2.OnOverall : DefaultOn, Unknown2?.GetCrystal()));
                ret.Add((UnarmedWeapon != null ? UnarmedWeapon.OnOverall : DefaultOn, UnarmedWeapon?.GetCrystal()));
                ret.Add((Flag != null ? Flag.OnOverall : DefaultOn, Flag?.GetCrystal()));
                ret.Add((Unknown5 != null ? Unknown5.OnOverall : DefaultOn, Unknown5?.GetCrystal()));
                ret.Add((General != null ? General.OnOverall : DefaultOn, General?.GetCrystal()));
                ret.Add((Unknown7 != null ? Unknown7.OnOverall : DefaultOn, Unknown7?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => NpcRaceOverrideCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => NpcRaceOverrideSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NpcRaceOverrideBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcRaceOverrideBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static NpcRaceOverride CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new NpcRaceOverride();
            ((NpcRaceOverrideSetterCommon)((INpcRaceOverrideGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out NpcRaceOverride item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((NpcRaceOverrideSetterCommon)((INpcRaceOverrideGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static NpcRaceOverride GetNew()
        {
            return new NpcRaceOverride();
        }

    }
    #endregion

    #region Interface
    public partial interface INpcRaceOverride :
        IFormLinkContainer,
        ILoquiObjectSetter<INpcRaceOverride>,
        INpcRaceOverrideGetter
    {
        new NpcRaceOverrideSize? Size { get; set; }
        new NpcRaceOverrideUnknown1? Unknown1 { get; set; }
        new NpcRaceOverrideUnknown2? Unknown2 { get; set; }
        new NpcRaceOverrideUnarmedWeapon? UnarmedWeapon { get; set; }
        new NpcRaceOverrideFlag? Flag { get; set; }
        new NpcRaceOverrideUnknown5? Unknown5 { get; set; }
        new NpcRaceOverrideGeneral? General { get; set; }
        new NpcRaceOverrideUnknown7? Unknown7 { get; set; }
    }

    public partial interface INpcRaceOverrideGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<INpcRaceOverrideGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => NpcRaceOverride_Registration.Instance;
        INpcRaceOverrideSizeGetter? Size { get; }
        INpcRaceOverrideUnknown1Getter? Unknown1 { get; }
        INpcRaceOverrideUnknown2Getter? Unknown2 { get; }
        INpcRaceOverrideUnarmedWeaponGetter? UnarmedWeapon { get; }
        INpcRaceOverrideFlagGetter? Flag { get; }
        INpcRaceOverrideUnknown5Getter? Unknown5 { get; }
        INpcRaceOverrideGeneralGetter? General { get; }
        INpcRaceOverrideUnknown7Getter? Unknown7 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class NpcRaceOverrideMixIn
    {
        public static void Clear(this INpcRaceOverride item)
        {
            ((NpcRaceOverrideSetterCommon)((INpcRaceOverrideGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static NpcRaceOverride.Mask<bool> GetEqualsMask(
            this INpcRaceOverrideGetter item,
            INpcRaceOverrideGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NpcRaceOverrideCommon)((INpcRaceOverrideGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this INpcRaceOverrideGetter item,
            string? name = null,
            NpcRaceOverride.Mask<bool>? printMask = null)
        {
            return ((NpcRaceOverrideCommon)((INpcRaceOverrideGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this INpcRaceOverrideGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NpcRaceOverride.Mask<bool>? printMask = null)
        {
            ((NpcRaceOverrideCommon)((INpcRaceOverrideGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INpcRaceOverrideGetter item,
            INpcRaceOverrideGetter rhs,
            NpcRaceOverride.TranslationMask? equalsMask = null)
        {
            return ((NpcRaceOverrideCommon)((INpcRaceOverrideGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this INpcRaceOverride lhs,
            INpcRaceOverrideGetter rhs)
        {
            ((NpcRaceOverrideSetterTranslationCommon)((INpcRaceOverrideGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INpcRaceOverride lhs,
            INpcRaceOverrideGetter rhs,
            NpcRaceOverride.TranslationMask? copyMask = null)
        {
            ((NpcRaceOverrideSetterTranslationCommon)((INpcRaceOverrideGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INpcRaceOverride lhs,
            INpcRaceOverrideGetter rhs,
            out NpcRaceOverride.ErrorMask errorMask,
            NpcRaceOverride.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NpcRaceOverrideSetterTranslationCommon)((INpcRaceOverrideGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = NpcRaceOverride.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INpcRaceOverride lhs,
            INpcRaceOverrideGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NpcRaceOverrideSetterTranslationCommon)((INpcRaceOverrideGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static NpcRaceOverride DeepCopy(
            this INpcRaceOverrideGetter item,
            NpcRaceOverride.TranslationMask? copyMask = null)
        {
            return ((NpcRaceOverrideSetterTranslationCommon)((INpcRaceOverrideGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NpcRaceOverride DeepCopy(
            this INpcRaceOverrideGetter item,
            out NpcRaceOverride.ErrorMask errorMask,
            NpcRaceOverride.TranslationMask? copyMask = null)
        {
            return ((NpcRaceOverrideSetterTranslationCommon)((INpcRaceOverrideGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NpcRaceOverride DeepCopy(
            this INpcRaceOverrideGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NpcRaceOverrideSetterTranslationCommon)((INpcRaceOverrideGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this INpcRaceOverride item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((NpcRaceOverrideSetterCommon)((INpcRaceOverrideGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum NpcRaceOverride_FieldIndex
    {
        Size = 0,
        Unknown1 = 1,
        Unknown2 = 2,
        UnarmedWeapon = 3,
        Flag = 4,
        Unknown5 = 5,
        General = 6,
        Unknown7 = 7,
    }
    #endregion

    #region Registration
    internal partial class NpcRaceOverride_Registration : ILoquiRegistration
    {
        public static readonly NpcRaceOverride_Registration Instance = new NpcRaceOverride_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(NpcRaceOverride.Mask<>);

        public static readonly Type ErrorMaskType = typeof(NpcRaceOverride.ErrorMask);

        public static readonly Type ClassType = typeof(NpcRaceOverride);

        public static readonly Type GetterType = typeof(INpcRaceOverrideGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INpcRaceOverride);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.NpcRaceOverride";

        public const string Name = "NpcRaceOverride";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ONA2;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.ONA2);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(NpcRaceOverrideBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class NpcRaceOverrideSetterCommon
    {
        public static readonly NpcRaceOverrideSetterCommon Instance = new NpcRaceOverrideSetterCommon();

        partial void ClearPartial();
        
        public void Clear(INpcRaceOverride item)
        {
            ClearPartial();
            item.Size = null;
            item.Unknown1 = null;
            item.Unknown2 = null;
            item.UnarmedWeapon = null;
            item.Flag = null;
            item.Unknown5 = null;
            item.General = null;
            item.Unknown7 = null;
        }
        
        #region Mutagen
        public void RemapLinks(INpcRaceOverride obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.UnarmedWeapon?.RemapLinks(mapping);
            obj.General?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INpcRaceOverride item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.ONA2),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: NpcRaceOverrideBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class NpcRaceOverrideCommon
    {
        public static readonly NpcRaceOverrideCommon Instance = new NpcRaceOverrideCommon();

        public NpcRaceOverride.Mask<bool> GetEqualsMask(
            INpcRaceOverrideGetter item,
            INpcRaceOverrideGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NpcRaceOverride.Mask<bool>(false);
            ((NpcRaceOverrideCommon)((INpcRaceOverrideGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INpcRaceOverrideGetter item,
            INpcRaceOverrideGetter rhs,
            NpcRaceOverride.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Size = EqualsMaskHelper.EqualsHelper(
                item.Size,
                rhs.Size,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Unknown1 = EqualsMaskHelper.EqualsHelper(
                item.Unknown1,
                rhs.Unknown1,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Unknown2 = EqualsMaskHelper.EqualsHelper(
                item.Unknown2,
                rhs.Unknown2,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.UnarmedWeapon = EqualsMaskHelper.EqualsHelper(
                item.UnarmedWeapon,
                rhs.UnarmedWeapon,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Flag = EqualsMaskHelper.EqualsHelper(
                item.Flag,
                rhs.Flag,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Unknown5 = EqualsMaskHelper.EqualsHelper(
                item.Unknown5,
                rhs.Unknown5,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.General = EqualsMaskHelper.EqualsHelper(
                item.General,
                rhs.General,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Unknown7 = EqualsMaskHelper.EqualsHelper(
                item.Unknown7,
                rhs.Unknown7,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string Print(
            INpcRaceOverrideGetter item,
            string? name = null,
            NpcRaceOverride.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            INpcRaceOverrideGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NpcRaceOverride.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"NpcRaceOverride =>");
            }
            else
            {
                sb.AppendLine($"{name} (NpcRaceOverride) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            INpcRaceOverrideGetter item,
            StructuredStringBuilder sb,
            NpcRaceOverride.Mask<bool>? printMask = null)
        {
            if ((printMask?.Size?.Overall ?? true)
                && item.Size is {} SizeItem)
            {
                SizeItem?.Print(sb, "Size");
            }
            if ((printMask?.Unknown1?.Overall ?? true)
                && item.Unknown1 is {} Unknown1Item)
            {
                Unknown1Item?.Print(sb, "Unknown1");
            }
            if ((printMask?.Unknown2?.Overall ?? true)
                && item.Unknown2 is {} Unknown2Item)
            {
                Unknown2Item?.Print(sb, "Unknown2");
            }
            if ((printMask?.UnarmedWeapon?.Overall ?? true)
                && item.UnarmedWeapon is {} UnarmedWeaponItem)
            {
                UnarmedWeaponItem?.Print(sb, "UnarmedWeapon");
            }
            if ((printMask?.Flag?.Overall ?? true)
                && item.Flag is {} FlagItem)
            {
                FlagItem?.Print(sb, "Flag");
            }
            if ((printMask?.Unknown5?.Overall ?? true)
                && item.Unknown5 is {} Unknown5Item)
            {
                Unknown5Item?.Print(sb, "Unknown5");
            }
            if ((printMask?.General?.Overall ?? true)
                && item.General is {} GeneralItem)
            {
                GeneralItem?.Print(sb, "General");
            }
            if ((printMask?.Unknown7?.Overall ?? true)
                && item.Unknown7 is {} Unknown7Item)
            {
                Unknown7Item?.Print(sb, "Unknown7");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INpcRaceOverrideGetter? lhs,
            INpcRaceOverrideGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)NpcRaceOverride_FieldIndex.Size) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Size, rhs.Size, out var lhsSize, out var rhsSize, out var isSizeEqual))
                {
                    if (!((NpcRaceOverrideSizeCommon)((INpcRaceOverrideSizeGetter)lhsSize).CommonInstance()!).Equals(lhsSize, rhsSize, equalsMask?.GetSubCrystal((int)NpcRaceOverride_FieldIndex.Size))) return false;
                }
                else if (!isSizeEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRaceOverride_FieldIndex.Unknown1) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Unknown1, rhs.Unknown1, out var lhsUnknown1, out var rhsUnknown1, out var isUnknown1Equal))
                {
                    if (!((NpcRaceOverrideUnknown1Common)((INpcRaceOverrideUnknown1Getter)lhsUnknown1).CommonInstance()!).Equals(lhsUnknown1, rhsUnknown1, equalsMask?.GetSubCrystal((int)NpcRaceOverride_FieldIndex.Unknown1))) return false;
                }
                else if (!isUnknown1Equal) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRaceOverride_FieldIndex.Unknown2) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Unknown2, rhs.Unknown2, out var lhsUnknown2, out var rhsUnknown2, out var isUnknown2Equal))
                {
                    if (!((NpcRaceOverrideUnknown2Common)((INpcRaceOverrideUnknown2Getter)lhsUnknown2).CommonInstance()!).Equals(lhsUnknown2, rhsUnknown2, equalsMask?.GetSubCrystal((int)NpcRaceOverride_FieldIndex.Unknown2))) return false;
                }
                else if (!isUnknown2Equal) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRaceOverride_FieldIndex.UnarmedWeapon) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.UnarmedWeapon, rhs.UnarmedWeapon, out var lhsUnarmedWeapon, out var rhsUnarmedWeapon, out var isUnarmedWeaponEqual))
                {
                    if (!((NpcRaceOverrideUnarmedWeaponCommon)((INpcRaceOverrideUnarmedWeaponGetter)lhsUnarmedWeapon).CommonInstance()!).Equals(lhsUnarmedWeapon, rhsUnarmedWeapon, equalsMask?.GetSubCrystal((int)NpcRaceOverride_FieldIndex.UnarmedWeapon))) return false;
                }
                else if (!isUnarmedWeaponEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRaceOverride_FieldIndex.Flag) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Flag, rhs.Flag, out var lhsFlag, out var rhsFlag, out var isFlagEqual))
                {
                    if (!((NpcRaceOverrideFlagCommon)((INpcRaceOverrideFlagGetter)lhsFlag).CommonInstance()!).Equals(lhsFlag, rhsFlag, equalsMask?.GetSubCrystal((int)NpcRaceOverride_FieldIndex.Flag))) return false;
                }
                else if (!isFlagEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRaceOverride_FieldIndex.Unknown5) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Unknown5, rhs.Unknown5, out var lhsUnknown5, out var rhsUnknown5, out var isUnknown5Equal))
                {
                    if (!((NpcRaceOverrideUnknown5Common)((INpcRaceOverrideUnknown5Getter)lhsUnknown5).CommonInstance()!).Equals(lhsUnknown5, rhsUnknown5, equalsMask?.GetSubCrystal((int)NpcRaceOverride_FieldIndex.Unknown5))) return false;
                }
                else if (!isUnknown5Equal) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRaceOverride_FieldIndex.General) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.General, rhs.General, out var lhsGeneral, out var rhsGeneral, out var isGeneralEqual))
                {
                    if (!((NpcRaceOverrideGeneralCommon)((INpcRaceOverrideGeneralGetter)lhsGeneral).CommonInstance()!).Equals(lhsGeneral, rhsGeneral, equalsMask?.GetSubCrystal((int)NpcRaceOverride_FieldIndex.General))) return false;
                }
                else if (!isGeneralEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRaceOverride_FieldIndex.Unknown7) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Unknown7, rhs.Unknown7, out var lhsUnknown7, out var rhsUnknown7, out var isUnknown7Equal))
                {
                    if (!((NpcRaceOverrideUnknown7Common)((INpcRaceOverrideUnknown7Getter)lhsUnknown7).CommonInstance()!).Equals(lhsUnknown7, rhsUnknown7, equalsMask?.GetSubCrystal((int)NpcRaceOverride_FieldIndex.Unknown7))) return false;
                }
                else if (!isUnknown7Equal) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(INpcRaceOverrideGetter item)
        {
            var hash = new HashCode();
            if (item.Size is {} Sizeitem)
            {
                hash.Add(Sizeitem);
            }
            if (item.Unknown1 is {} Unknown1item)
            {
                hash.Add(Unknown1item);
            }
            if (item.Unknown2 is {} Unknown2item)
            {
                hash.Add(Unknown2item);
            }
            if (item.UnarmedWeapon is {} UnarmedWeaponitem)
            {
                hash.Add(UnarmedWeaponitem);
            }
            if (item.Flag is {} Flagitem)
            {
                hash.Add(Flagitem);
            }
            if (item.Unknown5 is {} Unknown5item)
            {
                hash.Add(Unknown5item);
            }
            if (item.General is {} Generalitem)
            {
                hash.Add(Generalitem);
            }
            if (item.Unknown7 is {} Unknown7item)
            {
                hash.Add(Unknown7item);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return NpcRaceOverride.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(INpcRaceOverrideGetter obj)
        {
            if (obj.UnarmedWeapon is {} UnarmedWeaponItems)
            {
                foreach (var item in UnarmedWeaponItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.General is {} GeneralItems)
            {
                foreach (var item in GeneralItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class NpcRaceOverrideSetterTranslationCommon
    {
        public static readonly NpcRaceOverrideSetterTranslationCommon Instance = new NpcRaceOverrideSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            INpcRaceOverride item,
            INpcRaceOverrideGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)NpcRaceOverride_FieldIndex.Size) ?? true))
            {
                errorMask?.PushIndex((int)NpcRaceOverride_FieldIndex.Size);
                try
                {
                    if(rhs.Size is {} rhsSize)
                    {
                        item.Size = rhsSize.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)NpcRaceOverride_FieldIndex.Size));
                    }
                    else
                    {
                        item.Size = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRaceOverride_FieldIndex.Unknown1) ?? true))
            {
                errorMask?.PushIndex((int)NpcRaceOverride_FieldIndex.Unknown1);
                try
                {
                    if(rhs.Unknown1 is {} rhsUnknown1)
                    {
                        item.Unknown1 = rhsUnknown1.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)NpcRaceOverride_FieldIndex.Unknown1));
                    }
                    else
                    {
                        item.Unknown1 = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRaceOverride_FieldIndex.Unknown2) ?? true))
            {
                errorMask?.PushIndex((int)NpcRaceOverride_FieldIndex.Unknown2);
                try
                {
                    if(rhs.Unknown2 is {} rhsUnknown2)
                    {
                        item.Unknown2 = rhsUnknown2.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)NpcRaceOverride_FieldIndex.Unknown2));
                    }
                    else
                    {
                        item.Unknown2 = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRaceOverride_FieldIndex.UnarmedWeapon) ?? true))
            {
                errorMask?.PushIndex((int)NpcRaceOverride_FieldIndex.UnarmedWeapon);
                try
                {
                    if(rhs.UnarmedWeapon is {} rhsUnarmedWeapon)
                    {
                        item.UnarmedWeapon = rhsUnarmedWeapon.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)NpcRaceOverride_FieldIndex.UnarmedWeapon));
                    }
                    else
                    {
                        item.UnarmedWeapon = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRaceOverride_FieldIndex.Flag) ?? true))
            {
                errorMask?.PushIndex((int)NpcRaceOverride_FieldIndex.Flag);
                try
                {
                    if(rhs.Flag is {} rhsFlag)
                    {
                        item.Flag = rhsFlag.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)NpcRaceOverride_FieldIndex.Flag));
                    }
                    else
                    {
                        item.Flag = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRaceOverride_FieldIndex.Unknown5) ?? true))
            {
                errorMask?.PushIndex((int)NpcRaceOverride_FieldIndex.Unknown5);
                try
                {
                    if(rhs.Unknown5 is {} rhsUnknown5)
                    {
                        item.Unknown5 = rhsUnknown5.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)NpcRaceOverride_FieldIndex.Unknown5));
                    }
                    else
                    {
                        item.Unknown5 = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRaceOverride_FieldIndex.General) ?? true))
            {
                errorMask?.PushIndex((int)NpcRaceOverride_FieldIndex.General);
                try
                {
                    if(rhs.General is {} rhsGeneral)
                    {
                        item.General = rhsGeneral.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)NpcRaceOverride_FieldIndex.General));
                    }
                    else
                    {
                        item.General = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRaceOverride_FieldIndex.Unknown7) ?? true))
            {
                errorMask?.PushIndex((int)NpcRaceOverride_FieldIndex.Unknown7);
                try
                {
                    if(rhs.Unknown7 is {} rhsUnknown7)
                    {
                        item.Unknown7 = rhsUnknown7.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)NpcRaceOverride_FieldIndex.Unknown7));
                    }
                    else
                    {
                        item.Unknown7 = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public NpcRaceOverride DeepCopy(
            INpcRaceOverrideGetter item,
            NpcRaceOverride.TranslationMask? copyMask = null)
        {
            NpcRaceOverride ret = (NpcRaceOverride)((NpcRaceOverrideCommon)((INpcRaceOverrideGetter)item).CommonInstance()!).GetNew();
            ((NpcRaceOverrideSetterTranslationCommon)((INpcRaceOverrideGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public NpcRaceOverride DeepCopy(
            INpcRaceOverrideGetter item,
            out NpcRaceOverride.ErrorMask errorMask,
            NpcRaceOverride.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            NpcRaceOverride ret = (NpcRaceOverride)((NpcRaceOverrideCommon)((INpcRaceOverrideGetter)item).CommonInstance()!).GetNew();
            ((NpcRaceOverrideSetterTranslationCommon)((INpcRaceOverrideGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = NpcRaceOverride.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public NpcRaceOverride DeepCopy(
            INpcRaceOverrideGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            NpcRaceOverride ret = (NpcRaceOverride)((NpcRaceOverrideCommon)((INpcRaceOverrideGetter)item).CommonInstance()!).GetNew();
            ((NpcRaceOverrideSetterTranslationCommon)((INpcRaceOverrideGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class NpcRaceOverride
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NpcRaceOverride_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => NpcRaceOverride_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NpcRaceOverrideCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return NpcRaceOverrideSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NpcRaceOverrideSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INpcRaceOverrideGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object INpcRaceOverrideGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object INpcRaceOverrideGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class NpcRaceOverrideBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly NpcRaceOverrideBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            INpcRaceOverrideGetter item,
            MutagenWriter writer)
        {
            NpcRaceOverrideBinaryWriteTranslation.WriteBinaryFlagParse(
                writer: writer,
                item: item);
            if (item.Size is {} SizeItem)
            {
                ((NpcRaceOverrideSizeBinaryWriteTranslation)((IBinaryItem)SizeItem).BinaryWriteTranslator).Write(
                    item: SizeItem,
                    writer: writer);
            }
            if (item.Unknown1 is {} Unknown1Item)
            {
                ((NpcRaceOverrideUnknown1BinaryWriteTranslation)((IBinaryItem)Unknown1Item).BinaryWriteTranslator).Write(
                    item: Unknown1Item,
                    writer: writer);
            }
            if (item.Unknown2 is {} Unknown2Item)
            {
                ((NpcRaceOverrideUnknown2BinaryWriteTranslation)((IBinaryItem)Unknown2Item).BinaryWriteTranslator).Write(
                    item: Unknown2Item,
                    writer: writer);
            }
            if (item.UnarmedWeapon is {} UnarmedWeaponItem)
            {
                ((NpcRaceOverrideUnarmedWeaponBinaryWriteTranslation)((IBinaryItem)UnarmedWeaponItem).BinaryWriteTranslator).Write(
                    item: UnarmedWeaponItem,
                    writer: writer);
            }
            if (item.Flag is {} FlagItem)
            {
                ((NpcRaceOverrideFlagBinaryWriteTranslation)((IBinaryItem)FlagItem).BinaryWriteTranslator).Write(
                    item: FlagItem,
                    writer: writer);
            }
            if (item.Unknown5 is {} Unknown5Item)
            {
                ((NpcRaceOverrideUnknown5BinaryWriteTranslation)((IBinaryItem)Unknown5Item).BinaryWriteTranslator).Write(
                    item: Unknown5Item,
                    writer: writer);
            }
            if (item.General is {} GeneralItem)
            {
                ((NpcRaceOverrideGeneralBinaryWriteTranslation)((IBinaryItem)GeneralItem).BinaryWriteTranslator).Write(
                    item: GeneralItem,
                    writer: writer);
            }
            if (item.Unknown7 is {} Unknown7Item)
            {
                ((NpcRaceOverrideUnknown7BinaryWriteTranslation)((IBinaryItem)Unknown7Item).BinaryWriteTranslator).Write(
                    item: Unknown7Item,
                    writer: writer);
            }
        }

        public static partial void WriteBinaryFlagParseCustom(
            MutagenWriter writer,
            INpcRaceOverrideGetter item);

        public static void WriteBinaryFlagParse(
            MutagenWriter writer,
            INpcRaceOverrideGetter item)
        {
            WriteBinaryFlagParseCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            INpcRaceOverrideGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.ONA2),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (INpcRaceOverrideGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class NpcRaceOverrideBinaryCreateTranslation
    {
        public static readonly NpcRaceOverrideBinaryCreateTranslation Instance = new NpcRaceOverrideBinaryCreateTranslation();

        public static void FillBinaryStructs(
            INpcRaceOverride item,
            MutagenFrame frame)
        {
            NpcRaceOverrideBinaryCreateTranslation.FillBinaryFlagParseCustom(
                frame: frame,
                item: item);
            if (frame.Complete) return;
            item.Size = Mutagen.Bethesda.Starfield.NpcRaceOverrideSize.CreateFromBinary(frame: frame);
            if (frame.Complete) return;
            item.Unknown1 = Mutagen.Bethesda.Starfield.NpcRaceOverrideUnknown1.CreateFromBinary(frame: frame);
            if (frame.Complete) return;
            item.Unknown2 = Mutagen.Bethesda.Starfield.NpcRaceOverrideUnknown2.CreateFromBinary(frame: frame);
            if (frame.Complete) return;
            item.UnarmedWeapon = Mutagen.Bethesda.Starfield.NpcRaceOverrideUnarmedWeapon.CreateFromBinary(frame: frame);
            if (frame.Complete) return;
            item.Flag = Mutagen.Bethesda.Starfield.NpcRaceOverrideFlag.CreateFromBinary(frame: frame);
            if (frame.Complete) return;
            item.Unknown5 = Mutagen.Bethesda.Starfield.NpcRaceOverrideUnknown5.CreateFromBinary(frame: frame);
            if (frame.Complete) return;
            item.General = Mutagen.Bethesda.Starfield.NpcRaceOverrideGeneral.CreateFromBinary(frame: frame);
            if (frame.Complete) return;
            item.Unknown7 = Mutagen.Bethesda.Starfield.NpcRaceOverrideUnknown7.CreateFromBinary(frame: frame);
        }

        public static partial void FillBinaryFlagParseCustom(
            MutagenFrame frame,
            INpcRaceOverride item);

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class NpcRaceOverrideBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this INpcRaceOverrideGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcRaceOverrideBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class NpcRaceOverrideBinaryOverlay :
        PluginBinaryOverlay,
        INpcRaceOverrideGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NpcRaceOverride_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => NpcRaceOverride_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NpcRaceOverrideCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NpcRaceOverrideSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INpcRaceOverrideGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? INpcRaceOverrideGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object INpcRaceOverrideGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => NpcRaceOverrideCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NpcRaceOverrideBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcRaceOverrideBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region FlagParse
        partial void FlagParseCustomParse(
            OverlayStream stream,
            int offset);
        #endregion
        public INpcRaceOverrideSizeGetter Size => NpcRaceOverrideSizeBinaryOverlay.NpcRaceOverrideSizeFactory(_structData.Slice(0x4), _package, default(TypedParseParams));
        public INpcRaceOverrideUnknown1Getter Unknown1 => NpcRaceOverrideUnknown1BinaryOverlay.NpcRaceOverrideUnknown1Factory(_structData.Slice(0x8), _package, default(TypedParseParams));
        public INpcRaceOverrideUnknown2Getter Unknown2 => NpcRaceOverrideUnknown2BinaryOverlay.NpcRaceOverrideUnknown2Factory(_structData.Slice(0x18), _package, default(TypedParseParams));
        public INpcRaceOverrideUnarmedWeaponGetter UnarmedWeapon => NpcRaceOverrideUnarmedWeaponBinaryOverlay.NpcRaceOverrideUnarmedWeaponFactory(_structData.Slice(0x1C), _package, default(TypedParseParams));
        public INpcRaceOverrideFlagGetter Flag => NpcRaceOverrideFlagBinaryOverlay.NpcRaceOverrideFlagFactory(_structData.Slice(0x24), _package, default(TypedParseParams));
        public INpcRaceOverrideUnknown5Getter Unknown5 => NpcRaceOverrideUnknown5BinaryOverlay.NpcRaceOverrideUnknown5Factory(_structData.Slice(0x34), _package, default(TypedParseParams));
        public INpcRaceOverrideGeneralGetter General => NpcRaceOverrideGeneralBinaryOverlay.NpcRaceOverrideGeneralFactory(_structData.Slice(0x4C), _package, default(TypedParseParams));
        public INpcRaceOverrideUnknown7Getter Unknown7 => NpcRaceOverrideUnknown7BinaryOverlay.NpcRaceOverrideUnknown7Factory(_structData.Slice(0xB6), _package, default(TypedParseParams));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NpcRaceOverrideBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static INpcRaceOverrideGetter NpcRaceOverrideFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0xD3,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new NpcRaceOverrideBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0xD3 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static INpcRaceOverrideGetter NpcRaceOverrideFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return NpcRaceOverrideFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NpcRaceOverrideMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INpcRaceOverrideGetter rhs) return false;
            return ((NpcRaceOverrideCommon)((INpcRaceOverrideGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INpcRaceOverrideGetter? obj)
        {
            return ((NpcRaceOverrideCommon)((INpcRaceOverrideGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NpcRaceOverrideCommon)((INpcRaceOverrideGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

