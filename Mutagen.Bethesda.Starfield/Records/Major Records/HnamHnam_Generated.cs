/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class HnamHnam :
        IEquatable<IHnamHnamGetter>,
        IHnamHnam,
        ILoquiObjectSetter<HnamHnam>
    {
        #region Ctor
        public HnamHnam()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ReferenceAliasIDs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Int32>? _ReferenceAliasIDs;
        public ExtendedList<Int32>? ReferenceAliasIDs
        {
            get => this._ReferenceAliasIDs;
            set => this._ReferenceAliasIDs = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<Int32>? IHnamHnamGetter.ReferenceAliasIDs => _ReferenceAliasIDs;
        #endregion

        #endregion
        #region FNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _FNAM;
        public MemorySlice<Byte>? FNAM
        {
            get => this._FNAM;
            set => this._FNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IHnamHnamGetter.FNAM => this.FNAM;
        #endregion
        #region PNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _PNAM;
        public MemorySlice<Byte>? PNAM
        {
            get => this._PNAM;
            set => this._PNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IHnamHnamGetter.PNAM => this.PNAM;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            HnamHnamMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IHnamHnamGetter rhs) return false;
            return ((HnamHnamCommon)((IHnamHnamGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IHnamHnamGetter? obj)
        {
            return ((HnamHnamCommon)((IHnamHnamGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((HnamHnamCommon)((IHnamHnamGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.ReferenceAliasIDs = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.FNAM = initialValue;
                this.PNAM = initialValue;
            }

            public Mask(
                TItem ReferenceAliasIDs,
                TItem FNAM,
                TItem PNAM)
            {
                this.ReferenceAliasIDs = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(ReferenceAliasIDs, Enumerable.Empty<(int Index, TItem Value)>());
                this.FNAM = FNAM;
                this.PNAM = PNAM;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? ReferenceAliasIDs;
            public TItem FNAM;
            public TItem PNAM;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.ReferenceAliasIDs, rhs.ReferenceAliasIDs)) return false;
                if (!object.Equals(this.FNAM, rhs.FNAM)) return false;
                if (!object.Equals(this.PNAM, rhs.PNAM)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ReferenceAliasIDs);
                hash.Add(this.FNAM);
                hash.Add(this.PNAM);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (this.ReferenceAliasIDs != null)
                {
                    if (!eval(this.ReferenceAliasIDs.Overall)) return false;
                    if (this.ReferenceAliasIDs.Specific != null)
                    {
                        foreach (var item in this.ReferenceAliasIDs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.FNAM)) return false;
                if (!eval(this.PNAM)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (this.ReferenceAliasIDs != null)
                {
                    if (eval(this.ReferenceAliasIDs.Overall)) return true;
                    if (this.ReferenceAliasIDs.Specific != null)
                    {
                        foreach (var item in this.ReferenceAliasIDs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.FNAM)) return true;
                if (eval(this.PNAM)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new HnamHnam.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                if (ReferenceAliasIDs != null)
                {
                    obj.ReferenceAliasIDs = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.ReferenceAliasIDs.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (ReferenceAliasIDs.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.ReferenceAliasIDs.Specific = l;
                        foreach (var item in ReferenceAliasIDs.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.FNAM = eval(this.FNAM);
                obj.PNAM = eval(this.PNAM);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(HnamHnam.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, HnamHnam.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(HnamHnam.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.ReferenceAliasIDs?.Overall ?? true)
                        && ReferenceAliasIDs is {} ReferenceAliasIDsItem)
                    {
                        sb.AppendLine("ReferenceAliasIDs =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ReferenceAliasIDsItem.Overall);
                            if (ReferenceAliasIDsItem.Specific != null)
                            {
                                foreach (var subItem in ReferenceAliasIDsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.FNAM ?? true)
                    {
                        sb.AppendItem(FNAM, "FNAM");
                    }
                    if (printMask?.PNAM ?? true)
                    {
                        sb.AppendItem(PNAM, "PNAM");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? ReferenceAliasIDs;
            public Exception? FNAM;
            public Exception? PNAM;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                HnamHnam_FieldIndex enu = (HnamHnam_FieldIndex)index;
                switch (enu)
                {
                    case HnamHnam_FieldIndex.ReferenceAliasIDs:
                        return ReferenceAliasIDs;
                    case HnamHnam_FieldIndex.FNAM:
                        return FNAM;
                    case HnamHnam_FieldIndex.PNAM:
                        return PNAM;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                HnamHnam_FieldIndex enu = (HnamHnam_FieldIndex)index;
                switch (enu)
                {
                    case HnamHnam_FieldIndex.ReferenceAliasIDs:
                        this.ReferenceAliasIDs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case HnamHnam_FieldIndex.FNAM:
                        this.FNAM = ex;
                        break;
                    case HnamHnam_FieldIndex.PNAM:
                        this.PNAM = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                HnamHnam_FieldIndex enu = (HnamHnam_FieldIndex)index;
                switch (enu)
                {
                    case HnamHnam_FieldIndex.ReferenceAliasIDs:
                        this.ReferenceAliasIDs = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case HnamHnam_FieldIndex.FNAM:
                        this.FNAM = (Exception?)obj;
                        break;
                    case HnamHnam_FieldIndex.PNAM:
                        this.PNAM = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (ReferenceAliasIDs != null) return true;
                if (FNAM != null) return true;
                if (PNAM != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                if (ReferenceAliasIDs is {} ReferenceAliasIDsItem)
                {
                    sb.AppendLine("ReferenceAliasIDs =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ReferenceAliasIDsItem.Overall);
                        if (ReferenceAliasIDsItem.Specific != null)
                        {
                            foreach (var subItem in ReferenceAliasIDsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(FNAM, "FNAM");
                }
                {
                    sb.AppendItem(PNAM, "PNAM");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ReferenceAliasIDs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.ReferenceAliasIDs?.Overall, rhs.ReferenceAliasIDs?.Overall), Noggog.ExceptionExt.Combine(this.ReferenceAliasIDs?.Specific, rhs.ReferenceAliasIDs?.Specific));
                ret.FNAM = this.FNAM.Combine(rhs.FNAM);
                ret.PNAM = this.PNAM.Combine(rhs.PNAM);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool ReferenceAliasIDs;
            public bool FNAM;
            public bool PNAM;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.ReferenceAliasIDs = defaultOn;
                this.FNAM = defaultOn;
                this.PNAM = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((ReferenceAliasIDs, null));
                ret.Add((FNAM, null));
                ret.Add((PNAM, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => HnamHnamBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((HnamHnamBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static HnamHnam CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new HnamHnam();
            ((HnamHnamSetterCommon)((IHnamHnamGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out HnamHnam item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((HnamHnamSetterCommon)((IHnamHnamGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static HnamHnam GetNew()
        {
            return new HnamHnam();
        }

    }
    #endregion

    #region Interface
    public partial interface IHnamHnam :
        IHnamHnamGetter,
        ILoquiObjectSetter<IHnamHnam>
    {
        new ExtendedList<Int32>? ReferenceAliasIDs { get; set; }
        new MemorySlice<Byte>? FNAM { get; set; }
        new MemorySlice<Byte>? PNAM { get; set; }
    }

    public partial interface IHnamHnamGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IHnamHnamGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => HnamHnam_Registration.Instance;
        IReadOnlyList<Int32>? ReferenceAliasIDs { get; }
        ReadOnlyMemorySlice<Byte>? FNAM { get; }
        ReadOnlyMemorySlice<Byte>? PNAM { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class HnamHnamMixIn
    {
        public static void Clear(this IHnamHnam item)
        {
            ((HnamHnamSetterCommon)((IHnamHnamGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static HnamHnam.Mask<bool> GetEqualsMask(
            this IHnamHnamGetter item,
            IHnamHnamGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((HnamHnamCommon)((IHnamHnamGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IHnamHnamGetter item,
            string? name = null,
            HnamHnam.Mask<bool>? printMask = null)
        {
            return ((HnamHnamCommon)((IHnamHnamGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IHnamHnamGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            HnamHnam.Mask<bool>? printMask = null)
        {
            ((HnamHnamCommon)((IHnamHnamGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IHnamHnamGetter item,
            IHnamHnamGetter rhs,
            HnamHnam.TranslationMask? equalsMask = null)
        {
            return ((HnamHnamCommon)((IHnamHnamGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IHnamHnam lhs,
            IHnamHnamGetter rhs)
        {
            ((HnamHnamSetterTranslationCommon)((IHnamHnamGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IHnamHnam lhs,
            IHnamHnamGetter rhs,
            HnamHnam.TranslationMask? copyMask = null)
        {
            ((HnamHnamSetterTranslationCommon)((IHnamHnamGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IHnamHnam lhs,
            IHnamHnamGetter rhs,
            out HnamHnam.ErrorMask errorMask,
            HnamHnam.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((HnamHnamSetterTranslationCommon)((IHnamHnamGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = HnamHnam.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IHnamHnam lhs,
            IHnamHnamGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((HnamHnamSetterTranslationCommon)((IHnamHnamGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static HnamHnam DeepCopy(
            this IHnamHnamGetter item,
            HnamHnam.TranslationMask? copyMask = null)
        {
            return ((HnamHnamSetterTranslationCommon)((IHnamHnamGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static HnamHnam DeepCopy(
            this IHnamHnamGetter item,
            out HnamHnam.ErrorMask errorMask,
            HnamHnam.TranslationMask? copyMask = null)
        {
            return ((HnamHnamSetterTranslationCommon)((IHnamHnamGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static HnamHnam DeepCopy(
            this IHnamHnamGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((HnamHnamSetterTranslationCommon)((IHnamHnamGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IHnamHnam item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((HnamHnamSetterCommon)((IHnamHnamGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum HnamHnam_FieldIndex
    {
        ReferenceAliasIDs = 0,
        FNAM = 1,
        PNAM = 2,
    }
    #endregion

    #region Registration
    internal partial class HnamHnam_Registration : ILoquiRegistration
    {
        public static readonly HnamHnam_Registration Instance = new HnamHnam_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(HnamHnam.Mask<>);

        public static readonly Type ErrorMaskType = typeof(HnamHnam.ErrorMask);

        public static readonly Type ClassType = typeof(HnamHnam);

        public static readonly Type GetterType = typeof(IHnamHnamGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IHnamHnam);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.HnamHnam";

        public const string Name = "HnamHnam";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.HNAM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var endTriggers = RecordCollection.Factory(RecordTypes.HNAM);
            var triggers = RecordCollection.Factory(RecordTypes.HNAM);
            var all = RecordCollection.Factory(
                RecordTypes.HNAM,
                RecordTypes.HTID,
                RecordTypes.FNAM,
                RecordTypes.PNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers,
                endRecordTypes: endTriggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(HnamHnamBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class HnamHnamSetterCommon
    {
        public static readonly HnamHnamSetterCommon Instance = new HnamHnamSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IHnamHnam item)
        {
            ClearPartial();
            item.ReferenceAliasIDs = null;
            item.FNAM = default;
            item.PNAM = default;
        }
        
        #region Mutagen
        public void RemapLinks(IHnamHnam obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IHnamHnam item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame.ReadSubrecord(RecordTypes.HNAM);
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: HnamHnamBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class HnamHnamCommon
    {
        public static readonly HnamHnamCommon Instance = new HnamHnamCommon();

        public HnamHnam.Mask<bool> GetEqualsMask(
            IHnamHnamGetter item,
            IHnamHnamGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new HnamHnam.Mask<bool>(false);
            ((HnamHnamCommon)((IHnamHnamGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IHnamHnamGetter item,
            IHnamHnamGetter rhs,
            HnamHnam.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ReferenceAliasIDs = item.ReferenceAliasIDs.CollectionEqualsHelper(
                rhs.ReferenceAliasIDs,
                (l, r) => l == r,
                include);
            ret.FNAM = MemorySliceExt.SequenceEqual(item.FNAM, rhs.FNAM);
            ret.PNAM = MemorySliceExt.SequenceEqual(item.PNAM, rhs.PNAM);
        }
        
        public string Print(
            IHnamHnamGetter item,
            string? name = null,
            HnamHnam.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IHnamHnamGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            HnamHnam.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"HnamHnam =>");
            }
            else
            {
                sb.AppendLine($"{name} (HnamHnam) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IHnamHnamGetter item,
            StructuredStringBuilder sb,
            HnamHnam.Mask<bool>? printMask = null)
        {
            if ((printMask?.ReferenceAliasIDs?.Overall ?? true)
                && item.ReferenceAliasIDs is {} ReferenceAliasIDsItem)
            {
                sb.AppendLine("ReferenceAliasIDs =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ReferenceAliasIDsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem);
                        }
                    }
                }
            }
            if ((printMask?.FNAM ?? true)
                && item.FNAM is {} FNAMItem)
            {
                sb.AppendLine($"FNAM => {SpanExt.ToHexString(FNAMItem)}");
            }
            if ((printMask?.PNAM ?? true)
                && item.PNAM is {} PNAMItem)
            {
                sb.AppendLine($"PNAM => {SpanExt.ToHexString(PNAMItem)}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IHnamHnamGetter? lhs,
            IHnamHnamGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)HnamHnam_FieldIndex.ReferenceAliasIDs) ?? true))
            {
                if (!lhs.ReferenceAliasIDs.SequenceEqualNullable(rhs.ReferenceAliasIDs)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HnamHnam_FieldIndex.FNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.FNAM, rhs.FNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HnamHnam_FieldIndex.PNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.PNAM, rhs.PNAM)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IHnamHnamGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ReferenceAliasIDs);
            if (item.FNAM is {} FNAMItem)
            {
                hash.Add(FNAMItem);
            }
            if (item.PNAM is {} PNAMItem)
            {
                hash.Add(PNAMItem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return HnamHnam.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IHnamHnamGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class HnamHnamSetterTranslationCommon
    {
        public static readonly HnamHnamSetterTranslationCommon Instance = new HnamHnamSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IHnamHnam item,
            IHnamHnamGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)HnamHnam_FieldIndex.ReferenceAliasIDs) ?? true))
            {
                errorMask?.PushIndex((int)HnamHnam_FieldIndex.ReferenceAliasIDs);
                try
                {
                    if ((rhs.ReferenceAliasIDs != null))
                    {
                        item.ReferenceAliasIDs = 
                            rhs.ReferenceAliasIDs
                            .ToExtendedList<Int32>();
                    }
                    else
                    {
                        item.ReferenceAliasIDs = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HnamHnam_FieldIndex.FNAM) ?? true))
            {
                if(rhs.FNAM is {} FNAMrhs)
                {
                    item.FNAM = FNAMrhs.ToArray();
                }
                else
                {
                    item.FNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HnamHnam_FieldIndex.PNAM) ?? true))
            {
                if(rhs.PNAM is {} PNAMrhs)
                {
                    item.PNAM = PNAMrhs.ToArray();
                }
                else
                {
                    item.PNAM = default;
                }
            }
        }
        
        #endregion
        
        public HnamHnam DeepCopy(
            IHnamHnamGetter item,
            HnamHnam.TranslationMask? copyMask = null)
        {
            HnamHnam ret = (HnamHnam)((HnamHnamCommon)((IHnamHnamGetter)item).CommonInstance()!).GetNew();
            ((HnamHnamSetterTranslationCommon)((IHnamHnamGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public HnamHnam DeepCopy(
            IHnamHnamGetter item,
            out HnamHnam.ErrorMask errorMask,
            HnamHnam.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            HnamHnam ret = (HnamHnam)((HnamHnamCommon)((IHnamHnamGetter)item).CommonInstance()!).GetNew();
            ((HnamHnamSetterTranslationCommon)((IHnamHnamGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = HnamHnam.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public HnamHnam DeepCopy(
            IHnamHnamGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            HnamHnam ret = (HnamHnam)((HnamHnamCommon)((IHnamHnamGetter)item).CommonInstance()!).GetNew();
            ((HnamHnamSetterTranslationCommon)((IHnamHnamGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class HnamHnam
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => HnamHnam_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => HnamHnam_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => HnamHnamCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return HnamHnamSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => HnamHnamSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IHnamHnamGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IHnamHnamGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IHnamHnamGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class HnamHnamBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly HnamHnamBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IHnamHnamGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Int32>.Instance.Write(
                writer: writer,
                items: item.ReferenceAliasIDs,
                recordType: translationParams.ConvertToCustom(RecordTypes.HTID),
                transl: Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FNAM,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.PNAM,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
        }

        public void Write(
            MutagenWriter writer,
            IHnamHnamGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(writer, RecordTypes.HNAM)) { } // Start Marker
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, RecordTypes.HNAM)) { } // End Marker
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IHnamHnamGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class HnamHnamBinaryCreateTranslation
    {
        public static readonly HnamHnamBinaryCreateTranslation Instance = new HnamHnamBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IHnamHnam item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.HTID:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ReferenceAliasIDs = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Int32>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse)
                        .CastExtendedList<Int32>();
                    return (int)HnamHnam_FieldIndex.ReferenceAliasIDs;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)HnamHnam_FieldIndex.FNAM;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)HnamHnam_FieldIndex.PNAM;
                }
                case RecordTypeInts.HNAM: // End Marker
                {
                    frame.ReadSubrecord();
                    return ParseResult.Stop;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class HnamHnamBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IHnamHnamGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((HnamHnamBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class HnamHnamBinaryOverlay :
        PluginBinaryOverlay,
        IHnamHnamGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => HnamHnam_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => HnamHnam_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => HnamHnamCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => HnamHnamSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IHnamHnamGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IHnamHnamGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IHnamHnamGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => HnamHnamBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((HnamHnamBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public IReadOnlyList<Int32>? ReferenceAliasIDs { get; private set; }
        #region FNAM
        private int? _FNAMLocation;
        public ReadOnlyMemorySlice<Byte>? FNAM => _FNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region PNAM
        private int? _PNAMLocation;
        public ReadOnlyMemorySlice<Byte>? PNAM => _PNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _PNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected HnamHnamBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IHnamHnamGetter HnamHnamFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream.ReadSubrecord(RecordTypes.HNAM);
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new HnamHnamBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IHnamHnamGetter HnamHnamFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return HnamHnamFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.HTID:
                {
                    var subMeta = stream.ReadSubrecordHeader();
                    var subLen = finalPos - stream.Position;
                    this.ReferenceAliasIDs = BinaryOverlayList.FactoryByStartIndex<Int32>(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => BinaryPrimitives.ReadInt32LittleEndian(s));
                    stream.Position += subLen;
                    return (int)HnamHnam_FieldIndex.ReferenceAliasIDs;
                }
                case RecordTypeInts.FNAM:
                {
                    _FNAMLocation = (stream.Position - offset);
                    return (int)HnamHnam_FieldIndex.FNAM;
                }
                case RecordTypeInts.PNAM:
                {
                    _PNAMLocation = (stream.Position - offset);
                    return (int)HnamHnam_FieldIndex.PNAM;
                }
                case RecordTypeInts.HNAM: // End Marker
                {
                    stream.ReadSubrecord();
                    return ParseResult.Stop;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            HnamHnamMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IHnamHnamGetter rhs) return false;
            return ((HnamHnamCommon)((IHnamHnamGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IHnamHnamGetter? obj)
        {
            return ((HnamHnamCommon)((IHnamHnamGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((HnamHnamCommon)((IHnamHnamGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

