/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class BoneModifierMorphDriverData :
        ABoneModifierData,
        IBoneModifierMorphDriverData,
        IEquatable<IBoneModifierMorphDriverDataGetter>,
        ILoquiObjectSetter<BoneModifierMorphDriverData>
    {
        #region Ctor
        public BoneModifierMorphDriverData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Unknown1
        public Single Unknown1 { get; set; } = default(Single);
        #endregion
        #region Unknown2
        public Single Unknown2 { get; set; } = default(Single);
        #endregion
        #region Unknown3
        public Single Unknown3 { get; set; } = default(Single);
        #endregion
        #region Unknown4
        public Single Unknown4 { get; set; } = default(Single);
        #endregion
        #region Unknown5
        public Single Unknown5 { get; set; } = default(Single);
        #endregion
        #region Unknown6
        public Single Unknown6 { get; set; } = default(Single);
        #endregion
        #region Unknown7
        public Byte Unknown7 { get; set; } = default(Byte);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BoneModifierMorphDriverDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBoneModifierMorphDriverDataGetter rhs) return false;
            return ((BoneModifierMorphDriverDataCommon)((IBoneModifierMorphDriverDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBoneModifierMorphDriverDataGetter? obj)
        {
            return ((BoneModifierMorphDriverDataCommon)((IBoneModifierMorphDriverDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BoneModifierMorphDriverDataCommon)((IBoneModifierMorphDriverDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            ABoneModifierData.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Unknown1 = initialValue;
                this.Unknown2 = initialValue;
                this.Unknown3 = initialValue;
                this.Unknown4 = initialValue;
                this.Unknown5 = initialValue;
                this.Unknown6 = initialValue;
                this.Unknown7 = initialValue;
            }

            public Mask(
                TItem UnknownString1,
                TItem UnknownString2,
                TItem Unknown1,
                TItem Unknown2,
                TItem Unknown3,
                TItem Unknown4,
                TItem Unknown5,
                TItem Unknown6,
                TItem Unknown7)
            : base(
                UnknownString1: UnknownString1,
                UnknownString2: UnknownString2)
            {
                this.Unknown1 = Unknown1;
                this.Unknown2 = Unknown2;
                this.Unknown3 = Unknown3;
                this.Unknown4 = Unknown4;
                this.Unknown5 = Unknown5;
                this.Unknown6 = Unknown6;
                this.Unknown7 = Unknown7;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Unknown1;
            public TItem Unknown2;
            public TItem Unknown3;
            public TItem Unknown4;
            public TItem Unknown5;
            public TItem Unknown6;
            public TItem Unknown7;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Unknown1, rhs.Unknown1)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.Unknown3, rhs.Unknown3)) return false;
                if (!object.Equals(this.Unknown4, rhs.Unknown4)) return false;
                if (!object.Equals(this.Unknown5, rhs.Unknown5)) return false;
                if (!object.Equals(this.Unknown6, rhs.Unknown6)) return false;
                if (!object.Equals(this.Unknown7, rhs.Unknown7)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Unknown1);
                hash.Add(this.Unknown2);
                hash.Add(this.Unknown3);
                hash.Add(this.Unknown4);
                hash.Add(this.Unknown5);
                hash.Add(this.Unknown6);
                hash.Add(this.Unknown7);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Unknown1)) return false;
                if (!eval(this.Unknown2)) return false;
                if (!eval(this.Unknown3)) return false;
                if (!eval(this.Unknown4)) return false;
                if (!eval(this.Unknown5)) return false;
                if (!eval(this.Unknown6)) return false;
                if (!eval(this.Unknown7)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Unknown1)) return true;
                if (eval(this.Unknown2)) return true;
                if (eval(this.Unknown3)) return true;
                if (eval(this.Unknown4)) return true;
                if (eval(this.Unknown5)) return true;
                if (eval(this.Unknown6)) return true;
                if (eval(this.Unknown7)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new BoneModifierMorphDriverData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Unknown1 = eval(this.Unknown1);
                obj.Unknown2 = eval(this.Unknown2);
                obj.Unknown3 = eval(this.Unknown3);
                obj.Unknown4 = eval(this.Unknown4);
                obj.Unknown5 = eval(this.Unknown5);
                obj.Unknown6 = eval(this.Unknown6);
                obj.Unknown7 = eval(this.Unknown7);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(BoneModifierMorphDriverData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, BoneModifierMorphDriverData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(BoneModifierMorphDriverData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Unknown1 ?? true)
                    {
                        sb.AppendItem(Unknown1, "Unknown1");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        sb.AppendItem(Unknown2, "Unknown2");
                    }
                    if (printMask?.Unknown3 ?? true)
                    {
                        sb.AppendItem(Unknown3, "Unknown3");
                    }
                    if (printMask?.Unknown4 ?? true)
                    {
                        sb.AppendItem(Unknown4, "Unknown4");
                    }
                    if (printMask?.Unknown5 ?? true)
                    {
                        sb.AppendItem(Unknown5, "Unknown5");
                    }
                    if (printMask?.Unknown6 ?? true)
                    {
                        sb.AppendItem(Unknown6, "Unknown6");
                    }
                    if (printMask?.Unknown7 ?? true)
                    {
                        sb.AppendItem(Unknown7, "Unknown7");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            ABoneModifierData.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Unknown1;
            public Exception? Unknown2;
            public Exception? Unknown3;
            public Exception? Unknown4;
            public Exception? Unknown5;
            public Exception? Unknown6;
            public Exception? Unknown7;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                BoneModifierMorphDriverData_FieldIndex enu = (BoneModifierMorphDriverData_FieldIndex)index;
                switch (enu)
                {
                    case BoneModifierMorphDriverData_FieldIndex.Unknown1:
                        return Unknown1;
                    case BoneModifierMorphDriverData_FieldIndex.Unknown2:
                        return Unknown2;
                    case BoneModifierMorphDriverData_FieldIndex.Unknown3:
                        return Unknown3;
                    case BoneModifierMorphDriverData_FieldIndex.Unknown4:
                        return Unknown4;
                    case BoneModifierMorphDriverData_FieldIndex.Unknown5:
                        return Unknown5;
                    case BoneModifierMorphDriverData_FieldIndex.Unknown6:
                        return Unknown6;
                    case BoneModifierMorphDriverData_FieldIndex.Unknown7:
                        return Unknown7;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                BoneModifierMorphDriverData_FieldIndex enu = (BoneModifierMorphDriverData_FieldIndex)index;
                switch (enu)
                {
                    case BoneModifierMorphDriverData_FieldIndex.Unknown1:
                        this.Unknown1 = ex;
                        break;
                    case BoneModifierMorphDriverData_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    case BoneModifierMorphDriverData_FieldIndex.Unknown3:
                        this.Unknown3 = ex;
                        break;
                    case BoneModifierMorphDriverData_FieldIndex.Unknown4:
                        this.Unknown4 = ex;
                        break;
                    case BoneModifierMorphDriverData_FieldIndex.Unknown5:
                        this.Unknown5 = ex;
                        break;
                    case BoneModifierMorphDriverData_FieldIndex.Unknown6:
                        this.Unknown6 = ex;
                        break;
                    case BoneModifierMorphDriverData_FieldIndex.Unknown7:
                        this.Unknown7 = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                BoneModifierMorphDriverData_FieldIndex enu = (BoneModifierMorphDriverData_FieldIndex)index;
                switch (enu)
                {
                    case BoneModifierMorphDriverData_FieldIndex.Unknown1:
                        this.Unknown1 = (Exception?)obj;
                        break;
                    case BoneModifierMorphDriverData_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    case BoneModifierMorphDriverData_FieldIndex.Unknown3:
                        this.Unknown3 = (Exception?)obj;
                        break;
                    case BoneModifierMorphDriverData_FieldIndex.Unknown4:
                        this.Unknown4 = (Exception?)obj;
                        break;
                    case BoneModifierMorphDriverData_FieldIndex.Unknown5:
                        this.Unknown5 = (Exception?)obj;
                        break;
                    case BoneModifierMorphDriverData_FieldIndex.Unknown6:
                        this.Unknown6 = (Exception?)obj;
                        break;
                    case BoneModifierMorphDriverData_FieldIndex.Unknown7:
                        this.Unknown7 = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Unknown1 != null) return true;
                if (Unknown2 != null) return true;
                if (Unknown3 != null) return true;
                if (Unknown4 != null) return true;
                if (Unknown5 != null) return true;
                if (Unknown6 != null) return true;
                if (Unknown7 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Unknown1, "Unknown1");
                }
                {
                    sb.AppendItem(Unknown2, "Unknown2");
                }
                {
                    sb.AppendItem(Unknown3, "Unknown3");
                }
                {
                    sb.AppendItem(Unknown4, "Unknown4");
                }
                {
                    sb.AppendItem(Unknown5, "Unknown5");
                }
                {
                    sb.AppendItem(Unknown6, "Unknown6");
                }
                {
                    sb.AppendItem(Unknown7, "Unknown7");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Unknown1 = this.Unknown1.Combine(rhs.Unknown1);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                ret.Unknown3 = this.Unknown3.Combine(rhs.Unknown3);
                ret.Unknown4 = this.Unknown4.Combine(rhs.Unknown4);
                ret.Unknown5 = this.Unknown5.Combine(rhs.Unknown5);
                ret.Unknown6 = this.Unknown6.Combine(rhs.Unknown6);
                ret.Unknown7 = this.Unknown7.Combine(rhs.Unknown7);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ABoneModifierData.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Unknown1;
            public bool Unknown2;
            public bool Unknown3;
            public bool Unknown4;
            public bool Unknown5;
            public bool Unknown6;
            public bool Unknown7;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Unknown1 = defaultOn;
                this.Unknown2 = defaultOn;
                this.Unknown3 = defaultOn;
                this.Unknown4 = defaultOn;
                this.Unknown5 = defaultOn;
                this.Unknown6 = defaultOn;
                this.Unknown7 = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Unknown1, null));
                ret.Add((Unknown2, null));
                ret.Add((Unknown3, null));
                ret.Add((Unknown4, null));
                ret.Add((Unknown5, null));
                ret.Add((Unknown6, null));
                ret.Add((Unknown7, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => BoneModifierMorphDriverDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BoneModifierMorphDriverDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static BoneModifierMorphDriverData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new BoneModifierMorphDriverData();
            ((BoneModifierMorphDriverDataSetterCommon)((IBoneModifierMorphDriverDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out BoneModifierMorphDriverData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((BoneModifierMorphDriverDataSetterCommon)((IBoneModifierMorphDriverDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new BoneModifierMorphDriverData GetNew()
        {
            return new BoneModifierMorphDriverData();
        }

    }
    #endregion

    #region Interface
    public partial interface IBoneModifierMorphDriverData :
        IABoneModifierData,
        IBoneModifierMorphDriverDataGetter,
        ILoquiObjectSetter<IBoneModifierMorphDriverData>
    {
        new Single Unknown1 { get; set; }
        new Single Unknown2 { get; set; }
        new Single Unknown3 { get; set; }
        new Single Unknown4 { get; set; }
        new Single Unknown5 { get; set; }
        new Single Unknown6 { get; set; }
        new Byte Unknown7 { get; set; }
    }

    public partial interface IBoneModifierMorphDriverDataGetter :
        IABoneModifierDataGetter,
        IBinaryItem,
        ILoquiObject<IBoneModifierMorphDriverDataGetter>
    {
        static new ILoquiRegistration StaticRegistration => BoneModifierMorphDriverData_Registration.Instance;
        Single Unknown1 { get; }
        Single Unknown2 { get; }
        Single Unknown3 { get; }
        Single Unknown4 { get; }
        Single Unknown5 { get; }
        Single Unknown6 { get; }
        Byte Unknown7 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class BoneModifierMorphDriverDataMixIn
    {
        public static void Clear(this IBoneModifierMorphDriverData item)
        {
            ((BoneModifierMorphDriverDataSetterCommon)((IBoneModifierMorphDriverDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static BoneModifierMorphDriverData.Mask<bool> GetEqualsMask(
            this IBoneModifierMorphDriverDataGetter item,
            IBoneModifierMorphDriverDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BoneModifierMorphDriverDataCommon)((IBoneModifierMorphDriverDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IBoneModifierMorphDriverDataGetter item,
            string? name = null,
            BoneModifierMorphDriverData.Mask<bool>? printMask = null)
        {
            return ((BoneModifierMorphDriverDataCommon)((IBoneModifierMorphDriverDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IBoneModifierMorphDriverDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BoneModifierMorphDriverData.Mask<bool>? printMask = null)
        {
            ((BoneModifierMorphDriverDataCommon)((IBoneModifierMorphDriverDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IBoneModifierMorphDriverDataGetter item,
            IBoneModifierMorphDriverDataGetter rhs,
            BoneModifierMorphDriverData.TranslationMask? equalsMask = null)
        {
            return ((BoneModifierMorphDriverDataCommon)((IBoneModifierMorphDriverDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IBoneModifierMorphDriverData lhs,
            IBoneModifierMorphDriverDataGetter rhs,
            out BoneModifierMorphDriverData.ErrorMask errorMask,
            BoneModifierMorphDriverData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((BoneModifierMorphDriverDataSetterTranslationCommon)((IBoneModifierMorphDriverDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = BoneModifierMorphDriverData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IBoneModifierMorphDriverData lhs,
            IBoneModifierMorphDriverDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((BoneModifierMorphDriverDataSetterTranslationCommon)((IBoneModifierMorphDriverDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static BoneModifierMorphDriverData DeepCopy(
            this IBoneModifierMorphDriverDataGetter item,
            BoneModifierMorphDriverData.TranslationMask? copyMask = null)
        {
            return ((BoneModifierMorphDriverDataSetterTranslationCommon)((IBoneModifierMorphDriverDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static BoneModifierMorphDriverData DeepCopy(
            this IBoneModifierMorphDriverDataGetter item,
            out BoneModifierMorphDriverData.ErrorMask errorMask,
            BoneModifierMorphDriverData.TranslationMask? copyMask = null)
        {
            return ((BoneModifierMorphDriverDataSetterTranslationCommon)((IBoneModifierMorphDriverDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static BoneModifierMorphDriverData DeepCopy(
            this IBoneModifierMorphDriverDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((BoneModifierMorphDriverDataSetterTranslationCommon)((IBoneModifierMorphDriverDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IBoneModifierMorphDriverData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((BoneModifierMorphDriverDataSetterCommon)((IBoneModifierMorphDriverDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum BoneModifierMorphDriverData_FieldIndex
    {
        UnknownString1 = 0,
        UnknownString2 = 1,
        Unknown1 = 2,
        Unknown2 = 3,
        Unknown3 = 4,
        Unknown4 = 5,
        Unknown5 = 6,
        Unknown6 = 7,
        Unknown7 = 8,
    }
    #endregion

    #region Registration
    internal partial class BoneModifierMorphDriverData_Registration : ILoquiRegistration
    {
        public static readonly BoneModifierMorphDriverData_Registration Instance = new BoneModifierMorphDriverData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(BoneModifierMorphDriverData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(BoneModifierMorphDriverData.ErrorMask);

        public static readonly Type ClassType = typeof(BoneModifierMorphDriverData);

        public static readonly Type GetterType = typeof(IBoneModifierMorphDriverDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IBoneModifierMorphDriverData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.BoneModifierMorphDriverData";

        public const string Name = "BoneModifierMorphDriverData";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(BoneModifierMorphDriverDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class BoneModifierMorphDriverDataSetterCommon : ABoneModifierDataSetterCommon
    {
        public new static readonly BoneModifierMorphDriverDataSetterCommon Instance = new BoneModifierMorphDriverDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IBoneModifierMorphDriverData item)
        {
            ClearPartial();
            item.Unknown1 = default(Single);
            item.Unknown2 = default(Single);
            item.Unknown3 = default(Single);
            item.Unknown4 = default(Single);
            item.Unknown5 = default(Single);
            item.Unknown6 = default(Single);
            item.Unknown7 = default(Byte);
            base.Clear(item);
        }
        
        public override void Clear(IABoneModifierData item)
        {
            Clear(item: (IBoneModifierMorphDriverData)item);
        }
        
        #region Mutagen
        public void RemapLinks(IBoneModifierMorphDriverData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IBoneModifierMorphDriverData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: BoneModifierMorphDriverDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        public override void CopyInFromBinary(
            IABoneModifierData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (BoneModifierMorphDriverData)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class BoneModifierMorphDriverDataCommon : ABoneModifierDataCommon
    {
        public new static readonly BoneModifierMorphDriverDataCommon Instance = new BoneModifierMorphDriverDataCommon();

        public BoneModifierMorphDriverData.Mask<bool> GetEqualsMask(
            IBoneModifierMorphDriverDataGetter item,
            IBoneModifierMorphDriverDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new BoneModifierMorphDriverData.Mask<bool>(false);
            ((BoneModifierMorphDriverDataCommon)((IBoneModifierMorphDriverDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IBoneModifierMorphDriverDataGetter item,
            IBoneModifierMorphDriverDataGetter rhs,
            BoneModifierMorphDriverData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Unknown1 = item.Unknown1.EqualsWithin(rhs.Unknown1);
            ret.Unknown2 = item.Unknown2.EqualsWithin(rhs.Unknown2);
            ret.Unknown3 = item.Unknown3.EqualsWithin(rhs.Unknown3);
            ret.Unknown4 = item.Unknown4.EqualsWithin(rhs.Unknown4);
            ret.Unknown5 = item.Unknown5.EqualsWithin(rhs.Unknown5);
            ret.Unknown6 = item.Unknown6.EqualsWithin(rhs.Unknown6);
            ret.Unknown7 = item.Unknown7 == rhs.Unknown7;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IBoneModifierMorphDriverDataGetter item,
            string? name = null,
            BoneModifierMorphDriverData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IBoneModifierMorphDriverDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BoneModifierMorphDriverData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"BoneModifierMorphDriverData =>");
            }
            else
            {
                sb.AppendLine($"{name} (BoneModifierMorphDriverData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IBoneModifierMorphDriverDataGetter item,
            StructuredStringBuilder sb,
            BoneModifierMorphDriverData.Mask<bool>? printMask = null)
        {
            ABoneModifierDataCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Unknown1 ?? true)
            {
                sb.AppendItem(item.Unknown1, "Unknown1");
            }
            if (printMask?.Unknown2 ?? true)
            {
                sb.AppendItem(item.Unknown2, "Unknown2");
            }
            if (printMask?.Unknown3 ?? true)
            {
                sb.AppendItem(item.Unknown3, "Unknown3");
            }
            if (printMask?.Unknown4 ?? true)
            {
                sb.AppendItem(item.Unknown4, "Unknown4");
            }
            if (printMask?.Unknown5 ?? true)
            {
                sb.AppendItem(item.Unknown5, "Unknown5");
            }
            if (printMask?.Unknown6 ?? true)
            {
                sb.AppendItem(item.Unknown6, "Unknown6");
            }
            if (printMask?.Unknown7 ?? true)
            {
                sb.AppendItem(item.Unknown7, "Unknown7");
            }
        }
        
        public static BoneModifierMorphDriverData_FieldIndex ConvertFieldIndex(ABoneModifierData_FieldIndex index)
        {
            switch (index)
            {
                case ABoneModifierData_FieldIndex.UnknownString1:
                    return (BoneModifierMorphDriverData_FieldIndex)((int)index);
                case ABoneModifierData_FieldIndex.UnknownString2:
                    return (BoneModifierMorphDriverData_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IBoneModifierMorphDriverDataGetter? lhs,
            IBoneModifierMorphDriverDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IABoneModifierDataGetter)lhs, (IABoneModifierDataGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)BoneModifierMorphDriverData_FieldIndex.Unknown1) ?? true))
            {
                if (!lhs.Unknown1.EqualsWithin(rhs.Unknown1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BoneModifierMorphDriverData_FieldIndex.Unknown2) ?? true))
            {
                if (!lhs.Unknown2.EqualsWithin(rhs.Unknown2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BoneModifierMorphDriverData_FieldIndex.Unknown3) ?? true))
            {
                if (!lhs.Unknown3.EqualsWithin(rhs.Unknown3)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BoneModifierMorphDriverData_FieldIndex.Unknown4) ?? true))
            {
                if (!lhs.Unknown4.EqualsWithin(rhs.Unknown4)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BoneModifierMorphDriverData_FieldIndex.Unknown5) ?? true))
            {
                if (!lhs.Unknown5.EqualsWithin(rhs.Unknown5)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BoneModifierMorphDriverData_FieldIndex.Unknown6) ?? true))
            {
                if (!lhs.Unknown6.EqualsWithin(rhs.Unknown6)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BoneModifierMorphDriverData_FieldIndex.Unknown7) ?? true))
            {
                if (lhs.Unknown7 != rhs.Unknown7) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IABoneModifierDataGetter? lhs,
            IABoneModifierDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IBoneModifierMorphDriverDataGetter?)lhs,
                rhs: rhs as IBoneModifierMorphDriverDataGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IBoneModifierMorphDriverDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Unknown1);
            hash.Add(item.Unknown2);
            hash.Add(item.Unknown3);
            hash.Add(item.Unknown4);
            hash.Add(item.Unknown5);
            hash.Add(item.Unknown6);
            hash.Add(item.Unknown7);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IABoneModifierDataGetter item)
        {
            return GetHashCode(item: (IBoneModifierMorphDriverDataGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return BoneModifierMorphDriverData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IBoneModifierMorphDriverDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class BoneModifierMorphDriverDataSetterTranslationCommon : ABoneModifierDataSetterTranslationCommon
    {
        public new static readonly BoneModifierMorphDriverDataSetterTranslationCommon Instance = new BoneModifierMorphDriverDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IBoneModifierMorphDriverData item,
            IBoneModifierMorphDriverDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IABoneModifierData)item,
                (IABoneModifierDataGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)BoneModifierMorphDriverData_FieldIndex.Unknown1) ?? true))
            {
                item.Unknown1 = rhs.Unknown1;
            }
            if ((copyMask?.GetShouldTranslate((int)BoneModifierMorphDriverData_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
            if ((copyMask?.GetShouldTranslate((int)BoneModifierMorphDriverData_FieldIndex.Unknown3) ?? true))
            {
                item.Unknown3 = rhs.Unknown3;
            }
            if ((copyMask?.GetShouldTranslate((int)BoneModifierMorphDriverData_FieldIndex.Unknown4) ?? true))
            {
                item.Unknown4 = rhs.Unknown4;
            }
            if ((copyMask?.GetShouldTranslate((int)BoneModifierMorphDriverData_FieldIndex.Unknown5) ?? true))
            {
                item.Unknown5 = rhs.Unknown5;
            }
            if ((copyMask?.GetShouldTranslate((int)BoneModifierMorphDriverData_FieldIndex.Unknown6) ?? true))
            {
                item.Unknown6 = rhs.Unknown6;
            }
            if ((copyMask?.GetShouldTranslate((int)BoneModifierMorphDriverData_FieldIndex.Unknown7) ?? true))
            {
                item.Unknown7 = rhs.Unknown7;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IBoneModifierMorphDriverData item,
            IBoneModifierMorphDriverDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        
        public override void DeepCopyIn(
            IABoneModifierData item,
            IABoneModifierDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IBoneModifierMorphDriverData)item,
                rhs: (IBoneModifierMorphDriverDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public BoneModifierMorphDriverData DeepCopy(
            IBoneModifierMorphDriverDataGetter item,
            BoneModifierMorphDriverData.TranslationMask? copyMask = null)
        {
            BoneModifierMorphDriverData ret = (BoneModifierMorphDriverData)((BoneModifierMorphDriverDataCommon)((IBoneModifierMorphDriverDataGetter)item).CommonInstance()!).GetNew();
            ((BoneModifierMorphDriverDataSetterTranslationCommon)((IBoneModifierMorphDriverDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public BoneModifierMorphDriverData DeepCopy(
            IBoneModifierMorphDriverDataGetter item,
            out BoneModifierMorphDriverData.ErrorMask errorMask,
            BoneModifierMorphDriverData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            BoneModifierMorphDriverData ret = (BoneModifierMorphDriverData)((BoneModifierMorphDriverDataCommon)((IBoneModifierMorphDriverDataGetter)item).CommonInstance()!).GetNew();
            ((BoneModifierMorphDriverDataSetterTranslationCommon)((IBoneModifierMorphDriverDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = BoneModifierMorphDriverData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public BoneModifierMorphDriverData DeepCopy(
            IBoneModifierMorphDriverDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            BoneModifierMorphDriverData ret = (BoneModifierMorphDriverData)((BoneModifierMorphDriverDataCommon)((IBoneModifierMorphDriverDataGetter)item).CommonInstance()!).GetNew();
            ((BoneModifierMorphDriverDataSetterTranslationCommon)((IBoneModifierMorphDriverDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class BoneModifierMorphDriverData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BoneModifierMorphDriverData_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => BoneModifierMorphDriverData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => BoneModifierMorphDriverDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return BoneModifierMorphDriverDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => BoneModifierMorphDriverDataSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class BoneModifierMorphDriverDataBinaryWriteTranslation :
        ABoneModifierDataBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly BoneModifierMorphDriverDataBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IBoneModifierMorphDriverDataGetter item,
            MutagenWriter writer)
        {
            ABoneModifierDataBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unknown1);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unknown2);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unknown3);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unknown4);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unknown5);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unknown6);
            writer.Write(item.Unknown7);
        }

        public void Write(
            MutagenWriter writer,
            IBoneModifierMorphDriverDataGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IBoneModifierMorphDriverDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IABoneModifierDataGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IBoneModifierMorphDriverDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class BoneModifierMorphDriverDataBinaryCreateTranslation : ABoneModifierDataBinaryCreateTranslation
    {
        public new static readonly BoneModifierMorphDriverDataBinaryCreateTranslation Instance = new BoneModifierMorphDriverDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IBoneModifierMorphDriverData item,
            MutagenFrame frame)
        {
            ABoneModifierDataBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            item.Unknown1 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Unknown2 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Unknown3 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Unknown4 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Unknown5 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Unknown6 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Unknown7 = frame.ReadUInt8();
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class BoneModifierMorphDriverDataBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class BoneModifierMorphDriverDataBinaryOverlay :
        ABoneModifierDataBinaryOverlay,
        IBoneModifierMorphDriverDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BoneModifierMorphDriverData_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => BoneModifierMorphDriverData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => BoneModifierMorphDriverDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => BoneModifierMorphDriverDataSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => BoneModifierMorphDriverDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BoneModifierMorphDriverDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Single Unknown1 => _structData.Slice(UnknownString2EndingPos, 0x4).Float();
        public Single Unknown2 => _structData.Slice(UnknownString2EndingPos + 0x4, 0x4).Float();
        public Single Unknown3 => _structData.Slice(UnknownString2EndingPos + 0x8, 0x4).Float();
        public Single Unknown4 => _structData.Slice(UnknownString2EndingPos + 0xC, 0x4).Float();
        public Single Unknown5 => _structData.Slice(UnknownString2EndingPos + 0x10, 0x4).Float();
        public Single Unknown6 => _structData.Slice(UnknownString2EndingPos + 0x14, 0x4).Float();
        public Byte Unknown7 => _structData.Span[UnknownString2EndingPos + 0x18];
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected BoneModifierMorphDriverDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static void BoneModifierMorphDriverDataParseEndingPositions(
            BoneModifierMorphDriverDataBinaryOverlay ret,
            BinaryOverlayFactoryPackage package)
        {
            ABoneModifierDataParseEndingPositions(
                ret: ret,
                package: package);
        }

        public static IBoneModifierMorphDriverDataGetter BoneModifierMorphDriverDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new BoneModifierMorphDriverDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            BoneModifierMorphDriverDataParseEndingPositions(ret, package);
            stream.Position += ret.UnknownString2EndingPos + 0x19;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IBoneModifierMorphDriverDataGetter BoneModifierMorphDriverDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return BoneModifierMorphDriverDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BoneModifierMorphDriverDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBoneModifierMorphDriverDataGetter rhs) return false;
            return ((BoneModifierMorphDriverDataCommon)((IBoneModifierMorphDriverDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBoneModifierMorphDriverDataGetter? obj)
        {
            return ((BoneModifierMorphDriverDataCommon)((IBoneModifierMorphDriverDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BoneModifierMorphDriverDataCommon)((IBoneModifierMorphDriverDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

