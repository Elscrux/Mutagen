/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class PlacedObjectGoboAnimatedProperties :
        IEquatable<IPlacedObjectGoboAnimatedPropertiesGetter>,
        ILoquiObjectSetter<PlacedObjectGoboAnimatedProperties>,
        IPlacedObjectGoboAnimatedProperties
    {
        #region Ctor
        public PlacedObjectGoboAnimatedProperties()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region StaticRotation
        public Single StaticRotation { get; set; } = default(Single);
        #endregion
        #region AnimatedRotationSpeed
        public Single AnimatedRotationSpeed { get; set; } = default(Single);
        #endregion
        #region AnimatedWaveRotationSpeed
        public Single AnimatedWaveRotationSpeed { get; set; } = default(Single);
        #endregion
        #region AnimatedWaveRotationAmount
        public Single AnimatedWaveRotationAmount { get; set; } = default(Single);
        #endregion
        #region StaticScaleU
        public Single StaticScaleU { get; set; } = default(Single);
        #endregion
        #region StaticScaleV
        public Single StaticScaleV { get; set; } = default(Single);
        #endregion
        #region WaveScalingSpeedU
        public Single WaveScalingSpeedU { get; set; } = default(Single);
        #endregion
        #region WaveScalingSpeedV
        public Single WaveScalingSpeedV { get; set; } = default(Single);
        #endregion
        #region WaveScalingAmountU
        public Single WaveScalingAmountU { get; set; } = default(Single);
        #endregion
        #region WaveScalingAmountV
        public Single WaveScalingAmountV { get; set; } = default(Single);
        #endregion
        #region StaticOffsetU
        public Single StaticOffsetU { get; set; } = default(Single);
        #endregion
        #region StaticOffsetV
        public Single StaticOffsetV { get; set; } = default(Single);
        #endregion
        #region RotationPivotU
        public Single RotationPivotU { get; set; } = default(Single);
        #endregion
        #region RotationPivotV
        public Single RotationPivotV { get; set; } = default(Single);
        #endregion
        #region ScrollSpeedU
        public Single ScrollSpeedU { get; set; } = default(Single);
        #endregion
        #region ScrollSpeedV
        public Single ScrollSpeedV { get; set; } = default(Single);
        #endregion
        #region WaveScrollSpeedU
        public Single WaveScrollSpeedU { get; set; } = default(Single);
        #endregion
        #region WaveScrollSpeedV
        public Single WaveScrollSpeedV { get; set; } = default(Single);
        #endregion
        #region WaveScrollAmountU
        public Single WaveScrollAmountU { get; set; } = default(Single);
        #endregion
        #region WaveScrollAmountV
        public Single WaveScrollAmountV { get; set; } = default(Single);
        #endregion
        #region RandomTimeOffsetRange
        public Single RandomTimeOffsetRange { get; set; } = default(Single);
        #endregion
        #region IsAnimated
        public Boolean IsAnimated { get; set; } = default(Boolean);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlacedObjectGoboAnimatedPropertiesMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPlacedObjectGoboAnimatedPropertiesGetter rhs) return false;
            return ((PlacedObjectGoboAnimatedPropertiesCommon)((IPlacedObjectGoboAnimatedPropertiesGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlacedObjectGoboAnimatedPropertiesGetter? obj)
        {
            return ((PlacedObjectGoboAnimatedPropertiesCommon)((IPlacedObjectGoboAnimatedPropertiesGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlacedObjectGoboAnimatedPropertiesCommon)((IPlacedObjectGoboAnimatedPropertiesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.StaticRotation = initialValue;
                this.AnimatedRotationSpeed = initialValue;
                this.AnimatedWaveRotationSpeed = initialValue;
                this.AnimatedWaveRotationAmount = initialValue;
                this.StaticScaleU = initialValue;
                this.StaticScaleV = initialValue;
                this.WaveScalingSpeedU = initialValue;
                this.WaveScalingSpeedV = initialValue;
                this.WaveScalingAmountU = initialValue;
                this.WaveScalingAmountV = initialValue;
                this.StaticOffsetU = initialValue;
                this.StaticOffsetV = initialValue;
                this.RotationPivotU = initialValue;
                this.RotationPivotV = initialValue;
                this.ScrollSpeedU = initialValue;
                this.ScrollSpeedV = initialValue;
                this.WaveScrollSpeedU = initialValue;
                this.WaveScrollSpeedV = initialValue;
                this.WaveScrollAmountU = initialValue;
                this.WaveScrollAmountV = initialValue;
                this.RandomTimeOffsetRange = initialValue;
                this.IsAnimated = initialValue;
            }

            public Mask(
                TItem StaticRotation,
                TItem AnimatedRotationSpeed,
                TItem AnimatedWaveRotationSpeed,
                TItem AnimatedWaveRotationAmount,
                TItem StaticScaleU,
                TItem StaticScaleV,
                TItem WaveScalingSpeedU,
                TItem WaveScalingSpeedV,
                TItem WaveScalingAmountU,
                TItem WaveScalingAmountV,
                TItem StaticOffsetU,
                TItem StaticOffsetV,
                TItem RotationPivotU,
                TItem RotationPivotV,
                TItem ScrollSpeedU,
                TItem ScrollSpeedV,
                TItem WaveScrollSpeedU,
                TItem WaveScrollSpeedV,
                TItem WaveScrollAmountU,
                TItem WaveScrollAmountV,
                TItem RandomTimeOffsetRange,
                TItem IsAnimated)
            {
                this.StaticRotation = StaticRotation;
                this.AnimatedRotationSpeed = AnimatedRotationSpeed;
                this.AnimatedWaveRotationSpeed = AnimatedWaveRotationSpeed;
                this.AnimatedWaveRotationAmount = AnimatedWaveRotationAmount;
                this.StaticScaleU = StaticScaleU;
                this.StaticScaleV = StaticScaleV;
                this.WaveScalingSpeedU = WaveScalingSpeedU;
                this.WaveScalingSpeedV = WaveScalingSpeedV;
                this.WaveScalingAmountU = WaveScalingAmountU;
                this.WaveScalingAmountV = WaveScalingAmountV;
                this.StaticOffsetU = StaticOffsetU;
                this.StaticOffsetV = StaticOffsetV;
                this.RotationPivotU = RotationPivotU;
                this.RotationPivotV = RotationPivotV;
                this.ScrollSpeedU = ScrollSpeedU;
                this.ScrollSpeedV = ScrollSpeedV;
                this.WaveScrollSpeedU = WaveScrollSpeedU;
                this.WaveScrollSpeedV = WaveScrollSpeedV;
                this.WaveScrollAmountU = WaveScrollAmountU;
                this.WaveScrollAmountV = WaveScrollAmountV;
                this.RandomTimeOffsetRange = RandomTimeOffsetRange;
                this.IsAnimated = IsAnimated;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem StaticRotation;
            public TItem AnimatedRotationSpeed;
            public TItem AnimatedWaveRotationSpeed;
            public TItem AnimatedWaveRotationAmount;
            public TItem StaticScaleU;
            public TItem StaticScaleV;
            public TItem WaveScalingSpeedU;
            public TItem WaveScalingSpeedV;
            public TItem WaveScalingAmountU;
            public TItem WaveScalingAmountV;
            public TItem StaticOffsetU;
            public TItem StaticOffsetV;
            public TItem RotationPivotU;
            public TItem RotationPivotV;
            public TItem ScrollSpeedU;
            public TItem ScrollSpeedV;
            public TItem WaveScrollSpeedU;
            public TItem WaveScrollSpeedV;
            public TItem WaveScrollAmountU;
            public TItem WaveScrollAmountV;
            public TItem RandomTimeOffsetRange;
            public TItem IsAnimated;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.StaticRotation, rhs.StaticRotation)) return false;
                if (!object.Equals(this.AnimatedRotationSpeed, rhs.AnimatedRotationSpeed)) return false;
                if (!object.Equals(this.AnimatedWaveRotationSpeed, rhs.AnimatedWaveRotationSpeed)) return false;
                if (!object.Equals(this.AnimatedWaveRotationAmount, rhs.AnimatedWaveRotationAmount)) return false;
                if (!object.Equals(this.StaticScaleU, rhs.StaticScaleU)) return false;
                if (!object.Equals(this.StaticScaleV, rhs.StaticScaleV)) return false;
                if (!object.Equals(this.WaveScalingSpeedU, rhs.WaveScalingSpeedU)) return false;
                if (!object.Equals(this.WaveScalingSpeedV, rhs.WaveScalingSpeedV)) return false;
                if (!object.Equals(this.WaveScalingAmountU, rhs.WaveScalingAmountU)) return false;
                if (!object.Equals(this.WaveScalingAmountV, rhs.WaveScalingAmountV)) return false;
                if (!object.Equals(this.StaticOffsetU, rhs.StaticOffsetU)) return false;
                if (!object.Equals(this.StaticOffsetV, rhs.StaticOffsetV)) return false;
                if (!object.Equals(this.RotationPivotU, rhs.RotationPivotU)) return false;
                if (!object.Equals(this.RotationPivotV, rhs.RotationPivotV)) return false;
                if (!object.Equals(this.ScrollSpeedU, rhs.ScrollSpeedU)) return false;
                if (!object.Equals(this.ScrollSpeedV, rhs.ScrollSpeedV)) return false;
                if (!object.Equals(this.WaveScrollSpeedU, rhs.WaveScrollSpeedU)) return false;
                if (!object.Equals(this.WaveScrollSpeedV, rhs.WaveScrollSpeedV)) return false;
                if (!object.Equals(this.WaveScrollAmountU, rhs.WaveScrollAmountU)) return false;
                if (!object.Equals(this.WaveScrollAmountV, rhs.WaveScrollAmountV)) return false;
                if (!object.Equals(this.RandomTimeOffsetRange, rhs.RandomTimeOffsetRange)) return false;
                if (!object.Equals(this.IsAnimated, rhs.IsAnimated)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.StaticRotation);
                hash.Add(this.AnimatedRotationSpeed);
                hash.Add(this.AnimatedWaveRotationSpeed);
                hash.Add(this.AnimatedWaveRotationAmount);
                hash.Add(this.StaticScaleU);
                hash.Add(this.StaticScaleV);
                hash.Add(this.WaveScalingSpeedU);
                hash.Add(this.WaveScalingSpeedV);
                hash.Add(this.WaveScalingAmountU);
                hash.Add(this.WaveScalingAmountV);
                hash.Add(this.StaticOffsetU);
                hash.Add(this.StaticOffsetV);
                hash.Add(this.RotationPivotU);
                hash.Add(this.RotationPivotV);
                hash.Add(this.ScrollSpeedU);
                hash.Add(this.ScrollSpeedV);
                hash.Add(this.WaveScrollSpeedU);
                hash.Add(this.WaveScrollSpeedV);
                hash.Add(this.WaveScrollAmountU);
                hash.Add(this.WaveScrollAmountV);
                hash.Add(this.RandomTimeOffsetRange);
                hash.Add(this.IsAnimated);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.StaticRotation)) return false;
                if (!eval(this.AnimatedRotationSpeed)) return false;
                if (!eval(this.AnimatedWaveRotationSpeed)) return false;
                if (!eval(this.AnimatedWaveRotationAmount)) return false;
                if (!eval(this.StaticScaleU)) return false;
                if (!eval(this.StaticScaleV)) return false;
                if (!eval(this.WaveScalingSpeedU)) return false;
                if (!eval(this.WaveScalingSpeedV)) return false;
                if (!eval(this.WaveScalingAmountU)) return false;
                if (!eval(this.WaveScalingAmountV)) return false;
                if (!eval(this.StaticOffsetU)) return false;
                if (!eval(this.StaticOffsetV)) return false;
                if (!eval(this.RotationPivotU)) return false;
                if (!eval(this.RotationPivotV)) return false;
                if (!eval(this.ScrollSpeedU)) return false;
                if (!eval(this.ScrollSpeedV)) return false;
                if (!eval(this.WaveScrollSpeedU)) return false;
                if (!eval(this.WaveScrollSpeedV)) return false;
                if (!eval(this.WaveScrollAmountU)) return false;
                if (!eval(this.WaveScrollAmountV)) return false;
                if (!eval(this.RandomTimeOffsetRange)) return false;
                if (!eval(this.IsAnimated)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.StaticRotation)) return true;
                if (eval(this.AnimatedRotationSpeed)) return true;
                if (eval(this.AnimatedWaveRotationSpeed)) return true;
                if (eval(this.AnimatedWaveRotationAmount)) return true;
                if (eval(this.StaticScaleU)) return true;
                if (eval(this.StaticScaleV)) return true;
                if (eval(this.WaveScalingSpeedU)) return true;
                if (eval(this.WaveScalingSpeedV)) return true;
                if (eval(this.WaveScalingAmountU)) return true;
                if (eval(this.WaveScalingAmountV)) return true;
                if (eval(this.StaticOffsetU)) return true;
                if (eval(this.StaticOffsetV)) return true;
                if (eval(this.RotationPivotU)) return true;
                if (eval(this.RotationPivotV)) return true;
                if (eval(this.ScrollSpeedU)) return true;
                if (eval(this.ScrollSpeedV)) return true;
                if (eval(this.WaveScrollSpeedU)) return true;
                if (eval(this.WaveScrollSpeedV)) return true;
                if (eval(this.WaveScrollAmountU)) return true;
                if (eval(this.WaveScrollAmountV)) return true;
                if (eval(this.RandomTimeOffsetRange)) return true;
                if (eval(this.IsAnimated)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PlacedObjectGoboAnimatedProperties.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.StaticRotation = eval(this.StaticRotation);
                obj.AnimatedRotationSpeed = eval(this.AnimatedRotationSpeed);
                obj.AnimatedWaveRotationSpeed = eval(this.AnimatedWaveRotationSpeed);
                obj.AnimatedWaveRotationAmount = eval(this.AnimatedWaveRotationAmount);
                obj.StaticScaleU = eval(this.StaticScaleU);
                obj.StaticScaleV = eval(this.StaticScaleV);
                obj.WaveScalingSpeedU = eval(this.WaveScalingSpeedU);
                obj.WaveScalingSpeedV = eval(this.WaveScalingSpeedV);
                obj.WaveScalingAmountU = eval(this.WaveScalingAmountU);
                obj.WaveScalingAmountV = eval(this.WaveScalingAmountV);
                obj.StaticOffsetU = eval(this.StaticOffsetU);
                obj.StaticOffsetV = eval(this.StaticOffsetV);
                obj.RotationPivotU = eval(this.RotationPivotU);
                obj.RotationPivotV = eval(this.RotationPivotV);
                obj.ScrollSpeedU = eval(this.ScrollSpeedU);
                obj.ScrollSpeedV = eval(this.ScrollSpeedV);
                obj.WaveScrollSpeedU = eval(this.WaveScrollSpeedU);
                obj.WaveScrollSpeedV = eval(this.WaveScrollSpeedV);
                obj.WaveScrollAmountU = eval(this.WaveScrollAmountU);
                obj.WaveScrollAmountV = eval(this.WaveScrollAmountV);
                obj.RandomTimeOffsetRange = eval(this.RandomTimeOffsetRange);
                obj.IsAnimated = eval(this.IsAnimated);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(PlacedObjectGoboAnimatedProperties.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, PlacedObjectGoboAnimatedProperties.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(PlacedObjectGoboAnimatedProperties.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.StaticRotation ?? true)
                    {
                        sb.AppendItem(StaticRotation, "StaticRotation");
                    }
                    if (printMask?.AnimatedRotationSpeed ?? true)
                    {
                        sb.AppendItem(AnimatedRotationSpeed, "AnimatedRotationSpeed");
                    }
                    if (printMask?.AnimatedWaveRotationSpeed ?? true)
                    {
                        sb.AppendItem(AnimatedWaveRotationSpeed, "AnimatedWaveRotationSpeed");
                    }
                    if (printMask?.AnimatedWaveRotationAmount ?? true)
                    {
                        sb.AppendItem(AnimatedWaveRotationAmount, "AnimatedWaveRotationAmount");
                    }
                    if (printMask?.StaticScaleU ?? true)
                    {
                        sb.AppendItem(StaticScaleU, "StaticScaleU");
                    }
                    if (printMask?.StaticScaleV ?? true)
                    {
                        sb.AppendItem(StaticScaleV, "StaticScaleV");
                    }
                    if (printMask?.WaveScalingSpeedU ?? true)
                    {
                        sb.AppendItem(WaveScalingSpeedU, "WaveScalingSpeedU");
                    }
                    if (printMask?.WaveScalingSpeedV ?? true)
                    {
                        sb.AppendItem(WaveScalingSpeedV, "WaveScalingSpeedV");
                    }
                    if (printMask?.WaveScalingAmountU ?? true)
                    {
                        sb.AppendItem(WaveScalingAmountU, "WaveScalingAmountU");
                    }
                    if (printMask?.WaveScalingAmountV ?? true)
                    {
                        sb.AppendItem(WaveScalingAmountV, "WaveScalingAmountV");
                    }
                    if (printMask?.StaticOffsetU ?? true)
                    {
                        sb.AppendItem(StaticOffsetU, "StaticOffsetU");
                    }
                    if (printMask?.StaticOffsetV ?? true)
                    {
                        sb.AppendItem(StaticOffsetV, "StaticOffsetV");
                    }
                    if (printMask?.RotationPivotU ?? true)
                    {
                        sb.AppendItem(RotationPivotU, "RotationPivotU");
                    }
                    if (printMask?.RotationPivotV ?? true)
                    {
                        sb.AppendItem(RotationPivotV, "RotationPivotV");
                    }
                    if (printMask?.ScrollSpeedU ?? true)
                    {
                        sb.AppendItem(ScrollSpeedU, "ScrollSpeedU");
                    }
                    if (printMask?.ScrollSpeedV ?? true)
                    {
                        sb.AppendItem(ScrollSpeedV, "ScrollSpeedV");
                    }
                    if (printMask?.WaveScrollSpeedU ?? true)
                    {
                        sb.AppendItem(WaveScrollSpeedU, "WaveScrollSpeedU");
                    }
                    if (printMask?.WaveScrollSpeedV ?? true)
                    {
                        sb.AppendItem(WaveScrollSpeedV, "WaveScrollSpeedV");
                    }
                    if (printMask?.WaveScrollAmountU ?? true)
                    {
                        sb.AppendItem(WaveScrollAmountU, "WaveScrollAmountU");
                    }
                    if (printMask?.WaveScrollAmountV ?? true)
                    {
                        sb.AppendItem(WaveScrollAmountV, "WaveScrollAmountV");
                    }
                    if (printMask?.RandomTimeOffsetRange ?? true)
                    {
                        sb.AppendItem(RandomTimeOffsetRange, "RandomTimeOffsetRange");
                    }
                    if (printMask?.IsAnimated ?? true)
                    {
                        sb.AppendItem(IsAnimated, "IsAnimated");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? StaticRotation;
            public Exception? AnimatedRotationSpeed;
            public Exception? AnimatedWaveRotationSpeed;
            public Exception? AnimatedWaveRotationAmount;
            public Exception? StaticScaleU;
            public Exception? StaticScaleV;
            public Exception? WaveScalingSpeedU;
            public Exception? WaveScalingSpeedV;
            public Exception? WaveScalingAmountU;
            public Exception? WaveScalingAmountV;
            public Exception? StaticOffsetU;
            public Exception? StaticOffsetV;
            public Exception? RotationPivotU;
            public Exception? RotationPivotV;
            public Exception? ScrollSpeedU;
            public Exception? ScrollSpeedV;
            public Exception? WaveScrollSpeedU;
            public Exception? WaveScrollSpeedV;
            public Exception? WaveScrollAmountU;
            public Exception? WaveScrollAmountV;
            public Exception? RandomTimeOffsetRange;
            public Exception? IsAnimated;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                PlacedObjectGoboAnimatedProperties_FieldIndex enu = (PlacedObjectGoboAnimatedProperties_FieldIndex)index;
                switch (enu)
                {
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.StaticRotation:
                        return StaticRotation;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.AnimatedRotationSpeed:
                        return AnimatedRotationSpeed;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.AnimatedWaveRotationSpeed:
                        return AnimatedWaveRotationSpeed;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.AnimatedWaveRotationAmount:
                        return AnimatedWaveRotationAmount;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.StaticScaleU:
                        return StaticScaleU;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.StaticScaleV:
                        return StaticScaleV;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScalingSpeedU:
                        return WaveScalingSpeedU;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScalingSpeedV:
                        return WaveScalingSpeedV;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScalingAmountU:
                        return WaveScalingAmountU;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScalingAmountV:
                        return WaveScalingAmountV;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.StaticOffsetU:
                        return StaticOffsetU;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.StaticOffsetV:
                        return StaticOffsetV;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.RotationPivotU:
                        return RotationPivotU;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.RotationPivotV:
                        return RotationPivotV;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.ScrollSpeedU:
                        return ScrollSpeedU;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.ScrollSpeedV:
                        return ScrollSpeedV;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScrollSpeedU:
                        return WaveScrollSpeedU;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScrollSpeedV:
                        return WaveScrollSpeedV;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScrollAmountU:
                        return WaveScrollAmountU;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScrollAmountV:
                        return WaveScrollAmountV;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.RandomTimeOffsetRange:
                        return RandomTimeOffsetRange;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.IsAnimated:
                        return IsAnimated;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                PlacedObjectGoboAnimatedProperties_FieldIndex enu = (PlacedObjectGoboAnimatedProperties_FieldIndex)index;
                switch (enu)
                {
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.StaticRotation:
                        this.StaticRotation = ex;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.AnimatedRotationSpeed:
                        this.AnimatedRotationSpeed = ex;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.AnimatedWaveRotationSpeed:
                        this.AnimatedWaveRotationSpeed = ex;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.AnimatedWaveRotationAmount:
                        this.AnimatedWaveRotationAmount = ex;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.StaticScaleU:
                        this.StaticScaleU = ex;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.StaticScaleV:
                        this.StaticScaleV = ex;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScalingSpeedU:
                        this.WaveScalingSpeedU = ex;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScalingSpeedV:
                        this.WaveScalingSpeedV = ex;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScalingAmountU:
                        this.WaveScalingAmountU = ex;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScalingAmountV:
                        this.WaveScalingAmountV = ex;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.StaticOffsetU:
                        this.StaticOffsetU = ex;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.StaticOffsetV:
                        this.StaticOffsetV = ex;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.RotationPivotU:
                        this.RotationPivotU = ex;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.RotationPivotV:
                        this.RotationPivotV = ex;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.ScrollSpeedU:
                        this.ScrollSpeedU = ex;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.ScrollSpeedV:
                        this.ScrollSpeedV = ex;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScrollSpeedU:
                        this.WaveScrollSpeedU = ex;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScrollSpeedV:
                        this.WaveScrollSpeedV = ex;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScrollAmountU:
                        this.WaveScrollAmountU = ex;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScrollAmountV:
                        this.WaveScrollAmountV = ex;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.RandomTimeOffsetRange:
                        this.RandomTimeOffsetRange = ex;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.IsAnimated:
                        this.IsAnimated = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                PlacedObjectGoboAnimatedProperties_FieldIndex enu = (PlacedObjectGoboAnimatedProperties_FieldIndex)index;
                switch (enu)
                {
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.StaticRotation:
                        this.StaticRotation = (Exception?)obj;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.AnimatedRotationSpeed:
                        this.AnimatedRotationSpeed = (Exception?)obj;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.AnimatedWaveRotationSpeed:
                        this.AnimatedWaveRotationSpeed = (Exception?)obj;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.AnimatedWaveRotationAmount:
                        this.AnimatedWaveRotationAmount = (Exception?)obj;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.StaticScaleU:
                        this.StaticScaleU = (Exception?)obj;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.StaticScaleV:
                        this.StaticScaleV = (Exception?)obj;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScalingSpeedU:
                        this.WaveScalingSpeedU = (Exception?)obj;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScalingSpeedV:
                        this.WaveScalingSpeedV = (Exception?)obj;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScalingAmountU:
                        this.WaveScalingAmountU = (Exception?)obj;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScalingAmountV:
                        this.WaveScalingAmountV = (Exception?)obj;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.StaticOffsetU:
                        this.StaticOffsetU = (Exception?)obj;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.StaticOffsetV:
                        this.StaticOffsetV = (Exception?)obj;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.RotationPivotU:
                        this.RotationPivotU = (Exception?)obj;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.RotationPivotV:
                        this.RotationPivotV = (Exception?)obj;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.ScrollSpeedU:
                        this.ScrollSpeedU = (Exception?)obj;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.ScrollSpeedV:
                        this.ScrollSpeedV = (Exception?)obj;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScrollSpeedU:
                        this.WaveScrollSpeedU = (Exception?)obj;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScrollSpeedV:
                        this.WaveScrollSpeedV = (Exception?)obj;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScrollAmountU:
                        this.WaveScrollAmountU = (Exception?)obj;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScrollAmountV:
                        this.WaveScrollAmountV = (Exception?)obj;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.RandomTimeOffsetRange:
                        this.RandomTimeOffsetRange = (Exception?)obj;
                        break;
                    case PlacedObjectGoboAnimatedProperties_FieldIndex.IsAnimated:
                        this.IsAnimated = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (StaticRotation != null) return true;
                if (AnimatedRotationSpeed != null) return true;
                if (AnimatedWaveRotationSpeed != null) return true;
                if (AnimatedWaveRotationAmount != null) return true;
                if (StaticScaleU != null) return true;
                if (StaticScaleV != null) return true;
                if (WaveScalingSpeedU != null) return true;
                if (WaveScalingSpeedV != null) return true;
                if (WaveScalingAmountU != null) return true;
                if (WaveScalingAmountV != null) return true;
                if (StaticOffsetU != null) return true;
                if (StaticOffsetV != null) return true;
                if (RotationPivotU != null) return true;
                if (RotationPivotV != null) return true;
                if (ScrollSpeedU != null) return true;
                if (ScrollSpeedV != null) return true;
                if (WaveScrollSpeedU != null) return true;
                if (WaveScrollSpeedV != null) return true;
                if (WaveScrollAmountU != null) return true;
                if (WaveScrollAmountV != null) return true;
                if (RandomTimeOffsetRange != null) return true;
                if (IsAnimated != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(StaticRotation, "StaticRotation");
                }
                {
                    sb.AppendItem(AnimatedRotationSpeed, "AnimatedRotationSpeed");
                }
                {
                    sb.AppendItem(AnimatedWaveRotationSpeed, "AnimatedWaveRotationSpeed");
                }
                {
                    sb.AppendItem(AnimatedWaveRotationAmount, "AnimatedWaveRotationAmount");
                }
                {
                    sb.AppendItem(StaticScaleU, "StaticScaleU");
                }
                {
                    sb.AppendItem(StaticScaleV, "StaticScaleV");
                }
                {
                    sb.AppendItem(WaveScalingSpeedU, "WaveScalingSpeedU");
                }
                {
                    sb.AppendItem(WaveScalingSpeedV, "WaveScalingSpeedV");
                }
                {
                    sb.AppendItem(WaveScalingAmountU, "WaveScalingAmountU");
                }
                {
                    sb.AppendItem(WaveScalingAmountV, "WaveScalingAmountV");
                }
                {
                    sb.AppendItem(StaticOffsetU, "StaticOffsetU");
                }
                {
                    sb.AppendItem(StaticOffsetV, "StaticOffsetV");
                }
                {
                    sb.AppendItem(RotationPivotU, "RotationPivotU");
                }
                {
                    sb.AppendItem(RotationPivotV, "RotationPivotV");
                }
                {
                    sb.AppendItem(ScrollSpeedU, "ScrollSpeedU");
                }
                {
                    sb.AppendItem(ScrollSpeedV, "ScrollSpeedV");
                }
                {
                    sb.AppendItem(WaveScrollSpeedU, "WaveScrollSpeedU");
                }
                {
                    sb.AppendItem(WaveScrollSpeedV, "WaveScrollSpeedV");
                }
                {
                    sb.AppendItem(WaveScrollAmountU, "WaveScrollAmountU");
                }
                {
                    sb.AppendItem(WaveScrollAmountV, "WaveScrollAmountV");
                }
                {
                    sb.AppendItem(RandomTimeOffsetRange, "RandomTimeOffsetRange");
                }
                {
                    sb.AppendItem(IsAnimated, "IsAnimated");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.StaticRotation = this.StaticRotation.Combine(rhs.StaticRotation);
                ret.AnimatedRotationSpeed = this.AnimatedRotationSpeed.Combine(rhs.AnimatedRotationSpeed);
                ret.AnimatedWaveRotationSpeed = this.AnimatedWaveRotationSpeed.Combine(rhs.AnimatedWaveRotationSpeed);
                ret.AnimatedWaveRotationAmount = this.AnimatedWaveRotationAmount.Combine(rhs.AnimatedWaveRotationAmount);
                ret.StaticScaleU = this.StaticScaleU.Combine(rhs.StaticScaleU);
                ret.StaticScaleV = this.StaticScaleV.Combine(rhs.StaticScaleV);
                ret.WaveScalingSpeedU = this.WaveScalingSpeedU.Combine(rhs.WaveScalingSpeedU);
                ret.WaveScalingSpeedV = this.WaveScalingSpeedV.Combine(rhs.WaveScalingSpeedV);
                ret.WaveScalingAmountU = this.WaveScalingAmountU.Combine(rhs.WaveScalingAmountU);
                ret.WaveScalingAmountV = this.WaveScalingAmountV.Combine(rhs.WaveScalingAmountV);
                ret.StaticOffsetU = this.StaticOffsetU.Combine(rhs.StaticOffsetU);
                ret.StaticOffsetV = this.StaticOffsetV.Combine(rhs.StaticOffsetV);
                ret.RotationPivotU = this.RotationPivotU.Combine(rhs.RotationPivotU);
                ret.RotationPivotV = this.RotationPivotV.Combine(rhs.RotationPivotV);
                ret.ScrollSpeedU = this.ScrollSpeedU.Combine(rhs.ScrollSpeedU);
                ret.ScrollSpeedV = this.ScrollSpeedV.Combine(rhs.ScrollSpeedV);
                ret.WaveScrollSpeedU = this.WaveScrollSpeedU.Combine(rhs.WaveScrollSpeedU);
                ret.WaveScrollSpeedV = this.WaveScrollSpeedV.Combine(rhs.WaveScrollSpeedV);
                ret.WaveScrollAmountU = this.WaveScrollAmountU.Combine(rhs.WaveScrollAmountU);
                ret.WaveScrollAmountV = this.WaveScrollAmountV.Combine(rhs.WaveScrollAmountV);
                ret.RandomTimeOffsetRange = this.RandomTimeOffsetRange.Combine(rhs.RandomTimeOffsetRange);
                ret.IsAnimated = this.IsAnimated.Combine(rhs.IsAnimated);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool StaticRotation;
            public bool AnimatedRotationSpeed;
            public bool AnimatedWaveRotationSpeed;
            public bool AnimatedWaveRotationAmount;
            public bool StaticScaleU;
            public bool StaticScaleV;
            public bool WaveScalingSpeedU;
            public bool WaveScalingSpeedV;
            public bool WaveScalingAmountU;
            public bool WaveScalingAmountV;
            public bool StaticOffsetU;
            public bool StaticOffsetV;
            public bool RotationPivotU;
            public bool RotationPivotV;
            public bool ScrollSpeedU;
            public bool ScrollSpeedV;
            public bool WaveScrollSpeedU;
            public bool WaveScrollSpeedV;
            public bool WaveScrollAmountU;
            public bool WaveScrollAmountV;
            public bool RandomTimeOffsetRange;
            public bool IsAnimated;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.StaticRotation = defaultOn;
                this.AnimatedRotationSpeed = defaultOn;
                this.AnimatedWaveRotationSpeed = defaultOn;
                this.AnimatedWaveRotationAmount = defaultOn;
                this.StaticScaleU = defaultOn;
                this.StaticScaleV = defaultOn;
                this.WaveScalingSpeedU = defaultOn;
                this.WaveScalingSpeedV = defaultOn;
                this.WaveScalingAmountU = defaultOn;
                this.WaveScalingAmountV = defaultOn;
                this.StaticOffsetU = defaultOn;
                this.StaticOffsetV = defaultOn;
                this.RotationPivotU = defaultOn;
                this.RotationPivotV = defaultOn;
                this.ScrollSpeedU = defaultOn;
                this.ScrollSpeedV = defaultOn;
                this.WaveScrollSpeedU = defaultOn;
                this.WaveScrollSpeedV = defaultOn;
                this.WaveScrollAmountU = defaultOn;
                this.WaveScrollAmountV = defaultOn;
                this.RandomTimeOffsetRange = defaultOn;
                this.IsAnimated = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((StaticRotation, null));
                ret.Add((AnimatedRotationSpeed, null));
                ret.Add((AnimatedWaveRotationSpeed, null));
                ret.Add((AnimatedWaveRotationAmount, null));
                ret.Add((StaticScaleU, null));
                ret.Add((StaticScaleV, null));
                ret.Add((WaveScalingSpeedU, null));
                ret.Add((WaveScalingSpeedV, null));
                ret.Add((WaveScalingAmountU, null));
                ret.Add((WaveScalingAmountV, null));
                ret.Add((StaticOffsetU, null));
                ret.Add((StaticOffsetV, null));
                ret.Add((RotationPivotU, null));
                ret.Add((RotationPivotV, null));
                ret.Add((ScrollSpeedU, null));
                ret.Add((ScrollSpeedV, null));
                ret.Add((WaveScrollSpeedU, null));
                ret.Add((WaveScrollSpeedV, null));
                ret.Add((WaveScrollAmountU, null));
                ret.Add((WaveScrollAmountV, null));
                ret.Add((RandomTimeOffsetRange, null));
                ret.Add((IsAnimated, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PlacedObjectGoboAnimatedPropertiesBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlacedObjectGoboAnimatedPropertiesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static PlacedObjectGoboAnimatedProperties CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new PlacedObjectGoboAnimatedProperties();
            ((PlacedObjectGoboAnimatedPropertiesSetterCommon)((IPlacedObjectGoboAnimatedPropertiesGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PlacedObjectGoboAnimatedProperties item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((PlacedObjectGoboAnimatedPropertiesSetterCommon)((IPlacedObjectGoboAnimatedPropertiesGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static PlacedObjectGoboAnimatedProperties GetNew()
        {
            return new PlacedObjectGoboAnimatedProperties();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlacedObjectGoboAnimatedProperties :
        ILoquiObjectSetter<IPlacedObjectGoboAnimatedProperties>,
        IPlacedObjectGoboAnimatedPropertiesGetter
    {
        new Single StaticRotation { get; set; }
        new Single AnimatedRotationSpeed { get; set; }
        new Single AnimatedWaveRotationSpeed { get; set; }
        new Single AnimatedWaveRotationAmount { get; set; }
        new Single StaticScaleU { get; set; }
        new Single StaticScaleV { get; set; }
        new Single WaveScalingSpeedU { get; set; }
        new Single WaveScalingSpeedV { get; set; }
        new Single WaveScalingAmountU { get; set; }
        new Single WaveScalingAmountV { get; set; }
        new Single StaticOffsetU { get; set; }
        new Single StaticOffsetV { get; set; }
        new Single RotationPivotU { get; set; }
        new Single RotationPivotV { get; set; }
        new Single ScrollSpeedU { get; set; }
        new Single ScrollSpeedV { get; set; }
        new Single WaveScrollSpeedU { get; set; }
        new Single WaveScrollSpeedV { get; set; }
        new Single WaveScrollAmountU { get; set; }
        new Single WaveScrollAmountV { get; set; }
        new Single RandomTimeOffsetRange { get; set; }
        new Boolean IsAnimated { get; set; }
    }

    public partial interface IPlacedObjectGoboAnimatedPropertiesGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IPlacedObjectGoboAnimatedPropertiesGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => PlacedObjectGoboAnimatedProperties_Registration.Instance;
        Single StaticRotation { get; }
        Single AnimatedRotationSpeed { get; }
        Single AnimatedWaveRotationSpeed { get; }
        Single AnimatedWaveRotationAmount { get; }
        Single StaticScaleU { get; }
        Single StaticScaleV { get; }
        Single WaveScalingSpeedU { get; }
        Single WaveScalingSpeedV { get; }
        Single WaveScalingAmountU { get; }
        Single WaveScalingAmountV { get; }
        Single StaticOffsetU { get; }
        Single StaticOffsetV { get; }
        Single RotationPivotU { get; }
        Single RotationPivotV { get; }
        Single ScrollSpeedU { get; }
        Single ScrollSpeedV { get; }
        Single WaveScrollSpeedU { get; }
        Single WaveScrollSpeedV { get; }
        Single WaveScrollAmountU { get; }
        Single WaveScrollAmountV { get; }
        Single RandomTimeOffsetRange { get; }
        Boolean IsAnimated { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PlacedObjectGoboAnimatedPropertiesMixIn
    {
        public static void Clear(this IPlacedObjectGoboAnimatedProperties item)
        {
            ((PlacedObjectGoboAnimatedPropertiesSetterCommon)((IPlacedObjectGoboAnimatedPropertiesGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PlacedObjectGoboAnimatedProperties.Mask<bool> GetEqualsMask(
            this IPlacedObjectGoboAnimatedPropertiesGetter item,
            IPlacedObjectGoboAnimatedPropertiesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlacedObjectGoboAnimatedPropertiesCommon)((IPlacedObjectGoboAnimatedPropertiesGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IPlacedObjectGoboAnimatedPropertiesGetter item,
            string? name = null,
            PlacedObjectGoboAnimatedProperties.Mask<bool>? printMask = null)
        {
            return ((PlacedObjectGoboAnimatedPropertiesCommon)((IPlacedObjectGoboAnimatedPropertiesGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IPlacedObjectGoboAnimatedPropertiesGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlacedObjectGoboAnimatedProperties.Mask<bool>? printMask = null)
        {
            ((PlacedObjectGoboAnimatedPropertiesCommon)((IPlacedObjectGoboAnimatedPropertiesGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPlacedObjectGoboAnimatedPropertiesGetter item,
            IPlacedObjectGoboAnimatedPropertiesGetter rhs,
            PlacedObjectGoboAnimatedProperties.TranslationMask? equalsMask = null)
        {
            return ((PlacedObjectGoboAnimatedPropertiesCommon)((IPlacedObjectGoboAnimatedPropertiesGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPlacedObjectGoboAnimatedProperties lhs,
            IPlacedObjectGoboAnimatedPropertiesGetter rhs)
        {
            ((PlacedObjectGoboAnimatedPropertiesSetterTranslationCommon)((IPlacedObjectGoboAnimatedPropertiesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPlacedObjectGoboAnimatedProperties lhs,
            IPlacedObjectGoboAnimatedPropertiesGetter rhs,
            PlacedObjectGoboAnimatedProperties.TranslationMask? copyMask = null)
        {
            ((PlacedObjectGoboAnimatedPropertiesSetterTranslationCommon)((IPlacedObjectGoboAnimatedPropertiesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPlacedObjectGoboAnimatedProperties lhs,
            IPlacedObjectGoboAnimatedPropertiesGetter rhs,
            out PlacedObjectGoboAnimatedProperties.ErrorMask errorMask,
            PlacedObjectGoboAnimatedProperties.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PlacedObjectGoboAnimatedPropertiesSetterTranslationCommon)((IPlacedObjectGoboAnimatedPropertiesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PlacedObjectGoboAnimatedProperties.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPlacedObjectGoboAnimatedProperties lhs,
            IPlacedObjectGoboAnimatedPropertiesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PlacedObjectGoboAnimatedPropertiesSetterTranslationCommon)((IPlacedObjectGoboAnimatedPropertiesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PlacedObjectGoboAnimatedProperties DeepCopy(
            this IPlacedObjectGoboAnimatedPropertiesGetter item,
            PlacedObjectGoboAnimatedProperties.TranslationMask? copyMask = null)
        {
            return ((PlacedObjectGoboAnimatedPropertiesSetterTranslationCommon)((IPlacedObjectGoboAnimatedPropertiesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PlacedObjectGoboAnimatedProperties DeepCopy(
            this IPlacedObjectGoboAnimatedPropertiesGetter item,
            out PlacedObjectGoboAnimatedProperties.ErrorMask errorMask,
            PlacedObjectGoboAnimatedProperties.TranslationMask? copyMask = null)
        {
            return ((PlacedObjectGoboAnimatedPropertiesSetterTranslationCommon)((IPlacedObjectGoboAnimatedPropertiesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PlacedObjectGoboAnimatedProperties DeepCopy(
            this IPlacedObjectGoboAnimatedPropertiesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PlacedObjectGoboAnimatedPropertiesSetterTranslationCommon)((IPlacedObjectGoboAnimatedPropertiesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPlacedObjectGoboAnimatedProperties item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((PlacedObjectGoboAnimatedPropertiesSetterCommon)((IPlacedObjectGoboAnimatedPropertiesGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum PlacedObjectGoboAnimatedProperties_FieldIndex
    {
        StaticRotation = 0,
        AnimatedRotationSpeed = 1,
        AnimatedWaveRotationSpeed = 2,
        AnimatedWaveRotationAmount = 3,
        StaticScaleU = 4,
        StaticScaleV = 5,
        WaveScalingSpeedU = 6,
        WaveScalingSpeedV = 7,
        WaveScalingAmountU = 8,
        WaveScalingAmountV = 9,
        StaticOffsetU = 10,
        StaticOffsetV = 11,
        RotationPivotU = 12,
        RotationPivotV = 13,
        ScrollSpeedU = 14,
        ScrollSpeedV = 15,
        WaveScrollSpeedU = 16,
        WaveScrollSpeedV = 17,
        WaveScrollAmountU = 18,
        WaveScrollAmountV = 19,
        RandomTimeOffsetRange = 20,
        IsAnimated = 21,
    }
    #endregion

    #region Registration
    internal partial class PlacedObjectGoboAnimatedProperties_Registration : ILoquiRegistration
    {
        public static readonly PlacedObjectGoboAnimatedProperties_Registration Instance = new PlacedObjectGoboAnimatedProperties_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 22;

        public const ushort FieldCount = 22;

        public static readonly Type MaskType = typeof(PlacedObjectGoboAnimatedProperties.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlacedObjectGoboAnimatedProperties.ErrorMask);

        public static readonly Type ClassType = typeof(PlacedObjectGoboAnimatedProperties);

        public static readonly Type GetterType = typeof(IPlacedObjectGoboAnimatedPropertiesGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlacedObjectGoboAnimatedProperties);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.PlacedObjectGoboAnimatedProperties";

        public const string Name = "PlacedObjectGoboAnimatedProperties";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.XLGD;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.XLGD);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(PlacedObjectGoboAnimatedPropertiesBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class PlacedObjectGoboAnimatedPropertiesSetterCommon
    {
        public static readonly PlacedObjectGoboAnimatedPropertiesSetterCommon Instance = new PlacedObjectGoboAnimatedPropertiesSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlacedObjectGoboAnimatedProperties item)
        {
            ClearPartial();
            item.StaticRotation = default(Single);
            item.AnimatedRotationSpeed = default(Single);
            item.AnimatedWaveRotationSpeed = default(Single);
            item.AnimatedWaveRotationAmount = default(Single);
            item.StaticScaleU = default(Single);
            item.StaticScaleV = default(Single);
            item.WaveScalingSpeedU = default(Single);
            item.WaveScalingSpeedV = default(Single);
            item.WaveScalingAmountU = default(Single);
            item.WaveScalingAmountV = default(Single);
            item.StaticOffsetU = default(Single);
            item.StaticOffsetV = default(Single);
            item.RotationPivotU = default(Single);
            item.RotationPivotV = default(Single);
            item.ScrollSpeedU = default(Single);
            item.ScrollSpeedV = default(Single);
            item.WaveScrollSpeedU = default(Single);
            item.WaveScrollSpeedV = default(Single);
            item.WaveScrollAmountU = default(Single);
            item.WaveScrollAmountV = default(Single);
            item.RandomTimeOffsetRange = default(Single);
            item.IsAnimated = default(Boolean);
        }
        
        #region Mutagen
        public void RemapLinks(IPlacedObjectGoboAnimatedProperties obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPlacedObjectGoboAnimatedProperties item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.XLGD),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: PlacedObjectGoboAnimatedPropertiesBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class PlacedObjectGoboAnimatedPropertiesCommon
    {
        public static readonly PlacedObjectGoboAnimatedPropertiesCommon Instance = new PlacedObjectGoboAnimatedPropertiesCommon();

        public PlacedObjectGoboAnimatedProperties.Mask<bool> GetEqualsMask(
            IPlacedObjectGoboAnimatedPropertiesGetter item,
            IPlacedObjectGoboAnimatedPropertiesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlacedObjectGoboAnimatedProperties.Mask<bool>(false);
            ((PlacedObjectGoboAnimatedPropertiesCommon)((IPlacedObjectGoboAnimatedPropertiesGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlacedObjectGoboAnimatedPropertiesGetter item,
            IPlacedObjectGoboAnimatedPropertiesGetter rhs,
            PlacedObjectGoboAnimatedProperties.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.StaticRotation = item.StaticRotation.EqualsWithin(rhs.StaticRotation);
            ret.AnimatedRotationSpeed = item.AnimatedRotationSpeed.EqualsWithin(rhs.AnimatedRotationSpeed);
            ret.AnimatedWaveRotationSpeed = item.AnimatedWaveRotationSpeed.EqualsWithin(rhs.AnimatedWaveRotationSpeed);
            ret.AnimatedWaveRotationAmount = item.AnimatedWaveRotationAmount.EqualsWithin(rhs.AnimatedWaveRotationAmount);
            ret.StaticScaleU = item.StaticScaleU.EqualsWithin(rhs.StaticScaleU);
            ret.StaticScaleV = item.StaticScaleV.EqualsWithin(rhs.StaticScaleV);
            ret.WaveScalingSpeedU = item.WaveScalingSpeedU.EqualsWithin(rhs.WaveScalingSpeedU);
            ret.WaveScalingSpeedV = item.WaveScalingSpeedV.EqualsWithin(rhs.WaveScalingSpeedV);
            ret.WaveScalingAmountU = item.WaveScalingAmountU.EqualsWithin(rhs.WaveScalingAmountU);
            ret.WaveScalingAmountV = item.WaveScalingAmountV.EqualsWithin(rhs.WaveScalingAmountV);
            ret.StaticOffsetU = item.StaticOffsetU.EqualsWithin(rhs.StaticOffsetU);
            ret.StaticOffsetV = item.StaticOffsetV.EqualsWithin(rhs.StaticOffsetV);
            ret.RotationPivotU = item.RotationPivotU.EqualsWithin(rhs.RotationPivotU);
            ret.RotationPivotV = item.RotationPivotV.EqualsWithin(rhs.RotationPivotV);
            ret.ScrollSpeedU = item.ScrollSpeedU.EqualsWithin(rhs.ScrollSpeedU);
            ret.ScrollSpeedV = item.ScrollSpeedV.EqualsWithin(rhs.ScrollSpeedV);
            ret.WaveScrollSpeedU = item.WaveScrollSpeedU.EqualsWithin(rhs.WaveScrollSpeedU);
            ret.WaveScrollSpeedV = item.WaveScrollSpeedV.EqualsWithin(rhs.WaveScrollSpeedV);
            ret.WaveScrollAmountU = item.WaveScrollAmountU.EqualsWithin(rhs.WaveScrollAmountU);
            ret.WaveScrollAmountV = item.WaveScrollAmountV.EqualsWithin(rhs.WaveScrollAmountV);
            ret.RandomTimeOffsetRange = item.RandomTimeOffsetRange.EqualsWithin(rhs.RandomTimeOffsetRange);
            ret.IsAnimated = item.IsAnimated == rhs.IsAnimated;
        }
        
        public string Print(
            IPlacedObjectGoboAnimatedPropertiesGetter item,
            string? name = null,
            PlacedObjectGoboAnimatedProperties.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IPlacedObjectGoboAnimatedPropertiesGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlacedObjectGoboAnimatedProperties.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"PlacedObjectGoboAnimatedProperties =>");
            }
            else
            {
                sb.AppendLine($"{name} (PlacedObjectGoboAnimatedProperties) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IPlacedObjectGoboAnimatedPropertiesGetter item,
            StructuredStringBuilder sb,
            PlacedObjectGoboAnimatedProperties.Mask<bool>? printMask = null)
        {
            if (printMask?.StaticRotation ?? true)
            {
                sb.AppendItem(item.StaticRotation, "StaticRotation");
            }
            if (printMask?.AnimatedRotationSpeed ?? true)
            {
                sb.AppendItem(item.AnimatedRotationSpeed, "AnimatedRotationSpeed");
            }
            if (printMask?.AnimatedWaveRotationSpeed ?? true)
            {
                sb.AppendItem(item.AnimatedWaveRotationSpeed, "AnimatedWaveRotationSpeed");
            }
            if (printMask?.AnimatedWaveRotationAmount ?? true)
            {
                sb.AppendItem(item.AnimatedWaveRotationAmount, "AnimatedWaveRotationAmount");
            }
            if (printMask?.StaticScaleU ?? true)
            {
                sb.AppendItem(item.StaticScaleU, "StaticScaleU");
            }
            if (printMask?.StaticScaleV ?? true)
            {
                sb.AppendItem(item.StaticScaleV, "StaticScaleV");
            }
            if (printMask?.WaveScalingSpeedU ?? true)
            {
                sb.AppendItem(item.WaveScalingSpeedU, "WaveScalingSpeedU");
            }
            if (printMask?.WaveScalingSpeedV ?? true)
            {
                sb.AppendItem(item.WaveScalingSpeedV, "WaveScalingSpeedV");
            }
            if (printMask?.WaveScalingAmountU ?? true)
            {
                sb.AppendItem(item.WaveScalingAmountU, "WaveScalingAmountU");
            }
            if (printMask?.WaveScalingAmountV ?? true)
            {
                sb.AppendItem(item.WaveScalingAmountV, "WaveScalingAmountV");
            }
            if (printMask?.StaticOffsetU ?? true)
            {
                sb.AppendItem(item.StaticOffsetU, "StaticOffsetU");
            }
            if (printMask?.StaticOffsetV ?? true)
            {
                sb.AppendItem(item.StaticOffsetV, "StaticOffsetV");
            }
            if (printMask?.RotationPivotU ?? true)
            {
                sb.AppendItem(item.RotationPivotU, "RotationPivotU");
            }
            if (printMask?.RotationPivotV ?? true)
            {
                sb.AppendItem(item.RotationPivotV, "RotationPivotV");
            }
            if (printMask?.ScrollSpeedU ?? true)
            {
                sb.AppendItem(item.ScrollSpeedU, "ScrollSpeedU");
            }
            if (printMask?.ScrollSpeedV ?? true)
            {
                sb.AppendItem(item.ScrollSpeedV, "ScrollSpeedV");
            }
            if (printMask?.WaveScrollSpeedU ?? true)
            {
                sb.AppendItem(item.WaveScrollSpeedU, "WaveScrollSpeedU");
            }
            if (printMask?.WaveScrollSpeedV ?? true)
            {
                sb.AppendItem(item.WaveScrollSpeedV, "WaveScrollSpeedV");
            }
            if (printMask?.WaveScrollAmountU ?? true)
            {
                sb.AppendItem(item.WaveScrollAmountU, "WaveScrollAmountU");
            }
            if (printMask?.WaveScrollAmountV ?? true)
            {
                sb.AppendItem(item.WaveScrollAmountV, "WaveScrollAmountV");
            }
            if (printMask?.RandomTimeOffsetRange ?? true)
            {
                sb.AppendItem(item.RandomTimeOffsetRange, "RandomTimeOffsetRange");
            }
            if (printMask?.IsAnimated ?? true)
            {
                sb.AppendItem(item.IsAnimated, "IsAnimated");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlacedObjectGoboAnimatedPropertiesGetter? lhs,
            IPlacedObjectGoboAnimatedPropertiesGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.StaticRotation) ?? true))
            {
                if (!lhs.StaticRotation.EqualsWithin(rhs.StaticRotation)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.AnimatedRotationSpeed) ?? true))
            {
                if (!lhs.AnimatedRotationSpeed.EqualsWithin(rhs.AnimatedRotationSpeed)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.AnimatedWaveRotationSpeed) ?? true))
            {
                if (!lhs.AnimatedWaveRotationSpeed.EqualsWithin(rhs.AnimatedWaveRotationSpeed)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.AnimatedWaveRotationAmount) ?? true))
            {
                if (!lhs.AnimatedWaveRotationAmount.EqualsWithin(rhs.AnimatedWaveRotationAmount)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.StaticScaleU) ?? true))
            {
                if (!lhs.StaticScaleU.EqualsWithin(rhs.StaticScaleU)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.StaticScaleV) ?? true))
            {
                if (!lhs.StaticScaleV.EqualsWithin(rhs.StaticScaleV)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScalingSpeedU) ?? true))
            {
                if (!lhs.WaveScalingSpeedU.EqualsWithin(rhs.WaveScalingSpeedU)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScalingSpeedV) ?? true))
            {
                if (!lhs.WaveScalingSpeedV.EqualsWithin(rhs.WaveScalingSpeedV)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScalingAmountU) ?? true))
            {
                if (!lhs.WaveScalingAmountU.EqualsWithin(rhs.WaveScalingAmountU)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScalingAmountV) ?? true))
            {
                if (!lhs.WaveScalingAmountV.EqualsWithin(rhs.WaveScalingAmountV)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.StaticOffsetU) ?? true))
            {
                if (!lhs.StaticOffsetU.EqualsWithin(rhs.StaticOffsetU)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.StaticOffsetV) ?? true))
            {
                if (!lhs.StaticOffsetV.EqualsWithin(rhs.StaticOffsetV)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.RotationPivotU) ?? true))
            {
                if (!lhs.RotationPivotU.EqualsWithin(rhs.RotationPivotU)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.RotationPivotV) ?? true))
            {
                if (!lhs.RotationPivotV.EqualsWithin(rhs.RotationPivotV)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.ScrollSpeedU) ?? true))
            {
                if (!lhs.ScrollSpeedU.EqualsWithin(rhs.ScrollSpeedU)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.ScrollSpeedV) ?? true))
            {
                if (!lhs.ScrollSpeedV.EqualsWithin(rhs.ScrollSpeedV)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScrollSpeedU) ?? true))
            {
                if (!lhs.WaveScrollSpeedU.EqualsWithin(rhs.WaveScrollSpeedU)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScrollSpeedV) ?? true))
            {
                if (!lhs.WaveScrollSpeedV.EqualsWithin(rhs.WaveScrollSpeedV)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScrollAmountU) ?? true))
            {
                if (!lhs.WaveScrollAmountU.EqualsWithin(rhs.WaveScrollAmountU)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScrollAmountV) ?? true))
            {
                if (!lhs.WaveScrollAmountV.EqualsWithin(rhs.WaveScrollAmountV)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.RandomTimeOffsetRange) ?? true))
            {
                if (!lhs.RandomTimeOffsetRange.EqualsWithin(rhs.RandomTimeOffsetRange)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.IsAnimated) ?? true))
            {
                if (lhs.IsAnimated != rhs.IsAnimated) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IPlacedObjectGoboAnimatedPropertiesGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.StaticRotation);
            hash.Add(item.AnimatedRotationSpeed);
            hash.Add(item.AnimatedWaveRotationSpeed);
            hash.Add(item.AnimatedWaveRotationAmount);
            hash.Add(item.StaticScaleU);
            hash.Add(item.StaticScaleV);
            hash.Add(item.WaveScalingSpeedU);
            hash.Add(item.WaveScalingSpeedV);
            hash.Add(item.WaveScalingAmountU);
            hash.Add(item.WaveScalingAmountV);
            hash.Add(item.StaticOffsetU);
            hash.Add(item.StaticOffsetV);
            hash.Add(item.RotationPivotU);
            hash.Add(item.RotationPivotV);
            hash.Add(item.ScrollSpeedU);
            hash.Add(item.ScrollSpeedV);
            hash.Add(item.WaveScrollSpeedU);
            hash.Add(item.WaveScrollSpeedV);
            hash.Add(item.WaveScrollAmountU);
            hash.Add(item.WaveScrollAmountV);
            hash.Add(item.RandomTimeOffsetRange);
            hash.Add(item.IsAnimated);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return PlacedObjectGoboAnimatedProperties.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IPlacedObjectGoboAnimatedPropertiesGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class PlacedObjectGoboAnimatedPropertiesSetterTranslationCommon
    {
        public static readonly PlacedObjectGoboAnimatedPropertiesSetterTranslationCommon Instance = new PlacedObjectGoboAnimatedPropertiesSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPlacedObjectGoboAnimatedProperties item,
            IPlacedObjectGoboAnimatedPropertiesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.StaticRotation) ?? true))
            {
                item.StaticRotation = rhs.StaticRotation;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.AnimatedRotationSpeed) ?? true))
            {
                item.AnimatedRotationSpeed = rhs.AnimatedRotationSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.AnimatedWaveRotationSpeed) ?? true))
            {
                item.AnimatedWaveRotationSpeed = rhs.AnimatedWaveRotationSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.AnimatedWaveRotationAmount) ?? true))
            {
                item.AnimatedWaveRotationAmount = rhs.AnimatedWaveRotationAmount;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.StaticScaleU) ?? true))
            {
                item.StaticScaleU = rhs.StaticScaleU;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.StaticScaleV) ?? true))
            {
                item.StaticScaleV = rhs.StaticScaleV;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScalingSpeedU) ?? true))
            {
                item.WaveScalingSpeedU = rhs.WaveScalingSpeedU;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScalingSpeedV) ?? true))
            {
                item.WaveScalingSpeedV = rhs.WaveScalingSpeedV;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScalingAmountU) ?? true))
            {
                item.WaveScalingAmountU = rhs.WaveScalingAmountU;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScalingAmountV) ?? true))
            {
                item.WaveScalingAmountV = rhs.WaveScalingAmountV;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.StaticOffsetU) ?? true))
            {
                item.StaticOffsetU = rhs.StaticOffsetU;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.StaticOffsetV) ?? true))
            {
                item.StaticOffsetV = rhs.StaticOffsetV;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.RotationPivotU) ?? true))
            {
                item.RotationPivotU = rhs.RotationPivotU;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.RotationPivotV) ?? true))
            {
                item.RotationPivotV = rhs.RotationPivotV;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.ScrollSpeedU) ?? true))
            {
                item.ScrollSpeedU = rhs.ScrollSpeedU;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.ScrollSpeedV) ?? true))
            {
                item.ScrollSpeedV = rhs.ScrollSpeedV;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScrollSpeedU) ?? true))
            {
                item.WaveScrollSpeedU = rhs.WaveScrollSpeedU;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScrollSpeedV) ?? true))
            {
                item.WaveScrollSpeedV = rhs.WaveScrollSpeedV;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScrollAmountU) ?? true))
            {
                item.WaveScrollAmountU = rhs.WaveScrollAmountU;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.WaveScrollAmountV) ?? true))
            {
                item.WaveScrollAmountV = rhs.WaveScrollAmountV;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.RandomTimeOffsetRange) ?? true))
            {
                item.RandomTimeOffsetRange = rhs.RandomTimeOffsetRange;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectGoboAnimatedProperties_FieldIndex.IsAnimated) ?? true))
            {
                item.IsAnimated = rhs.IsAnimated;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IPlacedObjectGoboAnimatedProperties item,
            IPlacedObjectGoboAnimatedPropertiesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public PlacedObjectGoboAnimatedProperties DeepCopy(
            IPlacedObjectGoboAnimatedPropertiesGetter item,
            PlacedObjectGoboAnimatedProperties.TranslationMask? copyMask = null)
        {
            PlacedObjectGoboAnimatedProperties ret = (PlacedObjectGoboAnimatedProperties)((PlacedObjectGoboAnimatedPropertiesCommon)((IPlacedObjectGoboAnimatedPropertiesGetter)item).CommonInstance()!).GetNew();
            ((PlacedObjectGoboAnimatedPropertiesSetterTranslationCommon)((IPlacedObjectGoboAnimatedPropertiesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PlacedObjectGoboAnimatedProperties DeepCopy(
            IPlacedObjectGoboAnimatedPropertiesGetter item,
            out PlacedObjectGoboAnimatedProperties.ErrorMask errorMask,
            PlacedObjectGoboAnimatedProperties.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PlacedObjectGoboAnimatedProperties ret = (PlacedObjectGoboAnimatedProperties)((PlacedObjectGoboAnimatedPropertiesCommon)((IPlacedObjectGoboAnimatedPropertiesGetter)item).CommonInstance()!).GetNew();
            ((PlacedObjectGoboAnimatedPropertiesSetterTranslationCommon)((IPlacedObjectGoboAnimatedPropertiesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PlacedObjectGoboAnimatedProperties.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PlacedObjectGoboAnimatedProperties DeepCopy(
            IPlacedObjectGoboAnimatedPropertiesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PlacedObjectGoboAnimatedProperties ret = (PlacedObjectGoboAnimatedProperties)((PlacedObjectGoboAnimatedPropertiesCommon)((IPlacedObjectGoboAnimatedPropertiesGetter)item).CommonInstance()!).GetNew();
            ((PlacedObjectGoboAnimatedPropertiesSetterTranslationCommon)((IPlacedObjectGoboAnimatedPropertiesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class PlacedObjectGoboAnimatedProperties
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedObjectGoboAnimatedProperties_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => PlacedObjectGoboAnimatedProperties_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PlacedObjectGoboAnimatedPropertiesCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return PlacedObjectGoboAnimatedPropertiesSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PlacedObjectGoboAnimatedPropertiesSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPlacedObjectGoboAnimatedPropertiesGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IPlacedObjectGoboAnimatedPropertiesGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IPlacedObjectGoboAnimatedPropertiesGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class PlacedObjectGoboAnimatedPropertiesBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly PlacedObjectGoboAnimatedPropertiesBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IPlacedObjectGoboAnimatedPropertiesGetter item,
            MutagenWriter writer)
        {
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.StaticRotation);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AnimatedRotationSpeed);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AnimatedWaveRotationSpeed);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AnimatedWaveRotationAmount);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.StaticScaleU);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.StaticScaleV);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WaveScalingSpeedU);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WaveScalingSpeedV);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WaveScalingAmountU);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WaveScalingAmountV);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.StaticOffsetU);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.StaticOffsetV);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.RotationPivotU);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.RotationPivotV);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ScrollSpeedU);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ScrollSpeedV);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WaveScrollSpeedU);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WaveScrollSpeedV);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WaveScrollAmountU);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WaveScrollAmountV);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.RandomTimeOffsetRange);
            writer.Write(item.IsAnimated, length: 4);
        }

        public void Write(
            MutagenWriter writer,
            IPlacedObjectGoboAnimatedPropertiesGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.XLGD),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IPlacedObjectGoboAnimatedPropertiesGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class PlacedObjectGoboAnimatedPropertiesBinaryCreateTranslation
    {
        public static readonly PlacedObjectGoboAnimatedPropertiesBinaryCreateTranslation Instance = new PlacedObjectGoboAnimatedPropertiesBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IPlacedObjectGoboAnimatedProperties item,
            MutagenFrame frame)
        {
            item.StaticRotation = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.AnimatedRotationSpeed = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.AnimatedWaveRotationSpeed = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.AnimatedWaveRotationAmount = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.StaticScaleU = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.StaticScaleV = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WaveScalingSpeedU = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WaveScalingSpeedV = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WaveScalingAmountU = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WaveScalingAmountV = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.StaticOffsetU = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.StaticOffsetV = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.RotationPivotU = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.RotationPivotV = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ScrollSpeedU = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ScrollSpeedV = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WaveScrollSpeedU = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WaveScrollSpeedV = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WaveScrollAmountU = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WaveScrollAmountV = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.RandomTimeOffsetRange = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.IsAnimated = BooleanBinaryTranslation<MutagenFrame>.Instance.Parse(
                reader: frame,
                byteLength: 4,
                importantByteLength: 1);
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class PlacedObjectGoboAnimatedPropertiesBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IPlacedObjectGoboAnimatedPropertiesGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlacedObjectGoboAnimatedPropertiesBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class PlacedObjectGoboAnimatedPropertiesBinaryOverlay :
        PluginBinaryOverlay,
        IPlacedObjectGoboAnimatedPropertiesGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedObjectGoboAnimatedProperties_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => PlacedObjectGoboAnimatedProperties_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PlacedObjectGoboAnimatedPropertiesCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PlacedObjectGoboAnimatedPropertiesSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPlacedObjectGoboAnimatedPropertiesGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IPlacedObjectGoboAnimatedPropertiesGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IPlacedObjectGoboAnimatedPropertiesGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PlacedObjectGoboAnimatedPropertiesBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlacedObjectGoboAnimatedPropertiesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Single StaticRotation => _structData.Slice(0x0, 0x4).Float();
        public Single AnimatedRotationSpeed => _structData.Slice(0x4, 0x4).Float();
        public Single AnimatedWaveRotationSpeed => _structData.Slice(0x8, 0x4).Float();
        public Single AnimatedWaveRotationAmount => _structData.Slice(0xC, 0x4).Float();
        public Single StaticScaleU => _structData.Slice(0x10, 0x4).Float();
        public Single StaticScaleV => _structData.Slice(0x14, 0x4).Float();
        public Single WaveScalingSpeedU => _structData.Slice(0x18, 0x4).Float();
        public Single WaveScalingSpeedV => _structData.Slice(0x1C, 0x4).Float();
        public Single WaveScalingAmountU => _structData.Slice(0x20, 0x4).Float();
        public Single WaveScalingAmountV => _structData.Slice(0x24, 0x4).Float();
        public Single StaticOffsetU => _structData.Slice(0x28, 0x4).Float();
        public Single StaticOffsetV => _structData.Slice(0x2C, 0x4).Float();
        public Single RotationPivotU => _structData.Slice(0x30, 0x4).Float();
        public Single RotationPivotV => _structData.Slice(0x34, 0x4).Float();
        public Single ScrollSpeedU => _structData.Slice(0x38, 0x4).Float();
        public Single ScrollSpeedV => _structData.Slice(0x3C, 0x4).Float();
        public Single WaveScrollSpeedU => _structData.Slice(0x40, 0x4).Float();
        public Single WaveScrollSpeedV => _structData.Slice(0x44, 0x4).Float();
        public Single WaveScrollAmountU => _structData.Slice(0x48, 0x4).Float();
        public Single WaveScrollAmountV => _structData.Slice(0x4C, 0x4).Float();
        public Single RandomTimeOffsetRange => _structData.Slice(0x50, 0x4).Float();
        public Boolean IsAnimated => _structData.Slice(0x54, 0x4)[0] >= 1;
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PlacedObjectGoboAnimatedPropertiesBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IPlacedObjectGoboAnimatedPropertiesGetter PlacedObjectGoboAnimatedPropertiesFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x58,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new PlacedObjectGoboAnimatedPropertiesBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x58 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IPlacedObjectGoboAnimatedPropertiesGetter PlacedObjectGoboAnimatedPropertiesFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return PlacedObjectGoboAnimatedPropertiesFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlacedObjectGoboAnimatedPropertiesMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPlacedObjectGoboAnimatedPropertiesGetter rhs) return false;
            return ((PlacedObjectGoboAnimatedPropertiesCommon)((IPlacedObjectGoboAnimatedPropertiesGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlacedObjectGoboAnimatedPropertiesGetter? obj)
        {
            return ((PlacedObjectGoboAnimatedPropertiesCommon)((IPlacedObjectGoboAnimatedPropertiesGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlacedObjectGoboAnimatedPropertiesCommon)((IPlacedObjectGoboAnimatedPropertiesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

