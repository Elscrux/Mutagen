/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class NpcRDSA :
        IEquatable<INpcRDSAGetter>,
        ILoquiObjectSetter<NpcRDSA>,
        INpcRDSA
    {
        #region Ctor
        public NpcRDSA()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region UnknownInt
        public Int32 UnknownInt { get; set; } = default(Int32);
        #endregion
        #region UnknownInt2
        public Int32 UnknownInt2 { get; set; } = default(Int32);
        #endregion
        #region UnknownLink1
        private readonly IFormLink<IStarfieldMajorRecordGetter> _UnknownLink1 = new FormLink<IStarfieldMajorRecordGetter>();
        public IFormLink<IStarfieldMajorRecordGetter> UnknownLink1
        {
            get => _UnknownLink1;
            set => _UnknownLink1.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IStarfieldMajorRecordGetter> INpcRDSAGetter.UnknownLink1 => this.UnknownLink1;
        #endregion
        #region UnknownInt3
        public Int32 UnknownInt3 { get; set; } = default(Int32);
        #endregion
        #region UnknownLink2
        private readonly IFormLink<IStarfieldMajorRecordGetter> _UnknownLink2 = new FormLink<IStarfieldMajorRecordGetter>();
        public IFormLink<IStarfieldMajorRecordGetter> UnknownLink2
        {
            get => _UnknownLink2;
            set => _UnknownLink2.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IStarfieldMajorRecordGetter> INpcRDSAGetter.UnknownLink2 => this.UnknownLink2;
        #endregion
        #region UnknownLink3
        private readonly IFormLink<IStarfieldMajorRecordGetter> _UnknownLink3 = new FormLink<IStarfieldMajorRecordGetter>();
        public IFormLink<IStarfieldMajorRecordGetter> UnknownLink3
        {
            get => _UnknownLink3;
            set => _UnknownLink3.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IStarfieldMajorRecordGetter> INpcRDSAGetter.UnknownLink3 => this.UnknownLink3;
        #endregion
        #region UnknownLink4
        private readonly IFormLink<IStarfieldMajorRecordGetter> _UnknownLink4 = new FormLink<IStarfieldMajorRecordGetter>();
        public IFormLink<IStarfieldMajorRecordGetter> UnknownLink4
        {
            get => _UnknownLink4;
            set => _UnknownLink4.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IStarfieldMajorRecordGetter> INpcRDSAGetter.UnknownLink4 => this.UnknownLink4;
        #endregion
        #region UnknownLink5
        private readonly IFormLink<IStarfieldMajorRecordGetter> _UnknownLink5 = new FormLink<IStarfieldMajorRecordGetter>();
        public IFormLink<IStarfieldMajorRecordGetter> UnknownLink5
        {
            get => _UnknownLink5;
            set => _UnknownLink5.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IStarfieldMajorRecordGetter> INpcRDSAGetter.UnknownLink5 => this.UnknownLink5;
        #endregion
        #region UnknownLink6
        private readonly IFormLink<IStarfieldMajorRecordGetter> _UnknownLink6 = new FormLink<IStarfieldMajorRecordGetter>();
        public IFormLink<IStarfieldMajorRecordGetter> UnknownLink6
        {
            get => _UnknownLink6;
            set => _UnknownLink6.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IStarfieldMajorRecordGetter> INpcRDSAGetter.UnknownLink6 => this.UnknownLink6;
        #endregion
        #region UnknownFloat1
        public Single UnknownFloat1 { get; set; } = default(Single);
        #endregion
        #region UnknownFloat2
        public Single UnknownFloat2 { get; set; } = default(Single);
        #endregion
        #region UnknownFloat3
        public Single UnknownFloat3 { get; set; } = default(Single);
        #endregion
        #region UnknownFloat4
        public Single UnknownFloat4 { get; set; } = default(Single);
        #endregion
        #region UnknownFloat5
        public Single UnknownFloat5 { get; set; } = default(Single);
        #endregion
        #region UnknownLink7
        private readonly IFormLink<IStarfieldMajorRecordGetter> _UnknownLink7 = new FormLink<IStarfieldMajorRecordGetter>();
        public IFormLink<IStarfieldMajorRecordGetter> UnknownLink7
        {
            get => _UnknownLink7;
            set => _UnknownLink7.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IStarfieldMajorRecordGetter> INpcRDSAGetter.UnknownLink7 => this.UnknownLink7;
        #endregion
        #region UnknownInt4
        public Int32 UnknownInt4 { get; set; } = default(Int32);
        #endregion
        #region UnknownLink8
        private readonly IFormLink<IStarfieldMajorRecordGetter> _UnknownLink8 = new FormLink<IStarfieldMajorRecordGetter>();
        public IFormLink<IStarfieldMajorRecordGetter> UnknownLink8
        {
            get => _UnknownLink8;
            set => _UnknownLink8.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IStarfieldMajorRecordGetter> INpcRDSAGetter.UnknownLink8 => this.UnknownLink8;
        #endregion
        #region UnknownFloat6
        public Single UnknownFloat6 { get; set; } = default(Single);
        #endregion
        #region UnknownInt5
        public Int32 UnknownInt5 { get; set; } = default(Int32);
        #endregion
        #region UnknownLink9
        private readonly IFormLink<IStarfieldMajorRecordGetter> _UnknownLink9 = new FormLink<IStarfieldMajorRecordGetter>();
        public IFormLink<IStarfieldMajorRecordGetter> UnknownLink9
        {
            get => _UnknownLink9;
            set => _UnknownLink9.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IStarfieldMajorRecordGetter> INpcRDSAGetter.UnknownLink9 => this.UnknownLink9;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NpcRDSAMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INpcRDSAGetter rhs) return false;
            return ((NpcRDSACommon)((INpcRDSAGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INpcRDSAGetter? obj)
        {
            return ((NpcRDSACommon)((INpcRDSAGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NpcRDSACommon)((INpcRDSAGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.UnknownInt = initialValue;
                this.UnknownInt2 = initialValue;
                this.UnknownLink1 = initialValue;
                this.UnknownInt3 = initialValue;
                this.UnknownLink2 = initialValue;
                this.UnknownLink3 = initialValue;
                this.UnknownLink4 = initialValue;
                this.UnknownLink5 = initialValue;
                this.UnknownLink6 = initialValue;
                this.UnknownFloat1 = initialValue;
                this.UnknownFloat2 = initialValue;
                this.UnknownFloat3 = initialValue;
                this.UnknownFloat4 = initialValue;
                this.UnknownFloat5 = initialValue;
                this.UnknownLink7 = initialValue;
                this.UnknownInt4 = initialValue;
                this.UnknownLink8 = initialValue;
                this.UnknownFloat6 = initialValue;
                this.UnknownInt5 = initialValue;
                this.UnknownLink9 = initialValue;
            }

            public Mask(
                TItem UnknownInt,
                TItem UnknownInt2,
                TItem UnknownLink1,
                TItem UnknownInt3,
                TItem UnknownLink2,
                TItem UnknownLink3,
                TItem UnknownLink4,
                TItem UnknownLink5,
                TItem UnknownLink6,
                TItem UnknownFloat1,
                TItem UnknownFloat2,
                TItem UnknownFloat3,
                TItem UnknownFloat4,
                TItem UnknownFloat5,
                TItem UnknownLink7,
                TItem UnknownInt4,
                TItem UnknownLink8,
                TItem UnknownFloat6,
                TItem UnknownInt5,
                TItem UnknownLink9)
            {
                this.UnknownInt = UnknownInt;
                this.UnknownInt2 = UnknownInt2;
                this.UnknownLink1 = UnknownLink1;
                this.UnknownInt3 = UnknownInt3;
                this.UnknownLink2 = UnknownLink2;
                this.UnknownLink3 = UnknownLink3;
                this.UnknownLink4 = UnknownLink4;
                this.UnknownLink5 = UnknownLink5;
                this.UnknownLink6 = UnknownLink6;
                this.UnknownFloat1 = UnknownFloat1;
                this.UnknownFloat2 = UnknownFloat2;
                this.UnknownFloat3 = UnknownFloat3;
                this.UnknownFloat4 = UnknownFloat4;
                this.UnknownFloat5 = UnknownFloat5;
                this.UnknownLink7 = UnknownLink7;
                this.UnknownInt4 = UnknownInt4;
                this.UnknownLink8 = UnknownLink8;
                this.UnknownFloat6 = UnknownFloat6;
                this.UnknownInt5 = UnknownInt5;
                this.UnknownLink9 = UnknownLink9;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem UnknownInt;
            public TItem UnknownInt2;
            public TItem UnknownLink1;
            public TItem UnknownInt3;
            public TItem UnknownLink2;
            public TItem UnknownLink3;
            public TItem UnknownLink4;
            public TItem UnknownLink5;
            public TItem UnknownLink6;
            public TItem UnknownFloat1;
            public TItem UnknownFloat2;
            public TItem UnknownFloat3;
            public TItem UnknownFloat4;
            public TItem UnknownFloat5;
            public TItem UnknownLink7;
            public TItem UnknownInt4;
            public TItem UnknownLink8;
            public TItem UnknownFloat6;
            public TItem UnknownInt5;
            public TItem UnknownLink9;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.UnknownInt, rhs.UnknownInt)) return false;
                if (!object.Equals(this.UnknownInt2, rhs.UnknownInt2)) return false;
                if (!object.Equals(this.UnknownLink1, rhs.UnknownLink1)) return false;
                if (!object.Equals(this.UnknownInt3, rhs.UnknownInt3)) return false;
                if (!object.Equals(this.UnknownLink2, rhs.UnknownLink2)) return false;
                if (!object.Equals(this.UnknownLink3, rhs.UnknownLink3)) return false;
                if (!object.Equals(this.UnknownLink4, rhs.UnknownLink4)) return false;
                if (!object.Equals(this.UnknownLink5, rhs.UnknownLink5)) return false;
                if (!object.Equals(this.UnknownLink6, rhs.UnknownLink6)) return false;
                if (!object.Equals(this.UnknownFloat1, rhs.UnknownFloat1)) return false;
                if (!object.Equals(this.UnknownFloat2, rhs.UnknownFloat2)) return false;
                if (!object.Equals(this.UnknownFloat3, rhs.UnknownFloat3)) return false;
                if (!object.Equals(this.UnknownFloat4, rhs.UnknownFloat4)) return false;
                if (!object.Equals(this.UnknownFloat5, rhs.UnknownFloat5)) return false;
                if (!object.Equals(this.UnknownLink7, rhs.UnknownLink7)) return false;
                if (!object.Equals(this.UnknownInt4, rhs.UnknownInt4)) return false;
                if (!object.Equals(this.UnknownLink8, rhs.UnknownLink8)) return false;
                if (!object.Equals(this.UnknownFloat6, rhs.UnknownFloat6)) return false;
                if (!object.Equals(this.UnknownInt5, rhs.UnknownInt5)) return false;
                if (!object.Equals(this.UnknownLink9, rhs.UnknownLink9)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.UnknownInt);
                hash.Add(this.UnknownInt2);
                hash.Add(this.UnknownLink1);
                hash.Add(this.UnknownInt3);
                hash.Add(this.UnknownLink2);
                hash.Add(this.UnknownLink3);
                hash.Add(this.UnknownLink4);
                hash.Add(this.UnknownLink5);
                hash.Add(this.UnknownLink6);
                hash.Add(this.UnknownFloat1);
                hash.Add(this.UnknownFloat2);
                hash.Add(this.UnknownFloat3);
                hash.Add(this.UnknownFloat4);
                hash.Add(this.UnknownFloat5);
                hash.Add(this.UnknownLink7);
                hash.Add(this.UnknownInt4);
                hash.Add(this.UnknownLink8);
                hash.Add(this.UnknownFloat6);
                hash.Add(this.UnknownInt5);
                hash.Add(this.UnknownLink9);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.UnknownInt)) return false;
                if (!eval(this.UnknownInt2)) return false;
                if (!eval(this.UnknownLink1)) return false;
                if (!eval(this.UnknownInt3)) return false;
                if (!eval(this.UnknownLink2)) return false;
                if (!eval(this.UnknownLink3)) return false;
                if (!eval(this.UnknownLink4)) return false;
                if (!eval(this.UnknownLink5)) return false;
                if (!eval(this.UnknownLink6)) return false;
                if (!eval(this.UnknownFloat1)) return false;
                if (!eval(this.UnknownFloat2)) return false;
                if (!eval(this.UnknownFloat3)) return false;
                if (!eval(this.UnknownFloat4)) return false;
                if (!eval(this.UnknownFloat5)) return false;
                if (!eval(this.UnknownLink7)) return false;
                if (!eval(this.UnknownInt4)) return false;
                if (!eval(this.UnknownLink8)) return false;
                if (!eval(this.UnknownFloat6)) return false;
                if (!eval(this.UnknownInt5)) return false;
                if (!eval(this.UnknownLink9)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.UnknownInt)) return true;
                if (eval(this.UnknownInt2)) return true;
                if (eval(this.UnknownLink1)) return true;
                if (eval(this.UnknownInt3)) return true;
                if (eval(this.UnknownLink2)) return true;
                if (eval(this.UnknownLink3)) return true;
                if (eval(this.UnknownLink4)) return true;
                if (eval(this.UnknownLink5)) return true;
                if (eval(this.UnknownLink6)) return true;
                if (eval(this.UnknownFloat1)) return true;
                if (eval(this.UnknownFloat2)) return true;
                if (eval(this.UnknownFloat3)) return true;
                if (eval(this.UnknownFloat4)) return true;
                if (eval(this.UnknownFloat5)) return true;
                if (eval(this.UnknownLink7)) return true;
                if (eval(this.UnknownInt4)) return true;
                if (eval(this.UnknownLink8)) return true;
                if (eval(this.UnknownFloat6)) return true;
                if (eval(this.UnknownInt5)) return true;
                if (eval(this.UnknownLink9)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new NpcRDSA.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.UnknownInt = eval(this.UnknownInt);
                obj.UnknownInt2 = eval(this.UnknownInt2);
                obj.UnknownLink1 = eval(this.UnknownLink1);
                obj.UnknownInt3 = eval(this.UnknownInt3);
                obj.UnknownLink2 = eval(this.UnknownLink2);
                obj.UnknownLink3 = eval(this.UnknownLink3);
                obj.UnknownLink4 = eval(this.UnknownLink4);
                obj.UnknownLink5 = eval(this.UnknownLink5);
                obj.UnknownLink6 = eval(this.UnknownLink6);
                obj.UnknownFloat1 = eval(this.UnknownFloat1);
                obj.UnknownFloat2 = eval(this.UnknownFloat2);
                obj.UnknownFloat3 = eval(this.UnknownFloat3);
                obj.UnknownFloat4 = eval(this.UnknownFloat4);
                obj.UnknownFloat5 = eval(this.UnknownFloat5);
                obj.UnknownLink7 = eval(this.UnknownLink7);
                obj.UnknownInt4 = eval(this.UnknownInt4);
                obj.UnknownLink8 = eval(this.UnknownLink8);
                obj.UnknownFloat6 = eval(this.UnknownFloat6);
                obj.UnknownInt5 = eval(this.UnknownInt5);
                obj.UnknownLink9 = eval(this.UnknownLink9);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(NpcRDSA.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, NpcRDSA.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(NpcRDSA.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.UnknownInt ?? true)
                    {
                        sb.AppendItem(UnknownInt, "UnknownInt");
                    }
                    if (printMask?.UnknownInt2 ?? true)
                    {
                        sb.AppendItem(UnknownInt2, "UnknownInt2");
                    }
                    if (printMask?.UnknownLink1 ?? true)
                    {
                        sb.AppendItem(UnknownLink1, "UnknownLink1");
                    }
                    if (printMask?.UnknownInt3 ?? true)
                    {
                        sb.AppendItem(UnknownInt3, "UnknownInt3");
                    }
                    if (printMask?.UnknownLink2 ?? true)
                    {
                        sb.AppendItem(UnknownLink2, "UnknownLink2");
                    }
                    if (printMask?.UnknownLink3 ?? true)
                    {
                        sb.AppendItem(UnknownLink3, "UnknownLink3");
                    }
                    if (printMask?.UnknownLink4 ?? true)
                    {
                        sb.AppendItem(UnknownLink4, "UnknownLink4");
                    }
                    if (printMask?.UnknownLink5 ?? true)
                    {
                        sb.AppendItem(UnknownLink5, "UnknownLink5");
                    }
                    if (printMask?.UnknownLink6 ?? true)
                    {
                        sb.AppendItem(UnknownLink6, "UnknownLink6");
                    }
                    if (printMask?.UnknownFloat1 ?? true)
                    {
                        sb.AppendItem(UnknownFloat1, "UnknownFloat1");
                    }
                    if (printMask?.UnknownFloat2 ?? true)
                    {
                        sb.AppendItem(UnknownFloat2, "UnknownFloat2");
                    }
                    if (printMask?.UnknownFloat3 ?? true)
                    {
                        sb.AppendItem(UnknownFloat3, "UnknownFloat3");
                    }
                    if (printMask?.UnknownFloat4 ?? true)
                    {
                        sb.AppendItem(UnknownFloat4, "UnknownFloat4");
                    }
                    if (printMask?.UnknownFloat5 ?? true)
                    {
                        sb.AppendItem(UnknownFloat5, "UnknownFloat5");
                    }
                    if (printMask?.UnknownLink7 ?? true)
                    {
                        sb.AppendItem(UnknownLink7, "UnknownLink7");
                    }
                    if (printMask?.UnknownInt4 ?? true)
                    {
                        sb.AppendItem(UnknownInt4, "UnknownInt4");
                    }
                    if (printMask?.UnknownLink8 ?? true)
                    {
                        sb.AppendItem(UnknownLink8, "UnknownLink8");
                    }
                    if (printMask?.UnknownFloat6 ?? true)
                    {
                        sb.AppendItem(UnknownFloat6, "UnknownFloat6");
                    }
                    if (printMask?.UnknownInt5 ?? true)
                    {
                        sb.AppendItem(UnknownInt5, "UnknownInt5");
                    }
                    if (printMask?.UnknownLink9 ?? true)
                    {
                        sb.AppendItem(UnknownLink9, "UnknownLink9");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? UnknownInt;
            public Exception? UnknownInt2;
            public Exception? UnknownLink1;
            public Exception? UnknownInt3;
            public Exception? UnknownLink2;
            public Exception? UnknownLink3;
            public Exception? UnknownLink4;
            public Exception? UnknownLink5;
            public Exception? UnknownLink6;
            public Exception? UnknownFloat1;
            public Exception? UnknownFloat2;
            public Exception? UnknownFloat3;
            public Exception? UnknownFloat4;
            public Exception? UnknownFloat5;
            public Exception? UnknownLink7;
            public Exception? UnknownInt4;
            public Exception? UnknownLink8;
            public Exception? UnknownFloat6;
            public Exception? UnknownInt5;
            public Exception? UnknownLink9;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                NpcRDSA_FieldIndex enu = (NpcRDSA_FieldIndex)index;
                switch (enu)
                {
                    case NpcRDSA_FieldIndex.UnknownInt:
                        return UnknownInt;
                    case NpcRDSA_FieldIndex.UnknownInt2:
                        return UnknownInt2;
                    case NpcRDSA_FieldIndex.UnknownLink1:
                        return UnknownLink1;
                    case NpcRDSA_FieldIndex.UnknownInt3:
                        return UnknownInt3;
                    case NpcRDSA_FieldIndex.UnknownLink2:
                        return UnknownLink2;
                    case NpcRDSA_FieldIndex.UnknownLink3:
                        return UnknownLink3;
                    case NpcRDSA_FieldIndex.UnknownLink4:
                        return UnknownLink4;
                    case NpcRDSA_FieldIndex.UnknownLink5:
                        return UnknownLink5;
                    case NpcRDSA_FieldIndex.UnknownLink6:
                        return UnknownLink6;
                    case NpcRDSA_FieldIndex.UnknownFloat1:
                        return UnknownFloat1;
                    case NpcRDSA_FieldIndex.UnknownFloat2:
                        return UnknownFloat2;
                    case NpcRDSA_FieldIndex.UnknownFloat3:
                        return UnknownFloat3;
                    case NpcRDSA_FieldIndex.UnknownFloat4:
                        return UnknownFloat4;
                    case NpcRDSA_FieldIndex.UnknownFloat5:
                        return UnknownFloat5;
                    case NpcRDSA_FieldIndex.UnknownLink7:
                        return UnknownLink7;
                    case NpcRDSA_FieldIndex.UnknownInt4:
                        return UnknownInt4;
                    case NpcRDSA_FieldIndex.UnknownLink8:
                        return UnknownLink8;
                    case NpcRDSA_FieldIndex.UnknownFloat6:
                        return UnknownFloat6;
                    case NpcRDSA_FieldIndex.UnknownInt5:
                        return UnknownInt5;
                    case NpcRDSA_FieldIndex.UnknownLink9:
                        return UnknownLink9;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                NpcRDSA_FieldIndex enu = (NpcRDSA_FieldIndex)index;
                switch (enu)
                {
                    case NpcRDSA_FieldIndex.UnknownInt:
                        this.UnknownInt = ex;
                        break;
                    case NpcRDSA_FieldIndex.UnknownInt2:
                        this.UnknownInt2 = ex;
                        break;
                    case NpcRDSA_FieldIndex.UnknownLink1:
                        this.UnknownLink1 = ex;
                        break;
                    case NpcRDSA_FieldIndex.UnknownInt3:
                        this.UnknownInt3 = ex;
                        break;
                    case NpcRDSA_FieldIndex.UnknownLink2:
                        this.UnknownLink2 = ex;
                        break;
                    case NpcRDSA_FieldIndex.UnknownLink3:
                        this.UnknownLink3 = ex;
                        break;
                    case NpcRDSA_FieldIndex.UnknownLink4:
                        this.UnknownLink4 = ex;
                        break;
                    case NpcRDSA_FieldIndex.UnknownLink5:
                        this.UnknownLink5 = ex;
                        break;
                    case NpcRDSA_FieldIndex.UnknownLink6:
                        this.UnknownLink6 = ex;
                        break;
                    case NpcRDSA_FieldIndex.UnknownFloat1:
                        this.UnknownFloat1 = ex;
                        break;
                    case NpcRDSA_FieldIndex.UnknownFloat2:
                        this.UnknownFloat2 = ex;
                        break;
                    case NpcRDSA_FieldIndex.UnknownFloat3:
                        this.UnknownFloat3 = ex;
                        break;
                    case NpcRDSA_FieldIndex.UnknownFloat4:
                        this.UnknownFloat4 = ex;
                        break;
                    case NpcRDSA_FieldIndex.UnknownFloat5:
                        this.UnknownFloat5 = ex;
                        break;
                    case NpcRDSA_FieldIndex.UnknownLink7:
                        this.UnknownLink7 = ex;
                        break;
                    case NpcRDSA_FieldIndex.UnknownInt4:
                        this.UnknownInt4 = ex;
                        break;
                    case NpcRDSA_FieldIndex.UnknownLink8:
                        this.UnknownLink8 = ex;
                        break;
                    case NpcRDSA_FieldIndex.UnknownFloat6:
                        this.UnknownFloat6 = ex;
                        break;
                    case NpcRDSA_FieldIndex.UnknownInt5:
                        this.UnknownInt5 = ex;
                        break;
                    case NpcRDSA_FieldIndex.UnknownLink9:
                        this.UnknownLink9 = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                NpcRDSA_FieldIndex enu = (NpcRDSA_FieldIndex)index;
                switch (enu)
                {
                    case NpcRDSA_FieldIndex.UnknownInt:
                        this.UnknownInt = (Exception?)obj;
                        break;
                    case NpcRDSA_FieldIndex.UnknownInt2:
                        this.UnknownInt2 = (Exception?)obj;
                        break;
                    case NpcRDSA_FieldIndex.UnknownLink1:
                        this.UnknownLink1 = (Exception?)obj;
                        break;
                    case NpcRDSA_FieldIndex.UnknownInt3:
                        this.UnknownInt3 = (Exception?)obj;
                        break;
                    case NpcRDSA_FieldIndex.UnknownLink2:
                        this.UnknownLink2 = (Exception?)obj;
                        break;
                    case NpcRDSA_FieldIndex.UnknownLink3:
                        this.UnknownLink3 = (Exception?)obj;
                        break;
                    case NpcRDSA_FieldIndex.UnknownLink4:
                        this.UnknownLink4 = (Exception?)obj;
                        break;
                    case NpcRDSA_FieldIndex.UnknownLink5:
                        this.UnknownLink5 = (Exception?)obj;
                        break;
                    case NpcRDSA_FieldIndex.UnknownLink6:
                        this.UnknownLink6 = (Exception?)obj;
                        break;
                    case NpcRDSA_FieldIndex.UnknownFloat1:
                        this.UnknownFloat1 = (Exception?)obj;
                        break;
                    case NpcRDSA_FieldIndex.UnknownFloat2:
                        this.UnknownFloat2 = (Exception?)obj;
                        break;
                    case NpcRDSA_FieldIndex.UnknownFloat3:
                        this.UnknownFloat3 = (Exception?)obj;
                        break;
                    case NpcRDSA_FieldIndex.UnknownFloat4:
                        this.UnknownFloat4 = (Exception?)obj;
                        break;
                    case NpcRDSA_FieldIndex.UnknownFloat5:
                        this.UnknownFloat5 = (Exception?)obj;
                        break;
                    case NpcRDSA_FieldIndex.UnknownLink7:
                        this.UnknownLink7 = (Exception?)obj;
                        break;
                    case NpcRDSA_FieldIndex.UnknownInt4:
                        this.UnknownInt4 = (Exception?)obj;
                        break;
                    case NpcRDSA_FieldIndex.UnknownLink8:
                        this.UnknownLink8 = (Exception?)obj;
                        break;
                    case NpcRDSA_FieldIndex.UnknownFloat6:
                        this.UnknownFloat6 = (Exception?)obj;
                        break;
                    case NpcRDSA_FieldIndex.UnknownInt5:
                        this.UnknownInt5 = (Exception?)obj;
                        break;
                    case NpcRDSA_FieldIndex.UnknownLink9:
                        this.UnknownLink9 = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (UnknownInt != null) return true;
                if (UnknownInt2 != null) return true;
                if (UnknownLink1 != null) return true;
                if (UnknownInt3 != null) return true;
                if (UnknownLink2 != null) return true;
                if (UnknownLink3 != null) return true;
                if (UnknownLink4 != null) return true;
                if (UnknownLink5 != null) return true;
                if (UnknownLink6 != null) return true;
                if (UnknownFloat1 != null) return true;
                if (UnknownFloat2 != null) return true;
                if (UnknownFloat3 != null) return true;
                if (UnknownFloat4 != null) return true;
                if (UnknownFloat5 != null) return true;
                if (UnknownLink7 != null) return true;
                if (UnknownInt4 != null) return true;
                if (UnknownLink8 != null) return true;
                if (UnknownFloat6 != null) return true;
                if (UnknownInt5 != null) return true;
                if (UnknownLink9 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(UnknownInt, "UnknownInt");
                }
                {
                    sb.AppendItem(UnknownInt2, "UnknownInt2");
                }
                {
                    sb.AppendItem(UnknownLink1, "UnknownLink1");
                }
                {
                    sb.AppendItem(UnknownInt3, "UnknownInt3");
                }
                {
                    sb.AppendItem(UnknownLink2, "UnknownLink2");
                }
                {
                    sb.AppendItem(UnknownLink3, "UnknownLink3");
                }
                {
                    sb.AppendItem(UnknownLink4, "UnknownLink4");
                }
                {
                    sb.AppendItem(UnknownLink5, "UnknownLink5");
                }
                {
                    sb.AppendItem(UnknownLink6, "UnknownLink6");
                }
                {
                    sb.AppendItem(UnknownFloat1, "UnknownFloat1");
                }
                {
                    sb.AppendItem(UnknownFloat2, "UnknownFloat2");
                }
                {
                    sb.AppendItem(UnknownFloat3, "UnknownFloat3");
                }
                {
                    sb.AppendItem(UnknownFloat4, "UnknownFloat4");
                }
                {
                    sb.AppendItem(UnknownFloat5, "UnknownFloat5");
                }
                {
                    sb.AppendItem(UnknownLink7, "UnknownLink7");
                }
                {
                    sb.AppendItem(UnknownInt4, "UnknownInt4");
                }
                {
                    sb.AppendItem(UnknownLink8, "UnknownLink8");
                }
                {
                    sb.AppendItem(UnknownFloat6, "UnknownFloat6");
                }
                {
                    sb.AppendItem(UnknownInt5, "UnknownInt5");
                }
                {
                    sb.AppendItem(UnknownLink9, "UnknownLink9");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.UnknownInt = this.UnknownInt.Combine(rhs.UnknownInt);
                ret.UnknownInt2 = this.UnknownInt2.Combine(rhs.UnknownInt2);
                ret.UnknownLink1 = this.UnknownLink1.Combine(rhs.UnknownLink1);
                ret.UnknownInt3 = this.UnknownInt3.Combine(rhs.UnknownInt3);
                ret.UnknownLink2 = this.UnknownLink2.Combine(rhs.UnknownLink2);
                ret.UnknownLink3 = this.UnknownLink3.Combine(rhs.UnknownLink3);
                ret.UnknownLink4 = this.UnknownLink4.Combine(rhs.UnknownLink4);
                ret.UnknownLink5 = this.UnknownLink5.Combine(rhs.UnknownLink5);
                ret.UnknownLink6 = this.UnknownLink6.Combine(rhs.UnknownLink6);
                ret.UnknownFloat1 = this.UnknownFloat1.Combine(rhs.UnknownFloat1);
                ret.UnknownFloat2 = this.UnknownFloat2.Combine(rhs.UnknownFloat2);
                ret.UnknownFloat3 = this.UnknownFloat3.Combine(rhs.UnknownFloat3);
                ret.UnknownFloat4 = this.UnknownFloat4.Combine(rhs.UnknownFloat4);
                ret.UnknownFloat5 = this.UnknownFloat5.Combine(rhs.UnknownFloat5);
                ret.UnknownLink7 = this.UnknownLink7.Combine(rhs.UnknownLink7);
                ret.UnknownInt4 = this.UnknownInt4.Combine(rhs.UnknownInt4);
                ret.UnknownLink8 = this.UnknownLink8.Combine(rhs.UnknownLink8);
                ret.UnknownFloat6 = this.UnknownFloat6.Combine(rhs.UnknownFloat6);
                ret.UnknownInt5 = this.UnknownInt5.Combine(rhs.UnknownInt5);
                ret.UnknownLink9 = this.UnknownLink9.Combine(rhs.UnknownLink9);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool UnknownInt;
            public bool UnknownInt2;
            public bool UnknownLink1;
            public bool UnknownInt3;
            public bool UnknownLink2;
            public bool UnknownLink3;
            public bool UnknownLink4;
            public bool UnknownLink5;
            public bool UnknownLink6;
            public bool UnknownFloat1;
            public bool UnknownFloat2;
            public bool UnknownFloat3;
            public bool UnknownFloat4;
            public bool UnknownFloat5;
            public bool UnknownLink7;
            public bool UnknownInt4;
            public bool UnknownLink8;
            public bool UnknownFloat6;
            public bool UnknownInt5;
            public bool UnknownLink9;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.UnknownInt = defaultOn;
                this.UnknownInt2 = defaultOn;
                this.UnknownLink1 = defaultOn;
                this.UnknownInt3 = defaultOn;
                this.UnknownLink2 = defaultOn;
                this.UnknownLink3 = defaultOn;
                this.UnknownLink4 = defaultOn;
                this.UnknownLink5 = defaultOn;
                this.UnknownLink6 = defaultOn;
                this.UnknownFloat1 = defaultOn;
                this.UnknownFloat2 = defaultOn;
                this.UnknownFloat3 = defaultOn;
                this.UnknownFloat4 = defaultOn;
                this.UnknownFloat5 = defaultOn;
                this.UnknownLink7 = defaultOn;
                this.UnknownInt4 = defaultOn;
                this.UnknownLink8 = defaultOn;
                this.UnknownFloat6 = defaultOn;
                this.UnknownInt5 = defaultOn;
                this.UnknownLink9 = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((UnknownInt, null));
                ret.Add((UnknownInt2, null));
                ret.Add((UnknownLink1, null));
                ret.Add((UnknownInt3, null));
                ret.Add((UnknownLink2, null));
                ret.Add((UnknownLink3, null));
                ret.Add((UnknownLink4, null));
                ret.Add((UnknownLink5, null));
                ret.Add((UnknownLink6, null));
                ret.Add((UnknownFloat1, null));
                ret.Add((UnknownFloat2, null));
                ret.Add((UnknownFloat3, null));
                ret.Add((UnknownFloat4, null));
                ret.Add((UnknownFloat5, null));
                ret.Add((UnknownLink7, null));
                ret.Add((UnknownInt4, null));
                ret.Add((UnknownLink8, null));
                ret.Add((UnknownFloat6, null));
                ret.Add((UnknownInt5, null));
                ret.Add((UnknownLink9, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => NpcRDSACommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => NpcRDSASetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NpcRDSABinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcRDSABinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static NpcRDSA CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new NpcRDSA();
            ((NpcRDSASetterCommon)((INpcRDSAGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out NpcRDSA item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((NpcRDSASetterCommon)((INpcRDSAGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static NpcRDSA GetNew()
        {
            return new NpcRDSA();
        }

    }
    #endregion

    #region Interface
    public partial interface INpcRDSA :
        IFormLinkContainer,
        ILoquiObjectSetter<INpcRDSA>,
        INpcRDSAGetter
    {
        new Int32 UnknownInt { get; set; }
        new Int32 UnknownInt2 { get; set; }
        new IFormLink<IStarfieldMajorRecordGetter> UnknownLink1 { get; set; }
        new Int32 UnknownInt3 { get; set; }
        new IFormLink<IStarfieldMajorRecordGetter> UnknownLink2 { get; set; }
        new IFormLink<IStarfieldMajorRecordGetter> UnknownLink3 { get; set; }
        new IFormLink<IStarfieldMajorRecordGetter> UnknownLink4 { get; set; }
        new IFormLink<IStarfieldMajorRecordGetter> UnknownLink5 { get; set; }
        new IFormLink<IStarfieldMajorRecordGetter> UnknownLink6 { get; set; }
        new Single UnknownFloat1 { get; set; }
        new Single UnknownFloat2 { get; set; }
        new Single UnknownFloat3 { get; set; }
        new Single UnknownFloat4 { get; set; }
        new Single UnknownFloat5 { get; set; }
        new IFormLink<IStarfieldMajorRecordGetter> UnknownLink7 { get; set; }
        new Int32 UnknownInt4 { get; set; }
        new IFormLink<IStarfieldMajorRecordGetter> UnknownLink8 { get; set; }
        new Single UnknownFloat6 { get; set; }
        new Int32 UnknownInt5 { get; set; }
        new IFormLink<IStarfieldMajorRecordGetter> UnknownLink9 { get; set; }
    }

    public partial interface INpcRDSAGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<INpcRDSAGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => NpcRDSA_Registration.Instance;
        Int32 UnknownInt { get; }
        Int32 UnknownInt2 { get; }
        IFormLinkGetter<IStarfieldMajorRecordGetter> UnknownLink1 { get; }
        Int32 UnknownInt3 { get; }
        IFormLinkGetter<IStarfieldMajorRecordGetter> UnknownLink2 { get; }
        IFormLinkGetter<IStarfieldMajorRecordGetter> UnknownLink3 { get; }
        IFormLinkGetter<IStarfieldMajorRecordGetter> UnknownLink4 { get; }
        IFormLinkGetter<IStarfieldMajorRecordGetter> UnknownLink5 { get; }
        IFormLinkGetter<IStarfieldMajorRecordGetter> UnknownLink6 { get; }
        Single UnknownFloat1 { get; }
        Single UnknownFloat2 { get; }
        Single UnknownFloat3 { get; }
        Single UnknownFloat4 { get; }
        Single UnknownFloat5 { get; }
        IFormLinkGetter<IStarfieldMajorRecordGetter> UnknownLink7 { get; }
        Int32 UnknownInt4 { get; }
        IFormLinkGetter<IStarfieldMajorRecordGetter> UnknownLink8 { get; }
        Single UnknownFloat6 { get; }
        Int32 UnknownInt5 { get; }
        IFormLinkGetter<IStarfieldMajorRecordGetter> UnknownLink9 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class NpcRDSAMixIn
    {
        public static void Clear(this INpcRDSA item)
        {
            ((NpcRDSASetterCommon)((INpcRDSAGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static NpcRDSA.Mask<bool> GetEqualsMask(
            this INpcRDSAGetter item,
            INpcRDSAGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NpcRDSACommon)((INpcRDSAGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this INpcRDSAGetter item,
            string? name = null,
            NpcRDSA.Mask<bool>? printMask = null)
        {
            return ((NpcRDSACommon)((INpcRDSAGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this INpcRDSAGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NpcRDSA.Mask<bool>? printMask = null)
        {
            ((NpcRDSACommon)((INpcRDSAGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INpcRDSAGetter item,
            INpcRDSAGetter rhs,
            NpcRDSA.TranslationMask? equalsMask = null)
        {
            return ((NpcRDSACommon)((INpcRDSAGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this INpcRDSA lhs,
            INpcRDSAGetter rhs)
        {
            ((NpcRDSASetterTranslationCommon)((INpcRDSAGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INpcRDSA lhs,
            INpcRDSAGetter rhs,
            NpcRDSA.TranslationMask? copyMask = null)
        {
            ((NpcRDSASetterTranslationCommon)((INpcRDSAGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INpcRDSA lhs,
            INpcRDSAGetter rhs,
            out NpcRDSA.ErrorMask errorMask,
            NpcRDSA.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NpcRDSASetterTranslationCommon)((INpcRDSAGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = NpcRDSA.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INpcRDSA lhs,
            INpcRDSAGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NpcRDSASetterTranslationCommon)((INpcRDSAGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static NpcRDSA DeepCopy(
            this INpcRDSAGetter item,
            NpcRDSA.TranslationMask? copyMask = null)
        {
            return ((NpcRDSASetterTranslationCommon)((INpcRDSAGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NpcRDSA DeepCopy(
            this INpcRDSAGetter item,
            out NpcRDSA.ErrorMask errorMask,
            NpcRDSA.TranslationMask? copyMask = null)
        {
            return ((NpcRDSASetterTranslationCommon)((INpcRDSAGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NpcRDSA DeepCopy(
            this INpcRDSAGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NpcRDSASetterTranslationCommon)((INpcRDSAGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this INpcRDSA item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((NpcRDSASetterCommon)((INpcRDSAGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum NpcRDSA_FieldIndex
    {
        UnknownInt = 0,
        UnknownInt2 = 1,
        UnknownLink1 = 2,
        UnknownInt3 = 3,
        UnknownLink2 = 4,
        UnknownLink3 = 5,
        UnknownLink4 = 6,
        UnknownLink5 = 7,
        UnknownLink6 = 8,
        UnknownFloat1 = 9,
        UnknownFloat2 = 10,
        UnknownFloat3 = 11,
        UnknownFloat4 = 12,
        UnknownFloat5 = 13,
        UnknownLink7 = 14,
        UnknownInt4 = 15,
        UnknownLink8 = 16,
        UnknownFloat6 = 17,
        UnknownInt5 = 18,
        UnknownLink9 = 19,
    }
    #endregion

    #region Registration
    internal partial class NpcRDSA_Registration : ILoquiRegistration
    {
        public static readonly NpcRDSA_Registration Instance = new NpcRDSA_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 20;

        public const ushort FieldCount = 20;

        public static readonly Type MaskType = typeof(NpcRDSA.Mask<>);

        public static readonly Type ErrorMaskType = typeof(NpcRDSA.ErrorMask);

        public static readonly Type ClassType = typeof(NpcRDSA);

        public static readonly Type GetterType = typeof(INpcRDSAGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INpcRDSA);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.NpcRDSA";

        public const string Name = "NpcRDSA";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(NpcRDSABinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class NpcRDSASetterCommon
    {
        public static readonly NpcRDSASetterCommon Instance = new NpcRDSASetterCommon();

        partial void ClearPartial();
        
        public void Clear(INpcRDSA item)
        {
            ClearPartial();
            item.UnknownInt = default(Int32);
            item.UnknownInt2 = default(Int32);
            item.UnknownLink1.Clear();
            item.UnknownInt3 = default(Int32);
            item.UnknownLink2.Clear();
            item.UnknownLink3.Clear();
            item.UnknownLink4.Clear();
            item.UnknownLink5.Clear();
            item.UnknownLink6.Clear();
            item.UnknownFloat1 = default(Single);
            item.UnknownFloat2 = default(Single);
            item.UnknownFloat3 = default(Single);
            item.UnknownFloat4 = default(Single);
            item.UnknownFloat5 = default(Single);
            item.UnknownLink7.Clear();
            item.UnknownInt4 = default(Int32);
            item.UnknownLink8.Clear();
            item.UnknownFloat6 = default(Single);
            item.UnknownInt5 = default(Int32);
            item.UnknownLink9.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(INpcRDSA obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.UnknownLink1.Relink(mapping);
            obj.UnknownLink2.Relink(mapping);
            obj.UnknownLink3.Relink(mapping);
            obj.UnknownLink4.Relink(mapping);
            obj.UnknownLink5.Relink(mapping);
            obj.UnknownLink6.Relink(mapping);
            obj.UnknownLink7.Relink(mapping);
            obj.UnknownLink8.Relink(mapping);
            obj.UnknownLink9.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INpcRDSA item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: NpcRDSABinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class NpcRDSACommon
    {
        public static readonly NpcRDSACommon Instance = new NpcRDSACommon();

        public NpcRDSA.Mask<bool> GetEqualsMask(
            INpcRDSAGetter item,
            INpcRDSAGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NpcRDSA.Mask<bool>(false);
            ((NpcRDSACommon)((INpcRDSAGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INpcRDSAGetter item,
            INpcRDSAGetter rhs,
            NpcRDSA.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.UnknownInt = item.UnknownInt == rhs.UnknownInt;
            ret.UnknownInt2 = item.UnknownInt2 == rhs.UnknownInt2;
            ret.UnknownLink1 = item.UnknownLink1.Equals(rhs.UnknownLink1);
            ret.UnknownInt3 = item.UnknownInt3 == rhs.UnknownInt3;
            ret.UnknownLink2 = item.UnknownLink2.Equals(rhs.UnknownLink2);
            ret.UnknownLink3 = item.UnknownLink3.Equals(rhs.UnknownLink3);
            ret.UnknownLink4 = item.UnknownLink4.Equals(rhs.UnknownLink4);
            ret.UnknownLink5 = item.UnknownLink5.Equals(rhs.UnknownLink5);
            ret.UnknownLink6 = item.UnknownLink6.Equals(rhs.UnknownLink6);
            ret.UnknownFloat1 = item.UnknownFloat1.EqualsWithin(rhs.UnknownFloat1);
            ret.UnknownFloat2 = item.UnknownFloat2.EqualsWithin(rhs.UnknownFloat2);
            ret.UnknownFloat3 = item.UnknownFloat3.EqualsWithin(rhs.UnknownFloat3);
            ret.UnknownFloat4 = item.UnknownFloat4.EqualsWithin(rhs.UnknownFloat4);
            ret.UnknownFloat5 = item.UnknownFloat5.EqualsWithin(rhs.UnknownFloat5);
            ret.UnknownLink7 = item.UnknownLink7.Equals(rhs.UnknownLink7);
            ret.UnknownInt4 = item.UnknownInt4 == rhs.UnknownInt4;
            ret.UnknownLink8 = item.UnknownLink8.Equals(rhs.UnknownLink8);
            ret.UnknownFloat6 = item.UnknownFloat6.EqualsWithin(rhs.UnknownFloat6);
            ret.UnknownInt5 = item.UnknownInt5 == rhs.UnknownInt5;
            ret.UnknownLink9 = item.UnknownLink9.Equals(rhs.UnknownLink9);
        }
        
        public string Print(
            INpcRDSAGetter item,
            string? name = null,
            NpcRDSA.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            INpcRDSAGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NpcRDSA.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"NpcRDSA =>");
            }
            else
            {
                sb.AppendLine($"{name} (NpcRDSA) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            INpcRDSAGetter item,
            StructuredStringBuilder sb,
            NpcRDSA.Mask<bool>? printMask = null)
        {
            if (printMask?.UnknownInt ?? true)
            {
                sb.AppendItem(item.UnknownInt, "UnknownInt");
            }
            if (printMask?.UnknownInt2 ?? true)
            {
                sb.AppendItem(item.UnknownInt2, "UnknownInt2");
            }
            if (printMask?.UnknownLink1 ?? true)
            {
                sb.AppendItem(item.UnknownLink1.FormKey, "UnknownLink1");
            }
            if (printMask?.UnknownInt3 ?? true)
            {
                sb.AppendItem(item.UnknownInt3, "UnknownInt3");
            }
            if (printMask?.UnknownLink2 ?? true)
            {
                sb.AppendItem(item.UnknownLink2.FormKey, "UnknownLink2");
            }
            if (printMask?.UnknownLink3 ?? true)
            {
                sb.AppendItem(item.UnknownLink3.FormKey, "UnknownLink3");
            }
            if (printMask?.UnknownLink4 ?? true)
            {
                sb.AppendItem(item.UnknownLink4.FormKey, "UnknownLink4");
            }
            if (printMask?.UnknownLink5 ?? true)
            {
                sb.AppendItem(item.UnknownLink5.FormKey, "UnknownLink5");
            }
            if (printMask?.UnknownLink6 ?? true)
            {
                sb.AppendItem(item.UnknownLink6.FormKey, "UnknownLink6");
            }
            if (printMask?.UnknownFloat1 ?? true)
            {
                sb.AppendItem(item.UnknownFloat1, "UnknownFloat1");
            }
            if (printMask?.UnknownFloat2 ?? true)
            {
                sb.AppendItem(item.UnknownFloat2, "UnknownFloat2");
            }
            if (printMask?.UnknownFloat3 ?? true)
            {
                sb.AppendItem(item.UnknownFloat3, "UnknownFloat3");
            }
            if (printMask?.UnknownFloat4 ?? true)
            {
                sb.AppendItem(item.UnknownFloat4, "UnknownFloat4");
            }
            if (printMask?.UnknownFloat5 ?? true)
            {
                sb.AppendItem(item.UnknownFloat5, "UnknownFloat5");
            }
            if (printMask?.UnknownLink7 ?? true)
            {
                sb.AppendItem(item.UnknownLink7.FormKey, "UnknownLink7");
            }
            if (printMask?.UnknownInt4 ?? true)
            {
                sb.AppendItem(item.UnknownInt4, "UnknownInt4");
            }
            if (printMask?.UnknownLink8 ?? true)
            {
                sb.AppendItem(item.UnknownLink8.FormKey, "UnknownLink8");
            }
            if (printMask?.UnknownFloat6 ?? true)
            {
                sb.AppendItem(item.UnknownFloat6, "UnknownFloat6");
            }
            if (printMask?.UnknownInt5 ?? true)
            {
                sb.AppendItem(item.UnknownInt5, "UnknownInt5");
            }
            if (printMask?.UnknownLink9 ?? true)
            {
                sb.AppendItem(item.UnknownLink9.FormKey, "UnknownLink9");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INpcRDSAGetter? lhs,
            INpcRDSAGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownInt) ?? true))
            {
                if (lhs.UnknownInt != rhs.UnknownInt) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownInt2) ?? true))
            {
                if (lhs.UnknownInt2 != rhs.UnknownInt2) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownLink1) ?? true))
            {
                if (!lhs.UnknownLink1.Equals(rhs.UnknownLink1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownInt3) ?? true))
            {
                if (lhs.UnknownInt3 != rhs.UnknownInt3) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownLink2) ?? true))
            {
                if (!lhs.UnknownLink2.Equals(rhs.UnknownLink2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownLink3) ?? true))
            {
                if (!lhs.UnknownLink3.Equals(rhs.UnknownLink3)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownLink4) ?? true))
            {
                if (!lhs.UnknownLink4.Equals(rhs.UnknownLink4)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownLink5) ?? true))
            {
                if (!lhs.UnknownLink5.Equals(rhs.UnknownLink5)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownLink6) ?? true))
            {
                if (!lhs.UnknownLink6.Equals(rhs.UnknownLink6)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownFloat1) ?? true))
            {
                if (!lhs.UnknownFloat1.EqualsWithin(rhs.UnknownFloat1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownFloat2) ?? true))
            {
                if (!lhs.UnknownFloat2.EqualsWithin(rhs.UnknownFloat2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownFloat3) ?? true))
            {
                if (!lhs.UnknownFloat3.EqualsWithin(rhs.UnknownFloat3)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownFloat4) ?? true))
            {
                if (!lhs.UnknownFloat4.EqualsWithin(rhs.UnknownFloat4)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownFloat5) ?? true))
            {
                if (!lhs.UnknownFloat5.EqualsWithin(rhs.UnknownFloat5)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownLink7) ?? true))
            {
                if (!lhs.UnknownLink7.Equals(rhs.UnknownLink7)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownInt4) ?? true))
            {
                if (lhs.UnknownInt4 != rhs.UnknownInt4) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownLink8) ?? true))
            {
                if (!lhs.UnknownLink8.Equals(rhs.UnknownLink8)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownFloat6) ?? true))
            {
                if (!lhs.UnknownFloat6.EqualsWithin(rhs.UnknownFloat6)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownInt5) ?? true))
            {
                if (lhs.UnknownInt5 != rhs.UnknownInt5) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownLink9) ?? true))
            {
                if (!lhs.UnknownLink9.Equals(rhs.UnknownLink9)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(INpcRDSAGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.UnknownInt);
            hash.Add(item.UnknownInt2);
            hash.Add(item.UnknownLink1);
            hash.Add(item.UnknownInt3);
            hash.Add(item.UnknownLink2);
            hash.Add(item.UnknownLink3);
            hash.Add(item.UnknownLink4);
            hash.Add(item.UnknownLink5);
            hash.Add(item.UnknownLink6);
            hash.Add(item.UnknownFloat1);
            hash.Add(item.UnknownFloat2);
            hash.Add(item.UnknownFloat3);
            hash.Add(item.UnknownFloat4);
            hash.Add(item.UnknownFloat5);
            hash.Add(item.UnknownLink7);
            hash.Add(item.UnknownInt4);
            hash.Add(item.UnknownLink8);
            hash.Add(item.UnknownFloat6);
            hash.Add(item.UnknownInt5);
            hash.Add(item.UnknownLink9);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return NpcRDSA.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(INpcRDSAGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.UnknownLink1);
            yield return FormLinkInformation.Factory(obj.UnknownLink2);
            yield return FormLinkInformation.Factory(obj.UnknownLink3);
            yield return FormLinkInformation.Factory(obj.UnknownLink4);
            yield return FormLinkInformation.Factory(obj.UnknownLink5);
            yield return FormLinkInformation.Factory(obj.UnknownLink6);
            yield return FormLinkInformation.Factory(obj.UnknownLink7);
            yield return FormLinkInformation.Factory(obj.UnknownLink8);
            yield return FormLinkInformation.Factory(obj.UnknownLink9);
            yield break;
        }
        
        #endregion
        
    }
    internal partial class NpcRDSASetterTranslationCommon
    {
        public static readonly NpcRDSASetterTranslationCommon Instance = new NpcRDSASetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            INpcRDSA item,
            INpcRDSAGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownInt) ?? true))
            {
                item.UnknownInt = rhs.UnknownInt;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownInt2) ?? true))
            {
                item.UnknownInt2 = rhs.UnknownInt2;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownLink1) ?? true))
            {
                item.UnknownLink1.SetTo(rhs.UnknownLink1.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownInt3) ?? true))
            {
                item.UnknownInt3 = rhs.UnknownInt3;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownLink2) ?? true))
            {
                item.UnknownLink2.SetTo(rhs.UnknownLink2.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownLink3) ?? true))
            {
                item.UnknownLink3.SetTo(rhs.UnknownLink3.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownLink4) ?? true))
            {
                item.UnknownLink4.SetTo(rhs.UnknownLink4.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownLink5) ?? true))
            {
                item.UnknownLink5.SetTo(rhs.UnknownLink5.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownLink6) ?? true))
            {
                item.UnknownLink6.SetTo(rhs.UnknownLink6.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownFloat1) ?? true))
            {
                item.UnknownFloat1 = rhs.UnknownFloat1;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownFloat2) ?? true))
            {
                item.UnknownFloat2 = rhs.UnknownFloat2;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownFloat3) ?? true))
            {
                item.UnknownFloat3 = rhs.UnknownFloat3;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownFloat4) ?? true))
            {
                item.UnknownFloat4 = rhs.UnknownFloat4;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownFloat5) ?? true))
            {
                item.UnknownFloat5 = rhs.UnknownFloat5;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownLink7) ?? true))
            {
                item.UnknownLink7.SetTo(rhs.UnknownLink7.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownInt4) ?? true))
            {
                item.UnknownInt4 = rhs.UnknownInt4;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownLink8) ?? true))
            {
                item.UnknownLink8.SetTo(rhs.UnknownLink8.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownFloat6) ?? true))
            {
                item.UnknownFloat6 = rhs.UnknownFloat6;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownInt5) ?? true))
            {
                item.UnknownInt5 = rhs.UnknownInt5;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRDSA_FieldIndex.UnknownLink9) ?? true))
            {
                item.UnknownLink9.SetTo(rhs.UnknownLink9.FormKey);
            }
        }
        
        #endregion
        
        public NpcRDSA DeepCopy(
            INpcRDSAGetter item,
            NpcRDSA.TranslationMask? copyMask = null)
        {
            NpcRDSA ret = (NpcRDSA)((NpcRDSACommon)((INpcRDSAGetter)item).CommonInstance()!).GetNew();
            ((NpcRDSASetterTranslationCommon)((INpcRDSAGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public NpcRDSA DeepCopy(
            INpcRDSAGetter item,
            out NpcRDSA.ErrorMask errorMask,
            NpcRDSA.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            NpcRDSA ret = (NpcRDSA)((NpcRDSACommon)((INpcRDSAGetter)item).CommonInstance()!).GetNew();
            ((NpcRDSASetterTranslationCommon)((INpcRDSAGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = NpcRDSA.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public NpcRDSA DeepCopy(
            INpcRDSAGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            NpcRDSA ret = (NpcRDSA)((NpcRDSACommon)((INpcRDSAGetter)item).CommonInstance()!).GetNew();
            ((NpcRDSASetterTranslationCommon)((INpcRDSAGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class NpcRDSA
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NpcRDSA_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => NpcRDSA_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NpcRDSACommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return NpcRDSASetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NpcRDSASetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INpcRDSAGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object INpcRDSAGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object INpcRDSAGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class NpcRDSABinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly NpcRDSABinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            INpcRDSAGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.UnknownInt);
            writer.Write(item.UnknownInt2);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.UnknownLink1);
            writer.Write(item.UnknownInt3);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.UnknownLink2);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.UnknownLink3);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.UnknownLink4);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.UnknownLink5);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.UnknownLink6);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.UnknownFloat1);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.UnknownFloat2);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.UnknownFloat3);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.UnknownFloat4);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.UnknownFloat5);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.UnknownLink7);
            writer.Write(item.UnknownInt4);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.UnknownLink8);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.UnknownFloat6);
            writer.Write(item.UnknownInt5);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.UnknownLink9);
        }

        public void Write(
            MutagenWriter writer,
            INpcRDSAGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (INpcRDSAGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class NpcRDSABinaryCreateTranslation
    {
        public static readonly NpcRDSABinaryCreateTranslation Instance = new NpcRDSABinaryCreateTranslation();

        public static void FillBinaryStructs(
            INpcRDSA item,
            MutagenFrame frame)
        {
            item.UnknownInt = frame.ReadInt32();
            item.UnknownInt2 = frame.ReadInt32();
            item.UnknownLink1.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.UnknownInt3 = frame.ReadInt32();
            item.UnknownLink2.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.UnknownLink3.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.UnknownLink4.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.UnknownLink5.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.UnknownLink6.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.UnknownFloat1 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.UnknownFloat2 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.UnknownFloat3 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.UnknownFloat4 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.UnknownFloat5 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.UnknownLink7.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.UnknownInt4 = frame.ReadInt32();
            item.UnknownLink8.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.UnknownFloat6 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.UnknownInt5 = frame.ReadInt32();
            item.UnknownLink9.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class NpcRDSABinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this INpcRDSAGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcRDSABinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class NpcRDSABinaryOverlay :
        PluginBinaryOverlay,
        INpcRDSAGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NpcRDSA_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => NpcRDSA_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NpcRDSACommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NpcRDSASetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INpcRDSAGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? INpcRDSAGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object INpcRDSAGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => NpcRDSACommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NpcRDSABinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcRDSABinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Int32 UnknownInt => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0x0, 0x4));
        public Int32 UnknownInt2 => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0x4, 0x4));
        public IFormLinkGetter<IStarfieldMajorRecordGetter> UnknownLink1 => FormLinkBinaryTranslation.Instance.OverlayFactory<IStarfieldMajorRecordGetter>(_package, _structData.Span.Slice(0x8, 0x4));
        public Int32 UnknownInt3 => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0xC, 0x4));
        public IFormLinkGetter<IStarfieldMajorRecordGetter> UnknownLink2 => FormLinkBinaryTranslation.Instance.OverlayFactory<IStarfieldMajorRecordGetter>(_package, _structData.Span.Slice(0x10, 0x4));
        public IFormLinkGetter<IStarfieldMajorRecordGetter> UnknownLink3 => FormLinkBinaryTranslation.Instance.OverlayFactory<IStarfieldMajorRecordGetter>(_package, _structData.Span.Slice(0x14, 0x4));
        public IFormLinkGetter<IStarfieldMajorRecordGetter> UnknownLink4 => FormLinkBinaryTranslation.Instance.OverlayFactory<IStarfieldMajorRecordGetter>(_package, _structData.Span.Slice(0x18, 0x4));
        public IFormLinkGetter<IStarfieldMajorRecordGetter> UnknownLink5 => FormLinkBinaryTranslation.Instance.OverlayFactory<IStarfieldMajorRecordGetter>(_package, _structData.Span.Slice(0x1C, 0x4));
        public IFormLinkGetter<IStarfieldMajorRecordGetter> UnknownLink6 => FormLinkBinaryTranslation.Instance.OverlayFactory<IStarfieldMajorRecordGetter>(_package, _structData.Span.Slice(0x20, 0x4));
        public Single UnknownFloat1 => _structData.Slice(0x24, 0x4).Float();
        public Single UnknownFloat2 => _structData.Slice(0x28, 0x4).Float();
        public Single UnknownFloat3 => _structData.Slice(0x2C, 0x4).Float();
        public Single UnknownFloat4 => _structData.Slice(0x30, 0x4).Float();
        public Single UnknownFloat5 => _structData.Slice(0x34, 0x4).Float();
        public IFormLinkGetter<IStarfieldMajorRecordGetter> UnknownLink7 => FormLinkBinaryTranslation.Instance.OverlayFactory<IStarfieldMajorRecordGetter>(_package, _structData.Span.Slice(0x38, 0x4));
        public Int32 UnknownInt4 => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0x3C, 0x4));
        public IFormLinkGetter<IStarfieldMajorRecordGetter> UnknownLink8 => FormLinkBinaryTranslation.Instance.OverlayFactory<IStarfieldMajorRecordGetter>(_package, _structData.Span.Slice(0x40, 0x4));
        public Single UnknownFloat6 => _structData.Slice(0x44, 0x4).Float();
        public Int32 UnknownInt5 => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0x48, 0x4));
        public IFormLinkGetter<IStarfieldMajorRecordGetter> UnknownLink9 => FormLinkBinaryTranslation.Instance.OverlayFactory<IStarfieldMajorRecordGetter>(_package, _structData.Span.Slice(0x4C, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NpcRDSABinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static INpcRDSAGetter NpcRDSAFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x50,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new NpcRDSABinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x50;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static INpcRDSAGetter NpcRDSAFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return NpcRDSAFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NpcRDSAMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INpcRDSAGetter rhs) return false;
            return ((NpcRDSACommon)((INpcRDSAGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INpcRDSAGetter? obj)
        {
            return ((NpcRDSACommon)((INpcRDSAGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NpcRDSACommon)((INpcRDSAGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

