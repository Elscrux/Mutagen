/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class MagicEffectSound :
        IEquatable<IMagicEffectSoundGetter>,
        ILoquiObjectSetter<MagicEffectSound>,
        IMagicEffectSound
    {
        #region Ctor
        public MagicEffectSound()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Versioning
        public MagicEffectSound.VersioningBreaks Versioning { get; set; } = default(MagicEffectSound.VersioningBreaks);
        #endregion
        #region Type
        public MagicEffectSound.SoundType Type { get; set; } = default(MagicEffectSound.SoundType);
        #endregion
        #region Sound
        public SoundReference Sound { get; set; } = new SoundReference();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter IMagicEffectSoundGetter.Sound => Sound;
        #endregion
        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unknown = new byte[3];
        public MemorySlice<Byte> Unknown
        {
            get => _Unknown;
            set => this._Unknown = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IMagicEffectSoundGetter.Unknown => this.Unknown;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            MagicEffectSoundMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IMagicEffectSoundGetter rhs) return false;
            return ((MagicEffectSoundCommon)((IMagicEffectSoundGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IMagicEffectSoundGetter? obj)
        {
            return ((MagicEffectSoundCommon)((IMagicEffectSoundGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((MagicEffectSoundCommon)((IMagicEffectSoundGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Versioning = initialValue;
                this.Type = initialValue;
                this.Sound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.Unknown = initialValue;
            }

            public Mask(
                TItem Versioning,
                TItem Type,
                TItem Sound,
                TItem Unknown)
            {
                this.Versioning = Versioning;
                this.Type = Type;
                this.Sound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(Sound, new SoundReference.Mask<TItem>(Sound));
                this.Unknown = Unknown;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Versioning;
            public TItem Type;
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? Sound { get; set; }
            public TItem Unknown;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Versioning, rhs.Versioning)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.Sound, rhs.Sound)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Versioning);
                hash.Add(this.Type);
                hash.Add(this.Sound);
                hash.Add(this.Unknown);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Versioning)) return false;
                if (!eval(this.Type)) return false;
                if (Sound != null)
                {
                    if (!eval(this.Sound.Overall)) return false;
                    if (this.Sound.Specific != null && !this.Sound.Specific.All(eval)) return false;
                }
                if (!eval(this.Unknown)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Versioning)) return true;
                if (eval(this.Type)) return true;
                if (Sound != null)
                {
                    if (eval(this.Sound.Overall)) return true;
                    if (this.Sound.Specific != null && this.Sound.Specific.Any(eval)) return true;
                }
                if (eval(this.Unknown)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new MagicEffectSound.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Versioning = eval(this.Versioning);
                obj.Type = eval(this.Type);
                obj.Sound = this.Sound == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.Sound.Overall), this.Sound.Specific?.Translate(eval));
                obj.Unknown = eval(this.Unknown);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(MagicEffectSound.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, MagicEffectSound.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(MagicEffectSound.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Versioning ?? true)
                    {
                        sb.AppendItem(Versioning, "Versioning");
                    }
                    if (printMask?.Type ?? true)
                    {
                        sb.AppendItem(Type, "Type");
                    }
                    if (printMask?.Sound?.Overall ?? true)
                    {
                        Sound?.Print(sb);
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Versioning;
            public Exception? Type;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? Sound;
            public Exception? Unknown;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                MagicEffectSound_FieldIndex enu = (MagicEffectSound_FieldIndex)index;
                switch (enu)
                {
                    case MagicEffectSound_FieldIndex.Versioning:
                        return Versioning;
                    case MagicEffectSound_FieldIndex.Type:
                        return Type;
                    case MagicEffectSound_FieldIndex.Sound:
                        return Sound;
                    case MagicEffectSound_FieldIndex.Unknown:
                        return Unknown;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                MagicEffectSound_FieldIndex enu = (MagicEffectSound_FieldIndex)index;
                switch (enu)
                {
                    case MagicEffectSound_FieldIndex.Versioning:
                        this.Versioning = ex;
                        break;
                    case MagicEffectSound_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case MagicEffectSound_FieldIndex.Sound:
                        this.Sound = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case MagicEffectSound_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                MagicEffectSound_FieldIndex enu = (MagicEffectSound_FieldIndex)index;
                switch (enu)
                {
                    case MagicEffectSound_FieldIndex.Versioning:
                        this.Versioning = (Exception?)obj;
                        break;
                    case MagicEffectSound_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case MagicEffectSound_FieldIndex.Sound:
                        this.Sound = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case MagicEffectSound_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Versioning != null) return true;
                if (Type != null) return true;
                if (Sound != null) return true;
                if (Unknown != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Versioning, "Versioning");
                }
                {
                    sb.AppendItem(Type, "Type");
                }
                Sound?.Print(sb);
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Versioning = this.Versioning.Combine(rhs.Versioning);
                ret.Type = this.Type.Combine(rhs.Type);
                ret.Sound = this.Sound.Combine(rhs.Sound, (l, r) => l.Combine(r));
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Versioning;
            public bool Type;
            public SoundReference.TranslationMask? Sound;
            public bool Unknown;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Versioning = defaultOn;
                this.Type = defaultOn;
                this.Unknown = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Versioning, null));
                ret.Add((Type, null));
                ret.Add((Sound != null ? Sound.OnOverall : DefaultOn, Sound?.GetCrystal()));
                ret.Add((Unknown, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        [Flags]
        public enum VersioningBreaks
        {
            Break0 = 1
        }
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => MagicEffectSoundCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => MagicEffectSoundSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => MagicEffectSoundBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MagicEffectSoundBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static MagicEffectSound CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new MagicEffectSound();
            ((MagicEffectSoundSetterCommon)((IMagicEffectSoundGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out MagicEffectSound item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((MagicEffectSoundSetterCommon)((IMagicEffectSoundGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static MagicEffectSound GetNew()
        {
            return new MagicEffectSound();
        }

    }
    #endregion

    #region Interface
    public partial interface IMagicEffectSound :
        IFormLinkContainer,
        ILoquiObjectSetter<IMagicEffectSound>,
        IMagicEffectSoundGetter
    {
        new MagicEffectSound.VersioningBreaks Versioning { get; set; }
        new MagicEffectSound.SoundType Type { get; set; }
        new SoundReference Sound { get; set; }
        new MemorySlice<Byte> Unknown { get; set; }
    }

    public partial interface IMagicEffectSoundGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IMagicEffectSoundGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => MagicEffectSound_Registration.Instance;
        MagicEffectSound.VersioningBreaks Versioning { get; }
        MagicEffectSound.SoundType Type { get; }
        ISoundReferenceGetter Sound { get; }
        ReadOnlyMemorySlice<Byte> Unknown { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class MagicEffectSoundMixIn
    {
        public static void Clear(this IMagicEffectSound item)
        {
            ((MagicEffectSoundSetterCommon)((IMagicEffectSoundGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static MagicEffectSound.Mask<bool> GetEqualsMask(
            this IMagicEffectSoundGetter item,
            IMagicEffectSoundGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MagicEffectSoundCommon)((IMagicEffectSoundGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IMagicEffectSoundGetter item,
            string? name = null,
            MagicEffectSound.Mask<bool>? printMask = null)
        {
            return ((MagicEffectSoundCommon)((IMagicEffectSoundGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IMagicEffectSoundGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            MagicEffectSound.Mask<bool>? printMask = null)
        {
            ((MagicEffectSoundCommon)((IMagicEffectSoundGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IMagicEffectSoundGetter item,
            IMagicEffectSoundGetter rhs,
            MagicEffectSound.TranslationMask? equalsMask = null)
        {
            return ((MagicEffectSoundCommon)((IMagicEffectSoundGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IMagicEffectSound lhs,
            IMagicEffectSoundGetter rhs)
        {
            ((MagicEffectSoundSetterTranslationCommon)((IMagicEffectSoundGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IMagicEffectSound lhs,
            IMagicEffectSoundGetter rhs,
            MagicEffectSound.TranslationMask? copyMask = null)
        {
            ((MagicEffectSoundSetterTranslationCommon)((IMagicEffectSoundGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IMagicEffectSound lhs,
            IMagicEffectSoundGetter rhs,
            out MagicEffectSound.ErrorMask errorMask,
            MagicEffectSound.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((MagicEffectSoundSetterTranslationCommon)((IMagicEffectSoundGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = MagicEffectSound.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IMagicEffectSound lhs,
            IMagicEffectSoundGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((MagicEffectSoundSetterTranslationCommon)((IMagicEffectSoundGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static MagicEffectSound DeepCopy(
            this IMagicEffectSoundGetter item,
            MagicEffectSound.TranslationMask? copyMask = null)
        {
            return ((MagicEffectSoundSetterTranslationCommon)((IMagicEffectSoundGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static MagicEffectSound DeepCopy(
            this IMagicEffectSoundGetter item,
            out MagicEffectSound.ErrorMask errorMask,
            MagicEffectSound.TranslationMask? copyMask = null)
        {
            return ((MagicEffectSoundSetterTranslationCommon)((IMagicEffectSoundGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static MagicEffectSound DeepCopy(
            this IMagicEffectSoundGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((MagicEffectSoundSetterTranslationCommon)((IMagicEffectSoundGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IMagicEffectSound item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((MagicEffectSoundSetterCommon)((IMagicEffectSoundGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum MagicEffectSound_FieldIndex
    {
        Versioning = 0,
        Type = 1,
        Sound = 2,
        Unknown = 3,
    }
    #endregion

    #region Registration
    internal partial class MagicEffectSound_Registration : ILoquiRegistration
    {
        public static readonly MagicEffectSound_Registration Instance = new MagicEffectSound_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(MagicEffectSound.Mask<>);

        public static readonly Type ErrorMaskType = typeof(MagicEffectSound.ErrorMask);

        public static readonly Type ClassType = typeof(MagicEffectSound);

        public static readonly Type GetterType = typeof(IMagicEffectSoundGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMagicEffectSound);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.MagicEffectSound";

        public const string Name = "MagicEffectSound";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ESSH;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.ESSH);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(MagicEffectSoundBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class MagicEffectSoundSetterCommon
    {
        public static readonly MagicEffectSoundSetterCommon Instance = new MagicEffectSoundSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IMagicEffectSound item)
        {
            ClearPartial();
            item.Versioning = default(MagicEffectSound.VersioningBreaks);
            item.Type = default(MagicEffectSound.SoundType);
            item.Sound.Clear();
            item.Unknown = new byte[3];
        }
        
        #region Mutagen
        public void RemapLinks(IMagicEffectSound obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Sound.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IMagicEffectSound item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.ESSH),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: MagicEffectSoundBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class MagicEffectSoundCommon
    {
        public static readonly MagicEffectSoundCommon Instance = new MagicEffectSoundCommon();

        public MagicEffectSound.Mask<bool> GetEqualsMask(
            IMagicEffectSoundGetter item,
            IMagicEffectSoundGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MagicEffectSound.Mask<bool>(false);
            ((MagicEffectSoundCommon)((IMagicEffectSoundGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMagicEffectSoundGetter item,
            IMagicEffectSoundGetter rhs,
            MagicEffectSound.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Versioning = item.Versioning == rhs.Versioning;
            ret.Type = item.Type == rhs.Type;
            ret.Sound = MaskItemExt.Factory(item.Sound.GetEqualsMask(rhs.Sound, include), include);
            ret.Unknown = MemoryExtensions.SequenceEqual(item.Unknown.Span, rhs.Unknown.Span);
        }
        
        public string Print(
            IMagicEffectSoundGetter item,
            string? name = null,
            MagicEffectSound.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IMagicEffectSoundGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            MagicEffectSound.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"MagicEffectSound =>");
            }
            else
            {
                sb.AppendLine($"{name} (MagicEffectSound) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IMagicEffectSoundGetter item,
            StructuredStringBuilder sb,
            MagicEffectSound.Mask<bool>? printMask = null)
        {
            if (printMask?.Versioning ?? true)
            {
                sb.AppendItem(item.Versioning, "Versioning");
            }
            if (printMask?.Type ?? true)
            {
                sb.AppendItem(item.Type, "Type");
            }
            if (printMask?.Sound?.Overall ?? true)
            {
                item.Sound?.Print(sb, "Sound");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendLine($"Unknown => {SpanExt.ToHexString(item.Unknown)}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMagicEffectSoundGetter? lhs,
            IMagicEffectSoundGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)MagicEffectSound_FieldIndex.Versioning) ?? true))
            {
                if (lhs.Versioning != rhs.Versioning) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffectSound_FieldIndex.Type) ?? true))
            {
                if (lhs.Type != rhs.Type) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffectSound_FieldIndex.Sound) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Sound, rhs.Sound, out var lhsSound, out var rhsSound, out var isSoundEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsSound).CommonInstance()!).Equals(lhsSound, rhsSound, equalsMask?.GetSubCrystal((int)MagicEffectSound_FieldIndex.Sound))) return false;
                }
                else if (!isSoundEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffectSound_FieldIndex.Unknown) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.Unknown.Span, rhs.Unknown.Span)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IMagicEffectSoundGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Versioning);
            hash.Add(item.Type);
            hash.Add(item.Sound);
            hash.Add(item.Unknown);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return MagicEffectSound.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IMagicEffectSoundGetter obj)
        {
            foreach (var item in obj.Sound.EnumerateFormLinks())
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class MagicEffectSoundSetterTranslationCommon
    {
        public static readonly MagicEffectSoundSetterTranslationCommon Instance = new MagicEffectSoundSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IMagicEffectSound item,
            IMagicEffectSoundGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)MagicEffectSound_FieldIndex.Versioning) ?? true))
            {
                item.Versioning = rhs.Versioning;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectSound_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectSound_FieldIndex.Sound) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffectSound_FieldIndex.Sound);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)MagicEffectSound_FieldIndex.Sound) ?? true))
                    {
                        item.Sound = rhs.Sound.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)MagicEffectSound_FieldIndex.Sound),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (rhs.Versioning.HasFlag(MagicEffectSound.VersioningBreaks.Break0)) return;
            if ((copyMask?.GetShouldTranslate((int)MagicEffectSound_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown.ToArray();
            }
        }
        
        #endregion
        
        public MagicEffectSound DeepCopy(
            IMagicEffectSoundGetter item,
            MagicEffectSound.TranslationMask? copyMask = null)
        {
            MagicEffectSound ret = (MagicEffectSound)((MagicEffectSoundCommon)((IMagicEffectSoundGetter)item).CommonInstance()!).GetNew();
            ((MagicEffectSoundSetterTranslationCommon)((IMagicEffectSoundGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public MagicEffectSound DeepCopy(
            IMagicEffectSoundGetter item,
            out MagicEffectSound.ErrorMask errorMask,
            MagicEffectSound.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            MagicEffectSound ret = (MagicEffectSound)((MagicEffectSoundCommon)((IMagicEffectSoundGetter)item).CommonInstance()!).GetNew();
            ((MagicEffectSoundSetterTranslationCommon)((IMagicEffectSoundGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = MagicEffectSound.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public MagicEffectSound DeepCopy(
            IMagicEffectSoundGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            MagicEffectSound ret = (MagicEffectSound)((MagicEffectSoundCommon)((IMagicEffectSoundGetter)item).CommonInstance()!).GetNew();
            ((MagicEffectSoundSetterTranslationCommon)((IMagicEffectSoundGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class MagicEffectSound
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MagicEffectSound_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => MagicEffectSound_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => MagicEffectSoundCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return MagicEffectSoundSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => MagicEffectSoundSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IMagicEffectSoundGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IMagicEffectSoundGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IMagicEffectSoundGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class MagicEffectSoundBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly MagicEffectSoundBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IMagicEffectSoundGetter item,
            MutagenWriter writer)
        {
            EnumBinaryTranslation<MagicEffectSound.SoundType, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Type,
                length: 1);
            var SoundItem = item.Sound;
            ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)SoundItem).BinaryWriteTranslator).Write(
                item: SoundItem,
                writer: writer);
            if (!item.Versioning.HasFlag(MagicEffectSound.VersioningBreaks.Break0))
            {
                if (writer.MetaData.FormVersion!.Value < 518)
                {
                    ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.Unknown);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IMagicEffectSoundGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.ESSH),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IMagicEffectSoundGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class MagicEffectSoundBinaryCreateTranslation
    {
        public static readonly MagicEffectSoundBinaryCreateTranslation Instance = new MagicEffectSoundBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IMagicEffectSound item,
            MutagenFrame frame)
        {
            item.Type = EnumBinaryTranslation<MagicEffectSound.SoundType, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 1);
            item.Sound = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
            if (frame.Complete)
            {
                item.Versioning |= MagicEffectSound.VersioningBreaks.Break0;
                return;
            }
            if (frame.MetaData.FormVersion!.Value < 518)
            {
                item.Unknown = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(3));
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class MagicEffectSoundBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IMagicEffectSoundGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MagicEffectSoundBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class MagicEffectSoundBinaryOverlay :
        PluginBinaryOverlay,
        IMagicEffectSoundGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MagicEffectSound_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => MagicEffectSound_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => MagicEffectSoundCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => MagicEffectSoundSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IMagicEffectSoundGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IMagicEffectSoundGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IMagicEffectSoundGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => MagicEffectSoundCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => MagicEffectSoundBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MagicEffectSoundBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public MagicEffectSound.VersioningBreaks Versioning { get; private set; }
        public MagicEffectSound.SoundType Type => (MagicEffectSound.SoundType)_structData.Span.Slice(0x0, 0x1)[0];
        public ISoundReferenceGetter Sound => SoundReferenceBinaryOverlay.SoundReferenceFactory(_structData.Slice(0x1), _package, default(TypedParseParams));
        #region Unknown
        public ReadOnlyMemorySlice<Byte> Unknown => _structData.Span.Length <= 0x29 ? UtilityTranslation.Zeros.Slice(3) : _structData.Span.Slice(0x29, 0x3).ToArray();
        int UnknownVersioningOffset => _package.FormVersion!.FormVersion!.Value >= 518 ? -3 : 0;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected MagicEffectSoundBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IMagicEffectSoundGetter MagicEffectSoundFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x2C,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new MagicEffectSoundBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            if (ret._structData.Length <= 0x29)
            {
                ret.Versioning |= MagicEffectSound.VersioningBreaks.Break0;
            }
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IMagicEffectSoundGetter MagicEffectSoundFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return MagicEffectSoundFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            MagicEffectSoundMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IMagicEffectSoundGetter rhs) return false;
            return ((MagicEffectSoundCommon)((IMagicEffectSoundGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IMagicEffectSoundGetter? obj)
        {
            return ((MagicEffectSoundCommon)((IMagicEffectSoundGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((MagicEffectSoundCommon)((IMagicEffectSoundGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

