/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class TemplateActors :
        IEquatable<ITemplateActorsGetter>,
        ILoquiObjectSetter<TemplateActors>,
        ITemplateActors
    {
        #region Ctor
        public TemplateActors()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region TraitTemplate
        private readonly IFormLink<INpcTemplateTargetGetter> _TraitTemplate = new FormLink<INpcTemplateTargetGetter>();
        public IFormLink<INpcTemplateTargetGetter> TraitTemplate
        {
            get => _TraitTemplate;
            set => _TraitTemplate.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<INpcTemplateTargetGetter> ITemplateActorsGetter.TraitTemplate => this.TraitTemplate;
        #endregion
        #region StatsTemplate
        private readonly IFormLink<INpcTemplateTargetGetter> _StatsTemplate = new FormLink<INpcTemplateTargetGetter>();
        public IFormLink<INpcTemplateTargetGetter> StatsTemplate
        {
            get => _StatsTemplate;
            set => _StatsTemplate.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<INpcTemplateTargetGetter> ITemplateActorsGetter.StatsTemplate => this.StatsTemplate;
        #endregion
        #region FactionsTemplate
        private readonly IFormLink<INpcTemplateTargetGetter> _FactionsTemplate = new FormLink<INpcTemplateTargetGetter>();
        public IFormLink<INpcTemplateTargetGetter> FactionsTemplate
        {
            get => _FactionsTemplate;
            set => _FactionsTemplate.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<INpcTemplateTargetGetter> ITemplateActorsGetter.FactionsTemplate => this.FactionsTemplate;
        #endregion
        #region SpellListTemplate
        private readonly IFormLink<INpcTemplateTargetGetter> _SpellListTemplate = new FormLink<INpcTemplateTargetGetter>();
        public IFormLink<INpcTemplateTargetGetter> SpellListTemplate
        {
            get => _SpellListTemplate;
            set => _SpellListTemplate.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<INpcTemplateTargetGetter> ITemplateActorsGetter.SpellListTemplate => this.SpellListTemplate;
        #endregion
        #region AiDataTemplate
        private readonly IFormLink<INpcTemplateTargetGetter> _AiDataTemplate = new FormLink<INpcTemplateTargetGetter>();
        public IFormLink<INpcTemplateTargetGetter> AiDataTemplate
        {
            get => _AiDataTemplate;
            set => _AiDataTemplate.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<INpcTemplateTargetGetter> ITemplateActorsGetter.AiDataTemplate => this.AiDataTemplate;
        #endregion
        #region AiPackagesTemplate
        private readonly IFormLink<INpcTemplateTargetGetter> _AiPackagesTemplate = new FormLink<INpcTemplateTargetGetter>();
        public IFormLink<INpcTemplateTargetGetter> AiPackagesTemplate
        {
            get => _AiPackagesTemplate;
            set => _AiPackagesTemplate.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<INpcTemplateTargetGetter> ITemplateActorsGetter.AiPackagesTemplate => this.AiPackagesTemplate;
        #endregion
        #region ModelOrAnimationTemplate
        private readonly IFormLink<INpcTemplateTargetGetter> _ModelOrAnimationTemplate = new FormLink<INpcTemplateTargetGetter>();
        public IFormLink<INpcTemplateTargetGetter> ModelOrAnimationTemplate
        {
            get => _ModelOrAnimationTemplate;
            set => _ModelOrAnimationTemplate.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<INpcTemplateTargetGetter> ITemplateActorsGetter.ModelOrAnimationTemplate => this.ModelOrAnimationTemplate;
        #endregion
        #region BaseDataTemplate
        private readonly IFormLink<INpcTemplateTargetGetter> _BaseDataTemplate = new FormLink<INpcTemplateTargetGetter>();
        public IFormLink<INpcTemplateTargetGetter> BaseDataTemplate
        {
            get => _BaseDataTemplate;
            set => _BaseDataTemplate.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<INpcTemplateTargetGetter> ITemplateActorsGetter.BaseDataTemplate => this.BaseDataTemplate;
        #endregion
        #region InventoryTemplate
        private readonly IFormLink<INpcTemplateTargetGetter> _InventoryTemplate = new FormLink<INpcTemplateTargetGetter>();
        public IFormLink<INpcTemplateTargetGetter> InventoryTemplate
        {
            get => _InventoryTemplate;
            set => _InventoryTemplate.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<INpcTemplateTargetGetter> ITemplateActorsGetter.InventoryTemplate => this.InventoryTemplate;
        #endregion
        #region ScriptTemplate
        private readonly IFormLink<INpcTemplateTargetGetter> _ScriptTemplate = new FormLink<INpcTemplateTargetGetter>();
        public IFormLink<INpcTemplateTargetGetter> ScriptTemplate
        {
            get => _ScriptTemplate;
            set => _ScriptTemplate.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<INpcTemplateTargetGetter> ITemplateActorsGetter.ScriptTemplate => this.ScriptTemplate;
        #endregion
        #region DefPackListTemplate
        private readonly IFormLink<INpcTemplateTargetGetter> _DefPackListTemplate = new FormLink<INpcTemplateTargetGetter>();
        public IFormLink<INpcTemplateTargetGetter> DefPackListTemplate
        {
            get => _DefPackListTemplate;
            set => _DefPackListTemplate.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<INpcTemplateTargetGetter> ITemplateActorsGetter.DefPackListTemplate => this.DefPackListTemplate;
        #endregion
        #region AttackDataTemplate
        private readonly IFormLink<INpcTemplateTargetGetter> _AttackDataTemplate = new FormLink<INpcTemplateTargetGetter>();
        public IFormLink<INpcTemplateTargetGetter> AttackDataTemplate
        {
            get => _AttackDataTemplate;
            set => _AttackDataTemplate.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<INpcTemplateTargetGetter> ITemplateActorsGetter.AttackDataTemplate => this.AttackDataTemplate;
        #endregion
        #region KeywordsTemplate
        private readonly IFormLink<INpcTemplateTargetGetter> _KeywordsTemplate = new FormLink<INpcTemplateTargetGetter>();
        public IFormLink<INpcTemplateTargetGetter> KeywordsTemplate
        {
            get => _KeywordsTemplate;
            set => _KeywordsTemplate.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<INpcTemplateTargetGetter> ITemplateActorsGetter.KeywordsTemplate => this.KeywordsTemplate;
        #endregion
        #region Unknown1
        private readonly IFormLink<INpcTemplateTargetGetter> _Unknown1 = new FormLink<INpcTemplateTargetGetter>();
        public IFormLink<INpcTemplateTargetGetter> Unknown1
        {
            get => _Unknown1;
            set => _Unknown1.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<INpcTemplateTargetGetter> ITemplateActorsGetter.Unknown1 => this.Unknown1;
        #endregion
        #region Unknown2
        private readonly IFormLink<INpcTemplateTargetGetter> _Unknown2 = new FormLink<INpcTemplateTargetGetter>();
        public IFormLink<INpcTemplateTargetGetter> Unknown2
        {
            get => _Unknown2;
            set => _Unknown2.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<INpcTemplateTargetGetter> ITemplateActorsGetter.Unknown2 => this.Unknown2;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TemplateActorsMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ITemplateActorsGetter rhs) return false;
            return ((TemplateActorsCommon)((ITemplateActorsGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITemplateActorsGetter? obj)
        {
            return ((TemplateActorsCommon)((ITemplateActorsGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TemplateActorsCommon)((ITemplateActorsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.TraitTemplate = initialValue;
                this.StatsTemplate = initialValue;
                this.FactionsTemplate = initialValue;
                this.SpellListTemplate = initialValue;
                this.AiDataTemplate = initialValue;
                this.AiPackagesTemplate = initialValue;
                this.ModelOrAnimationTemplate = initialValue;
                this.BaseDataTemplate = initialValue;
                this.InventoryTemplate = initialValue;
                this.ScriptTemplate = initialValue;
                this.DefPackListTemplate = initialValue;
                this.AttackDataTemplate = initialValue;
                this.KeywordsTemplate = initialValue;
                this.Unknown1 = initialValue;
                this.Unknown2 = initialValue;
            }

            public Mask(
                TItem TraitTemplate,
                TItem StatsTemplate,
                TItem FactionsTemplate,
                TItem SpellListTemplate,
                TItem AiDataTemplate,
                TItem AiPackagesTemplate,
                TItem ModelOrAnimationTemplate,
                TItem BaseDataTemplate,
                TItem InventoryTemplate,
                TItem ScriptTemplate,
                TItem DefPackListTemplate,
                TItem AttackDataTemplate,
                TItem KeywordsTemplate,
                TItem Unknown1,
                TItem Unknown2)
            {
                this.TraitTemplate = TraitTemplate;
                this.StatsTemplate = StatsTemplate;
                this.FactionsTemplate = FactionsTemplate;
                this.SpellListTemplate = SpellListTemplate;
                this.AiDataTemplate = AiDataTemplate;
                this.AiPackagesTemplate = AiPackagesTemplate;
                this.ModelOrAnimationTemplate = ModelOrAnimationTemplate;
                this.BaseDataTemplate = BaseDataTemplate;
                this.InventoryTemplate = InventoryTemplate;
                this.ScriptTemplate = ScriptTemplate;
                this.DefPackListTemplate = DefPackListTemplate;
                this.AttackDataTemplate = AttackDataTemplate;
                this.KeywordsTemplate = KeywordsTemplate;
                this.Unknown1 = Unknown1;
                this.Unknown2 = Unknown2;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem TraitTemplate;
            public TItem StatsTemplate;
            public TItem FactionsTemplate;
            public TItem SpellListTemplate;
            public TItem AiDataTemplate;
            public TItem AiPackagesTemplate;
            public TItem ModelOrAnimationTemplate;
            public TItem BaseDataTemplate;
            public TItem InventoryTemplate;
            public TItem ScriptTemplate;
            public TItem DefPackListTemplate;
            public TItem AttackDataTemplate;
            public TItem KeywordsTemplate;
            public TItem Unknown1;
            public TItem Unknown2;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.TraitTemplate, rhs.TraitTemplate)) return false;
                if (!object.Equals(this.StatsTemplate, rhs.StatsTemplate)) return false;
                if (!object.Equals(this.FactionsTemplate, rhs.FactionsTemplate)) return false;
                if (!object.Equals(this.SpellListTemplate, rhs.SpellListTemplate)) return false;
                if (!object.Equals(this.AiDataTemplate, rhs.AiDataTemplate)) return false;
                if (!object.Equals(this.AiPackagesTemplate, rhs.AiPackagesTemplate)) return false;
                if (!object.Equals(this.ModelOrAnimationTemplate, rhs.ModelOrAnimationTemplate)) return false;
                if (!object.Equals(this.BaseDataTemplate, rhs.BaseDataTemplate)) return false;
                if (!object.Equals(this.InventoryTemplate, rhs.InventoryTemplate)) return false;
                if (!object.Equals(this.ScriptTemplate, rhs.ScriptTemplate)) return false;
                if (!object.Equals(this.DefPackListTemplate, rhs.DefPackListTemplate)) return false;
                if (!object.Equals(this.AttackDataTemplate, rhs.AttackDataTemplate)) return false;
                if (!object.Equals(this.KeywordsTemplate, rhs.KeywordsTemplate)) return false;
                if (!object.Equals(this.Unknown1, rhs.Unknown1)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.TraitTemplate);
                hash.Add(this.StatsTemplate);
                hash.Add(this.FactionsTemplate);
                hash.Add(this.SpellListTemplate);
                hash.Add(this.AiDataTemplate);
                hash.Add(this.AiPackagesTemplate);
                hash.Add(this.ModelOrAnimationTemplate);
                hash.Add(this.BaseDataTemplate);
                hash.Add(this.InventoryTemplate);
                hash.Add(this.ScriptTemplate);
                hash.Add(this.DefPackListTemplate);
                hash.Add(this.AttackDataTemplate);
                hash.Add(this.KeywordsTemplate);
                hash.Add(this.Unknown1);
                hash.Add(this.Unknown2);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.TraitTemplate)) return false;
                if (!eval(this.StatsTemplate)) return false;
                if (!eval(this.FactionsTemplate)) return false;
                if (!eval(this.SpellListTemplate)) return false;
                if (!eval(this.AiDataTemplate)) return false;
                if (!eval(this.AiPackagesTemplate)) return false;
                if (!eval(this.ModelOrAnimationTemplate)) return false;
                if (!eval(this.BaseDataTemplate)) return false;
                if (!eval(this.InventoryTemplate)) return false;
                if (!eval(this.ScriptTemplate)) return false;
                if (!eval(this.DefPackListTemplate)) return false;
                if (!eval(this.AttackDataTemplate)) return false;
                if (!eval(this.KeywordsTemplate)) return false;
                if (!eval(this.Unknown1)) return false;
                if (!eval(this.Unknown2)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.TraitTemplate)) return true;
                if (eval(this.StatsTemplate)) return true;
                if (eval(this.FactionsTemplate)) return true;
                if (eval(this.SpellListTemplate)) return true;
                if (eval(this.AiDataTemplate)) return true;
                if (eval(this.AiPackagesTemplate)) return true;
                if (eval(this.ModelOrAnimationTemplate)) return true;
                if (eval(this.BaseDataTemplate)) return true;
                if (eval(this.InventoryTemplate)) return true;
                if (eval(this.ScriptTemplate)) return true;
                if (eval(this.DefPackListTemplate)) return true;
                if (eval(this.AttackDataTemplate)) return true;
                if (eval(this.KeywordsTemplate)) return true;
                if (eval(this.Unknown1)) return true;
                if (eval(this.Unknown2)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new TemplateActors.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.TraitTemplate = eval(this.TraitTemplate);
                obj.StatsTemplate = eval(this.StatsTemplate);
                obj.FactionsTemplate = eval(this.FactionsTemplate);
                obj.SpellListTemplate = eval(this.SpellListTemplate);
                obj.AiDataTemplate = eval(this.AiDataTemplate);
                obj.AiPackagesTemplate = eval(this.AiPackagesTemplate);
                obj.ModelOrAnimationTemplate = eval(this.ModelOrAnimationTemplate);
                obj.BaseDataTemplate = eval(this.BaseDataTemplate);
                obj.InventoryTemplate = eval(this.InventoryTemplate);
                obj.ScriptTemplate = eval(this.ScriptTemplate);
                obj.DefPackListTemplate = eval(this.DefPackListTemplate);
                obj.AttackDataTemplate = eval(this.AttackDataTemplate);
                obj.KeywordsTemplate = eval(this.KeywordsTemplate);
                obj.Unknown1 = eval(this.Unknown1);
                obj.Unknown2 = eval(this.Unknown2);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(TemplateActors.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, TemplateActors.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(TemplateActors.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.TraitTemplate ?? true)
                    {
                        sb.AppendItem(TraitTemplate, "TraitTemplate");
                    }
                    if (printMask?.StatsTemplate ?? true)
                    {
                        sb.AppendItem(StatsTemplate, "StatsTemplate");
                    }
                    if (printMask?.FactionsTemplate ?? true)
                    {
                        sb.AppendItem(FactionsTemplate, "FactionsTemplate");
                    }
                    if (printMask?.SpellListTemplate ?? true)
                    {
                        sb.AppendItem(SpellListTemplate, "SpellListTemplate");
                    }
                    if (printMask?.AiDataTemplate ?? true)
                    {
                        sb.AppendItem(AiDataTemplate, "AiDataTemplate");
                    }
                    if (printMask?.AiPackagesTemplate ?? true)
                    {
                        sb.AppendItem(AiPackagesTemplate, "AiPackagesTemplate");
                    }
                    if (printMask?.ModelOrAnimationTemplate ?? true)
                    {
                        sb.AppendItem(ModelOrAnimationTemplate, "ModelOrAnimationTemplate");
                    }
                    if (printMask?.BaseDataTemplate ?? true)
                    {
                        sb.AppendItem(BaseDataTemplate, "BaseDataTemplate");
                    }
                    if (printMask?.InventoryTemplate ?? true)
                    {
                        sb.AppendItem(InventoryTemplate, "InventoryTemplate");
                    }
                    if (printMask?.ScriptTemplate ?? true)
                    {
                        sb.AppendItem(ScriptTemplate, "ScriptTemplate");
                    }
                    if (printMask?.DefPackListTemplate ?? true)
                    {
                        sb.AppendItem(DefPackListTemplate, "DefPackListTemplate");
                    }
                    if (printMask?.AttackDataTemplate ?? true)
                    {
                        sb.AppendItem(AttackDataTemplate, "AttackDataTemplate");
                    }
                    if (printMask?.KeywordsTemplate ?? true)
                    {
                        sb.AppendItem(KeywordsTemplate, "KeywordsTemplate");
                    }
                    if (printMask?.Unknown1 ?? true)
                    {
                        sb.AppendItem(Unknown1, "Unknown1");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        sb.AppendItem(Unknown2, "Unknown2");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? TraitTemplate;
            public Exception? StatsTemplate;
            public Exception? FactionsTemplate;
            public Exception? SpellListTemplate;
            public Exception? AiDataTemplate;
            public Exception? AiPackagesTemplate;
            public Exception? ModelOrAnimationTemplate;
            public Exception? BaseDataTemplate;
            public Exception? InventoryTemplate;
            public Exception? ScriptTemplate;
            public Exception? DefPackListTemplate;
            public Exception? AttackDataTemplate;
            public Exception? KeywordsTemplate;
            public Exception? Unknown1;
            public Exception? Unknown2;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                TemplateActors_FieldIndex enu = (TemplateActors_FieldIndex)index;
                switch (enu)
                {
                    case TemplateActors_FieldIndex.TraitTemplate:
                        return TraitTemplate;
                    case TemplateActors_FieldIndex.StatsTemplate:
                        return StatsTemplate;
                    case TemplateActors_FieldIndex.FactionsTemplate:
                        return FactionsTemplate;
                    case TemplateActors_FieldIndex.SpellListTemplate:
                        return SpellListTemplate;
                    case TemplateActors_FieldIndex.AiDataTemplate:
                        return AiDataTemplate;
                    case TemplateActors_FieldIndex.AiPackagesTemplate:
                        return AiPackagesTemplate;
                    case TemplateActors_FieldIndex.ModelOrAnimationTemplate:
                        return ModelOrAnimationTemplate;
                    case TemplateActors_FieldIndex.BaseDataTemplate:
                        return BaseDataTemplate;
                    case TemplateActors_FieldIndex.InventoryTemplate:
                        return InventoryTemplate;
                    case TemplateActors_FieldIndex.ScriptTemplate:
                        return ScriptTemplate;
                    case TemplateActors_FieldIndex.DefPackListTemplate:
                        return DefPackListTemplate;
                    case TemplateActors_FieldIndex.AttackDataTemplate:
                        return AttackDataTemplate;
                    case TemplateActors_FieldIndex.KeywordsTemplate:
                        return KeywordsTemplate;
                    case TemplateActors_FieldIndex.Unknown1:
                        return Unknown1;
                    case TemplateActors_FieldIndex.Unknown2:
                        return Unknown2;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                TemplateActors_FieldIndex enu = (TemplateActors_FieldIndex)index;
                switch (enu)
                {
                    case TemplateActors_FieldIndex.TraitTemplate:
                        this.TraitTemplate = ex;
                        break;
                    case TemplateActors_FieldIndex.StatsTemplate:
                        this.StatsTemplate = ex;
                        break;
                    case TemplateActors_FieldIndex.FactionsTemplate:
                        this.FactionsTemplate = ex;
                        break;
                    case TemplateActors_FieldIndex.SpellListTemplate:
                        this.SpellListTemplate = ex;
                        break;
                    case TemplateActors_FieldIndex.AiDataTemplate:
                        this.AiDataTemplate = ex;
                        break;
                    case TemplateActors_FieldIndex.AiPackagesTemplate:
                        this.AiPackagesTemplate = ex;
                        break;
                    case TemplateActors_FieldIndex.ModelOrAnimationTemplate:
                        this.ModelOrAnimationTemplate = ex;
                        break;
                    case TemplateActors_FieldIndex.BaseDataTemplate:
                        this.BaseDataTemplate = ex;
                        break;
                    case TemplateActors_FieldIndex.InventoryTemplate:
                        this.InventoryTemplate = ex;
                        break;
                    case TemplateActors_FieldIndex.ScriptTemplate:
                        this.ScriptTemplate = ex;
                        break;
                    case TemplateActors_FieldIndex.DefPackListTemplate:
                        this.DefPackListTemplate = ex;
                        break;
                    case TemplateActors_FieldIndex.AttackDataTemplate:
                        this.AttackDataTemplate = ex;
                        break;
                    case TemplateActors_FieldIndex.KeywordsTemplate:
                        this.KeywordsTemplate = ex;
                        break;
                    case TemplateActors_FieldIndex.Unknown1:
                        this.Unknown1 = ex;
                        break;
                    case TemplateActors_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                TemplateActors_FieldIndex enu = (TemplateActors_FieldIndex)index;
                switch (enu)
                {
                    case TemplateActors_FieldIndex.TraitTemplate:
                        this.TraitTemplate = (Exception?)obj;
                        break;
                    case TemplateActors_FieldIndex.StatsTemplate:
                        this.StatsTemplate = (Exception?)obj;
                        break;
                    case TemplateActors_FieldIndex.FactionsTemplate:
                        this.FactionsTemplate = (Exception?)obj;
                        break;
                    case TemplateActors_FieldIndex.SpellListTemplate:
                        this.SpellListTemplate = (Exception?)obj;
                        break;
                    case TemplateActors_FieldIndex.AiDataTemplate:
                        this.AiDataTemplate = (Exception?)obj;
                        break;
                    case TemplateActors_FieldIndex.AiPackagesTemplate:
                        this.AiPackagesTemplate = (Exception?)obj;
                        break;
                    case TemplateActors_FieldIndex.ModelOrAnimationTemplate:
                        this.ModelOrAnimationTemplate = (Exception?)obj;
                        break;
                    case TemplateActors_FieldIndex.BaseDataTemplate:
                        this.BaseDataTemplate = (Exception?)obj;
                        break;
                    case TemplateActors_FieldIndex.InventoryTemplate:
                        this.InventoryTemplate = (Exception?)obj;
                        break;
                    case TemplateActors_FieldIndex.ScriptTemplate:
                        this.ScriptTemplate = (Exception?)obj;
                        break;
                    case TemplateActors_FieldIndex.DefPackListTemplate:
                        this.DefPackListTemplate = (Exception?)obj;
                        break;
                    case TemplateActors_FieldIndex.AttackDataTemplate:
                        this.AttackDataTemplate = (Exception?)obj;
                        break;
                    case TemplateActors_FieldIndex.KeywordsTemplate:
                        this.KeywordsTemplate = (Exception?)obj;
                        break;
                    case TemplateActors_FieldIndex.Unknown1:
                        this.Unknown1 = (Exception?)obj;
                        break;
                    case TemplateActors_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (TraitTemplate != null) return true;
                if (StatsTemplate != null) return true;
                if (FactionsTemplate != null) return true;
                if (SpellListTemplate != null) return true;
                if (AiDataTemplate != null) return true;
                if (AiPackagesTemplate != null) return true;
                if (ModelOrAnimationTemplate != null) return true;
                if (BaseDataTemplate != null) return true;
                if (InventoryTemplate != null) return true;
                if (ScriptTemplate != null) return true;
                if (DefPackListTemplate != null) return true;
                if (AttackDataTemplate != null) return true;
                if (KeywordsTemplate != null) return true;
                if (Unknown1 != null) return true;
                if (Unknown2 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(TraitTemplate, "TraitTemplate");
                }
                {
                    sb.AppendItem(StatsTemplate, "StatsTemplate");
                }
                {
                    sb.AppendItem(FactionsTemplate, "FactionsTemplate");
                }
                {
                    sb.AppendItem(SpellListTemplate, "SpellListTemplate");
                }
                {
                    sb.AppendItem(AiDataTemplate, "AiDataTemplate");
                }
                {
                    sb.AppendItem(AiPackagesTemplate, "AiPackagesTemplate");
                }
                {
                    sb.AppendItem(ModelOrAnimationTemplate, "ModelOrAnimationTemplate");
                }
                {
                    sb.AppendItem(BaseDataTemplate, "BaseDataTemplate");
                }
                {
                    sb.AppendItem(InventoryTemplate, "InventoryTemplate");
                }
                {
                    sb.AppendItem(ScriptTemplate, "ScriptTemplate");
                }
                {
                    sb.AppendItem(DefPackListTemplate, "DefPackListTemplate");
                }
                {
                    sb.AppendItem(AttackDataTemplate, "AttackDataTemplate");
                }
                {
                    sb.AppendItem(KeywordsTemplate, "KeywordsTemplate");
                }
                {
                    sb.AppendItem(Unknown1, "Unknown1");
                }
                {
                    sb.AppendItem(Unknown2, "Unknown2");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.TraitTemplate = this.TraitTemplate.Combine(rhs.TraitTemplate);
                ret.StatsTemplate = this.StatsTemplate.Combine(rhs.StatsTemplate);
                ret.FactionsTemplate = this.FactionsTemplate.Combine(rhs.FactionsTemplate);
                ret.SpellListTemplate = this.SpellListTemplate.Combine(rhs.SpellListTemplate);
                ret.AiDataTemplate = this.AiDataTemplate.Combine(rhs.AiDataTemplate);
                ret.AiPackagesTemplate = this.AiPackagesTemplate.Combine(rhs.AiPackagesTemplate);
                ret.ModelOrAnimationTemplate = this.ModelOrAnimationTemplate.Combine(rhs.ModelOrAnimationTemplate);
                ret.BaseDataTemplate = this.BaseDataTemplate.Combine(rhs.BaseDataTemplate);
                ret.InventoryTemplate = this.InventoryTemplate.Combine(rhs.InventoryTemplate);
                ret.ScriptTemplate = this.ScriptTemplate.Combine(rhs.ScriptTemplate);
                ret.DefPackListTemplate = this.DefPackListTemplate.Combine(rhs.DefPackListTemplate);
                ret.AttackDataTemplate = this.AttackDataTemplate.Combine(rhs.AttackDataTemplate);
                ret.KeywordsTemplate = this.KeywordsTemplate.Combine(rhs.KeywordsTemplate);
                ret.Unknown1 = this.Unknown1.Combine(rhs.Unknown1);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool TraitTemplate;
            public bool StatsTemplate;
            public bool FactionsTemplate;
            public bool SpellListTemplate;
            public bool AiDataTemplate;
            public bool AiPackagesTemplate;
            public bool ModelOrAnimationTemplate;
            public bool BaseDataTemplate;
            public bool InventoryTemplate;
            public bool ScriptTemplate;
            public bool DefPackListTemplate;
            public bool AttackDataTemplate;
            public bool KeywordsTemplate;
            public bool Unknown1;
            public bool Unknown2;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.TraitTemplate = defaultOn;
                this.StatsTemplate = defaultOn;
                this.FactionsTemplate = defaultOn;
                this.SpellListTemplate = defaultOn;
                this.AiDataTemplate = defaultOn;
                this.AiPackagesTemplate = defaultOn;
                this.ModelOrAnimationTemplate = defaultOn;
                this.BaseDataTemplate = defaultOn;
                this.InventoryTemplate = defaultOn;
                this.ScriptTemplate = defaultOn;
                this.DefPackListTemplate = defaultOn;
                this.AttackDataTemplate = defaultOn;
                this.KeywordsTemplate = defaultOn;
                this.Unknown1 = defaultOn;
                this.Unknown2 = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((TraitTemplate, null));
                ret.Add((StatsTemplate, null));
                ret.Add((FactionsTemplate, null));
                ret.Add((SpellListTemplate, null));
                ret.Add((AiDataTemplate, null));
                ret.Add((AiPackagesTemplate, null));
                ret.Add((ModelOrAnimationTemplate, null));
                ret.Add((BaseDataTemplate, null));
                ret.Add((InventoryTemplate, null));
                ret.Add((ScriptTemplate, null));
                ret.Add((DefPackListTemplate, null));
                ret.Add((AttackDataTemplate, null));
                ret.Add((KeywordsTemplate, null));
                ret.Add((Unknown1, null));
                ret.Add((Unknown2, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => TemplateActorsCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => TemplateActorsSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TemplateActorsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TemplateActorsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static TemplateActors CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new TemplateActors();
            ((TemplateActorsSetterCommon)((ITemplateActorsGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out TemplateActors item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((TemplateActorsSetterCommon)((ITemplateActorsGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static TemplateActors GetNew()
        {
            return new TemplateActors();
        }

    }
    #endregion

    #region Interface
    public partial interface ITemplateActors :
        IFormLinkContainer,
        ILoquiObjectSetter<ITemplateActors>,
        ITemplateActorsGetter
    {
        new IFormLink<INpcTemplateTargetGetter> TraitTemplate { get; set; }
        new IFormLink<INpcTemplateTargetGetter> StatsTemplate { get; set; }
        new IFormLink<INpcTemplateTargetGetter> FactionsTemplate { get; set; }
        new IFormLink<INpcTemplateTargetGetter> SpellListTemplate { get; set; }
        new IFormLink<INpcTemplateTargetGetter> AiDataTemplate { get; set; }
        new IFormLink<INpcTemplateTargetGetter> AiPackagesTemplate { get; set; }
        new IFormLink<INpcTemplateTargetGetter> ModelOrAnimationTemplate { get; set; }
        new IFormLink<INpcTemplateTargetGetter> BaseDataTemplate { get; set; }
        new IFormLink<INpcTemplateTargetGetter> InventoryTemplate { get; set; }
        new IFormLink<INpcTemplateTargetGetter> ScriptTemplate { get; set; }
        new IFormLink<INpcTemplateTargetGetter> DefPackListTemplate { get; set; }
        new IFormLink<INpcTemplateTargetGetter> AttackDataTemplate { get; set; }
        new IFormLink<INpcTemplateTargetGetter> KeywordsTemplate { get; set; }
        new IFormLink<INpcTemplateTargetGetter> Unknown1 { get; set; }
        new IFormLink<INpcTemplateTargetGetter> Unknown2 { get; set; }
    }

    public partial interface ITemplateActorsGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ITemplateActorsGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => TemplateActors_Registration.Instance;
        IFormLinkGetter<INpcTemplateTargetGetter> TraitTemplate { get; }
        IFormLinkGetter<INpcTemplateTargetGetter> StatsTemplate { get; }
        IFormLinkGetter<INpcTemplateTargetGetter> FactionsTemplate { get; }
        IFormLinkGetter<INpcTemplateTargetGetter> SpellListTemplate { get; }
        IFormLinkGetter<INpcTemplateTargetGetter> AiDataTemplate { get; }
        IFormLinkGetter<INpcTemplateTargetGetter> AiPackagesTemplate { get; }
        IFormLinkGetter<INpcTemplateTargetGetter> ModelOrAnimationTemplate { get; }
        IFormLinkGetter<INpcTemplateTargetGetter> BaseDataTemplate { get; }
        IFormLinkGetter<INpcTemplateTargetGetter> InventoryTemplate { get; }
        IFormLinkGetter<INpcTemplateTargetGetter> ScriptTemplate { get; }
        IFormLinkGetter<INpcTemplateTargetGetter> DefPackListTemplate { get; }
        IFormLinkGetter<INpcTemplateTargetGetter> AttackDataTemplate { get; }
        IFormLinkGetter<INpcTemplateTargetGetter> KeywordsTemplate { get; }
        IFormLinkGetter<INpcTemplateTargetGetter> Unknown1 { get; }
        IFormLinkGetter<INpcTemplateTargetGetter> Unknown2 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class TemplateActorsMixIn
    {
        public static void Clear(this ITemplateActors item)
        {
            ((TemplateActorsSetterCommon)((ITemplateActorsGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static TemplateActors.Mask<bool> GetEqualsMask(
            this ITemplateActorsGetter item,
            ITemplateActorsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TemplateActorsCommon)((ITemplateActorsGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ITemplateActorsGetter item,
            string? name = null,
            TemplateActors.Mask<bool>? printMask = null)
        {
            return ((TemplateActorsCommon)((ITemplateActorsGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ITemplateActorsGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            TemplateActors.Mask<bool>? printMask = null)
        {
            ((TemplateActorsCommon)((ITemplateActorsGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ITemplateActorsGetter item,
            ITemplateActorsGetter rhs,
            TemplateActors.TranslationMask? equalsMask = null)
        {
            return ((TemplateActorsCommon)((ITemplateActorsGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ITemplateActors lhs,
            ITemplateActorsGetter rhs)
        {
            ((TemplateActorsSetterTranslationCommon)((ITemplateActorsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ITemplateActors lhs,
            ITemplateActorsGetter rhs,
            TemplateActors.TranslationMask? copyMask = null)
        {
            ((TemplateActorsSetterTranslationCommon)((ITemplateActorsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ITemplateActors lhs,
            ITemplateActorsGetter rhs,
            out TemplateActors.ErrorMask errorMask,
            TemplateActors.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TemplateActorsSetterTranslationCommon)((ITemplateActorsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = TemplateActors.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITemplateActors lhs,
            ITemplateActorsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TemplateActorsSetterTranslationCommon)((ITemplateActorsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static TemplateActors DeepCopy(
            this ITemplateActorsGetter item,
            TemplateActors.TranslationMask? copyMask = null)
        {
            return ((TemplateActorsSetterTranslationCommon)((ITemplateActorsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static TemplateActors DeepCopy(
            this ITemplateActorsGetter item,
            out TemplateActors.ErrorMask errorMask,
            TemplateActors.TranslationMask? copyMask = null)
        {
            return ((TemplateActorsSetterTranslationCommon)((ITemplateActorsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static TemplateActors DeepCopy(
            this ITemplateActorsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TemplateActorsSetterTranslationCommon)((ITemplateActorsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ITemplateActors item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((TemplateActorsSetterCommon)((ITemplateActorsGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum TemplateActors_FieldIndex
    {
        TraitTemplate = 0,
        StatsTemplate = 1,
        FactionsTemplate = 2,
        SpellListTemplate = 3,
        AiDataTemplate = 4,
        AiPackagesTemplate = 5,
        ModelOrAnimationTemplate = 6,
        BaseDataTemplate = 7,
        InventoryTemplate = 8,
        ScriptTemplate = 9,
        DefPackListTemplate = 10,
        AttackDataTemplate = 11,
        KeywordsTemplate = 12,
        Unknown1 = 13,
        Unknown2 = 14,
    }
    #endregion

    #region Registration
    internal partial class TemplateActors_Registration : ILoquiRegistration
    {
        public static readonly TemplateActors_Registration Instance = new TemplateActors_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 15;

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(TemplateActors.Mask<>);

        public static readonly Type ErrorMaskType = typeof(TemplateActors.ErrorMask);

        public static readonly Type ClassType = typeof(TemplateActors);

        public static readonly Type GetterType = typeof(ITemplateActorsGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITemplateActors);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.TemplateActors";

        public const string Name = "TemplateActors";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TPTA;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.TPTA);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(TemplateActorsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class TemplateActorsSetterCommon
    {
        public static readonly TemplateActorsSetterCommon Instance = new TemplateActorsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITemplateActors item)
        {
            ClearPartial();
            item.TraitTemplate.Clear();
            item.StatsTemplate.Clear();
            item.FactionsTemplate.Clear();
            item.SpellListTemplate.Clear();
            item.AiDataTemplate.Clear();
            item.AiPackagesTemplate.Clear();
            item.ModelOrAnimationTemplate.Clear();
            item.BaseDataTemplate.Clear();
            item.InventoryTemplate.Clear();
            item.ScriptTemplate.Clear();
            item.DefPackListTemplate.Clear();
            item.AttackDataTemplate.Clear();
            item.KeywordsTemplate.Clear();
            item.Unknown1.Clear();
            item.Unknown2.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(ITemplateActors obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.TraitTemplate.Relink(mapping);
            obj.StatsTemplate.Relink(mapping);
            obj.FactionsTemplate.Relink(mapping);
            obj.SpellListTemplate.Relink(mapping);
            obj.AiDataTemplate.Relink(mapping);
            obj.AiPackagesTemplate.Relink(mapping);
            obj.ModelOrAnimationTemplate.Relink(mapping);
            obj.BaseDataTemplate.Relink(mapping);
            obj.InventoryTemplate.Relink(mapping);
            obj.ScriptTemplate.Relink(mapping);
            obj.DefPackListTemplate.Relink(mapping);
            obj.AttackDataTemplate.Relink(mapping);
            obj.KeywordsTemplate.Relink(mapping);
            obj.Unknown1.Relink(mapping);
            obj.Unknown2.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ITemplateActors item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.TPTA),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: TemplateActorsBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class TemplateActorsCommon
    {
        public static readonly TemplateActorsCommon Instance = new TemplateActorsCommon();

        public TemplateActors.Mask<bool> GetEqualsMask(
            ITemplateActorsGetter item,
            ITemplateActorsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TemplateActors.Mask<bool>(false);
            ((TemplateActorsCommon)((ITemplateActorsGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITemplateActorsGetter item,
            ITemplateActorsGetter rhs,
            TemplateActors.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.TraitTemplate = item.TraitTemplate.Equals(rhs.TraitTemplate);
            ret.StatsTemplate = item.StatsTemplate.Equals(rhs.StatsTemplate);
            ret.FactionsTemplate = item.FactionsTemplate.Equals(rhs.FactionsTemplate);
            ret.SpellListTemplate = item.SpellListTemplate.Equals(rhs.SpellListTemplate);
            ret.AiDataTemplate = item.AiDataTemplate.Equals(rhs.AiDataTemplate);
            ret.AiPackagesTemplate = item.AiPackagesTemplate.Equals(rhs.AiPackagesTemplate);
            ret.ModelOrAnimationTemplate = item.ModelOrAnimationTemplate.Equals(rhs.ModelOrAnimationTemplate);
            ret.BaseDataTemplate = item.BaseDataTemplate.Equals(rhs.BaseDataTemplate);
            ret.InventoryTemplate = item.InventoryTemplate.Equals(rhs.InventoryTemplate);
            ret.ScriptTemplate = item.ScriptTemplate.Equals(rhs.ScriptTemplate);
            ret.DefPackListTemplate = item.DefPackListTemplate.Equals(rhs.DefPackListTemplate);
            ret.AttackDataTemplate = item.AttackDataTemplate.Equals(rhs.AttackDataTemplate);
            ret.KeywordsTemplate = item.KeywordsTemplate.Equals(rhs.KeywordsTemplate);
            ret.Unknown1 = item.Unknown1.Equals(rhs.Unknown1);
            ret.Unknown2 = item.Unknown2.Equals(rhs.Unknown2);
        }
        
        public string Print(
            ITemplateActorsGetter item,
            string? name = null,
            TemplateActors.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ITemplateActorsGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            TemplateActors.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"TemplateActors =>");
            }
            else
            {
                sb.AppendLine($"{name} (TemplateActors) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ITemplateActorsGetter item,
            StructuredStringBuilder sb,
            TemplateActors.Mask<bool>? printMask = null)
        {
            if (printMask?.TraitTemplate ?? true)
            {
                sb.AppendItem(item.TraitTemplate.FormKey, "TraitTemplate");
            }
            if (printMask?.StatsTemplate ?? true)
            {
                sb.AppendItem(item.StatsTemplate.FormKey, "StatsTemplate");
            }
            if (printMask?.FactionsTemplate ?? true)
            {
                sb.AppendItem(item.FactionsTemplate.FormKey, "FactionsTemplate");
            }
            if (printMask?.SpellListTemplate ?? true)
            {
                sb.AppendItem(item.SpellListTemplate.FormKey, "SpellListTemplate");
            }
            if (printMask?.AiDataTemplate ?? true)
            {
                sb.AppendItem(item.AiDataTemplate.FormKey, "AiDataTemplate");
            }
            if (printMask?.AiPackagesTemplate ?? true)
            {
                sb.AppendItem(item.AiPackagesTemplate.FormKey, "AiPackagesTemplate");
            }
            if (printMask?.ModelOrAnimationTemplate ?? true)
            {
                sb.AppendItem(item.ModelOrAnimationTemplate.FormKey, "ModelOrAnimationTemplate");
            }
            if (printMask?.BaseDataTemplate ?? true)
            {
                sb.AppendItem(item.BaseDataTemplate.FormKey, "BaseDataTemplate");
            }
            if (printMask?.InventoryTemplate ?? true)
            {
                sb.AppendItem(item.InventoryTemplate.FormKey, "InventoryTemplate");
            }
            if (printMask?.ScriptTemplate ?? true)
            {
                sb.AppendItem(item.ScriptTemplate.FormKey, "ScriptTemplate");
            }
            if (printMask?.DefPackListTemplate ?? true)
            {
                sb.AppendItem(item.DefPackListTemplate.FormKey, "DefPackListTemplate");
            }
            if (printMask?.AttackDataTemplate ?? true)
            {
                sb.AppendItem(item.AttackDataTemplate.FormKey, "AttackDataTemplate");
            }
            if (printMask?.KeywordsTemplate ?? true)
            {
                sb.AppendItem(item.KeywordsTemplate.FormKey, "KeywordsTemplate");
            }
            if (printMask?.Unknown1 ?? true)
            {
                sb.AppendItem(item.Unknown1.FormKey, "Unknown1");
            }
            if (printMask?.Unknown2 ?? true)
            {
                sb.AppendItem(item.Unknown2.FormKey, "Unknown2");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITemplateActorsGetter? lhs,
            ITemplateActorsGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.TraitTemplate) ?? true))
            {
                if (!lhs.TraitTemplate.Equals(rhs.TraitTemplate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.StatsTemplate) ?? true))
            {
                if (!lhs.StatsTemplate.Equals(rhs.StatsTemplate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.FactionsTemplate) ?? true))
            {
                if (!lhs.FactionsTemplate.Equals(rhs.FactionsTemplate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.SpellListTemplate) ?? true))
            {
                if (!lhs.SpellListTemplate.Equals(rhs.SpellListTemplate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.AiDataTemplate) ?? true))
            {
                if (!lhs.AiDataTemplate.Equals(rhs.AiDataTemplate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.AiPackagesTemplate) ?? true))
            {
                if (!lhs.AiPackagesTemplate.Equals(rhs.AiPackagesTemplate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.ModelOrAnimationTemplate) ?? true))
            {
                if (!lhs.ModelOrAnimationTemplate.Equals(rhs.ModelOrAnimationTemplate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.BaseDataTemplate) ?? true))
            {
                if (!lhs.BaseDataTemplate.Equals(rhs.BaseDataTemplate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.InventoryTemplate) ?? true))
            {
                if (!lhs.InventoryTemplate.Equals(rhs.InventoryTemplate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.ScriptTemplate) ?? true))
            {
                if (!lhs.ScriptTemplate.Equals(rhs.ScriptTemplate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.DefPackListTemplate) ?? true))
            {
                if (!lhs.DefPackListTemplate.Equals(rhs.DefPackListTemplate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.AttackDataTemplate) ?? true))
            {
                if (!lhs.AttackDataTemplate.Equals(rhs.AttackDataTemplate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.KeywordsTemplate) ?? true))
            {
                if (!lhs.KeywordsTemplate.Equals(rhs.KeywordsTemplate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.Unknown1) ?? true))
            {
                if (!lhs.Unknown1.Equals(rhs.Unknown1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.Unknown2) ?? true))
            {
                if (!lhs.Unknown2.Equals(rhs.Unknown2)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ITemplateActorsGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.TraitTemplate);
            hash.Add(item.StatsTemplate);
            hash.Add(item.FactionsTemplate);
            hash.Add(item.SpellListTemplate);
            hash.Add(item.AiDataTemplate);
            hash.Add(item.AiPackagesTemplate);
            hash.Add(item.ModelOrAnimationTemplate);
            hash.Add(item.BaseDataTemplate);
            hash.Add(item.InventoryTemplate);
            hash.Add(item.ScriptTemplate);
            hash.Add(item.DefPackListTemplate);
            hash.Add(item.AttackDataTemplate);
            hash.Add(item.KeywordsTemplate);
            hash.Add(item.Unknown1);
            hash.Add(item.Unknown2);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return TemplateActors.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ITemplateActorsGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.TraitTemplate);
            yield return FormLinkInformation.Factory(obj.StatsTemplate);
            yield return FormLinkInformation.Factory(obj.FactionsTemplate);
            yield return FormLinkInformation.Factory(obj.SpellListTemplate);
            yield return FormLinkInformation.Factory(obj.AiDataTemplate);
            yield return FormLinkInformation.Factory(obj.AiPackagesTemplate);
            yield return FormLinkInformation.Factory(obj.ModelOrAnimationTemplate);
            yield return FormLinkInformation.Factory(obj.BaseDataTemplate);
            yield return FormLinkInformation.Factory(obj.InventoryTemplate);
            yield return FormLinkInformation.Factory(obj.ScriptTemplate);
            yield return FormLinkInformation.Factory(obj.DefPackListTemplate);
            yield return FormLinkInformation.Factory(obj.AttackDataTemplate);
            yield return FormLinkInformation.Factory(obj.KeywordsTemplate);
            yield return FormLinkInformation.Factory(obj.Unknown1);
            yield return FormLinkInformation.Factory(obj.Unknown2);
            yield break;
        }
        
        #endregion
        
    }
    internal partial class TemplateActorsSetterTranslationCommon
    {
        public static readonly TemplateActorsSetterTranslationCommon Instance = new TemplateActorsSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ITemplateActors item,
            ITemplateActorsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.TraitTemplate) ?? true))
            {
                item.TraitTemplate.SetTo(rhs.TraitTemplate.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.StatsTemplate) ?? true))
            {
                item.StatsTemplate.SetTo(rhs.StatsTemplate.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.FactionsTemplate) ?? true))
            {
                item.FactionsTemplate.SetTo(rhs.FactionsTemplate.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.SpellListTemplate) ?? true))
            {
                item.SpellListTemplate.SetTo(rhs.SpellListTemplate.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.AiDataTemplate) ?? true))
            {
                item.AiDataTemplate.SetTo(rhs.AiDataTemplate.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.AiPackagesTemplate) ?? true))
            {
                item.AiPackagesTemplate.SetTo(rhs.AiPackagesTemplate.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.ModelOrAnimationTemplate) ?? true))
            {
                item.ModelOrAnimationTemplate.SetTo(rhs.ModelOrAnimationTemplate.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.BaseDataTemplate) ?? true))
            {
                item.BaseDataTemplate.SetTo(rhs.BaseDataTemplate.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.InventoryTemplate) ?? true))
            {
                item.InventoryTemplate.SetTo(rhs.InventoryTemplate.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.ScriptTemplate) ?? true))
            {
                item.ScriptTemplate.SetTo(rhs.ScriptTemplate.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.DefPackListTemplate) ?? true))
            {
                item.DefPackListTemplate.SetTo(rhs.DefPackListTemplate.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.AttackDataTemplate) ?? true))
            {
                item.AttackDataTemplate.SetTo(rhs.AttackDataTemplate.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.KeywordsTemplate) ?? true))
            {
                item.KeywordsTemplate.SetTo(rhs.KeywordsTemplate.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.Unknown1) ?? true))
            {
                item.Unknown1.SetTo(rhs.Unknown1.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)TemplateActors_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2.SetTo(rhs.Unknown2.FormKey);
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ITemplateActors item,
            ITemplateActorsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public TemplateActors DeepCopy(
            ITemplateActorsGetter item,
            TemplateActors.TranslationMask? copyMask = null)
        {
            TemplateActors ret = (TemplateActors)((TemplateActorsCommon)((ITemplateActorsGetter)item).CommonInstance()!).GetNew();
            ((TemplateActorsSetterTranslationCommon)((ITemplateActorsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public TemplateActors DeepCopy(
            ITemplateActorsGetter item,
            out TemplateActors.ErrorMask errorMask,
            TemplateActors.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            TemplateActors ret = (TemplateActors)((TemplateActorsCommon)((ITemplateActorsGetter)item).CommonInstance()!).GetNew();
            ((TemplateActorsSetterTranslationCommon)((ITemplateActorsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = TemplateActors.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public TemplateActors DeepCopy(
            ITemplateActorsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            TemplateActors ret = (TemplateActors)((TemplateActorsCommon)((ITemplateActorsGetter)item).CommonInstance()!).GetNew();
            ((TemplateActorsSetterTranslationCommon)((ITemplateActorsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class TemplateActors
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TemplateActors_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => TemplateActors_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TemplateActorsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return TemplateActorsSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TemplateActorsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITemplateActorsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ITemplateActorsGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ITemplateActorsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class TemplateActorsBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly TemplateActorsBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ITemplateActorsGetter item,
            MutagenWriter writer)
        {
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.TraitTemplate);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.StatsTemplate);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FactionsTemplate);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SpellListTemplate);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AiDataTemplate);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AiPackagesTemplate);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ModelOrAnimationTemplate);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BaseDataTemplate);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.InventoryTemplate);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ScriptTemplate);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DefPackListTemplate);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AttackDataTemplate);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.KeywordsTemplate);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Unknown1);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Unknown2);
        }

        public void Write(
            MutagenWriter writer,
            ITemplateActorsGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.TPTA),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ITemplateActorsGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class TemplateActorsBinaryCreateTranslation
    {
        public static readonly TemplateActorsBinaryCreateTranslation Instance = new TemplateActorsBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ITemplateActors item,
            MutagenFrame frame)
        {
            item.TraitTemplate.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.StatsTemplate.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.FactionsTemplate.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.SpellListTemplate.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.AiDataTemplate.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.AiPackagesTemplate.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.ModelOrAnimationTemplate.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.BaseDataTemplate.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.InventoryTemplate.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.ScriptTemplate.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.DefPackListTemplate.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.AttackDataTemplate.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.KeywordsTemplate.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.Unknown1.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.Unknown2.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class TemplateActorsBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ITemplateActorsGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TemplateActorsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class TemplateActorsBinaryOverlay :
        PluginBinaryOverlay,
        ITemplateActorsGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TemplateActors_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => TemplateActors_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TemplateActorsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TemplateActorsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITemplateActorsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ITemplateActorsGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ITemplateActorsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => TemplateActorsCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TemplateActorsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TemplateActorsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public IFormLinkGetter<INpcTemplateTargetGetter> TraitTemplate => FormLinkBinaryTranslation.Instance.OverlayFactory<INpcTemplateTargetGetter>(_package, _structData.Span.Slice(0x0, 0x4));
        public IFormLinkGetter<INpcTemplateTargetGetter> StatsTemplate => FormLinkBinaryTranslation.Instance.OverlayFactory<INpcTemplateTargetGetter>(_package, _structData.Span.Slice(0x4, 0x4));
        public IFormLinkGetter<INpcTemplateTargetGetter> FactionsTemplate => FormLinkBinaryTranslation.Instance.OverlayFactory<INpcTemplateTargetGetter>(_package, _structData.Span.Slice(0x8, 0x4));
        public IFormLinkGetter<INpcTemplateTargetGetter> SpellListTemplate => FormLinkBinaryTranslation.Instance.OverlayFactory<INpcTemplateTargetGetter>(_package, _structData.Span.Slice(0xC, 0x4));
        public IFormLinkGetter<INpcTemplateTargetGetter> AiDataTemplate => FormLinkBinaryTranslation.Instance.OverlayFactory<INpcTemplateTargetGetter>(_package, _structData.Span.Slice(0x10, 0x4));
        public IFormLinkGetter<INpcTemplateTargetGetter> AiPackagesTemplate => FormLinkBinaryTranslation.Instance.OverlayFactory<INpcTemplateTargetGetter>(_package, _structData.Span.Slice(0x14, 0x4));
        public IFormLinkGetter<INpcTemplateTargetGetter> ModelOrAnimationTemplate => FormLinkBinaryTranslation.Instance.OverlayFactory<INpcTemplateTargetGetter>(_package, _structData.Span.Slice(0x18, 0x4));
        public IFormLinkGetter<INpcTemplateTargetGetter> BaseDataTemplate => FormLinkBinaryTranslation.Instance.OverlayFactory<INpcTemplateTargetGetter>(_package, _structData.Span.Slice(0x1C, 0x4));
        public IFormLinkGetter<INpcTemplateTargetGetter> InventoryTemplate => FormLinkBinaryTranslation.Instance.OverlayFactory<INpcTemplateTargetGetter>(_package, _structData.Span.Slice(0x20, 0x4));
        public IFormLinkGetter<INpcTemplateTargetGetter> ScriptTemplate => FormLinkBinaryTranslation.Instance.OverlayFactory<INpcTemplateTargetGetter>(_package, _structData.Span.Slice(0x24, 0x4));
        public IFormLinkGetter<INpcTemplateTargetGetter> DefPackListTemplate => FormLinkBinaryTranslation.Instance.OverlayFactory<INpcTemplateTargetGetter>(_package, _structData.Span.Slice(0x28, 0x4));
        public IFormLinkGetter<INpcTemplateTargetGetter> AttackDataTemplate => FormLinkBinaryTranslation.Instance.OverlayFactory<INpcTemplateTargetGetter>(_package, _structData.Span.Slice(0x2C, 0x4));
        public IFormLinkGetter<INpcTemplateTargetGetter> KeywordsTemplate => FormLinkBinaryTranslation.Instance.OverlayFactory<INpcTemplateTargetGetter>(_package, _structData.Span.Slice(0x30, 0x4));
        public IFormLinkGetter<INpcTemplateTargetGetter> Unknown1 => FormLinkBinaryTranslation.Instance.OverlayFactory<INpcTemplateTargetGetter>(_package, _structData.Span.Slice(0x34, 0x4));
        public IFormLinkGetter<INpcTemplateTargetGetter> Unknown2 => FormLinkBinaryTranslation.Instance.OverlayFactory<INpcTemplateTargetGetter>(_package, _structData.Span.Slice(0x38, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected TemplateActorsBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ITemplateActorsGetter TemplateActorsFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x3C,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new TemplateActorsBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x3C + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ITemplateActorsGetter TemplateActorsFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return TemplateActorsFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TemplateActorsMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ITemplateActorsGetter rhs) return false;
            return ((TemplateActorsCommon)((ITemplateActorsGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITemplateActorsGetter? obj)
        {
            return ((TemplateActorsCommon)((ITemplateActorsGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TemplateActorsCommon)((ITemplateActorsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

