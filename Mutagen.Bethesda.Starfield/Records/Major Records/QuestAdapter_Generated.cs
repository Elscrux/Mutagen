/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class QuestAdapter :
        AVirtualMachineAdapter,
        IEquatable<IQuestAdapterGetter>,
        ILoquiObjectSetter<QuestAdapter>,
        IQuestAdapter
    {
        #region Ctor
        public QuestAdapter()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Versioning
        public QuestAdapter.VersioningBreaks Versioning { get; set; } = default(QuestAdapter.VersioningBreaks);
        #endregion
        #region ExtraBindDataVersion
        public static readonly Byte ExtraBindDataVersionDefault = 3;
        public Byte ExtraBindDataVersion { get; set; } = ExtraBindDataVersionDefault;
        #endregion
        #region Script
        public ScriptEntry Script { get; set; } = new ScriptEntry();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IScriptEntryGetter IQuestAdapterGetter.Script => Script;
        #endregion
        #region Fragments
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<QuestScriptFragment> _Fragments = new ExtendedList<QuestScriptFragment>();
        public ExtendedList<QuestScriptFragment> Fragments
        {
            get => this._Fragments;
            init => this._Fragments = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IQuestScriptFragmentGetter> IQuestAdapterGetter.Fragments => _Fragments;
        #endregion

        #endregion
        #region Aliases
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<QuestFragmentAlias> _Aliases = new ExtendedList<QuestFragmentAlias>();
        public ExtendedList<QuestFragmentAlias> Aliases
        {
            get => this._Aliases;
            init => this._Aliases = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IQuestFragmentAliasGetter> IQuestAdapterGetter.Aliases => _Aliases;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            QuestAdapterMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IQuestAdapterGetter rhs) return false;
            return ((QuestAdapterCommon)((IQuestAdapterGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IQuestAdapterGetter? obj)
        {
            return ((QuestAdapterCommon)((IQuestAdapterGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((QuestAdapterCommon)((IQuestAdapterGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AVirtualMachineAdapter.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Versioning = initialValue;
                this.ExtraBindDataVersion = initialValue;
                this.Script = new MaskItem<TItem, ScriptEntry.Mask<TItem>?>(initialValue, new ScriptEntry.Mask<TItem>(initialValue));
                this.Fragments = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestScriptFragment.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, QuestScriptFragment.Mask<TItem>?>>());
                this.Aliases = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestFragmentAlias.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, QuestFragmentAlias.Mask<TItem>?>>());
            }

            public Mask(
                TItem Version,
                TItem ObjectFormat,
                TItem Scripts,
                TItem Versioning,
                TItem ExtraBindDataVersion,
                TItem Script,
                TItem Fragments,
                TItem Aliases)
            : base(
                Version: Version,
                ObjectFormat: ObjectFormat,
                Scripts: Scripts)
            {
                this.Versioning = Versioning;
                this.ExtraBindDataVersion = ExtraBindDataVersion;
                this.Script = new MaskItem<TItem, ScriptEntry.Mask<TItem>?>(Script, new ScriptEntry.Mask<TItem>(Script));
                this.Fragments = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestScriptFragment.Mask<TItem>?>>?>(Fragments, Enumerable.Empty<MaskItemIndexed<TItem, QuestScriptFragment.Mask<TItem>?>>());
                this.Aliases = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestFragmentAlias.Mask<TItem>?>>?>(Aliases, Enumerable.Empty<MaskItemIndexed<TItem, QuestFragmentAlias.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Versioning;
            public TItem ExtraBindDataVersion;
            public MaskItem<TItem, ScriptEntry.Mask<TItem>?>? Script { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestScriptFragment.Mask<TItem>?>>?>? Fragments;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestFragmentAlias.Mask<TItem>?>>?>? Aliases;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Versioning, rhs.Versioning)) return false;
                if (!object.Equals(this.ExtraBindDataVersion, rhs.ExtraBindDataVersion)) return false;
                if (!object.Equals(this.Script, rhs.Script)) return false;
                if (!object.Equals(this.Fragments, rhs.Fragments)) return false;
                if (!object.Equals(this.Aliases, rhs.Aliases)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Versioning);
                hash.Add(this.ExtraBindDataVersion);
                hash.Add(this.Script);
                hash.Add(this.Fragments);
                hash.Add(this.Aliases);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Versioning)) return false;
                if (!eval(this.ExtraBindDataVersion)) return false;
                if (Script != null)
                {
                    if (!eval(this.Script.Overall)) return false;
                    if (this.Script.Specific != null && !this.Script.Specific.All(eval)) return false;
                }
                if (this.Fragments != null)
                {
                    if (!eval(this.Fragments.Overall)) return false;
                    if (this.Fragments.Specific != null)
                    {
                        foreach (var item in this.Fragments.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Aliases != null)
                {
                    if (!eval(this.Aliases.Overall)) return false;
                    if (this.Aliases.Specific != null)
                    {
                        foreach (var item in this.Aliases.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Versioning)) return true;
                if (eval(this.ExtraBindDataVersion)) return true;
                if (Script != null)
                {
                    if (eval(this.Script.Overall)) return true;
                    if (this.Script.Specific != null && this.Script.Specific.Any(eval)) return true;
                }
                if (this.Fragments != null)
                {
                    if (eval(this.Fragments.Overall)) return true;
                    if (this.Fragments.Specific != null)
                    {
                        foreach (var item in this.Fragments.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Aliases != null)
                {
                    if (eval(this.Aliases.Overall)) return true;
                    if (this.Aliases.Specific != null)
                    {
                        foreach (var item in this.Aliases.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new QuestAdapter.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Versioning = eval(this.Versioning);
                obj.ExtraBindDataVersion = eval(this.ExtraBindDataVersion);
                obj.Script = this.Script == null ? null : new MaskItem<R, ScriptEntry.Mask<R>?>(eval(this.Script.Overall), this.Script.Specific?.Translate(eval));
                if (Fragments != null)
                {
                    obj.Fragments = new MaskItem<R, IEnumerable<MaskItemIndexed<R, QuestScriptFragment.Mask<R>?>>?>(eval(this.Fragments.Overall), Enumerable.Empty<MaskItemIndexed<R, QuestScriptFragment.Mask<R>?>>());
                    if (Fragments.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, QuestScriptFragment.Mask<R>?>>();
                        obj.Fragments.Specific = l;
                        foreach (var item in Fragments.Specific)
                        {
                            MaskItemIndexed<R, QuestScriptFragment.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, QuestScriptFragment.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Aliases != null)
                {
                    obj.Aliases = new MaskItem<R, IEnumerable<MaskItemIndexed<R, QuestFragmentAlias.Mask<R>?>>?>(eval(this.Aliases.Overall), Enumerable.Empty<MaskItemIndexed<R, QuestFragmentAlias.Mask<R>?>>());
                    if (Aliases.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, QuestFragmentAlias.Mask<R>?>>();
                        obj.Aliases.Specific = l;
                        foreach (var item in Aliases.Specific)
                        {
                            MaskItemIndexed<R, QuestFragmentAlias.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, QuestFragmentAlias.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(QuestAdapter.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, QuestAdapter.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(QuestAdapter.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Versioning ?? true)
                    {
                        sb.AppendItem(Versioning, "Versioning");
                    }
                    if (printMask?.ExtraBindDataVersion ?? true)
                    {
                        sb.AppendItem(ExtraBindDataVersion, "ExtraBindDataVersion");
                    }
                    if (printMask?.Script?.Overall ?? true)
                    {
                        Script?.Print(sb);
                    }
                    if ((printMask?.Fragments?.Overall ?? true)
                        && Fragments is {} FragmentsItem)
                    {
                        sb.AppendLine("Fragments =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(FragmentsItem.Overall);
                            if (FragmentsItem.Specific != null)
                            {
                                foreach (var subItem in FragmentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Aliases?.Overall ?? true)
                        && Aliases is {} AliasesItem)
                    {
                        sb.AppendLine("Aliases =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(AliasesItem.Overall);
                            if (AliasesItem.Specific != null)
                            {
                                foreach (var subItem in AliasesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            AVirtualMachineAdapter.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Versioning;
            public Exception? ExtraBindDataVersion;
            public MaskItem<Exception?, ScriptEntry.ErrorMask?>? Script;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestScriptFragment.ErrorMask?>>?>? Fragments;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestFragmentAlias.ErrorMask?>>?>? Aliases;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                QuestAdapter_FieldIndex enu = (QuestAdapter_FieldIndex)index;
                switch (enu)
                {
                    case QuestAdapter_FieldIndex.Versioning:
                        return Versioning;
                    case QuestAdapter_FieldIndex.ExtraBindDataVersion:
                        return ExtraBindDataVersion;
                    case QuestAdapter_FieldIndex.Script:
                        return Script;
                    case QuestAdapter_FieldIndex.Fragments:
                        return Fragments;
                    case QuestAdapter_FieldIndex.Aliases:
                        return Aliases;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                QuestAdapter_FieldIndex enu = (QuestAdapter_FieldIndex)index;
                switch (enu)
                {
                    case QuestAdapter_FieldIndex.Versioning:
                        this.Versioning = ex;
                        break;
                    case QuestAdapter_FieldIndex.ExtraBindDataVersion:
                        this.ExtraBindDataVersion = ex;
                        break;
                    case QuestAdapter_FieldIndex.Script:
                        this.Script = new MaskItem<Exception?, ScriptEntry.ErrorMask?>(ex, null);
                        break;
                    case QuestAdapter_FieldIndex.Fragments:
                        this.Fragments = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestScriptFragment.ErrorMask?>>?>(ex, null);
                        break;
                    case QuestAdapter_FieldIndex.Aliases:
                        this.Aliases = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestFragmentAlias.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                QuestAdapter_FieldIndex enu = (QuestAdapter_FieldIndex)index;
                switch (enu)
                {
                    case QuestAdapter_FieldIndex.Versioning:
                        this.Versioning = (Exception?)obj;
                        break;
                    case QuestAdapter_FieldIndex.ExtraBindDataVersion:
                        this.ExtraBindDataVersion = (Exception?)obj;
                        break;
                    case QuestAdapter_FieldIndex.Script:
                        this.Script = (MaskItem<Exception?, ScriptEntry.ErrorMask?>?)obj;
                        break;
                    case QuestAdapter_FieldIndex.Fragments:
                        this.Fragments = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestScriptFragment.ErrorMask?>>?>)obj;
                        break;
                    case QuestAdapter_FieldIndex.Aliases:
                        this.Aliases = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestFragmentAlias.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Versioning != null) return true;
                if (ExtraBindDataVersion != null) return true;
                if (Script != null) return true;
                if (Fragments != null) return true;
                if (Aliases != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Versioning, "Versioning");
                }
                {
                    sb.AppendItem(ExtraBindDataVersion, "ExtraBindDataVersion");
                }
                Script?.Print(sb);
                if (Fragments is {} FragmentsItem)
                {
                    sb.AppendLine("Fragments =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(FragmentsItem.Overall);
                        if (FragmentsItem.Specific != null)
                        {
                            foreach (var subItem in FragmentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Aliases is {} AliasesItem)
                {
                    sb.AppendLine("Aliases =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(AliasesItem.Overall);
                        if (AliasesItem.Specific != null)
                        {
                            foreach (var subItem in AliasesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Versioning = this.Versioning.Combine(rhs.Versioning);
                ret.ExtraBindDataVersion = this.ExtraBindDataVersion.Combine(rhs.ExtraBindDataVersion);
                ret.Script = this.Script.Combine(rhs.Script, (l, r) => l.Combine(r));
                ret.Fragments = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestScriptFragment.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Fragments?.Overall, rhs.Fragments?.Overall), Noggog.ExceptionExt.Combine(this.Fragments?.Specific, rhs.Fragments?.Specific));
                ret.Aliases = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestFragmentAlias.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Aliases?.Overall, rhs.Aliases?.Overall), Noggog.ExceptionExt.Combine(this.Aliases?.Specific, rhs.Aliases?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AVirtualMachineAdapter.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Versioning;
            public bool ExtraBindDataVersion;
            public ScriptEntry.TranslationMask? Script;
            public QuestScriptFragment.TranslationMask? Fragments;
            public QuestFragmentAlias.TranslationMask? Aliases;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Versioning = defaultOn;
                this.ExtraBindDataVersion = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Versioning, null));
                ret.Add((ExtraBindDataVersion, null));
                ret.Add((Script != null ? Script.OnOverall : DefaultOn, Script?.GetCrystal()));
                ret.Add((Fragments == null ? DefaultOn : !Fragments.GetCrystal().CopyNothing, Fragments?.GetCrystal()));
                ret.Add((Aliases == null ? DefaultOn : !Aliases.GetCrystal().CopyNothing, Aliases?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        [Flags]
        public enum VersioningBreaks
        {
            Break0 = 1
        }
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => QuestAdapterCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => QuestAdapterSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => QuestAdapterBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((QuestAdapterBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static QuestAdapter CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new QuestAdapter();
            ((QuestAdapterSetterCommon)((IQuestAdapterGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out QuestAdapter item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((QuestAdapterSetterCommon)((IQuestAdapterGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new QuestAdapter GetNew()
        {
            return new QuestAdapter();
        }

    }
    #endregion

    #region Interface
    public partial interface IQuestAdapter :
        IAVirtualMachineAdapter,
        IFormLinkContainer,
        ILoquiObjectSetter<IQuestAdapter>,
        IQuestAdapterGetter
    {
        new QuestAdapter.VersioningBreaks Versioning { get; set; }
        new Byte ExtraBindDataVersion { get; set; }
        new ScriptEntry Script { get; set; }
        new ExtendedList<QuestScriptFragment> Fragments { get; }
        new ExtendedList<QuestFragmentAlias> Aliases { get; }
    }

    public partial interface IQuestAdapterGetter :
        IAVirtualMachineAdapterGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IQuestAdapterGetter>
    {
        static new ILoquiRegistration StaticRegistration => QuestAdapter_Registration.Instance;
        QuestAdapter.VersioningBreaks Versioning { get; }
        Byte ExtraBindDataVersion { get; }
        IScriptEntryGetter Script { get; }
        IReadOnlyList<IQuestScriptFragmentGetter> Fragments { get; }
        IReadOnlyList<IQuestFragmentAliasGetter> Aliases { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class QuestAdapterMixIn
    {
        public static void Clear(this IQuestAdapter item)
        {
            ((QuestAdapterSetterCommon)((IQuestAdapterGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static QuestAdapter.Mask<bool> GetEqualsMask(
            this IQuestAdapterGetter item,
            IQuestAdapterGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((QuestAdapterCommon)((IQuestAdapterGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IQuestAdapterGetter item,
            string? name = null,
            QuestAdapter.Mask<bool>? printMask = null)
        {
            return ((QuestAdapterCommon)((IQuestAdapterGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IQuestAdapterGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            QuestAdapter.Mask<bool>? printMask = null)
        {
            ((QuestAdapterCommon)((IQuestAdapterGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IQuestAdapterGetter item,
            IQuestAdapterGetter rhs,
            QuestAdapter.TranslationMask? equalsMask = null)
        {
            return ((QuestAdapterCommon)((IQuestAdapterGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IQuestAdapter lhs,
            IQuestAdapterGetter rhs,
            out QuestAdapter.ErrorMask errorMask,
            QuestAdapter.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((QuestAdapterSetterTranslationCommon)((IQuestAdapterGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = QuestAdapter.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IQuestAdapter lhs,
            IQuestAdapterGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((QuestAdapterSetterTranslationCommon)((IQuestAdapterGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static QuestAdapter DeepCopy(
            this IQuestAdapterGetter item,
            QuestAdapter.TranslationMask? copyMask = null)
        {
            return ((QuestAdapterSetterTranslationCommon)((IQuestAdapterGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static QuestAdapter DeepCopy(
            this IQuestAdapterGetter item,
            out QuestAdapter.ErrorMask errorMask,
            QuestAdapter.TranslationMask? copyMask = null)
        {
            return ((QuestAdapterSetterTranslationCommon)((IQuestAdapterGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static QuestAdapter DeepCopy(
            this IQuestAdapterGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((QuestAdapterSetterTranslationCommon)((IQuestAdapterGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IQuestAdapter item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((QuestAdapterSetterCommon)((IQuestAdapterGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum QuestAdapter_FieldIndex
    {
        Version = 0,
        ObjectFormat = 1,
        Scripts = 2,
        Versioning = 3,
        ExtraBindDataVersion = 4,
        Script = 5,
        Fragments = 6,
        Aliases = 7,
    }
    #endregion

    #region Registration
    internal partial class QuestAdapter_Registration : ILoquiRegistration
    {
        public static readonly QuestAdapter_Registration Instance = new QuestAdapter_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(QuestAdapter.Mask<>);

        public static readonly Type ErrorMaskType = typeof(QuestAdapter.ErrorMask);

        public static readonly Type ClassType = typeof(QuestAdapter);

        public static readonly Type GetterType = typeof(IQuestAdapterGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IQuestAdapter);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.QuestAdapter";

        public const string Name = "QuestAdapter";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.VMAD;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.VMAD);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(QuestAdapterBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class QuestAdapterSetterCommon : AVirtualMachineAdapterSetterCommon
    {
        public new static readonly QuestAdapterSetterCommon Instance = new QuestAdapterSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IQuestAdapter item)
        {
            ClearPartial();
            item.Versioning = default(QuestAdapter.VersioningBreaks);
            item.ExtraBindDataVersion = QuestAdapter.ExtraBindDataVersionDefault;
            item.Script.Clear();
            item.Fragments.Clear();
            item.Aliases.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IAVirtualMachineAdapter item)
        {
            Clear(item: (IQuestAdapter)item);
        }
        
        #region Mutagen
        public void RemapLinks(IQuestAdapter obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Script.RemapLinks(mapping);
            obj.Aliases.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IQuestAdapter item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.VMAD),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: QuestAdapterBinaryCreateTranslation.FillBinaryStructs);
        }
        
        public override void CopyInFromBinary(
            IAVirtualMachineAdapter item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (QuestAdapter)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class QuestAdapterCommon : AVirtualMachineAdapterCommon
    {
        public new static readonly QuestAdapterCommon Instance = new QuestAdapterCommon();

        public QuestAdapter.Mask<bool> GetEqualsMask(
            IQuestAdapterGetter item,
            IQuestAdapterGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new QuestAdapter.Mask<bool>(false);
            ((QuestAdapterCommon)((IQuestAdapterGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IQuestAdapterGetter item,
            IQuestAdapterGetter rhs,
            QuestAdapter.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Versioning = item.Versioning == rhs.Versioning;
            ret.ExtraBindDataVersion = item.ExtraBindDataVersion == rhs.ExtraBindDataVersion;
            ret.Script = MaskItemExt.Factory(item.Script.GetEqualsMask(rhs.Script, include), include);
            ret.Fragments = item.Fragments.CollectionEqualsHelper(
                rhs.Fragments,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Aliases = item.Aliases.CollectionEqualsHelper(
                rhs.Aliases,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IQuestAdapterGetter item,
            string? name = null,
            QuestAdapter.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IQuestAdapterGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            QuestAdapter.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"QuestAdapter =>");
            }
            else
            {
                sb.AppendLine($"{name} (QuestAdapter) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IQuestAdapterGetter item,
            StructuredStringBuilder sb,
            QuestAdapter.Mask<bool>? printMask = null)
        {
            AVirtualMachineAdapterCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Versioning ?? true)
            {
                sb.AppendItem(item.Versioning, "Versioning");
            }
            if (printMask?.ExtraBindDataVersion ?? true)
            {
                sb.AppendItem(item.ExtraBindDataVersion, "ExtraBindDataVersion");
            }
            if (printMask?.Script?.Overall ?? true)
            {
                item.Script?.Print(sb, "Script");
            }
            if (printMask?.Fragments?.Overall ?? true)
            {
                sb.AppendLine("Fragments =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Fragments)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.Aliases?.Overall ?? true)
            {
                sb.AppendLine("Aliases =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Aliases)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static QuestAdapter_FieldIndex ConvertFieldIndex(AVirtualMachineAdapter_FieldIndex index)
        {
            switch (index)
            {
                case AVirtualMachineAdapter_FieldIndex.Version:
                    return (QuestAdapter_FieldIndex)((int)index);
                case AVirtualMachineAdapter_FieldIndex.ObjectFormat:
                    return (QuestAdapter_FieldIndex)((int)index);
                case AVirtualMachineAdapter_FieldIndex.Scripts:
                    return (QuestAdapter_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IQuestAdapterGetter? lhs,
            IQuestAdapterGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAVirtualMachineAdapterGetter)lhs, (IAVirtualMachineAdapterGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)QuestAdapter_FieldIndex.Versioning) ?? true))
            {
                if (lhs.Versioning != rhs.Versioning) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestAdapter_FieldIndex.ExtraBindDataVersion) ?? true))
            {
                if (lhs.ExtraBindDataVersion != rhs.ExtraBindDataVersion) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestAdapter_FieldIndex.Script) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Script, rhs.Script, out var lhsScript, out var rhsScript, out var isScriptEqual))
                {
                    if (!((ScriptEntryCommon)((IScriptEntryGetter)lhsScript).CommonInstance()!).Equals(lhsScript, rhsScript, equalsMask?.GetSubCrystal((int)QuestAdapter_FieldIndex.Script))) return false;
                }
                else if (!isScriptEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestAdapter_FieldIndex.Fragments) ?? true))
            {
                if (!lhs.Fragments.SequenceEqual(rhs.Fragments, (l, r) => ((QuestScriptFragmentCommon)((IQuestScriptFragmentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)QuestAdapter_FieldIndex.Fragments)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestAdapter_FieldIndex.Aliases) ?? true))
            {
                if (!lhs.Aliases.SequenceEqual(rhs.Aliases, (l, r) => ((QuestFragmentAliasCommon)((IQuestFragmentAliasGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)QuestAdapter_FieldIndex.Aliases)))) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAVirtualMachineAdapterGetter? lhs,
            IAVirtualMachineAdapterGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IQuestAdapterGetter?)lhs,
                rhs: rhs as IQuestAdapterGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IQuestAdapterGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Versioning);
            hash.Add(item.ExtraBindDataVersion);
            hash.Add(item.Script);
            hash.Add(item.Fragments);
            hash.Add(item.Aliases);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAVirtualMachineAdapterGetter item)
        {
            return GetHashCode(item: (IQuestAdapterGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return QuestAdapter.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IQuestAdapterGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Script is IFormLinkContainerGetter ScriptlinkCont)
            {
                foreach (var item in ScriptlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Aliases.WhereCastable<IQuestFragmentAliasGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class QuestAdapterSetterTranslationCommon : AVirtualMachineAdapterSetterTranslationCommon
    {
        public new static readonly QuestAdapterSetterTranslationCommon Instance = new QuestAdapterSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IQuestAdapter item,
            IQuestAdapterGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAVirtualMachineAdapter)item,
                (IAVirtualMachineAdapterGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)QuestAdapter_FieldIndex.Versioning) ?? true))
            {
                item.Versioning = rhs.Versioning;
            }
            if (rhs.Versioning.HasFlag(QuestAdapter.VersioningBreaks.Break0)) return;
            if ((copyMask?.GetShouldTranslate((int)QuestAdapter_FieldIndex.ExtraBindDataVersion) ?? true))
            {
                item.ExtraBindDataVersion = rhs.ExtraBindDataVersion;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAdapter_FieldIndex.Script) ?? true))
            {
                errorMask?.PushIndex((int)QuestAdapter_FieldIndex.Script);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)QuestAdapter_FieldIndex.Script) ?? true))
                    {
                        item.Script = rhs.Script.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)QuestAdapter_FieldIndex.Script),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAdapter_FieldIndex.Fragments) ?? true))
            {
                errorMask?.PushIndex((int)QuestAdapter_FieldIndex.Fragments);
                try
                {
                    item.Fragments.SetTo(
                        rhs.Fragments
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAdapter_FieldIndex.Aliases) ?? true))
            {
                errorMask?.PushIndex((int)QuestAdapter_FieldIndex.Aliases);
                try
                {
                    item.Aliases.SetTo(
                        rhs.Aliases
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        
        public override void DeepCopyIn(
            IAVirtualMachineAdapter item,
            IAVirtualMachineAdapterGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IQuestAdapter)item,
                rhs: (IQuestAdapterGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public QuestAdapter DeepCopy(
            IQuestAdapterGetter item,
            QuestAdapter.TranslationMask? copyMask = null)
        {
            QuestAdapter ret = (QuestAdapter)((QuestAdapterCommon)((IQuestAdapterGetter)item).CommonInstance()!).GetNew();
            ((QuestAdapterSetterTranslationCommon)((IQuestAdapterGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public QuestAdapter DeepCopy(
            IQuestAdapterGetter item,
            out QuestAdapter.ErrorMask errorMask,
            QuestAdapter.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            QuestAdapter ret = (QuestAdapter)((QuestAdapterCommon)((IQuestAdapterGetter)item).CommonInstance()!).GetNew();
            ((QuestAdapterSetterTranslationCommon)((IQuestAdapterGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = QuestAdapter.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public QuestAdapter DeepCopy(
            IQuestAdapterGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            QuestAdapter ret = (QuestAdapter)((QuestAdapterCommon)((IQuestAdapterGetter)item).CommonInstance()!).GetNew();
            ((QuestAdapterSetterTranslationCommon)((IQuestAdapterGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class QuestAdapter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => QuestAdapter_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => QuestAdapter_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => QuestAdapterCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return QuestAdapterSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => QuestAdapterSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class QuestAdapterBinaryWriteTranslation :
        AVirtualMachineAdapterBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly QuestAdapterBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IQuestAdapterGetter item,
            MutagenWriter writer)
        {
            AVirtualMachineAdapterBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            if (!item.Versioning.HasFlag(QuestAdapter.VersioningBreaks.Break0))
            {
                writer.Write(item.ExtraBindDataVersion);
                QuestAdapterBinaryWriteTranslation.WriteBinaryFragmentCount(
                    writer: writer,
                    item: item);
                QuestAdapterBinaryWriteTranslation.WriteBinaryScript(
                    writer: writer,
                    item: item);
                QuestAdapterBinaryWriteTranslation.WriteBinaryFragments(
                    writer: writer,
                    item: item);
                QuestAdapterBinaryWriteTranslation.WriteBinaryAliases(
                    writer: writer,
                    item: item);
            }
        }

        public static partial void WriteBinaryFragmentCountCustom(
            MutagenWriter writer,
            IQuestAdapterGetter item);

        public static void WriteBinaryFragmentCount(
            MutagenWriter writer,
            IQuestAdapterGetter item)
        {
            WriteBinaryFragmentCountCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryScriptCustom(
            MutagenWriter writer,
            IQuestAdapterGetter item);

        public static void WriteBinaryScript(
            MutagenWriter writer,
            IQuestAdapterGetter item)
        {
            WriteBinaryScriptCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryFragmentsCustom(
            MutagenWriter writer,
            IQuestAdapterGetter item);

        public static void WriteBinaryFragments(
            MutagenWriter writer,
            IQuestAdapterGetter item)
        {
            WriteBinaryFragmentsCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryAliasesCustom(
            MutagenWriter writer,
            IQuestAdapterGetter item);

        public static void WriteBinaryAliases(
            MutagenWriter writer,
            IQuestAdapterGetter item)
        {
            WriteBinaryAliasesCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IQuestAdapterGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.VMAD),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IQuestAdapterGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IAVirtualMachineAdapterGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IQuestAdapterGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class QuestAdapterBinaryCreateTranslation : AVirtualMachineAdapterBinaryCreateTranslation
    {
        public new static readonly QuestAdapterBinaryCreateTranslation Instance = new QuestAdapterBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IQuestAdapter item,
            MutagenFrame frame)
        {
            AVirtualMachineAdapterBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            if (frame.Complete)
            {
                item.Versioning |= QuestAdapter.VersioningBreaks.Break0;
                return;
            }
            item.ExtraBindDataVersion = frame.ReadUInt8();
            QuestAdapterBinaryCreateTranslation.FillBinaryFragmentCountCustom(
                frame: frame,
                item: item);
            QuestAdapterBinaryCreateTranslation.FillBinaryScriptCustom(
                frame: frame,
                item: item);
            QuestAdapterBinaryCreateTranslation.FillBinaryFragmentsCustom(
                frame: frame,
                item: item);
            QuestAdapterBinaryCreateTranslation.FillBinaryAliasesCustom(
                frame: frame,
                item: item);
        }

        public static partial void FillBinaryFragmentCountCustom(
            MutagenFrame frame,
            IQuestAdapter item);

        public static partial void FillBinaryScriptCustom(
            MutagenFrame frame,
            IQuestAdapter item);

        public static partial void FillBinaryFragmentsCustom(
            MutagenFrame frame,
            IQuestAdapter item);

        public static partial void FillBinaryAliasesCustom(
            MutagenFrame frame,
            IQuestAdapter item);

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class QuestAdapterBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class QuestAdapterBinaryOverlay :
        AVirtualMachineAdapterBinaryOverlay,
        IQuestAdapterGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => QuestAdapter_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => QuestAdapter_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => QuestAdapterCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => QuestAdapterSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => QuestAdapterCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => QuestAdapterBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((QuestAdapterBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public QuestAdapter.VersioningBreaks Versioning { get; private set; }
        public Byte ExtraBindDataVersion => _structData.Length <= ScriptsEndingPos + 0x0 ? default : _structData.Span[ScriptsEndingPos + 0x0];
        #region FragmentCount
        partial void FragmentCountCustomParse(
            OverlayStream stream,
            int offset);
        #endregion
        #region Script
        public partial IScriptEntryGetter GetScriptCustom(int location);
        public IScriptEntryGetter Script => GetScriptCustom(location: ScriptsEndingPos + 0x3);
        protected int ScriptEndingPos;
        partial void CustomScriptEndPos();
        #endregion
        #region Fragments
        protected int FragmentsEndingPos;
        partial void CustomFragmentsEndPos();
        #endregion
        #region Aliases
        protected int AliasesEndingPos;
        partial void CustomAliasesEndPos();
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected QuestAdapterBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static void QuestAdapterParseEndingPositions(
            QuestAdapterBinaryOverlay ret,
            BinaryOverlayFactoryPackage package)
        {
            ret.CustomFragmentsEndPos();
            ret.CustomAliasesEndPos();
        }

        public static IQuestAdapterGetter QuestAdapterFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new QuestAdapterBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            QuestAdapterParseEndingPositions(ret, package);
            if (ret._structData.Length <= ret.ScriptsEndingPos)
            {
                ret.Versioning |= QuestAdapter.VersioningBreaks.Break0;
            }
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IQuestAdapterGetter QuestAdapterFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return QuestAdapterFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            QuestAdapterMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IQuestAdapterGetter rhs) return false;
            return ((QuestAdapterCommon)((IQuestAdapterGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IQuestAdapterGetter? obj)
        {
            return ((QuestAdapterCommon)((IQuestAdapterGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((QuestAdapterCommon)((IQuestAdapterGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

