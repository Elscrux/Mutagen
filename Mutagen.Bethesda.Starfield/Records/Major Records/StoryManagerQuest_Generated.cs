/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class StoryManagerQuest :
        IEquatable<IStoryManagerQuestGetter>,
        ILoquiObjectSetter<StoryManagerQuest>,
        IStoryManagerQuest
    {
        #region Ctor
        public StoryManagerQuest()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Quest
        private readonly IFormLinkNullable<IQuestGetter> _Quest = new FormLinkNullable<IQuestGetter>();
        public IFormLinkNullable<IQuestGetter> Quest
        {
            get => _Quest;
            set => _Quest.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IQuestGetter> IStoryManagerQuestGetter.Quest => this.Quest;
        #endregion
        #region HoursUntilReset
        public Single? HoursUntilReset { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IStoryManagerQuestGetter.HoursUntilReset => this.HoursUntilReset;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            StoryManagerQuestMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IStoryManagerQuestGetter rhs) return false;
            return ((StoryManagerQuestCommon)((IStoryManagerQuestGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IStoryManagerQuestGetter? obj)
        {
            return ((StoryManagerQuestCommon)((IStoryManagerQuestGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((StoryManagerQuestCommon)((IStoryManagerQuestGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Quest = initialValue;
                this.HoursUntilReset = initialValue;
            }

            public Mask(
                TItem Quest,
                TItem HoursUntilReset)
            {
                this.Quest = Quest;
                this.HoursUntilReset = HoursUntilReset;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Quest;
            public TItem HoursUntilReset;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Quest, rhs.Quest)) return false;
                if (!object.Equals(this.HoursUntilReset, rhs.HoursUntilReset)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Quest);
                hash.Add(this.HoursUntilReset);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Quest)) return false;
                if (!eval(this.HoursUntilReset)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Quest)) return true;
                if (eval(this.HoursUntilReset)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new StoryManagerQuest.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Quest = eval(this.Quest);
                obj.HoursUntilReset = eval(this.HoursUntilReset);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(StoryManagerQuest.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, StoryManagerQuest.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(StoryManagerQuest.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Quest ?? true)
                    {
                        sb.AppendItem(Quest, "Quest");
                    }
                    if (printMask?.HoursUntilReset ?? true)
                    {
                        sb.AppendItem(HoursUntilReset, "HoursUntilReset");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Quest;
            public Exception? HoursUntilReset;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                StoryManagerQuest_FieldIndex enu = (StoryManagerQuest_FieldIndex)index;
                switch (enu)
                {
                    case StoryManagerQuest_FieldIndex.Quest:
                        return Quest;
                    case StoryManagerQuest_FieldIndex.HoursUntilReset:
                        return HoursUntilReset;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                StoryManagerQuest_FieldIndex enu = (StoryManagerQuest_FieldIndex)index;
                switch (enu)
                {
                    case StoryManagerQuest_FieldIndex.Quest:
                        this.Quest = ex;
                        break;
                    case StoryManagerQuest_FieldIndex.HoursUntilReset:
                        this.HoursUntilReset = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                StoryManagerQuest_FieldIndex enu = (StoryManagerQuest_FieldIndex)index;
                switch (enu)
                {
                    case StoryManagerQuest_FieldIndex.Quest:
                        this.Quest = (Exception?)obj;
                        break;
                    case StoryManagerQuest_FieldIndex.HoursUntilReset:
                        this.HoursUntilReset = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Quest != null) return true;
                if (HoursUntilReset != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Quest, "Quest");
                }
                {
                    sb.AppendItem(HoursUntilReset, "HoursUntilReset");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Quest = this.Quest.Combine(rhs.Quest);
                ret.HoursUntilReset = this.HoursUntilReset.Combine(rhs.HoursUntilReset);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Quest;
            public bool HoursUntilReset;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Quest = defaultOn;
                this.HoursUntilReset = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Quest, null));
                ret.Add((HoursUntilReset, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => StoryManagerQuestCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => StoryManagerQuestSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => StoryManagerQuestBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((StoryManagerQuestBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static StoryManagerQuest CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new StoryManagerQuest();
            ((StoryManagerQuestSetterCommon)((IStoryManagerQuestGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out StoryManagerQuest item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((StoryManagerQuestSetterCommon)((IStoryManagerQuestGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static StoryManagerQuest GetNew()
        {
            return new StoryManagerQuest();
        }

    }
    #endregion

    #region Interface
    public partial interface IStoryManagerQuest :
        IFormLinkContainer,
        ILoquiObjectSetter<IStoryManagerQuest>,
        IStoryManagerQuestGetter
    {
        new IFormLinkNullable<IQuestGetter> Quest { get; set; }
        new Single? HoursUntilReset { get; set; }
    }

    public partial interface IStoryManagerQuestGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IStoryManagerQuestGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => StoryManagerQuest_Registration.Instance;
        IFormLinkNullableGetter<IQuestGetter> Quest { get; }
        Single? HoursUntilReset { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class StoryManagerQuestMixIn
    {
        public static void Clear(this IStoryManagerQuest item)
        {
            ((StoryManagerQuestSetterCommon)((IStoryManagerQuestGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static StoryManagerQuest.Mask<bool> GetEqualsMask(
            this IStoryManagerQuestGetter item,
            IStoryManagerQuestGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((StoryManagerQuestCommon)((IStoryManagerQuestGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IStoryManagerQuestGetter item,
            string? name = null,
            StoryManagerQuest.Mask<bool>? printMask = null)
        {
            return ((StoryManagerQuestCommon)((IStoryManagerQuestGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IStoryManagerQuestGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            StoryManagerQuest.Mask<bool>? printMask = null)
        {
            ((StoryManagerQuestCommon)((IStoryManagerQuestGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IStoryManagerQuestGetter item,
            IStoryManagerQuestGetter rhs,
            StoryManagerQuest.TranslationMask? equalsMask = null)
        {
            return ((StoryManagerQuestCommon)((IStoryManagerQuestGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IStoryManagerQuest lhs,
            IStoryManagerQuestGetter rhs)
        {
            ((StoryManagerQuestSetterTranslationCommon)((IStoryManagerQuestGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IStoryManagerQuest lhs,
            IStoryManagerQuestGetter rhs,
            StoryManagerQuest.TranslationMask? copyMask = null)
        {
            ((StoryManagerQuestSetterTranslationCommon)((IStoryManagerQuestGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IStoryManagerQuest lhs,
            IStoryManagerQuestGetter rhs,
            out StoryManagerQuest.ErrorMask errorMask,
            StoryManagerQuest.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((StoryManagerQuestSetterTranslationCommon)((IStoryManagerQuestGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = StoryManagerQuest.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IStoryManagerQuest lhs,
            IStoryManagerQuestGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((StoryManagerQuestSetterTranslationCommon)((IStoryManagerQuestGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static StoryManagerQuest DeepCopy(
            this IStoryManagerQuestGetter item,
            StoryManagerQuest.TranslationMask? copyMask = null)
        {
            return ((StoryManagerQuestSetterTranslationCommon)((IStoryManagerQuestGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static StoryManagerQuest DeepCopy(
            this IStoryManagerQuestGetter item,
            out StoryManagerQuest.ErrorMask errorMask,
            StoryManagerQuest.TranslationMask? copyMask = null)
        {
            return ((StoryManagerQuestSetterTranslationCommon)((IStoryManagerQuestGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static StoryManagerQuest DeepCopy(
            this IStoryManagerQuestGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((StoryManagerQuestSetterTranslationCommon)((IStoryManagerQuestGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IStoryManagerQuest item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((StoryManagerQuestSetterCommon)((IStoryManagerQuestGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum StoryManagerQuest_FieldIndex
    {
        Quest = 0,
        HoursUntilReset = 1,
    }
    #endregion

    #region Registration
    internal partial class StoryManagerQuest_Registration : ILoquiRegistration
    {
        public static readonly StoryManagerQuest_Registration Instance = new StoryManagerQuest_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(StoryManagerQuest.Mask<>);

        public static readonly Type ErrorMaskType = typeof(StoryManagerQuest.ErrorMask);

        public static readonly Type ClassType = typeof(StoryManagerQuest);

        public static readonly Type GetterType = typeof(IStoryManagerQuestGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IStoryManagerQuest);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.StoryManagerQuest";

        public const string Name = "StoryManagerQuest";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(
                RecordTypes.NNAM,
                RecordTypes.RNAM);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(StoryManagerQuestBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class StoryManagerQuestSetterCommon
    {
        public static readonly StoryManagerQuestSetterCommon Instance = new StoryManagerQuestSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IStoryManagerQuest item)
        {
            ClearPartial();
            item.Quest.Clear();
            item.HoursUntilReset = default;
        }
        
        #region Mutagen
        public void RemapLinks(IStoryManagerQuest obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Quest.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IStoryManagerQuest item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: StoryManagerQuestBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class StoryManagerQuestCommon
    {
        public static readonly StoryManagerQuestCommon Instance = new StoryManagerQuestCommon();

        public StoryManagerQuest.Mask<bool> GetEqualsMask(
            IStoryManagerQuestGetter item,
            IStoryManagerQuestGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new StoryManagerQuest.Mask<bool>(false);
            ((StoryManagerQuestCommon)((IStoryManagerQuestGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IStoryManagerQuestGetter item,
            IStoryManagerQuestGetter rhs,
            StoryManagerQuest.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Quest = item.Quest.Equals(rhs.Quest);
            ret.HoursUntilReset = item.HoursUntilReset.EqualsWithin(rhs.HoursUntilReset);
        }
        
        public string Print(
            IStoryManagerQuestGetter item,
            string? name = null,
            StoryManagerQuest.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IStoryManagerQuestGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            StoryManagerQuest.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"StoryManagerQuest =>");
            }
            else
            {
                sb.AppendLine($"{name} (StoryManagerQuest) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IStoryManagerQuestGetter item,
            StructuredStringBuilder sb,
            StoryManagerQuest.Mask<bool>? printMask = null)
        {
            if (printMask?.Quest ?? true)
            {
                sb.AppendItem(item.Quest.FormKeyNullable, "Quest");
            }
            if ((printMask?.HoursUntilReset ?? true)
                && item.HoursUntilReset is {} HoursUntilResetItem)
            {
                sb.AppendItem(HoursUntilResetItem, "HoursUntilReset");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IStoryManagerQuestGetter? lhs,
            IStoryManagerQuestGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)StoryManagerQuest_FieldIndex.Quest) ?? true))
            {
                if (!lhs.Quest.Equals(rhs.Quest)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StoryManagerQuest_FieldIndex.HoursUntilReset) ?? true))
            {
                if (!lhs.HoursUntilReset.EqualsWithin(rhs.HoursUntilReset)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IStoryManagerQuestGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Quest);
            if (item.HoursUntilReset is {} HoursUntilResetitem)
            {
                hash.Add(HoursUntilResetitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return StoryManagerQuest.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IStoryManagerQuestGetter obj)
        {
            if (FormLinkInformation.TryFactory(obj.Quest, out var QuestInfo))
            {
                yield return QuestInfo;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class StoryManagerQuestSetterTranslationCommon
    {
        public static readonly StoryManagerQuestSetterTranslationCommon Instance = new StoryManagerQuestSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IStoryManagerQuest item,
            IStoryManagerQuestGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)StoryManagerQuest_FieldIndex.Quest) ?? true))
            {
                item.Quest.SetTo(rhs.Quest.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)StoryManagerQuest_FieldIndex.HoursUntilReset) ?? true))
            {
                item.HoursUntilReset = rhs.HoursUntilReset;
            }
        }
        
        #endregion
        
        public StoryManagerQuest DeepCopy(
            IStoryManagerQuestGetter item,
            StoryManagerQuest.TranslationMask? copyMask = null)
        {
            StoryManagerQuest ret = (StoryManagerQuest)((StoryManagerQuestCommon)((IStoryManagerQuestGetter)item).CommonInstance()!).GetNew();
            ((StoryManagerQuestSetterTranslationCommon)((IStoryManagerQuestGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public StoryManagerQuest DeepCopy(
            IStoryManagerQuestGetter item,
            out StoryManagerQuest.ErrorMask errorMask,
            StoryManagerQuest.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            StoryManagerQuest ret = (StoryManagerQuest)((StoryManagerQuestCommon)((IStoryManagerQuestGetter)item).CommonInstance()!).GetNew();
            ((StoryManagerQuestSetterTranslationCommon)((IStoryManagerQuestGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = StoryManagerQuest.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public StoryManagerQuest DeepCopy(
            IStoryManagerQuestGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            StoryManagerQuest ret = (StoryManagerQuest)((StoryManagerQuestCommon)((IStoryManagerQuestGetter)item).CommonInstance()!).GetNew();
            ((StoryManagerQuestSetterTranslationCommon)((IStoryManagerQuestGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class StoryManagerQuest
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => StoryManagerQuest_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => StoryManagerQuest_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => StoryManagerQuestCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return StoryManagerQuestSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => StoryManagerQuestSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IStoryManagerQuestGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IStoryManagerQuestGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IStoryManagerQuestGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class StoryManagerQuestBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly StoryManagerQuestBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IStoryManagerQuestGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Quest,
                header: translationParams.ConvertToCustom(RecordTypes.NNAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.HoursUntilReset,
                header: translationParams.ConvertToCustom(RecordTypes.RNAM),
                divisor: null,
                multiplier: 24f);
        }

        public void Write(
            MutagenWriter writer,
            IStoryManagerQuestGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IStoryManagerQuestGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class StoryManagerQuestBinaryCreateTranslation
    {
        public static readonly StoryManagerQuestBinaryCreateTranslation Instance = new StoryManagerQuestBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IStoryManagerQuest item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.NNAM:
                {
                    if (lastParsed.ShortCircuit((int)StoryManagerQuest_FieldIndex.Quest, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Quest.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)StoryManagerQuest_FieldIndex.Quest;
                }
                case RecordTypeInts.RNAM:
                {
                    if (lastParsed.ShortCircuit((int)StoryManagerQuest_FieldIndex.HoursUntilReset, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HoursUntilReset = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        multiplier: null,
                        divisor: 24f);
                    return (int)StoryManagerQuest_FieldIndex.HoursUntilReset;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class StoryManagerQuestBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IStoryManagerQuestGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((StoryManagerQuestBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class StoryManagerQuestBinaryOverlay :
        PluginBinaryOverlay,
        IStoryManagerQuestGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => StoryManagerQuest_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => StoryManagerQuest_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => StoryManagerQuestCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => StoryManagerQuestSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IStoryManagerQuestGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IStoryManagerQuestGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IStoryManagerQuestGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => StoryManagerQuestCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => StoryManagerQuestBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((StoryManagerQuestBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Quest
        private int? _QuestLocation;
        public IFormLinkNullableGetter<IQuestGetter> Quest => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IQuestGetter>(_package, _recordData, _QuestLocation);
        #endregion
        #region HoursUntilReset
        private int? _HoursUntilResetLocation;
        public Single? HoursUntilReset => _HoursUntilResetLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _HoursUntilResetLocation.Value, _package.MetaData.Constants).Float() / 24f : default(Single?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected StoryManagerQuestBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IStoryManagerQuestGetter StoryManagerQuestFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new StoryManagerQuestBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IStoryManagerQuestGetter StoryManagerQuestFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return StoryManagerQuestFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.NNAM:
                {
                    if (lastParsed.ShortCircuit((int)StoryManagerQuest_FieldIndex.Quest, translationParams)) return ParseResult.Stop;
                    _QuestLocation = (stream.Position - offset);
                    return (int)StoryManagerQuest_FieldIndex.Quest;
                }
                case RecordTypeInts.RNAM:
                {
                    if (lastParsed.ShortCircuit((int)StoryManagerQuest_FieldIndex.HoursUntilReset, translationParams)) return ParseResult.Stop;
                    _HoursUntilResetLocation = (stream.Position - offset);
                    return (int)StoryManagerQuest_FieldIndex.HoursUntilReset;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            StoryManagerQuestMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IStoryManagerQuestGetter rhs) return false;
            return ((StoryManagerQuestCommon)((IStoryManagerQuestGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IStoryManagerQuestGetter? obj)
        {
            return ((StoryManagerQuestCommon)((IStoryManagerQuestGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((StoryManagerQuestCommon)((IStoryManagerQuestGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

