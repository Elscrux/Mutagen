/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class TimelineSceneAction :
        ASceneAction,
        IEquatable<ITimelineSceneActionGetter>,
        ILoquiObjectSetter<TimelineSceneAction>,
        ITimelineSceneAction
    {
        #region Ctor
        public TimelineSceneAction()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region TNAM
        public Int32? TNAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? ITimelineSceneActionGetter.TNAM => this.TNAM;
        #endregion
        #region SNAM
        public Int32? SNAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? ITimelineSceneActionGetter.SNAM => this.SNAM;
        #endregion
        #region UNAM
        public Int32? UNAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? ITimelineSceneActionGetter.UNAM => this.UNAM;
        #endregion
        #region LNAM
        public Int32? LNAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? ITimelineSceneActionGetter.LNAM => this.LNAM;
        #endregion
        #region CNAM
        public Int32? CNAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? ITimelineSceneActionGetter.CNAM => this.CNAM;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TimelineSceneActionMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ITimelineSceneActionGetter rhs) return false;
            return ((TimelineSceneActionCommon)((ITimelineSceneActionGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITimelineSceneActionGetter? obj)
        {
            return ((TimelineSceneActionCommon)((ITimelineSceneActionGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TimelineSceneActionCommon)((ITimelineSceneActionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            ASceneAction.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.TNAM = initialValue;
                this.SNAM = initialValue;
                this.UNAM = initialValue;
                this.LNAM = initialValue;
                this.CNAM = initialValue;
            }

            public Mask(
                TItem Name,
                TItem SceneNotes,
                TItem AliasID,
                TItem Index,
                TItem Flags,
                TItem StartPhase,
                TItem EndPhase,
                TItem TNAM,
                TItem SNAM,
                TItem UNAM,
                TItem LNAM,
                TItem CNAM)
            : base(
                Name: Name,
                SceneNotes: SceneNotes,
                AliasID: AliasID,
                Index: Index,
                Flags: Flags,
                StartPhase: StartPhase,
                EndPhase: EndPhase)
            {
                this.TNAM = TNAM;
                this.SNAM = SNAM;
                this.UNAM = UNAM;
                this.LNAM = LNAM;
                this.CNAM = CNAM;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem TNAM;
            public TItem SNAM;
            public TItem UNAM;
            public TItem LNAM;
            public TItem CNAM;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.TNAM, rhs.TNAM)) return false;
                if (!object.Equals(this.SNAM, rhs.SNAM)) return false;
                if (!object.Equals(this.UNAM, rhs.UNAM)) return false;
                if (!object.Equals(this.LNAM, rhs.LNAM)) return false;
                if (!object.Equals(this.CNAM, rhs.CNAM)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.TNAM);
                hash.Add(this.SNAM);
                hash.Add(this.UNAM);
                hash.Add(this.LNAM);
                hash.Add(this.CNAM);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.TNAM)) return false;
                if (!eval(this.SNAM)) return false;
                if (!eval(this.UNAM)) return false;
                if (!eval(this.LNAM)) return false;
                if (!eval(this.CNAM)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.TNAM)) return true;
                if (eval(this.SNAM)) return true;
                if (eval(this.UNAM)) return true;
                if (eval(this.LNAM)) return true;
                if (eval(this.CNAM)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new TimelineSceneAction.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.TNAM = eval(this.TNAM);
                obj.SNAM = eval(this.SNAM);
                obj.UNAM = eval(this.UNAM);
                obj.LNAM = eval(this.LNAM);
                obj.CNAM = eval(this.CNAM);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(TimelineSceneAction.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, TimelineSceneAction.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(TimelineSceneAction.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.TNAM ?? true)
                    {
                        sb.AppendItem(TNAM, "TNAM");
                    }
                    if (printMask?.SNAM ?? true)
                    {
                        sb.AppendItem(SNAM, "SNAM");
                    }
                    if (printMask?.UNAM ?? true)
                    {
                        sb.AppendItem(UNAM, "UNAM");
                    }
                    if (printMask?.LNAM ?? true)
                    {
                        sb.AppendItem(LNAM, "LNAM");
                    }
                    if (printMask?.CNAM ?? true)
                    {
                        sb.AppendItem(CNAM, "CNAM");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            ASceneAction.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? TNAM;
            public Exception? SNAM;
            public Exception? UNAM;
            public Exception? LNAM;
            public Exception? CNAM;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                TimelineSceneAction_FieldIndex enu = (TimelineSceneAction_FieldIndex)index;
                switch (enu)
                {
                    case TimelineSceneAction_FieldIndex.TNAM:
                        return TNAM;
                    case TimelineSceneAction_FieldIndex.SNAM:
                        return SNAM;
                    case TimelineSceneAction_FieldIndex.UNAM:
                        return UNAM;
                    case TimelineSceneAction_FieldIndex.LNAM:
                        return LNAM;
                    case TimelineSceneAction_FieldIndex.CNAM:
                        return CNAM;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                TimelineSceneAction_FieldIndex enu = (TimelineSceneAction_FieldIndex)index;
                switch (enu)
                {
                    case TimelineSceneAction_FieldIndex.TNAM:
                        this.TNAM = ex;
                        break;
                    case TimelineSceneAction_FieldIndex.SNAM:
                        this.SNAM = ex;
                        break;
                    case TimelineSceneAction_FieldIndex.UNAM:
                        this.UNAM = ex;
                        break;
                    case TimelineSceneAction_FieldIndex.LNAM:
                        this.LNAM = ex;
                        break;
                    case TimelineSceneAction_FieldIndex.CNAM:
                        this.CNAM = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                TimelineSceneAction_FieldIndex enu = (TimelineSceneAction_FieldIndex)index;
                switch (enu)
                {
                    case TimelineSceneAction_FieldIndex.TNAM:
                        this.TNAM = (Exception?)obj;
                        break;
                    case TimelineSceneAction_FieldIndex.SNAM:
                        this.SNAM = (Exception?)obj;
                        break;
                    case TimelineSceneAction_FieldIndex.UNAM:
                        this.UNAM = (Exception?)obj;
                        break;
                    case TimelineSceneAction_FieldIndex.LNAM:
                        this.LNAM = (Exception?)obj;
                        break;
                    case TimelineSceneAction_FieldIndex.CNAM:
                        this.CNAM = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (TNAM != null) return true;
                if (SNAM != null) return true;
                if (UNAM != null) return true;
                if (LNAM != null) return true;
                if (CNAM != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(TNAM, "TNAM");
                }
                {
                    sb.AppendItem(SNAM, "SNAM");
                }
                {
                    sb.AppendItem(UNAM, "UNAM");
                }
                {
                    sb.AppendItem(LNAM, "LNAM");
                }
                {
                    sb.AppendItem(CNAM, "CNAM");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.TNAM = this.TNAM.Combine(rhs.TNAM);
                ret.SNAM = this.SNAM.Combine(rhs.SNAM);
                ret.UNAM = this.UNAM.Combine(rhs.UNAM);
                ret.LNAM = this.LNAM.Combine(rhs.LNAM);
                ret.CNAM = this.CNAM.Combine(rhs.CNAM);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ASceneAction.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool TNAM;
            public bool SNAM;
            public bool UNAM;
            public bool LNAM;
            public bool CNAM;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.TNAM = defaultOn;
                this.SNAM = defaultOn;
                this.UNAM = defaultOn;
                this.LNAM = defaultOn;
                this.CNAM = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((TNAM, null));
                ret.Add((SNAM, null));
                ret.Add((UNAM, null));
                ret.Add((LNAM, null));
                ret.Add((CNAM, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TimelineSceneActionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TimelineSceneActionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static TimelineSceneAction CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new TimelineSceneAction();
            ((TimelineSceneActionSetterCommon)((ITimelineSceneActionGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out TimelineSceneAction item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((TimelineSceneActionSetterCommon)((ITimelineSceneActionGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new TimelineSceneAction GetNew()
        {
            return new TimelineSceneAction();
        }

    }
    #endregion

    #region Interface
    public partial interface ITimelineSceneAction :
        IASceneAction,
        ILoquiObjectSetter<ITimelineSceneAction>,
        INamedRequired,
        ITimelineSceneActionGetter
    {
        new Int32? TNAM { get; set; }
        new Int32? SNAM { get; set; }
        new Int32? UNAM { get; set; }
        new Int32? LNAM { get; set; }
        new Int32? CNAM { get; set; }
    }

    public partial interface ITimelineSceneActionGetter :
        IASceneActionGetter,
        IBinaryItem,
        ILoquiObject<ITimelineSceneActionGetter>,
        INamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => TimelineSceneAction_Registration.Instance;
        Int32? TNAM { get; }
        Int32? SNAM { get; }
        Int32? UNAM { get; }
        Int32? LNAM { get; }
        Int32? CNAM { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class TimelineSceneActionMixIn
    {
        public static void Clear(this ITimelineSceneAction item)
        {
            ((TimelineSceneActionSetterCommon)((ITimelineSceneActionGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static TimelineSceneAction.Mask<bool> GetEqualsMask(
            this ITimelineSceneActionGetter item,
            ITimelineSceneActionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TimelineSceneActionCommon)((ITimelineSceneActionGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ITimelineSceneActionGetter item,
            string? name = null,
            TimelineSceneAction.Mask<bool>? printMask = null)
        {
            return ((TimelineSceneActionCommon)((ITimelineSceneActionGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ITimelineSceneActionGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            TimelineSceneAction.Mask<bool>? printMask = null)
        {
            ((TimelineSceneActionCommon)((ITimelineSceneActionGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ITimelineSceneActionGetter item,
            ITimelineSceneActionGetter rhs,
            TimelineSceneAction.TranslationMask? equalsMask = null)
        {
            return ((TimelineSceneActionCommon)((ITimelineSceneActionGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ITimelineSceneAction lhs,
            ITimelineSceneActionGetter rhs,
            out TimelineSceneAction.ErrorMask errorMask,
            TimelineSceneAction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TimelineSceneActionSetterTranslationCommon)((ITimelineSceneActionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = TimelineSceneAction.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITimelineSceneAction lhs,
            ITimelineSceneActionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TimelineSceneActionSetterTranslationCommon)((ITimelineSceneActionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static TimelineSceneAction DeepCopy(
            this ITimelineSceneActionGetter item,
            TimelineSceneAction.TranslationMask? copyMask = null)
        {
            return ((TimelineSceneActionSetterTranslationCommon)((ITimelineSceneActionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static TimelineSceneAction DeepCopy(
            this ITimelineSceneActionGetter item,
            out TimelineSceneAction.ErrorMask errorMask,
            TimelineSceneAction.TranslationMask? copyMask = null)
        {
            return ((TimelineSceneActionSetterTranslationCommon)((ITimelineSceneActionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static TimelineSceneAction DeepCopy(
            this ITimelineSceneActionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TimelineSceneActionSetterTranslationCommon)((ITimelineSceneActionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ITimelineSceneAction item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((TimelineSceneActionSetterCommon)((ITimelineSceneActionGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum TimelineSceneAction_FieldIndex
    {
        Name = 0,
        SceneNotes = 1,
        AliasID = 2,
        Index = 3,
        Flags = 4,
        StartPhase = 5,
        EndPhase = 6,
        TNAM = 7,
        SNAM = 8,
        UNAM = 9,
        LNAM = 10,
        CNAM = 11,
    }
    #endregion

    #region Registration
    internal partial class TimelineSceneAction_Registration : ILoquiRegistration
    {
        public static readonly TimelineSceneAction_Registration Instance = new TimelineSceneAction_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 12;

        public static readonly Type MaskType = typeof(TimelineSceneAction.Mask<>);

        public static readonly Type ErrorMaskType = typeof(TimelineSceneAction.ErrorMask);

        public static readonly Type ClassType = typeof(TimelineSceneAction);

        public static readonly Type GetterType = typeof(ITimelineSceneActionGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITimelineSceneAction);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.TimelineSceneAction";

        public const string Name = "TimelineSceneAction";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.NAM0;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.NAM0);
            var all = RecordCollection.Factory(
                RecordTypes.NAM0,
                RecordTypes.TNAM,
                RecordTypes.SNAM,
                RecordTypes.UNAM,
                RecordTypes.LNAM,
                RecordTypes.CNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(TimelineSceneActionBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class TimelineSceneActionSetterCommon : ASceneActionSetterCommon
    {
        public new static readonly TimelineSceneActionSetterCommon Instance = new TimelineSceneActionSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITimelineSceneAction item)
        {
            ClearPartial();
            item.TNAM = default;
            item.SNAM = default;
            item.UNAM = default;
            item.LNAM = default;
            item.CNAM = default;
            base.Clear(item);
        }
        
        public override void Clear(IASceneAction item)
        {
            Clear(item: (ITimelineSceneAction)item);
        }
        
        #region Mutagen
        public void RemapLinks(ITimelineSceneAction obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ITimelineSceneAction item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: TimelineSceneActionBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IASceneAction item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (TimelineSceneAction)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class TimelineSceneActionCommon : ASceneActionCommon
    {
        public new static readonly TimelineSceneActionCommon Instance = new TimelineSceneActionCommon();

        public TimelineSceneAction.Mask<bool> GetEqualsMask(
            ITimelineSceneActionGetter item,
            ITimelineSceneActionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TimelineSceneAction.Mask<bool>(false);
            ((TimelineSceneActionCommon)((ITimelineSceneActionGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITimelineSceneActionGetter item,
            ITimelineSceneActionGetter rhs,
            TimelineSceneAction.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.TNAM = item.TNAM == rhs.TNAM;
            ret.SNAM = item.SNAM == rhs.SNAM;
            ret.UNAM = item.UNAM == rhs.UNAM;
            ret.LNAM = item.LNAM == rhs.LNAM;
            ret.CNAM = item.CNAM == rhs.CNAM;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ITimelineSceneActionGetter item,
            string? name = null,
            TimelineSceneAction.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ITimelineSceneActionGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            TimelineSceneAction.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"TimelineSceneAction =>");
            }
            else
            {
                sb.AppendLine($"{name} (TimelineSceneAction) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ITimelineSceneActionGetter item,
            StructuredStringBuilder sb,
            TimelineSceneAction.Mask<bool>? printMask = null)
        {
            ASceneActionCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.TNAM ?? true)
                && item.TNAM is {} TNAMItem)
            {
                sb.AppendItem(TNAMItem, "TNAM");
            }
            if ((printMask?.SNAM ?? true)
                && item.SNAM is {} SNAMItem)
            {
                sb.AppendItem(SNAMItem, "SNAM");
            }
            if ((printMask?.UNAM ?? true)
                && item.UNAM is {} UNAMItem)
            {
                sb.AppendItem(UNAMItem, "UNAM");
            }
            if ((printMask?.LNAM ?? true)
                && item.LNAM is {} LNAMItem)
            {
                sb.AppendItem(LNAMItem, "LNAM");
            }
            if ((printMask?.CNAM ?? true)
                && item.CNAM is {} CNAMItem)
            {
                sb.AppendItem(CNAMItem, "CNAM");
            }
        }
        
        public static TimelineSceneAction_FieldIndex ConvertFieldIndex(ASceneAction_FieldIndex index)
        {
            switch (index)
            {
                case ASceneAction_FieldIndex.Name:
                    return (TimelineSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.SceneNotes:
                    return (TimelineSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.AliasID:
                    return (TimelineSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.Index:
                    return (TimelineSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.Flags:
                    return (TimelineSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.StartPhase:
                    return (TimelineSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.EndPhase:
                    return (TimelineSceneAction_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITimelineSceneActionGetter? lhs,
            ITimelineSceneActionGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IASceneActionGetter)lhs, (IASceneActionGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)TimelineSceneAction_FieldIndex.TNAM) ?? true))
            {
                if (lhs.TNAM != rhs.TNAM) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TimelineSceneAction_FieldIndex.SNAM) ?? true))
            {
                if (lhs.SNAM != rhs.SNAM) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TimelineSceneAction_FieldIndex.UNAM) ?? true))
            {
                if (lhs.UNAM != rhs.UNAM) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TimelineSceneAction_FieldIndex.LNAM) ?? true))
            {
                if (lhs.LNAM != rhs.LNAM) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TimelineSceneAction_FieldIndex.CNAM) ?? true))
            {
                if (lhs.CNAM != rhs.CNAM) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IASceneActionGetter? lhs,
            IASceneActionGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ITimelineSceneActionGetter?)lhs,
                rhs: rhs as ITimelineSceneActionGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ITimelineSceneActionGetter item)
        {
            var hash = new HashCode();
            if (item.TNAM is {} TNAMitem)
            {
                hash.Add(TNAMitem);
            }
            if (item.SNAM is {} SNAMitem)
            {
                hash.Add(SNAMitem);
            }
            if (item.UNAM is {} UNAMitem)
            {
                hash.Add(UNAMitem);
            }
            if (item.LNAM is {} LNAMitem)
            {
                hash.Add(LNAMitem);
            }
            if (item.CNAM is {} CNAMitem)
            {
                hash.Add(CNAMitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IASceneActionGetter item)
        {
            return GetHashCode(item: (ITimelineSceneActionGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return TimelineSceneAction.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ITimelineSceneActionGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class TimelineSceneActionSetterTranslationCommon : ASceneActionSetterTranslationCommon
    {
        public new static readonly TimelineSceneActionSetterTranslationCommon Instance = new TimelineSceneActionSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ITimelineSceneAction item,
            ITimelineSceneActionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IASceneAction)item,
                (IASceneActionGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)TimelineSceneAction_FieldIndex.TNAM) ?? true))
            {
                item.TNAM = rhs.TNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)TimelineSceneAction_FieldIndex.SNAM) ?? true))
            {
                item.SNAM = rhs.SNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)TimelineSceneAction_FieldIndex.UNAM) ?? true))
            {
                item.UNAM = rhs.UNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)TimelineSceneAction_FieldIndex.LNAM) ?? true))
            {
                item.LNAM = rhs.LNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)TimelineSceneAction_FieldIndex.CNAM) ?? true))
            {
                item.CNAM = rhs.CNAM;
            }
        }
        
        
        public override void DeepCopyIn(
            IASceneAction item,
            IASceneActionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITimelineSceneAction)item,
                rhs: (ITimelineSceneActionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public TimelineSceneAction DeepCopy(
            ITimelineSceneActionGetter item,
            TimelineSceneAction.TranslationMask? copyMask = null)
        {
            TimelineSceneAction ret = (TimelineSceneAction)((TimelineSceneActionCommon)((ITimelineSceneActionGetter)item).CommonInstance()!).GetNew();
            ((TimelineSceneActionSetterTranslationCommon)((ITimelineSceneActionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public TimelineSceneAction DeepCopy(
            ITimelineSceneActionGetter item,
            out TimelineSceneAction.ErrorMask errorMask,
            TimelineSceneAction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            TimelineSceneAction ret = (TimelineSceneAction)((TimelineSceneActionCommon)((ITimelineSceneActionGetter)item).CommonInstance()!).GetNew();
            ((TimelineSceneActionSetterTranslationCommon)((ITimelineSceneActionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = TimelineSceneAction.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public TimelineSceneAction DeepCopy(
            ITimelineSceneActionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            TimelineSceneAction ret = (TimelineSceneAction)((TimelineSceneActionCommon)((ITimelineSceneActionGetter)item).CommonInstance()!).GetNew();
            ((TimelineSceneActionSetterTranslationCommon)((ITimelineSceneActionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class TimelineSceneAction
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TimelineSceneAction_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => TimelineSceneAction_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TimelineSceneActionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return TimelineSceneActionSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TimelineSceneActionSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class TimelineSceneActionBinaryWriteTranslation :
        ASceneActionBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly TimelineSceneActionBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ITimelineSceneActionGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            ASceneActionBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.TNAM,
                header: translationParams.ConvertToCustom(RecordTypes.TNAM));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.SNAM,
                header: translationParams.ConvertToCustom(RecordTypes.SNAM));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.UNAM,
                header: translationParams.ConvertToCustom(RecordTypes.UNAM));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.LNAM,
                header: translationParams.ConvertToCustom(RecordTypes.LNAM));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.CNAM,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
        }

        public void Write(
            MutagenWriter writer,
            ITimelineSceneActionGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ITimelineSceneActionGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IASceneActionGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ITimelineSceneActionGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class TimelineSceneActionBinaryCreateTranslation : ASceneActionBinaryCreateTranslation
    {
        public new static readonly TimelineSceneActionBinaryCreateTranslation Instance = new TimelineSceneActionBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            ITimelineSceneAction item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TNAM = frame.ReadInt32();
                    return (int)TimelineSceneAction_FieldIndex.TNAM;
                }
                case RecordTypeInts.SNAM:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)ASceneAction_FieldIndex.Flags)
                    {
                        return ASceneActionBinaryCreateTranslation.FillBinaryRecordTypes(
                            item: item,
                            frame: frame,
                            lastParsed: lastParsed,
                            recordParseCount: recordParseCount,
                            nextRecordType: nextRecordType,
                            contentLength: contentLength,
                            translationParams: translationParams.WithNoConverter());
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)TimelineSceneAction_FieldIndex.TNAM)
                    {
                        frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                        item.SNAM = frame.ReadInt32();
                        return new ParseResult((int)TimelineSceneAction_FieldIndex.SNAM, nextRecordType);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(nextRecordType) ?? 0)
                        {
                            case 0:
                                return ASceneActionBinaryCreateTranslation.FillBinaryRecordTypes(
                                    item: item,
                                    frame: frame,
                                    lastParsed: lastParsed,
                                    recordParseCount: recordParseCount,
                                    nextRecordType: nextRecordType,
                                    contentLength: contentLength,
                                    translationParams: translationParams.WithNoConverter());
                            case 1:
                                frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                                item.SNAM = frame.ReadInt32();
                                return new ParseResult((int)TimelineSceneAction_FieldIndex.SNAM, nextRecordType);
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.UNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.UNAM = frame.ReadInt32();
                    return (int)TimelineSceneAction_FieldIndex.UNAM;
                }
                case RecordTypeInts.LNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LNAM = frame.ReadInt32();
                    return (int)TimelineSceneAction_FieldIndex.LNAM;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CNAM = frame.ReadInt32();
                    return (int)TimelineSceneAction_FieldIndex.CNAM;
                }
                default:
                    return ASceneActionBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class TimelineSceneActionBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class TimelineSceneActionBinaryOverlay :
        ASceneActionBinaryOverlay,
        ITimelineSceneActionGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TimelineSceneAction_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => TimelineSceneAction_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TimelineSceneActionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TimelineSceneActionSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TimelineSceneActionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TimelineSceneActionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region TNAM
        private int? _TNAMLocation;
        public Int32? TNAM => _TNAMLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _TNAMLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region SNAM
        private int? _SNAMLocation;
        public Int32? SNAM => _SNAMLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _SNAMLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region UNAM
        private int? _UNAMLocation;
        public Int32? UNAM => _UNAMLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _UNAMLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region LNAM
        private int? _LNAMLocation;
        public Int32? LNAM => _LNAMLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _LNAMLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region CNAM
        private int? _CNAMLocation;
        public Int32? CNAM => _CNAMLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _CNAMLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected TimelineSceneActionBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ITimelineSceneActionGetter TimelineSceneActionFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new TimelineSceneActionBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ITimelineSceneActionGetter TimelineSceneActionFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return TimelineSceneActionFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.TNAM:
                {
                    _TNAMLocation = (stream.Position - offset);
                    return (int)TimelineSceneAction_FieldIndex.TNAM;
                }
                case RecordTypeInts.SNAM:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)ASceneAction_FieldIndex.Flags)
                    {
                        return base.FillRecordType(
                            stream: stream,
                            finalPos: finalPos,
                            offset: offset,
                            type: type,
                            lastParsed: lastParsed,
                            recordParseCount: recordParseCount,
                            translationParams: translationParams.WithNoConverter());
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)TimelineSceneAction_FieldIndex.TNAM)
                    {
                        _SNAMLocation = (stream.Position - offset);
                        return new ParseResult((int)TimelineSceneAction_FieldIndex.SNAM, type);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(type) ?? 0)
                        {
                            case 0:
                            {
                                return base.FillRecordType(
                                    stream: stream,
                                    finalPos: finalPos,
                                    offset: offset,
                                    type: type,
                                    lastParsed: lastParsed,
                                    recordParseCount: recordParseCount,
                                    translationParams: translationParams.WithNoConverter());
                            }
                            case 1:
                            {
                                _SNAMLocation = (stream.Position - offset);
                                return new ParseResult((int)TimelineSceneAction_FieldIndex.SNAM, type);
                            }
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.UNAM:
                {
                    _UNAMLocation = (stream.Position - offset);
                    return (int)TimelineSceneAction_FieldIndex.UNAM;
                }
                case RecordTypeInts.LNAM:
                {
                    _LNAMLocation = (stream.Position - offset);
                    return (int)TimelineSceneAction_FieldIndex.LNAM;
                }
                case RecordTypeInts.CNAM:
                {
                    _CNAMLocation = (stream.Position - offset);
                    return (int)TimelineSceneAction_FieldIndex.CNAM;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TimelineSceneActionMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ITimelineSceneActionGetter rhs) return false;
            return ((TimelineSceneActionCommon)((ITimelineSceneActionGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITimelineSceneActionGetter? obj)
        {
            return ((TimelineSceneActionCommon)((ITimelineSceneActionGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TimelineSceneActionCommon)((ITimelineSceneActionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

