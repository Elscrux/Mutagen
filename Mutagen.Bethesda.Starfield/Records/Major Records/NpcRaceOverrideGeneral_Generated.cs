/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class NpcRaceOverrideGeneral :
        IEquatable<INpcRaceOverrideGeneralGetter>,
        ILoquiObjectSetter<NpcRaceOverrideGeneral>,
        INpcRaceOverrideGeneral
    {
        #region Ctor
        public NpcRaceOverrideGeneral()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ImpactMaterialType
        private readonly IFormLink<IMaterialTypeGetter> _ImpactMaterialType = new FormLink<IMaterialTypeGetter>();
        public IFormLink<IMaterialTypeGetter> ImpactMaterialType
        {
            get => _ImpactMaterialType;
            set => _ImpactMaterialType.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IMaterialTypeGetter> INpcRaceOverrideGeneralGetter.ImpactMaterialType => this.ImpactMaterialType;
        #endregion
        #region WED0
        public SoundReference WED0 { get; set; } = new SoundReference();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter INpcRaceOverrideGeneralGetter.WED0 => WED0;
        #endregion
        #region WED1
        public SoundReference WED1 { get; set; } = new SoundReference();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter INpcRaceOverrideGeneralGetter.WED1 => WED1;
        #endregion
        #region UnknownForm1
        private readonly IFormLink<IExplosionGetter> _UnknownForm1 = new FormLink<IExplosionGetter>();
        public IFormLink<IExplosionGetter> UnknownForm1
        {
            get => _UnknownForm1;
            set => _UnknownForm1.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IExplosionGetter> INpcRaceOverrideGeneralGetter.UnknownForm1 => this.UnknownForm1;
        #endregion
        #region UnknownForm2
        private readonly IFormLink<IDebrisGetter> _UnknownForm2 = new FormLink<IDebrisGetter>();
        public IFormLink<IDebrisGetter> UnknownForm2
        {
            get => _UnknownForm2;
            set => _UnknownForm2.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IDebrisGetter> INpcRaceOverrideGeneralGetter.UnknownForm2 => this.UnknownForm2;
        #endregion
        #region UnknownForm3
        private readonly IFormLink<IImpactDataSetGetter> _UnknownForm3 = new FormLink<IImpactDataSetGetter>();
        public IFormLink<IImpactDataSetGetter> UnknownForm3
        {
            get => _UnknownForm3;
            set => _UnknownForm3.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IImpactDataSetGetter> INpcRaceOverrideGeneralGetter.UnknownForm3 => this.UnknownForm3;
        #endregion
        #region UnknownFloat
        public Single UnknownFloat { get; set; } = default(Single);
        #endregion
        #region UnknownInt16
        public UInt16 UnknownInt16 { get; set; } = default(UInt16);
        #endregion
        #region ActiveOverrides
        public NpcRaceOverrideGeneral.ActiveOverride ActiveOverrides { get; set; } = default(NpcRaceOverrideGeneral.ActiveOverride);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NpcRaceOverrideGeneralMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INpcRaceOverrideGeneralGetter rhs) return false;
            return ((NpcRaceOverrideGeneralCommon)((INpcRaceOverrideGeneralGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INpcRaceOverrideGeneralGetter? obj)
        {
            return ((NpcRaceOverrideGeneralCommon)((INpcRaceOverrideGeneralGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NpcRaceOverrideGeneralCommon)((INpcRaceOverrideGeneralGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.ImpactMaterialType = initialValue;
                this.WED0 = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.WED1 = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.UnknownForm1 = initialValue;
                this.UnknownForm2 = initialValue;
                this.UnknownForm3 = initialValue;
                this.UnknownFloat = initialValue;
                this.UnknownInt16 = initialValue;
                this.ActiveOverrides = initialValue;
            }

            public Mask(
                TItem ImpactMaterialType,
                TItem WED0,
                TItem WED1,
                TItem UnknownForm1,
                TItem UnknownForm2,
                TItem UnknownForm3,
                TItem UnknownFloat,
                TItem UnknownInt16,
                TItem ActiveOverrides)
            {
                this.ImpactMaterialType = ImpactMaterialType;
                this.WED0 = new MaskItem<TItem, SoundReference.Mask<TItem>?>(WED0, new SoundReference.Mask<TItem>(WED0));
                this.WED1 = new MaskItem<TItem, SoundReference.Mask<TItem>?>(WED1, new SoundReference.Mask<TItem>(WED1));
                this.UnknownForm1 = UnknownForm1;
                this.UnknownForm2 = UnknownForm2;
                this.UnknownForm3 = UnknownForm3;
                this.UnknownFloat = UnknownFloat;
                this.UnknownInt16 = UnknownInt16;
                this.ActiveOverrides = ActiveOverrides;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem ImpactMaterialType;
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? WED0 { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? WED1 { get; set; }
            public TItem UnknownForm1;
            public TItem UnknownForm2;
            public TItem UnknownForm3;
            public TItem UnknownFloat;
            public TItem UnknownInt16;
            public TItem ActiveOverrides;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.ImpactMaterialType, rhs.ImpactMaterialType)) return false;
                if (!object.Equals(this.WED0, rhs.WED0)) return false;
                if (!object.Equals(this.WED1, rhs.WED1)) return false;
                if (!object.Equals(this.UnknownForm1, rhs.UnknownForm1)) return false;
                if (!object.Equals(this.UnknownForm2, rhs.UnknownForm2)) return false;
                if (!object.Equals(this.UnknownForm3, rhs.UnknownForm3)) return false;
                if (!object.Equals(this.UnknownFloat, rhs.UnknownFloat)) return false;
                if (!object.Equals(this.UnknownInt16, rhs.UnknownInt16)) return false;
                if (!object.Equals(this.ActiveOverrides, rhs.ActiveOverrides)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ImpactMaterialType);
                hash.Add(this.WED0);
                hash.Add(this.WED1);
                hash.Add(this.UnknownForm1);
                hash.Add(this.UnknownForm2);
                hash.Add(this.UnknownForm3);
                hash.Add(this.UnknownFloat);
                hash.Add(this.UnknownInt16);
                hash.Add(this.ActiveOverrides);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.ImpactMaterialType)) return false;
                if (WED0 != null)
                {
                    if (!eval(this.WED0.Overall)) return false;
                    if (this.WED0.Specific != null && !this.WED0.Specific.All(eval)) return false;
                }
                if (WED1 != null)
                {
                    if (!eval(this.WED1.Overall)) return false;
                    if (this.WED1.Specific != null && !this.WED1.Specific.All(eval)) return false;
                }
                if (!eval(this.UnknownForm1)) return false;
                if (!eval(this.UnknownForm2)) return false;
                if (!eval(this.UnknownForm3)) return false;
                if (!eval(this.UnknownFloat)) return false;
                if (!eval(this.UnknownInt16)) return false;
                if (!eval(this.ActiveOverrides)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.ImpactMaterialType)) return true;
                if (WED0 != null)
                {
                    if (eval(this.WED0.Overall)) return true;
                    if (this.WED0.Specific != null && this.WED0.Specific.Any(eval)) return true;
                }
                if (WED1 != null)
                {
                    if (eval(this.WED1.Overall)) return true;
                    if (this.WED1.Specific != null && this.WED1.Specific.Any(eval)) return true;
                }
                if (eval(this.UnknownForm1)) return true;
                if (eval(this.UnknownForm2)) return true;
                if (eval(this.UnknownForm3)) return true;
                if (eval(this.UnknownFloat)) return true;
                if (eval(this.UnknownInt16)) return true;
                if (eval(this.ActiveOverrides)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new NpcRaceOverrideGeneral.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.ImpactMaterialType = eval(this.ImpactMaterialType);
                obj.WED0 = this.WED0 == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.WED0.Overall), this.WED0.Specific?.Translate(eval));
                obj.WED1 = this.WED1 == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.WED1.Overall), this.WED1.Specific?.Translate(eval));
                obj.UnknownForm1 = eval(this.UnknownForm1);
                obj.UnknownForm2 = eval(this.UnknownForm2);
                obj.UnknownForm3 = eval(this.UnknownForm3);
                obj.UnknownFloat = eval(this.UnknownFloat);
                obj.UnknownInt16 = eval(this.UnknownInt16);
                obj.ActiveOverrides = eval(this.ActiveOverrides);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(NpcRaceOverrideGeneral.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, NpcRaceOverrideGeneral.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(NpcRaceOverrideGeneral.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ImpactMaterialType ?? true)
                    {
                        sb.AppendItem(ImpactMaterialType, "ImpactMaterialType");
                    }
                    if (printMask?.WED0?.Overall ?? true)
                    {
                        WED0?.Print(sb);
                    }
                    if (printMask?.WED1?.Overall ?? true)
                    {
                        WED1?.Print(sb);
                    }
                    if (printMask?.UnknownForm1 ?? true)
                    {
                        sb.AppendItem(UnknownForm1, "UnknownForm1");
                    }
                    if (printMask?.UnknownForm2 ?? true)
                    {
                        sb.AppendItem(UnknownForm2, "UnknownForm2");
                    }
                    if (printMask?.UnknownForm3 ?? true)
                    {
                        sb.AppendItem(UnknownForm3, "UnknownForm3");
                    }
                    if (printMask?.UnknownFloat ?? true)
                    {
                        sb.AppendItem(UnknownFloat, "UnknownFloat");
                    }
                    if (printMask?.UnknownInt16 ?? true)
                    {
                        sb.AppendItem(UnknownInt16, "UnknownInt16");
                    }
                    if (printMask?.ActiveOverrides ?? true)
                    {
                        sb.AppendItem(ActiveOverrides, "ActiveOverrides");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? ImpactMaterialType;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? WED0;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? WED1;
            public Exception? UnknownForm1;
            public Exception? UnknownForm2;
            public Exception? UnknownForm3;
            public Exception? UnknownFloat;
            public Exception? UnknownInt16;
            public Exception? ActiveOverrides;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                NpcRaceOverrideGeneral_FieldIndex enu = (NpcRaceOverrideGeneral_FieldIndex)index;
                switch (enu)
                {
                    case NpcRaceOverrideGeneral_FieldIndex.ImpactMaterialType:
                        return ImpactMaterialType;
                    case NpcRaceOverrideGeneral_FieldIndex.WED0:
                        return WED0;
                    case NpcRaceOverrideGeneral_FieldIndex.WED1:
                        return WED1;
                    case NpcRaceOverrideGeneral_FieldIndex.UnknownForm1:
                        return UnknownForm1;
                    case NpcRaceOverrideGeneral_FieldIndex.UnknownForm2:
                        return UnknownForm2;
                    case NpcRaceOverrideGeneral_FieldIndex.UnknownForm3:
                        return UnknownForm3;
                    case NpcRaceOverrideGeneral_FieldIndex.UnknownFloat:
                        return UnknownFloat;
                    case NpcRaceOverrideGeneral_FieldIndex.UnknownInt16:
                        return UnknownInt16;
                    case NpcRaceOverrideGeneral_FieldIndex.ActiveOverrides:
                        return ActiveOverrides;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                NpcRaceOverrideGeneral_FieldIndex enu = (NpcRaceOverrideGeneral_FieldIndex)index;
                switch (enu)
                {
                    case NpcRaceOverrideGeneral_FieldIndex.ImpactMaterialType:
                        this.ImpactMaterialType = ex;
                        break;
                    case NpcRaceOverrideGeneral_FieldIndex.WED0:
                        this.WED0 = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case NpcRaceOverrideGeneral_FieldIndex.WED1:
                        this.WED1 = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case NpcRaceOverrideGeneral_FieldIndex.UnknownForm1:
                        this.UnknownForm1 = ex;
                        break;
                    case NpcRaceOverrideGeneral_FieldIndex.UnknownForm2:
                        this.UnknownForm2 = ex;
                        break;
                    case NpcRaceOverrideGeneral_FieldIndex.UnknownForm3:
                        this.UnknownForm3 = ex;
                        break;
                    case NpcRaceOverrideGeneral_FieldIndex.UnknownFloat:
                        this.UnknownFloat = ex;
                        break;
                    case NpcRaceOverrideGeneral_FieldIndex.UnknownInt16:
                        this.UnknownInt16 = ex;
                        break;
                    case NpcRaceOverrideGeneral_FieldIndex.ActiveOverrides:
                        this.ActiveOverrides = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                NpcRaceOverrideGeneral_FieldIndex enu = (NpcRaceOverrideGeneral_FieldIndex)index;
                switch (enu)
                {
                    case NpcRaceOverrideGeneral_FieldIndex.ImpactMaterialType:
                        this.ImpactMaterialType = (Exception?)obj;
                        break;
                    case NpcRaceOverrideGeneral_FieldIndex.WED0:
                        this.WED0 = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case NpcRaceOverrideGeneral_FieldIndex.WED1:
                        this.WED1 = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case NpcRaceOverrideGeneral_FieldIndex.UnknownForm1:
                        this.UnknownForm1 = (Exception?)obj;
                        break;
                    case NpcRaceOverrideGeneral_FieldIndex.UnknownForm2:
                        this.UnknownForm2 = (Exception?)obj;
                        break;
                    case NpcRaceOverrideGeneral_FieldIndex.UnknownForm3:
                        this.UnknownForm3 = (Exception?)obj;
                        break;
                    case NpcRaceOverrideGeneral_FieldIndex.UnknownFloat:
                        this.UnknownFloat = (Exception?)obj;
                        break;
                    case NpcRaceOverrideGeneral_FieldIndex.UnknownInt16:
                        this.UnknownInt16 = (Exception?)obj;
                        break;
                    case NpcRaceOverrideGeneral_FieldIndex.ActiveOverrides:
                        this.ActiveOverrides = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (ImpactMaterialType != null) return true;
                if (WED0 != null) return true;
                if (WED1 != null) return true;
                if (UnknownForm1 != null) return true;
                if (UnknownForm2 != null) return true;
                if (UnknownForm3 != null) return true;
                if (UnknownFloat != null) return true;
                if (UnknownInt16 != null) return true;
                if (ActiveOverrides != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(ImpactMaterialType, "ImpactMaterialType");
                }
                WED0?.Print(sb);
                WED1?.Print(sb);
                {
                    sb.AppendItem(UnknownForm1, "UnknownForm1");
                }
                {
                    sb.AppendItem(UnknownForm2, "UnknownForm2");
                }
                {
                    sb.AppendItem(UnknownForm3, "UnknownForm3");
                }
                {
                    sb.AppendItem(UnknownFloat, "UnknownFloat");
                }
                {
                    sb.AppendItem(UnknownInt16, "UnknownInt16");
                }
                {
                    sb.AppendItem(ActiveOverrides, "ActiveOverrides");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ImpactMaterialType = this.ImpactMaterialType.Combine(rhs.ImpactMaterialType);
                ret.WED0 = this.WED0.Combine(rhs.WED0, (l, r) => l.Combine(r));
                ret.WED1 = this.WED1.Combine(rhs.WED1, (l, r) => l.Combine(r));
                ret.UnknownForm1 = this.UnknownForm1.Combine(rhs.UnknownForm1);
                ret.UnknownForm2 = this.UnknownForm2.Combine(rhs.UnknownForm2);
                ret.UnknownForm3 = this.UnknownForm3.Combine(rhs.UnknownForm3);
                ret.UnknownFloat = this.UnknownFloat.Combine(rhs.UnknownFloat);
                ret.UnknownInt16 = this.UnknownInt16.Combine(rhs.UnknownInt16);
                ret.ActiveOverrides = this.ActiveOverrides.Combine(rhs.ActiveOverrides);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool ImpactMaterialType;
            public SoundReference.TranslationMask? WED0;
            public SoundReference.TranslationMask? WED1;
            public bool UnknownForm1;
            public bool UnknownForm2;
            public bool UnknownForm3;
            public bool UnknownFloat;
            public bool UnknownInt16;
            public bool ActiveOverrides;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.ImpactMaterialType = defaultOn;
                this.UnknownForm1 = defaultOn;
                this.UnknownForm2 = defaultOn;
                this.UnknownForm3 = defaultOn;
                this.UnknownFloat = defaultOn;
                this.UnknownInt16 = defaultOn;
                this.ActiveOverrides = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((ImpactMaterialType, null));
                ret.Add((WED0 != null ? WED0.OnOverall : DefaultOn, WED0?.GetCrystal()));
                ret.Add((WED1 != null ? WED1.OnOverall : DefaultOn, WED1?.GetCrystal()));
                ret.Add((UnknownForm1, null));
                ret.Add((UnknownForm2, null));
                ret.Add((UnknownForm3, null));
                ret.Add((UnknownFloat, null));
                ret.Add((UnknownInt16, null));
                ret.Add((ActiveOverrides, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => NpcRaceOverrideGeneralCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => NpcRaceOverrideGeneralSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NpcRaceOverrideGeneralBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcRaceOverrideGeneralBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static NpcRaceOverrideGeneral CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new NpcRaceOverrideGeneral();
            ((NpcRaceOverrideGeneralSetterCommon)((INpcRaceOverrideGeneralGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out NpcRaceOverrideGeneral item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((NpcRaceOverrideGeneralSetterCommon)((INpcRaceOverrideGeneralGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static NpcRaceOverrideGeneral GetNew()
        {
            return new NpcRaceOverrideGeneral();
        }

    }
    #endregion

    #region Interface
    public partial interface INpcRaceOverrideGeneral :
        IFormLinkContainer,
        ILoquiObjectSetter<INpcRaceOverrideGeneral>,
        INpcRaceOverrideGeneralGetter
    {
        new IFormLink<IMaterialTypeGetter> ImpactMaterialType { get; set; }
        new SoundReference WED0 { get; set; }
        new SoundReference WED1 { get; set; }
        new IFormLink<IExplosionGetter> UnknownForm1 { get; set; }
        new IFormLink<IDebrisGetter> UnknownForm2 { get; set; }
        new IFormLink<IImpactDataSetGetter> UnknownForm3 { get; set; }
        new Single UnknownFloat { get; set; }
        new UInt16 UnknownInt16 { get; set; }
        new NpcRaceOverrideGeneral.ActiveOverride ActiveOverrides { get; set; }
    }

    public partial interface INpcRaceOverrideGeneralGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<INpcRaceOverrideGeneralGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => NpcRaceOverrideGeneral_Registration.Instance;
        IFormLinkGetter<IMaterialTypeGetter> ImpactMaterialType { get; }
        ISoundReferenceGetter WED0 { get; }
        ISoundReferenceGetter WED1 { get; }
        IFormLinkGetter<IExplosionGetter> UnknownForm1 { get; }
        IFormLinkGetter<IDebrisGetter> UnknownForm2 { get; }
        IFormLinkGetter<IImpactDataSetGetter> UnknownForm3 { get; }
        Single UnknownFloat { get; }
        UInt16 UnknownInt16 { get; }
        NpcRaceOverrideGeneral.ActiveOverride ActiveOverrides { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class NpcRaceOverrideGeneralMixIn
    {
        public static void Clear(this INpcRaceOverrideGeneral item)
        {
            ((NpcRaceOverrideGeneralSetterCommon)((INpcRaceOverrideGeneralGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static NpcRaceOverrideGeneral.Mask<bool> GetEqualsMask(
            this INpcRaceOverrideGeneralGetter item,
            INpcRaceOverrideGeneralGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NpcRaceOverrideGeneralCommon)((INpcRaceOverrideGeneralGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this INpcRaceOverrideGeneralGetter item,
            string? name = null,
            NpcRaceOverrideGeneral.Mask<bool>? printMask = null)
        {
            return ((NpcRaceOverrideGeneralCommon)((INpcRaceOverrideGeneralGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this INpcRaceOverrideGeneralGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NpcRaceOverrideGeneral.Mask<bool>? printMask = null)
        {
            ((NpcRaceOverrideGeneralCommon)((INpcRaceOverrideGeneralGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INpcRaceOverrideGeneralGetter item,
            INpcRaceOverrideGeneralGetter rhs,
            NpcRaceOverrideGeneral.TranslationMask? equalsMask = null)
        {
            return ((NpcRaceOverrideGeneralCommon)((INpcRaceOverrideGeneralGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this INpcRaceOverrideGeneral lhs,
            INpcRaceOverrideGeneralGetter rhs)
        {
            ((NpcRaceOverrideGeneralSetterTranslationCommon)((INpcRaceOverrideGeneralGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INpcRaceOverrideGeneral lhs,
            INpcRaceOverrideGeneralGetter rhs,
            NpcRaceOverrideGeneral.TranslationMask? copyMask = null)
        {
            ((NpcRaceOverrideGeneralSetterTranslationCommon)((INpcRaceOverrideGeneralGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INpcRaceOverrideGeneral lhs,
            INpcRaceOverrideGeneralGetter rhs,
            out NpcRaceOverrideGeneral.ErrorMask errorMask,
            NpcRaceOverrideGeneral.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NpcRaceOverrideGeneralSetterTranslationCommon)((INpcRaceOverrideGeneralGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = NpcRaceOverrideGeneral.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INpcRaceOverrideGeneral lhs,
            INpcRaceOverrideGeneralGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NpcRaceOverrideGeneralSetterTranslationCommon)((INpcRaceOverrideGeneralGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static NpcRaceOverrideGeneral DeepCopy(
            this INpcRaceOverrideGeneralGetter item,
            NpcRaceOverrideGeneral.TranslationMask? copyMask = null)
        {
            return ((NpcRaceOverrideGeneralSetterTranslationCommon)((INpcRaceOverrideGeneralGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NpcRaceOverrideGeneral DeepCopy(
            this INpcRaceOverrideGeneralGetter item,
            out NpcRaceOverrideGeneral.ErrorMask errorMask,
            NpcRaceOverrideGeneral.TranslationMask? copyMask = null)
        {
            return ((NpcRaceOverrideGeneralSetterTranslationCommon)((INpcRaceOverrideGeneralGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NpcRaceOverrideGeneral DeepCopy(
            this INpcRaceOverrideGeneralGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NpcRaceOverrideGeneralSetterTranslationCommon)((INpcRaceOverrideGeneralGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this INpcRaceOverrideGeneral item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((NpcRaceOverrideGeneralSetterCommon)((INpcRaceOverrideGeneralGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum NpcRaceOverrideGeneral_FieldIndex
    {
        ImpactMaterialType = 0,
        WED0 = 1,
        WED1 = 2,
        UnknownForm1 = 3,
        UnknownForm2 = 4,
        UnknownForm3 = 5,
        UnknownFloat = 6,
        UnknownInt16 = 7,
        ActiveOverrides = 8,
    }
    #endregion

    #region Registration
    internal partial class NpcRaceOverrideGeneral_Registration : ILoquiRegistration
    {
        public static readonly NpcRaceOverrideGeneral_Registration Instance = new NpcRaceOverrideGeneral_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(NpcRaceOverrideGeneral.Mask<>);

        public static readonly Type ErrorMaskType = typeof(NpcRaceOverrideGeneral.ErrorMask);

        public static readonly Type ClassType = typeof(NpcRaceOverrideGeneral);

        public static readonly Type GetterType = typeof(INpcRaceOverrideGeneralGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INpcRaceOverrideGeneral);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.NpcRaceOverrideGeneral";

        public const string Name = "NpcRaceOverrideGeneral";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(NpcRaceOverrideGeneralBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class NpcRaceOverrideGeneralSetterCommon
    {
        public static readonly NpcRaceOverrideGeneralSetterCommon Instance = new NpcRaceOverrideGeneralSetterCommon();

        partial void ClearPartial();
        
        public void Clear(INpcRaceOverrideGeneral item)
        {
            ClearPartial();
            item.ImpactMaterialType.Clear();
            item.WED0.Clear();
            item.WED1.Clear();
            item.UnknownForm1.Clear();
            item.UnknownForm2.Clear();
            item.UnknownForm3.Clear();
            item.UnknownFloat = default(Single);
            item.UnknownInt16 = default(UInt16);
            item.ActiveOverrides = default(NpcRaceOverrideGeneral.ActiveOverride);
        }
        
        #region Mutagen
        public void RemapLinks(INpcRaceOverrideGeneral obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.ImpactMaterialType.Relink(mapping);
            obj.WED0.RemapLinks(mapping);
            obj.WED1.RemapLinks(mapping);
            obj.UnknownForm1.Relink(mapping);
            obj.UnknownForm2.Relink(mapping);
            obj.UnknownForm3.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INpcRaceOverrideGeneral item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: NpcRaceOverrideGeneralBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class NpcRaceOverrideGeneralCommon
    {
        public static readonly NpcRaceOverrideGeneralCommon Instance = new NpcRaceOverrideGeneralCommon();

        public NpcRaceOverrideGeneral.Mask<bool> GetEqualsMask(
            INpcRaceOverrideGeneralGetter item,
            INpcRaceOverrideGeneralGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NpcRaceOverrideGeneral.Mask<bool>(false);
            ((NpcRaceOverrideGeneralCommon)((INpcRaceOverrideGeneralGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INpcRaceOverrideGeneralGetter item,
            INpcRaceOverrideGeneralGetter rhs,
            NpcRaceOverrideGeneral.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ImpactMaterialType = item.ImpactMaterialType.Equals(rhs.ImpactMaterialType);
            ret.WED0 = MaskItemExt.Factory(item.WED0.GetEqualsMask(rhs.WED0, include), include);
            ret.WED1 = MaskItemExt.Factory(item.WED1.GetEqualsMask(rhs.WED1, include), include);
            ret.UnknownForm1 = item.UnknownForm1.Equals(rhs.UnknownForm1);
            ret.UnknownForm2 = item.UnknownForm2.Equals(rhs.UnknownForm2);
            ret.UnknownForm3 = item.UnknownForm3.Equals(rhs.UnknownForm3);
            ret.UnknownFloat = item.UnknownFloat.EqualsWithin(rhs.UnknownFloat);
            ret.UnknownInt16 = item.UnknownInt16 == rhs.UnknownInt16;
            ret.ActiveOverrides = item.ActiveOverrides == rhs.ActiveOverrides;
        }
        
        public string Print(
            INpcRaceOverrideGeneralGetter item,
            string? name = null,
            NpcRaceOverrideGeneral.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            INpcRaceOverrideGeneralGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NpcRaceOverrideGeneral.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"NpcRaceOverrideGeneral =>");
            }
            else
            {
                sb.AppendLine($"{name} (NpcRaceOverrideGeneral) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            INpcRaceOverrideGeneralGetter item,
            StructuredStringBuilder sb,
            NpcRaceOverrideGeneral.Mask<bool>? printMask = null)
        {
            if (printMask?.ImpactMaterialType ?? true)
            {
                sb.AppendItem(item.ImpactMaterialType.FormKey, "ImpactMaterialType");
            }
            if (printMask?.WED0?.Overall ?? true)
            {
                item.WED0?.Print(sb, "WED0");
            }
            if (printMask?.WED1?.Overall ?? true)
            {
                item.WED1?.Print(sb, "WED1");
            }
            if (printMask?.UnknownForm1 ?? true)
            {
                sb.AppendItem(item.UnknownForm1.FormKey, "UnknownForm1");
            }
            if (printMask?.UnknownForm2 ?? true)
            {
                sb.AppendItem(item.UnknownForm2.FormKey, "UnknownForm2");
            }
            if (printMask?.UnknownForm3 ?? true)
            {
                sb.AppendItem(item.UnknownForm3.FormKey, "UnknownForm3");
            }
            if (printMask?.UnknownFloat ?? true)
            {
                sb.AppendItem(item.UnknownFloat, "UnknownFloat");
            }
            if (printMask?.UnknownInt16 ?? true)
            {
                sb.AppendItem(item.UnknownInt16, "UnknownInt16");
            }
            if (printMask?.ActiveOverrides ?? true)
            {
                sb.AppendItem(item.ActiveOverrides, "ActiveOverrides");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INpcRaceOverrideGeneralGetter? lhs,
            INpcRaceOverrideGeneralGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)NpcRaceOverrideGeneral_FieldIndex.ImpactMaterialType) ?? true))
            {
                if (!lhs.ImpactMaterialType.Equals(rhs.ImpactMaterialType)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRaceOverrideGeneral_FieldIndex.WED0) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.WED0, rhs.WED0, out var lhsWED0, out var rhsWED0, out var isWED0Equal))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsWED0).CommonInstance()!).Equals(lhsWED0, rhsWED0, equalsMask?.GetSubCrystal((int)NpcRaceOverrideGeneral_FieldIndex.WED0))) return false;
                }
                else if (!isWED0Equal) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRaceOverrideGeneral_FieldIndex.WED1) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.WED1, rhs.WED1, out var lhsWED1, out var rhsWED1, out var isWED1Equal))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsWED1).CommonInstance()!).Equals(lhsWED1, rhsWED1, equalsMask?.GetSubCrystal((int)NpcRaceOverrideGeneral_FieldIndex.WED1))) return false;
                }
                else if (!isWED1Equal) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRaceOverrideGeneral_FieldIndex.UnknownForm1) ?? true))
            {
                if (!lhs.UnknownForm1.Equals(rhs.UnknownForm1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRaceOverrideGeneral_FieldIndex.UnknownForm2) ?? true))
            {
                if (!lhs.UnknownForm2.Equals(rhs.UnknownForm2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRaceOverrideGeneral_FieldIndex.UnknownForm3) ?? true))
            {
                if (!lhs.UnknownForm3.Equals(rhs.UnknownForm3)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRaceOverrideGeneral_FieldIndex.UnknownFloat) ?? true))
            {
                if (!lhs.UnknownFloat.EqualsWithin(rhs.UnknownFloat)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRaceOverrideGeneral_FieldIndex.UnknownInt16) ?? true))
            {
                if (lhs.UnknownInt16 != rhs.UnknownInt16) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcRaceOverrideGeneral_FieldIndex.ActiveOverrides) ?? true))
            {
                if (lhs.ActiveOverrides != rhs.ActiveOverrides) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(INpcRaceOverrideGeneralGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ImpactMaterialType);
            hash.Add(item.WED0);
            hash.Add(item.WED1);
            hash.Add(item.UnknownForm1);
            hash.Add(item.UnknownForm2);
            hash.Add(item.UnknownForm3);
            hash.Add(item.UnknownFloat);
            hash.Add(item.UnknownInt16);
            hash.Add(item.ActiveOverrides);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return NpcRaceOverrideGeneral.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(INpcRaceOverrideGeneralGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.ImpactMaterialType);
            foreach (var item in obj.WED0.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.WED1.EnumerateFormLinks())
            {
                yield return item;
            }
            yield return FormLinkInformation.Factory(obj.UnknownForm1);
            yield return FormLinkInformation.Factory(obj.UnknownForm2);
            yield return FormLinkInformation.Factory(obj.UnknownForm3);
            yield break;
        }
        
        #endregion
        
    }
    internal partial class NpcRaceOverrideGeneralSetterTranslationCommon
    {
        public static readonly NpcRaceOverrideGeneralSetterTranslationCommon Instance = new NpcRaceOverrideGeneralSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            INpcRaceOverrideGeneral item,
            INpcRaceOverrideGeneralGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)NpcRaceOverrideGeneral_FieldIndex.ImpactMaterialType) ?? true))
            {
                item.ImpactMaterialType.SetTo(rhs.ImpactMaterialType.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRaceOverrideGeneral_FieldIndex.WED0) ?? true))
            {
                errorMask?.PushIndex((int)NpcRaceOverrideGeneral_FieldIndex.WED0);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)NpcRaceOverrideGeneral_FieldIndex.WED0) ?? true))
                    {
                        item.WED0 = rhs.WED0.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)NpcRaceOverrideGeneral_FieldIndex.WED0),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRaceOverrideGeneral_FieldIndex.WED1) ?? true))
            {
                errorMask?.PushIndex((int)NpcRaceOverrideGeneral_FieldIndex.WED1);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)NpcRaceOverrideGeneral_FieldIndex.WED1) ?? true))
                    {
                        item.WED1 = rhs.WED1.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)NpcRaceOverrideGeneral_FieldIndex.WED1),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRaceOverrideGeneral_FieldIndex.UnknownForm1) ?? true))
            {
                item.UnknownForm1.SetTo(rhs.UnknownForm1.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRaceOverrideGeneral_FieldIndex.UnknownForm2) ?? true))
            {
                item.UnknownForm2.SetTo(rhs.UnknownForm2.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRaceOverrideGeneral_FieldIndex.UnknownForm3) ?? true))
            {
                item.UnknownForm3.SetTo(rhs.UnknownForm3.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRaceOverrideGeneral_FieldIndex.UnknownFloat) ?? true))
            {
                item.UnknownFloat = rhs.UnknownFloat;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRaceOverrideGeneral_FieldIndex.UnknownInt16) ?? true))
            {
                item.UnknownInt16 = rhs.UnknownInt16;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcRaceOverrideGeneral_FieldIndex.ActiveOverrides) ?? true))
            {
                item.ActiveOverrides = rhs.ActiveOverrides;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            INpcRaceOverrideGeneral item,
            INpcRaceOverrideGeneralGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public NpcRaceOverrideGeneral DeepCopy(
            INpcRaceOverrideGeneralGetter item,
            NpcRaceOverrideGeneral.TranslationMask? copyMask = null)
        {
            NpcRaceOverrideGeneral ret = (NpcRaceOverrideGeneral)((NpcRaceOverrideGeneralCommon)((INpcRaceOverrideGeneralGetter)item).CommonInstance()!).GetNew();
            ((NpcRaceOverrideGeneralSetterTranslationCommon)((INpcRaceOverrideGeneralGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public NpcRaceOverrideGeneral DeepCopy(
            INpcRaceOverrideGeneralGetter item,
            out NpcRaceOverrideGeneral.ErrorMask errorMask,
            NpcRaceOverrideGeneral.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            NpcRaceOverrideGeneral ret = (NpcRaceOverrideGeneral)((NpcRaceOverrideGeneralCommon)((INpcRaceOverrideGeneralGetter)item).CommonInstance()!).GetNew();
            ((NpcRaceOverrideGeneralSetterTranslationCommon)((INpcRaceOverrideGeneralGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = NpcRaceOverrideGeneral.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public NpcRaceOverrideGeneral DeepCopy(
            INpcRaceOverrideGeneralGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            NpcRaceOverrideGeneral ret = (NpcRaceOverrideGeneral)((NpcRaceOverrideGeneralCommon)((INpcRaceOverrideGeneralGetter)item).CommonInstance()!).GetNew();
            ((NpcRaceOverrideGeneralSetterTranslationCommon)((INpcRaceOverrideGeneralGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class NpcRaceOverrideGeneral
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NpcRaceOverrideGeneral_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => NpcRaceOverrideGeneral_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NpcRaceOverrideGeneralCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return NpcRaceOverrideGeneralSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NpcRaceOverrideGeneralSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INpcRaceOverrideGeneralGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object INpcRaceOverrideGeneralGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object INpcRaceOverrideGeneralGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class NpcRaceOverrideGeneralBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly NpcRaceOverrideGeneralBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            INpcRaceOverrideGeneralGetter item,
            MutagenWriter writer)
        {
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ImpactMaterialType);
            var WED0Item = item.WED0;
            ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)WED0Item).BinaryWriteTranslator).Write(
                item: WED0Item,
                writer: writer);
            var WED1Item = item.WED1;
            ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)WED1Item).BinaryWriteTranslator).Write(
                item: WED1Item,
                writer: writer);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.UnknownForm1);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.UnknownForm2);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.UnknownForm3);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.UnknownFloat);
            writer.Write(item.UnknownInt16);
            EnumBinaryTranslation<NpcRaceOverrideGeneral.ActiveOverride, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.ActiveOverrides,
                length: 4);
        }

        public void Write(
            MutagenWriter writer,
            INpcRaceOverrideGeneralGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (INpcRaceOverrideGeneralGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class NpcRaceOverrideGeneralBinaryCreateTranslation
    {
        public static readonly NpcRaceOverrideGeneralBinaryCreateTranslation Instance = new NpcRaceOverrideGeneralBinaryCreateTranslation();

        public static void FillBinaryStructs(
            INpcRaceOverrideGeneral item,
            MutagenFrame frame)
        {
            item.ImpactMaterialType.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.WED0 = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
            item.WED1 = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
            item.UnknownForm1.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.UnknownForm2.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.UnknownForm3.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.UnknownFloat = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.UnknownInt16 = frame.ReadUInt16();
            item.ActiveOverrides = EnumBinaryTranslation<NpcRaceOverrideGeneral.ActiveOverride, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class NpcRaceOverrideGeneralBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this INpcRaceOverrideGeneralGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcRaceOverrideGeneralBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class NpcRaceOverrideGeneralBinaryOverlay :
        PluginBinaryOverlay,
        INpcRaceOverrideGeneralGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NpcRaceOverrideGeneral_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => NpcRaceOverrideGeneral_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NpcRaceOverrideGeneralCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NpcRaceOverrideGeneralSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INpcRaceOverrideGeneralGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? INpcRaceOverrideGeneralGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object INpcRaceOverrideGeneralGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => NpcRaceOverrideGeneralCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NpcRaceOverrideGeneralBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcRaceOverrideGeneralBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public IFormLinkGetter<IMaterialTypeGetter> ImpactMaterialType => FormLinkBinaryTranslation.Instance.OverlayFactory<IMaterialTypeGetter>(_package, _structData.Span.Slice(0x0, 0x4));
        public ISoundReferenceGetter WED0 => SoundReferenceBinaryOverlay.SoundReferenceFactory(_structData.Slice(0x4), _package, default(TypedParseParams));
        public ISoundReferenceGetter WED1 => SoundReferenceBinaryOverlay.SoundReferenceFactory(_structData.Slice(0x2C), _package, default(TypedParseParams));
        public IFormLinkGetter<IExplosionGetter> UnknownForm1 => FormLinkBinaryTranslation.Instance.OverlayFactory<IExplosionGetter>(_package, _structData.Span.Slice(0x54, 0x4));
        public IFormLinkGetter<IDebrisGetter> UnknownForm2 => FormLinkBinaryTranslation.Instance.OverlayFactory<IDebrisGetter>(_package, _structData.Span.Slice(0x58, 0x4));
        public IFormLinkGetter<IImpactDataSetGetter> UnknownForm3 => FormLinkBinaryTranslation.Instance.OverlayFactory<IImpactDataSetGetter>(_package, _structData.Span.Slice(0x5C, 0x4));
        public Single UnknownFloat => _structData.Slice(0x60, 0x4).Float();
        public UInt16 UnknownInt16 => BinaryPrimitives.ReadUInt16LittleEndian(_structData.Slice(0x64, 0x2));
        public NpcRaceOverrideGeneral.ActiveOverride ActiveOverrides => (NpcRaceOverrideGeneral.ActiveOverride)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0x66, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NpcRaceOverrideGeneralBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static INpcRaceOverrideGeneralGetter NpcRaceOverrideGeneralFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x6A,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new NpcRaceOverrideGeneralBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x6A;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static INpcRaceOverrideGeneralGetter NpcRaceOverrideGeneralFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return NpcRaceOverrideGeneralFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NpcRaceOverrideGeneralMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INpcRaceOverrideGeneralGetter rhs) return false;
            return ((NpcRaceOverrideGeneralCommon)((INpcRaceOverrideGeneralGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INpcRaceOverrideGeneralGetter? obj)
        {
            return ((NpcRaceOverrideGeneralCommon)((INpcRaceOverrideGeneralGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NpcRaceOverrideGeneralCommon)((INpcRaceOverrideGeneralGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

