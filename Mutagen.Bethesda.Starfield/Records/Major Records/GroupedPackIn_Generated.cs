/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class GroupedPackIn :
        IEquatable<IGroupedPackInGetter>,
        IGroupedPackIn,
        ILoquiObjectSetter<GroupedPackIn>
    {
        #region Ctor
        public GroupedPackIn()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region GNAM
        private readonly IFormLinkNullable<IPackInGetter> _GNAM = new FormLinkNullable<IPackInGetter>();
        public IFormLinkNullable<IPackInGetter> GNAM
        {
            get => _GNAM;
            set => _GNAM.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPackInGetter> IGroupedPackInGetter.GNAM => this.GNAM;
        #endregion
        #region HNAM
        private readonly IFormLinkNullable<IPlacedObjectGetter> _HNAM = new FormLinkNullable<IPlacedObjectGetter>();
        public IFormLinkNullable<IPlacedObjectGetter> HNAM
        {
            get => _HNAM;
            set => _HNAM.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPlacedObjectGetter> IGroupedPackInGetter.HNAM => this.HNAM;
        #endregion
        #region INAM
        public Boolean? INAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Boolean? IGroupedPackInGetter.INAM => this.INAM;
        #endregion
        #region JNAM
        private readonly IFormLinkNullable<IPackInGetter> _JNAM = new FormLinkNullable<IPackInGetter>();
        public IFormLinkNullable<IPackInGetter> JNAM
        {
            get => _JNAM;
            set => _JNAM.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPackInGetter> IGroupedPackInGetter.JNAM => this.JNAM;
        #endregion
        #region LNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _LNAM = new byte[0];
        public MemorySlice<Byte> LNAM
        {
            get => _LNAM;
            set => this._LNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IGroupedPackInGetter.LNAM => this.LNAM;
        #endregion
        #region XGOM
        public Boolean XGOM { get; set; } = default(Boolean);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            GroupedPackInMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IGroupedPackInGetter rhs) return false;
            return ((GroupedPackInCommon)((IGroupedPackInGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IGroupedPackInGetter? obj)
        {
            return ((GroupedPackInCommon)((IGroupedPackInGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((GroupedPackInCommon)((IGroupedPackInGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.GNAM = initialValue;
                this.HNAM = initialValue;
                this.INAM = initialValue;
                this.JNAM = initialValue;
                this.LNAM = initialValue;
                this.XGOM = initialValue;
            }

            public Mask(
                TItem GNAM,
                TItem HNAM,
                TItem INAM,
                TItem JNAM,
                TItem LNAM,
                TItem XGOM)
            {
                this.GNAM = GNAM;
                this.HNAM = HNAM;
                this.INAM = INAM;
                this.JNAM = JNAM;
                this.LNAM = LNAM;
                this.XGOM = XGOM;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem GNAM;
            public TItem HNAM;
            public TItem INAM;
            public TItem JNAM;
            public TItem LNAM;
            public TItem XGOM;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.GNAM, rhs.GNAM)) return false;
                if (!object.Equals(this.HNAM, rhs.HNAM)) return false;
                if (!object.Equals(this.INAM, rhs.INAM)) return false;
                if (!object.Equals(this.JNAM, rhs.JNAM)) return false;
                if (!object.Equals(this.LNAM, rhs.LNAM)) return false;
                if (!object.Equals(this.XGOM, rhs.XGOM)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.GNAM);
                hash.Add(this.HNAM);
                hash.Add(this.INAM);
                hash.Add(this.JNAM);
                hash.Add(this.LNAM);
                hash.Add(this.XGOM);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.GNAM)) return false;
                if (!eval(this.HNAM)) return false;
                if (!eval(this.INAM)) return false;
                if (!eval(this.JNAM)) return false;
                if (!eval(this.LNAM)) return false;
                if (!eval(this.XGOM)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.GNAM)) return true;
                if (eval(this.HNAM)) return true;
                if (eval(this.INAM)) return true;
                if (eval(this.JNAM)) return true;
                if (eval(this.LNAM)) return true;
                if (eval(this.XGOM)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new GroupedPackIn.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.GNAM = eval(this.GNAM);
                obj.HNAM = eval(this.HNAM);
                obj.INAM = eval(this.INAM);
                obj.JNAM = eval(this.JNAM);
                obj.LNAM = eval(this.LNAM);
                obj.XGOM = eval(this.XGOM);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(GroupedPackIn.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, GroupedPackIn.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(GroupedPackIn.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.GNAM ?? true)
                    {
                        sb.AppendItem(GNAM, "GNAM");
                    }
                    if (printMask?.HNAM ?? true)
                    {
                        sb.AppendItem(HNAM, "HNAM");
                    }
                    if (printMask?.INAM ?? true)
                    {
                        sb.AppendItem(INAM, "INAM");
                    }
                    if (printMask?.JNAM ?? true)
                    {
                        sb.AppendItem(JNAM, "JNAM");
                    }
                    if (printMask?.LNAM ?? true)
                    {
                        sb.AppendItem(LNAM, "LNAM");
                    }
                    if (printMask?.XGOM ?? true)
                    {
                        sb.AppendItem(XGOM, "XGOM");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? GNAM;
            public Exception? HNAM;
            public Exception? INAM;
            public Exception? JNAM;
            public Exception? LNAM;
            public Exception? XGOM;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                GroupedPackIn_FieldIndex enu = (GroupedPackIn_FieldIndex)index;
                switch (enu)
                {
                    case GroupedPackIn_FieldIndex.GNAM:
                        return GNAM;
                    case GroupedPackIn_FieldIndex.HNAM:
                        return HNAM;
                    case GroupedPackIn_FieldIndex.INAM:
                        return INAM;
                    case GroupedPackIn_FieldIndex.JNAM:
                        return JNAM;
                    case GroupedPackIn_FieldIndex.LNAM:
                        return LNAM;
                    case GroupedPackIn_FieldIndex.XGOM:
                        return XGOM;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                GroupedPackIn_FieldIndex enu = (GroupedPackIn_FieldIndex)index;
                switch (enu)
                {
                    case GroupedPackIn_FieldIndex.GNAM:
                        this.GNAM = ex;
                        break;
                    case GroupedPackIn_FieldIndex.HNAM:
                        this.HNAM = ex;
                        break;
                    case GroupedPackIn_FieldIndex.INAM:
                        this.INAM = ex;
                        break;
                    case GroupedPackIn_FieldIndex.JNAM:
                        this.JNAM = ex;
                        break;
                    case GroupedPackIn_FieldIndex.LNAM:
                        this.LNAM = ex;
                        break;
                    case GroupedPackIn_FieldIndex.XGOM:
                        this.XGOM = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                GroupedPackIn_FieldIndex enu = (GroupedPackIn_FieldIndex)index;
                switch (enu)
                {
                    case GroupedPackIn_FieldIndex.GNAM:
                        this.GNAM = (Exception?)obj;
                        break;
                    case GroupedPackIn_FieldIndex.HNAM:
                        this.HNAM = (Exception?)obj;
                        break;
                    case GroupedPackIn_FieldIndex.INAM:
                        this.INAM = (Exception?)obj;
                        break;
                    case GroupedPackIn_FieldIndex.JNAM:
                        this.JNAM = (Exception?)obj;
                        break;
                    case GroupedPackIn_FieldIndex.LNAM:
                        this.LNAM = (Exception?)obj;
                        break;
                    case GroupedPackIn_FieldIndex.XGOM:
                        this.XGOM = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (GNAM != null) return true;
                if (HNAM != null) return true;
                if (INAM != null) return true;
                if (JNAM != null) return true;
                if (LNAM != null) return true;
                if (XGOM != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(GNAM, "GNAM");
                }
                {
                    sb.AppendItem(HNAM, "HNAM");
                }
                {
                    sb.AppendItem(INAM, "INAM");
                }
                {
                    sb.AppendItem(JNAM, "JNAM");
                }
                {
                    sb.AppendItem(LNAM, "LNAM");
                }
                {
                    sb.AppendItem(XGOM, "XGOM");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.GNAM = this.GNAM.Combine(rhs.GNAM);
                ret.HNAM = this.HNAM.Combine(rhs.HNAM);
                ret.INAM = this.INAM.Combine(rhs.INAM);
                ret.JNAM = this.JNAM.Combine(rhs.JNAM);
                ret.LNAM = this.LNAM.Combine(rhs.LNAM);
                ret.XGOM = this.XGOM.Combine(rhs.XGOM);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool GNAM;
            public bool HNAM;
            public bool INAM;
            public bool JNAM;
            public bool LNAM;
            public bool XGOM;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.GNAM = defaultOn;
                this.HNAM = defaultOn;
                this.INAM = defaultOn;
                this.JNAM = defaultOn;
                this.LNAM = defaultOn;
                this.XGOM = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((GNAM, null));
                ret.Add((HNAM, null));
                ret.Add((INAM, null));
                ret.Add((JNAM, null));
                ret.Add((LNAM, null));
                ret.Add((XGOM, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => GroupedPackInCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => GroupedPackInSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => GroupedPackInBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((GroupedPackInBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static GroupedPackIn CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new GroupedPackIn();
            ((GroupedPackInSetterCommon)((IGroupedPackInGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out GroupedPackIn item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((GroupedPackInSetterCommon)((IGroupedPackInGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static GroupedPackIn GetNew()
        {
            return new GroupedPackIn();
        }

    }
    #endregion

    #region Interface
    public partial interface IGroupedPackIn :
        IFormLinkContainer,
        IGroupedPackInGetter,
        ILoquiObjectSetter<IGroupedPackIn>
    {
        new IFormLinkNullable<IPackInGetter> GNAM { get; set; }
        new IFormLinkNullable<IPlacedObjectGetter> HNAM { get; set; }
        new Boolean? INAM { get; set; }
        new IFormLinkNullable<IPackInGetter> JNAM { get; set; }
        new MemorySlice<Byte> LNAM { get; set; }
        new Boolean XGOM { get; set; }
    }

    public partial interface IGroupedPackInGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IGroupedPackInGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => GroupedPackIn_Registration.Instance;
        IFormLinkNullableGetter<IPackInGetter> GNAM { get; }
        IFormLinkNullableGetter<IPlacedObjectGetter> HNAM { get; }
        Boolean? INAM { get; }
        IFormLinkNullableGetter<IPackInGetter> JNAM { get; }
        ReadOnlyMemorySlice<Byte> LNAM { get; }
        Boolean XGOM { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class GroupedPackInMixIn
    {
        public static void Clear(this IGroupedPackIn item)
        {
            ((GroupedPackInSetterCommon)((IGroupedPackInGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static GroupedPackIn.Mask<bool> GetEqualsMask(
            this IGroupedPackInGetter item,
            IGroupedPackInGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((GroupedPackInCommon)((IGroupedPackInGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IGroupedPackInGetter item,
            string? name = null,
            GroupedPackIn.Mask<bool>? printMask = null)
        {
            return ((GroupedPackInCommon)((IGroupedPackInGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IGroupedPackInGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            GroupedPackIn.Mask<bool>? printMask = null)
        {
            ((GroupedPackInCommon)((IGroupedPackInGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IGroupedPackInGetter item,
            IGroupedPackInGetter rhs,
            GroupedPackIn.TranslationMask? equalsMask = null)
        {
            return ((GroupedPackInCommon)((IGroupedPackInGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IGroupedPackIn lhs,
            IGroupedPackInGetter rhs)
        {
            ((GroupedPackInSetterTranslationCommon)((IGroupedPackInGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IGroupedPackIn lhs,
            IGroupedPackInGetter rhs,
            GroupedPackIn.TranslationMask? copyMask = null)
        {
            ((GroupedPackInSetterTranslationCommon)((IGroupedPackInGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IGroupedPackIn lhs,
            IGroupedPackInGetter rhs,
            out GroupedPackIn.ErrorMask errorMask,
            GroupedPackIn.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((GroupedPackInSetterTranslationCommon)((IGroupedPackInGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = GroupedPackIn.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IGroupedPackIn lhs,
            IGroupedPackInGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((GroupedPackInSetterTranslationCommon)((IGroupedPackInGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static GroupedPackIn DeepCopy(
            this IGroupedPackInGetter item,
            GroupedPackIn.TranslationMask? copyMask = null)
        {
            return ((GroupedPackInSetterTranslationCommon)((IGroupedPackInGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static GroupedPackIn DeepCopy(
            this IGroupedPackInGetter item,
            out GroupedPackIn.ErrorMask errorMask,
            GroupedPackIn.TranslationMask? copyMask = null)
        {
            return ((GroupedPackInSetterTranslationCommon)((IGroupedPackInGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static GroupedPackIn DeepCopy(
            this IGroupedPackInGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((GroupedPackInSetterTranslationCommon)((IGroupedPackInGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IGroupedPackIn item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((GroupedPackInSetterCommon)((IGroupedPackInGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum GroupedPackIn_FieldIndex
    {
        GNAM = 0,
        HNAM = 1,
        INAM = 2,
        JNAM = 3,
        LNAM = 4,
        XGOM = 5,
    }
    #endregion

    #region Registration
    internal partial class GroupedPackIn_Registration : ILoquiRegistration
    {
        public static readonly GroupedPackIn_Registration Instance = new GroupedPackIn_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(GroupedPackIn.Mask<>);

        public static readonly Type ErrorMaskType = typeof(GroupedPackIn.ErrorMask);

        public static readonly Type ClassType = typeof(GroupedPackIn);

        public static readonly Type GetterType = typeof(IGroupedPackInGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IGroupedPackIn);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.GroupedPackIn";

        public const string Name = "GroupedPackIn";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.XWPK;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var endTriggers = RecordCollection.Factory(RecordTypes.XWPK);
            var triggers = RecordCollection.Factory(RecordTypes.XWPK);
            var all = RecordCollection.Factory(
                RecordTypes.XWPK,
                RecordTypes.GNAM,
                RecordTypes.HNAM,
                RecordTypes.INAM,
                RecordTypes.JNAM,
                RecordTypes.LNAM,
                RecordTypes.XGOM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers,
                endRecordTypes: endTriggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(GroupedPackInBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class GroupedPackInSetterCommon
    {
        public static readonly GroupedPackInSetterCommon Instance = new GroupedPackInSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IGroupedPackIn item)
        {
            ClearPartial();
            item.GNAM.Clear();
            item.HNAM.Clear();
            item.INAM = default;
            item.JNAM.Clear();
            item.LNAM = Array.Empty<byte>();
            item.XGOM = default(Boolean);
        }
        
        #region Mutagen
        public void RemapLinks(IGroupedPackIn obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.GNAM.Relink(mapping);
            obj.HNAM.Relink(mapping);
            obj.JNAM.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IGroupedPackIn item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame.ReadSubrecord(RecordTypes.XWPK);
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: GroupedPackInBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class GroupedPackInCommon
    {
        public static readonly GroupedPackInCommon Instance = new GroupedPackInCommon();

        public GroupedPackIn.Mask<bool> GetEqualsMask(
            IGroupedPackInGetter item,
            IGroupedPackInGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new GroupedPackIn.Mask<bool>(false);
            ((GroupedPackInCommon)((IGroupedPackInGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IGroupedPackInGetter item,
            IGroupedPackInGetter rhs,
            GroupedPackIn.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.GNAM = item.GNAM.Equals(rhs.GNAM);
            ret.HNAM = item.HNAM.Equals(rhs.HNAM);
            ret.INAM = item.INAM == rhs.INAM;
            ret.JNAM = item.JNAM.Equals(rhs.JNAM);
            ret.LNAM = MemoryExtensions.SequenceEqual(item.LNAM.Span, rhs.LNAM.Span);
            ret.XGOM = item.XGOM == rhs.XGOM;
        }
        
        public string Print(
            IGroupedPackInGetter item,
            string? name = null,
            GroupedPackIn.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IGroupedPackInGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            GroupedPackIn.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"GroupedPackIn =>");
            }
            else
            {
                sb.AppendLine($"{name} (GroupedPackIn) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IGroupedPackInGetter item,
            StructuredStringBuilder sb,
            GroupedPackIn.Mask<bool>? printMask = null)
        {
            if (printMask?.GNAM ?? true)
            {
                sb.AppendItem(item.GNAM.FormKeyNullable, "GNAM");
            }
            if (printMask?.HNAM ?? true)
            {
                sb.AppendItem(item.HNAM.FormKeyNullable, "HNAM");
            }
            if ((printMask?.INAM ?? true)
                && item.INAM is {} INAMItem)
            {
                sb.AppendItem(INAMItem, "INAM");
            }
            if (printMask?.JNAM ?? true)
            {
                sb.AppendItem(item.JNAM.FormKeyNullable, "JNAM");
            }
            if (printMask?.LNAM ?? true)
            {
                sb.AppendLine($"LNAM => {SpanExt.ToHexString(item.LNAM)}");
            }
            if (printMask?.XGOM ?? true)
            {
                sb.AppendItem(item.XGOM, "XGOM");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IGroupedPackInGetter? lhs,
            IGroupedPackInGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)GroupedPackIn_FieldIndex.GNAM) ?? true))
            {
                if (!lhs.GNAM.Equals(rhs.GNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GroupedPackIn_FieldIndex.HNAM) ?? true))
            {
                if (!lhs.HNAM.Equals(rhs.HNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GroupedPackIn_FieldIndex.INAM) ?? true))
            {
                if (lhs.INAM != rhs.INAM) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GroupedPackIn_FieldIndex.JNAM) ?? true))
            {
                if (!lhs.JNAM.Equals(rhs.JNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GroupedPackIn_FieldIndex.LNAM) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.LNAM.Span, rhs.LNAM.Span)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GroupedPackIn_FieldIndex.XGOM) ?? true))
            {
                if (lhs.XGOM != rhs.XGOM) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IGroupedPackInGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.GNAM);
            hash.Add(item.HNAM);
            if (item.INAM is {} INAMitem)
            {
                hash.Add(INAMitem);
            }
            hash.Add(item.JNAM);
            hash.Add(item.LNAM);
            hash.Add(item.XGOM);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return GroupedPackIn.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IGroupedPackInGetter obj)
        {
            if (FormLinkInformation.TryFactory(obj.GNAM, out var GNAMInfo))
            {
                yield return GNAMInfo;
            }
            if (FormLinkInformation.TryFactory(obj.HNAM, out var HNAMInfo))
            {
                yield return HNAMInfo;
            }
            if (FormLinkInformation.TryFactory(obj.JNAM, out var JNAMInfo))
            {
                yield return JNAMInfo;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class GroupedPackInSetterTranslationCommon
    {
        public static readonly GroupedPackInSetterTranslationCommon Instance = new GroupedPackInSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IGroupedPackIn item,
            IGroupedPackInGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)GroupedPackIn_FieldIndex.GNAM) ?? true))
            {
                item.GNAM.SetTo(rhs.GNAM.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)GroupedPackIn_FieldIndex.HNAM) ?? true))
            {
                item.HNAM.SetTo(rhs.HNAM.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)GroupedPackIn_FieldIndex.INAM) ?? true))
            {
                item.INAM = rhs.INAM;
            }
            if ((copyMask?.GetShouldTranslate((int)GroupedPackIn_FieldIndex.JNAM) ?? true))
            {
                item.JNAM.SetTo(rhs.JNAM.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)GroupedPackIn_FieldIndex.LNAM) ?? true))
            {
                item.LNAM = rhs.LNAM.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)GroupedPackIn_FieldIndex.XGOM) ?? true))
            {
                item.XGOM = rhs.XGOM;
            }
        }
        
        #endregion
        
        public GroupedPackIn DeepCopy(
            IGroupedPackInGetter item,
            GroupedPackIn.TranslationMask? copyMask = null)
        {
            GroupedPackIn ret = (GroupedPackIn)((GroupedPackInCommon)((IGroupedPackInGetter)item).CommonInstance()!).GetNew();
            ((GroupedPackInSetterTranslationCommon)((IGroupedPackInGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public GroupedPackIn DeepCopy(
            IGroupedPackInGetter item,
            out GroupedPackIn.ErrorMask errorMask,
            GroupedPackIn.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            GroupedPackIn ret = (GroupedPackIn)((GroupedPackInCommon)((IGroupedPackInGetter)item).CommonInstance()!).GetNew();
            ((GroupedPackInSetterTranslationCommon)((IGroupedPackInGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = GroupedPackIn.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public GroupedPackIn DeepCopy(
            IGroupedPackInGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            GroupedPackIn ret = (GroupedPackIn)((GroupedPackInCommon)((IGroupedPackInGetter)item).CommonInstance()!).GetNew();
            ((GroupedPackInSetterTranslationCommon)((IGroupedPackInGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class GroupedPackIn
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GroupedPackIn_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => GroupedPackIn_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => GroupedPackInCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return GroupedPackInSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => GroupedPackInSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IGroupedPackInGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IGroupedPackInGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IGroupedPackInGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class GroupedPackInBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly GroupedPackInBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IGroupedPackInGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.GNAM,
                header: translationParams.ConvertToCustom(RecordTypes.GNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HNAM,
                header: translationParams.ConvertToCustom(RecordTypes.HNAM));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteNullable(
                writer: writer,
                item: item.INAM,
                header: translationParams.ConvertToCustom(RecordTypes.INAM),
                byteLength: 2);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.JNAM,
                header: translationParams.ConvertToCustom(RecordTypes.JNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.LNAM,
                header: translationParams.ConvertToCustom(RecordTypes.LNAM));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.XGOM,
                header: translationParams.ConvertToCustom(RecordTypes.XGOM));
        }

        public void Write(
            MutagenWriter writer,
            IGroupedPackInGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(writer, RecordTypes.XWPK)) { } // Start Marker
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, RecordTypes.XWPK)) { } // End Marker
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IGroupedPackInGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class GroupedPackInBinaryCreateTranslation
    {
        public static readonly GroupedPackInBinaryCreateTranslation Instance = new GroupedPackInBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IGroupedPackIn item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.GNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GNAM.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)GroupedPackIn_FieldIndex.GNAM;
                }
                case RecordTypeInts.HNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HNAM.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)GroupedPackIn_FieldIndex.HNAM;
                }
                case RecordTypeInts.INAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.INAM = BooleanBinaryTranslation<MutagenFrame>.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        byteLength: 2);
                    return (int)GroupedPackIn_FieldIndex.INAM;
                }
                case RecordTypeInts.JNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.JNAM.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)GroupedPackIn_FieldIndex.JNAM;
                }
                case RecordTypeInts.LNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)GroupedPackIn_FieldIndex.LNAM;
                }
                case RecordTypeInts.XGOM:
                {
                    item.XGOM = true;
                    return (int)GroupedPackIn_FieldIndex.XGOM;
                }
                case RecordTypeInts.XWPK: // End Marker
                {
                    frame.ReadSubrecord();
                    return ParseResult.Stop;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class GroupedPackInBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IGroupedPackInGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((GroupedPackInBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class GroupedPackInBinaryOverlay :
        PluginBinaryOverlay,
        IGroupedPackInGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GroupedPackIn_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => GroupedPackIn_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => GroupedPackInCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => GroupedPackInSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IGroupedPackInGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IGroupedPackInGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IGroupedPackInGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => GroupedPackInCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => GroupedPackInBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((GroupedPackInBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region GNAM
        private int? _GNAMLocation;
        public IFormLinkNullableGetter<IPackInGetter> GNAM => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IPackInGetter>(_package, _recordData, _GNAMLocation);
        #endregion
        #region HNAM
        private int? _HNAMLocation;
        public IFormLinkNullableGetter<IPlacedObjectGetter> HNAM => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IPlacedObjectGetter>(_package, _recordData, _HNAMLocation);
        #endregion
        #region INAM
        private int? _INAMLocation;
        public Boolean? INAM => _INAMLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _INAMLocation.Value, _package.MetaData.Constants)) >= 1 : default(Boolean?);
        #endregion
        #region JNAM
        private int? _JNAMLocation;
        public IFormLinkNullableGetter<IPackInGetter> JNAM => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IPackInGetter>(_package, _recordData, _JNAMLocation);
        #endregion
        #region LNAM
        private int? _LNAMLocation;
        public ReadOnlyMemorySlice<Byte> LNAM => _LNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _LNAMLocation.Value, _package.MetaData.Constants) : ReadOnlyMemorySlice<byte>.Empty;
        #endregion
        #region XGOM
        private int? _XGOMLocation;
        public Boolean XGOM => _XGOMLocation.HasValue ? true : default(Boolean);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected GroupedPackInBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IGroupedPackInGetter GroupedPackInFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream.ReadSubrecord(RecordTypes.XWPK);
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new GroupedPackInBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IGroupedPackInGetter GroupedPackInFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return GroupedPackInFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.GNAM:
                {
                    _GNAMLocation = (stream.Position - offset);
                    return (int)GroupedPackIn_FieldIndex.GNAM;
                }
                case RecordTypeInts.HNAM:
                {
                    _HNAMLocation = (stream.Position - offset);
                    return (int)GroupedPackIn_FieldIndex.HNAM;
                }
                case RecordTypeInts.INAM:
                {
                    _INAMLocation = (stream.Position - offset);
                    return (int)GroupedPackIn_FieldIndex.INAM;
                }
                case RecordTypeInts.JNAM:
                {
                    _JNAMLocation = (stream.Position - offset);
                    return (int)GroupedPackIn_FieldIndex.JNAM;
                }
                case RecordTypeInts.LNAM:
                {
                    _LNAMLocation = (stream.Position - offset);
                    return (int)GroupedPackIn_FieldIndex.LNAM;
                }
                case RecordTypeInts.XGOM:
                {
                    _XGOMLocation = (stream.Position - offset);
                    return (int)GroupedPackIn_FieldIndex.XGOM;
                }
                case RecordTypeInts.XWPK: // End Marker
                {
                    stream.ReadSubrecord();
                    return ParseResult.Stop;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            GroupedPackInMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IGroupedPackInGetter rhs) return false;
            return ((GroupedPackInCommon)((IGroupedPackInGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IGroupedPackInGetter? obj)
        {
            return ((GroupedPackInCommon)((IGroupedPackInGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((GroupedPackInCommon)((IGroupedPackInGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

