/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class SurfaceTreePatterns :
        IEquatable<ISurfaceTreePatternsGetter>,
        ILoquiObjectSetter<SurfaceTreePatterns>,
        ISurfaceTreePatterns
    {
        #region Ctor
        public SurfaceTreePatterns()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region SurfacePatterns
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IFormLinkGetter<ISurfacePatternGetter>[] _SurfacePatterns = ArrayExt.Create(65536, FormLink<ISurfacePatternGetter>.Null);
        public IFormLinkGetter<ISurfacePatternGetter>[] SurfacePatterns
        {
            get => this._SurfacePatterns;
            init => this._SurfacePatterns = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<IFormLinkGetter<ISurfacePatternGetter>> ISurfaceTreePatternsGetter.SurfacePatterns => _SurfacePatterns;
        #endregion

        #endregion
        #region GNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _GNAM;
        public MemorySlice<Byte>? GNAM
        {
            get => this._GNAM;
            set => this._GNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ISurfaceTreePatternsGetter.GNAM => this.GNAM;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SurfaceTreePatternsMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISurfaceTreePatternsGetter rhs) return false;
            return ((SurfaceTreePatternsCommon)((ISurfaceTreePatternsGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISurfaceTreePatternsGetter? obj)
        {
            return ((SurfaceTreePatternsCommon)((ISurfaceTreePatternsGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SurfaceTreePatternsCommon)((ISurfaceTreePatternsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.SurfacePatterns = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.GNAM = initialValue;
            }

            public Mask(
                TItem SurfacePatterns,
                TItem GNAM)
            {
                this.SurfacePatterns = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(SurfacePatterns, Enumerable.Empty<(int Index, TItem Value)>());
                this.GNAM = GNAM;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? SurfacePatterns;
            public TItem GNAM;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.SurfacePatterns, rhs.SurfacePatterns)) return false;
                if (!object.Equals(this.GNAM, rhs.GNAM)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.SurfacePatterns);
                hash.Add(this.GNAM);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (this.SurfacePatterns != null)
                {
                    if (!eval(this.SurfacePatterns.Overall)) return false;
                    if (this.SurfacePatterns.Specific != null)
                    {
                        foreach (var item in this.SurfacePatterns.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.GNAM)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (this.SurfacePatterns != null)
                {
                    if (eval(this.SurfacePatterns.Overall)) return true;
                    if (this.SurfacePatterns.Specific != null)
                    {
                        foreach (var item in this.SurfacePatterns.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.GNAM)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SurfaceTreePatterns.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                if (SurfacePatterns != null)
                {
                    obj.SurfacePatterns = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.SurfacePatterns.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (SurfacePatterns.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.SurfacePatterns.Specific = l;
                        foreach (var item in SurfacePatterns.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.GNAM = eval(this.GNAM);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(SurfaceTreePatterns.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, SurfaceTreePatterns.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(SurfaceTreePatterns.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.SurfacePatterns?.Overall ?? true)
                        && SurfacePatterns is {} SurfacePatternsItem)
                    {
                        sb.AppendLine("SurfacePatterns =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SurfacePatternsItem.Overall);
                            if (SurfacePatternsItem.Specific != null)
                            {
                                foreach (var subItem in SurfacePatternsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.GNAM ?? true)
                    {
                        sb.AppendItem(GNAM, "GNAM");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? SurfacePatterns;
            public Exception? GNAM;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                SurfaceTreePatterns_FieldIndex enu = (SurfaceTreePatterns_FieldIndex)index;
                switch (enu)
                {
                    case SurfaceTreePatterns_FieldIndex.SurfacePatterns:
                        return SurfacePatterns;
                    case SurfaceTreePatterns_FieldIndex.GNAM:
                        return GNAM;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                SurfaceTreePatterns_FieldIndex enu = (SurfaceTreePatterns_FieldIndex)index;
                switch (enu)
                {
                    case SurfaceTreePatterns_FieldIndex.SurfacePatterns:
                        this.SurfacePatterns = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case SurfaceTreePatterns_FieldIndex.GNAM:
                        this.GNAM = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                SurfaceTreePatterns_FieldIndex enu = (SurfaceTreePatterns_FieldIndex)index;
                switch (enu)
                {
                    case SurfaceTreePatterns_FieldIndex.SurfacePatterns:
                        this.SurfacePatterns = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case SurfaceTreePatterns_FieldIndex.GNAM:
                        this.GNAM = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (SurfacePatterns != null) return true;
                if (GNAM != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                if (SurfacePatterns is {} SurfacePatternsItem)
                {
                    sb.AppendLine("SurfacePatterns =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SurfacePatternsItem.Overall);
                        if (SurfacePatternsItem.Specific != null)
                        {
                            foreach (var subItem in SurfacePatternsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(GNAM, "GNAM");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.SurfacePatterns = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.SurfacePatterns?.Overall, rhs.SurfacePatterns?.Overall), Noggog.ExceptionExt.Combine(this.SurfacePatterns?.Specific, rhs.SurfacePatterns?.Specific));
                ret.GNAM = this.GNAM.Combine(rhs.GNAM);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool SurfacePatterns;
            public bool GNAM;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.SurfacePatterns = defaultOn;
                this.GNAM = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((SurfacePatterns, null));
                ret.Add((GNAM, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SurfaceTreePatternsCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SurfaceTreePatternsSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => SurfaceTreePatternsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SurfaceTreePatternsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static SurfaceTreePatterns CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new SurfaceTreePatterns();
            ((SurfaceTreePatternsSetterCommon)((ISurfaceTreePatternsGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SurfaceTreePatterns item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SurfaceTreePatternsSetterCommon)((ISurfaceTreePatternsGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static SurfaceTreePatterns GetNew()
        {
            return new SurfaceTreePatterns();
        }

    }
    #endregion

    #region Interface
    public partial interface ISurfaceTreePatterns :
        IFormLinkContainer,
        ILoquiObjectSetter<ISurfaceTreePatterns>,
        ISurfaceTreePatternsGetter
    {
        new IFormLinkGetter<ISurfacePatternGetter>[] SurfacePatterns { get; }
        new MemorySlice<Byte>? GNAM { get; set; }
    }

    public partial interface ISurfaceTreePatternsGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ISurfaceTreePatternsGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => SurfaceTreePatterns_Registration.Instance;
        ReadOnlyMemorySlice<IFormLinkGetter<ISurfacePatternGetter>> SurfacePatterns { get; }
        ReadOnlyMemorySlice<Byte>? GNAM { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SurfaceTreePatternsMixIn
    {
        public static void Clear(this ISurfaceTreePatterns item)
        {
            ((SurfaceTreePatternsSetterCommon)((ISurfaceTreePatternsGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SurfaceTreePatterns.Mask<bool> GetEqualsMask(
            this ISurfaceTreePatternsGetter item,
            ISurfaceTreePatternsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SurfaceTreePatternsCommon)((ISurfaceTreePatternsGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ISurfaceTreePatternsGetter item,
            string? name = null,
            SurfaceTreePatterns.Mask<bool>? printMask = null)
        {
            return ((SurfaceTreePatternsCommon)((ISurfaceTreePatternsGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ISurfaceTreePatternsGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SurfaceTreePatterns.Mask<bool>? printMask = null)
        {
            ((SurfaceTreePatternsCommon)((ISurfaceTreePatternsGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISurfaceTreePatternsGetter item,
            ISurfaceTreePatternsGetter rhs,
            SurfaceTreePatterns.TranslationMask? equalsMask = null)
        {
            return ((SurfaceTreePatternsCommon)((ISurfaceTreePatternsGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISurfaceTreePatterns lhs,
            ISurfaceTreePatternsGetter rhs)
        {
            ((SurfaceTreePatternsSetterTranslationCommon)((ISurfaceTreePatternsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ISurfaceTreePatterns lhs,
            ISurfaceTreePatternsGetter rhs,
            SurfaceTreePatterns.TranslationMask? copyMask = null)
        {
            ((SurfaceTreePatternsSetterTranslationCommon)((ISurfaceTreePatternsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ISurfaceTreePatterns lhs,
            ISurfaceTreePatternsGetter rhs,
            out SurfaceTreePatterns.ErrorMask errorMask,
            SurfaceTreePatterns.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SurfaceTreePatternsSetterTranslationCommon)((ISurfaceTreePatternsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SurfaceTreePatterns.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISurfaceTreePatterns lhs,
            ISurfaceTreePatternsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SurfaceTreePatternsSetterTranslationCommon)((ISurfaceTreePatternsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SurfaceTreePatterns DeepCopy(
            this ISurfaceTreePatternsGetter item,
            SurfaceTreePatterns.TranslationMask? copyMask = null)
        {
            return ((SurfaceTreePatternsSetterTranslationCommon)((ISurfaceTreePatternsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SurfaceTreePatterns DeepCopy(
            this ISurfaceTreePatternsGetter item,
            out SurfaceTreePatterns.ErrorMask errorMask,
            SurfaceTreePatterns.TranslationMask? copyMask = null)
        {
            return ((SurfaceTreePatternsSetterTranslationCommon)((ISurfaceTreePatternsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SurfaceTreePatterns DeepCopy(
            this ISurfaceTreePatternsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SurfaceTreePatternsSetterTranslationCommon)((ISurfaceTreePatternsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISurfaceTreePatterns item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((SurfaceTreePatternsSetterCommon)((ISurfaceTreePatternsGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum SurfaceTreePatterns_FieldIndex
    {
        SurfacePatterns = 0,
        GNAM = 1,
    }
    #endregion

    #region Registration
    internal partial class SurfaceTreePatterns_Registration : ILoquiRegistration
    {
        public static readonly SurfaceTreePatterns_Registration Instance = new SurfaceTreePatterns_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(SurfaceTreePatterns.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SurfaceTreePatterns.ErrorMask);

        public static readonly Type ClassType = typeof(SurfaceTreePatterns);

        public static readonly Type GetterType = typeof(ISurfaceTreePatternsGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISurfaceTreePatterns);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.SurfaceTreePatterns";

        public const string Name = "SurfaceTreePatterns";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(
                RecordTypes.FNAM,
                RecordTypes.GNAM);
            var all = RecordCollection.Factory(
                RecordTypes.FNAM,
                RecordTypes.GNAM,
                RecordTypes.XXXX);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(SurfaceTreePatternsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class SurfaceTreePatternsSetterCommon
    {
        public static readonly SurfaceTreePatternsSetterCommon Instance = new SurfaceTreePatternsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISurfaceTreePatterns item)
        {
            ClearPartial();
            item.SurfacePatterns.Fill(FormLink<ISurfacePatternGetter>.Null);
            item.GNAM = default;
        }
        
        #region Mutagen
        public void RemapLinks(ISurfaceTreePatterns obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.SurfacePatterns.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISurfaceTreePatterns item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: SurfaceTreePatternsBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class SurfaceTreePatternsCommon
    {
        public static readonly SurfaceTreePatternsCommon Instance = new SurfaceTreePatternsCommon();

        public SurfaceTreePatterns.Mask<bool> GetEqualsMask(
            ISurfaceTreePatternsGetter item,
            ISurfaceTreePatternsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SurfaceTreePatterns.Mask<bool>(false);
            ((SurfaceTreePatternsCommon)((ISurfaceTreePatternsGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISurfaceTreePatternsGetter item,
            ISurfaceTreePatternsGetter rhs,
            SurfaceTreePatterns.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.SurfacePatterns = EqualsMaskHelper.SpanEqualsHelper<IFormLinkGetter<ISurfacePatternGetter>>(
                item.SurfacePatterns,
                rhs.SurfacePatterns,
                (l, r) => object.Equals(l, r),
                include);
            ret.GNAM = MemorySliceExt.SequenceEqual(item.GNAM, rhs.GNAM);
        }
        
        public string Print(
            ISurfaceTreePatternsGetter item,
            string? name = null,
            SurfaceTreePatterns.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISurfaceTreePatternsGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SurfaceTreePatterns.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"SurfaceTreePatterns =>");
            }
            else
            {
                sb.AppendLine($"{name} (SurfaceTreePatterns) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISurfaceTreePatternsGetter item,
            StructuredStringBuilder sb,
            SurfaceTreePatterns.Mask<bool>? printMask = null)
        {
            if (printMask?.SurfacePatterns?.Overall ?? true)
            {
                sb.AppendLine("SurfacePatterns =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.SurfacePatterns)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.GNAM ?? true)
                && item.GNAM is {} GNAMItem)
            {
                sb.AppendLine($"GNAM => {SpanExt.ToHexString(GNAMItem)}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISurfaceTreePatternsGetter? lhs,
            ISurfaceTreePatternsGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)SurfaceTreePatterns_FieldIndex.SurfacePatterns) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual<IFormLinkGetter<ISurfacePatternGetter>>(lhs.SurfacePatterns.Span!, rhs.SurfacePatterns.Span!)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfaceTreePatterns_FieldIndex.GNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.GNAM, rhs.GNAM)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ISurfaceTreePatternsGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.SurfacePatterns);
            if (item.GNAM is {} GNAMItem)
            {
                hash.Add(GNAMItem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return SurfaceTreePatterns.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISurfaceTreePatternsGetter obj)
        {
            foreach (var item in obj.SurfacePatterns)
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class SurfaceTreePatternsSetterTranslationCommon
    {
        public static readonly SurfaceTreePatternsSetterTranslationCommon Instance = new SurfaceTreePatternsSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISurfaceTreePatterns item,
            ISurfaceTreePatternsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)SurfaceTreePatterns_FieldIndex.SurfacePatterns) ?? true))
            {
                item.SurfacePatterns.SetTo(rhs.SurfacePatterns.Select(x => new FormLink<ISurfacePatternGetter>(x.FormKey)));
            }
            if ((copyMask?.GetShouldTranslate((int)SurfaceTreePatterns_FieldIndex.GNAM) ?? true))
            {
                if(rhs.GNAM is {} GNAMrhs)
                {
                    item.GNAM = GNAMrhs.ToArray();
                }
                else
                {
                    item.GNAM = default;
                }
            }
        }
        
        #endregion
        
        public SurfaceTreePatterns DeepCopy(
            ISurfaceTreePatternsGetter item,
            SurfaceTreePatterns.TranslationMask? copyMask = null)
        {
            SurfaceTreePatterns ret = (SurfaceTreePatterns)((SurfaceTreePatternsCommon)((ISurfaceTreePatternsGetter)item).CommonInstance()!).GetNew();
            ((SurfaceTreePatternsSetterTranslationCommon)((ISurfaceTreePatternsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SurfaceTreePatterns DeepCopy(
            ISurfaceTreePatternsGetter item,
            out SurfaceTreePatterns.ErrorMask errorMask,
            SurfaceTreePatterns.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SurfaceTreePatterns ret = (SurfaceTreePatterns)((SurfaceTreePatternsCommon)((ISurfaceTreePatternsGetter)item).CommonInstance()!).GetNew();
            ((SurfaceTreePatternsSetterTranslationCommon)((ISurfaceTreePatternsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SurfaceTreePatterns.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SurfaceTreePatterns DeepCopy(
            ISurfaceTreePatternsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SurfaceTreePatterns ret = (SurfaceTreePatterns)((SurfaceTreePatternsCommon)((ISurfaceTreePatternsGetter)item).CommonInstance()!).GetNew();
            ((SurfaceTreePatternsSetterTranslationCommon)((ISurfaceTreePatternsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class SurfaceTreePatterns
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SurfaceTreePatterns_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => SurfaceTreePatterns_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SurfaceTreePatternsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return SurfaceTreePatternsSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SurfaceTreePatternsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISurfaceTreePatternsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ISurfaceTreePatternsGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ISurfaceTreePatternsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class SurfaceTreePatternsBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly SurfaceTreePatternsBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ISurfaceTreePatternsGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISurfacePatternGetter>>.Instance.Write(
                writer: writer,
                items: item.SurfacePatterns,
                recordType: translationParams.ConvertToCustom(RecordTypes.FNAM),
                overflowRecord: RecordTypes.XXXX,
                transl: (MutagenWriter subWriter, IFormLinkGetter<ISurfacePatternGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.GNAM,
                header: translationParams.ConvertToCustom(RecordTypes.GNAM),
                overflowRecord: RecordTypes.XXXX);
        }

        public void Write(
            MutagenWriter writer,
            ISurfaceTreePatternsGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ISurfaceTreePatternsGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class SurfaceTreePatternsBinaryCreateTranslation
    {
        public static readonly SurfaceTreePatternsBinaryCreateTranslation Instance = new SurfaceTreePatternsBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            ISurfaceTreePatterns item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FNAM:
                {
                    if (lastParsed.ShortCircuit((int)SurfaceTreePatterns_FieldIndex.SurfacePatterns, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SurfacePatterns.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISurfacePatternGetter>>.Instance.Parse(
                            reader: frame,
                            amount: 65536,
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)SurfaceTreePatterns_FieldIndex.SurfacePatterns;
                }
                case RecordTypeInts.GNAM:
                {
                    if (lastParsed.ShortCircuit((int)SurfaceTreePatterns_FieldIndex.GNAM, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)SurfaceTreePatterns_FieldIndex.GNAM;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class SurfaceTreePatternsBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ISurfaceTreePatternsGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SurfaceTreePatternsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class SurfaceTreePatternsBinaryOverlay :
        PluginBinaryOverlay,
        ISurfaceTreePatternsGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SurfaceTreePatterns_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => SurfaceTreePatterns_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SurfaceTreePatternsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SurfaceTreePatternsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISurfaceTreePatternsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ISurfaceTreePatternsGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ISurfaceTreePatternsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SurfaceTreePatternsCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => SurfaceTreePatternsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SurfaceTreePatternsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region SurfacePatterns
        private int? _SurfacePatternsLengthOverride;
        private int? _SurfacePatternsLocation;
        private readonly static ReadOnlyMemorySlice<IFormLinkGetter<ISurfacePatternGetter>> _defaultSurfacePatterns = ArrayExt.Create(65536, FormLink<ISurfacePatternGetter>.Null);
        public ReadOnlyMemorySlice<IFormLinkGetter<ISurfacePatternGetter>> SurfacePatterns => _SurfacePatternsLocation.HasValue ? BinaryOverlayArrayHelper.FormLinkSliceFromFixedSize<ISurfacePatternGetter>(HeaderTranslation.ExtractSubrecordMemory(_recordData, _SurfacePatternsLocation.Value, _package.MetaData.Constants, TypedParseParams.FromLengthOverride(_SurfacePatternsLengthOverride)), amount: 65536, masterReferences: _package.MetaData.MasterReferences) : _defaultSurfacePatterns;
        #endregion
        #region GNAM
        private int? _GNAMLocation;
        private int? _GNAMLengthOverride;
        public ReadOnlyMemorySlice<Byte>? GNAM => PluginUtilityTranslation.ReadByteArrayWithOverflow(
            _recordData,
            _package.MetaData.Constants,
            _GNAMLocation,
            _GNAMLengthOverride);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SurfaceTreePatternsBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ISurfaceTreePatternsGetter SurfaceTreePatternsFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new SurfaceTreePatternsBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ISurfaceTreePatternsGetter SurfaceTreePatternsFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return SurfaceTreePatternsFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FNAM:
                {
                    if (lastParsed.ShortCircuit((int)SurfaceTreePatterns_FieldIndex.SurfacePatterns, translationParams)) return ParseResult.Stop;
                    _SurfacePatternsLocation = (stream.Position - offset);
                    _SurfacePatternsLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)SurfaceTreePatterns_FieldIndex.SurfacePatterns;
                }
                case RecordTypeInts.GNAM:
                {
                    if (lastParsed.ShortCircuit((int)SurfaceTreePatterns_FieldIndex.GNAM, translationParams)) return ParseResult.Stop;
                    _GNAMLocation = (stream.Position - offset);
                    _GNAMLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)SurfaceTreePatterns_FieldIndex.GNAM;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SurfaceTreePatternsMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISurfaceTreePatternsGetter rhs) return false;
            return ((SurfaceTreePatternsCommon)((ISurfaceTreePatternsGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISurfaceTreePatternsGetter? obj)
        {
            return ((SurfaceTreePatternsCommon)((ISurfaceTreePatternsGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SurfaceTreePatternsCommon)((ISurfaceTreePatternsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

